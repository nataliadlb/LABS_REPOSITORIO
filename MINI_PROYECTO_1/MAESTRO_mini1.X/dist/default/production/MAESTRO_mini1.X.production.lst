

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 08:17:03 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    34                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.20
    43                           ; Generated 12/02/2020 GMT
    44                           ; 
    45                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F887 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0088                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  008F                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0097                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009A                     	;# 
   134  009B                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009E                     	;# 
   138  009F                     	;# 
   139  0105                     	;# 
   140  0107                     	;# 
   141  0108                     	;# 
   142  0109                     	;# 
   143  010C                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  0185                     	;# 
   149  0187                     	;# 
   150  0188                     	;# 
   151  0189                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0088                     	;# 
   194  0089                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  008F                     	;# 
   199  0090                     	;# 
   200  0091                     	;# 
   201  0092                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0094                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0098                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  0105                     	;# 
   218  0107                     	;# 
   219  0108                     	;# 
   220  0109                     	;# 
   221  010C                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0187                     	;# 
   228  0188                     	;# 
   229  0189                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232  0000                     	;# 
   233  0001                     	;# 
   234  0002                     	;# 
   235  0003                     	;# 
   236  0004                     	;# 
   237  0005                     	;# 
   238  0006                     	;# 
   239  0007                     	;# 
   240  0008                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000D                     	;# 
   246  000E                     	;# 
   247  000E                     	;# 
   248  000F                     	;# 
   249  0010                     	;# 
   250  0011                     	;# 
   251  0012                     	;# 
   252  0013                     	;# 
   253  0014                     	;# 
   254  0015                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001D                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  0081                     	;# 
   268  0085                     	;# 
   269  0086                     	;# 
   270  0087                     	;# 
   271  0088                     	;# 
   272  0089                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  008F                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0094                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  0105                     	;# 
   296  0107                     	;# 
   297  0108                     	;# 
   298  0109                     	;# 
   299  010C                     	;# 
   300  010C                     	;# 
   301  010D                     	;# 
   302  010E                     	;# 
   303  010F                     	;# 
   304  0185                     	;# 
   305  0187                     	;# 
   306  0188                     	;# 
   307  0189                     	;# 
   308  018C                     	;# 
   309  018D                     	;# 
   310  0000                     	;# 
   311  0001                     	;# 
   312  0002                     	;# 
   313  0003                     	;# 
   314  0004                     	;# 
   315  0005                     	;# 
   316  0006                     	;# 
   317  0007                     	;# 
   318  0008                     	;# 
   319  0009                     	;# 
   320  000A                     	;# 
   321  000B                     	;# 
   322  000C                     	;# 
   323  000D                     	;# 
   324  000E                     	;# 
   325  000E                     	;# 
   326  000F                     	;# 
   327  0010                     	;# 
   328  0011                     	;# 
   329  0012                     	;# 
   330  0013                     	;# 
   331  0014                     	;# 
   332  0015                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001D                     	;# 
   343  001E                     	;# 
   344  001F                     	;# 
   345  0081                     	;# 
   346  0085                     	;# 
   347  0086                     	;# 
   348  0087                     	;# 
   349  0088                     	;# 
   350  0089                     	;# 
   351  008C                     	;# 
   352  008D                     	;# 
   353  008E                     	;# 
   354  008F                     	;# 
   355  0090                     	;# 
   356  0091                     	;# 
   357  0092                     	;# 
   358  0093                     	;# 
   359  0093                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0097                     	;# 
   365  0098                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009C                     	;# 
   370  009D                     	;# 
   371  009E                     	;# 
   372  009F                     	;# 
   373  0105                     	;# 
   374  0107                     	;# 
   375  0108                     	;# 
   376  0109                     	;# 
   377  010C                     	;# 
   378  010C                     	;# 
   379  010D                     	;# 
   380  010E                     	;# 
   381  010F                     	;# 
   382  0185                     	;# 
   383  0187                     	;# 
   384  0188                     	;# 
   385  0189                     	;# 
   386  018C                     	;# 
   387  018D                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  000E                     	;# 
   404  000F                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0013                     	;# 
   409  0014                     	;# 
   410  0015                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  001D                     	;# 
   421  001E                     	;# 
   422  001F                     	;# 
   423  0081                     	;# 
   424  0085                     	;# 
   425  0086                     	;# 
   426  0087                     	;# 
   427  0088                     	;# 
   428  0089                     	;# 
   429  008C                     	;# 
   430  008D                     	;# 
   431  008E                     	;# 
   432  008F                     	;# 
   433  0090                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0093                     	;# 
   438  0093                     	;# 
   439  0094                     	;# 
   440  0095                     	;# 
   441  0096                     	;# 
   442  0097                     	;# 
   443  0098                     	;# 
   444  0099                     	;# 
   445  009A                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  009F                     	;# 
   451  0105                     	;# 
   452  0107                     	;# 
   453  0108                     	;# 
   454  0109                     	;# 
   455  010C                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  010F                     	;# 
   460  0185                     	;# 
   461  0187                     	;# 
   462  0188                     	;# 
   463  0189                     	;# 
   464  018C                     	;# 
   465  018D                     	;# 
   466  0000                     	;# 
   467  0001                     	;# 
   468  0002                     	;# 
   469  0003                     	;# 
   470  0004                     	;# 
   471  0005                     	;# 
   472  0006                     	;# 
   473  0007                     	;# 
   474  0008                     	;# 
   475  0009                     	;# 
   476  000A                     	;# 
   477  000B                     	;# 
   478  000C                     	;# 
   479  000D                     	;# 
   480  000E                     	;# 
   481  000E                     	;# 
   482  000F                     	;# 
   483  0010                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0014                     	;# 
   488  0015                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  001D                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  0081                     	;# 
   502  0085                     	;# 
   503  0086                     	;# 
   504  0087                     	;# 
   505  0088                     	;# 
   506  0089                     	;# 
   507  008C                     	;# 
   508  008D                     	;# 
   509  008E                     	;# 
   510  008F                     	;# 
   511  0090                     	;# 
   512  0091                     	;# 
   513  0092                     	;# 
   514  0093                     	;# 
   515  0093                     	;# 
   516  0093                     	;# 
   517  0094                     	;# 
   518  0095                     	;# 
   519  0096                     	;# 
   520  0097                     	;# 
   521  0098                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  009F                     	;# 
   529  0105                     	;# 
   530  0107                     	;# 
   531  0108                     	;# 
   532  0109                     	;# 
   533  010C                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  010F                     	;# 
   538  0185                     	;# 
   539  0187                     	;# 
   540  0188                     	;# 
   541  0189                     	;# 
   542  018C                     	;# 
   543  018D                     	;# 
   544                           
   545                           	psect	strings
   546  0381                     __pstrings:
   547  0381                     stringtab:
   548  0381                     __stringtab:
   549                           
   550                           ;	String table - string pointers are 1 byte each
   551  0381  1BFF               	btfsc	btemp+1,7
   552  0382  2B8B               	ljmp	stringcode
   553  0383  1383               	bcf	3,7
   554  0384  187F               	btfsc	btemp+1,0
   555  0385  1783               	bsf	3,7
   556  0386  0800               	movf	0,w
   557  0387  0A84               	incf	4,f
   558  0388  1903               	skipnz
   559  0389  0AFF               	incf	btemp+1,f
   560  038A  0008               	return
   561  038B                     stringcode:
   562  038B                     stringdir:
   563  038B  3003               	movlw	high stringdir
   564  038C  008A               	movwf	10
   565  038D  0804               	movf	4,w
   566  038E  0A84               	incf	4,f
   567  038F  0782               	addwf	2,f
   568  0390                     __stringbase:
   569  0390  3400               	retlw	0
   570  0391                     __end_of__stringtab:
   571  0391                     _dpowers:
   572  0391  3401               	retlw	1
   573  0392  3400               	retlw	0
   574  0393  340A               	retlw	10
   575  0394  3400               	retlw	0
   576  0395  3464               	retlw	100
   577  0396  3400               	retlw	0
   578  0397  34E8               	retlw	232
   579  0398  3403               	retlw	3
   580  0399  3410               	retlw	16
   581  039A  3427               	retlw	39
   582  039B                     __end_of_dpowers:
   583  0013                     _SSPBUF	set	19
   584  0014                     _SSPCON	set	20
   585  001A                     _RCREG	set	26
   586  0019                     _TXREG	set	25
   587  000B                     _INTCONbits	set	11
   588  0018                     _RCSTAbits	set	24
   589  0009                     _PORTEbits	set	9
   590  0007                     _PORTCbits	set	7
   591  0009                     _PORTE	set	9
   592  0008                     _PORTD	set	8
   593  0007                     _PORTC	set	7
   594  0005                     _PORTA	set	5
   595  0006                     _PORTB	set	6
   596  0065                     _RCIF	set	101
   597  003A                     _RC2	set	58
   598  0094                     _SSPSTATbits	set	148
   599  0094                     _SSPSTAT	set	148
   600  008C                     _PIE1bits	set	140
   601  0099                     _SPBRG	set	153
   602  009A                     _SPBRGH	set	154
   603  0098                     _TXSTAbits	set	152
   604  008F                     _OSCCONbits	set	143
   605  0089                     _TRISE	set	137
   606  0088                     _TRISD	set	136
   607  0086                     _TRISB	set	134
   608  0085                     _TRISA	set	133
   609  043B                     _TRISC3	set	1083
   610  043D                     _TRISC5	set	1085
   611  04C1                     _TRMT	set	1217
   612  043A                     _TRISC2	set	1082
   613  0189                     _ANSELH	set	393
   614  0188                     _ANSEL	set	392
   615  039B                     STR_1:
   616  039B  3453               	retlw	83	;'S'
   617  039C  3431               	retlw	49	;'1'
   618  039D  343A               	retlw	58	;':'
   619  039E  3420               	retlw	32	;' '
   620  039F  3420               	retlw	32	;' '
   621  03A0  3420               	retlw	32	;' '
   622  03A1  3453               	retlw	83	;'S'
   623  03A2  3432               	retlw	50	;'2'
   624  03A3  343A               	retlw	58	;':'
   625  03A4  3420               	retlw	32	;' '
   626  03A5  3420               	retlw	32	;' '
   627  03A6  3420               	retlw	32	;' '
   628  03A7  3453               	retlw	83	;'S'
   629  03A8  3433               	retlw	51	;'3'
   630  03A9  343A               	retlw	58	;':'
   631  03AA  3400               	retlw	0
   632  03AB                     STR_2:
   633  03AB  3463               	retlw	99	;'c'
   634  03AC  346F               	retlw	111	;'o'
   635  03AD  346E               	retlw	110	;'n'
   636  03AE  3474               	retlw	116	;'t'
   637  03AF  343A               	retlw	58	;':'
   638  03B0  3420               	retlw	32	;' '
   639  03B1  3420               	retlw	32	;' '
   640  03B2  340A               	retlw	10
   641  03B3  3400               	retlw	0
   642  03B4                     STR_3:
   643  03B4  3425               	retlw	37	;'%'
   644  03B5  342E               	retlw	46	;'.'
   645  03B6  3433               	retlw	51	;'3'
   646  03B7  3469               	retlw	105	;'i'
   647  03B8  3400               	retlw	0
   648                           
   649                           	psect	cinit
   650  000F                     start_initialization:	
   651                           ; #config settings
   652                           
   653  000F                     __initialization:
   654                           
   655                           ; Clear objects allocated to COMMON
   656  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   657  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   658                           
   659                           ; Clear objects allocated to BANK0
   660  0011  1383               	bcf	3,7	;select IRP bank0
   661  0012  3020               	movlw	low __pbssBANK0
   662  0013  0084               	movwf	4
   663  0014  303C               	movlw	low (__pbssBANK0+28)
   664  0015  120A  118A  24F7  120A  118A  	fcall	clear_ram0
   665  001A                     end_of_initialization:	
   666                           ;End of C runtime variable initialization code
   667                           
   668  001A                     __end_of__initialization:
   669  001A  0183               	clrf	3
   670  001B  120A  118A  2983   	ljmp	_main	;jump to C main() function
   671                           
   672                           	psect	bssCOMMON
   673  007A                     __pbssCOMMON:
   674  007A                     _cont:
   675  007A                     	ds	1
   676  007B                     _hola_esclavo:
   677  007B                     	ds	1
   678                           
   679                           	psect	bssBANK0
   680  0020                     __pbssBANK0:
   681  0020                     _data_total:
   682  0020                     	ds	20
   683  0034                     _data:
   684  0034                     	ds	8
   685                           
   686                           	psect	clrtext
   687  04F7                     clear_ram0:	
   688                           ;	Called with FSR containing the base address, and
   689                           ;	W with the last address+1
   690                           
   691  04F7  0064               	clrwdt	;clear the watchdog before getting into this loop
   692  04F8                     clrloop0:
   693  04F8  0180               	clrf	0	;clear RAM location pointed to by FSR
   694  04F9  0A84               	incf	4,f	;increment pointer
   695  04FA  0604               	xorwf	4,w	;XOR with final address
   696  04FB  1903               	btfsc	3,2	;have we reached the end yet?
   697  04FC  3400               	retlw	0	;all done for this memory range, return
   698  04FD  0604               	xorwf	4,w	;XOR again to restore value
   699  04FE  2CF8               	goto	clrloop0	;do the next byte
   700                           
   701                           	psect	cstackCOMMON
   702  0070                     __pcstackCOMMON:
   703  0070                     ?_isdigit:
   704  0070                     ?_setup:	
   705                           ; 1 bit 
   706                           
   707  0070                     ?_Lcd_Init:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_Lcd_Clear:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_spiWrite:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ?_spiRead:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?_ADC_to_string:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_Write_USART:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     ?_Show_val_LCD:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_initOsc:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ?_USART_Init_BaudRate:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ?_USART_Init:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ?_USART_INTERRUPT:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0070                     ?_Lcd_Port:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0070                     ?_Lcd_Cmd:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0070                     ?_ISR:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ??_ISR:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_main:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0070                     ?_Lcd_Write_Char:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  0070                     ?_spiReceiveWait:	
   759                           ; 1 bytes @ 0x0
   760                           
   761                           
   762                           ; 1 bytes @ 0x0
   763  0070                     	ds	2
   764  0072                     ??_spiWrite:
   765  0072                     ??_spiRead:	
   766                           ; 1 bytes @ 0x2
   767                           
   768  0072                     ??_Write_USART:	
   769                           ; 1 bytes @ 0x2
   770                           
   771  0072                     ??_initOsc:	
   772                           ; 1 bytes @ 0x2
   773                           
   774  0072                     ??_USART_Init_BaudRate:	
   775                           ; 1 bytes @ 0x2
   776                           
   777  0072                     ??_USART_Init:	
   778                           ; 1 bytes @ 0x2
   779                           
   780  0072                     ??_USART_INTERRUPT:	
   781                           ; 1 bytes @ 0x2
   782                           
   783  0072                     ?_spiInit:	
   784                           ; 1 bytes @ 0x2
   785                           
   786  0072                     ??_Lcd_Port:	
   787                           ; 1 bytes @ 0x2
   788                           
   789  0072                     ??_isdigit:	
   790                           ; 1 bytes @ 0x2
   791                           
   792  0072                     ??_spiReceiveWait:	
   793                           ; 1 bytes @ 0x2
   794                           
   795  0072                     ?___bmul:	
   796                           ; 1 bytes @ 0x2
   797                           
   798  0072                     ?___lwdiv:	
   799                           ; 1 bytes @ 0x2
   800                           
   801  0072                     Lcd_Port@a:	
   802                           ; 2 bytes @ 0x2
   803                           
   804  0072                     Write_USART@a:	
   805                           ; 1 bytes @ 0x2
   806                           
   807  0072                     spiInit@sDataSample:	
   808                           ; 1 bytes @ 0x2
   809                           
   810  0072                     spiWrite@dat:	
   811                           ; 1 bytes @ 0x2
   812                           
   813  0072                     ___bmul@multiplicand:	
   814                           ; 1 bytes @ 0x2
   815                           
   816  0072                     _isdigit$960:	
   817                           ; 1 bytes @ 0x2
   818                           
   819  0072                     ___lwdiv@divisor:	
   820                           ; 1 bytes @ 0x2
   821                           
   822                           
   823                           ; 2 bytes @ 0x2
   824  0072                     	ds	1
   825  0073                     ?_Write_USART_String:
   826  0073                     ??_Lcd_Cmd:	
   827                           ; 1 bytes @ 0x3
   828                           
   829  0073                     ??_Lcd_Write_Char:	
   830                           ; 1 bytes @ 0x3
   831                           
   832  0073                     ??___bmul:	
   833                           ; 1 bytes @ 0x3
   834                           
   835  0073                     spiInit@sClockIdle:	
   836                           ; 1 bytes @ 0x3
   837                           
   838  0073                     isdigit@c:	
   839                           ; 1 bytes @ 0x3
   840                           
   841  0073                     Write_USART_String@a:	
   842                           ; 1 bytes @ 0x3
   843                           
   844                           
   845                           ; 2 bytes @ 0x3
   846  0073                     	ds	1
   847  0074                     initOsc@IRCF:
   848  0074                     Lcd_Write_Char@a:	
   849                           ; 1 bytes @ 0x4
   850                           
   851  0074                     spiInit@sTransmitEdge:	
   852                           ; 1 bytes @ 0x4
   853                           
   854  0074                     ___bmul@product:	
   855                           ; 1 bytes @ 0x4
   856                           
   857  0074                     ___lwdiv@dividend:	
   858                           ; 1 bytes @ 0x4
   859                           
   860                           
   861                           ; 2 bytes @ 0x4
   862  0074                     	ds	1
   863  0075                     ?_Lcd_Write_String:
   864  0075                     ??_Write_USART_String:	
   865                           ; 1 bytes @ 0x5
   866                           
   867  0075                     ??_spiInit:	
   868                           ; 1 bytes @ 0x5
   869                           
   870  0075                     Lcd_Cmd@a:	
   871                           ; 1 bytes @ 0x5
   872                           
   873  0075                     spiInit@sType:	
   874                           ; 1 bytes @ 0x5
   875                           
   876  0075                     ___bmul@multiplier:	
   877                           ; 1 bytes @ 0x5
   878                           
   879  0075                     Lcd_Write_String@a:	
   880                           ; 1 bytes @ 0x5
   881                           
   882                           
   883                           ; 2 bytes @ 0x5
   884  0075                     	ds	1
   885  0076                     ??_setup:
   886  0076                     ??_Lcd_Init:	
   887                           ; 1 bytes @ 0x6
   888                           
   889  0076                     ??_Lcd_Clear:	
   890                           ; 1 bytes @ 0x6
   891                           
   892  0076                     ?_Lcd_Set_Cursor:	
   893                           ; 1 bytes @ 0x6
   894                           
   895  0076                     ??___lwdiv:	
   896                           ; 1 bytes @ 0x6
   897                           
   898  0076                     Lcd_Set_Cursor@b:	
   899                           ; 1 bytes @ 0x6
   900                           
   901  0076                     Write_USART_String@i:	
   902                           ; 1 bytes @ 0x6
   903                           
   904                           
   905                           ; 1 bytes @ 0x6
   906  0076                     	ds	1
   907  0077                     ??_Lcd_Set_Cursor:
   908  0077                     ??_Lcd_Write_String:	
   909                           ; 1 bytes @ 0x7
   910                           
   911  0077                     ___lwdiv@quotient:	
   912                           ; 1 bytes @ 0x7
   913                           
   914                           
   915                           ; 2 bytes @ 0x7
   916  0077                     	ds	1
   917  0078                     Lcd_Set_Cursor@a:
   918                           
   919                           ; 1 bytes @ 0x8
   920  0078                     	ds	1
   921  0079                     Lcd_Set_Cursor@temp:
   922  0079                     ___lwdiv@counter:	
   923                           ; 1 bytes @ 0x9
   924                           
   925                           
   926                           ; 1 bytes @ 0x9
   927  0079                     	ds	1
   928                           
   929                           	psect	cstackBANK0
   930  003C                     __pcstackBANK0:
   931  003C                     ?___lwmod:
   932  003C                     Lcd_Write_String@i:	
   933                           ; 2 bytes @ 0x0
   934                           
   935  003C                     ___lwmod@divisor:	
   936                           ; 2 bytes @ 0x0
   937                           
   938                           
   939                           ; 2 bytes @ 0x0
   940  003C                     	ds	2
   941  003E                     ??_Show_val_LCD:
   942  003E                     ___lwmod@dividend:	
   943                           ; 1 bytes @ 0x2
   944                           
   945                           
   946                           ; 2 bytes @ 0x2
   947  003E                     	ds	2
   948  0040                     ??___lwmod:
   949                           
   950                           ; 1 bytes @ 0x4
   951  0040                     	ds	1
   952  0041                     ___lwmod@counter:
   953                           
   954                           ; 1 bytes @ 0x5
   955  0041                     	ds	1
   956  0042                     ?_sprintf:
   957  0042                     sprintf@f:	
   958                           ; 2 bytes @ 0x6
   959                           
   960                           
   961                           ; 1 bytes @ 0x6
   962  0042                     	ds	3
   963  0045                     ??_sprintf:
   964                           
   965                           ; 1 bytes @ 0x9
   966  0045                     	ds	3
   967  0048                     sprintf@ap:
   968                           
   969                           ; 1 bytes @ 0xC
   970  0048                     	ds	1
   971  0049                     sprintf@flag:
   972                           
   973                           ; 1 bytes @ 0xD
   974  0049                     	ds	1
   975  004A                     sprintf@sp:
   976                           
   977                           ; 1 bytes @ 0xE
   978  004A                     	ds	1
   979  004B                     sprintf@val:
   980                           
   981                           ; 2 bytes @ 0xF
   982  004B                     	ds	2
   983  004D                     sprintf@prec:
   984                           
   985                           ; 1 bytes @ 0x11
   986  004D                     	ds	1
   987  004E                     sprintf@c:
   988                           
   989                           ; 1 bytes @ 0x12
   990  004E                     	ds	1
   991  004F                     ??_ADC_to_string:
   992                           
   993                           ; 1 bytes @ 0x13
   994  004F                     	ds	3
   995  0052                     ??_main:
   996                           
   997                           ; 1 bytes @ 0x16
   998  0052                     	ds	3
   999                           
  1000                           	psect	maintext
  1001  0183                     __pmaintext:	
  1002 ;;
  1003 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1004 ;;
  1005 ;; *************** function _main *****************
  1006 ;; Defined at:
  1007 ;;		line 85 in file "main_maestro.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;		None
  1010 ;; Auto vars:     Size  Location     Type
  1011 ;;		None
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1016 ;; Tracked objects:
  1017 ;;		On entry : B00/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1021 ;;      Params:         0       0       0       0       0
  1022 ;;      Locals:         0       0       0       0       0
  1023 ;;      Temps:          0       3       0       0       0
  1024 ;;      Totals:         0       3       0       0       0
  1025 ;;Total ram usage:        3 bytes
  1026 ;; Hardware stack levels required when called:    5
  1027 ;; This function calls:
  1028 ;;		_ADC_to_string
  1029 ;;		_Lcd_Clear
  1030 ;;		_Lcd_Init
  1031 ;;		_Lcd_Set_Cursor
  1032 ;;		_Lcd_Write_String
  1033 ;;		_Show_val_LCD
  1034 ;;		_Write_USART
  1035 ;;		_Write_USART_String
  1036 ;;		_setup
  1037 ;;		_spiRead
  1038 ;;		_spiWrite
  1039 ;; This function is called by:
  1040 ;;		Startup code after reset
  1041 ;; This function uses a non-reentrant model
  1042 ;;
  1043                           
  1044                           
  1045                           ;psect for function _main
  1046  0183                     _main:
  1047  0183                     l1793:	
  1048                           ;incstack = 0
  1049                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1050                           
  1051                           
  1052                           ;main_maestro.c: 86:     setup();
  1053  0183  120A  118A  23B9  120A  118A  	fcall	_setup
  1054  0188                     l1795:
  1055                           
  1056                           ;main_maestro.c: 87:     PORTB = 0;
  1057  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1058  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1059  018A  0186               	clrf	6	;volatile
  1060  018B                     l1797:
  1061                           
  1062                           ;main_maestro.c: 88:     cont = 0;
  1063  018B  01FA               	clrf	_cont
  1064  018C                     l1799:
  1065                           
  1066                           ;main_maestro.c: 90:     Lcd_Init();
  1067  018C  120A  118A  2270  120A  118A  	fcall	_Lcd_Init
  1068  0191                     l1801:
  1069                           
  1070                           ;main_maestro.c: 91:     Lcd_Clear();
  1071  0191  120A  118A  24D5  120A  118A  	fcall	_Lcd_Clear
  1072  0196                     l1803:
  1073                           
  1074                           ;main_maestro.c: 92:     Lcd_Set_Cursor(1,2);
  1075  0196  3002               	movlw	2
  1076  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1077  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1078  0199  00D2               	movwf	??_main
  1079  019A  0852               	movf	??_main,w
  1080  019B  00F6               	movwf	Lcd_Set_Cursor@b
  1081  019C  3001               	movlw	1
  1082  019D  120A  118A  241A  120A  118A  	fcall	_Lcd_Set_Cursor
  1083  01A2                     l1805:
  1084                           
  1085                           ;main_maestro.c: 93:     Lcd_Write_String("S1:   S2:   S3:");
  1086  01A2  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1087  01A3  00F5               	movwf	Lcd_Write_String@a
  1088  01A4  3080               	movlw	128
  1089  01A5  00F6               	movwf	Lcd_Write_String@a+1
  1090  01A6  120A  118A  22BB  120A  118A  	fcall	_Lcd_Write_String
  1091  01AB                     l1807:
  1092                           
  1093                           ;main_maestro.c: 100:         RC2 = 0;
  1094  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1095  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1096  01AD  1107               	bcf	7,2	;volatile
  1097  01AE                     l1809:
  1098                           
  1099                           ;main_maestro.c: 101:        _delay((unsigned long)((1)*(8000000/4000.0)));
  1100  01AE  3003               	movlw	3
  1101  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1102  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1103  01B1  00D3               	movwf	??_main+1
  1104  01B2  3097               	movlw	151
  1105  01B3  00D2               	movwf	??_main
  1106  01B4                     u1047:
  1107  01B4  0BD2               	decfsz	??_main,f
  1108  01B5  29B4               	goto	u1047
  1109  01B6  0BD3               	decfsz	??_main+1,f
  1110  01B7  29B4               	goto	u1047
  1111  01B8                     l1811:
  1112                           
  1113                           ;main_maestro.c: 103:        spiWrite(hola_esclavo);
  1114  01B8  3000               	movlw	0
  1115  01B9  120A  118A  2515  120A  118A  	fcall	_spiWrite
  1116  01BE                     l1813:
  1117                           
  1118                           ;main_maestro.c: 104:        cont = spiRead();
  1119  01BE  120A  118A  24EE  120A  118A  	fcall	_spiRead
  1120  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1121  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1122  01C5  00D2               	movwf	??_main
  1123  01C6  0852               	movf	??_main,w
  1124  01C7  00FA               	movwf	_cont
  1125  01C8                     l1815:
  1126                           
  1127                           ;main_maestro.c: 106:        _delay((unsigned long)((1)*(8000000/4000.0)));
  1128  01C8  3003               	movlw	3
  1129  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1130  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1131  01CB  00D3               	movwf	??_main+1
  1132  01CC  3097               	movlw	151
  1133  01CD  00D2               	movwf	??_main
  1134  01CE                     u1057:
  1135  01CE  0BD2               	decfsz	??_main,f
  1136  01CF  29CE               	goto	u1057
  1137  01D0  0BD3               	decfsz	??_main+1,f
  1138  01D1  29CE               	goto	u1057
  1139  01D2                     l1817:
  1140                           
  1141                           ;main_maestro.c: 107:        RC2 = 1;
  1142  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1143  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1144  01D4  1507               	bsf	7,2	;volatile
  1145  01D5                     l1819:
  1146                           
  1147                           ;main_maestro.c: 109:        _delay((unsigned long)((100)*(8000000/4000.0)));
  1148  01D5  3002               	movlw	2
  1149  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1150  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1151  01D8  00D4               	movwf	??_main+2
  1152  01D9  3004               	movlw	4
  1153  01DA  00D3               	movwf	??_main+1
  1154  01DB  30B9               	movlw	185
  1155  01DC  00D2               	movwf	??_main
  1156  01DD                     u1067:
  1157  01DD  0BD2               	decfsz	??_main,f
  1158  01DE  29DD               	goto	u1067
  1159  01DF  0BD3               	decfsz	??_main+1,f
  1160  01E0  29DD               	goto	u1067
  1161  01E1  0BD4               	decfsz	??_main+2,f
  1162  01E2  29DD               	goto	u1067
  1163  01E3  29E4               	nop2
  1164  01E4                     l1821:
  1165                           
  1166                           ;main_maestro.c: 111:         Write_USART_String("cont:  \n");
  1167  01E4  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1168  01E5  00F3               	movwf	Write_USART_String@a
  1169  01E6  3080               	movlw	128
  1170  01E7  00F4               	movwf	Write_USART_String@a+1
  1171  01E8  120A  118A  23EF  120A  118A  	fcall	_Write_USART_String
  1172  01ED                     l1823:
  1173                           
  1174                           ;main_maestro.c: 112:        PORTB = cont;
  1175  01ED  087A               	movf	_cont,w
  1176  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1177  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1178  01F0  0086               	movwf	6	;volatile
  1179  01F1                     l1825:
  1180                           
  1181                           ;main_maestro.c: 113:        ADC_to_string();
  1182  01F1  120A  118A  24AF  120A  118A  	fcall	_ADC_to_string
  1183  01F6                     l1827:
  1184                           
  1185                           ;main_maestro.c: 115:         Write_USART_String(data);
  1186  01F6  3034               	movlw	(low (_data| 0))& (0+255)
  1187  01F7  00F3               	movwf	Write_USART_String@a
  1188  01F8  3000               	movlw	0
  1189  01F9  00F4               	movwf	Write_USART_String@a+1
  1190  01FA  120A  118A  23EF  120A  118A  	fcall	_Write_USART_String
  1191  01FF                     l1829:
  1192                           
  1193                           ;main_maestro.c: 116:         Write_USART(13);
  1194  01FF  300D               	movlw	13
  1195  0200  120A  118A  24E2  120A  118A  	fcall	_Write_USART
  1196  0205                     l1831:
  1197                           
  1198                           ;main_maestro.c: 117:         Write_USART(10);
  1199  0205  300A               	movlw	10
  1200  0206  120A  118A  24E2  120A  118A  	fcall	_Write_USART
  1201  020B                     l1833:
  1202                           
  1203                           ;main_maestro.c: 119:         Show_val_LCD();
  1204  020B  120A  118A  246E  120A  118A  	fcall	_Show_val_LCD
  1205  0210  29AB               	goto	l1807
  1206  0211  120A  118A  280C   	ljmp	start
  1207  0214                     __end_of_main:
  1208                           
  1209                           	psect	text1
  1210  0515                     __ptext1:	
  1211 ;; *************** function _spiWrite *****************
  1212 ;; Defined at:
  1213 ;;		line 36 in file "SPI.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  dat             1    wreg     unsigned char 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  dat             1    2[COMMON] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         0       0       0       0       0
  1228 ;;      Locals:         1       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0
  1230 ;;      Totals:         1       0       0       0       0
  1231 ;;Total ram usage:        1 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    1
  1234 ;; This function calls:
  1235 ;;		Nothing
  1236 ;; This function is called by:
  1237 ;;		_main
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           
  1242                           ;psect for function _spiWrite
  1243  0515                     _spiWrite:
  1244                           
  1245                           ;incstack = 0
  1246                           ; Regs used in _spiWrite: [wreg]
  1247                           ;spiWrite@dat stored from wreg
  1248  0515  00F2               	movwf	spiWrite@dat
  1249  0516                     l1503:
  1250                           
  1251                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  1252  0516  0872               	movf	spiWrite@dat,w
  1253  0517  1283               	bcf	3,5	;RP0=0, select bank0
  1254  0518  1303               	bcf	3,6	;RP1=0, select bank0
  1255  0519  0093               	movwf	19	;volatile
  1256  051A                     l226:
  1257  051A  0008               	return
  1258  051B                     __end_of_spiWrite:
  1259                           
  1260                           	psect	text2
  1261  04EE                     __ptext2:	
  1262 ;; *************** function _spiRead *****************
  1263 ;; Defined at:
  1264 ;;		line 49 in file "SPI.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      unsigned char 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0, pclath, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1278 ;;      Params:         0       0       0       0       0
  1279 ;;      Locals:         0       0       0       0       0
  1280 ;;      Temps:          0       0       0       0       0
  1281 ;;      Totals:         0       0       0       0       0
  1282 ;;Total ram usage:        0 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    2
  1285 ;; This function calls:
  1286 ;;		_spiReceiveWait
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           
  1293                           ;psect for function _spiRead
  1294  04EE                     _spiRead:
  1295  04EE                     l1505:	
  1296                           ;incstack = 0
  1297                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1298                           
  1299                           
  1300                           ;SPI.c: 51:     spiReceiveWait();
  1301  04EE  120A  118A  2507  120A  118A  	fcall	_spiReceiveWait
  1302  04F3                     l1507:
  1303                           
  1304                           ;SPI.c: 52:     return(SSPBUF);
  1305  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  1306  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  1307  04F5  0813               	movf	19,w	;volatile
  1308  04F6                     l234:
  1309  04F6  0008               	return
  1310  04F7                     __end_of_spiRead:
  1311                           
  1312                           	psect	text3
  1313  0507                     __ptext3:	
  1314 ;; *************** function _spiReceiveWait *****************
  1315 ;; Defined at:
  1316 ;;		line 31 in file "SPI.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		None
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1330 ;;      Params:         0       0       0       0       0
  1331 ;;      Locals:         0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0
  1333 ;;      Totals:         0       0       0       0       0
  1334 ;;Total ram usage:        0 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    1
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_spiRead
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           
  1345                           ;psect for function _spiReceiveWait
  1346  0507                     _spiReceiveWait:
  1347  0507                     l1453:	
  1348                           ;incstack = 0
  1349                           ; Regs used in _spiReceiveWait: []
  1350                           
  1351  0507                     l220:	
  1352                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  1353                           
  1354  0507  1683               	bsf	3,5	;RP0=1, select bank1
  1355  0508  1303               	bcf	3,6	;RP1=0, select bank1
  1356  0509  1C14               	btfss	20,0	;volatile
  1357  050A  2D0C               	goto	u781
  1358  050B  2D0D               	goto	u780
  1359  050C                     u781:
  1360  050C  2D07               	goto	l220
  1361  050D                     u780:
  1362  050D                     l223:
  1363  050D  0008               	return
  1364  050E                     __end_of_spiReceiveWait:
  1365                           
  1366                           	psect	text4
  1367  03B9                     __ptext4:	
  1368 ;; *************** function _setup *****************
  1369 ;; Defined at:
  1370 ;;		line 129 in file "main_maestro.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1384 ;;      Params:         0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    2
  1391 ;; This function calls:
  1392 ;;		_USART_INTERRUPT
  1393 ;;		_USART_Init
  1394 ;;		_USART_Init_BaudRate
  1395 ;;		_initOsc
  1396 ;;		_spiInit
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           
  1403                           ;psect for function _setup
  1404  03B9                     _setup:
  1405  03B9                     l1455:	
  1406                           ;incstack = 0
  1407                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1408                           
  1409                           
  1410                           ;main_maestro.c: 130:     initOsc(7);
  1411  03B9  3007               	movlw	7
  1412  03BA  120A  118A  2214  120A  118A  	fcall	_initOsc
  1413  03BF                     l1457:
  1414                           
  1415                           ;main_maestro.c: 131:     ANSEL = 0;
  1416  03BF  1683               	bsf	3,5	;RP0=1, select bank3
  1417  03C0  1703               	bsf	3,6	;RP1=1, select bank3
  1418  03C1  0188               	clrf	8	;volatile
  1419  03C2                     l1459:
  1420                           
  1421                           ;main_maestro.c: 132:     ANSELH = 0;
  1422  03C2  0189               	clrf	9	;volatile
  1423  03C3                     l1461:
  1424                           
  1425                           ;main_maestro.c: 134:     TRISA = 0;
  1426  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  1427  03C4  1303               	bcf	3,6	;RP1=0, select bank1
  1428  03C5  0185               	clrf	5	;volatile
  1429  03C6                     l1463:
  1430                           
  1431                           ;main_maestro.c: 135:     TRISB = 0;
  1432  03C6  0186               	clrf	6	;volatile
  1433  03C7                     l1465:
  1434                           
  1435                           ;main_maestro.c: 139:     TRISD = 0;
  1436  03C7  0188               	clrf	8	;volatile
  1437  03C8                     l1467:
  1438                           
  1439                           ;main_maestro.c: 140:     TRISE = 0;
  1440  03C8  0189               	clrf	9	;volatile
  1441  03C9                     l1469:
  1442                           
  1443                           ;main_maestro.c: 142:     PORTA = 0;
  1444  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1445  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  1446  03CB  0185               	clrf	5	;volatile
  1447  03CC                     l1471:
  1448                           
  1449                           ;main_maestro.c: 143:     PORTB = 0;
  1450  03CC  0186               	clrf	6	;volatile
  1451  03CD                     l1473:
  1452                           
  1453                           ;main_maestro.c: 144:     PORTC = 0;
  1454  03CD  0187               	clrf	7	;volatile
  1455  03CE                     l1475:
  1456                           
  1457                           ;main_maestro.c: 145:     PORTD = 0;
  1458  03CE  0188               	clrf	8	;volatile
  1459  03CF                     l1477:
  1460                           
  1461                           ;main_maestro.c: 146:     PORTE = 0;
  1462  03CF  0189               	clrf	9	;volatile
  1463  03D0                     l1479:
  1464                           
  1465                           ;main_maestro.c: 150:     TRISC2 = 0;
  1466  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  1467  03D1  1303               	bcf	3,6	;RP1=0, select bank1
  1468  03D2  1107               	bcf	7,2	;volatile
  1469  03D3                     l1481:
  1470                           
  1471                           ;main_maestro.c: 151:     PORTCbits.RC2 = 1;
  1472  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  1473  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  1474  03D5  1507               	bsf	7,2	;volatile
  1475  03D6                     l1483:
  1476                           
  1477                           ;main_maestro.c: 155:     USART_Init_BaudRate();
  1478  03D6  120A  118A  251B  120A  118A  	fcall	_USART_Init_BaudRate
  1479  03DB                     l1485:
  1480                           
  1481                           ;main_maestro.c: 156:     USART_Init();
  1482  03DB  120A  118A  24FF  120A  118A  	fcall	_USART_Init
  1483  03E0                     l1487:
  1484                           
  1485                           ;main_maestro.c: 157:     USART_INTERRUPT();
  1486  03E0  120A  118A  2521  120A  118A  	fcall	_USART_INTERRUPT
  1487  03E5                     l1489:
  1488                           
  1489                           ;main_maestro.c: 159:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1490  03E5  01F2               	clrf	spiInit@sDataSample
  1491  03E6  01F3               	clrf	spiInit@sClockIdle
  1492  03E7  01F4               	clrf	spiInit@sTransmitEdge
  1493  03E8  3020               	movlw	32
  1494  03E9  120A  118A  2458  120A  118A  	fcall	_spiInit
  1495  03EE                     l88:
  1496  03EE  0008               	return
  1497  03EF                     __end_of_setup:
  1498                           
  1499                           	psect	text5
  1500  0458                     __ptext5:	
  1501 ;; *************** function _spiInit *****************
  1502 ;; Defined at:
  1503 ;;		line 14 in file "SPI.c"
  1504 ;; Parameters:    Size  Location     Type
  1505 ;;  sType           1    wreg     enum E1264
  1506 ;;  sDataSample     1    2[COMMON] enum E1272
  1507 ;;  sClockIdle      1    3[COMMON] enum E1276
  1508 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  sType           1    5[COMMON] enum E1264
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1520 ;;      Params:         3       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0
  1523 ;;      Totals:         4       0       0       0       0
  1524 ;;Total ram usage:        4 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    1
  1527 ;; This function calls:
  1528 ;;		Nothing
  1529 ;; This function is called by:
  1530 ;;		_setup
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           
  1535                           ;psect for function _spiInit
  1536  0458                     _spiInit:
  1537                           
  1538                           ;incstack = 0
  1539                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1540                           ;spiInit@sType stored from wreg
  1541  0458  00F5               	movwf	spiInit@sType
  1542  0459                     l1353:
  1543                           
  1544                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1545  0459  1683               	bsf	3,5	;RP0=1, select bank1
  1546  045A  1303               	bcf	3,6	;RP1=0, select bank1
  1547  045B  1287               	bcf	7,5	;volatile
  1548                           
  1549                           ;SPI.c: 17:     if(sType & 0b00000100)
  1550  045C  1D75               	btfss	spiInit@sType,2
  1551  045D  2C5F               	goto	u641
  1552  045E  2C60               	goto	u640
  1553  045F                     u641:
  1554  045F  2C64               	goto	l1359
  1555  0460                     u640:
  1556  0460                     l1355:
  1557                           
  1558                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1559  0460  0874               	movf	spiInit@sTransmitEdge,w
  1560  0461  0094               	movwf	20	;volatile
  1561  0462                     l1357:
  1562                           
  1563                           ;SPI.c: 20:         TRISC3 = 1;
  1564  0462  1587               	bsf	7,3	;volatile
  1565                           
  1566                           ;SPI.c: 21:     }
  1567  0463  2C68               	goto	l216
  1568  0464                     l1359:
  1569                           
  1570                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1571  0464  0872               	movf	spiInit@sDataSample,w
  1572  0465  0474               	iorwf	spiInit@sTransmitEdge,w
  1573  0466  0094               	movwf	20	;volatile
  1574  0467                     l1361:
  1575                           
  1576                           ;SPI.c: 25:         TRISC3 = 0;
  1577  0467  1187               	bcf	7,3	;volatile
  1578  0468                     l216:	
  1579                           ;SPI.c: 26:     }
  1580                           
  1581                           
  1582                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1583  0468  0875               	movf	spiInit@sType,w
  1584  0469  0473               	iorwf	spiInit@sClockIdle,w
  1585  046A  1283               	bcf	3,5	;RP0=0, select bank0
  1586  046B  1303               	bcf	3,6	;RP1=0, select bank0
  1587  046C  0094               	movwf	20	;volatile
  1588  046D                     l217:
  1589  046D  0008               	return
  1590  046E                     __end_of_spiInit:
  1591                           
  1592                           	psect	text6
  1593  0214                     __ptext6:	
  1594 ;; *************** function _initOsc *****************
  1595 ;; Defined at:
  1596 ;;		line 3 in file "Oscilador.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  IRCF            1    wreg     unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  IRCF            1    4[COMMON] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1610 ;;      Params:         0       0       0       0       0
  1611 ;;      Locals:         1       0       0       0       0
  1612 ;;      Temps:          2       0       0       0       0
  1613 ;;      Totals:         3       0       0       0       0
  1614 ;;Total ram usage:        3 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    1
  1617 ;; This function calls:
  1618 ;;		Nothing
  1619 ;; This function is called by:
  1620 ;;		_setup
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           
  1625                           ;psect for function _initOsc
  1626  0214                     _initOsc:
  1627                           
  1628                           ;incstack = 0
  1629                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1630                           ;initOsc@IRCF stored from wreg
  1631  0214  00F4               	movwf	initOsc@IRCF
  1632  0215                     l1335:
  1633                           
  1634                           ;Oscilador.c: 5:     switch(IRCF){
  1635  0215  2A4C               	goto	l1339
  1636  0216                     l100:	
  1637                           ;Oscilador.c: 6:         case 0:
  1638                           
  1639                           
  1640                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1641  0216  1683               	bsf	3,5	;RP0=1, select bank1
  1642  0217  1303               	bcf	3,6	;RP1=0, select bank1
  1643  0218  130F               	bcf	15,6	;volatile
  1644                           
  1645                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1646  0219  128F               	bcf	15,5	;volatile
  1647                           
  1648                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1649  021A  120F               	bcf	15,4	;volatile
  1650                           
  1651                           ;Oscilador.c: 10:             break;
  1652  021B  2A6E               	goto	l101
  1653  021C                     l102:	
  1654                           ;Oscilador.c: 11:          case 1:
  1655                           
  1656                           
  1657                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1658  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1659  021D  1303               	bcf	3,6	;RP1=0, select bank1
  1660  021E  130F               	bcf	15,6	;volatile
  1661                           
  1662                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1663  021F  128F               	bcf	15,5	;volatile
  1664                           
  1665                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1666  0220  160F               	bsf	15,4	;volatile
  1667                           
  1668                           ;Oscilador.c: 15:             break;
  1669  0221  2A6E               	goto	l101
  1670  0222                     l103:	
  1671                           ;Oscilador.c: 16:         case 2:
  1672                           
  1673                           
  1674                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1675  0222  1683               	bsf	3,5	;RP0=1, select bank1
  1676  0223  1303               	bcf	3,6	;RP1=0, select bank1
  1677  0224  130F               	bcf	15,6	;volatile
  1678                           
  1679                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1680  0225  168F               	bsf	15,5	;volatile
  1681                           
  1682                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1683  0226  120F               	bcf	15,4	;volatile
  1684                           
  1685                           ;Oscilador.c: 20:             break;
  1686  0227  2A6E               	goto	l101
  1687  0228                     l104:	
  1688                           ;Oscilador.c: 21:         case 3:
  1689                           
  1690                           
  1691                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1692  0228  1683               	bsf	3,5	;RP0=1, select bank1
  1693  0229  1303               	bcf	3,6	;RP1=0, select bank1
  1694  022A  130F               	bcf	15,6	;volatile
  1695                           
  1696                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1697  022B  168F               	bsf	15,5	;volatile
  1698                           
  1699                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1700  022C  160F               	bsf	15,4	;volatile
  1701                           
  1702                           ;Oscilador.c: 25:             break;
  1703  022D  2A6E               	goto	l101
  1704  022E                     l105:	
  1705                           ;Oscilador.c: 26:         case 4:
  1706                           
  1707                           
  1708                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1709  022E  1683               	bsf	3,5	;RP0=1, select bank1
  1710  022F  1303               	bcf	3,6	;RP1=0, select bank1
  1711  0230  170F               	bsf	15,6	;volatile
  1712                           
  1713                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1714  0231  128F               	bcf	15,5	;volatile
  1715                           
  1716                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1717  0232  120F               	bcf	15,4	;volatile
  1718                           
  1719                           ;Oscilador.c: 30:             break;
  1720  0233  2A6E               	goto	l101
  1721  0234                     l106:	
  1722                           ;Oscilador.c: 31:         case 5:
  1723                           
  1724                           
  1725                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1726  0234  1683               	bsf	3,5	;RP0=1, select bank1
  1727  0235  1303               	bcf	3,6	;RP1=0, select bank1
  1728  0236  170F               	bsf	15,6	;volatile
  1729                           
  1730                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1731  0237  128F               	bcf	15,5	;volatile
  1732                           
  1733                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1734  0238  160F               	bsf	15,4	;volatile
  1735                           
  1736                           ;Oscilador.c: 35:             break;
  1737  0239  2A6E               	goto	l101
  1738  023A                     l107:	
  1739                           ;Oscilador.c: 36:         case 6:
  1740                           
  1741                           
  1742                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1743  023A  1683               	bsf	3,5	;RP0=1, select bank1
  1744  023B  1303               	bcf	3,6	;RP1=0, select bank1
  1745  023C  170F               	bsf	15,6	;volatile
  1746                           
  1747                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1748  023D  168F               	bsf	15,5	;volatile
  1749                           
  1750                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1751  023E  120F               	bcf	15,4	;volatile
  1752                           
  1753                           ;Oscilador.c: 40:             break;
  1754  023F  2A6E               	goto	l101
  1755  0240                     l108:	
  1756                           ;Oscilador.c: 41:         case 7:
  1757                           
  1758                           
  1759                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1760  0240  1683               	bsf	3,5	;RP0=1, select bank1
  1761  0241  1303               	bcf	3,6	;RP1=0, select bank1
  1762  0242  170F               	bsf	15,6	;volatile
  1763                           
  1764                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1765  0243  168F               	bsf	15,5	;volatile
  1766                           
  1767                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1768  0244  160F               	bsf	15,4	;volatile
  1769                           
  1770                           ;Oscilador.c: 45:             break;
  1771  0245  2A6E               	goto	l101
  1772  0246                     l109:	
  1773                           ;Oscilador.c: 46:         default:
  1774                           
  1775                           
  1776                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1777  0246  1683               	bsf	3,5	;RP0=1, select bank1
  1778  0247  1303               	bcf	3,6	;RP1=0, select bank1
  1779  0248  170F               	bsf	15,6	;volatile
  1780                           
  1781                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1782  0249  168F               	bsf	15,5	;volatile
  1783                           
  1784                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1785  024A  120F               	bcf	15,4	;volatile
  1786                           
  1787                           ;Oscilador.c: 50:             break;
  1788  024B  2A6E               	goto	l101
  1789  024C                     l1339:
  1790  024C  0874               	movf	initOsc@IRCF,w
  1791  024D  00F2               	movwf	??_initOsc
  1792  024E  01F3               	clrf	??_initOsc+1
  1793                           
  1794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1795                           ; Switch size 1, requested type "simple"
  1796                           ; Number of cases is 1, Range of values is 0 to 0
  1797                           ; switch strategies available:
  1798                           ; Name         Instructions Cycles
  1799                           ; simple_byte            4     3 (average)
  1800                           ; direct_byte           11     8 (fixed)
  1801                           ; jumptable            260     6 (fixed)
  1802                           ;	Chosen strategy is simple_byte
  1803  024F  0873               	movf	??_initOsc+1,w
  1804  0250  3A00               	xorlw	0	; case 0
  1805  0251  1903               	skipnz
  1806  0252  2A54               	goto	l1889
  1807  0253  2A46               	goto	l109
  1808  0254                     l1889:
  1809                           
  1810                           ; Switch size 1, requested type "simple"
  1811                           ; Number of cases is 8, Range of values is 0 to 7
  1812                           ; switch strategies available:
  1813                           ; Name         Instructions Cycles
  1814                           ; simple_byte           25    13 (average)
  1815                           ; direct_byte           32     8 (fixed)
  1816                           ; jumptable            260     6 (fixed)
  1817                           ;	Chosen strategy is simple_byte
  1818  0254  0872               	movf	??_initOsc,w
  1819  0255  3A00               	xorlw	0	; case 0
  1820  0256  1903               	skipnz
  1821  0257  2A16               	goto	l100
  1822  0258  3A01               	xorlw	1	; case 1
  1823  0259  1903               	skipnz
  1824  025A  2A1C               	goto	l102
  1825  025B  3A03               	xorlw	3	; case 2
  1826  025C  1903               	skipnz
  1827  025D  2A22               	goto	l103
  1828  025E  3A01               	xorlw	1	; case 3
  1829  025F  1903               	skipnz
  1830  0260  2A28               	goto	l104
  1831  0261  3A07               	xorlw	7	; case 4
  1832  0262  1903               	skipnz
  1833  0263  2A2E               	goto	l105
  1834  0264  3A01               	xorlw	1	; case 5
  1835  0265  1903               	skipnz
  1836  0266  2A34               	goto	l106
  1837  0267  3A03               	xorlw	3	; case 6
  1838  0268  1903               	skipnz
  1839  0269  2A3A               	goto	l107
  1840  026A  3A01               	xorlw	1	; case 7
  1841  026B  1903               	skipnz
  1842  026C  2A40               	goto	l108
  1843  026D  2A46               	goto	l109
  1844  026E                     l101:
  1845                           
  1846                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1847  026E  140F               	bsf	15,0	;volatile
  1848  026F                     l110:
  1849  026F  0008               	return
  1850  0270                     __end_of_initOsc:
  1851                           
  1852                           	psect	text7
  1853  051B                     __ptext7:	
  1854 ;; *************** function _USART_Init_BaudRate *****************
  1855 ;; Defined at:
  1856 ;;		line 19 in file "USART.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;		None
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;		None
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1870 ;;      Params:         0       0       0       0       0
  1871 ;;      Locals:         0       0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0
  1873 ;;      Totals:         0       0       0       0       0
  1874 ;;Total ram usage:        0 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    1
  1877 ;; This function calls:
  1878 ;;		Nothing
  1879 ;; This function is called by:
  1880 ;;		_setup
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           
  1885                           ;psect for function _USART_Init_BaudRate
  1886  051B                     _USART_Init_BaudRate:
  1887  051B                     l1345:	
  1888                           ;incstack = 0
  1889                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1890                           
  1891                           
  1892                           ;USART.c: 20:     SPBRGH = 0;
  1893  051B  1683               	bsf	3,5	;RP0=1, select bank1
  1894  051C  1303               	bcf	3,6	;RP1=0, select bank1
  1895  051D  019A               	clrf	26	;volatile
  1896  051E                     l1347:
  1897                           
  1898                           ;USART.c: 21:     SPBRG = 12;
  1899  051E  300C               	movlw	12
  1900  051F  0099               	movwf	25	;volatile
  1901  0520                     l179:
  1902  0520  0008               	return
  1903  0521                     __end_of_USART_Init_BaudRate:
  1904                           
  1905                           	psect	text8
  1906  04FF                     __ptext8:	
  1907 ;; *************** function _USART_Init *****************
  1908 ;; Defined at:
  1909 ;;		line 8 in file "USART.c"
  1910 ;; Parameters:    Size  Location     Type
  1911 ;;		None
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		None
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1923 ;;      Params:         0       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0
  1926 ;;      Totals:         0       0       0       0       0
  1927 ;;Total ram usage:        0 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    1
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_setup
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           
  1938                           ;psect for function _USART_Init
  1939  04FF                     _USART_Init:
  1940  04FF                     l1349:	
  1941                           ;incstack = 0
  1942                           ; Regs used in _USART_Init: []
  1943                           
  1944                           
  1945                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1946  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0500  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0501  1798               	bsf	24,7	;volatile
  1949                           
  1950                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1951  0502  1683               	bsf	3,5	;RP0=1, select bank1
  1952  0503  1303               	bcf	3,6	;RP1=0, select bank1
  1953  0504  1218               	bcf	24,4	;volatile
  1954                           
  1955                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1956  0505  1698               	bsf	24,5	;volatile
  1957  0506                     l176:
  1958  0506  0008               	return
  1959  0507                     __end_of_USART_Init:
  1960                           
  1961                           	psect	text9
  1962  0521                     __ptext9:	
  1963 ;; *************** function _USART_INTERRUPT *****************
  1964 ;; Defined at:
  1965 ;;		line 24 in file "USART.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;		None
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      void 
  1972 ;; Registers used:
  1973 ;;		None
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1979 ;;      Params:         0       0       0       0       0
  1980 ;;      Locals:         0       0       0       0       0
  1981 ;;      Temps:          0       0       0       0       0
  1982 ;;      Totals:         0       0       0       0       0
  1983 ;;Total ram usage:        0 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    1
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_setup
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           
  1994                           ;psect for function _USART_INTERRUPT
  1995  0521                     _USART_INTERRUPT:
  1996  0521                     l1351:	
  1997                           ;incstack = 0
  1998                           ; Regs used in _USART_INTERRUPT: []
  1999                           
  2000                           
  2001                           ;USART.c: 25:     INTCONbits.GIE = 1;
  2002  0521  178B               	bsf	11,7	;volatile
  2003                           
  2004                           ;USART.c: 26:     INTCONbits.PEIE = 1;
  2005  0522  170B               	bsf	11,6	;volatile
  2006                           
  2007                           ;USART.c: 27:     PIE1bits.RCIE = 1;
  2008  0523  1683               	bsf	3,5	;RP0=1, select bank1
  2009  0524  1303               	bcf	3,6	;RP1=0, select bank1
  2010  0525  168C               	bsf	12,5	;volatile
  2011  0526                     l182:
  2012  0526  0008               	return
  2013  0527                     __end_of_USART_INTERRUPT:
  2014                           
  2015                           	psect	text10
  2016  03EF                     __ptext10:	
  2017 ;; *************** function _Write_USART_String *****************
  2018 ;; Defined at:
  2019 ;;		line 37 in file "USART.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  a               2    3[COMMON] PTR unsigned char 
  2022 ;;		 -> data(8), STR_2(9), 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  i               1    6[COMMON] unsigned char 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2034 ;;      Params:         2       0       0       0       0
  2035 ;;      Locals:         1       0       0       0       0
  2036 ;;      Temps:          1       0       0       0       0
  2037 ;;      Totals:         4       0       0       0       0
  2038 ;;Total ram usage:        4 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    2
  2041 ;; This function calls:
  2042 ;;		_Write_USART
  2043 ;; This function is called by:
  2044 ;;		_main
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           
  2049                           ;psect for function _Write_USART_String
  2050  03EF                     _Write_USART_String:
  2051  03EF                     l1511:	
  2052                           ;incstack = 0
  2053                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2054                           
  2055                           
  2056                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  2057  03EF  01F6               	clrf	Write_USART_String@i
  2058  03F0  2C06               	goto	l1517
  2059  03F1                     l1513:
  2060                           
  2061                           ;USART.c: 40:         Write_USART(a[i]);
  2062  03F1  0876               	movf	Write_USART_String@i,w
  2063  03F2  0773               	addwf	Write_USART_String@a,w
  2064  03F3  0084               	movwf	4
  2065  03F4  0874               	movf	Write_USART_String@a+1,w
  2066  03F5  1803               	skipnc
  2067  03F6  0A74               	incf	Write_USART_String@a+1,w
  2068  03F7  00FF               	movwf	btemp+1
  2069  03F8  120A  118A  2381  120A  118A  	fcall	stringtab
  2070  03FD  120A  118A  24E2  120A  118A  	fcall	_Write_USART
  2071  0402                     l1515:
  2072                           
  2073                           ;USART.c: 41:     }
  2074  0402  3001               	movlw	1
  2075  0403  00F5               	movwf	??_Write_USART_String
  2076  0404  0875               	movf	??_Write_USART_String,w
  2077  0405  07F6               	addwf	Write_USART_String@i,f
  2078  0406                     l1517:
  2079  0406  0876               	movf	Write_USART_String@i,w
  2080  0407  0773               	addwf	Write_USART_String@a,w
  2081  0408  0084               	movwf	4
  2082  0409  0874               	movf	Write_USART_String@a+1,w
  2083  040A  1803               	skipnc
  2084  040B  0A74               	incf	Write_USART_String@a+1,w
  2085  040C  1283               	bcf	3,5	;RP0=0, select bank0
  2086  040D  1303               	bcf	3,6	;RP1=0, select bank0
  2087  040E  00FF               	movwf	btemp+1
  2088  040F  120A  118A  2381  120A  118A  	fcall	stringtab
  2089  0414  3A00               	xorlw	0
  2090  0415  1D03               	skipz
  2091  0416  2C18               	goto	u791
  2092  0417  2C19               	goto	u790
  2093  0418                     u791:
  2094  0418  2BF1               	goto	l1513
  2095  0419                     u790:
  2096  0419                     l194:
  2097  0419  0008               	return
  2098  041A                     __end_of_Write_USART_String:
  2099                           
  2100                           	psect	text11
  2101  04E2                     __ptext11:	
  2102 ;; *************** function _Write_USART *****************
  2103 ;; Defined at:
  2104 ;;		line 33 in file "USART.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  a               1    wreg     unsigned char 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  a               1    2[COMMON] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2118 ;;      Params:         0       0       0       0       0
  2119 ;;      Locals:         1       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0
  2121 ;;      Totals:         1       0       0       0       0
  2122 ;;Total ram usage:        1 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;;		_Write_USART_String
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           
  2134                           ;psect for function _Write_USART
  2135  04E2                     _Write_USART:
  2136                           
  2137                           ;incstack = 0
  2138                           ; Regs used in _Write_USART: [wreg]
  2139                           ;Write_USART@a stored from wreg
  2140  04E2  00F2               	movwf	Write_USART@a
  2141  04E3                     l1331:
  2142  04E3                     l185:	
  2143                           ;USART.c: 34:     while(!TRMT);
  2144                           
  2145  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  2146  04E4  1303               	bcf	3,6	;RP1=0, select bank1
  2147  04E5  1C98               	btfss	24,1	;volatile
  2148  04E6  2CE8               	goto	u631
  2149  04E7  2CE9               	goto	u630
  2150  04E8                     u631:
  2151  04E8  2CE3               	goto	l185
  2152  04E9                     u630:
  2153  04E9                     l1333:
  2154                           
  2155                           ;USART.c: 35:     TXREG=a;
  2156  04E9  0872               	movf	Write_USART@a,w
  2157  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  2158  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  2159  04EC  0099               	movwf	25	;volatile
  2160  04ED                     l188:
  2161  04ED  0008               	return
  2162  04EE                     __end_of_Write_USART:
  2163                           
  2164                           	psect	text12
  2165  046E                     __ptext12:	
  2166 ;; *************** function _Show_val_LCD *****************
  2167 ;; Defined at:
  2168 ;;		line 176 in file "main_maestro.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;		None
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2182 ;;      Params:         0       0       0       0       0
  2183 ;;      Locals:         0       0       0       0       0
  2184 ;;      Temps:          0       1       0       0       0
  2185 ;;      Totals:         0       1       0       0       0
  2186 ;;Total ram usage:        1 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    4
  2189 ;; This function calls:
  2190 ;;		_Lcd_Set_Cursor
  2191 ;;		_Lcd_Write_String
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           
  2198                           ;psect for function _Show_val_LCD
  2199  046E                     _Show_val_LCD:
  2200  046E                     l1789:	
  2201                           ;incstack = 0
  2202                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2203                           
  2204                           
  2205                           ;main_maestro.c: 179:     Lcd_Set_Cursor(2,2);
  2206  046E  3002               	movlw	2
  2207  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2208  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2209  0471  00BE               	movwf	??_Show_val_LCD
  2210  0472  083E               	movf	??_Show_val_LCD,w
  2211  0473  00F6               	movwf	Lcd_Set_Cursor@b
  2212  0474  3002               	movlw	2
  2213  0475  120A  118A  241A  120A  118A  	fcall	_Lcd_Set_Cursor
  2214  047A                     l1791:
  2215                           
  2216                           ;main_maestro.c: 180:     Lcd_Write_String(data);
  2217  047A  3034               	movlw	(low (_data| 0))& (0+255)
  2218  047B  00F5               	movwf	Lcd_Write_String@a
  2219  047C  3000               	movlw	0
  2220  047D  00F6               	movwf	Lcd_Write_String@a+1
  2221  047E  120A  118A  22BB  120A  118A  	fcall	_Lcd_Write_String
  2222  0483                     l94:
  2223  0483  0008               	return
  2224  0484                     __end_of_Show_val_LCD:
  2225                           
  2226                           	psect	text13
  2227  02BB                     __ptext13:	
  2228 ;; *************** function _Lcd_Write_String *****************
  2229 ;; Defined at:
  2230 ;;		line 70 in file "LCD.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  a               2    5[COMMON] PTR unsigned char 
  2233 ;;		 -> data(8), STR_1(16), 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  i               2    0[BANK0 ] int 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2245 ;;      Params:         2       0       0       0       0
  2246 ;;      Locals:         0       2       0       0       0
  2247 ;;      Temps:          3       0       0       0       0
  2248 ;;      Totals:         5       2       0       0       0
  2249 ;;Total ram usage:        7 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    3
  2252 ;; This function calls:
  2253 ;;		_Lcd_Write_Char
  2254 ;; This function is called by:
  2255 ;;		_main
  2256 ;;		_Show_val_LCD
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           
  2261                           ;psect for function _Lcd_Write_String
  2262  02BB                     _Lcd_Write_String:
  2263  02BB                     l1677:	
  2264                           ;incstack = 0
  2265                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2266                           
  2267                           
  2268                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2269  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  2270  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  2271  02BD  01BC               	clrf	Lcd_Write_String@i
  2272  02BE  01BD               	clrf	Lcd_Write_String@i+1
  2273  02BF  2AE4               	goto	l1683
  2274  02C0                     l1679:
  2275                           
  2276                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2277  02C0  083C               	movf	Lcd_Write_String@i,w
  2278  02C1  0775               	addwf	Lcd_Write_String@a,w
  2279  02C2  00F8               	movwf	??_Lcd_Write_String+1
  2280  02C3  0876               	movf	Lcd_Write_String@a+1,w
  2281  02C4  00F7               	movwf	??_Lcd_Write_String
  2282  02C5  1803               	skipnc
  2283  02C6  0AF7               	incf	??_Lcd_Write_String,f
  2284  02C7  1FBC               	btfss	Lcd_Write_String@i,7
  2285  02C8  2ACA               	goto	u880
  2286  02C9  03F7               	decf	??_Lcd_Write_String,f
  2287  02CA                     u880:
  2288  02CA  0877               	movf	??_Lcd_Write_String,w
  2289  02CB  00F9               	movwf	??_Lcd_Write_String+2
  2290  02CC  0879               	movf	??_Lcd_Write_String+2,w
  2291  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2292  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2293  02CF  00FF               	movwf	btemp+1
  2294  02D0  0878               	movf	??_Lcd_Write_String+1,w
  2295  02D1  0084               	movwf	4
  2296  02D2  120A  118A  2381  120A  118A  	fcall	stringtab
  2297  02D7  120A  118A  2484  120A  118A  	fcall	_Lcd_Write_Char
  2298  02DC                     l1681:
  2299  02DC  3001               	movlw	1
  2300  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  2301  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  2302  02DF  07BC               	addwf	Lcd_Write_String@i,f
  2303  02E0  1803               	skipnc
  2304  02E1  0ABD               	incf	Lcd_Write_String@i+1,f
  2305  02E2  3000               	movlw	0
  2306  02E3  07BD               	addwf	Lcd_Write_String@i+1,f
  2307  02E4                     l1683:
  2308  02E4  083C               	movf	Lcd_Write_String@i,w
  2309  02E5  0775               	addwf	Lcd_Write_String@a,w
  2310  02E6  00F8               	movwf	??_Lcd_Write_String+1
  2311  02E7  0876               	movf	Lcd_Write_String@a+1,w
  2312  02E8  00F7               	movwf	??_Lcd_Write_String
  2313  02E9  1803               	skipnc
  2314  02EA  0AF7               	incf	??_Lcd_Write_String,f
  2315  02EB  1FBC               	btfss	Lcd_Write_String@i,7
  2316  02EC  2AEE               	goto	u890
  2317  02ED  03F7               	decf	??_Lcd_Write_String,f
  2318  02EE                     u890:
  2319  02EE  0877               	movf	??_Lcd_Write_String,w
  2320  02EF  00F9               	movwf	??_Lcd_Write_String+2
  2321  02F0  0879               	movf	??_Lcd_Write_String+2,w
  2322  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  2323  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  2324  02F3  00FF               	movwf	btemp+1
  2325  02F4  0878               	movf	??_Lcd_Write_String+1,w
  2326  02F5  0084               	movwf	4
  2327  02F6  120A  118A  2381  120A  118A  	fcall	stringtab
  2328  02FB  3A00               	xorlw	0
  2329  02FC  1D03               	skipz
  2330  02FD  2AFF               	goto	u901
  2331  02FE  2B00               	goto	u900
  2332  02FF                     u901:
  2333  02FF  2AC0               	goto	l1679
  2334  0300                     u900:
  2335  0300                     l147:
  2336  0300  0008               	return
  2337  0301                     __end_of_Lcd_Write_String:
  2338                           
  2339                           	psect	text14
  2340  0484                     __ptext14:	
  2341 ;; *************** function _Lcd_Write_Char *****************
  2342 ;; Defined at:
  2343 ;;		line 61 in file "LCD.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  a               1    wreg     unsigned char 
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;  a               1    4[COMMON] unsigned char 
  2348 ;; Return value:  Size  Location     Type
  2349 ;;                  1    wreg      void 
  2350 ;; Registers used:
  2351 ;;		wreg, status,2, status,0, pclath, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : 0/0
  2354 ;;		On exit  : 0/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2357 ;;      Params:         0       0       0       0       0
  2358 ;;      Locals:         1       0       0       0       0
  2359 ;;      Temps:          1       0       0       0       0
  2360 ;;      Totals:         2       0       0       0       0
  2361 ;;Total ram usage:        2 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:    2
  2364 ;; This function calls:
  2365 ;;		_Lcd_Port
  2366 ;; This function is called by:
  2367 ;;		_Lcd_Write_String
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           
  2372                           ;psect for function _Lcd_Write_Char
  2373  0484                     _Lcd_Write_Char:
  2374                           
  2375                           ;incstack = 0
  2376                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2377                           ;Lcd_Write_Char@a stored from wreg
  2378  0484  00F4               	movwf	Lcd_Write_Char@a
  2379  0485                     l1633:
  2380                           
  2381                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2382  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2383  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2384  0487  1409               	bsf	9,0	;volatile
  2385  0488                     l1635:
  2386                           
  2387                           ;LCD.c: 63:    Lcd_Port(a);
  2388  0488  0874               	movf	Lcd_Write_Char@a,w
  2389  0489  120A  118A  2527  120A  118A  	fcall	_Lcd_Port
  2390  048E                     l1637:
  2391                           
  2392                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2393  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2394  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2395  0490  1509               	bsf	9,2	;volatile
  2396  0491                     l1639:
  2397                           
  2398                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2399  0491  301A               	movlw	26
  2400  0492  00F3               	movwf	??_Lcd_Write_Char
  2401  0493                     u1077:
  2402  0493  0BF3               	decfsz	??_Lcd_Write_Char,f
  2403  0494  2C93               	goto	u1077
  2404  0495  0000               	nop
  2405  0496                     l1641:
  2406                           
  2407                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2408  0496  1283               	bcf	3,5	;RP0=0, select bank0
  2409  0497  1303               	bcf	3,6	;RP1=0, select bank0
  2410  0498  1109               	bcf	9,2	;volatile
  2411  0499                     l141:
  2412  0499  0008               	return
  2413  049A                     __end_of_Lcd_Write_Char:
  2414                           
  2415                           	psect	text15
  2416  041A                     __ptext15:	
  2417 ;; *************** function _Lcd_Set_Cursor *****************
  2418 ;; Defined at:
  2419 ;;		line 48 in file "LCD.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  a               1    wreg     unsigned char 
  2422 ;;  b               1    6[COMMON] unsigned char 
  2423 ;; Auto vars:     Size  Location     Type
  2424 ;;  a               1    8[COMMON] unsigned char 
  2425 ;;  temp            1    9[COMMON] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      void 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0, pclath, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2435 ;;      Params:         1       0       0       0       0
  2436 ;;      Locals:         2       0       0       0       0
  2437 ;;      Temps:          1       0       0       0       0
  2438 ;;      Totals:         4       0       0       0       0
  2439 ;;Total ram usage:        4 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    3
  2442 ;; This function calls:
  2443 ;;		_Lcd_Cmd
  2444 ;; This function is called by:
  2445 ;;		_main
  2446 ;;		_Show_val_LCD
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           
  2451                           ;psect for function _Lcd_Set_Cursor
  2452  041A                     _Lcd_Set_Cursor:
  2453                           
  2454                           ;incstack = 0
  2455                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2456                           ;Lcd_Set_Cursor@a stored from wreg
  2457  041A  00F8               	movwf	Lcd_Set_Cursor@a
  2458  041B                     l1665:
  2459                           
  2460                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2461  041B  0378               	decf	Lcd_Set_Cursor@a,w
  2462  041C  1D03               	btfss	3,2
  2463  041D  2C1F               	goto	u861
  2464  041E  2C20               	goto	u860
  2465  041F                     u861:
  2466  041F  2C2C               	goto	l1671
  2467  0420                     u860:
  2468  0420                     l1667:
  2469                           
  2470                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2471  0420  0876               	movf	Lcd_Set_Cursor@b,w
  2472  0421  3E7F               	addlw	127
  2473  0422  00F7               	movwf	??_Lcd_Set_Cursor
  2474  0423  0877               	movf	??_Lcd_Set_Cursor,w
  2475  0424  00F9               	movwf	Lcd_Set_Cursor@temp
  2476  0425                     l1669:
  2477                           
  2478                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2479  0425  0879               	movf	Lcd_Set_Cursor@temp,w
  2480  0426  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2481                           
  2482                           ;LCD.c: 53:  }
  2483  042B  2C3D               	goto	l138
  2484  042C                     l1671:
  2485  042C  3002               	movlw	2
  2486  042D  0678               	xorwf	Lcd_Set_Cursor@a,w
  2487  042E  1D03               	btfss	3,2
  2488  042F  2C31               	goto	u871
  2489  0430  2C32               	goto	u870
  2490  0431                     u871:
  2491  0431  2C3D               	goto	l138
  2492  0432                     u870:
  2493  0432                     l1673:
  2494                           
  2495                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2496  0432  0876               	movf	Lcd_Set_Cursor@b,w
  2497  0433  3EBF               	addlw	191
  2498  0434  00F7               	movwf	??_Lcd_Set_Cursor
  2499  0435  0877               	movf	??_Lcd_Set_Cursor,w
  2500  0436  00F9               	movwf	Lcd_Set_Cursor@temp
  2501  0437                     l1675:
  2502                           
  2503                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2504  0437  0879               	movf	Lcd_Set_Cursor@temp,w
  2505  0438  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2506  043D                     l138:
  2507  043D  0008               	return
  2508  043E                     __end_of_Lcd_Set_Cursor:
  2509                           
  2510                           	psect	text16
  2511  0270                     __ptext16:	
  2512 ;; *************** function _Lcd_Init *****************
  2513 ;; Defined at:
  2514 ;;		line 14 in file "LCD.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2, status,0, pclath, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2528 ;;      Params:         0       0       0       0       0
  2529 ;;      Locals:         0       0       0       0       0
  2530 ;;      Temps:          2       0       0       0       0
  2531 ;;      Totals:         2       0       0       0       0
  2532 ;;Total ram usage:        2 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    3
  2535 ;; This function calls:
  2536 ;;		_Lcd_Cmd
  2537 ;;		_Lcd_Port
  2538 ;; This function is called by:
  2539 ;;		_main
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           
  2544                           ;psect for function _Lcd_Init
  2545  0270                     _Lcd_Init:
  2546  0270                     l1775:	
  2547                           ;incstack = 0
  2548                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2549                           
  2550                           
  2551                           ;LCD.c: 15:   Lcd_Port(0x00);
  2552  0270  3000               	movlw	0
  2553  0271  120A  118A  2527  120A  118A  	fcall	_Lcd_Port
  2554  0276                     l1777:
  2555                           
  2556                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  2557  0276  3034               	movlw	52
  2558  0277  00F7               	movwf	??_Lcd_Init+1
  2559  0278  30F1               	movlw	241
  2560  0279  00F6               	movwf	??_Lcd_Init
  2561  027A                     u1087:
  2562  027A  0BF6               	decfsz	??_Lcd_Init,f
  2563  027B  2A7A               	goto	u1087
  2564  027C  0BF7               	decfsz	??_Lcd_Init+1,f
  2565  027D  2A7A               	goto	u1087
  2566  027E  2A7F               	nop2
  2567  027F                     l1779:
  2568                           
  2569                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  2570  027F  3030               	movlw	48
  2571  0280  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2572                           
  2573                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2574  0285  300D               	movlw	13
  2575  0286  00F7               	movwf	??_Lcd_Init+1
  2576  0287  30FB               	movlw	251
  2577  0288  00F6               	movwf	??_Lcd_Init
  2578  0289                     u1097:
  2579  0289  0BF6               	decfsz	??_Lcd_Init,f
  2580  028A  2A89               	goto	u1097
  2581  028B  0BF7               	decfsz	??_Lcd_Init+1,f
  2582  028C  2A89               	goto	u1097
  2583  028D  2A8E               	nop2
  2584  028E                     l1781:
  2585                           
  2586                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  2587  028E  3030               	movlw	48
  2588  028F  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2589  0294                     l1783:
  2590                           
  2591                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  2592  0294  301D               	movlw	29
  2593  0295  00F7               	movwf	??_Lcd_Init+1
  2594  0296  3091               	movlw	145
  2595  0297  00F6               	movwf	??_Lcd_Init
  2596  0298                     u1107:
  2597  0298  0BF6               	decfsz	??_Lcd_Init,f
  2598  0299  2A98               	goto	u1107
  2599  029A  0BF7               	decfsz	??_Lcd_Init+1,f
  2600  029B  2A98               	goto	u1107
  2601                           
  2602                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  2603  029C  3030               	movlw	48
  2604  029D  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2605                           
  2606                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  2607  02A2  3038               	movlw	56
  2608  02A3  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2609                           
  2610                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  2611  02A8  300C               	movlw	12
  2612  02A9  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2613                           
  2614                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  2615  02AE  3001               	movlw	1
  2616  02AF  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2617                           
  2618                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  2619  02B4  3006               	movlw	6
  2620  02B5  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2621  02BA                     l123:
  2622  02BA  0008               	return
  2623  02BB                     __end_of_Lcd_Init:
  2624                           
  2625                           	psect	text17
  2626  04D5                     __ptext17:	
  2627 ;; *************** function _Lcd_Clear *****************
  2628 ;; Defined at:
  2629 ;;		line 42 in file "LCD.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2643 ;;      Params:         0       0       0       0       0
  2644 ;;      Locals:         0       0       0       0       0
  2645 ;;      Temps:          0       0       0       0       0
  2646 ;;      Totals:         0       0       0       0       0
  2647 ;;Total ram usage:        0 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    3
  2650 ;; This function calls:
  2651 ;;		_Lcd_Cmd
  2652 ;; This function is called by:
  2653 ;;		_main
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _Lcd_Clear
  2659  04D5                     _Lcd_Clear:
  2660  04D5                     l1785:	
  2661                           ;incstack = 0
  2662                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2663                           
  2664                           
  2665                           ;LCD.c: 43:  Lcd_Cmd(0);
  2666  04D5  3000               	movlw	0
  2667  04D6  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2668                           
  2669                           ;LCD.c: 44:  Lcd_Cmd(1);
  2670  04DB  3001               	movlw	1
  2671  04DC  120A  118A  243E  120A  118A  	fcall	_Lcd_Cmd
  2672  04E1                     l132:
  2673  04E1  0008               	return
  2674  04E2                     __end_of_Lcd_Clear:
  2675                           
  2676                           	psect	text18
  2677  043E                     __ptext18:	
  2678 ;; *************** function _Lcd_Cmd *****************
  2679 ;; Defined at:
  2680 ;;		line 33 in file "LCD.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;  a               1    wreg     unsigned char 
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  a               1    5[COMMON] unsigned char 
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  1    wreg      void 
  2687 ;; Registers used:
  2688 ;;		wreg, status,2, status,0, pclath, cstack
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2694 ;;      Params:         0       0       0       0       0
  2695 ;;      Locals:         1       0       0       0       0
  2696 ;;      Temps:          2       0       0       0       0
  2697 ;;      Totals:         3       0       0       0       0
  2698 ;;Total ram usage:        3 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    2
  2701 ;; This function calls:
  2702 ;;		_Lcd_Port
  2703 ;; This function is called by:
  2704 ;;		_Lcd_Init
  2705 ;;		_Lcd_Clear
  2706 ;;		_Lcd_Set_Cursor
  2707 ;;		_Lcd_Shift_Right
  2708 ;;		_Lcd_Shift_Left
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           
  2713                           ;psect for function _Lcd_Cmd
  2714  043E                     _Lcd_Cmd:
  2715                           
  2716                           ;incstack = 0
  2717                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2718                           ;Lcd_Cmd@a stored from wreg
  2719  043E  00F5               	movwf	Lcd_Cmd@a
  2720  043F                     l1623:
  2721                           
  2722                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  2723  043F  1283               	bcf	3,5	;RP0=0, select bank0
  2724  0440  1303               	bcf	3,6	;RP1=0, select bank0
  2725  0441  1009               	bcf	9,0	;volatile
  2726  0442                     l1625:
  2727                           
  2728                           ;LCD.c: 35:  Lcd_Port(a);
  2729  0442  0875               	movf	Lcd_Cmd@a,w
  2730  0443  120A  118A  2527  120A  118A  	fcall	_Lcd_Port
  2731  0448                     l1627:
  2732                           
  2733                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  2734  0448  1283               	bcf	3,5	;RP0=0, select bank0
  2735  0449  1303               	bcf	3,6	;RP1=0, select bank0
  2736  044A  1509               	bsf	9,2	;volatile
  2737  044B                     l1629:
  2738                           
  2739                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2740  044B  300B               	movlw	11
  2741  044C  00F4               	movwf	??_Lcd_Cmd+1
  2742  044D  3062               	movlw	98
  2743  044E  00F3               	movwf	??_Lcd_Cmd
  2744  044F                     u1117:
  2745  044F  0BF3               	decfsz	??_Lcd_Cmd,f
  2746  0450  2C4F               	goto	u1117
  2747  0451  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2748  0452  2C4F               	goto	u1117
  2749  0453  0000               	nop
  2750  0454                     l1631:
  2751                           
  2752                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  2753  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2754  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2755  0456  1109               	bcf	9,2	;volatile
  2756  0457                     l129:
  2757  0457  0008               	return
  2758  0458                     __end_of_Lcd_Cmd:
  2759                           
  2760                           	psect	text19
  2761  0527                     __ptext19:	
  2762 ;; *************** function _Lcd_Port *****************
  2763 ;; Defined at:
  2764 ;;		line 29 in file "LCD.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;  a               1    wreg     unsigned char 
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;  a               1    2[COMMON] unsigned char 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		wreg
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2778 ;;      Params:         0       0       0       0       0
  2779 ;;      Locals:         1       0       0       0       0
  2780 ;;      Temps:          0       0       0       0       0
  2781 ;;      Totals:         1       0       0       0       0
  2782 ;;Total ram usage:        1 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    1
  2785 ;; This function calls:
  2786 ;;		Nothing
  2787 ;; This function is called by:
  2788 ;;		_Lcd_Init
  2789 ;;		_Lcd_Cmd
  2790 ;;		_Lcd_Write_Char
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function _Lcd_Port
  2796  0527                     _Lcd_Port:
  2797                           
  2798                           ;incstack = 0
  2799                           ; Regs used in _Lcd_Port: [wreg]
  2800                           ;Lcd_Port@a stored from wreg
  2801  0527  00F2               	movwf	Lcd_Port@a
  2802  0528                     l1621:
  2803                           
  2804                           ;LCD.c: 30:     PORTD = a;
  2805  0528  0872               	movf	Lcd_Port@a,w
  2806  0529  1283               	bcf	3,5	;RP0=0, select bank0
  2807  052A  1303               	bcf	3,6	;RP1=0, select bank0
  2808  052B  0088               	movwf	8	;volatile
  2809  052C                     l126:
  2810  052C  0008               	return
  2811  052D                     __end_of_Lcd_Port:
  2812                           
  2813                           	psect	text20
  2814  04AF                     __ptext20:	
  2815 ;; *************** function _ADC_to_string *****************
  2816 ;; Defined at:
  2817 ;;		line 170 in file "main_maestro.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2831 ;;      Params:         0       0       0       0       0
  2832 ;;      Locals:         0       0       0       0       0
  2833 ;;      Temps:          0       3       0       0       0
  2834 ;;      Totals:         0       3       0       0       0
  2835 ;;Total ram usage:        3 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    3
  2838 ;; This function calls:
  2839 ;;		_sprintf
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           
  2846                           ;psect for function _ADC_to_string
  2847  04AF                     _ADC_to_string:
  2848  04AF                     l1787:	
  2849                           ;incstack = 0
  2850                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2851                           
  2852                           
  2853                           ;main_maestro.c: 172:     sprintf(data, "%.3i", cont);
  2854  04AF  3024               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2855  04B0  1283               	bcf	3,5	;RP0=0, select bank0
  2856  04B1  1303               	bcf	3,6	;RP1=0, select bank0
  2857  04B2  00CF               	movwf	??_ADC_to_string
  2858  04B3  084F               	movf	??_ADC_to_string,w
  2859  04B4  00C2               	movwf	sprintf@f
  2860  04B5  087A               	movf	_cont,w
  2861  04B6  00D0               	movwf	??_ADC_to_string+1
  2862  04B7  01D1               	clrf	??_ADC_to_string+2
  2863  04B8  0850               	movf	??_ADC_to_string+1,w
  2864  04B9  00C3               	movwf	?_sprintf+1
  2865  04BA  0851               	movf	??_ADC_to_string+2,w
  2866  04BB  00C4               	movwf	?_sprintf+2
  2867  04BC  3034               	movlw	(low (_data| 0))& (0+255)
  2868  04BD  120A  118A  201E  120A  118A  	fcall	_sprintf
  2869  04C2                     l91:
  2870  04C2  0008               	return
  2871  04C3                     __end_of_ADC_to_string:
  2872                           
  2873                           	psect	text21
  2874  001E                     __ptext21:	
  2875 ;; *************** function _sprintf *****************
  2876 ;; Defined at:
  2877 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  sp              1    wreg     PTR unsigned char 
  2880 ;;		 -> data(8), 
  2881 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  2882 ;;		 -> STR_3(5), 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  2885 ;;		 -> data(8), 
  2886 ;;  tmpval          4    0        struct .
  2887 ;;  val             2   15[BANK0 ] unsigned int 
  2888 ;;  cp              2    0        PTR const unsigned char 
  2889 ;;  len             2    0        unsigned int 
  2890 ;;  c               1   18[BANK0 ] unsigned char 
  2891 ;;  prec            1   17[BANK0 ] char 
  2892 ;;  flag            1   13[BANK0 ] unsigned char 
  2893 ;;  ap              1   12[BANK0 ] PTR void [1]
  2894 ;;		 -> ?_sprintf(2), 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  2    6[BANK0 ] int 
  2897 ;; Registers used:
  2898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2904 ;;      Params:         0       3       0       0       0
  2905 ;;      Locals:         0       7       0       0       0
  2906 ;;      Temps:          0       3       0       0       0
  2907 ;;      Totals:         0      13       0       0       0
  2908 ;;Total ram usage:       13 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    2
  2911 ;; This function calls:
  2912 ;;		___bmul
  2913 ;;		___lwdiv
  2914 ;;		___lwmod
  2915 ;;		_isdigit
  2916 ;; This function is called by:
  2917 ;;		_ADC_to_string
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           
  2922                           ;psect for function _sprintf
  2923  001E                     _sprintf:
  2924                           
  2925                           ;incstack = 0
  2926                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2927                           ;sprintf@sp stored from wreg
  2928  001E  1283               	bcf	3,5	;RP0=0, select bank0
  2929  001F  1303               	bcf	3,6	;RP1=0, select bank0
  2930  0020  00CA               	movwf	sprintf@sp
  2931  0021                     l1685:
  2932                           
  2933                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2934  0021  3043               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2935  0022  00C5               	movwf	??_sprintf
  2936  0023  0845               	movf	??_sprintf,w
  2937  0024  00C8               	movwf	sprintf@ap
  2938                           
  2939                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2940  0025  296C               	goto	l1763
  2941  0026                     l1687:
  2942                           
  2943                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2944  0026  3025               	movlw	37
  2945  0027  064E               	xorwf	sprintf@c,w
  2946  0028  1903               	btfsc	3,2
  2947  0029  282B               	goto	u911
  2948  002A  282C               	goto	u910
  2949  002B                     u911:
  2950  002B  2838               	goto	l1693
  2951  002C                     u910:
  2952  002C                     l1689:
  2953                           
  2954                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2955  002C  084E               	movf	sprintf@c,w
  2956  002D  00C5               	movwf	??_sprintf
  2957  002E  084A               	movf	sprintf@sp,w
  2958  002F  0084               	movwf	4
  2959  0030  0845               	movf	??_sprintf,w
  2960  0031  1383               	bcf	3,7	;select IRP bank0
  2961  0032  0080               	movwf	0
  2962  0033                     l1691:
  2963  0033  3001               	movlw	1
  2964  0034  00C5               	movwf	??_sprintf
  2965  0035  0845               	movf	??_sprintf,w
  2966  0036  07CA               	addwf	sprintf@sp,f
  2967                           
  2968                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  2969  0037  296C               	goto	l1763
  2970  0038                     l1693:
  2971                           
  2972                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2973  0038  01C9               	clrf	sprintf@flag
  2974  0039                     l1695:
  2975                           
  2976                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  2977  0039  0842               	movf	sprintf@f,w
  2978  003A  0084               	movwf	4
  2979  003B  120A  118A  238B  120A  118A  	fcall	stringdir
  2980  0040  3A2E               	xorlw	46
  2981  0041  1D03               	skipz
  2982  0042  2844               	goto	u921
  2983  0043  2845               	goto	u920
  2984  0044                     u921:
  2985  0044  287C               	goto	l1709
  2986  0045                     u920:
  2987  0045                     l1697:
  2988                           
  2989                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  2990  0045  3001               	movlw	1
  2991  0046  00C5               	movwf	??_sprintf
  2992  0047  0845               	movf	??_sprintf,w
  2993  0048  07C2               	addwf	sprintf@f,f
  2994  0049                     l1699:
  2995                           
  2996                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  2997  0049  01CD               	clrf	sprintf@prec
  2998                           
  2999                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3000  004A  286B               	goto	l1707
  3001  004B                     l1701:
  3002                           
  3003                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  3004  004B  1283               	bcf	3,5	;RP0=0, select bank0
  3005  004C  1303               	bcf	3,6	;RP1=0, select bank0
  3006  004D  084D               	movf	sprintf@prec,w
  3007  004E  00C5               	movwf	??_sprintf
  3008  004F  0845               	movf	??_sprintf,w
  3009  0050  00F2               	movwf	___bmul@multiplicand
  3010  0051  300A               	movlw	10
  3011  0052  120A  118A  249A  120A  118A  	fcall	___bmul
  3012  0057  1283               	bcf	3,5	;RP0=0, select bank0
  3013  0058  1303               	bcf	3,6	;RP1=0, select bank0
  3014  0059  00C6               	movwf	??_sprintf+1
  3015  005A  0846               	movf	??_sprintf+1,w
  3016  005B  00CD               	movwf	sprintf@prec
  3017  005C                     l1703:
  3018                           
  3019                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  3020  005C  0842               	movf	sprintf@f,w
  3021  005D  0084               	movwf	4
  3022  005E  120A  118A  238B  120A  118A  	fcall	stringdir
  3023  0063  3ED0               	addlw	-48
  3024  0064  00C5               	movwf	??_sprintf
  3025  0065  0845               	movf	??_sprintf,w
  3026  0066  07CD               	addwf	sprintf@prec,f
  3027  0067                     l1705:
  3028  0067  3001               	movlw	1
  3029  0068  00C5               	movwf	??_sprintf
  3030  0069  0845               	movf	??_sprintf,w
  3031  006A  07C2               	addwf	sprintf@f,f
  3032  006B                     l1707:
  3033                           
  3034                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3035  006B  0842               	movf	sprintf@f,w
  3036  006C  0084               	movwf	4
  3037  006D  120A  118A  238B  120A  118A  	fcall	stringdir
  3038  0072  120A  118A  24C3  120A  118A  	fcall	_isdigit
  3039  0077  1803               	btfsc	3,0
  3040  0078  287A               	goto	u931
  3041  0079  287B               	goto	u930
  3042  007A                     u931:
  3043  007A  284B               	goto	l1701
  3044  007B                     u930:
  3045  007B  287D               	goto	l1713
  3046  007C                     l1709:
  3047                           
  3048                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  3049  007C  01CD               	clrf	sprintf@prec
  3050  007D                     l1713:
  3051  007D  3001               	movlw	1
  3052  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3053  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3054  0080  07C2               	addwf	sprintf@f,f
  3055  0081  30FF               	movlw	-1
  3056  0082  0742               	addwf	sprintf@f,w
  3057  0083  0084               	movwf	4
  3058  0084  120A  118A  238B  120A  118A  	fcall	stringdir
  3059  0089  00CE               	movwf	sprintf@c
  3060  008A  00C5               	movwf	??_sprintf
  3061  008B  01C6               	clrf	??_sprintf+1
  3062                           
  3063                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3064                           ; Switch size 1, requested type "simple"
  3065                           ; Number of cases is 1, Range of values is 0 to 0
  3066                           ; switch strategies available:
  3067                           ; Name         Instructions Cycles
  3068                           ; simple_byte            4     3 (average)
  3069                           ; direct_byte           11     8 (fixed)
  3070                           ; jumptable            260     6 (fixed)
  3071                           ;	Chosen strategy is simple_byte
  3072  008C  0846               	movf	??_sprintf+1,w
  3073  008D  3A00               	xorlw	0	; case 0
  3074  008E  1903               	skipnz
  3075  008F  2891               	goto	l1891
  3076  0090  296C               	goto	l1763
  3077  0091                     l1891:
  3078                           
  3079                           ; Switch size 1, requested type "simple"
  3080                           ; Number of cases is 3, Range of values is 0 to 105
  3081                           ; switch strategies available:
  3082                           ; Name         Instructions Cycles
  3083                           ; simple_byte           10     6 (average)
  3084                           ; jumptable            260     6 (fixed)
  3085                           ;	Chosen strategy is simple_byte
  3086  0091  0845               	movf	??_sprintf,w
  3087  0092  3A00               	xorlw	0	; case 0
  3088  0093  1903               	skipnz
  3089  0094  297E               	goto	l1765
  3090  0095  3A64               	xorlw	100	; case 100
  3091  0096  1903               	skipnz
  3092  0097  289C               	goto	l1715
  3093  0098  3A0D               	xorlw	13	; case 105
  3094  0099  1903               	skipnz
  3095  009A  289C               	goto	l1715
  3096  009B  296C               	goto	l1763
  3097  009C                     l1715:
  3098                           
  3099                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3100  009C  0848               	movf	sprintf@ap,w
  3101  009D  0084               	movwf	4
  3102  009E  1383               	bcf	3,7	;select IRP bank0
  3103  009F  0800               	movf	0,w
  3104  00A0  00CB               	movwf	sprintf@val
  3105  00A1  0A84               	incf	4,f
  3106  00A2  0800               	movf	0,w
  3107  00A3  00CC               	movwf	sprintf@val+1
  3108  00A4                     l1717:
  3109  00A4  3002               	movlw	2
  3110  00A5  00C5               	movwf	??_sprintf
  3111  00A6  0845               	movf	??_sprintf,w
  3112  00A7  07C8               	addwf	sprintf@ap,f
  3113  00A8                     l1719:
  3114                           
  3115                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  3116  00A8  1FCC               	btfss	sprintf@val+1,7
  3117  00A9  28AB               	goto	u941
  3118  00AA  28AC               	goto	u940
  3119  00AB                     u941:
  3120  00AB  28B5               	goto	l1725
  3121  00AC                     u940:
  3122  00AC                     l1721:
  3123                           
  3124                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  3125  00AC  3003               	movlw	3
  3126  00AD  00C5               	movwf	??_sprintf
  3127  00AE  0845               	movf	??_sprintf,w
  3128  00AF  04C9               	iorwf	sprintf@flag,f
  3129  00B0                     l1723:
  3130                           
  3131                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  3132  00B0  09CB               	comf	sprintf@val,f
  3133  00B1  09CC               	comf	sprintf@val+1,f
  3134  00B2  0ACB               	incf	sprintf@val,f
  3135  00B3  1903               	skipnz
  3136  00B4  0ACC               	incf	sprintf@val+1,f
  3137  00B5                     l1725:
  3138                           
  3139                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  3140  00B5  084D               	movf	sprintf@prec,w
  3141  00B6  1D03               	btfss	3,2
  3142  00B7  28B9               	goto	u951
  3143  00B8  28BA               	goto	u950
  3144  00B9                     u951:
  3145  00B9  28C4               	goto	l1731
  3146  00BA                     u950:
  3147  00BA                     l1727:
  3148  00BA  084B               	movf	sprintf@val,w
  3149  00BB  044C               	iorwf	sprintf@val+1,w
  3150  00BC  1D03               	btfss	3,2
  3151  00BD  28BF               	goto	u961
  3152  00BE  28C0               	goto	u960
  3153  00BF                     u961:
  3154  00BF  28C4               	goto	l1731
  3155  00C0                     u960:
  3156  00C0                     l1729:
  3157                           
  3158                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  3159  00C0  3001               	movlw	1
  3160  00C1  00C5               	movwf	??_sprintf
  3161  00C2  0845               	movf	??_sprintf,w
  3162  00C3  07CD               	addwf	sprintf@prec,f
  3163  00C4                     l1731:
  3164                           
  3165                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3166  00C4  01CE               	clrf	sprintf@c
  3167  00C5  0ACE               	incf	sprintf@c,f
  3168  00C6                     l1735:
  3169                           
  3170                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3171  00C6  084E               	movf	sprintf@c,w
  3172  00C7  00C5               	movwf	??_sprintf
  3173  00C8  0745               	addwf	??_sprintf,w
  3174  00C9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3175  00CA  0084               	movwf	4
  3176  00CB  120A  118A  238B  120A  118A  	fcall	stringdir
  3177  00D0  00C6               	movwf	??_sprintf+1
  3178  00D1  120A  118A  238B  120A  118A  	fcall	stringdir
  3179  00D6  00C7               	movwf	??_sprintf+2
  3180  00D7  0847               	movf	??_sprintf+2,w
  3181  00D8  024C               	subwf	sprintf@val+1,w
  3182  00D9  1D03               	skipz
  3183  00DA  28DD               	goto	u975
  3184  00DB  0846               	movf	??_sprintf+1,w
  3185  00DC  024B               	subwf	sprintf@val,w
  3186  00DD                     u975:
  3187  00DD  1803               	skipnc
  3188  00DE  28E0               	goto	u971
  3189  00DF  28E1               	goto	u970
  3190  00E0                     u971:
  3191  00E0  28E2               	goto	l1739
  3192  00E1                     u970:
  3193  00E1  28EC               	goto	l1741
  3194  00E2                     l1739:
  3195  00E2  3001               	movlw	1
  3196  00E3  00C5               	movwf	??_sprintf
  3197  00E4  0845               	movf	??_sprintf,w
  3198  00E5  07CE               	addwf	sprintf@c,f
  3199  00E6  3005               	movlw	5
  3200  00E7  064E               	xorwf	sprintf@c,w
  3201  00E8  1D03               	btfss	3,2
  3202  00E9  28EB               	goto	u981
  3203  00EA  28EC               	goto	u980
  3204  00EB                     u981:
  3205  00EB  28C6               	goto	l1735
  3206  00EC                     u980:
  3207  00EC                     l1741:
  3208                           
  3209                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  3210  00EC  084D               	movf	sprintf@prec,w
  3211  00ED  00C5               	movwf	??_sprintf
  3212  00EE  01C6               	clrf	??_sprintf+1
  3213  00EF  1BC5               	btfsc	??_sprintf,7
  3214  00F0  03C6               	decf	??_sprintf+1,f
  3215  00F1  0846               	movf	??_sprintf+1,w
  3216  00F2  3A80               	xorlw	128
  3217  00F3  3C80               	sublw	128
  3218  00F4  1D03               	skipz
  3219  00F5  28F8               	goto	u995
  3220  00F6  0845               	movf	??_sprintf,w
  3221  00F7  024E               	subwf	sprintf@c,w
  3222  00F8                     u995:
  3223  00F8  1803               	skipnc
  3224  00F9  28FB               	goto	u991
  3225  00FA  28FC               	goto	u990
  3226  00FB                     u991:
  3227  00FB  28FD               	goto	l1745
  3228  00FC                     u990:
  3229  00FC                     l1743:
  3230  00FC  2917               	goto	l1749
  3231  00FD                     l1745:
  3232  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3233  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  3234  00FF  084D               	movf	sprintf@prec,w
  3235  0100  00C5               	movwf	??_sprintf
  3236  0101  01C6               	clrf	??_sprintf+1
  3237  0102  1BC5               	btfsc	??_sprintf,7
  3238  0103  03C6               	decf	??_sprintf+1,f
  3239  0104  0846               	movf	??_sprintf+1,w
  3240  0105  3A80               	xorlw	128
  3241  0106  00C7               	movwf	??_sprintf+2
  3242  0107  3080               	movlw	128
  3243  0108  0247               	subwf	??_sprintf+2,w
  3244  0109  1D03               	skipz
  3245  010A  290D               	goto	u1005
  3246  010B  084E               	movf	sprintf@c,w
  3247  010C  0245               	subwf	??_sprintf,w
  3248  010D                     u1005:
  3249  010D  1803               	skipnc
  3250  010E  2910               	goto	u1001
  3251  010F  2911               	goto	u1000
  3252  0110                     u1001:
  3253  0110  2917               	goto	l1749
  3254  0111                     u1000:
  3255  0111                     l1747:
  3256                           
  3257                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
  3258  0111  1283               	bcf	3,5	;RP0=0, select bank0
  3259  0112  1303               	bcf	3,6	;RP1=0, select bank0
  3260  0113  084E               	movf	sprintf@c,w
  3261  0114  00C5               	movwf	??_sprintf
  3262  0115  0845               	movf	??_sprintf,w
  3263  0116  00CD               	movwf	sprintf@prec
  3264  0117                     l1749:
  3265                           
  3266                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  3267  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3268  0118  1303               	bcf	3,6	;RP1=0, select bank0
  3269  0119  0849               	movf	sprintf@flag,w
  3270  011A  3903               	andlw	3
  3271  011B  1903               	btfsc	3,2
  3272  011C  291E               	goto	u1011
  3273  011D  291F               	goto	u1010
  3274  011E                     u1011:
  3275  011E  2963               	goto	l1761
  3276  011F                     u1010:
  3277  011F                     l1751:
  3278                           
  3279                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  3280  011F  302D               	movlw	45
  3281  0120  00C5               	movwf	??_sprintf
  3282  0121  084A               	movf	sprintf@sp,w
  3283  0122  0084               	movwf	4
  3284  0123  0845               	movf	??_sprintf,w
  3285  0124  1383               	bcf	3,7	;select IRP bank0
  3286  0125  0080               	movwf	0
  3287  0126                     l1753:
  3288  0126  3001               	movlw	1
  3289  0127  00C5               	movwf	??_sprintf
  3290  0128  0845               	movf	??_sprintf,w
  3291  0129  07CA               	addwf	sprintf@sp,f
  3292  012A  2963               	goto	l1761
  3293  012B                     l1755:
  3294                           
  3295                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  3296  012B  300A               	movlw	10
  3297  012C  00BC               	movwf	___lwmod@divisor
  3298  012D  3000               	movlw	0
  3299  012E  00BD               	movwf	___lwmod@divisor+1
  3300  012F  084D               	movf	sprintf@prec,w
  3301  0130  00C5               	movwf	??_sprintf
  3302  0131  0745               	addwf	??_sprintf,w
  3303  0132  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3304  0133  0084               	movwf	4
  3305  0134  120A  118A  238B  120A  118A  	fcall	stringdir
  3306  0139  00F2               	movwf	___lwdiv@divisor
  3307  013A  120A  118A  238B  120A  118A  	fcall	stringdir
  3308  013F  00F3               	movwf	___lwdiv@divisor+1
  3309  0140  084C               	movf	sprintf@val+1,w
  3310  0141  00F5               	movwf	___lwdiv@dividend+1
  3311  0142  084B               	movf	sprintf@val,w
  3312  0143  00F4               	movwf	___lwdiv@dividend
  3313  0144  120A  118A  2301  120A  118A  	fcall	___lwdiv
  3314  0149  0873               	movf	?___lwdiv+1,w
  3315  014A  1283               	bcf	3,5	;RP0=0, select bank0
  3316  014B  1303               	bcf	3,6	;RP1=0, select bank0
  3317  014C  00BF               	movwf	___lwmod@dividend+1
  3318  014D  0872               	movf	?___lwdiv,w
  3319  014E  00BE               	movwf	___lwmod@dividend
  3320  014F  120A  118A  2345  120A  118A  	fcall	___lwmod
  3321  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3322  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3323  0156  083C               	movf	?___lwmod,w
  3324  0157  3E30               	addlw	48
  3325  0158  00C6               	movwf	??_sprintf+1
  3326  0159  0846               	movf	??_sprintf+1,w
  3327  015A  00CE               	movwf	sprintf@c
  3328  015B                     l1757:
  3329                           
  3330                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  3331  015B  084E               	movf	sprintf@c,w
  3332  015C  00C5               	movwf	??_sprintf
  3333  015D  084A               	movf	sprintf@sp,w
  3334  015E  0084               	movwf	4
  3335  015F  0845               	movf	??_sprintf,w
  3336  0160  1383               	bcf	3,7	;select IRP bank0
  3337  0161  0080               	movwf	0
  3338  0162  2926               	goto	l1753
  3339  0163                     l1761:
  3340                           
  3341                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  3342  0163  30FF               	movlw	255
  3343  0164  00C5               	movwf	??_sprintf
  3344  0165  0845               	movf	??_sprintf,w
  3345  0166  07CD               	addwf	sprintf@prec,f
  3346  0167  0A4D               	incf	sprintf@prec,w
  3347  0168  1D03               	btfss	3,2
  3348  0169  296B               	goto	u1021
  3349  016A  296C               	goto	u1020
  3350  016B                     u1021:
  3351  016B  292B               	goto	l1755
  3352  016C                     u1020:
  3353  016C                     l1763:
  3354                           
  3355                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3356  016C  3001               	movlw	1
  3357  016D  07C2               	addwf	sprintf@f,f
  3358  016E  30FF               	movlw	-1
  3359  016F  0742               	addwf	sprintf@f,w
  3360  0170  0084               	movwf	4
  3361  0171  120A  118A  238B  120A  118A  	fcall	stringdir
  3362  0176  00C5               	movwf	??_sprintf
  3363  0177  0845               	movf	??_sprintf,w
  3364  0178  00CE               	movwf	sprintf@c
  3365  0179  084E               	movf	sprintf@c,w
  3366  017A  1D03               	btfss	3,2
  3367  017B  297D               	goto	u1031
  3368  017C  297E               	goto	u1030
  3369  017D                     u1031:
  3370  017D  2826               	goto	l1687
  3371  017E                     u1030:
  3372  017E                     l1765:
  3373                           
  3374                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  3375  017E  084A               	movf	sprintf@sp,w
  3376  017F  0084               	movwf	4
  3377  0180  1383               	bcf	3,7	;select IRP bank0
  3378  0181  0180               	clrf	0
  3379  0182                     l355:
  3380  0182  0008               	return
  3381  0183                     __end_of_sprintf:
  3382                           
  3383                           	psect	text22
  3384  04C3                     __ptext22:	
  3385 ;; *************** function _isdigit *****************
  3386 ;; Defined at:
  3387 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  c               1    wreg     unsigned char 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;  c               1    3[COMMON] unsigned char 
  3392 ;; Return value:  Size  Location     Type
  3393 ;;		None               void
  3394 ;; Registers used:
  3395 ;;		wreg, status,2, status,0
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3401 ;;      Params:         0       0       0       0       0
  3402 ;;      Locals:         2       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0
  3404 ;;      Totals:         2       0       0       0       0
  3405 ;;Total ram usage:        2 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    1
  3408 ;; This function calls:
  3409 ;;		Nothing
  3410 ;; This function is called by:
  3411 ;;		_sprintf
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           
  3416                           ;psect for function _isdigit
  3417  04C3                     _isdigit:
  3418                           
  3419                           ;incstack = 0
  3420                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3421                           ;isdigit@c stored from wreg
  3422  04C3  00F3               	movwf	isdigit@c
  3423  04C4                     l1237:
  3424  04C4  01F2               	clrf	_isdigit$960
  3425  04C5                     l1239:
  3426  04C5  303A               	movlw	58
  3427  04C6  0273               	subwf	isdigit@c,w
  3428  04C7  1803               	skipnc
  3429  04C8  2CCA               	goto	u411
  3430  04C9  2CCB               	goto	u410
  3431  04CA                     u411:
  3432  04CA  2CD3               	goto	l1245
  3433  04CB                     u410:
  3434  04CB                     l1241:
  3435  04CB  3030               	movlw	48
  3436  04CC  0273               	subwf	isdigit@c,w
  3437  04CD  1C03               	skipc
  3438  04CE  2CD0               	goto	u421
  3439  04CF  2CD1               	goto	u420
  3440  04D0                     u421:
  3441  04D0  2CD3               	goto	l1245
  3442  04D1                     u420:
  3443  04D1                     l1243:
  3444  04D1  01F2               	clrf	_isdigit$960
  3445  04D2  0AF2               	incf	_isdigit$960,f
  3446  04D3                     l1245:
  3447  04D3  0C72               	rrf	_isdigit$960,w
  3448  04D4                     l787:
  3449  04D4  0008               	return
  3450  04D5                     __end_of_isdigit:
  3451                           
  3452                           	psect	text23
  3453  0345                     __ptext23:	
  3454 ;; *************** function ___lwmod *****************
  3455 ;; Defined at:
  3456 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  divisor         2    0[BANK0 ] unsigned int 
  3459 ;;  dividend        2    2[BANK0 ] unsigned int 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  counter         1    5[BANK0 ] unsigned char 
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  2    0[BANK0 ] unsigned int 
  3464 ;; Registers used:
  3465 ;;		wreg, status,2, status,0
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3471 ;;      Params:         0       4       0       0       0
  3472 ;;      Locals:         0       1       0       0       0
  3473 ;;      Temps:          0       1       0       0       0
  3474 ;;      Totals:         0       6       0       0       0
  3475 ;;Total ram usage:        6 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    1
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		_sprintf
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           
  3486                           ;psect for function ___lwmod
  3487  0345                     ___lwmod:
  3488  0345                     l1643:	
  3489                           ;incstack = 0
  3490                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3491                           
  3492  0345  1283               	bcf	3,5	;RP0=0, select bank0
  3493  0346  1303               	bcf	3,6	;RP1=0, select bank0
  3494  0347  083C               	movf	___lwmod@divisor,w
  3495  0348  043D               	iorwf	___lwmod@divisor+1,w
  3496  0349  1903               	btfsc	3,2
  3497  034A  2B4C               	goto	u801
  3498  034B  2B4D               	goto	u800
  3499  034C                     u801:
  3500  034C  2B7C               	goto	l1661
  3501  034D                     u800:
  3502  034D                     l1645:
  3503  034D  01C1               	clrf	___lwmod@counter
  3504  034E  0AC1               	incf	___lwmod@counter,f
  3505  034F  2B5B               	goto	l1651
  3506  0350                     l1647:
  3507  0350  3001               	movlw	1
  3508  0351                     u815:
  3509  0351  1003               	clrc
  3510  0352  0DBC               	rlf	___lwmod@divisor,f
  3511  0353  0DBD               	rlf	___lwmod@divisor+1,f
  3512  0354  3EFF               	addlw	-1
  3513  0355  1D03               	skipz
  3514  0356  2B51               	goto	u815
  3515  0357                     l1649:
  3516  0357  3001               	movlw	1
  3517  0358  00C0               	movwf	??___lwmod
  3518  0359  0840               	movf	??___lwmod,w
  3519  035A  07C1               	addwf	___lwmod@counter,f
  3520  035B                     l1651:
  3521  035B  1FBD               	btfss	___lwmod@divisor+1,7
  3522  035C  2B5E               	goto	u821
  3523  035D  2B5F               	goto	u820
  3524  035E                     u821:
  3525  035E  2B50               	goto	l1647
  3526  035F                     u820:
  3527  035F                     l1653:
  3528  035F  083D               	movf	___lwmod@divisor+1,w
  3529  0360  023F               	subwf	___lwmod@dividend+1,w
  3530  0361  1D03               	skipz
  3531  0362  2B65               	goto	u835
  3532  0363  083C               	movf	___lwmod@divisor,w
  3533  0364  023E               	subwf	___lwmod@dividend,w
  3534  0365                     u835:
  3535  0365  1C03               	skipc
  3536  0366  2B68               	goto	u831
  3537  0367  2B69               	goto	u830
  3538  0368                     u831:
  3539  0368  2B6F               	goto	l1657
  3540  0369                     u830:
  3541  0369                     l1655:
  3542  0369  083C               	movf	___lwmod@divisor,w
  3543  036A  02BE               	subwf	___lwmod@dividend,f
  3544  036B  083D               	movf	___lwmod@divisor+1,w
  3545  036C  1C03               	skipc
  3546  036D  03BF               	decf	___lwmod@dividend+1,f
  3547  036E  02BF               	subwf	___lwmod@dividend+1,f
  3548  036F                     l1657:
  3549  036F  3001               	movlw	1
  3550  0370                     u845:
  3551  0370  1003               	clrc
  3552  0371  0CBD               	rrf	___lwmod@divisor+1,f
  3553  0372  0CBC               	rrf	___lwmod@divisor,f
  3554  0373  3EFF               	addlw	-1
  3555  0374  1D03               	skipz
  3556  0375  2B70               	goto	u845
  3557  0376                     l1659:
  3558  0376  3001               	movlw	1
  3559  0377  02C1               	subwf	___lwmod@counter,f
  3560  0378  1D03               	btfss	3,2
  3561  0379  2B7B               	goto	u851
  3562  037A  2B7C               	goto	u850
  3563  037B                     u851:
  3564  037B  2B5F               	goto	l1653
  3565  037C                     u850:
  3566  037C                     l1661:
  3567  037C  083F               	movf	___lwmod@dividend+1,w
  3568  037D  00BD               	movwf	?___lwmod+1
  3569  037E  083E               	movf	___lwmod@dividend,w
  3570  037F  00BC               	movwf	?___lwmod
  3571  0380                     l777:
  3572  0380  0008               	return
  3573  0381                     __end_of___lwmod:
  3574                           
  3575                           	psect	text24
  3576  0301                     __ptext24:	
  3577 ;; *************** function ___lwdiv *****************
  3578 ;; Defined at:
  3579 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  divisor         2    2[COMMON] unsigned int 
  3582 ;;  dividend        2    4[COMMON] unsigned int 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  quotient        2    7[COMMON] unsigned int 
  3585 ;;  counter         1    9[COMMON] unsigned char 
  3586 ;; Return value:  Size  Location     Type
  3587 ;;                  2    2[COMMON] unsigned int 
  3588 ;; Registers used:
  3589 ;;		wreg, status,2, status,0
  3590 ;; Tracked objects:
  3591 ;;		On entry : 0/0
  3592 ;;		On exit  : 0/0
  3593 ;;		Unchanged: 0/0
  3594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3595 ;;      Params:         4       0       0       0       0
  3596 ;;      Locals:         3       0       0       0       0
  3597 ;;      Temps:          1       0       0       0       0
  3598 ;;      Totals:         8       0       0       0       0
  3599 ;;Total ram usage:        8 bytes
  3600 ;; Hardware stack levels used:    1
  3601 ;; Hardware stack levels required when called:    1
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_sprintf
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           
  3610                           ;psect for function ___lwdiv
  3611  0301                     ___lwdiv:
  3612  0301                     l1263:	
  3613                           ;incstack = 0
  3614                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3615                           
  3616  0301  01F7               	clrf	___lwdiv@quotient
  3617  0302  01F8               	clrf	___lwdiv@quotient+1
  3618  0303                     l1265:
  3619  0303  0872               	movf	___lwdiv@divisor,w
  3620  0304  0473               	iorwf	___lwdiv@divisor+1,w
  3621  0305  1903               	btfsc	3,2
  3622  0306  2B08               	goto	u451
  3623  0307  2B09               	goto	u450
  3624  0308                     u451:
  3625  0308  2B40               	goto	l1285
  3626  0309                     u450:
  3627  0309                     l1267:
  3628  0309  01F9               	clrf	___lwdiv@counter
  3629  030A  0AF9               	incf	___lwdiv@counter,f
  3630  030B  2B17               	goto	l1273
  3631  030C                     l1269:
  3632  030C  3001               	movlw	1
  3633  030D                     u465:
  3634  030D  1003               	clrc
  3635  030E  0DF2               	rlf	___lwdiv@divisor,f
  3636  030F  0DF3               	rlf	___lwdiv@divisor+1,f
  3637  0310  3EFF               	addlw	-1
  3638  0311  1D03               	skipz
  3639  0312  2B0D               	goto	u465
  3640  0313                     l1271:
  3641  0313  3001               	movlw	1
  3642  0314  00F6               	movwf	??___lwdiv
  3643  0315  0876               	movf	??___lwdiv,w
  3644  0316  07F9               	addwf	___lwdiv@counter,f
  3645  0317                     l1273:
  3646  0317  1FF3               	btfss	___lwdiv@divisor+1,7
  3647  0318  2B1A               	goto	u471
  3648  0319  2B1B               	goto	u470
  3649  031A                     u471:
  3650  031A  2B0C               	goto	l1269
  3651  031B                     u470:
  3652  031B                     l1275:
  3653  031B  3001               	movlw	1
  3654  031C                     u485:
  3655  031C  1003               	clrc
  3656  031D  0DF7               	rlf	___lwdiv@quotient,f
  3657  031E  0DF8               	rlf	___lwdiv@quotient+1,f
  3658  031F  3EFF               	addlw	-1
  3659  0320  1D03               	skipz
  3660  0321  2B1C               	goto	u485
  3661  0322  0873               	movf	___lwdiv@divisor+1,w
  3662  0323  0275               	subwf	___lwdiv@dividend+1,w
  3663  0324  1D03               	skipz
  3664  0325  2B28               	goto	u495
  3665  0326  0872               	movf	___lwdiv@divisor,w
  3666  0327  0274               	subwf	___lwdiv@dividend,w
  3667  0328                     u495:
  3668  0328  1C03               	skipc
  3669  0329  2B2B               	goto	u491
  3670  032A  2B2C               	goto	u490
  3671  032B                     u491:
  3672  032B  2B33               	goto	l1281
  3673  032C                     u490:
  3674  032C                     l1277:
  3675  032C  0872               	movf	___lwdiv@divisor,w
  3676  032D  02F4               	subwf	___lwdiv@dividend,f
  3677  032E  0873               	movf	___lwdiv@divisor+1,w
  3678  032F  1C03               	skipc
  3679  0330  03F5               	decf	___lwdiv@dividend+1,f
  3680  0331  02F5               	subwf	___lwdiv@dividend+1,f
  3681  0332                     l1279:
  3682  0332  1477               	bsf	___lwdiv@quotient,0
  3683  0333                     l1281:
  3684  0333  3001               	movlw	1
  3685  0334                     u505:
  3686  0334  1003               	clrc
  3687  0335  0CF3               	rrf	___lwdiv@divisor+1,f
  3688  0336  0CF2               	rrf	___lwdiv@divisor,f
  3689  0337  3EFF               	addlw	-1
  3690  0338  1D03               	skipz
  3691  0339  2B34               	goto	u505
  3692  033A                     l1283:
  3693  033A  3001               	movlw	1
  3694  033B  02F9               	subwf	___lwdiv@counter,f
  3695  033C  1D03               	btfss	3,2
  3696  033D  2B3F               	goto	u511
  3697  033E  2B40               	goto	u510
  3698  033F                     u511:
  3699  033F  2B1B               	goto	l1275
  3700  0340                     u510:
  3701  0340                     l1285:
  3702  0340  0878               	movf	___lwdiv@quotient+1,w
  3703  0341  00F3               	movwf	?___lwdiv+1
  3704  0342  0877               	movf	___lwdiv@quotient,w
  3705  0343  00F2               	movwf	?___lwdiv
  3706  0344                     l767:
  3707  0344  0008               	return
  3708  0345                     __end_of___lwdiv:
  3709                           
  3710                           	psect	text25
  3711  049A                     __ptext25:	
  3712 ;; *************** function ___bmul *****************
  3713 ;; Defined at:
  3714 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;  multiplier      1    wreg     unsigned char 
  3717 ;;  multiplicand    1    2[COMMON] unsigned char 
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;  multiplier      1    5[COMMON] unsigned char 
  3720 ;;  product         1    4[COMMON] unsigned char 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      unsigned char 
  3723 ;; Registers used:
  3724 ;;		wreg, status,2, status,0
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3730 ;;      Params:         1       0       0       0       0
  3731 ;;      Locals:         2       0       0       0       0
  3732 ;;      Temps:          1       0       0       0       0
  3733 ;;      Totals:         4       0       0       0       0
  3734 ;;Total ram usage:        4 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    1
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_sprintf
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           
  3745                           ;psect for function ___bmul
  3746  049A                     ___bmul:
  3747                           
  3748                           ;incstack = 0
  3749                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3750                           ;___bmul@multiplier stored from wreg
  3751  049A  00F5               	movwf	___bmul@multiplier
  3752  049B                     l1249:
  3753  049B  01F4               	clrf	___bmul@product
  3754  049C                     l1251:
  3755  049C  1C75               	btfss	___bmul@multiplier,0
  3756  049D  2C9F               	goto	u431
  3757  049E  2CA0               	goto	u430
  3758  049F                     u431:
  3759  049F  2CA4               	goto	l1255
  3760  04A0                     u430:
  3761  04A0                     l1253:
  3762  04A0  0872               	movf	___bmul@multiplicand,w
  3763  04A1  00F3               	movwf	??___bmul
  3764  04A2  0873               	movf	??___bmul,w
  3765  04A3  07F4               	addwf	___bmul@product,f
  3766  04A4                     l1255:
  3767  04A4  1003               	clrc
  3768  04A5  0DF2               	rlf	___bmul@multiplicand,f
  3769  04A6                     l1257:
  3770  04A6  1003               	clrc
  3771  04A7  0CF5               	rrf	___bmul@multiplier,f
  3772  04A8  0875               	movf	___bmul@multiplier,w
  3773  04A9  1D03               	btfss	3,2
  3774  04AA  2CAC               	goto	u441
  3775  04AB  2CAD               	goto	u440
  3776  04AC                     u441:
  3777  04AC  2C9C               	goto	l1251
  3778  04AD                     u440:
  3779  04AD                     l1259:
  3780  04AD  0874               	movf	___bmul@product,w
  3781  04AE                     l385:
  3782  04AE  0008               	return
  3783  04AF                     __end_of___bmul:
  3784                           
  3785                           	psect	text26
  3786  050E                     __ptext26:	
  3787 ;; *************** function _ISR *****************
  3788 ;; Defined at:
  3789 ;;		line 78 in file "main_maestro.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;		None
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;		None
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		None
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3803 ;;      Params:         0       0       0       0       0
  3804 ;;      Locals:         0       0       0       0       0
  3805 ;;      Temps:          2       0       0       0       0
  3806 ;;      Totals:         2       0       0       0       0
  3807 ;;Total ram usage:        2 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; This function calls:
  3810 ;;		Nothing
  3811 ;; This function is called by:
  3812 ;;		Interrupt level 1
  3813 ;; This function uses a non-reentrant model
  3814 ;;
  3815                           
  3816                           
  3817                           ;psect for function _ISR
  3818  050E                     _ISR:
  3819  050E                     i1l77:
  3820  050E  0871               	movf	??_ISR+1,w
  3821  050F  008A               	movwf	10
  3822  0510  0E70               	swapf	??_ISR,w
  3823  0511  0083               	movwf	3
  3824  0512  0EFE               	swapf	btemp,f
  3825  0513  0E7E               	swapf	btemp,w
  3826  0514  0009               	retfie
  3827  0515                     __end_of_ISR:
  3828  007E                     btemp	set	126	;btemp
  3829  007E                     wtemp0	set	126
  3830                           
  3831                           	psect	intentry
  3832  0004                     __pintentry:	
  3833                           ;incstack = 0
  3834                           ; Regs used in _ISR: []
  3835                           
  3836  0004                     interrupt_function:
  3837  007E                     saved_w	set	btemp
  3838  0004  00FE               	movwf	btemp
  3839  0005  0E03               	swapf	3,w
  3840  0006  00F0               	movwf	??_ISR
  3841  0007  080A               	movf	10,w
  3842  0008  00F1               	movwf	??_ISR+1
  3843  0009  120A  118A  2D0E   	ljmp	_ISR
  3844                           
  3845                           	psect	config
  3846                           
  3847                           ;Config register CONFIG1 @ 0x2007
  3848                           ;	Oscillator Selection bits
  3849                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  3850                           ;	Watchdog Timer Enable bit
  3851                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3852                           ;	Power-up Timer Enable bit
  3853                           ;	PWRTE = OFF, PWRT disabled
  3854                           ;	RE3/MCLR pin function select bit
  3855                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3856                           ;	Code Protection bit
  3857                           ;	CP = OFF, Program memory code protection is disabled
  3858                           ;	Data Code Protection bit
  3859                           ;	CPD = OFF, Data memory code protection is disabled
  3860                           ;	Brown Out Reset Selection bits
  3861                           ;	BOREN = OFF, BOR disabled
  3862                           ;	Internal External Switchover bit
  3863                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3864                           ;	Fail-Safe Clock Monitor Enabled bit
  3865                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3866                           ;	Low Voltage Programming Enable bit
  3867                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3868                           ;	In-Circuit Debugger Mode bit
  3869                           ;	DEBUG = 0x1, unprogrammed default
  3870  2007                     	org	8199
  3871  2007  20D6               	dw	8406
  3872                           
  3873                           ;Config register CONFIG2 @ 0x2008
  3874                           ;	Brown-out Reset Selection bit
  3875                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3876                           ;	Flash Program Memory Self Write Enable bits
  3877                           ;	WRT = OFF, Write protection off
  3878  2008                     	org	8200
  3879  2008  3FFF               	dw	16383

Data Sizes:
    Strings     30
    Constant    10
    Data        0
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     25      53
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> data(BANK0[8]), STR_2(CODE[9]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> data(BANK0[8]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _ADC_to_string->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4141
                                             22 BANK0      3     3      0
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _Show_val_LCD
                        _Write_USART
                 _Write_USART_String
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                    _USART_INTERRUPT
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_INTERRUPT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   4     2      2     218
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         1     1      0     706
                                              2 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     322
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     384
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0    1999
                                             19 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1999
                                              6 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     145
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _isdigit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Write_USART
   _Write_USART_String
     _Write_USART
   _setup
     _USART_INTERRUPT
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      41       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      35       5       66.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      41      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 08:17:03 2021

                           pc 0002                ___bmul@product 0074                   _SSPSTATbits 0094  
                          l91 04C2                            l94 0483                            l88 03EE  
                          fsr 0004          __size_of_Write_USART 000C              ?_USART_INTERRUPT 0070  
                         l100 0216                           l101 026E                           l110 026F  
                         l102 021C                           l103 0222                           l104 0228  
                         l105 022E                           l106 0234                           l123 02BA  
                         l107 023A                           l132 04E1                           l108 0240  
                         l220 0507                           l141 0499                           l109 0246  
                         l126 052C                           l223 050D                           l216 0468  
                         l129 0457                           l217 046D                           l138 043D  
                         l234 04F6                           l226 051A                           l147 0300  
                         l182 0526                           l176 0506                           l185 04E3  
                         l194 0419                           l355 0182                           l179 0520  
                         l188 04ED                           l385 04AE                           l767 0344  
                         l777 0380                           l787 04D4                           _RC2 003A  
                         u410 04CB                           u411 04CA                           u420 04D1  
                         u421 04D0                           u430 04A0                           u510 0340  
                         u431 049F                           u511 033F                           u440 04AD  
                         u441 04AC                           u505 0334                           u450 0309  
                         u451 0308                           _ISR 050E                           u470 031B  
                         u630 04E9                           u471 031A                           u631 04E8  
                         u800 034D                           u640 0460                           u465 030D  
                         u801 034C                           u641 045F                           u490 032C  
                         u491 032B                           u820 035F                           u900 0300  
                         u485 031C                           u821 035E                           u901 02FF  
                         u830 0369                           u910 002C                           u495 0328  
                         u831 0368                           u815 0351                           u911 002B  
                         u920 0045                           u921 0044                           u850 037C  
                         u930 007B                           u851 037B                           u835 0365  
                         u931 007A                           u940 00AC                           u860 0420  
                         u780 050D                           u845 0370                           u941 00AB  
                         u861 041F                           u781 050C                           u950 00BA  
                         u870 0432                           u790 0419                           u951 00B9  
                         u871 0431                           u791 0418                           u960 00C0  
                         u880 02CA                           u961 00BF                           u970 00E1  
                         u890 02EE                           u971 00E0                           u980 00EC  
                         u981 00EB                           u990 00FC                           u991 00FB  
                         u975 00DD                           u995 00F8                           fsr0 0004  
                         indf 0000   __size_of_Write_USART_String 002B                          ?_ISR 0070  
                        l1241 04CB                          l1251 049C                          l1243 04D1  
                        l1331 04E3                          l1253 04A0                          l1245 04D3  
                        l1237 04C4                          l1333 04E9                          l1255 04A4  
                        l1271 0313                          l1263 0301                          l1239 04C5  
                        l1511 03EF                          l1351 0521                          l1335 0215  
                        l1503 0516                          l1257 04A6                          l1249 049B  
                        l1281 0333                          l1273 0317                          l1265 0303  
                        l1513 03F1                          l1345 051B                          l1361 0467  
                        l1353 0459                          l1505 04EE                          l1259 04AD  
                        l1283 033A                          l1275 031B                          l1267 0309  
                        l1515 0402                          l1347 051E                          l1339 024C  
                        l1355 0460                          l1507 04F3                          l1277 032C  
                        l1269 030C                          l1285 0340                          l1701 004B  
                        l1621 0528                          l1517 0406                          l1349 04FF  
                        l1357 0462                          l1461 03C3                          l1453 0507  
                        l1279 0332                          l1703 005C                          l1631 0454  
                        l1623 043F                          l1359 0464                          l1471 03CC  
                        l1463 03C6                          l1455 03B9                          l1721 00AC  
                        l1713 007D                          l1705 0067                          l1625 0442  
                        l1641 0496                          l1633 0485                          l1481 03D3  
                        l1473 03CD                          l1465 03C7                          l1457 03BF  
                        l1801 0191                          l1651 035B                          l1643 0345  
                        l1731 00C4                          l1723 00B0                          l1715 009C  
                        l1707 006B                          l1627 0448                          l1635 0488  
                        l1483 03D6                          l1475 03CE                          l1467 03C8  
                        l1459 03C2                          l1811 01B8                          l1803 0196  
                        l1653 035F                          l1645 034D                          l1661 037C  
                        l1741 00EC                          l1725 00B5                          l1717 00A4  
                        l1709 007C                          l1629 044B                          l1637 048E  
                        l1485 03DB                          l1477 03CF                          l1469 03C9  
                        l1821 01E4                          l1813 01BE                          l1805 01A2  
                        l1655 0369                          l1647 0350                          l1751 011F  
                        l1743 00FC                          l1735 00C6                          l1727 00BA  
                        l1719 00A8                          l1671 042C                          l1639 0491  
                        l1487 03E0                          l1479 03D0                          l1831 0205  
                        l1823 01ED                          l1815 01C8                          l1807 01AB  
                        l1657 036F                          l1649 0357                          l1753 0126  
                        l1761 0163                          l1745 00FD                          l1729 00C0  
                        l1673 0432                          l1665 041B                          l1681 02DC  
                        l1489 03E5                          l1833 020B                          l1825 01F1  
                        l1817 01D2                          l1809 01AE                          l1659 0376  
                        l1755 012B                          l1747 0111                          l1739 00E2  
                        l1691 0033                          l1763 016C                          l1675 0437  
                        l1667 0420                          l1683 02E4                          l1827 01F6  
                        l1819 01D5                          l1757 015B                          l1749 0117  
                        l1765 017E                          l1693 0038                          l1685 0021  
                        l1781 028E                          l1669 0425                          l1677 02BB  
                        l1829 01FF                          l1695 0039                          l1687 0026  
                        l1783 0294                          l1775 0270                          l1679 02C0  
                        l1791 047A                          l1697 0045                          l1689 002C  
                        l1785 04D5                          l1777 0276                          l1793 0183  
                        l1891 0091                          l1699 0049                          l1787 04AF  
                        l1779 027F                          l1795 0188                          l1789 046E  
                        l1797 018B                          l1799 018C                          l1889 0254  
                        STR_1 039B                          STR_2 03AB                          STR_3 03B4  
                        u1000 0111                          u1001 0110                          u1010 011F  
                        u1011 011E                          u1020 016C                          u1021 016B  
                        u1005 010D                          u1030 017E                          u1031 017D  
                        u1107 0298                          u1117 044F                          u1047 01B4  
                        u1057 01CE                          u1067 01DD                          u1077 0493  
                        u1087 027A                          u1097 0289                          _RCIF 0065  
                        i1l77 050E                          _TRMT 04C1                          _data 0034  
           ?_Lcd_Write_String 0075                          _cont 007A                          _main 0183  
                        btemp 007E                          start 000C            ??_Lcd_Write_String 0077  
             __end_of_Lcd_Cmd 0458             ___bmul@multiplier 0075                         ??_ISR 0070  
                       ?_main 0070                         _ANSEL 0188               __end_of___lwdiv 0345  
             __end_of___lwmod 0381                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009       __size_of_Lcd_Set_Cursor 0024  
                       _TRISA 0085                         _TRISB 0086                         _TRISD 0088  
                       _TRISE 0089                         _TXREG 0019               __end_of_dpowers 039B  
             __end_of_initOsc 0270               __end_of_isdigit 04D5                         _setup 03B9  
                       pclath 000A               __end_of_spiInit 046E               __end_of_spiRead 04F7  
                       status 0003                         wtemp0 007E               __end_of_sprintf 0183  
                 ?_USART_Init 0070              __end_of_Lcd_Init 02BB              __end_of_Lcd_Port 052D  
             __initialization 000F                  __end_of_main 0214                        ??_main 0052  
          __size_of_Lcd_Clear 000D                   initOsc@IRCF 0074           _USART_Init_BaudRate 051B  
                      ?_setup 0070                        _ANSELH 0189                     ??_Lcd_Cmd 0073  
                      _SPBRGH 009A       __size_of_Lcd_Write_Char 0016                        _TRISC2 043A  
                      _TRISC3 043B                        _TRISC5 043D                        _SSPCON 0014  
                      _SSPBUF 0013                        ___bmul 049A          ?_USART_Init_BaudRate 0070  
                   ??___lwdiv 0076                     ??___lwmod 0040                     ??_initOsc 0072  
                   ??_isdigit 0072                        saved_w 007E              __end_of_spiWrite 051B  
                   ??_spiInit 0075                     ??_spiRead 0072           __size_of_USART_Init 0008  
                   ??_sprintf 0045               Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076  
     __end_of__initialization 001A             __end_of_Lcd_Clear 04E2           ___bmul@multiplicand 0072  
              __pcstackCOMMON 0070         ??_USART_Init_BaudRate 0072                 __end_of_setup 03EF  
              _Lcd_Set_Cursor 041A                     ?_Lcd_Init 0070                     ?_Lcd_Port 0070  
                     ??_setup 0076                  Write_USART@a 0072                    __pbssBANK0 0020  
                  _data_total 0020                    __pmaintext 0183                       ?___bmul 0072  
               ??_Write_USART 0072                    __pintentry 0004       __size_of_spiReceiveWait 0007  
   __size_of_Lcd_Write_String 0046        __end_of_Lcd_Set_Cursor 043E        __size_of_ADC_to_string 0014  
  __end_of_Write_USART_String 041A                    ??_Lcd_Init 0076                    ??_Lcd_Port 0072  
    __size_of_USART_INTERRUPT 0006                       _SSPSTAT 0094                    __stringtab 0381  
              _Lcd_Write_Char 0484                       _Lcd_Cmd 043E                  ??_USART_Init 0072  
                   ?_spiWrite 0070               __size_of___bmul 0015                 ?_Show_val_LCD 0070  
                     ___lwdiv 0301                       ___lwmod 0345               ?_Lcd_Set_Cursor 0076  
                     __ptext1 0515                       __ptext2 04EE                       __ptext3 0507  
                     __ptext4 03B9                       __ptext5 0458                       __ptext6 0214  
                     __ptext7 051B                       __ptext8 04FF                       __ptext9 0521  
                __size_of_ISR 0007                       _dpowers 0391                       _initOsc 0214  
         __end_of_Write_USART 04EE                       _isdigit 04C3                       _spiInit 0458  
                     _spiRead 04EE            __end_of_USART_Init 0507                       _sprintf 001E  
                     clrloop0 04F8        __end_of_Lcd_Write_Char 049A          end_of_initialization 001A  
               _ADC_to_string 04AF                ??_Show_val_LCD 003E                     _RCSTAbits 0018  
                  ??_spiWrite 0072                     Lcd_Port@a 0072                     _PORTCbits 0007  
                   _PORTEbits 0009                   spiWrite@dat 0072               ?_Lcd_Write_Char 0070  
           Lcd_Write_String@a 0075             Lcd_Write_String@i 003C                ?_ADC_to_string 0070  
                   _TXSTAbits 0098             ??_USART_INTERRUPT 0072                     _Lcd_Clear 04D5  
              _spiReceiveWait 0507                __end_of___bmul 04AF                   _Write_USART 04E2  
            _Lcd_Write_String 02BB           start_initialization 000F                   __end_of_ISR 0515  
           __size_of_Lcd_Init 004B                  _hola_esclavo 007B             __size_of_Lcd_Port 0006  
 __end_of_USART_Init_BaudRate 0521        __end_of_spiReceiveWait 050E                    ?_Lcd_Clear 0070  
                    ??___bmul 0073               Lcd_Write_Char@a 0074                   __pbssCOMMON 007A  
                   ___latbits 0002                 __pcstackBANK0 003C          __end_of_Show_val_LCD 0484  
             ??_ADC_to_string 004F                      ?_Lcd_Cmd 0070                   sprintf@flag 0049  
          _Write_USART_String 03EF                   sprintf@prec 004D              ___lwdiv@dividend 0074  
             ?_spiReceiveWait 0070              ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0073  
                    ?___lwdiv 0072                      ?___lwmod 003C             __size_of_spiWrite 0006  
                   __pstrings 0381                      ?_initOsc 0070                      ?_isdigit 0070  
                    ?_spiInit 0072                      ?_spiRead 0070          ??_Write_USART_String 0075  
            ___lwdiv@quotient 0077                      ?_sprintf 0042                __size_of_setup 0036  
        spiInit@sTransmitEdge 0074             interrupt_function 0004                     clear_ram0 04F7  
                    _PIE1bits 008C            spiInit@sDataSample 0072                      Lcd_Cmd@a 0075  
                 ??_Lcd_Clear 0076                   __stringbase 0390              ??_Lcd_Write_Char 0073  
             _USART_INTERRUPT 0521                      _Lcd_Init 0270                      _Lcd_Port 0527  
    __end_of_Lcd_Write_String 0301              __size_of_Lcd_Cmd 001A                  ?_Write_USART 0070  
            __size_of___lwdiv 0044              __size_of___lwmod 003C            __end_of__stringtab 0391  
                 _isdigit$960 0072         __size_of_Show_val_LCD 0016                    sprintf@val 004B  
            __size_of_initOsc 005C              __size_of_isdigit 0012               ___lwdiv@divisor 0072  
             ___lwdiv@counter 0079                      __ptext10 03EF                      __ptext11 04E2  
                    __ptext20 04AF                      __ptext12 046E                      __ptext21 001E  
                    __ptext13 02BB                      __ptext22 04C3                      __ptext14 0484  
                    __ptext23 0345                      __ptext15 041A                      __ptext24 0301  
                    __ptext16 0270                      __ptext25 049A                      __ptext17 04D5  
                    __ptext26 050E                      __ptext18 043E                      __ptext19 0527  
            __size_of_spiInit 0016              __size_of_spiRead 0009              __size_of_sprintf 0165  
               __size_of_main 0091                      _spiWrite 0515                  _Show_val_LCD 046E  
                spiInit@sType 0075             spiInit@sClockIdle 0073       __end_of_USART_INTERRUPT 0527  
                  _INTCONbits 000B           Write_USART_String@a 0073           Write_USART_String@i 0076  
                    isdigit@c 0073                      intlevel1 0000                     sprintf@ap 0048  
                   sprintf@sp 004A              ___lwmod@dividend 003E              ??_spiReceiveWait 0072  
                   stringcode 038B                    _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006  
          Lcd_Set_Cursor@temp 0079                      sprintf@c 004E                      sprintf@f 0042  
             ___lwmod@divisor 003C               ___lwmod@counter 0041                      stringdir 038B  
                    stringtab 0381         __end_of_ADC_to_string 04C3                    _USART_Init 04FF  
