

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 12:03:54 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text24,local,class=CODE,merge=1,delta=2,group=3
    36                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 2.20
    45                           ; Generated 12/02/2020 GMT
    46                           ; 
    47                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F887 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0088                     	;# 
   118  0089                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  008F                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0093                     	;# 
   129  0094                     	;# 
   130  0095                     	;# 
   131  0096                     	;# 
   132  0097                     	;# 
   133  0098                     	;# 
   134  0099                     	;# 
   135  009A                     	;# 
   136  009B                     	;# 
   137  009C                     	;# 
   138  009D                     	;# 
   139  009E                     	;# 
   140  009F                     	;# 
   141  0105                     	;# 
   142  0107                     	;# 
   143  0108                     	;# 
   144  0109                     	;# 
   145  010C                     	;# 
   146  010C                     	;# 
   147  010D                     	;# 
   148  010E                     	;# 
   149  010F                     	;# 
   150  0185                     	;# 
   151  0187                     	;# 
   152  0188                     	;# 
   153  0189                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  000E                     	;# 
   172  000F                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0013                     	;# 
   177  0014                     	;# 
   178  0015                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0017                     	;# 
   182  0018                     	;# 
   183  0019                     	;# 
   184  001A                     	;# 
   185  001B                     	;# 
   186  001B                     	;# 
   187  001C                     	;# 
   188  001D                     	;# 
   189  001E                     	;# 
   190  001F                     	;# 
   191  0081                     	;# 
   192  0085                     	;# 
   193  0086                     	;# 
   194  0087                     	;# 
   195  0088                     	;# 
   196  0089                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  008F                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0095                     	;# 
   209  0096                     	;# 
   210  0097                     	;# 
   211  0098                     	;# 
   212  0099                     	;# 
   213  009A                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  009F                     	;# 
   219  0105                     	;# 
   220  0107                     	;# 
   221  0108                     	;# 
   222  0109                     	;# 
   223  010C                     	;# 
   224  010C                     	;# 
   225  010D                     	;# 
   226  010E                     	;# 
   227  010F                     	;# 
   228  0185                     	;# 
   229  0187                     	;# 
   230  0188                     	;# 
   231  0189                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  0000                     	;# 
   235  0001                     	;# 
   236  0002                     	;# 
   237  0003                     	;# 
   238  0004                     	;# 
   239  0005                     	;# 
   240  0006                     	;# 
   241  0007                     	;# 
   242  0008                     	;# 
   243  0009                     	;# 
   244  000A                     	;# 
   245  000B                     	;# 
   246  000C                     	;# 
   247  000D                     	;# 
   248  000E                     	;# 
   249  000E                     	;# 
   250  000F                     	;# 
   251  0010                     	;# 
   252  0011                     	;# 
   253  0012                     	;# 
   254  0013                     	;# 
   255  0014                     	;# 
   256  0015                     	;# 
   257  0015                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  0018                     	;# 
   261  0019                     	;# 
   262  001A                     	;# 
   263  001B                     	;# 
   264  001B                     	;# 
   265  001C                     	;# 
   266  001D                     	;# 
   267  001E                     	;# 
   268  001F                     	;# 
   269  0081                     	;# 
   270  0085                     	;# 
   271  0086                     	;# 
   272  0087                     	;# 
   273  0088                     	;# 
   274  0089                     	;# 
   275  008C                     	;# 
   276  008D                     	;# 
   277  008E                     	;# 
   278  008F                     	;# 
   279  0090                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0093                     	;# 
   283  0093                     	;# 
   284  0093                     	;# 
   285  0094                     	;# 
   286  0095                     	;# 
   287  0096                     	;# 
   288  0097                     	;# 
   289  0098                     	;# 
   290  0099                     	;# 
   291  009A                     	;# 
   292  009B                     	;# 
   293  009C                     	;# 
   294  009D                     	;# 
   295  009E                     	;# 
   296  009F                     	;# 
   297  0105                     	;# 
   298  0107                     	;# 
   299  0108                     	;# 
   300  0109                     	;# 
   301  010C                     	;# 
   302  010C                     	;# 
   303  010D                     	;# 
   304  010E                     	;# 
   305  010F                     	;# 
   306  0185                     	;# 
   307  0187                     	;# 
   308  0188                     	;# 
   309  0189                     	;# 
   310  018C                     	;# 
   311  018D                     	;# 
   312  0000                     	;# 
   313  0001                     	;# 
   314  0002                     	;# 
   315  0003                     	;# 
   316  0004                     	;# 
   317  0005                     	;# 
   318  0006                     	;# 
   319  0007                     	;# 
   320  0008                     	;# 
   321  0009                     	;# 
   322  000A                     	;# 
   323  000B                     	;# 
   324  000C                     	;# 
   325  000D                     	;# 
   326  000E                     	;# 
   327  000E                     	;# 
   328  000F                     	;# 
   329  0010                     	;# 
   330  0011                     	;# 
   331  0012                     	;# 
   332  0013                     	;# 
   333  0014                     	;# 
   334  0015                     	;# 
   335  0015                     	;# 
   336  0016                     	;# 
   337  0017                     	;# 
   338  0018                     	;# 
   339  0019                     	;# 
   340  001A                     	;# 
   341  001B                     	;# 
   342  001B                     	;# 
   343  001C                     	;# 
   344  001D                     	;# 
   345  001E                     	;# 
   346  001F                     	;# 
   347  0081                     	;# 
   348  0085                     	;# 
   349  0086                     	;# 
   350  0087                     	;# 
   351  0088                     	;# 
   352  0089                     	;# 
   353  008C                     	;# 
   354  008D                     	;# 
   355  008E                     	;# 
   356  008F                     	;# 
   357  0090                     	;# 
   358  0091                     	;# 
   359  0092                     	;# 
   360  0093                     	;# 
   361  0093                     	;# 
   362  0093                     	;# 
   363  0094                     	;# 
   364  0095                     	;# 
   365  0096                     	;# 
   366  0097                     	;# 
   367  0098                     	;# 
   368  0099                     	;# 
   369  009A                     	;# 
   370  009B                     	;# 
   371  009C                     	;# 
   372  009D                     	;# 
   373  009E                     	;# 
   374  009F                     	;# 
   375  0105                     	;# 
   376  0107                     	;# 
   377  0108                     	;# 
   378  0109                     	;# 
   379  010C                     	;# 
   380  010C                     	;# 
   381  010D                     	;# 
   382  010E                     	;# 
   383  010F                     	;# 
   384  0185                     	;# 
   385  0187                     	;# 
   386  0188                     	;# 
   387  0189                     	;# 
   388  018C                     	;# 
   389  018D                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  000E                     	;# 
   406  000F                     	;# 
   407  0010                     	;# 
   408  0011                     	;# 
   409  0012                     	;# 
   410  0013                     	;# 
   411  0014                     	;# 
   412  0015                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0017                     	;# 
   416  0018                     	;# 
   417  0019                     	;# 
   418  001A                     	;# 
   419  001B                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  001D                     	;# 
   423  001E                     	;# 
   424  001F                     	;# 
   425  0081                     	;# 
   426  0085                     	;# 
   427  0086                     	;# 
   428  0087                     	;# 
   429  0088                     	;# 
   430  0089                     	;# 
   431  008C                     	;# 
   432  008D                     	;# 
   433  008E                     	;# 
   434  008F                     	;# 
   435  0090                     	;# 
   436  0091                     	;# 
   437  0092                     	;# 
   438  0093                     	;# 
   439  0093                     	;# 
   440  0093                     	;# 
   441  0094                     	;# 
   442  0095                     	;# 
   443  0096                     	;# 
   444  0097                     	;# 
   445  0098                     	;# 
   446  0099                     	;# 
   447  009A                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  009F                     	;# 
   453  0105                     	;# 
   454  0107                     	;# 
   455  0108                     	;# 
   456  0109                     	;# 
   457  010C                     	;# 
   458  010C                     	;# 
   459  010D                     	;# 
   460  010E                     	;# 
   461  010F                     	;# 
   462  0185                     	;# 
   463  0187                     	;# 
   464  0188                     	;# 
   465  0189                     	;# 
   466  018C                     	;# 
   467  018D                     	;# 
   468  0000                     	;# 
   469  0001                     	;# 
   470  0002                     	;# 
   471  0003                     	;# 
   472  0004                     	;# 
   473  0005                     	;# 
   474  0006                     	;# 
   475  0007                     	;# 
   476  0008                     	;# 
   477  0009                     	;# 
   478  000A                     	;# 
   479  000B                     	;# 
   480  000C                     	;# 
   481  000D                     	;# 
   482  000E                     	;# 
   483  000E                     	;# 
   484  000F                     	;# 
   485  0010                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0013                     	;# 
   489  0014                     	;# 
   490  0015                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001B                     	;# 
   499  001C                     	;# 
   500  001D                     	;# 
   501  001E                     	;# 
   502  001F                     	;# 
   503  0081                     	;# 
   504  0085                     	;# 
   505  0086                     	;# 
   506  0087                     	;# 
   507  0088                     	;# 
   508  0089                     	;# 
   509  008C                     	;# 
   510  008D                     	;# 
   511  008E                     	;# 
   512  008F                     	;# 
   513  0090                     	;# 
   514  0091                     	;# 
   515  0092                     	;# 
   516  0093                     	;# 
   517  0093                     	;# 
   518  0093                     	;# 
   519  0094                     	;# 
   520  0095                     	;# 
   521  0096                     	;# 
   522  0097                     	;# 
   523  0098                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009C                     	;# 
   528  009D                     	;# 
   529  009E                     	;# 
   530  009F                     	;# 
   531  0105                     	;# 
   532  0107                     	;# 
   533  0108                     	;# 
   534  0109                     	;# 
   535  010C                     	;# 
   536  010C                     	;# 
   537  010D                     	;# 
   538  010E                     	;# 
   539  010F                     	;# 
   540  0185                     	;# 
   541  0187                     	;# 
   542  0188                     	;# 
   543  0189                     	;# 
   544  018C                     	;# 
   545  018D                     	;# 
   546                           
   547                           	psect	strings
   548  0390                     __pstrings:
   549  0390                     stringtab:
   550  0390                     __stringtab:
   551                           
   552                           ;	String table - string pointers are 1 byte each
   553  0390  1BFF               	btfsc	btemp+1,7
   554  0391  2B9A               	ljmp	stringcode
   555  0392  1383               	bcf	3,7
   556  0393  187F               	btfsc	btemp+1,0
   557  0394  1783               	bsf	3,7
   558  0395  0800               	movf	0,w
   559  0396  0A84               	incf	4,f
   560  0397  1903               	skipnz
   561  0398  0AFF               	incf	btemp+1,f
   562  0399  0008               	return
   563  039A                     stringcode:
   564  039A                     stringdir:
   565  039A  3003               	movlw	high stringdir
   566  039B  008A               	movwf	10
   567  039C  0804               	movf	4,w
   568  039D  0A84               	incf	4,f
   569  039E  0782               	addwf	2,f
   570  039F                     __stringbase:
   571  039F  3400               	retlw	0
   572  03A0                     __end_of__stringtab:
   573  03A0                     _dpowers:
   574  03A0  3401               	retlw	1
   575  03A1  3400               	retlw	0
   576  03A2  340A               	retlw	10
   577  03A3  3400               	retlw	0
   578  03A4  3464               	retlw	100
   579  03A5  3400               	retlw	0
   580  03A6  34E8               	retlw	232
   581  03A7  3403               	retlw	3
   582  03A8  3410               	retlw	16
   583  03A9  3427               	retlw	39
   584  03AA                     __end_of_dpowers:
   585  0013                     _SSPBUF	set	19
   586  0014                     _SSPCON	set	20
   587  001A                     _RCREG	set	26
   588  0019                     _TXREG	set	25
   589  000B                     _INTCONbits	set	11
   590  0018                     _RCSTAbits	set	24
   591  0009                     _PORTEbits	set	9
   592  0007                     _PORTCbits	set	7
   593  0009                     _PORTE	set	9
   594  0008                     _PORTD	set	8
   595  0007                     _PORTC	set	7
   596  0005                     _PORTA	set	5
   597  0006                     _PORTB	set	6
   598  0065                     _RCIF	set	101
   599  0039                     _RC1	set	57
   600  0038                     _RC0	set	56
   601  003A                     _RC2	set	58
   602  0094                     _SSPSTATbits	set	148
   603  0094                     _SSPSTAT	set	148
   604  008C                     _PIE1bits	set	140
   605  0099                     _SPBRG	set	153
   606  009A                     _SPBRGH	set	154
   607  0098                     _TXSTAbits	set	152
   608  008F                     _OSCCONbits	set	143
   609  0089                     _TRISE	set	137
   610  0088                     _TRISD	set	136
   611  0086                     _TRISB	set	134
   612  0085                     _TRISA	set	133
   613  043B                     _TRISC3	set	1083
   614  043D                     _TRISC5	set	1085
   615  04C1                     _TRMT	set	1217
   616  043A                     _TRISC2	set	1082
   617  0439                     _TRISC1	set	1081
   618  0438                     _TRISC0	set	1080
   619  0189                     _ANSELH	set	393
   620  0188                     _ANSEL	set	392
   621  03AA                     STR_1:
   622  03AA  3463               	retlw	99	;'c'
   623  03AB  346F               	retlw	111	;'o'
   624  03AC  346E               	retlw	110	;'n'
   625  03AD  3474               	retlw	116	;'t'
   626  03AE  3420               	retlw	32	;' '
   627  03AF  3420               	retlw	32	;' '
   628  03B0  3420               	retlw	32	;' '
   629  03B1  3453               	retlw	83	;'S'
   630  03B2  3432               	retlw	50	;'2'
   631  03B3  343A               	retlw	58	;':'
   632  03B4  3420               	retlw	32	;' '
   633  03B5  3420               	retlw	32	;' '
   634  03B6  3420               	retlw	32	;' '
   635  03B7  3453               	retlw	83	;'S'
   636  03B8  3433               	retlw	51	;'3'
   637  03B9  343A               	retlw	58	;':'
   638  03BA  3400               	retlw	0
   639  03BB                     STR_2:
   640  03BB  3463               	retlw	99	;'c'
   641  03BC  346F               	retlw	111	;'o'
   642  03BD  346E               	retlw	110	;'n'
   643  03BE  3474               	retlw	116	;'t'
   644  03BF  343A               	retlw	58	;':'
   645  03C0  3420               	retlw	32	;' '
   646  03C1  3420               	retlw	32	;' '
   647  03C2  340A               	retlw	10
   648  03C3  3400               	retlw	0
   649  03C4                     STR_3:
   650  03C4  3425               	retlw	37	;'%'
   651  03C5  342E               	retlw	46	;'.'
   652  03C6  3433               	retlw	51	;'3'
   653  03C7  3469               	retlw	105	;'i'
   654  03C8  3400               	retlw	0
   655                           
   656                           	psect	cinit
   657  000F                     start_initialization:	
   658                           ; #config settings
   659                           
   660  000F                     __initialization:
   661                           
   662                           ; Clear objects allocated to COMMON
   663  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   664  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   665                           
   666                           ; Clear objects allocated to BANK0
   667  0011  1383               	bcf	3,7	;select IRP bank0
   668  0012  3020               	movlw	low __pbssBANK0
   669  0013  0084               	movwf	4
   670  0014  303E               	movlw	low (__pbssBANK0+30)
   671  0015  120A  118A  256D  120A  118A  	fcall	clear_ram0
   672  001A                     end_of_initialization:	
   673                           ;End of C runtime variable initialization code
   674                           
   675  001A                     __end_of__initialization:
   676  001A  0183               	clrf	3
   677  001B  120A  118A  2983   	ljmp	_main	;jump to C main() function
   678                           
   679                           	psect	bssCOMMON
   680  007A                     __pbssCOMMON:
   681  007A                     _val_TEMP:
   682  007A                     	ds	1
   683  007B                     _hola_esclavo:
   684  007B                     	ds	1
   685                           
   686                           	psect	bssBANK0
   687  0020                     __pbssBANK0:
   688  0020                     _data_total:
   689  0020                     	ds	20
   690  0034                     _val_ADC:
   691  0034                     	ds	1
   692  0035                     _cont:
   693  0035                     	ds	1
   694  0036                     _data:
   695  0036                     	ds	8
   696                           
   697                           	psect	clrtext
   698  056D                     clear_ram0:	
   699                           ;	Called with FSR containing the base address, and
   700                           ;	W with the last address+1
   701                           
   702  056D  0064               	clrwdt	;clear the watchdog before getting into this loop
   703  056E                     clrloop0:
   704  056E  0180               	clrf	0	;clear RAM location pointed to by FSR
   705  056F  0A84               	incf	4,f	;increment pointer
   706  0570  0604               	xorwf	4,w	;XOR with final address
   707  0571  1903               	btfsc	3,2	;have we reached the end yet?
   708  0572  3400               	retlw	0	;all done for this memory range, return
   709  0573  0604               	xorwf	4,w	;XOR again to restore value
   710  0574  2D6E               	goto	clrloop0	;do the next byte
   711                           
   712                           	psect	cstackCOMMON
   713  0070                     __pcstackCOMMON:
   714  0070                     ?_isdigit:
   715  0070                     ?_setup:	
   716                           ; 1 bit 
   717                           
   718  0070                     ?_Lcd_Init:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_Lcd_Clear:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_SPI_CONT:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_SPI_ADC:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_SPI_TEMP:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_ADC_to_string:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?_Show_val_LCD:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?_Write_USART:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ?_initOsc:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     ?_USART_Init_BaudRate:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ?_USART_Init:	
   749                           ; 1 bytes @ 0x0
   750                           
   751  0070                     ?_spiWrite:	
   752                           ; 1 bytes @ 0x0
   753                           
   754  0070                     ?_spiRead:	
   755                           ; 1 bytes @ 0x0
   756                           
   757  0070                     ?_Lcd_Port:	
   758                           ; 1 bytes @ 0x0
   759                           
   760  0070                     ?_Lcd_Cmd:	
   761                           ; 1 bytes @ 0x0
   762                           
   763  0070                     ?_ISR:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0070                     ??_ISR:	
   767                           ; 1 bytes @ 0x0
   768                           
   769  0070                     ?_main:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0070                     ?_Lcd_Write_Char:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0070                     ?_spiReceiveWait:	
   776                           ; 1 bytes @ 0x0
   777                           
   778                           
   779                           ; 1 bytes @ 0x0
   780  0070                     	ds	2
   781  0072                     ??_Write_USART:
   782  0072                     ??_initOsc:	
   783                           ; 1 bytes @ 0x2
   784                           
   785  0072                     ??_USART_Init_BaudRate:	
   786                           ; 1 bytes @ 0x2
   787                           
   788  0072                     ??_USART_Init:	
   789                           ; 1 bytes @ 0x2
   790                           
   791  0072                     ?_spiInit:	
   792                           ; 1 bytes @ 0x2
   793                           
   794  0072                     ??_spiWrite:	
   795                           ; 1 bytes @ 0x2
   796                           
   797  0072                     ??_spiRead:	
   798                           ; 1 bytes @ 0x2
   799                           
   800  0072                     ??_Lcd_Port:	
   801                           ; 1 bytes @ 0x2
   802                           
   803  0072                     ??_isdigit:	
   804                           ; 1 bytes @ 0x2
   805                           
   806  0072                     ??_spiReceiveWait:	
   807                           ; 1 bytes @ 0x2
   808                           
   809  0072                     ?___bmul:	
   810                           ; 1 bytes @ 0x2
   811                           
   812  0072                     ?___lwdiv:	
   813                           ; 1 bytes @ 0x2
   814                           
   815  0072                     Lcd_Port@a:	
   816                           ; 2 bytes @ 0x2
   817                           
   818  0072                     Write_USART@a:	
   819                           ; 1 bytes @ 0x2
   820                           
   821  0072                     spiInit@sDataSample:	
   822                           ; 1 bytes @ 0x2
   823                           
   824  0072                     spiWrite@dat:	
   825                           ; 1 bytes @ 0x2
   826                           
   827  0072                     ___bmul@multiplicand:	
   828                           ; 1 bytes @ 0x2
   829                           
   830  0072                     _isdigit$977:	
   831                           ; 1 bytes @ 0x2
   832                           
   833  0072                     ___lwdiv@divisor:	
   834                           ; 1 bytes @ 0x2
   835                           
   836                           
   837                           ; 2 bytes @ 0x2
   838  0072                     	ds	1
   839  0073                     ??_SPI_CONT:
   840  0073                     ??_SPI_ADC:	
   841                           ; 1 bytes @ 0x3
   842                           
   843  0073                     ??_SPI_TEMP:	
   844                           ; 1 bytes @ 0x3
   845                           
   846  0073                     ?_Write_USART_String:	
   847                           ; 1 bytes @ 0x3
   848                           
   849  0073                     ??_Lcd_Cmd:	
   850                           ; 1 bytes @ 0x3
   851                           
   852  0073                     ??_Lcd_Write_Char:	
   853                           ; 1 bytes @ 0x3
   854                           
   855  0073                     ??___bmul:	
   856                           ; 1 bytes @ 0x3
   857                           
   858  0073                     spiInit@sClockIdle:	
   859                           ; 1 bytes @ 0x3
   860                           
   861  0073                     isdigit@c:	
   862                           ; 1 bytes @ 0x3
   863                           
   864  0073                     Write_USART_String@a:	
   865                           ; 1 bytes @ 0x3
   866                           
   867                           
   868                           ; 2 bytes @ 0x3
   869  0073                     	ds	1
   870  0074                     initOsc@IRCF:
   871  0074                     Lcd_Write_Char@a:	
   872                           ; 1 bytes @ 0x4
   873                           
   874  0074                     spiInit@sTransmitEdge:	
   875                           ; 1 bytes @ 0x4
   876                           
   877  0074                     ___bmul@product:	
   878                           ; 1 bytes @ 0x4
   879                           
   880  0074                     ___lwdiv@dividend:	
   881                           ; 1 bytes @ 0x4
   882                           
   883                           
   884                           ; 2 bytes @ 0x4
   885  0074                     	ds	1
   886  0075                     ?_Lcd_Write_String:
   887  0075                     ??_Write_USART_String:	
   888                           ; 1 bytes @ 0x5
   889                           
   890  0075                     ??_spiInit:	
   891                           ; 1 bytes @ 0x5
   892                           
   893  0075                     Lcd_Cmd@a:	
   894                           ; 1 bytes @ 0x5
   895                           
   896  0075                     spiInit@sType:	
   897                           ; 1 bytes @ 0x5
   898                           
   899  0075                     ___bmul@multiplier:	
   900                           ; 1 bytes @ 0x5
   901                           
   902  0075                     Lcd_Write_String@a:	
   903                           ; 1 bytes @ 0x5
   904                           
   905                           
   906                           ; 2 bytes @ 0x5
   907  0075                     	ds	1
   908  0076                     ??_setup:
   909  0076                     ??_Lcd_Init:	
   910                           ; 1 bytes @ 0x6
   911                           
   912  0076                     ??_Lcd_Clear:	
   913                           ; 1 bytes @ 0x6
   914                           
   915  0076                     ?_Lcd_Set_Cursor:	
   916                           ; 1 bytes @ 0x6
   917                           
   918  0076                     ??___lwdiv:	
   919                           ; 1 bytes @ 0x6
   920                           
   921  0076                     Lcd_Set_Cursor@b:	
   922                           ; 1 bytes @ 0x6
   923                           
   924  0076                     Write_USART_String@i:	
   925                           ; 1 bytes @ 0x6
   926                           
   927                           
   928                           ; 1 bytes @ 0x6
   929  0076                     	ds	1
   930  0077                     ??_Lcd_Set_Cursor:
   931  0077                     ??_Lcd_Write_String:	
   932                           ; 1 bytes @ 0x7
   933                           
   934  0077                     ___lwdiv@quotient:	
   935                           ; 1 bytes @ 0x7
   936                           
   937                           
   938                           ; 2 bytes @ 0x7
   939  0077                     	ds	1
   940  0078                     Lcd_Set_Cursor@a:
   941                           
   942                           ; 1 bytes @ 0x8
   943  0078                     	ds	1
   944  0079                     Lcd_Set_Cursor@temp:
   945  0079                     ___lwdiv@counter:	
   946                           ; 1 bytes @ 0x9
   947                           
   948                           
   949                           ; 1 bytes @ 0x9
   950  0079                     	ds	1
   951  007A                     ??_Show_val_LCD:
   952  007A                     ??_main:	
   953                           ; 1 bytes @ 0xA
   954                           
   955                           
   956                           	psect	cstackBANK0
   957  003E                     __pcstackBANK0:	
   958                           ; 1 bytes @ 0xA
   959                           
   960  003E                     ?___lwmod:
   961  003E                     Lcd_Write_String@i:	
   962                           ; 2 bytes @ 0x0
   963                           
   964  003E                     ___lwmod@divisor:	
   965                           ; 2 bytes @ 0x0
   966                           
   967                           
   968                           ; 2 bytes @ 0x0
   969  003E                     	ds	2
   970  0040                     ___lwmod@dividend:
   971                           
   972                           ; 2 bytes @ 0x2
   973  0040                     	ds	2
   974  0042                     ??___lwmod:
   975                           
   976                           ; 1 bytes @ 0x4
   977  0042                     	ds	1
   978  0043                     ___lwmod@counter:
   979                           
   980                           ; 1 bytes @ 0x5
   981  0043                     	ds	1
   982  0044                     ?_sprintf:
   983  0044                     sprintf@f:	
   984                           ; 2 bytes @ 0x6
   985                           
   986                           
   987                           ; 1 bytes @ 0x6
   988  0044                     	ds	3
   989  0047                     ??_sprintf:
   990                           
   991                           ; 1 bytes @ 0x9
   992  0047                     	ds	3
   993  004A                     sprintf@ap:
   994                           
   995                           ; 1 bytes @ 0xC
   996  004A                     	ds	1
   997  004B                     sprintf@flag:
   998                           
   999                           ; 1 bytes @ 0xD
  1000  004B                     	ds	1
  1001  004C                     sprintf@sp:
  1002                           
  1003                           ; 1 bytes @ 0xE
  1004  004C                     	ds	1
  1005  004D                     sprintf@val:
  1006                           
  1007                           ; 2 bytes @ 0xF
  1008  004D                     	ds	2
  1009  004F                     sprintf@prec:
  1010                           
  1011                           ; 1 bytes @ 0x11
  1012  004F                     	ds	1
  1013  0050                     sprintf@c:
  1014                           
  1015                           ; 1 bytes @ 0x12
  1016  0050                     	ds	1
  1017  0051                     ??_ADC_to_string:
  1018                           
  1019                           ; 1 bytes @ 0x13
  1020  0051                     	ds	3
  1021                           
  1022                           	psect	maintext
  1023  0183                     __pmaintext:	
  1024 ;;
  1025 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1026 ;;
  1027 ;; *************** function _main *****************
  1028 ;; Defined at:
  1029 ;;		line 89 in file "main_maestro.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;		None
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : B00/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1043 ;;      Params:         0       0       0       0       0
  1044 ;;      Locals:         0       0       0       0       0
  1045 ;;      Temps:          0       0       0       0       0
  1046 ;;      Totals:         0       0       0       0       0
  1047 ;;Total ram usage:        0 bytes
  1048 ;; Hardware stack levels required when called:    5
  1049 ;; This function calls:
  1050 ;;		_ADC_to_string
  1051 ;;		_Lcd_Clear
  1052 ;;		_Lcd_Init
  1053 ;;		_Lcd_Set_Cursor
  1054 ;;		_Lcd_Write_String
  1055 ;;		_SPI_ADC
  1056 ;;		_SPI_CONT
  1057 ;;		_SPI_TEMP
  1058 ;;		_Show_val_LCD
  1059 ;;		_Write_USART
  1060 ;;		_Write_USART_String
  1061 ;;		_setup
  1062 ;; This function is called by:
  1063 ;;		Startup code after reset
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           
  1068                           ;psect for function _main
  1069  0183                     _main:
  1070  0183                     l1872:	
  1071                           ;incstack = 0
  1072                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1073                           
  1074                           
  1075                           ;main_maestro.c: 90:     setup();
  1076  0183  120A  118A  2317  120A  118A  	fcall	_setup
  1077  0188                     l1874:
  1078                           
  1079                           ;main_maestro.c: 91:     PORTB = 0;
  1080  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1081  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1082  018A  0186               	clrf	6	;volatile
  1083  018B                     l1876:
  1084                           
  1085                           ;main_maestro.c: 92:     cont = 0;
  1086  018B  01B5               	clrf	_cont
  1087  018C                     l1878:
  1088                           
  1089                           ;main_maestro.c: 94:     Lcd_Init();
  1090  018C  120A  118A  2242  120A  118A  	fcall	_Lcd_Init
  1091  0191                     l1880:
  1092                           
  1093                           ;main_maestro.c: 95:     Lcd_Clear();
  1094  0191  120A  118A  254B  120A  118A  	fcall	_Lcd_Clear
  1095  0196                     l1882:
  1096                           
  1097                           ;main_maestro.c: 96:     Lcd_Set_Cursor(1,1);
  1098  0196  01F6               	clrf	Lcd_Set_Cursor@b
  1099  0197  0AF6               	incf	Lcd_Set_Cursor@b,f
  1100  0198  3001               	movlw	1
  1101  0199  120A  118A  2494  120A  118A  	fcall	_Lcd_Set_Cursor
  1102  019E                     l1884:
  1103                           
  1104                           ;main_maestro.c: 97:     Lcd_Write_String("cont   S2:   S3:");
  1105  019E  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1106  019F  00F5               	movwf	Lcd_Write_String@a
  1107  01A0  3080               	movlw	128
  1108  01A1  00F6               	movwf	Lcd_Write_String@a+1
  1109  01A2  120A  118A  228D  120A  118A  	fcall	_Lcd_Write_String
  1110  01A7                     l1886:
  1111                           
  1112                           ;main_maestro.c: 104:         SPI_CONT();
  1113  01A7  120A  118A  23C9  120A  118A  	fcall	_SPI_CONT
  1114  01AC                     l1888:
  1115                           
  1116                           ;main_maestro.c: 105:         SPI_ADC();
  1117  01AC  120A  118A  23FF  120A  118A  	fcall	_SPI_ADC
  1118  01B1                     l1890:
  1119                           
  1120                           ;main_maestro.c: 106:         SPI_TEMP();
  1121  01B1  120A  118A  2435  120A  118A  	fcall	_SPI_TEMP
  1122  01B6                     l1892:
  1123                           
  1124                           ;main_maestro.c: 108:         Write_USART_String("cont:  \n");
  1125  01B6  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1126  01B7  00F3               	movwf	Write_USART_String@a
  1127  01B8  3080               	movlw	128
  1128  01B9  00F4               	movwf	Write_USART_String@a+1
  1129  01BA  120A  118A  2469  120A  118A  	fcall	_Write_USART_String
  1130  01BF                     l1894:
  1131                           
  1132                           ;main_maestro.c: 109:         PORTB = val_TEMP;
  1133  01BF  087A               	movf	_val_TEMP,w
  1134  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1135  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1136  01C2  0086               	movwf	6	;volatile
  1137  01C3                     l1896:
  1138                           
  1139                           ;main_maestro.c: 110:         ADC_to_string();
  1140  01C3  120A  118A  2513  120A  118A  	fcall	_ADC_to_string
  1141  01C8                     l1898:
  1142                           
  1143                           ;main_maestro.c: 111:         Show_val_LCD();
  1144  01C8  120A  118A  2527  120A  118A  	fcall	_Show_val_LCD
  1145  01CD                     l1900:
  1146                           
  1147                           ;main_maestro.c: 112:         Write_USART_String(data);
  1148  01CD  3036               	movlw	(low (_data| 0))& (0+255)
  1149  01CE  00F3               	movwf	Write_USART_String@a
  1150  01CF  3000               	movlw	0
  1151  01D0  00F4               	movwf	Write_USART_String@a+1
  1152  01D1  120A  118A  2469  120A  118A  	fcall	_Write_USART_String
  1153  01D6                     l1902:
  1154                           
  1155                           ;main_maestro.c: 113:         Write_USART(13);
  1156  01D6  300D               	movlw	13
  1157  01D7  120A  118A  2558  120A  118A  	fcall	_Write_USART
  1158  01DC                     l1904:
  1159                           
  1160                           ;main_maestro.c: 114:         Write_USART(10);
  1161  01DC  300A               	movlw	10
  1162  01DD  120A  118A  2558  120A  118A  	fcall	_Write_USART
  1163  01E2  29A7               	goto	l1886
  1164  01E3  120A  118A  280C   	ljmp	start
  1165  01E6                     __end_of_main:
  1166                           
  1167                           	psect	text1
  1168  0317                     __ptext1:	
  1169 ;; *************** function _setup *****************
  1170 ;; Defined at:
  1171 ;;		line 126 in file "main_maestro.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1185 ;;      Params:         0       0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0
  1187 ;;      Temps:          0       0       0       0       0
  1188 ;;      Totals:         0       0       0       0       0
  1189 ;;Total ram usage:        0 bytes
  1190 ;; Hardware stack levels used:    1
  1191 ;; Hardware stack levels required when called:    2
  1192 ;; This function calls:
  1193 ;;		_USART_Init
  1194 ;;		_USART_Init_BaudRate
  1195 ;;		_initOsc
  1196 ;;		_spiInit
  1197 ;; This function is called by:
  1198 ;;		_main
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           
  1203                           ;psect for function _setup
  1204  0317                     _setup:
  1205  0317                     l1514:	
  1206                           ;incstack = 0
  1207                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1208                           
  1209                           
  1210                           ;main_maestro.c: 127:     initOsc(0b00000111);
  1211  0317  3007               	movlw	7
  1212  0318  120A  118A  21E6  120A  118A  	fcall	_initOsc
  1213  031D                     l1516:
  1214                           
  1215                           ;main_maestro.c: 128:     ANSEL = 0;
  1216  031D  1683               	bsf	3,5	;RP0=1, select bank3
  1217  031E  1703               	bsf	3,6	;RP1=1, select bank3
  1218  031F  0188               	clrf	8	;volatile
  1219  0320                     l1518:
  1220                           
  1221                           ;main_maestro.c: 129:     ANSELH = 0;
  1222  0320  0189               	clrf	9	;volatile
  1223  0321                     l1520:
  1224                           
  1225                           ;main_maestro.c: 131:     TRISA = 0;
  1226  0321  1683               	bsf	3,5	;RP0=1, select bank1
  1227  0322  1303               	bcf	3,6	;RP1=0, select bank1
  1228  0323  0185               	clrf	5	;volatile
  1229  0324                     l1522:
  1230                           
  1231                           ;main_maestro.c: 132:     TRISB = 0;
  1232  0324  0186               	clrf	6	;volatile
  1233  0325                     l1524:
  1234                           
  1235                           ;main_maestro.c: 136:     TRISD = 0;
  1236  0325  0188               	clrf	8	;volatile
  1237  0326                     l1526:
  1238                           
  1239                           ;main_maestro.c: 137:     TRISE = 0;
  1240  0326  0189               	clrf	9	;volatile
  1241  0327                     l1528:
  1242                           
  1243                           ;main_maestro.c: 139:     PORTA = 0;
  1244  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1245  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1246  0329  0185               	clrf	5	;volatile
  1247  032A                     l1530:
  1248                           
  1249                           ;main_maestro.c: 140:     PORTB = 0;
  1250  032A  0186               	clrf	6	;volatile
  1251  032B                     l1532:
  1252                           
  1253                           ;main_maestro.c: 141:     PORTC = 0;
  1254  032B  0187               	clrf	7	;volatile
  1255  032C                     l1534:
  1256                           
  1257                           ;main_maestro.c: 142:     PORTD = 0;
  1258  032C  0188               	clrf	8	;volatile
  1259  032D                     l1536:
  1260                           
  1261                           ;main_maestro.c: 143:     PORTE = 0;
  1262  032D  0189               	clrf	9	;volatile
  1263  032E                     l1538:
  1264                           
  1265                           ;main_maestro.c: 146:     TRISC0 = 0;
  1266  032E  1683               	bsf	3,5	;RP0=1, select bank1
  1267  032F  1303               	bcf	3,6	;RP1=0, select bank1
  1268  0330  1007               	bcf	7,0	;volatile
  1269  0331                     l1540:
  1270                           
  1271                           ;main_maestro.c: 147:     PORTCbits.RC0 = 1;
  1272  0331  1283               	bcf	3,5	;RP0=0, select bank0
  1273  0332  1303               	bcf	3,6	;RP1=0, select bank0
  1274  0333  1407               	bsf	7,0	;volatile
  1275  0334                     l1542:
  1276                           
  1277                           ;main_maestro.c: 148:     TRISC1 = 0;
  1278  0334  1683               	bsf	3,5	;RP0=1, select bank1
  1279  0335  1303               	bcf	3,6	;RP1=0, select bank1
  1280  0336  1087               	bcf	7,1	;volatile
  1281  0337                     l1544:
  1282                           
  1283                           ;main_maestro.c: 149:     PORTCbits.RC1 = 1;
  1284  0337  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0338  1303               	bcf	3,6	;RP1=0, select bank0
  1286  0339  1487               	bsf	7,1	;volatile
  1287  033A                     l1546:
  1288                           
  1289                           ;main_maestro.c: 150:     TRISC2 = 0;
  1290  033A  1683               	bsf	3,5	;RP0=1, select bank1
  1291  033B  1303               	bcf	3,6	;RP1=0, select bank1
  1292  033C  1107               	bcf	7,2	;volatile
  1293  033D                     l1548:
  1294                           
  1295                           ;main_maestro.c: 151:     PORTCbits.RC2 = 1;
  1296  033D  1283               	bcf	3,5	;RP0=0, select bank0
  1297  033E  1303               	bcf	3,6	;RP1=0, select bank0
  1298  033F  1507               	bsf	7,2	;volatile
  1299  0340                     l1550:
  1300                           
  1301                           ;main_maestro.c: 154:     USART_Init_BaudRate();
  1302  0340  120A  118A  258B  120A  118A  	fcall	_USART_Init_BaudRate
  1303  0345                     l1552:
  1304                           
  1305                           ;main_maestro.c: 155:     USART_Init();
  1306  0345  120A  118A  2575  120A  118A  	fcall	_USART_Init
  1307  034A                     l1554:
  1308                           
  1309                           ;main_maestro.c: 158:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1310  034A  01F2               	clrf	spiInit@sDataSample
  1311  034B  01F3               	clrf	spiInit@sClockIdle
  1312  034C  01F4               	clrf	spiInit@sTransmitEdge
  1313  034D  3020               	movlw	32
  1314  034E  120A  118A  24D2  120A  118A  	fcall	_spiInit
  1315  0353                     l104:
  1316  0353  0008               	return
  1317  0354                     __end_of_setup:
  1318                           
  1319                           	psect	text2
  1320  04D2                     __ptext2:	
  1321 ;; *************** function _spiInit *****************
  1322 ;; Defined at:
  1323 ;;		line 14 in file "SPI.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;  sType           1    wreg     enum E1264
  1326 ;;  sDataSample     1    2[COMMON] enum E1272
  1327 ;;  sClockIdle      1    3[COMMON] enum E1276
  1328 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  sType           1    5[COMMON] enum E1264
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, status,0
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1340 ;;      Params:         3       0       0       0       0
  1341 ;;      Locals:         1       0       0       0       0
  1342 ;;      Temps:          0       0       0       0       0
  1343 ;;      Totals:         4       0       0       0       0
  1344 ;;Total ram usage:        4 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    1
  1347 ;; This function calls:
  1348 ;;		Nothing
  1349 ;; This function is called by:
  1350 ;;		_setup
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           
  1355                           ;psect for function _spiInit
  1356  04D2                     _spiInit:
  1357                           
  1358                           ;incstack = 0
  1359                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1360                           ;spiInit@sType stored from wreg
  1361  04D2  00F5               	movwf	spiInit@sType
  1362  04D3                     l1406:
  1363                           
  1364                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1365  04D3  1683               	bsf	3,5	;RP0=1, select bank1
  1366  04D4  1303               	bcf	3,6	;RP1=0, select bank1
  1367  04D5  1287               	bcf	7,5	;volatile
  1368                           
  1369                           ;SPI.c: 17:     if(sType & 0b00000100)
  1370  04D6  1D75               	btfss	spiInit@sType,2
  1371  04D7  2CD9               	goto	u651
  1372  04D8  2CDA               	goto	u650
  1373  04D9                     u651:
  1374  04D9  2CDE               	goto	l1412
  1375  04DA                     u650:
  1376  04DA                     l1408:
  1377                           
  1378                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1379  04DA  0874               	movf	spiInit@sTransmitEdge,w
  1380  04DB  0094               	movwf	20	;volatile
  1381  04DC                     l1410:
  1382                           
  1383                           ;SPI.c: 20:         TRISC3 = 1;
  1384  04DC  1587               	bsf	7,3	;volatile
  1385                           
  1386                           ;SPI.c: 21:     }
  1387  04DD  2CE2               	goto	l241
  1388  04DE                     l1412:
  1389                           
  1390                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1391  04DE  0872               	movf	spiInit@sDataSample,w
  1392  04DF  0474               	iorwf	spiInit@sTransmitEdge,w
  1393  04E0  0094               	movwf	20	;volatile
  1394  04E1                     l1414:
  1395                           
  1396                           ;SPI.c: 25:         TRISC3 = 0;
  1397  04E1  1187               	bcf	7,3	;volatile
  1398  04E2                     l241:	
  1399                           ;SPI.c: 26:     }
  1400                           
  1401                           
  1402                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1403  04E2  0875               	movf	spiInit@sType,w
  1404  04E3  0473               	iorwf	spiInit@sClockIdle,w
  1405  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  1406  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  1407  04E6  0094               	movwf	20	;volatile
  1408  04E7                     l242:
  1409  04E7  0008               	return
  1410  04E8                     __end_of_spiInit:
  1411                           
  1412                           	psect	text3
  1413  01E6                     __ptext3:	
  1414 ;; *************** function _initOsc *****************
  1415 ;; Defined at:
  1416 ;;		line 3 in file "Oscilador.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;  IRCF            1    wreg     unsigned char 
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;  IRCF            1    4[COMMON] unsigned char 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1430 ;;      Params:         0       0       0       0       0
  1431 ;;      Locals:         1       0       0       0       0
  1432 ;;      Temps:          2       0       0       0       0
  1433 ;;      Totals:         3       0       0       0       0
  1434 ;;Total ram usage:        3 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    1
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_setup
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           
  1445                           ;psect for function _initOsc
  1446  01E6                     _initOsc:
  1447                           
  1448                           ;incstack = 0
  1449                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1450                           ;initOsc@IRCF stored from wreg
  1451  01E6  00F4               	movwf	initOsc@IRCF
  1452  01E7                     l1390:
  1453                           
  1454                           ;Oscilador.c: 5:     switch(IRCF){
  1455  01E7  2A1E               	goto	l1394
  1456  01E8                     l125:	
  1457                           ;Oscilador.c: 6:         case 0:
  1458                           
  1459                           
  1460                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1461  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  1462  01E9  1303               	bcf	3,6	;RP1=0, select bank1
  1463  01EA  130F               	bcf	15,6	;volatile
  1464                           
  1465                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1466  01EB  128F               	bcf	15,5	;volatile
  1467                           
  1468                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1469  01EC  120F               	bcf	15,4	;volatile
  1470                           
  1471                           ;Oscilador.c: 10:             break;
  1472  01ED  2A40               	goto	l126
  1473  01EE                     l127:	
  1474                           ;Oscilador.c: 11:          case 1:
  1475                           
  1476                           
  1477                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1478  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  1479  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  1480  01F0  130F               	bcf	15,6	;volatile
  1481                           
  1482                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1483  01F1  128F               	bcf	15,5	;volatile
  1484                           
  1485                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1486  01F2  160F               	bsf	15,4	;volatile
  1487                           
  1488                           ;Oscilador.c: 15:             break;
  1489  01F3  2A40               	goto	l126
  1490  01F4                     l128:	
  1491                           ;Oscilador.c: 16:         case 2:
  1492                           
  1493                           
  1494                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1495  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  1496  01F5  1303               	bcf	3,6	;RP1=0, select bank1
  1497  01F6  130F               	bcf	15,6	;volatile
  1498                           
  1499                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1500  01F7  168F               	bsf	15,5	;volatile
  1501                           
  1502                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1503  01F8  120F               	bcf	15,4	;volatile
  1504                           
  1505                           ;Oscilador.c: 20:             break;
  1506  01F9  2A40               	goto	l126
  1507  01FA                     l129:	
  1508                           ;Oscilador.c: 21:         case 3:
  1509                           
  1510                           
  1511                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1512  01FA  1683               	bsf	3,5	;RP0=1, select bank1
  1513  01FB  1303               	bcf	3,6	;RP1=0, select bank1
  1514  01FC  130F               	bcf	15,6	;volatile
  1515                           
  1516                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1517  01FD  168F               	bsf	15,5	;volatile
  1518                           
  1519                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1520  01FE  160F               	bsf	15,4	;volatile
  1521                           
  1522                           ;Oscilador.c: 25:             break;
  1523  01FF  2A40               	goto	l126
  1524  0200                     l130:	
  1525                           ;Oscilador.c: 26:         case 4:
  1526                           
  1527                           
  1528                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1529  0200  1683               	bsf	3,5	;RP0=1, select bank1
  1530  0201  1303               	bcf	3,6	;RP1=0, select bank1
  1531  0202  170F               	bsf	15,6	;volatile
  1532                           
  1533                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1534  0203  128F               	bcf	15,5	;volatile
  1535                           
  1536                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1537  0204  120F               	bcf	15,4	;volatile
  1538                           
  1539                           ;Oscilador.c: 30:             break;
  1540  0205  2A40               	goto	l126
  1541  0206                     l131:	
  1542                           ;Oscilador.c: 31:         case 5:
  1543                           
  1544                           
  1545                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1546  0206  1683               	bsf	3,5	;RP0=1, select bank1
  1547  0207  1303               	bcf	3,6	;RP1=0, select bank1
  1548  0208  170F               	bsf	15,6	;volatile
  1549                           
  1550                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1551  0209  128F               	bcf	15,5	;volatile
  1552                           
  1553                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1554  020A  160F               	bsf	15,4	;volatile
  1555                           
  1556                           ;Oscilador.c: 35:             break;
  1557  020B  2A40               	goto	l126
  1558  020C                     l132:	
  1559                           ;Oscilador.c: 36:         case 6:
  1560                           
  1561                           
  1562                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1563  020C  1683               	bsf	3,5	;RP0=1, select bank1
  1564  020D  1303               	bcf	3,6	;RP1=0, select bank1
  1565  020E  170F               	bsf	15,6	;volatile
  1566                           
  1567                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1568  020F  168F               	bsf	15,5	;volatile
  1569                           
  1570                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1571  0210  120F               	bcf	15,4	;volatile
  1572                           
  1573                           ;Oscilador.c: 40:             break;
  1574  0211  2A40               	goto	l126
  1575  0212                     l133:	
  1576                           ;Oscilador.c: 41:         case 7:
  1577                           
  1578                           
  1579                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1580  0212  1683               	bsf	3,5	;RP0=1, select bank1
  1581  0213  1303               	bcf	3,6	;RP1=0, select bank1
  1582  0214  170F               	bsf	15,6	;volatile
  1583                           
  1584                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1585  0215  168F               	bsf	15,5	;volatile
  1586                           
  1587                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1588  0216  160F               	bsf	15,4	;volatile
  1589                           
  1590                           ;Oscilador.c: 45:             break;
  1591  0217  2A40               	goto	l126
  1592  0218                     l134:	
  1593                           ;Oscilador.c: 46:         default:
  1594                           
  1595                           
  1596                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1597  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1598  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1599  021A  170F               	bsf	15,6	;volatile
  1600                           
  1601                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1602  021B  168F               	bsf	15,5	;volatile
  1603                           
  1604                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1605  021C  120F               	bcf	15,4	;volatile
  1606                           
  1607                           ;Oscilador.c: 50:             break;
  1608  021D  2A40               	goto	l126
  1609  021E                     l1394:
  1610  021E  0874               	movf	initOsc@IRCF,w
  1611  021F  00F2               	movwf	??_initOsc
  1612  0220  01F3               	clrf	??_initOsc+1
  1613                           
  1614                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1615                           ; Switch size 1, requested type "simple"
  1616                           ; Number of cases is 1, Range of values is 0 to 0
  1617                           ; switch strategies available:
  1618                           ; Name         Instructions Cycles
  1619                           ; simple_byte            4     3 (average)
  1620                           ; direct_byte           11     8 (fixed)
  1621                           ; jumptable            260     6 (fixed)
  1622                           ;	Chosen strategy is simple_byte
  1623  0221  0873               	movf	??_initOsc+1,w
  1624  0222  3A00               	xorlw	0	; case 0
  1625  0223  1903               	skipnz
  1626  0224  2A26               	goto	l1960
  1627  0225  2A18               	goto	l134
  1628  0226                     l1960:
  1629                           
  1630                           ; Switch size 1, requested type "simple"
  1631                           ; Number of cases is 8, Range of values is 0 to 7
  1632                           ; switch strategies available:
  1633                           ; Name         Instructions Cycles
  1634                           ; simple_byte           25    13 (average)
  1635                           ; direct_byte           32     8 (fixed)
  1636                           ; jumptable            260     6 (fixed)
  1637                           ;	Chosen strategy is simple_byte
  1638  0226  0872               	movf	??_initOsc,w
  1639  0227  3A00               	xorlw	0	; case 0
  1640  0228  1903               	skipnz
  1641  0229  29E8               	goto	l125
  1642  022A  3A01               	xorlw	1	; case 1
  1643  022B  1903               	skipnz
  1644  022C  29EE               	goto	l127
  1645  022D  3A03               	xorlw	3	; case 2
  1646  022E  1903               	skipnz
  1647  022F  29F4               	goto	l128
  1648  0230  3A01               	xorlw	1	; case 3
  1649  0231  1903               	skipnz
  1650  0232  29FA               	goto	l129
  1651  0233  3A07               	xorlw	7	; case 4
  1652  0234  1903               	skipnz
  1653  0235  2A00               	goto	l130
  1654  0236  3A01               	xorlw	1	; case 5
  1655  0237  1903               	skipnz
  1656  0238  2A06               	goto	l131
  1657  0239  3A03               	xorlw	3	; case 6
  1658  023A  1903               	skipnz
  1659  023B  2A0C               	goto	l132
  1660  023C  3A01               	xorlw	1	; case 7
  1661  023D  1903               	skipnz
  1662  023E  2A12               	goto	l133
  1663  023F  2A18               	goto	l134
  1664  0240                     l126:
  1665                           
  1666                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1667  0240  140F               	bsf	15,0	;volatile
  1668  0241                     l135:
  1669  0241  0008               	return
  1670  0242                     __end_of_initOsc:
  1671                           
  1672                           	psect	text4
  1673  058B                     __ptext4:	
  1674 ;; *************** function _USART_Init_BaudRate *****************
  1675 ;; Defined at:
  1676 ;;		line 19 in file "USART.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1690 ;;      Params:         0       0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0
  1693 ;;      Totals:         0       0       0       0       0
  1694 ;;Total ram usage:        0 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    1
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_setup
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           
  1705                           ;psect for function _USART_Init_BaudRate
  1706  058B                     _USART_Init_BaudRate:
  1707  058B                     l1400:	
  1708                           ;incstack = 0
  1709                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1710                           
  1711                           
  1712                           ;USART.c: 20:     SPBRGH = 0;
  1713  058B  1683               	bsf	3,5	;RP0=1, select bank1
  1714  058C  1303               	bcf	3,6	;RP1=0, select bank1
  1715  058D  019A               	clrf	26	;volatile
  1716  058E                     l1402:
  1717                           
  1718                           ;USART.c: 21:     SPBRG = 12;
  1719  058E  300C               	movlw	12
  1720  058F  0099               	movwf	25	;volatile
  1721  0590                     l204:
  1722  0590  0008               	return
  1723  0591                     __end_of_USART_Init_BaudRate:
  1724                           
  1725                           	psect	text5
  1726  0575                     __ptext5:	
  1727 ;; *************** function _USART_Init *****************
  1728 ;; Defined at:
  1729 ;;		line 8 in file "USART.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		None
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1743 ;;      Params:         0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0
  1746 ;;      Totals:         0       0       0       0       0
  1747 ;;Total ram usage:        0 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    1
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_setup
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           
  1758                           ;psect for function _USART_Init
  1759  0575                     _USART_Init:
  1760  0575                     l1404:	
  1761                           ;incstack = 0
  1762                           ; Regs used in _USART_Init: []
  1763                           
  1764                           
  1765                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1766  0575  1283               	bcf	3,5	;RP0=0, select bank0
  1767  0576  1303               	bcf	3,6	;RP1=0, select bank0
  1768  0577  1798               	bsf	24,7	;volatile
  1769                           
  1770                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1771  0578  1683               	bsf	3,5	;RP0=1, select bank1
  1772  0579  1303               	bcf	3,6	;RP1=0, select bank1
  1773  057A  1218               	bcf	24,4	;volatile
  1774                           
  1775                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1776  057B  1698               	bsf	24,5	;volatile
  1777  057C                     l201:
  1778  057C  0008               	return
  1779  057D                     __end_of_USART_Init:
  1780                           
  1781                           	psect	text6
  1782  0469                     __ptext6:	
  1783 ;; *************** function _Write_USART_String *****************
  1784 ;; Defined at:
  1785 ;;		line 37 in file "USART.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;  a               2    3[COMMON] PTR unsigned char 
  1788 ;;		 -> data(8), STR_2(9), 
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  i               1    6[COMMON] unsigned char 
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  1    wreg      void 
  1793 ;; Registers used:
  1794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1800 ;;      Params:         2       0       0       0       0
  1801 ;;      Locals:         1       0       0       0       0
  1802 ;;      Temps:          1       0       0       0       0
  1803 ;;      Totals:         4       0       0       0       0
  1804 ;;Total ram usage:        4 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    2
  1807 ;; This function calls:
  1808 ;;		_Write_USART
  1809 ;; This function is called by:
  1810 ;;		_main
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           
  1815                           ;psect for function _Write_USART_String
  1816  0469                     _Write_USART_String:
  1817  0469                     l1598:	
  1818                           ;incstack = 0
  1819                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1820                           
  1821                           
  1822                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  1823  0469  01F6               	clrf	Write_USART_String@i
  1824  046A  2C80               	goto	l1604
  1825  046B                     l1600:
  1826                           
  1827                           ;USART.c: 40:         Write_USART(a[i]);
  1828  046B  0876               	movf	Write_USART_String@i,w
  1829  046C  0773               	addwf	Write_USART_String@a,w
  1830  046D  0084               	movwf	4
  1831  046E  0874               	movf	Write_USART_String@a+1,w
  1832  046F  1803               	skipnc
  1833  0470  0A74               	incf	Write_USART_String@a+1,w
  1834  0471  00FF               	movwf	btemp+1
  1835  0472  120A  118A  2390  120A  118A  	fcall	stringtab
  1836  0477  120A  118A  2558  120A  118A  	fcall	_Write_USART
  1837  047C                     l1602:
  1838                           
  1839                           ;USART.c: 41:     }
  1840  047C  3001               	movlw	1
  1841  047D  00F5               	movwf	??_Write_USART_String
  1842  047E  0875               	movf	??_Write_USART_String,w
  1843  047F  07F6               	addwf	Write_USART_String@i,f
  1844  0480                     l1604:
  1845  0480  0876               	movf	Write_USART_String@i,w
  1846  0481  0773               	addwf	Write_USART_String@a,w
  1847  0482  0084               	movwf	4
  1848  0483  0874               	movf	Write_USART_String@a+1,w
  1849  0484  1803               	skipnc
  1850  0485  0A74               	incf	Write_USART_String@a+1,w
  1851  0486  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0487  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0488  00FF               	movwf	btemp+1
  1854  0489  120A  118A  2390  120A  118A  	fcall	stringtab
  1855  048E  3A00               	xorlw	0
  1856  048F  1D03               	skipz
  1857  0490  2C92               	goto	u791
  1858  0491  2C93               	goto	u790
  1859  0492                     u791:
  1860  0492  2C6B               	goto	l1600
  1861  0493                     u790:
  1862  0493                     l219:
  1863  0493  0008               	return
  1864  0494                     __end_of_Write_USART_String:
  1865                           
  1866                           	psect	text7
  1867  0558                     __ptext7:	
  1868 ;; *************** function _Write_USART *****************
  1869 ;; Defined at:
  1870 ;;		line 33 in file "USART.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;  a               1    wreg     unsigned char 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  a               1    2[COMMON] unsigned char 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  1    wreg      void 
  1877 ;; Registers used:
  1878 ;;		wreg
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1884 ;;      Params:         0       0       0       0       0
  1885 ;;      Locals:         1       0       0       0       0
  1886 ;;      Temps:          0       0       0       0       0
  1887 ;;      Totals:         1       0       0       0       0
  1888 ;;Total ram usage:        1 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    1
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		_main
  1895 ;;		_Write_USART_String
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           
  1900                           ;psect for function _Write_USART
  1901  0558                     _Write_USART:
  1902                           
  1903                           ;incstack = 0
  1904                           ; Regs used in _Write_USART: [wreg]
  1905                           ;Write_USART@a stored from wreg
  1906  0558  00F2               	movwf	Write_USART@a
  1907  0559                     l1386:
  1908  0559                     l210:	
  1909                           ;USART.c: 34:     while(!TRMT);
  1910                           
  1911  0559  1683               	bsf	3,5	;RP0=1, select bank1
  1912  055A  1303               	bcf	3,6	;RP1=0, select bank1
  1913  055B  1C98               	btfss	24,1	;volatile
  1914  055C  2D5E               	goto	u641
  1915  055D  2D5F               	goto	u640
  1916  055E                     u641:
  1917  055E  2D59               	goto	l210
  1918  055F                     u640:
  1919  055F                     l1388:
  1920                           
  1921                           ;USART.c: 35:     TXREG=a;
  1922  055F  0872               	movf	Write_USART@a,w
  1923  0560  1283               	bcf	3,5	;RP0=0, select bank0
  1924  0561  1303               	bcf	3,6	;RP1=0, select bank0
  1925  0562  0099               	movwf	25	;volatile
  1926  0563                     l213:
  1927  0563  0008               	return
  1928  0564                     __end_of_Write_USART:
  1929                           
  1930                           	psect	text8
  1931  0527                     __ptext8:	
  1932 ;; *************** function _Show_val_LCD *****************
  1933 ;; Defined at:
  1934 ;;		line 173 in file "main_maestro.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1948 ;;      Params:         0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0
  1951 ;;      Totals:         0       0       0       0       0
  1952 ;;Total ram usage:        0 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    4
  1955 ;; This function calls:
  1956 ;;		_Lcd_Set_Cursor
  1957 ;;		_Lcd_Write_String
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           
  1964                           ;psect for function _Show_val_LCD
  1965  0527                     _Show_val_LCD:
  1966  0527                     l1868:	
  1967                           ;incstack = 0
  1968                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1969                           
  1970                           
  1971                           ;main_maestro.c: 176:     Lcd_Set_Cursor(2,1);
  1972  0527  01F6               	clrf	Lcd_Set_Cursor@b
  1973  0528  0AF6               	incf	Lcd_Set_Cursor@b,f
  1974  0529  3002               	movlw	2
  1975  052A  120A  118A  2494  120A  118A  	fcall	_Lcd_Set_Cursor
  1976  052F                     l1870:
  1977                           
  1978                           ;main_maestro.c: 177:     Lcd_Write_String(data);
  1979  052F  3036               	movlw	(low (_data| 0))& (0+255)
  1980  0530  00F5               	movwf	Lcd_Write_String@a
  1981  0531  3000               	movlw	0
  1982  0532  00F6               	movwf	Lcd_Write_String@a+1
  1983  0533  120A  118A  228D  120A  118A  	fcall	_Lcd_Write_String
  1984  0538                     l110:
  1985  0538  0008               	return
  1986  0539                     __end_of_Show_val_LCD:
  1987                           
  1988                           	psect	text9
  1989  028D                     __ptext9:	
  1990 ;; *************** function _Lcd_Write_String *****************
  1991 ;; Defined at:
  1992 ;;		line 70 in file "LCD.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  a               2    5[COMMON] PTR unsigned char 
  1995 ;;		 -> data(8), STR_1(17), 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  i               2    0[BANK0 ] int 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2007 ;;      Params:         2       0       0       0       0
  2008 ;;      Locals:         0       2       0       0       0
  2009 ;;      Temps:          3       0       0       0       0
  2010 ;;      Totals:         5       2       0       0       0
  2011 ;;Total ram usage:        7 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    3
  2014 ;; This function calls:
  2015 ;;		_Lcd_Write_Char
  2016 ;; This function is called by:
  2017 ;;		_main
  2018 ;;		_Show_val_LCD
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           
  2023                           ;psect for function _Lcd_Write_String
  2024  028D                     _Lcd_Write_String:
  2025  028D                     l1756:	
  2026                           ;incstack = 0
  2027                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2028                           
  2029                           
  2030                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2031  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2032  028E  1303               	bcf	3,6	;RP1=0, select bank0
  2033  028F  01BE               	clrf	Lcd_Write_String@i
  2034  0290  01BF               	clrf	Lcd_Write_String@i+1
  2035  0291  2AB6               	goto	l1762
  2036  0292                     l1758:
  2037                           
  2038                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2039  0292  083E               	movf	Lcd_Write_String@i,w
  2040  0293  0775               	addwf	Lcd_Write_String@a,w
  2041  0294  00F8               	movwf	??_Lcd_Write_String+1
  2042  0295  0876               	movf	Lcd_Write_String@a+1,w
  2043  0296  00F7               	movwf	??_Lcd_Write_String
  2044  0297  1803               	skipnc
  2045  0298  0AF7               	incf	??_Lcd_Write_String,f
  2046  0299  1FBE               	btfss	Lcd_Write_String@i,7
  2047  029A  2A9C               	goto	u880
  2048  029B  03F7               	decf	??_Lcd_Write_String,f
  2049  029C                     u880:
  2050  029C  0877               	movf	??_Lcd_Write_String,w
  2051  029D  00F9               	movwf	??_Lcd_Write_String+2
  2052  029E  0879               	movf	??_Lcd_Write_String+2,w
  2053  029F  1283               	bcf	3,5	;RP0=0, select bank0
  2054  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  2055  02A1  00FF               	movwf	btemp+1
  2056  02A2  0878               	movf	??_Lcd_Write_String+1,w
  2057  02A3  0084               	movwf	4
  2058  02A4  120A  118A  2390  120A  118A  	fcall	stringtab
  2059  02A9  120A  118A  24E8  120A  118A  	fcall	_Lcd_Write_Char
  2060  02AE                     l1760:
  2061  02AE  3001               	movlw	1
  2062  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2063  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2064  02B1  07BE               	addwf	Lcd_Write_String@i,f
  2065  02B2  1803               	skipnc
  2066  02B3  0ABF               	incf	Lcd_Write_String@i+1,f
  2067  02B4  3000               	movlw	0
  2068  02B5  07BF               	addwf	Lcd_Write_String@i+1,f
  2069  02B6                     l1762:
  2070  02B6  083E               	movf	Lcd_Write_String@i,w
  2071  02B7  0775               	addwf	Lcd_Write_String@a,w
  2072  02B8  00F8               	movwf	??_Lcd_Write_String+1
  2073  02B9  0876               	movf	Lcd_Write_String@a+1,w
  2074  02BA  00F7               	movwf	??_Lcd_Write_String
  2075  02BB  1803               	skipnc
  2076  02BC  0AF7               	incf	??_Lcd_Write_String,f
  2077  02BD  1FBE               	btfss	Lcd_Write_String@i,7
  2078  02BE  2AC0               	goto	u890
  2079  02BF  03F7               	decf	??_Lcd_Write_String,f
  2080  02C0                     u890:
  2081  02C0  0877               	movf	??_Lcd_Write_String,w
  2082  02C1  00F9               	movwf	??_Lcd_Write_String+2
  2083  02C2  0879               	movf	??_Lcd_Write_String+2,w
  2084  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  2085  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  2086  02C5  00FF               	movwf	btemp+1
  2087  02C6  0878               	movf	??_Lcd_Write_String+1,w
  2088  02C7  0084               	movwf	4
  2089  02C8  120A  118A  2390  120A  118A  	fcall	stringtab
  2090  02CD  3A00               	xorlw	0
  2091  02CE  1D03               	skipz
  2092  02CF  2AD1               	goto	u901
  2093  02D0  2AD2               	goto	u900
  2094  02D1                     u901:
  2095  02D1  2A92               	goto	l1758
  2096  02D2                     u900:
  2097  02D2                     l172:
  2098  02D2  0008               	return
  2099  02D3                     __end_of_Lcd_Write_String:
  2100                           
  2101                           	psect	text10
  2102  04E8                     __ptext10:	
  2103 ;; *************** function _Lcd_Write_Char *****************
  2104 ;; Defined at:
  2105 ;;		line 61 in file "LCD.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  a               1    wreg     unsigned char 
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  a               1    4[COMMON] unsigned char 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0, pclath, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2119 ;;      Params:         0       0       0       0       0
  2120 ;;      Locals:         1       0       0       0       0
  2121 ;;      Temps:          1       0       0       0       0
  2122 ;;      Totals:         2       0       0       0       0
  2123 ;;Total ram usage:        2 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    2
  2126 ;; This function calls:
  2127 ;;		_Lcd_Port
  2128 ;; This function is called by:
  2129 ;;		_Lcd_Write_String
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           
  2134                           ;psect for function _Lcd_Write_Char
  2135  04E8                     _Lcd_Write_Char:
  2136                           
  2137                           ;incstack = 0
  2138                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2139                           ;Lcd_Write_Char@a stored from wreg
  2140  04E8  00F4               	movwf	Lcd_Write_Char@a
  2141  04E9                     l1712:
  2142                           
  2143                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2144  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2145  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2146  04EB  1409               	bsf	9,0	;volatile
  2147  04EC                     l1714:
  2148                           
  2149                           ;LCD.c: 63:    Lcd_Port(a);
  2150  04EC  0874               	movf	Lcd_Write_Char@a,w
  2151  04ED  120A  118A  2597  120A  118A  	fcall	_Lcd_Port
  2152  04F2                     l1716:
  2153                           
  2154                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2155  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  2156  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  2157  04F4  1509               	bsf	9,2	;volatile
  2158  04F5                     l1718:
  2159                           
  2160                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2161  04F5  301A               	movlw	26
  2162  04F6  00F3               	movwf	??_Lcd_Write_Char
  2163  04F7                     u1047:
  2164  04F7  0BF3               	decfsz	??_Lcd_Write_Char,f
  2165  04F8  2CF7               	goto	u1047
  2166  04F9  0000               	nop
  2167  04FA                     l1720:
  2168                           
  2169                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2170  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  2171  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  2172  04FC  1109               	bcf	9,2	;volatile
  2173  04FD                     l166:
  2174  04FD  0008               	return
  2175  04FE                     __end_of_Lcd_Write_Char:
  2176                           
  2177                           	psect	text11
  2178  0494                     __ptext11:	
  2179 ;; *************** function _Lcd_Set_Cursor *****************
  2180 ;; Defined at:
  2181 ;;		line 48 in file "LCD.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  a               1    wreg     unsigned char 
  2184 ;;  b               1    6[COMMON] unsigned char 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  a               1    8[COMMON] unsigned char 
  2187 ;;  temp            1    9[COMMON] unsigned char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0, pclath, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         1       0       0       0       0
  2198 ;;      Locals:         2       0       0       0       0
  2199 ;;      Temps:          1       0       0       0       0
  2200 ;;      Totals:         4       0       0       0       0
  2201 ;;Total ram usage:        4 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    3
  2204 ;; This function calls:
  2205 ;;		_Lcd_Cmd
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;;		_Show_val_LCD
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function _Lcd_Set_Cursor
  2214  0494                     _Lcd_Set_Cursor:
  2215                           
  2216                           ;incstack = 0
  2217                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2218                           ;Lcd_Set_Cursor@a stored from wreg
  2219  0494  00F8               	movwf	Lcd_Set_Cursor@a
  2220  0495                     l1744:
  2221                           
  2222                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2223  0495  0378               	decf	Lcd_Set_Cursor@a,w
  2224  0496  1D03               	btfss	3,2
  2225  0497  2C99               	goto	u861
  2226  0498  2C9A               	goto	u860
  2227  0499                     u861:
  2228  0499  2CA6               	goto	l1750
  2229  049A                     u860:
  2230  049A                     l1746:
  2231                           
  2232                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2233  049A  0876               	movf	Lcd_Set_Cursor@b,w
  2234  049B  3E7F               	addlw	127
  2235  049C  00F7               	movwf	??_Lcd_Set_Cursor
  2236  049D  0877               	movf	??_Lcd_Set_Cursor,w
  2237  049E  00F9               	movwf	Lcd_Set_Cursor@temp
  2238  049F                     l1748:
  2239                           
  2240                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2241  049F  0879               	movf	Lcd_Set_Cursor@temp,w
  2242  04A0  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2243                           
  2244                           ;LCD.c: 53:  }
  2245  04A5  2CB7               	goto	l163
  2246  04A6                     l1750:
  2247  04A6  3002               	movlw	2
  2248  04A7  0678               	xorwf	Lcd_Set_Cursor@a,w
  2249  04A8  1D03               	btfss	3,2
  2250  04A9  2CAB               	goto	u871
  2251  04AA  2CAC               	goto	u870
  2252  04AB                     u871:
  2253  04AB  2CB7               	goto	l163
  2254  04AC                     u870:
  2255  04AC                     l1752:
  2256                           
  2257                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2258  04AC  0876               	movf	Lcd_Set_Cursor@b,w
  2259  04AD  3EBF               	addlw	191
  2260  04AE  00F7               	movwf	??_Lcd_Set_Cursor
  2261  04AF  0877               	movf	??_Lcd_Set_Cursor,w
  2262  04B0  00F9               	movwf	Lcd_Set_Cursor@temp
  2263  04B1                     l1754:
  2264                           
  2265                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2266  04B1  0879               	movf	Lcd_Set_Cursor@temp,w
  2267  04B2  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2268  04B7                     l163:
  2269  04B7  0008               	return
  2270  04B8                     __end_of_Lcd_Set_Cursor:
  2271                           
  2272                           	psect	text12
  2273  0435                     __ptext12:	
  2274 ;; *************** function _SPI_TEMP *****************
  2275 ;; Defined at:
  2276 ;;		line 215 in file "main_maestro.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;		None
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;		None
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0, pclath, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2290 ;;      Params:         0       0       0       0       0
  2291 ;;      Locals:         0       0       0       0       0
  2292 ;;      Temps:          3       0       0       0       0
  2293 ;;      Totals:         3       0       0       0       0
  2294 ;;Total ram usage:        3 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    3
  2297 ;; This function calls:
  2298 ;;		_spiRead
  2299 ;;		_spiWrite
  2300 ;; This function is called by:
  2301 ;;		_main
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           
  2306                           ;psect for function _SPI_TEMP
  2307  0435                     _SPI_TEMP:
  2308  0435                     l1588:	
  2309                           ;incstack = 0
  2310                           ; Regs used in _SPI_TEMP: [wreg+status,2+status,0+pclath+cstack]
  2311                           
  2312                           
  2313                           ;main_maestro.c: 216:     RC1 = 0;
  2314  0435  1283               	bcf	3,5	;RP0=0, select bank0
  2315  0436  1303               	bcf	3,6	;RP1=0, select bank0
  2316  0437  1087               	bcf	7,1	;volatile
  2317  0438                     l1590:
  2318                           
  2319                           ;main_maestro.c: 217:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2320  0438  3003               	movlw	3
  2321  0439  00F4               	movwf	??_SPI_TEMP+1
  2322  043A  3097               	movlw	151
  2323  043B  00F3               	movwf	??_SPI_TEMP
  2324  043C                     u1057:
  2325  043C  0BF3               	decfsz	??_SPI_TEMP,f
  2326  043D  2C3C               	goto	u1057
  2327  043E  0BF4               	decfsz	??_SPI_TEMP+1,f
  2328  043F  2C3C               	goto	u1057
  2329  0440  2C41               	nop2
  2330  0441                     l1592:
  2331                           
  2332                           ;main_maestro.c: 219:    spiWrite(hola_esclavo);
  2333  0441  3000               	movlw	0
  2334  0442  120A  118A  2591  120A  118A  	fcall	_spiWrite
  2335  0447                     l1594:
  2336                           
  2337                           ;main_maestro.c: 220:    val_TEMP = spiRead();
  2338  0447  120A  118A  2564  120A  118A  	fcall	_spiRead
  2339  044C  00F3               	movwf	??_SPI_TEMP
  2340  044D  0873               	movf	??_SPI_TEMP,w
  2341  044E  00FA               	movwf	_val_TEMP
  2342                           
  2343                           ;main_maestro.c: 222:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2344  044F  3003               	movlw	3
  2345  0450  00F4               	movwf	??_SPI_TEMP+1
  2346  0451  3097               	movlw	151
  2347  0452  00F3               	movwf	??_SPI_TEMP
  2348  0453                     u1067:
  2349  0453  0BF3               	decfsz	??_SPI_TEMP,f
  2350  0454  2C53               	goto	u1067
  2351  0455  0BF4               	decfsz	??_SPI_TEMP+1,f
  2352  0456  2C53               	goto	u1067
  2353  0457  2C58               	nop2
  2354  0458                     l1596:
  2355                           
  2356                           ;main_maestro.c: 223:    RC1 = 1;
  2357  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2359  045A  1487               	bsf	7,1	;volatile
  2360                           
  2361                           ;main_maestro.c: 225:    _delay((unsigned long)((100)*(8000000/4000.0)));
  2362  045B  3002               	movlw	2
  2363  045C  00F5               	movwf	??_SPI_TEMP+2
  2364  045D  3004               	movlw	4
  2365  045E  00F4               	movwf	??_SPI_TEMP+1
  2366  045F  30BA               	movlw	186
  2367  0460  00F3               	movwf	??_SPI_TEMP
  2368  0461                     u1077:
  2369  0461  0BF3               	decfsz	??_SPI_TEMP,f
  2370  0462  2C61               	goto	u1077
  2371  0463  0BF4               	decfsz	??_SPI_TEMP+1,f
  2372  0464  2C61               	goto	u1077
  2373  0465  0BF5               	decfsz	??_SPI_TEMP+2,f
  2374  0466  2C61               	goto	u1077
  2375  0467  0000               	nop
  2376  0468                     l119:
  2377  0468  0008               	return
  2378  0469                     __end_of_SPI_TEMP:
  2379                           
  2380                           	psect	text13
  2381  03C9                     __ptext13:	
  2382 ;; *************** function _SPI_CONT *****************
  2383 ;; Defined at:
  2384 ;;		line 190 in file "main_maestro.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, status,0, pclath, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2398 ;;      Params:         0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0
  2400 ;;      Temps:          3       0       0       0       0
  2401 ;;      Totals:         3       0       0       0       0
  2402 ;;Total ram usage:        3 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    3
  2405 ;; This function calls:
  2406 ;;		_spiRead
  2407 ;;		_spiWrite
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           
  2414                           ;psect for function _SPI_CONT
  2415  03C9                     _SPI_CONT:
  2416  03C9                     l1568:	
  2417                           ;incstack = 0
  2418                           ; Regs used in _SPI_CONT: [wreg+status,2+status,0+pclath+cstack]
  2419                           
  2420                           
  2421                           ;main_maestro.c: 191:     RC2 = 0;
  2422  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2423  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2424  03CB  1107               	bcf	7,2	;volatile
  2425  03CC                     l1570:
  2426                           
  2427                           ;main_maestro.c: 192:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2428  03CC  3003               	movlw	3
  2429  03CD  00F4               	movwf	??_SPI_CONT+1
  2430  03CE  3097               	movlw	151
  2431  03CF  00F3               	movwf	??_SPI_CONT
  2432  03D0                     u1087:
  2433  03D0  0BF3               	decfsz	??_SPI_CONT,f
  2434  03D1  2BD0               	goto	u1087
  2435  03D2  0BF4               	decfsz	??_SPI_CONT+1,f
  2436  03D3  2BD0               	goto	u1087
  2437  03D4  2BD5               	nop2
  2438  03D5                     l1572:
  2439                           
  2440                           ;main_maestro.c: 194:    spiWrite(hola_esclavo);
  2441  03D5  3000               	movlw	0
  2442  03D6  120A  118A  2591  120A  118A  	fcall	_spiWrite
  2443  03DB                     l1574:
  2444                           
  2445                           ;main_maestro.c: 195:    cont = spiRead();
  2446  03DB  120A  118A  2564  120A  118A  	fcall	_spiRead
  2447  03E0  00F3               	movwf	??_SPI_CONT
  2448  03E1  0873               	movf	??_SPI_CONT,w
  2449  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  2450  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  2451  03E4  00B5               	movwf	_cont
  2452                           
  2453                           ;main_maestro.c: 197:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2454  03E5  3003               	movlw	3
  2455  03E6  00F4               	movwf	??_SPI_CONT+1
  2456  03E7  3097               	movlw	151
  2457  03E8  00F3               	movwf	??_SPI_CONT
  2458  03E9                     u1097:
  2459  03E9  0BF3               	decfsz	??_SPI_CONT,f
  2460  03EA  2BE9               	goto	u1097
  2461  03EB  0BF4               	decfsz	??_SPI_CONT+1,f
  2462  03EC  2BE9               	goto	u1097
  2463  03ED  2BEE               	nop2
  2464  03EE                     l1576:
  2465                           
  2466                           ;main_maestro.c: 198:    RC2 = 1;
  2467  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2468  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  2469  03F0  1507               	bsf	7,2	;volatile
  2470                           
  2471                           ;main_maestro.c: 200:    _delay((unsigned long)((100)*(8000000/4000.0)));
  2472  03F1  3002               	movlw	2
  2473  03F2  00F5               	movwf	??_SPI_CONT+2
  2474  03F3  3004               	movlw	4
  2475  03F4  00F4               	movwf	??_SPI_CONT+1
  2476  03F5  30BA               	movlw	186
  2477  03F6  00F3               	movwf	??_SPI_CONT
  2478  03F7                     u1107:
  2479  03F7  0BF3               	decfsz	??_SPI_CONT,f
  2480  03F8  2BF7               	goto	u1107
  2481  03F9  0BF4               	decfsz	??_SPI_CONT+1,f
  2482  03FA  2BF7               	goto	u1107
  2483  03FB  0BF5               	decfsz	??_SPI_CONT+2,f
  2484  03FC  2BF7               	goto	u1107
  2485  03FD  0000               	nop
  2486  03FE                     l113:
  2487  03FE  0008               	return
  2488  03FF                     __end_of_SPI_CONT:
  2489                           
  2490                           	psect	text14
  2491  03FF                     __ptext14:	
  2492 ;; *************** function _SPI_ADC *****************
  2493 ;; Defined at:
  2494 ;;		line 203 in file "main_maestro.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0, pclath, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2508 ;;      Params:         0       0       0       0       0
  2509 ;;      Locals:         0       0       0       0       0
  2510 ;;      Temps:          3       0       0       0       0
  2511 ;;      Totals:         3       0       0       0       0
  2512 ;;Total ram usage:        3 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; Hardware stack levels required when called:    3
  2515 ;; This function calls:
  2516 ;;		_spiRead
  2517 ;;		_spiWrite
  2518 ;; This function is called by:
  2519 ;;		_main
  2520 ;; This function uses a non-reentrant model
  2521 ;;
  2522                           
  2523                           
  2524                           ;psect for function _SPI_ADC
  2525  03FF                     _SPI_ADC:
  2526  03FF                     l1578:	
  2527                           ;incstack = 0
  2528                           ; Regs used in _SPI_ADC: [wreg+status,2+status,0+pclath+cstack]
  2529                           
  2530                           
  2531                           ;main_maestro.c: 204:     RC0 = 0;
  2532  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  2533  0400  1303               	bcf	3,6	;RP1=0, select bank0
  2534  0401  1007               	bcf	7,0	;volatile
  2535  0402                     l1580:
  2536                           
  2537                           ;main_maestro.c: 205:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2538  0402  3003               	movlw	3
  2539  0403  00F4               	movwf	??_SPI_ADC+1
  2540  0404  3097               	movlw	151
  2541  0405  00F3               	movwf	??_SPI_ADC
  2542  0406                     u1117:
  2543  0406  0BF3               	decfsz	??_SPI_ADC,f
  2544  0407  2C06               	goto	u1117
  2545  0408  0BF4               	decfsz	??_SPI_ADC+1,f
  2546  0409  2C06               	goto	u1117
  2547  040A  2C0B               	nop2
  2548  040B                     l1582:
  2549                           
  2550                           ;main_maestro.c: 207:    spiWrite(hola_esclavo);
  2551  040B  3000               	movlw	0
  2552  040C  120A  118A  2591  120A  118A  	fcall	_spiWrite
  2553  0411                     l1584:
  2554                           
  2555                           ;main_maestro.c: 208:    val_ADC = spiRead();
  2556  0411  120A  118A  2564  120A  118A  	fcall	_spiRead
  2557  0416  00F3               	movwf	??_SPI_ADC
  2558  0417  0873               	movf	??_SPI_ADC,w
  2559  0418  1283               	bcf	3,5	;RP0=0, select bank0
  2560  0419  1303               	bcf	3,6	;RP1=0, select bank0
  2561  041A  00B4               	movwf	_val_ADC
  2562                           
  2563                           ;main_maestro.c: 210:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2564  041B  3003               	movlw	3
  2565  041C  00F4               	movwf	??_SPI_ADC+1
  2566  041D  3097               	movlw	151
  2567  041E  00F3               	movwf	??_SPI_ADC
  2568  041F                     u1127:
  2569  041F  0BF3               	decfsz	??_SPI_ADC,f
  2570  0420  2C1F               	goto	u1127
  2571  0421  0BF4               	decfsz	??_SPI_ADC+1,f
  2572  0422  2C1F               	goto	u1127
  2573  0423  2C24               	nop2
  2574  0424                     l1586:
  2575                           
  2576                           ;main_maestro.c: 211:    RC0 = 1;
  2577  0424  1283               	bcf	3,5	;RP0=0, select bank0
  2578  0425  1303               	bcf	3,6	;RP1=0, select bank0
  2579  0426  1407               	bsf	7,0	;volatile
  2580                           
  2581                           ;main_maestro.c: 213:    _delay((unsigned long)((100)*(8000000/4000.0)));
  2582  0427  3002               	movlw	2
  2583  0428  00F5               	movwf	??_SPI_ADC+2
  2584  0429  3004               	movlw	4
  2585  042A  00F4               	movwf	??_SPI_ADC+1
  2586  042B  30BA               	movlw	186
  2587  042C  00F3               	movwf	??_SPI_ADC
  2588  042D                     u1137:
  2589  042D  0BF3               	decfsz	??_SPI_ADC,f
  2590  042E  2C2D               	goto	u1137
  2591  042F  0BF4               	decfsz	??_SPI_ADC+1,f
  2592  0430  2C2D               	goto	u1137
  2593  0431  0BF5               	decfsz	??_SPI_ADC+2,f
  2594  0432  2C2D               	goto	u1137
  2595  0433  0000               	nop
  2596  0434                     l116:
  2597  0434  0008               	return
  2598  0435                     __end_of_SPI_ADC:
  2599                           
  2600                           	psect	text15
  2601  0591                     __ptext15:	
  2602 ;; *************** function _spiWrite *****************
  2603 ;; Defined at:
  2604 ;;		line 36 in file "SPI.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;  dat             1    wreg     unsigned char 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  dat             1    2[COMMON] unsigned char 
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		wreg
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2618 ;;      Params:         0       0       0       0       0
  2619 ;;      Locals:         1       0       0       0       0
  2620 ;;      Temps:          0       0       0       0       0
  2621 ;;      Totals:         1       0       0       0       0
  2622 ;;Total ram usage:        1 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    1
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_SPI_CONT
  2629 ;;		_SPI_ADC
  2630 ;;		_SPI_TEMP
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           
  2635                           ;psect for function _spiWrite
  2636  0591                     _spiWrite:
  2637                           
  2638                           ;incstack = 0
  2639                           ; Regs used in _spiWrite: [wreg]
  2640                           ;spiWrite@dat stored from wreg
  2641  0591  00F2               	movwf	spiWrite@dat
  2642  0592                     l1506:
  2643                           
  2644                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  2645  0592  0872               	movf	spiWrite@dat,w
  2646  0593  1283               	bcf	3,5	;RP0=0, select bank0
  2647  0594  1303               	bcf	3,6	;RP1=0, select bank0
  2648  0595  0093               	movwf	19	;volatile
  2649  0596                     l251:
  2650  0596  0008               	return
  2651  0597                     __end_of_spiWrite:
  2652                           
  2653                           	psect	text16
  2654  0564                     __ptext16:	
  2655 ;; *************** function _spiRead *****************
  2656 ;; Defined at:
  2657 ;;		line 49 in file "SPI.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      unsigned char 
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0, pclath, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/0
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: 0/0
  2670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2671 ;;      Params:         0       0       0       0       0
  2672 ;;      Locals:         0       0       0       0       0
  2673 ;;      Temps:          0       0       0       0       0
  2674 ;;      Totals:         0       0       0       0       0
  2675 ;;Total ram usage:        0 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    2
  2678 ;; This function calls:
  2679 ;;		_spiReceiveWait
  2680 ;; This function is called by:
  2681 ;;		_SPI_CONT
  2682 ;;		_SPI_ADC
  2683 ;;		_SPI_TEMP
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           
  2688                           ;psect for function _spiRead
  2689  0564                     _spiRead:
  2690  0564                     l1508:	
  2691                           ;incstack = 0
  2692                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2693                           
  2694                           
  2695                           ;SPI.c: 51:     spiReceiveWait();
  2696  0564  120A  118A  257D  120A  118A  	fcall	_spiReceiveWait
  2697  0569                     l1510:
  2698                           
  2699                           ;SPI.c: 52:     return(SSPBUF);
  2700  0569  1283               	bcf	3,5	;RP0=0, select bank0
  2701  056A  1303               	bcf	3,6	;RP1=0, select bank0
  2702  056B  0813               	movf	19,w	;volatile
  2703  056C                     l259:
  2704  056C  0008               	return
  2705  056D                     __end_of_spiRead:
  2706                           
  2707                           	psect	text17
  2708  057D                     __ptext17:	
  2709 ;; *************** function _spiReceiveWait *****************
  2710 ;; Defined at:
  2711 ;;		line 31 in file "SPI.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;		None
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		None
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2725 ;;      Params:         0       0       0       0       0
  2726 ;;      Locals:         0       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0
  2728 ;;      Totals:         0       0       0       0       0
  2729 ;;Total ram usage:        0 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    1
  2732 ;; This function calls:
  2733 ;;		Nothing
  2734 ;; This function is called by:
  2735 ;;		_spiRead
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           
  2740                           ;psect for function _spiReceiveWait
  2741  057D                     _spiReceiveWait:
  2742  057D                     l1290:	
  2743                           ;incstack = 0
  2744                           ; Regs used in _spiReceiveWait: []
  2745                           
  2746  057D                     l245:	
  2747                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  2748                           
  2749  057D  1683               	bsf	3,5	;RP0=1, select bank1
  2750  057E  1303               	bcf	3,6	;RP1=0, select bank1
  2751  057F  1C14               	btfss	20,0	;volatile
  2752  0580  2D82               	goto	u411
  2753  0581  2D83               	goto	u410
  2754  0582                     u411:
  2755  0582  2D7D               	goto	l245
  2756  0583                     u410:
  2757  0583                     l248:
  2758  0583  0008               	return
  2759  0584                     __end_of_spiReceiveWait:
  2760                           
  2761                           	psect	text18
  2762  0242                     __ptext18:	
  2763 ;; *************** function _Lcd_Init *****************
  2764 ;; Defined at:
  2765 ;;		line 14 in file "LCD.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, status,2, status,0, pclath, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2779 ;;      Params:         0       0       0       0       0
  2780 ;;      Locals:         0       0       0       0       0
  2781 ;;      Temps:          2       0       0       0       0
  2782 ;;      Totals:         2       0       0       0       0
  2783 ;;Total ram usage:        2 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    3
  2786 ;; This function calls:
  2787 ;;		_Lcd_Cmd
  2788 ;;		_Lcd_Port
  2789 ;; This function is called by:
  2790 ;;		_main
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function _Lcd_Init
  2796  0242                     _Lcd_Init:
  2797  0242                     l1854:	
  2798                           ;incstack = 0
  2799                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2800                           
  2801                           
  2802                           ;LCD.c: 15:   Lcd_Port(0x00);
  2803  0242  3000               	movlw	0
  2804  0243  120A  118A  2597  120A  118A  	fcall	_Lcd_Port
  2805  0248                     l1856:
  2806                           
  2807                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  2808  0248  3034               	movlw	52
  2809  0249  00F7               	movwf	??_Lcd_Init+1
  2810  024A  30F1               	movlw	241
  2811  024B  00F6               	movwf	??_Lcd_Init
  2812  024C                     u1147:
  2813  024C  0BF6               	decfsz	??_Lcd_Init,f
  2814  024D  2A4C               	goto	u1147
  2815  024E  0BF7               	decfsz	??_Lcd_Init+1,f
  2816  024F  2A4C               	goto	u1147
  2817  0250  2A51               	nop2
  2818  0251                     l1858:
  2819                           
  2820                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  2821  0251  3030               	movlw	48
  2822  0252  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2823                           
  2824                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2825  0257  300D               	movlw	13
  2826  0258  00F7               	movwf	??_Lcd_Init+1
  2827  0259  30FB               	movlw	251
  2828  025A  00F6               	movwf	??_Lcd_Init
  2829  025B                     u1157:
  2830  025B  0BF6               	decfsz	??_Lcd_Init,f
  2831  025C  2A5B               	goto	u1157
  2832  025D  0BF7               	decfsz	??_Lcd_Init+1,f
  2833  025E  2A5B               	goto	u1157
  2834  025F  2A60               	nop2
  2835  0260                     l1860:
  2836                           
  2837                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  2838  0260  3030               	movlw	48
  2839  0261  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2840  0266                     l1862:
  2841                           
  2842                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  2843  0266  301D               	movlw	29
  2844  0267  00F7               	movwf	??_Lcd_Init+1
  2845  0268  3091               	movlw	145
  2846  0269  00F6               	movwf	??_Lcd_Init
  2847  026A                     u1167:
  2848  026A  0BF6               	decfsz	??_Lcd_Init,f
  2849  026B  2A6A               	goto	u1167
  2850  026C  0BF7               	decfsz	??_Lcd_Init+1,f
  2851  026D  2A6A               	goto	u1167
  2852                           
  2853                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  2854  026E  3030               	movlw	48
  2855  026F  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2856                           
  2857                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  2858  0274  3038               	movlw	56
  2859  0275  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2860                           
  2861                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  2862  027A  300C               	movlw	12
  2863  027B  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2864                           
  2865                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  2866  0280  3001               	movlw	1
  2867  0281  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2868                           
  2869                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  2870  0286  3006               	movlw	6
  2871  0287  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2872  028C                     l148:
  2873  028C  0008               	return
  2874  028D                     __end_of_Lcd_Init:
  2875                           
  2876                           	psect	text19
  2877  054B                     __ptext19:	
  2878 ;; *************** function _Lcd_Clear *****************
  2879 ;; Defined at:
  2880 ;;		line 42 in file "LCD.c"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;		None
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0, pclath, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2894 ;;      Params:         0       0       0       0       0
  2895 ;;      Locals:         0       0       0       0       0
  2896 ;;      Temps:          0       0       0       0       0
  2897 ;;      Totals:         0       0       0       0       0
  2898 ;;Total ram usage:        0 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:    3
  2901 ;; This function calls:
  2902 ;;		_Lcd_Cmd
  2903 ;; This function is called by:
  2904 ;;		_main
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _Lcd_Clear
  2910  054B                     _Lcd_Clear:
  2911  054B                     l1864:	
  2912                           ;incstack = 0
  2913                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2914                           
  2915                           
  2916                           ;LCD.c: 43:  Lcd_Cmd(0);
  2917  054B  3000               	movlw	0
  2918  054C  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2919                           
  2920                           ;LCD.c: 44:  Lcd_Cmd(1);
  2921  0551  3001               	movlw	1
  2922  0552  120A  118A  24B8  120A  118A  	fcall	_Lcd_Cmd
  2923  0557                     l157:
  2924  0557  0008               	return
  2925  0558                     __end_of_Lcd_Clear:
  2926                           
  2927                           	psect	text20
  2928  04B8                     __ptext20:	
  2929 ;; *************** function _Lcd_Cmd *****************
  2930 ;; Defined at:
  2931 ;;		line 33 in file "LCD.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  a               1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  a               1    5[COMMON] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0, pclath, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2945 ;;      Params:         0       0       0       0       0
  2946 ;;      Locals:         1       0       0       0       0
  2947 ;;      Temps:          2       0       0       0       0
  2948 ;;      Totals:         3       0       0       0       0
  2949 ;;Total ram usage:        3 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    2
  2952 ;; This function calls:
  2953 ;;		_Lcd_Port
  2954 ;; This function is called by:
  2955 ;;		_Lcd_Init
  2956 ;;		_Lcd_Clear
  2957 ;;		_Lcd_Set_Cursor
  2958 ;;		_Lcd_Shift_Right
  2959 ;;		_Lcd_Shift_Left
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           
  2964                           ;psect for function _Lcd_Cmd
  2965  04B8                     _Lcd_Cmd:
  2966                           
  2967                           ;incstack = 0
  2968                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2969                           ;Lcd_Cmd@a stored from wreg
  2970  04B8  00F5               	movwf	Lcd_Cmd@a
  2971  04B9                     l1702:
  2972                           
  2973                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  2974  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2975  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2976  04BB  1009               	bcf	9,0	;volatile
  2977  04BC                     l1704:
  2978                           
  2979                           ;LCD.c: 35:  Lcd_Port(a);
  2980  04BC  0875               	movf	Lcd_Cmd@a,w
  2981  04BD  120A  118A  2597  120A  118A  	fcall	_Lcd_Port
  2982  04C2                     l1706:
  2983                           
  2984                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  2985  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2986  04C3  1303               	bcf	3,6	;RP1=0, select bank0
  2987  04C4  1509               	bsf	9,2	;volatile
  2988  04C5                     l1708:
  2989                           
  2990                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2991  04C5  300B               	movlw	11
  2992  04C6  00F4               	movwf	??_Lcd_Cmd+1
  2993  04C7  3062               	movlw	98
  2994  04C8  00F3               	movwf	??_Lcd_Cmd
  2995  04C9                     u1177:
  2996  04C9  0BF3               	decfsz	??_Lcd_Cmd,f
  2997  04CA  2CC9               	goto	u1177
  2998  04CB  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2999  04CC  2CC9               	goto	u1177
  3000  04CD  0000               	nop
  3001  04CE                     l1710:
  3002                           
  3003                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  3004  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3005  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  3006  04D0  1109               	bcf	9,2	;volatile
  3007  04D1                     l154:
  3008  04D1  0008               	return
  3009  04D2                     __end_of_Lcd_Cmd:
  3010                           
  3011                           	psect	text21
  3012  0597                     __ptext21:	
  3013 ;; *************** function _Lcd_Port *****************
  3014 ;; Defined at:
  3015 ;;		line 29 in file "LCD.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  a               1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  a               1    2[COMMON] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3029 ;;      Params:         0       0       0       0       0
  3030 ;;      Locals:         1       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0
  3032 ;;      Totals:         1       0       0       0       0
  3033 ;;Total ram usage:        1 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    1
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_Lcd_Init
  3040 ;;		_Lcd_Cmd
  3041 ;;		_Lcd_Write_Char
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _Lcd_Port
  3047  0597                     _Lcd_Port:
  3048                           
  3049                           ;incstack = 0
  3050                           ; Regs used in _Lcd_Port: [wreg]
  3051                           ;Lcd_Port@a stored from wreg
  3052  0597  00F2               	movwf	Lcd_Port@a
  3053  0598                     l1700:
  3054                           
  3055                           ;LCD.c: 30:     PORTD = a;
  3056  0598  0872               	movf	Lcd_Port@a,w
  3057  0599  1283               	bcf	3,5	;RP0=0, select bank0
  3058  059A  1303               	bcf	3,6	;RP1=0, select bank0
  3059  059B  0088               	movwf	8	;volatile
  3060  059C                     l151:
  3061  059C  0008               	return
  3062  059D                     __end_of_Lcd_Port:
  3063                           
  3064                           	psect	text22
  3065  0513                     __ptext22:	
  3066 ;; *************** function _ADC_to_string *****************
  3067 ;; Defined at:
  3068 ;;		line 167 in file "main_maestro.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3082 ;;      Params:         0       0       0       0       0
  3083 ;;      Locals:         0       0       0       0       0
  3084 ;;      Temps:          0       3       0       0       0
  3085 ;;      Totals:         0       3       0       0       0
  3086 ;;Total ram usage:        3 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    3
  3089 ;; This function calls:
  3090 ;;		_sprintf
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function _ADC_to_string
  3098  0513                     _ADC_to_string:
  3099  0513                     l1866:	
  3100                           ;incstack = 0
  3101                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3102                           
  3103                           
  3104                           ;main_maestro.c: 169:     sprintf(data, "%.3i", cont);
  3105  0513  3025               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  3106  0514  1283               	bcf	3,5	;RP0=0, select bank0
  3107  0515  1303               	bcf	3,6	;RP1=0, select bank0
  3108  0516  00D1               	movwf	??_ADC_to_string
  3109  0517  0851               	movf	??_ADC_to_string,w
  3110  0518  00C4               	movwf	sprintf@f
  3111  0519  0835               	movf	_cont,w
  3112  051A  00D2               	movwf	??_ADC_to_string+1
  3113  051B  01D3               	clrf	??_ADC_to_string+2
  3114  051C  0852               	movf	??_ADC_to_string+1,w
  3115  051D  00C5               	movwf	?_sprintf+1
  3116  051E  0853               	movf	??_ADC_to_string+2,w
  3117  051F  00C6               	movwf	?_sprintf+2
  3118  0520  3036               	movlw	(low (_data| 0))& (0+255)
  3119  0521  120A  118A  201E  120A  118A  	fcall	_sprintf
  3120  0526                     l107:
  3121  0526  0008               	return
  3122  0527                     __end_of_ADC_to_string:
  3123                           
  3124                           	psect	text23
  3125  001E                     __ptext23:	
  3126 ;; *************** function _sprintf *****************
  3127 ;; Defined at:
  3128 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  sp              1    wreg     PTR unsigned char 
  3131 ;;		 -> data(8), 
  3132 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  3133 ;;		 -> STR_3(5), 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  3136 ;;		 -> data(8), 
  3137 ;;  tmpval          4    0        struct .
  3138 ;;  val             2   15[BANK0 ] unsigned int 
  3139 ;;  cp              2    0        PTR const unsigned char 
  3140 ;;  len             2    0        unsigned int 
  3141 ;;  c               1   18[BANK0 ] unsigned char 
  3142 ;;  prec            1   17[BANK0 ] char 
  3143 ;;  flag            1   13[BANK0 ] unsigned char 
  3144 ;;  ap              1   12[BANK0 ] PTR void [1]
  3145 ;;		 -> ?_sprintf(2), 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  2    6[BANK0 ] int 
  3148 ;; Registers used:
  3149 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3155 ;;      Params:         0       3       0       0       0
  3156 ;;      Locals:         0       7       0       0       0
  3157 ;;      Temps:          0       3       0       0       0
  3158 ;;      Totals:         0      13       0       0       0
  3159 ;;Total ram usage:       13 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    2
  3162 ;; This function calls:
  3163 ;;		___bmul
  3164 ;;		___lwdiv
  3165 ;;		___lwmod
  3166 ;;		_isdigit
  3167 ;; This function is called by:
  3168 ;;		_ADC_to_string
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           
  3173                           ;psect for function _sprintf
  3174  001E                     _sprintf:
  3175                           
  3176                           ;incstack = 0
  3177                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3178                           ;sprintf@sp stored from wreg
  3179  001E  1283               	bcf	3,5	;RP0=0, select bank0
  3180  001F  1303               	bcf	3,6	;RP1=0, select bank0
  3181  0020  00CC               	movwf	sprintf@sp
  3182  0021                     l1764:
  3183                           
  3184                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  3185  0021  3045               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3186  0022  00C7               	movwf	??_sprintf
  3187  0023  0847               	movf	??_sprintf,w
  3188  0024  00CA               	movwf	sprintf@ap
  3189                           
  3190                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3191  0025  296C               	goto	l1842
  3192  0026                     l1766:
  3193                           
  3194                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  3195  0026  3025               	movlw	37
  3196  0027  0650               	xorwf	sprintf@c,w
  3197  0028  1903               	btfsc	3,2
  3198  0029  282B               	goto	u911
  3199  002A  282C               	goto	u910
  3200  002B                     u911:
  3201  002B  2838               	goto	l1772
  3202  002C                     u910:
  3203  002C                     l1768:
  3204                           
  3205                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  3206  002C  0850               	movf	sprintf@c,w
  3207  002D  00C7               	movwf	??_sprintf
  3208  002E  084C               	movf	sprintf@sp,w
  3209  002F  0084               	movwf	4
  3210  0030  0847               	movf	??_sprintf,w
  3211  0031  1383               	bcf	3,7	;select IRP bank0
  3212  0032  0080               	movwf	0
  3213  0033                     l1770:
  3214  0033  3001               	movlw	1
  3215  0034  00C7               	movwf	??_sprintf
  3216  0035  0847               	movf	??_sprintf,w
  3217  0036  07CC               	addwf	sprintf@sp,f
  3218                           
  3219                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  3220  0037  296C               	goto	l1842
  3221  0038                     l1772:
  3222                           
  3223                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  3224  0038  01CB               	clrf	sprintf@flag
  3225  0039                     l1774:
  3226                           
  3227                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  3228  0039  0844               	movf	sprintf@f,w
  3229  003A  0084               	movwf	4
  3230  003B  120A  118A  239A  120A  118A  	fcall	stringdir
  3231  0040  3A2E               	xorlw	46
  3232  0041  1D03               	skipz
  3233  0042  2844               	goto	u921
  3234  0043  2845               	goto	u920
  3235  0044                     u921:
  3236  0044  287C               	goto	l1788
  3237  0045                     u920:
  3238  0045                     l1776:
  3239                           
  3240                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  3241  0045  3001               	movlw	1
  3242  0046  00C7               	movwf	??_sprintf
  3243  0047  0847               	movf	??_sprintf,w
  3244  0048  07C4               	addwf	sprintf@f,f
  3245  0049                     l1778:
  3246                           
  3247                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  3248  0049  01CF               	clrf	sprintf@prec
  3249                           
  3250                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3251  004A  286B               	goto	l1786
  3252  004B                     l1780:
  3253                           
  3254                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  3255  004B  1283               	bcf	3,5	;RP0=0, select bank0
  3256  004C  1303               	bcf	3,6	;RP1=0, select bank0
  3257  004D  084F               	movf	sprintf@prec,w
  3258  004E  00C7               	movwf	??_sprintf
  3259  004F  0847               	movf	??_sprintf,w
  3260  0050  00F2               	movwf	___bmul@multiplicand
  3261  0051  300A               	movlw	10
  3262  0052  120A  118A  24FE  120A  118A  	fcall	___bmul
  3263  0057  1283               	bcf	3,5	;RP0=0, select bank0
  3264  0058  1303               	bcf	3,6	;RP1=0, select bank0
  3265  0059  00C8               	movwf	??_sprintf+1
  3266  005A  0848               	movf	??_sprintf+1,w
  3267  005B  00CF               	movwf	sprintf@prec
  3268  005C                     l1782:
  3269                           
  3270                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  3271  005C  0844               	movf	sprintf@f,w
  3272  005D  0084               	movwf	4
  3273  005E  120A  118A  239A  120A  118A  	fcall	stringdir
  3274  0063  3ED0               	addlw	-48
  3275  0064  00C7               	movwf	??_sprintf
  3276  0065  0847               	movf	??_sprintf,w
  3277  0066  07CF               	addwf	sprintf@prec,f
  3278  0067                     l1784:
  3279  0067  3001               	movlw	1
  3280  0068  00C7               	movwf	??_sprintf
  3281  0069  0847               	movf	??_sprintf,w
  3282  006A  07C4               	addwf	sprintf@f,f
  3283  006B                     l1786:
  3284                           
  3285                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3286  006B  0844               	movf	sprintf@f,w
  3287  006C  0084               	movwf	4
  3288  006D  120A  118A  239A  120A  118A  	fcall	stringdir
  3289  0072  120A  118A  2539  120A  118A  	fcall	_isdigit
  3290  0077  1803               	btfsc	3,0
  3291  0078  287A               	goto	u931
  3292  0079  287B               	goto	u930
  3293  007A                     u931:
  3294  007A  284B               	goto	l1780
  3295  007B                     u930:
  3296  007B  287D               	goto	l1792
  3297  007C                     l1788:
  3298                           
  3299                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  3300  007C  01CF               	clrf	sprintf@prec
  3301  007D                     l1792:
  3302  007D  3001               	movlw	1
  3303  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3304  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3305  0080  07C4               	addwf	sprintf@f,f
  3306  0081  30FF               	movlw	-1
  3307  0082  0744               	addwf	sprintf@f,w
  3308  0083  0084               	movwf	4
  3309  0084  120A  118A  239A  120A  118A  	fcall	stringdir
  3310  0089  00D0               	movwf	sprintf@c
  3311  008A  00C7               	movwf	??_sprintf
  3312  008B  01C8               	clrf	??_sprintf+1
  3313                           
  3314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3315                           ; Switch size 1, requested type "simple"
  3316                           ; Number of cases is 1, Range of values is 0 to 0
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte            4     3 (average)
  3320                           ; direct_byte           11     8 (fixed)
  3321                           ; jumptable            260     6 (fixed)
  3322                           ;	Chosen strategy is simple_byte
  3323  008C  0848               	movf	??_sprintf+1,w
  3324  008D  3A00               	xorlw	0	; case 0
  3325  008E  1903               	skipnz
  3326  008F  2891               	goto	l1962
  3327  0090  296C               	goto	l1842
  3328  0091                     l1962:
  3329                           
  3330                           ; Switch size 1, requested type "simple"
  3331                           ; Number of cases is 3, Range of values is 0 to 105
  3332                           ; switch strategies available:
  3333                           ; Name         Instructions Cycles
  3334                           ; simple_byte           10     6 (average)
  3335                           ; jumptable            260     6 (fixed)
  3336                           ;	Chosen strategy is simple_byte
  3337  0091  0847               	movf	??_sprintf,w
  3338  0092  3A00               	xorlw	0	; case 0
  3339  0093  1903               	skipnz
  3340  0094  297E               	goto	l1844
  3341  0095  3A64               	xorlw	100	; case 100
  3342  0096  1903               	skipnz
  3343  0097  289C               	goto	l1794
  3344  0098  3A0D               	xorlw	13	; case 105
  3345  0099  1903               	skipnz
  3346  009A  289C               	goto	l1794
  3347  009B  296C               	goto	l1842
  3348  009C                     l1794:
  3349                           
  3350                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3351  009C  084A               	movf	sprintf@ap,w
  3352  009D  0084               	movwf	4
  3353  009E  1383               	bcf	3,7	;select IRP bank0
  3354  009F  0800               	movf	0,w
  3355  00A0  00CD               	movwf	sprintf@val
  3356  00A1  0A84               	incf	4,f
  3357  00A2  0800               	movf	0,w
  3358  00A3  00CE               	movwf	sprintf@val+1
  3359  00A4                     l1796:
  3360  00A4  3002               	movlw	2
  3361  00A5  00C7               	movwf	??_sprintf
  3362  00A6  0847               	movf	??_sprintf,w
  3363  00A7  07CA               	addwf	sprintf@ap,f
  3364  00A8                     l1798:
  3365                           
  3366                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  3367  00A8  1FCE               	btfss	sprintf@val+1,7
  3368  00A9  28AB               	goto	u941
  3369  00AA  28AC               	goto	u940
  3370  00AB                     u941:
  3371  00AB  28B5               	goto	l1804
  3372  00AC                     u940:
  3373  00AC                     l1800:
  3374                           
  3375                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  3376  00AC  3003               	movlw	3
  3377  00AD  00C7               	movwf	??_sprintf
  3378  00AE  0847               	movf	??_sprintf,w
  3379  00AF  04CB               	iorwf	sprintf@flag,f
  3380  00B0                     l1802:
  3381                           
  3382                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  3383  00B0  09CD               	comf	sprintf@val,f
  3384  00B1  09CE               	comf	sprintf@val+1,f
  3385  00B2  0ACD               	incf	sprintf@val,f
  3386  00B3  1903               	skipnz
  3387  00B4  0ACE               	incf	sprintf@val+1,f
  3388  00B5                     l1804:
  3389                           
  3390                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  3391  00B5  084F               	movf	sprintf@prec,w
  3392  00B6  1D03               	btfss	3,2
  3393  00B7  28B9               	goto	u951
  3394  00B8  28BA               	goto	u950
  3395  00B9                     u951:
  3396  00B9  28C4               	goto	l1810
  3397  00BA                     u950:
  3398  00BA                     l1806:
  3399  00BA  084D               	movf	sprintf@val,w
  3400  00BB  044E               	iorwf	sprintf@val+1,w
  3401  00BC  1D03               	btfss	3,2
  3402  00BD  28BF               	goto	u961
  3403  00BE  28C0               	goto	u960
  3404  00BF                     u961:
  3405  00BF  28C4               	goto	l1810
  3406  00C0                     u960:
  3407  00C0                     l1808:
  3408                           
  3409                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  3410  00C0  3001               	movlw	1
  3411  00C1  00C7               	movwf	??_sprintf
  3412  00C2  0847               	movf	??_sprintf,w
  3413  00C3  07CF               	addwf	sprintf@prec,f
  3414  00C4                     l1810:
  3415                           
  3416                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3417  00C4  01D0               	clrf	sprintf@c
  3418  00C5  0AD0               	incf	sprintf@c,f
  3419  00C6                     l1814:
  3420                           
  3421                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3422  00C6  0850               	movf	sprintf@c,w
  3423  00C7  00C7               	movwf	??_sprintf
  3424  00C8  0747               	addwf	??_sprintf,w
  3425  00C9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3426  00CA  0084               	movwf	4
  3427  00CB  120A  118A  239A  120A  118A  	fcall	stringdir
  3428  00D0  00C8               	movwf	??_sprintf+1
  3429  00D1  120A  118A  239A  120A  118A  	fcall	stringdir
  3430  00D6  00C9               	movwf	??_sprintf+2
  3431  00D7  0849               	movf	??_sprintf+2,w
  3432  00D8  024E               	subwf	sprintf@val+1,w
  3433  00D9  1D03               	skipz
  3434  00DA  28DD               	goto	u975
  3435  00DB  0848               	movf	??_sprintf+1,w
  3436  00DC  024D               	subwf	sprintf@val,w
  3437  00DD                     u975:
  3438  00DD  1803               	skipnc
  3439  00DE  28E0               	goto	u971
  3440  00DF  28E1               	goto	u970
  3441  00E0                     u971:
  3442  00E0  28E2               	goto	l1818
  3443  00E1                     u970:
  3444  00E1  28EC               	goto	l1820
  3445  00E2                     l1818:
  3446  00E2  3001               	movlw	1
  3447  00E3  00C7               	movwf	??_sprintf
  3448  00E4  0847               	movf	??_sprintf,w
  3449  00E5  07D0               	addwf	sprintf@c,f
  3450  00E6  3005               	movlw	5
  3451  00E7  0650               	xorwf	sprintf@c,w
  3452  00E8  1D03               	btfss	3,2
  3453  00E9  28EB               	goto	u981
  3454  00EA  28EC               	goto	u980
  3455  00EB                     u981:
  3456  00EB  28C6               	goto	l1814
  3457  00EC                     u980:
  3458  00EC                     l1820:
  3459                           
  3460                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  3461  00EC  084F               	movf	sprintf@prec,w
  3462  00ED  00C7               	movwf	??_sprintf
  3463  00EE  01C8               	clrf	??_sprintf+1
  3464  00EF  1BC7               	btfsc	??_sprintf,7
  3465  00F0  03C8               	decf	??_sprintf+1,f
  3466  00F1  0848               	movf	??_sprintf+1,w
  3467  00F2  3A80               	xorlw	128
  3468  00F3  3C80               	sublw	128
  3469  00F4  1D03               	skipz
  3470  00F5  28F8               	goto	u995
  3471  00F6  0847               	movf	??_sprintf,w
  3472  00F7  0250               	subwf	sprintf@c,w
  3473  00F8                     u995:
  3474  00F8  1803               	skipnc
  3475  00F9  28FB               	goto	u991
  3476  00FA  28FC               	goto	u990
  3477  00FB                     u991:
  3478  00FB  28FD               	goto	l1824
  3479  00FC                     u990:
  3480  00FC                     l1822:
  3481  00FC  2917               	goto	l1828
  3482  00FD                     l1824:
  3483  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3484  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  3485  00FF  084F               	movf	sprintf@prec,w
  3486  0100  00C7               	movwf	??_sprintf
  3487  0101  01C8               	clrf	??_sprintf+1
  3488  0102  1BC7               	btfsc	??_sprintf,7
  3489  0103  03C8               	decf	??_sprintf+1,f
  3490  0104  0848               	movf	??_sprintf+1,w
  3491  0105  3A80               	xorlw	128
  3492  0106  00C9               	movwf	??_sprintf+2
  3493  0107  3080               	movlw	128
  3494  0108  0249               	subwf	??_sprintf+2,w
  3495  0109  1D03               	skipz
  3496  010A  290D               	goto	u1005
  3497  010B  0850               	movf	sprintf@c,w
  3498  010C  0247               	subwf	??_sprintf,w
  3499  010D                     u1005:
  3500  010D  1803               	skipnc
  3501  010E  2910               	goto	u1001
  3502  010F  2911               	goto	u1000
  3503  0110                     u1001:
  3504  0110  2917               	goto	l1828
  3505  0111                     u1000:
  3506  0111                     l1826:
  3507                           
  3508                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
  3509  0111  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0112  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0113  0850               	movf	sprintf@c,w
  3512  0114  00C7               	movwf	??_sprintf
  3513  0115  0847               	movf	??_sprintf,w
  3514  0116  00CF               	movwf	sprintf@prec
  3515  0117                     l1828:
  3516                           
  3517                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  3518  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0118  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0119  084B               	movf	sprintf@flag,w
  3521  011A  3903               	andlw	3
  3522  011B  1903               	btfsc	3,2
  3523  011C  291E               	goto	u1011
  3524  011D  291F               	goto	u1010
  3525  011E                     u1011:
  3526  011E  2963               	goto	l1840
  3527  011F                     u1010:
  3528  011F                     l1830:
  3529                           
  3530                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  3531  011F  302D               	movlw	45
  3532  0120  00C7               	movwf	??_sprintf
  3533  0121  084C               	movf	sprintf@sp,w
  3534  0122  0084               	movwf	4
  3535  0123  0847               	movf	??_sprintf,w
  3536  0124  1383               	bcf	3,7	;select IRP bank0
  3537  0125  0080               	movwf	0
  3538  0126                     l1832:
  3539  0126  3001               	movlw	1
  3540  0127  00C7               	movwf	??_sprintf
  3541  0128  0847               	movf	??_sprintf,w
  3542  0129  07CC               	addwf	sprintf@sp,f
  3543  012A  2963               	goto	l1840
  3544  012B                     l1834:
  3545                           
  3546                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  3547  012B  300A               	movlw	10
  3548  012C  00BE               	movwf	___lwmod@divisor
  3549  012D  3000               	movlw	0
  3550  012E  00BF               	movwf	___lwmod@divisor+1
  3551  012F  084F               	movf	sprintf@prec,w
  3552  0130  00C7               	movwf	??_sprintf
  3553  0131  0747               	addwf	??_sprintf,w
  3554  0132  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3555  0133  0084               	movwf	4
  3556  0134  120A  118A  239A  120A  118A  	fcall	stringdir
  3557  0139  00F2               	movwf	___lwdiv@divisor
  3558  013A  120A  118A  239A  120A  118A  	fcall	stringdir
  3559  013F  00F3               	movwf	___lwdiv@divisor+1
  3560  0140  084E               	movf	sprintf@val+1,w
  3561  0141  00F5               	movwf	___lwdiv@dividend+1
  3562  0142  084D               	movf	sprintf@val,w
  3563  0143  00F4               	movwf	___lwdiv@dividend
  3564  0144  120A  118A  22D3  120A  118A  	fcall	___lwdiv
  3565  0149  0873               	movf	?___lwdiv+1,w
  3566  014A  1283               	bcf	3,5	;RP0=0, select bank0
  3567  014B  1303               	bcf	3,6	;RP1=0, select bank0
  3568  014C  00C1               	movwf	___lwmod@dividend+1
  3569  014D  0872               	movf	?___lwdiv,w
  3570  014E  00C0               	movwf	___lwmod@dividend
  3571  014F  120A  118A  2354  120A  118A  	fcall	___lwmod
  3572  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3573  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3574  0156  083E               	movf	?___lwmod,w
  3575  0157  3E30               	addlw	48
  3576  0158  00C8               	movwf	??_sprintf+1
  3577  0159  0848               	movf	??_sprintf+1,w
  3578  015A  00D0               	movwf	sprintf@c
  3579  015B                     l1836:
  3580                           
  3581                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  3582  015B  0850               	movf	sprintf@c,w
  3583  015C  00C7               	movwf	??_sprintf
  3584  015D  084C               	movf	sprintf@sp,w
  3585  015E  0084               	movwf	4
  3586  015F  0847               	movf	??_sprintf,w
  3587  0160  1383               	bcf	3,7	;select IRP bank0
  3588  0161  0080               	movwf	0
  3589  0162  2926               	goto	l1832
  3590  0163                     l1840:
  3591                           
  3592                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  3593  0163  30FF               	movlw	255
  3594  0164  00C7               	movwf	??_sprintf
  3595  0165  0847               	movf	??_sprintf,w
  3596  0166  07CF               	addwf	sprintf@prec,f
  3597  0167  0A4F               	incf	sprintf@prec,w
  3598  0168  1D03               	btfss	3,2
  3599  0169  296B               	goto	u1021
  3600  016A  296C               	goto	u1020
  3601  016B                     u1021:
  3602  016B  292B               	goto	l1834
  3603  016C                     u1020:
  3604  016C                     l1842:
  3605                           
  3606                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3607  016C  3001               	movlw	1
  3608  016D  07C4               	addwf	sprintf@f,f
  3609  016E  30FF               	movlw	-1
  3610  016F  0744               	addwf	sprintf@f,w
  3611  0170  0084               	movwf	4
  3612  0171  120A  118A  239A  120A  118A  	fcall	stringdir
  3613  0176  00C7               	movwf	??_sprintf
  3614  0177  0847               	movf	??_sprintf,w
  3615  0178  00D0               	movwf	sprintf@c
  3616  0179  0850               	movf	sprintf@c,w
  3617  017A  1D03               	btfss	3,2
  3618  017B  297D               	goto	u1031
  3619  017C  297E               	goto	u1030
  3620  017D                     u1031:
  3621  017D  2826               	goto	l1766
  3622  017E                     u1030:
  3623  017E                     l1844:
  3624                           
  3625                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  3626  017E  084C               	movf	sprintf@sp,w
  3627  017F  0084               	movwf	4
  3628  0180  1383               	bcf	3,7	;select IRP bank0
  3629  0181  0180               	clrf	0
  3630  0182                     l380:
  3631  0182  0008               	return
  3632  0183                     __end_of_sprintf:
  3633                           
  3634                           	psect	text24
  3635  0539                     __ptext24:	
  3636 ;; *************** function _isdigit *****************
  3637 ;; Defined at:
  3638 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  c               1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  c               1    3[COMMON] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;		None               void
  3645 ;; Registers used:
  3646 ;;		wreg, status,2, status,0
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3652 ;;      Params:         0       0       0       0       0
  3653 ;;      Locals:         2       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0
  3655 ;;      Totals:         2       0       0       0       0
  3656 ;;Total ram usage:        2 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    1
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_sprintf
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           
  3667                           ;psect for function _isdigit
  3668  0539                     _isdigit:
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3672                           ;isdigit@c stored from wreg
  3673  0539  00F3               	movwf	isdigit@c
  3674  053A                     l1292:
  3675  053A  01F2               	clrf	_isdigit$977
  3676  053B                     l1294:
  3677  053B  303A               	movlw	58
  3678  053C  0273               	subwf	isdigit@c,w
  3679  053D  1803               	skipnc
  3680  053E  2D40               	goto	u421
  3681  053F  2D41               	goto	u420
  3682  0540                     u421:
  3683  0540  2D49               	goto	l1300
  3684  0541                     u420:
  3685  0541                     l1296:
  3686  0541  3030               	movlw	48
  3687  0542  0273               	subwf	isdigit@c,w
  3688  0543  1C03               	skipc
  3689  0544  2D46               	goto	u431
  3690  0545  2D47               	goto	u430
  3691  0546                     u431:
  3692  0546  2D49               	goto	l1300
  3693  0547                     u430:
  3694  0547                     l1298:
  3695  0547  01F2               	clrf	_isdigit$977
  3696  0548  0AF2               	incf	_isdigit$977,f
  3697  0549                     l1300:
  3698  0549  0C72               	rrf	_isdigit$977,w
  3699  054A                     l812:
  3700  054A  0008               	return
  3701  054B                     __end_of_isdigit:
  3702                           
  3703                           	psect	text25
  3704  0354                     __ptext25:	
  3705 ;; *************** function ___lwmod *****************
  3706 ;; Defined at:
  3707 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;  divisor         2    0[BANK0 ] unsigned int 
  3710 ;;  dividend        2    2[BANK0 ] unsigned int 
  3711 ;; Auto vars:     Size  Location     Type
  3712 ;;  counter         1    5[BANK0 ] unsigned char 
  3713 ;; Return value:  Size  Location     Type
  3714 ;;                  2    0[BANK0 ] unsigned int 
  3715 ;; Registers used:
  3716 ;;		wreg, status,2, status,0
  3717 ;; Tracked objects:
  3718 ;;		On entry : 0/0
  3719 ;;		On exit  : 0/0
  3720 ;;		Unchanged: 0/0
  3721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3722 ;;      Params:         0       4       0       0       0
  3723 ;;      Locals:         0       1       0       0       0
  3724 ;;      Temps:          0       1       0       0       0
  3725 ;;      Totals:         0       6       0       0       0
  3726 ;;Total ram usage:        6 bytes
  3727 ;; Hardware stack levels used:    1
  3728 ;; Hardware stack levels required when called:    1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_sprintf
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           
  3737                           ;psect for function ___lwmod
  3738  0354                     ___lwmod:
  3739  0354                     l1722:	
  3740                           ;incstack = 0
  3741                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3742                           
  3743  0354  1283               	bcf	3,5	;RP0=0, select bank0
  3744  0355  1303               	bcf	3,6	;RP1=0, select bank0
  3745  0356  083E               	movf	___lwmod@divisor,w
  3746  0357  043F               	iorwf	___lwmod@divisor+1,w
  3747  0358  1903               	btfsc	3,2
  3748  0359  2B5B               	goto	u801
  3749  035A  2B5C               	goto	u800
  3750  035B                     u801:
  3751  035B  2B8B               	goto	l1740
  3752  035C                     u800:
  3753  035C                     l1724:
  3754  035C  01C3               	clrf	___lwmod@counter
  3755  035D  0AC3               	incf	___lwmod@counter,f
  3756  035E  2B6A               	goto	l1730
  3757  035F                     l1726:
  3758  035F  3001               	movlw	1
  3759  0360                     u815:
  3760  0360  1003               	clrc
  3761  0361  0DBE               	rlf	___lwmod@divisor,f
  3762  0362  0DBF               	rlf	___lwmod@divisor+1,f
  3763  0363  3EFF               	addlw	-1
  3764  0364  1D03               	skipz
  3765  0365  2B60               	goto	u815
  3766  0366                     l1728:
  3767  0366  3001               	movlw	1
  3768  0367  00C2               	movwf	??___lwmod
  3769  0368  0842               	movf	??___lwmod,w
  3770  0369  07C3               	addwf	___lwmod@counter,f
  3771  036A                     l1730:
  3772  036A  1FBF               	btfss	___lwmod@divisor+1,7
  3773  036B  2B6D               	goto	u821
  3774  036C  2B6E               	goto	u820
  3775  036D                     u821:
  3776  036D  2B5F               	goto	l1726
  3777  036E                     u820:
  3778  036E                     l1732:
  3779  036E  083F               	movf	___lwmod@divisor+1,w
  3780  036F  0241               	subwf	___lwmod@dividend+1,w
  3781  0370  1D03               	skipz
  3782  0371  2B74               	goto	u835
  3783  0372  083E               	movf	___lwmod@divisor,w
  3784  0373  0240               	subwf	___lwmod@dividend,w
  3785  0374                     u835:
  3786  0374  1C03               	skipc
  3787  0375  2B77               	goto	u831
  3788  0376  2B78               	goto	u830
  3789  0377                     u831:
  3790  0377  2B7E               	goto	l1736
  3791  0378                     u830:
  3792  0378                     l1734:
  3793  0378  083E               	movf	___lwmod@divisor,w
  3794  0379  02C0               	subwf	___lwmod@dividend,f
  3795  037A  083F               	movf	___lwmod@divisor+1,w
  3796  037B  1C03               	skipc
  3797  037C  03C1               	decf	___lwmod@dividend+1,f
  3798  037D  02C1               	subwf	___lwmod@dividend+1,f
  3799  037E                     l1736:
  3800  037E  3001               	movlw	1
  3801  037F                     u845:
  3802  037F  1003               	clrc
  3803  0380  0CBF               	rrf	___lwmod@divisor+1,f
  3804  0381  0CBE               	rrf	___lwmod@divisor,f
  3805  0382  3EFF               	addlw	-1
  3806  0383  1D03               	skipz
  3807  0384  2B7F               	goto	u845
  3808  0385                     l1738:
  3809  0385  3001               	movlw	1
  3810  0386  02C3               	subwf	___lwmod@counter,f
  3811  0387  1D03               	btfss	3,2
  3812  0388  2B8A               	goto	u851
  3813  0389  2B8B               	goto	u850
  3814  038A                     u851:
  3815  038A  2B6E               	goto	l1732
  3816  038B                     u850:
  3817  038B                     l1740:
  3818  038B  0841               	movf	___lwmod@dividend+1,w
  3819  038C  00BF               	movwf	?___lwmod+1
  3820  038D  0840               	movf	___lwmod@dividend,w
  3821  038E  00BE               	movwf	?___lwmod
  3822  038F                     l802:
  3823  038F  0008               	return
  3824  0390                     __end_of___lwmod:
  3825                           
  3826                           	psect	text26
  3827  02D3                     __ptext26:	
  3828 ;; *************** function ___lwdiv *****************
  3829 ;; Defined at:
  3830 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  divisor         2    2[COMMON] unsigned int 
  3833 ;;  dividend        2    4[COMMON] unsigned int 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  quotient        2    7[COMMON] unsigned int 
  3836 ;;  counter         1    9[COMMON] unsigned char 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  2    2[COMMON] unsigned int 
  3839 ;; Registers used:
  3840 ;;		wreg, status,2, status,0
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3846 ;;      Params:         4       0       0       0       0
  3847 ;;      Locals:         3       0       0       0       0
  3848 ;;      Temps:          1       0       0       0       0
  3849 ;;      Totals:         8       0       0       0       0
  3850 ;;Total ram usage:        8 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; Hardware stack levels required when called:    1
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_sprintf
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           
  3861                           ;psect for function ___lwdiv
  3862  02D3                     ___lwdiv:
  3863  02D3                     l1318:	
  3864                           ;incstack = 0
  3865                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3866                           
  3867  02D3  01F7               	clrf	___lwdiv@quotient
  3868  02D4  01F8               	clrf	___lwdiv@quotient+1
  3869  02D5                     l1320:
  3870  02D5  0872               	movf	___lwdiv@divisor,w
  3871  02D6  0473               	iorwf	___lwdiv@divisor+1,w
  3872  02D7  1903               	btfsc	3,2
  3873  02D8  2ADA               	goto	u461
  3874  02D9  2ADB               	goto	u460
  3875  02DA                     u461:
  3876  02DA  2B12               	goto	l1340
  3877  02DB                     u460:
  3878  02DB                     l1322:
  3879  02DB  01F9               	clrf	___lwdiv@counter
  3880  02DC  0AF9               	incf	___lwdiv@counter,f
  3881  02DD  2AE9               	goto	l1328
  3882  02DE                     l1324:
  3883  02DE  3001               	movlw	1
  3884  02DF                     u475:
  3885  02DF  1003               	clrc
  3886  02E0  0DF2               	rlf	___lwdiv@divisor,f
  3887  02E1  0DF3               	rlf	___lwdiv@divisor+1,f
  3888  02E2  3EFF               	addlw	-1
  3889  02E3  1D03               	skipz
  3890  02E4  2ADF               	goto	u475
  3891  02E5                     l1326:
  3892  02E5  3001               	movlw	1
  3893  02E6  00F6               	movwf	??___lwdiv
  3894  02E7  0876               	movf	??___lwdiv,w
  3895  02E8  07F9               	addwf	___lwdiv@counter,f
  3896  02E9                     l1328:
  3897  02E9  1FF3               	btfss	___lwdiv@divisor+1,7
  3898  02EA  2AEC               	goto	u481
  3899  02EB  2AED               	goto	u480
  3900  02EC                     u481:
  3901  02EC  2ADE               	goto	l1324
  3902  02ED                     u480:
  3903  02ED                     l1330:
  3904  02ED  3001               	movlw	1
  3905  02EE                     u495:
  3906  02EE  1003               	clrc
  3907  02EF  0DF7               	rlf	___lwdiv@quotient,f
  3908  02F0  0DF8               	rlf	___lwdiv@quotient+1,f
  3909  02F1  3EFF               	addlw	-1
  3910  02F2  1D03               	skipz
  3911  02F3  2AEE               	goto	u495
  3912  02F4  0873               	movf	___lwdiv@divisor+1,w
  3913  02F5  0275               	subwf	___lwdiv@dividend+1,w
  3914  02F6  1D03               	skipz
  3915  02F7  2AFA               	goto	u505
  3916  02F8  0872               	movf	___lwdiv@divisor,w
  3917  02F9  0274               	subwf	___lwdiv@dividend,w
  3918  02FA                     u505:
  3919  02FA  1C03               	skipc
  3920  02FB  2AFD               	goto	u501
  3921  02FC  2AFE               	goto	u500
  3922  02FD                     u501:
  3923  02FD  2B05               	goto	l1336
  3924  02FE                     u500:
  3925  02FE                     l1332:
  3926  02FE  0872               	movf	___lwdiv@divisor,w
  3927  02FF  02F4               	subwf	___lwdiv@dividend,f
  3928  0300  0873               	movf	___lwdiv@divisor+1,w
  3929  0301  1C03               	skipc
  3930  0302  03F5               	decf	___lwdiv@dividend+1,f
  3931  0303  02F5               	subwf	___lwdiv@dividend+1,f
  3932  0304                     l1334:
  3933  0304  1477               	bsf	___lwdiv@quotient,0
  3934  0305                     l1336:
  3935  0305  3001               	movlw	1
  3936  0306                     u515:
  3937  0306  1003               	clrc
  3938  0307  0CF3               	rrf	___lwdiv@divisor+1,f
  3939  0308  0CF2               	rrf	___lwdiv@divisor,f
  3940  0309  3EFF               	addlw	-1
  3941  030A  1D03               	skipz
  3942  030B  2B06               	goto	u515
  3943  030C                     l1338:
  3944  030C  3001               	movlw	1
  3945  030D  02F9               	subwf	___lwdiv@counter,f
  3946  030E  1D03               	btfss	3,2
  3947  030F  2B11               	goto	u521
  3948  0310  2B12               	goto	u520
  3949  0311                     u521:
  3950  0311  2AED               	goto	l1330
  3951  0312                     u520:
  3952  0312                     l1340:
  3953  0312  0878               	movf	___lwdiv@quotient+1,w
  3954  0313  00F3               	movwf	?___lwdiv+1
  3955  0314  0877               	movf	___lwdiv@quotient,w
  3956  0315  00F2               	movwf	?___lwdiv
  3957  0316                     l792:
  3958  0316  0008               	return
  3959  0317                     __end_of___lwdiv:
  3960                           
  3961                           	psect	text27
  3962  04FE                     __ptext27:	
  3963 ;; *************** function ___bmul *****************
  3964 ;; Defined at:
  3965 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;  multiplier      1    wreg     unsigned char 
  3968 ;;  multiplicand    1    2[COMMON] unsigned char 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  multiplier      1    5[COMMON] unsigned char 
  3971 ;;  product         1    4[COMMON] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      unsigned char 
  3974 ;; Registers used:
  3975 ;;		wreg, status,2, status,0
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3981 ;;      Params:         1       0       0       0       0
  3982 ;;      Locals:         2       0       0       0       0
  3983 ;;      Temps:          1       0       0       0       0
  3984 ;;      Totals:         4       0       0       0       0
  3985 ;;Total ram usage:        4 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    1
  3988 ;; This function calls:
  3989 ;;		Nothing
  3990 ;; This function is called by:
  3991 ;;		_sprintf
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function ___bmul
  3997  04FE                     ___bmul:
  3998                           
  3999                           ;incstack = 0
  4000                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4001                           ;___bmul@multiplier stored from wreg
  4002  04FE  00F5               	movwf	___bmul@multiplier
  4003  04FF                     l1304:
  4004  04FF  01F4               	clrf	___bmul@product
  4005  0500                     l1306:
  4006  0500  1C75               	btfss	___bmul@multiplier,0
  4007  0501  2D03               	goto	u441
  4008  0502  2D04               	goto	u440
  4009  0503                     u441:
  4010  0503  2D08               	goto	l1310
  4011  0504                     u440:
  4012  0504                     l1308:
  4013  0504  0872               	movf	___bmul@multiplicand,w
  4014  0505  00F3               	movwf	??___bmul
  4015  0506  0873               	movf	??___bmul,w
  4016  0507  07F4               	addwf	___bmul@product,f
  4017  0508                     l1310:
  4018  0508  1003               	clrc
  4019  0509  0DF2               	rlf	___bmul@multiplicand,f
  4020  050A                     l1312:
  4021  050A  1003               	clrc
  4022  050B  0CF5               	rrf	___bmul@multiplier,f
  4023  050C  0875               	movf	___bmul@multiplier,w
  4024  050D  1D03               	btfss	3,2
  4025  050E  2D10               	goto	u451
  4026  050F  2D11               	goto	u450
  4027  0510                     u451:
  4028  0510  2D00               	goto	l1306
  4029  0511                     u450:
  4030  0511                     l1314:
  4031  0511  0874               	movf	___bmul@product,w
  4032  0512                     l410:
  4033  0512  0008               	return
  4034  0513                     __end_of___bmul:
  4035                           
  4036                           	psect	text28
  4037  0584                     __ptext28:	
  4038 ;; *************** function _ISR *****************
  4039 ;; Defined at:
  4040 ;;		line 82 in file "main_maestro.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;		None
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;		None
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		None
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4054 ;;      Params:         0       0       0       0       0
  4055 ;;      Locals:         0       0       0       0       0
  4056 ;;      Temps:          2       0       0       0       0
  4057 ;;      Totals:         2       0       0       0       0
  4058 ;;Total ram usage:        2 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; This function calls:
  4061 ;;		Nothing
  4062 ;; This function is called by:
  4063 ;;		Interrupt level 1
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           
  4068                           ;psect for function _ISR
  4069  0584                     _ISR:
  4070  0584                     i1l93:
  4071  0584  0871               	movf	??_ISR+1,w
  4072  0585  008A               	movwf	10
  4073  0586  0E70               	swapf	??_ISR,w
  4074  0587  0083               	movwf	3
  4075  0588  0EFE               	swapf	btemp,f
  4076  0589  0E7E               	swapf	btemp,w
  4077  058A  0009               	retfie
  4078  058B                     __end_of_ISR:
  4079  007E                     btemp	set	126	;btemp
  4080  007E                     wtemp0	set	126
  4081                           
  4082                           	psect	intentry
  4083  0004                     __pintentry:	
  4084                           ;incstack = 0
  4085                           ; Regs used in _ISR: []
  4086                           
  4087  0004                     interrupt_function:
  4088  007E                     saved_w	set	btemp
  4089  0004  00FE               	movwf	btemp
  4090  0005  0E03               	swapf	3,w
  4091  0006  00F0               	movwf	??_ISR
  4092  0007  080A               	movf	10,w
  4093  0008  00F1               	movwf	??_ISR+1
  4094  0009  120A  118A  2D84   	ljmp	_ISR
  4095                           
  4096                           	psect	config
  4097                           
  4098                           ;Config register CONFIG1 @ 0x2007
  4099                           ;	Oscillator Selection bits
  4100                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  4101                           ;	Watchdog Timer Enable bit
  4102                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4103                           ;	Power-up Timer Enable bit
  4104                           ;	PWRTE = OFF, PWRT disabled
  4105                           ;	RE3/MCLR pin function select bit
  4106                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4107                           ;	Code Protection bit
  4108                           ;	CP = OFF, Program memory code protection is disabled
  4109                           ;	Data Code Protection bit
  4110                           ;	CPD = OFF, Data memory code protection is disabled
  4111                           ;	Brown Out Reset Selection bits
  4112                           ;	BOREN = OFF, BOR disabled
  4113                           ;	Internal External Switchover bit
  4114                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4115                           ;	Fail-Safe Clock Monitor Enabled bit
  4116                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4117                           ;	Low Voltage Programming Enable bit
  4118                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4119                           ;	In-Circuit Debugger Mode bit
  4120                           ;	DEBUG = 0x1, unprogrammed default
  4121  2007                     	org	8199
  4122  2007  20D6               	dw	8406
  4123                           
  4124                           ;Config register CONFIG2 @ 0x2008
  4125                           ;	Brown-out Reset Selection bit
  4126                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4127                           ;	Flash Program Memory Self Write Enable bits
  4128                           ;	WRT = OFF, Write protection off
  4129  2008                     	org	8200
  4130  2008  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    10
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     22      52
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> data(BANK0[8]), STR_2(CODE[9]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> data(BANK0[8]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _SPI_TEMP->_spiWrite
    _SPI_CONT->_spiWrite
    _SPI_ADC->_spiWrite
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _ADC_to_string->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4185
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _SPI_ADC
                           _SPI_CONT
                           _SPI_TEMP
                       _Show_val_LCD
                        _Write_USART
                 _Write_USART_String
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   4     2      2     218
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         0     0      0     706
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     322
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     384
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _SPI_TEMP                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_CONT                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_ADC                                              3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0    1999
                                             19 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1999
                                              6 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     145
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _isdigit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SPI_ADC
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_CONT
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_TEMP
     _spiRead
       _spiReceiveWait
     _spiWrite
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Write_USART
   _Write_USART_String
     _Write_USART
   _setup
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      40       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      34       5       65.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      40      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 12:03:54 2021

                           pc 0002                ___bmul@product 0074                   _SSPSTATbits 0094  
                          fsr 0004          __size_of_Write_USART 000C                           l110 0538  
                         l104 0353                           l113 03FE                           l201 057C  
                         l210 0559                           l130 0200                           l107 0526  
                         l131 0206                           l116 0434                           l204 0590  
                         l132 020C                           l213 0563                           l133 0212  
                         l125 01E8                           l134 0218                           l126 0240  
                         l151 059C                           l119 0468                           l135 0241  
                         l127 01EE                           l128 01F4                           l129 01FA  
                         l241 04E2                           l410 0512                           l154 04D1  
                         l242 04E7                           l251 0596                           l163 04B7  
                         l219 0493                           l148 028C                           l172 02D2  
                         l157 0557                           l245 057D                           l166 04FD  
                         l248 0583                           l259 056C                           l380 0182  
                         l802 038F                           l812 054A                           l792 0316  
                         _RC0 0038                           _RC1 0039                           _RC2 003A  
                         u410 0583                           u411 0582                           u500 02FE  
                         u420 0541                           u501 02FD                           u421 0540  
                         u430 0547                           u431 0546                           u440 0504  
                         u520 0312                           u441 0503                           u521 0311  
                         u505 02FA                           u450 0511                           u451 0510  
                         u515 0306                           u460 02DB                           _ISR 0584  
                         u461 02DA                           u480 02ED                           u800 035C  
                         u640 055F                           u481 02EC                           u801 035B  
                         u641 055E                           u650 04DA                           u475 02DF  
                         u651 04D9                           u820 036E                           u900 02D2  
                         u821 036D                           u901 02D1                           u830 0378  
                         u910 002C                           u495 02EE                           u831 0377  
                         u815 0360                           u911 002B                           u920 0045  
                         u921 0044                           u850 038B                           u930 007B  
                         u851 038A                           u835 0374                           u931 007A  
                         u940 00AC                           u860 049A                           u845 037F  
                         u941 00AB                           u861 0499                           u950 00BA  
                         u870 04AC                           u790 0493                           u951 00B9  
                         u871 04AB                           u791 0492                           u960 00C0  
                         u880 029C                           u961 00BF                           u970 00E1  
                         u890 02C0                           u971 00E0                           u980 00EC  
                         u981 00EB                           u990 00FC                           u991 00FB  
                         u975 00DD                           u995 00F8                           fsr0 0004  
                         indf 0000   __size_of_Write_USART_String 002B                          ?_ISR 0070  
                        l1300 0549                          l1310 0508                          l1312 050A  
                        l1304 04FF                          l1320 02D5                          l1400 058B  
                        l1314 0511                          l1306 0500                          l1330 02ED  
                        l1322 02DB                          l1402 058E                          l1410 04DC  
                        l1308 0504                          l1332 02FE                          l1324 02DE  
                        l1340 0312                          l1404 0575                          l1412 04DE  
                        l1334 0304                          l1326 02E5                          l1318 02D3  
                        l1510 0569                          l1414 04E1                          l1406 04D3  
                        l1336 0305                          l1328 02E9                          l1600 046B  
                        l1408 04DA                          l1520 0321                          l1338 030C  
                        l1290 057D                          l1506 0592                          l1602 047C  
                        l1530 032A                          l1522 0324                          l1514 0317  
                        l1292 053A                          l1700 0598                          l1508 0564  
                        l1604 0480                          l1540 0331                          l1532 032B  
                        l1524 0325                          l1516 031D                          l1294 053B  
                        l1710 04CE                          l1702 04B9                          l1390 01E7  
                        l1550 0340                          l1542 0334                          l1534 032C  
                        l1526 0326                          l1518 0320                          l1296 0541  
                        l1800 00AC                          l1704 04BC                          l1720 04FA  
                        l1712 04E9                          l1552 0345                          l1544 0337  
                        l1536 032D                          l1528 0327                          l1730 036A  
                        l1722 0354                          l1298 0547                          l1810 00C4  
                        l1802 00B0                          l1706 04C2                          l1570 03CC  
                        l1714 04EC                          l1386 0559                          l1394 021E  
                        l1554 034A                          l1546 033A                          l1538 032E  
                        l1732 036E                          l1724 035C                          l1740 038B  
                        l1820 00EC                          l1804 00B5                          l1708 04C5  
                        l1580 0402                          l1572 03D5                          l1716 04F2  
                        l1388 055F                          l1548 033D                          l1900 01CD  
                        l1734 0378                          l1726 035F                          l1830 011F  
                        l1822 00FC                          l1814 00C6                          l1806 00BA  
                        l1582 040B                          l1574 03DB                          l1590 0438  
                        l1750 04A6                          l1718 04F5                          l1902 01D6  
                        l1736 037E                          l1728 0366                          l1832 0126  
                        l1840 0163                          l1824 00FD                          l1808 00C0  
                        l1584 0411                          l1576 03EE                          l1568 03C9  
                        l1592 0441                          l1752 04AC                          l1744 0495  
                        l1760 02AE                          l1904 01DC                          l1738 0385  
                        l1834 012B                          l1826 0111                          l1818 00E2  
                        l1770 0033                          l1842 016C                          l1586 0424  
                        l1578 03FF                          l1594 0447                          l1754 04B1  
                        l1746 049A                          l1762 02B6                          l1836 015B  
                        l1828 0117                          l1844 017E                          l1780 004B  
                        l1772 0038                          l1764 0021                          l1860 0260  
                        l1596 0458                          l1588 0435                          l1748 049F  
                        l1756 028D                          l1782 005C                          l1774 0039  
                        l1766 0026                          l1862 0266                          l1854 0242  
                        l1758 0292                          l1870 052F                          l1598 0469  
                        l1792 007D                          l1784 0067                          l1776 0045  
                        l1768 002C                          l1864 054B                          l1856 0248  
                        l1960 0226                          l1880 0191                          l1872 0183  
                        l1794 009C                          l1962 0091                          l1786 006B  
                        l1778 0049                          l1866 0513                          l1858 0251  
                        l1890 01B1                          l1882 0196                          l1874 0188  
                        l1796 00A4                          l1788 007C                          l1868 0527  
                        l1892 01B6                          l1884 019E                          l1876 018B  
                        l1798 00A8                          l1894 01BF                          l1886 01A7  
                        l1878 018C                          l1896 01C3                          l1888 01AC  
                        l1898 01C8                          STR_1 03AA                          STR_2 03BB  
                        STR_3 03C4                          u1000 0111                          u1001 0110  
                        u1010 011F                          u1011 011E                          u1020 016C  
                        u1021 016B                          u1005 010D                          u1030 017E  
                        u1031 017D                          u1107 03F7                          u1117 0406  
                        u1127 041F                          u1047 04F7                          u1137 042D  
                        u1057 043C                          u1147 024C                          u1067 0453  
                        u1157 025B                          u1077 0461                          u1167 026A  
                        u1087 03D0                          u1177 04C9                          u1097 03E9  
                        _RCIF 0065                          i1l93 0584                          _TRMT 04C1  
                        _data 0036             ?_Lcd_Write_String 0075               __end_of_SPI_ADC 0435  
                        _cont 0035                          _main 0183                          btemp 007E  
                        start 000C            ??_Lcd_Write_String 0077               __end_of_Lcd_Cmd 04D2  
           ___bmul@multiplier 0075                         ??_ISR 0070                         ?_main 0070  
                       _ANSEL 0188               __end_of___lwdiv 0317               __end_of___lwmod 0390  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009       __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085  
                       _TRISB 0086                         _TRISD 0088                         _TRISE 0089  
                       _TXREG 0019               __end_of_dpowers 03AA               __end_of_initOsc 0242  
            __end_of_SPI_CONT 03FF               __end_of_isdigit 054B              __end_of_SPI_TEMP 0469  
                       _setup 0317                         pclath 000A               __end_of_spiInit 04E8  
             __end_of_spiRead 056D                         status 0003                         wtemp0 007E  
             __end_of_sprintf 0183                   ?_USART_Init 0070              __end_of_Lcd_Init 028D  
            __end_of_Lcd_Port 059D               __initialization 000F                  __end_of_main 01E6  
                      ??_main 007A            __size_of_Lcd_Clear 000D                     ??_SPI_ADC 0073  
                 initOsc@IRCF 0074           _USART_Init_BaudRate 058B                        ?_setup 0070  
                      _ANSELH 0189                     ??_Lcd_Cmd 0073                        _SPBRGH 009A  
     __size_of_Lcd_Write_Char 0016                        _TRISC0 0438                        _TRISC1 0439  
                      _TRISC2 043A                        _TRISC3 043B                        _TRISC5 043D  
                      _SSPCON 0014                        _SSPBUF 0013                        ___bmul 04FE  
        ?_USART_Init_BaudRate 0070                     ??___lwdiv 0076                     ??___lwmod 0042  
                   ??_initOsc 0072                     ??_isdigit 0072                        saved_w 007E  
            __end_of_spiWrite 0597                     ??_spiInit 0075                     ??_spiRead 0072  
         __size_of_USART_Init 0008                     ??_sprintf 0047               Lcd_Set_Cursor@a 0078  
             Lcd_Set_Cursor@b 0076       __end_of__initialization 001A             __end_of_Lcd_Clear 0558  
         ___bmul@multiplicand 0072                __pcstackCOMMON 0070         ??_USART_Init_BaudRate 0072  
                   ?_SPI_CONT 0070                 __end_of_setup 0354                     ?_SPI_TEMP 0070  
              _Lcd_Set_Cursor 0494                     ?_Lcd_Init 0070                     ?_Lcd_Port 0070  
                     ??_setup 0076                  Write_USART@a 0072                    __pbssBANK0 0020  
                  _data_total 0020                    __pmaintext 0183                       ?___bmul 0072  
               ??_Write_USART 0072                    __pintentry 0004       __size_of_spiReceiveWait 0007  
                  ??_SPI_CONT 0073                    ??_SPI_TEMP 0073     __size_of_Lcd_Write_String 0046  
      __end_of_Lcd_Set_Cursor 04B8        __size_of_ADC_to_string 0014    __end_of_Write_USART_String 0494  
                  ??_Lcd_Init 0076                    ??_Lcd_Port 0072                       _SPI_ADC 03FF  
                     _SSPSTAT 0094                    __stringtab 0390                _Lcd_Write_Char 04E8  
                     _Lcd_Cmd 04B8                  ??_USART_Init 0072                     ?_spiWrite 0070  
             __size_of___bmul 0015                 ?_Show_val_LCD 0070                       ___lwdiv 02D3  
                     ___lwmod 0354               ?_Lcd_Set_Cursor 0076                       __ptext1 0317  
                     __ptext2 04D2                       __ptext3 01E6                       __ptext4 058B  
                     __ptext5 0575                       __ptext6 0469                       __ptext7 0558  
                     __ptext8 0527                       __ptext9 028D                  __size_of_ISR 0007  
                     _dpowers 03A0                       _initOsc 01E6           __end_of_Write_USART 0564  
                     _isdigit 0539                       _val_ADC 0034                       _spiInit 04D2  
                     _spiRead 0564            __end_of_USART_Init 057D                       _sprintf 001E  
                     clrloop0 056E        __end_of_Lcd_Write_Char 04FE          end_of_initialization 001A  
               _ADC_to_string 0513                ??_Show_val_LCD 007A                     _RCSTAbits 0018  
                  ??_spiWrite 0072                     Lcd_Port@a 0072                     _PORTCbits 0007  
                   _PORTEbits 0009                   spiWrite@dat 0072               ?_Lcd_Write_Char 0070  
           Lcd_Write_String@a 0075             Lcd_Write_String@i 003E                ?_ADC_to_string 0070  
                   _TXSTAbits 0098                     _Lcd_Clear 054B                _spiReceiveWait 057D  
              __end_of___bmul 0513                   _Write_USART 0558              _Lcd_Write_String 028D  
           __size_of_SPI_CONT 0036             __size_of_SPI_TEMP 0034           start_initialization 000F  
                 __end_of_ISR 058B             __size_of_Lcd_Init 004B                  _hola_esclavo 007B  
           __size_of_Lcd_Port 0006   __end_of_USART_Init_BaudRate 0591        __end_of_spiReceiveWait 0584  
                  ?_Lcd_Clear 0070                      ??___bmul 0073               Lcd_Write_Char@a 0074  
                 __pbssCOMMON 007A                     ___latbits 0002                 __pcstackBANK0 003E  
                    ?_SPI_ADC 0070          __end_of_Show_val_LCD 0539               ??_ADC_to_string 0051  
                    ?_Lcd_Cmd 0070                   sprintf@flag 004B            _Write_USART_String 0469  
                 sprintf@prec 004F              ___lwdiv@dividend 0074               ?_spiReceiveWait 0070  
            ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0073                      ?___lwdiv 0072  
                    ?___lwmod 003E             __size_of_spiWrite 0006                     __pstrings 0390  
                    ?_initOsc 0070                      ?_isdigit 0070                      ?_spiInit 0072  
                    ?_spiRead 0070          ??_Write_USART_String 0075              ___lwdiv@quotient 0077  
                    ?_sprintf 0044                __size_of_setup 003D          spiInit@sTransmitEdge 0074  
           interrupt_function 0004                     clear_ram0 056D                      _PIE1bits 008C  
          spiInit@sDataSample 0072                      Lcd_Cmd@a 0075                   ??_Lcd_Clear 0076  
                    _SPI_CONT 03C9                      _SPI_TEMP 0435                   __stringbase 039F  
            ??_Lcd_Write_Char 0073                      _Lcd_Init 0242                      _Lcd_Port 0597  
            __size_of_SPI_ADC 0036      __end_of_Lcd_Write_String 02D3              __size_of_Lcd_Cmd 001A  
                ?_Write_USART 0070              __size_of___lwdiv 0044              __size_of___lwmod 003C  
          __end_of__stringtab 03A0                   _isdigit$977 0072         __size_of_Show_val_LCD 0012  
                  sprintf@val 004D              __size_of_initOsc 005C              __size_of_isdigit 0012  
             ___lwdiv@divisor 0072               ___lwdiv@counter 0079                      __ptext10 04E8  
                    __ptext11 0494                      __ptext20 04B8                      __ptext12 0435  
                    __ptext21 0597                      __ptext13 03C9                      __ptext22 0513  
                    __ptext14 03FF                      __ptext23 001E                      __ptext15 0591  
                    __ptext24 0539                      __ptext16 0564                      __ptext25 0354  
                    __ptext17 057D                      __ptext26 02D3                      __ptext18 0242  
                    __ptext27 04FE                      __ptext19 054B                      __ptext28 0584  
            __size_of_spiInit 0016              __size_of_spiRead 0009              __size_of_sprintf 0165  
               __size_of_main 0063                      _val_TEMP 007A                      _spiWrite 0591  
                _Show_val_LCD 0527                  spiInit@sType 0075             spiInit@sClockIdle 0073  
                  _INTCONbits 000B           Write_USART_String@a 0073           Write_USART_String@i 0076  
                    isdigit@c 0073                      intlevel1 0000                     sprintf@ap 004A  
                   sprintf@sp 004C              ___lwmod@dividend 0040              ??_spiReceiveWait 0072  
                   stringcode 039A                    _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006  
          Lcd_Set_Cursor@temp 0079                      sprintf@c 0050                      sprintf@f 0044  
             ___lwmod@divisor 003E               ___lwmod@counter 0043                      stringdir 039A  
                    stringtab 0390         __end_of_ADC_to_string 0527                    _USART_Init 0575  
