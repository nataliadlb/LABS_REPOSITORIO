

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 11:42:20 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text23,local,class=CODE,merge=1,delta=2,group=3
    35                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F887 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0088                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  000E                     	;# 
   171  000F                     	;# 
   172  0010                     	;# 
   173  0011                     	;# 
   174  0012                     	;# 
   175  0013                     	;# 
   176  0014                     	;# 
   177  0015                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  001D                     	;# 
   188  001E                     	;# 
   189  001F                     	;# 
   190  0081                     	;# 
   191  0085                     	;# 
   192  0086                     	;# 
   193  0087                     	;# 
   194  0088                     	;# 
   195  0089                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  008F                     	;# 
   200  0090                     	;# 
   201  0091                     	;# 
   202  0092                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0098                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  0105                     	;# 
   219  0107                     	;# 
   220  0108                     	;# 
   221  0109                     	;# 
   222  010C                     	;# 
   223  010C                     	;# 
   224  010D                     	;# 
   225  010E                     	;# 
   226  010F                     	;# 
   227  0185                     	;# 
   228  0187                     	;# 
   229  0188                     	;# 
   230  0189                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  0008                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  000E                     	;# 
   249  000F                     	;# 
   250  0010                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0014                     	;# 
   255  0015                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001D                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  0081                     	;# 
   269  0085                     	;# 
   270  0086                     	;# 
   271  0087                     	;# 
   272  0088                     	;# 
   273  0089                     	;# 
   274  008C                     	;# 
   275  008D                     	;# 
   276  008E                     	;# 
   277  008F                     	;# 
   278  0090                     	;# 
   279  0091                     	;# 
   280  0092                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0095                     	;# 
   286  0096                     	;# 
   287  0097                     	;# 
   288  0098                     	;# 
   289  0099                     	;# 
   290  009A                     	;# 
   291  009B                     	;# 
   292  009C                     	;# 
   293  009D                     	;# 
   294  009E                     	;# 
   295  009F                     	;# 
   296  0105                     	;# 
   297  0107                     	;# 
   298  0108                     	;# 
   299  0109                     	;# 
   300  010C                     	;# 
   301  010C                     	;# 
   302  010D                     	;# 
   303  010E                     	;# 
   304  010F                     	;# 
   305  0185                     	;# 
   306  0187                     	;# 
   307  0188                     	;# 
   308  0189                     	;# 
   309  018C                     	;# 
   310  018D                     	;# 
   311  0000                     	;# 
   312  0001                     	;# 
   313  0002                     	;# 
   314  0003                     	;# 
   315  0004                     	;# 
   316  0005                     	;# 
   317  0006                     	;# 
   318  0007                     	;# 
   319  0008                     	;# 
   320  0009                     	;# 
   321  000A                     	;# 
   322  000B                     	;# 
   323  000C                     	;# 
   324  000D                     	;# 
   325  000E                     	;# 
   326  000E                     	;# 
   327  000F                     	;# 
   328  0010                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0013                     	;# 
   332  0014                     	;# 
   333  0015                     	;# 
   334  0015                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001B                     	;# 
   342  001C                     	;# 
   343  001D                     	;# 
   344  001E                     	;# 
   345  001F                     	;# 
   346  0081                     	;# 
   347  0085                     	;# 
   348  0086                     	;# 
   349  0087                     	;# 
   350  0088                     	;# 
   351  0089                     	;# 
   352  008C                     	;# 
   353  008D                     	;# 
   354  008E                     	;# 
   355  008F                     	;# 
   356  0090                     	;# 
   357  0091                     	;# 
   358  0092                     	;# 
   359  0093                     	;# 
   360  0093                     	;# 
   361  0093                     	;# 
   362  0094                     	;# 
   363  0095                     	;# 
   364  0096                     	;# 
   365  0097                     	;# 
   366  0098                     	;# 
   367  0099                     	;# 
   368  009A                     	;# 
   369  009B                     	;# 
   370  009C                     	;# 
   371  009D                     	;# 
   372  009E                     	;# 
   373  009F                     	;# 
   374  0105                     	;# 
   375  0107                     	;# 
   376  0108                     	;# 
   377  0109                     	;# 
   378  010C                     	;# 
   379  010C                     	;# 
   380  010D                     	;# 
   381  010E                     	;# 
   382  010F                     	;# 
   383  0185                     	;# 
   384  0187                     	;# 
   385  0188                     	;# 
   386  0189                     	;# 
   387  018C                     	;# 
   388  018D                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  000E                     	;# 
   405  000F                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0013                     	;# 
   410  0014                     	;# 
   411  0015                     	;# 
   412  0015                     	;# 
   413  0016                     	;# 
   414  0017                     	;# 
   415  0018                     	;# 
   416  0019                     	;# 
   417  001A                     	;# 
   418  001B                     	;# 
   419  001B                     	;# 
   420  001C                     	;# 
   421  001D                     	;# 
   422  001E                     	;# 
   423  001F                     	;# 
   424  0081                     	;# 
   425  0085                     	;# 
   426  0086                     	;# 
   427  0087                     	;# 
   428  0088                     	;# 
   429  0089                     	;# 
   430  008C                     	;# 
   431  008D                     	;# 
   432  008E                     	;# 
   433  008F                     	;# 
   434  0090                     	;# 
   435  0091                     	;# 
   436  0092                     	;# 
   437  0093                     	;# 
   438  0093                     	;# 
   439  0093                     	;# 
   440  0094                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009C                     	;# 
   449  009D                     	;# 
   450  009E                     	;# 
   451  009F                     	;# 
   452  0105                     	;# 
   453  0107                     	;# 
   454  0108                     	;# 
   455  0109                     	;# 
   456  010C                     	;# 
   457  010C                     	;# 
   458  010D                     	;# 
   459  010E                     	;# 
   460  010F                     	;# 
   461  0185                     	;# 
   462  0187                     	;# 
   463  0188                     	;# 
   464  0189                     	;# 
   465  018C                     	;# 
   466  018D                     	;# 
   467  0000                     	;# 
   468  0001                     	;# 
   469  0002                     	;# 
   470  0003                     	;# 
   471  0004                     	;# 
   472  0005                     	;# 
   473  0006                     	;# 
   474  0007                     	;# 
   475  0008                     	;# 
   476  0009                     	;# 
   477  000A                     	;# 
   478  000B                     	;# 
   479  000C                     	;# 
   480  000D                     	;# 
   481  000E                     	;# 
   482  000E                     	;# 
   483  000F                     	;# 
   484  0010                     	;# 
   485  0011                     	;# 
   486  0012                     	;# 
   487  0013                     	;# 
   488  0014                     	;# 
   489  0015                     	;# 
   490  0015                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001B                     	;# 
   498  001C                     	;# 
   499  001D                     	;# 
   500  001E                     	;# 
   501  001F                     	;# 
   502  0081                     	;# 
   503  0085                     	;# 
   504  0086                     	;# 
   505  0087                     	;# 
   506  0088                     	;# 
   507  0089                     	;# 
   508  008C                     	;# 
   509  008D                     	;# 
   510  008E                     	;# 
   511  008F                     	;# 
   512  0090                     	;# 
   513  0091                     	;# 
   514  0092                     	;# 
   515  0093                     	;# 
   516  0093                     	;# 
   517  0093                     	;# 
   518  0094                     	;# 
   519  0095                     	;# 
   520  0096                     	;# 
   521  0097                     	;# 
   522  0098                     	;# 
   523  0099                     	;# 
   524  009A                     	;# 
   525  009B                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  009F                     	;# 
   530  0105                     	;# 
   531  0107                     	;# 
   532  0108                     	;# 
   533  0109                     	;# 
   534  010C                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  010F                     	;# 
   539  0185                     	;# 
   540  0187                     	;# 
   541  0188                     	;# 
   542  0189                     	;# 
   543  018C                     	;# 
   544  018D                     	;# 
   545                           
   546                           	psect	strings
   547  038B                     __pstrings:
   548  038B                     stringtab:
   549  038B                     __stringtab:
   550                           
   551                           ;	String table - string pointers are 1 byte each
   552  038B  1BFF               	btfsc	btemp+1,7
   553  038C  2B95               	ljmp	stringcode
   554  038D  1383               	bcf	3,7
   555  038E  187F               	btfsc	btemp+1,0
   556  038F  1783               	bsf	3,7
   557  0390  0800               	movf	0,w
   558  0391  0A84               	incf	4,f
   559  0392  1903               	skipnz
   560  0393  0AFF               	incf	btemp+1,f
   561  0394  0008               	return
   562  0395                     stringcode:
   563  0395                     stringdir:
   564  0395  3003               	movlw	high stringdir
   565  0396  008A               	movwf	10
   566  0397  0804               	movf	4,w
   567  0398  0A84               	incf	4,f
   568  0399  0782               	addwf	2,f
   569  039A                     __stringbase:
   570  039A  3400               	retlw	0
   571  039B                     __end_of__stringtab:
   572  039B                     _dpowers:
   573  039B  3401               	retlw	1
   574  039C  3400               	retlw	0
   575  039D  340A               	retlw	10
   576  039E  3400               	retlw	0
   577  039F  3464               	retlw	100
   578  03A0  3400               	retlw	0
   579  03A1  34E8               	retlw	232
   580  03A2  3403               	retlw	3
   581  03A3  3410               	retlw	16
   582  03A4  3427               	retlw	39
   583  03A5                     __end_of_dpowers:
   584  0013                     _SSPBUF	set	19
   585  0014                     _SSPCON	set	20
   586  001A                     _RCREG	set	26
   587  0019                     _TXREG	set	25
   588  000B                     _INTCONbits	set	11
   589  0018                     _RCSTAbits	set	24
   590  0009                     _PORTEbits	set	9
   591  0007                     _PORTCbits	set	7
   592  0009                     _PORTE	set	9
   593  0008                     _PORTD	set	8
   594  0007                     _PORTC	set	7
   595  0005                     _PORTA	set	5
   596  0006                     _PORTB	set	6
   597  0065                     _RCIF	set	101
   598  0039                     _RC1	set	57
   599  0038                     _RC0	set	56
   600  003A                     _RC2	set	58
   601  0094                     _SSPSTATbits	set	148
   602  0094                     _SSPSTAT	set	148
   603  008C                     _PIE1bits	set	140
   604  0099                     _SPBRG	set	153
   605  009A                     _SPBRGH	set	154
   606  0098                     _TXSTAbits	set	152
   607  008F                     _OSCCONbits	set	143
   608  0089                     _TRISE	set	137
   609  0088                     _TRISD	set	136
   610  0086                     _TRISB	set	134
   611  0085                     _TRISA	set	133
   612  043B                     _TRISC3	set	1083
   613  043D                     _TRISC5	set	1085
   614  04C1                     _TRMT	set	1217
   615  043A                     _TRISC2	set	1082
   616  0439                     _TRISC1	set	1081
   617  0438                     _TRISC0	set	1080
   618  0189                     _ANSELH	set	393
   619  0188                     _ANSEL	set	392
   620  03A5                     STR_1:
   621  03A5  3463               	retlw	99	;'c'
   622  03A6  346F               	retlw	111	;'o'
   623  03A7  346E               	retlw	110	;'n'
   624  03A8  3474               	retlw	116	;'t'
   625  03A9  3420               	retlw	32	;' '
   626  03AA  3420               	retlw	32	;' '
   627  03AB  3420               	retlw	32	;' '
   628  03AC  3453               	retlw	83	;'S'
   629  03AD  3432               	retlw	50	;'2'
   630  03AE  343A               	retlw	58	;':'
   631  03AF  3420               	retlw	32	;' '
   632  03B0  3420               	retlw	32	;' '
   633  03B1  3420               	retlw	32	;' '
   634  03B2  3453               	retlw	83	;'S'
   635  03B3  3433               	retlw	51	;'3'
   636  03B4  343A               	retlw	58	;':'
   637  03B5  3400               	retlw	0
   638  03B6                     STR_2:
   639  03B6  3463               	retlw	99	;'c'
   640  03B7  346F               	retlw	111	;'o'
   641  03B8  346E               	retlw	110	;'n'
   642  03B9  3474               	retlw	116	;'t'
   643  03BA  343A               	retlw	58	;':'
   644  03BB  3420               	retlw	32	;' '
   645  03BC  3420               	retlw	32	;' '
   646  03BD  340A               	retlw	10
   647  03BE  3400               	retlw	0
   648  03BF                     STR_3:
   649  03BF  3425               	retlw	37	;'%'
   650  03C0  342E               	retlw	46	;'.'
   651  03C1  3433               	retlw	51	;'3'
   652  03C2  3469               	retlw	105	;'i'
   653  03C3  3400               	retlw	0
   654                           
   655                           	psect	cinit
   656  000F                     start_initialization:	
   657                           ; #config settings
   658                           
   659  000F                     __initialization:
   660                           
   661                           ; Clear objects allocated to COMMON
   662  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   663  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   664                           
   665                           ; Clear objects allocated to BANK0
   666  0011  1383               	bcf	3,7	;select IRP bank0
   667  0012  3020               	movlw	low __pbssBANK0
   668  0013  0084               	movwf	4
   669  0014  303E               	movlw	low (__pbssBANK0+30)
   670  0015  120A  118A  2532  120A  118A  	fcall	clear_ram0
   671  001A                     end_of_initialization:	
   672                           ;End of C runtime variable initialization code
   673                           
   674  001A                     __end_of__initialization:
   675  001A  0183               	clrf	3
   676  001B  120A  118A  2983   	ljmp	_main	;jump to C main() function
   677                           
   678                           	psect	bssCOMMON
   679  007A                     __pbssCOMMON:
   680  007A                     _val_ADC:
   681  007A                     	ds	1
   682  007B                     _hola_esclavo:
   683  007B                     	ds	1
   684                           
   685                           	psect	bssBANK0
   686  0020                     __pbssBANK0:
   687  0020                     _data_total:
   688  0020                     	ds	20
   689  0034                     _val_TEMP:
   690  0034                     	ds	1
   691  0035                     _cont:
   692  0035                     	ds	1
   693  0036                     _data:
   694  0036                     	ds	8
   695                           
   696                           	psect	clrtext
   697  0532                     clear_ram0:	
   698                           ;	Called with FSR containing the base address, and
   699                           ;	W with the last address+1
   700                           
   701  0532  0064               	clrwdt	;clear the watchdog before getting into this loop
   702  0533                     clrloop0:
   703  0533  0180               	clrf	0	;clear RAM location pointed to by FSR
   704  0534  0A84               	incf	4,f	;increment pointer
   705  0535  0604               	xorwf	4,w	;XOR with final address
   706  0536  1903               	btfsc	3,2	;have we reached the end yet?
   707  0537  3400               	retlw	0	;all done for this memory range, return
   708  0538  0604               	xorwf	4,w	;XOR again to restore value
   709  0539  2D33               	goto	clrloop0	;do the next byte
   710                           
   711                           	psect	cstackCOMMON
   712  0070                     __pcstackCOMMON:
   713  0070                     ?_isdigit:
   714  0070                     ?_setup:	
   715                           ; 1 bit 
   716                           
   717  0070                     ?_Lcd_Init:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_Lcd_Clear:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_SPI_CONT:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?_SPI_ADC:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?_ADC_to_string:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ?_Show_val_LCD:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ?_Write_USART:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?_initOsc:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ?_USART_Init_BaudRate:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ?_USART_Init:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0070                     ?_spiWrite:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0070                     ?_spiRead:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0070                     ?_Lcd_Port:	
   754                           ; 1 bytes @ 0x0
   755                           
   756  0070                     ?_Lcd_Cmd:	
   757                           ; 1 bytes @ 0x0
   758                           
   759  0070                     ?_ISR:	
   760                           ; 1 bytes @ 0x0
   761                           
   762  0070                     ??_ISR:	
   763                           ; 1 bytes @ 0x0
   764                           
   765  0070                     ?_main:	
   766                           ; 1 bytes @ 0x0
   767                           
   768  0070                     ?_Lcd_Write_Char:	
   769                           ; 1 bytes @ 0x0
   770                           
   771  0070                     ?_spiReceiveWait:	
   772                           ; 1 bytes @ 0x0
   773                           
   774                           
   775                           ; 1 bytes @ 0x0
   776  0070                     	ds	2
   777  0072                     ??_Write_USART:
   778  0072                     ??_initOsc:	
   779                           ; 1 bytes @ 0x2
   780                           
   781  0072                     ??_USART_Init_BaudRate:	
   782                           ; 1 bytes @ 0x2
   783                           
   784  0072                     ??_USART_Init:	
   785                           ; 1 bytes @ 0x2
   786                           
   787  0072                     ?_spiInit:	
   788                           ; 1 bytes @ 0x2
   789                           
   790  0072                     ??_spiWrite:	
   791                           ; 1 bytes @ 0x2
   792                           
   793  0072                     ??_spiRead:	
   794                           ; 1 bytes @ 0x2
   795                           
   796  0072                     ??_Lcd_Port:	
   797                           ; 1 bytes @ 0x2
   798                           
   799  0072                     ??_isdigit:	
   800                           ; 1 bytes @ 0x2
   801                           
   802  0072                     ??_spiReceiveWait:	
   803                           ; 1 bytes @ 0x2
   804                           
   805  0072                     ?___bmul:	
   806                           ; 1 bytes @ 0x2
   807                           
   808  0072                     ?___lwdiv:	
   809                           ; 1 bytes @ 0x2
   810                           
   811  0072                     Lcd_Port@a:	
   812                           ; 2 bytes @ 0x2
   813                           
   814  0072                     Write_USART@a:	
   815                           ; 1 bytes @ 0x2
   816                           
   817  0072                     spiInit@sDataSample:	
   818                           ; 1 bytes @ 0x2
   819                           
   820  0072                     spiWrite@dat:	
   821                           ; 1 bytes @ 0x2
   822                           
   823  0072                     ___bmul@multiplicand:	
   824                           ; 1 bytes @ 0x2
   825                           
   826  0072                     _isdigit$973:	
   827                           ; 1 bytes @ 0x2
   828                           
   829  0072                     ___lwdiv@divisor:	
   830                           ; 1 bytes @ 0x2
   831                           
   832                           
   833                           ; 2 bytes @ 0x2
   834  0072                     	ds	1
   835  0073                     ??_SPI_CONT:
   836  0073                     ??_SPI_ADC:	
   837                           ; 1 bytes @ 0x3
   838                           
   839  0073                     ?_Write_USART_String:	
   840                           ; 1 bytes @ 0x3
   841                           
   842  0073                     ??_Lcd_Cmd:	
   843                           ; 1 bytes @ 0x3
   844                           
   845  0073                     ??_Lcd_Write_Char:	
   846                           ; 1 bytes @ 0x3
   847                           
   848  0073                     ??___bmul:	
   849                           ; 1 bytes @ 0x3
   850                           
   851  0073                     spiInit@sClockIdle:	
   852                           ; 1 bytes @ 0x3
   853                           
   854  0073                     isdigit@c:	
   855                           ; 1 bytes @ 0x3
   856                           
   857  0073                     Write_USART_String@a:	
   858                           ; 1 bytes @ 0x3
   859                           
   860                           
   861                           ; 2 bytes @ 0x3
   862  0073                     	ds	1
   863  0074                     initOsc@IRCF:
   864  0074                     Lcd_Write_Char@a:	
   865                           ; 1 bytes @ 0x4
   866                           
   867  0074                     spiInit@sTransmitEdge:	
   868                           ; 1 bytes @ 0x4
   869                           
   870  0074                     ___bmul@product:	
   871                           ; 1 bytes @ 0x4
   872                           
   873  0074                     ___lwdiv@dividend:	
   874                           ; 1 bytes @ 0x4
   875                           
   876                           
   877                           ; 2 bytes @ 0x4
   878  0074                     	ds	1
   879  0075                     ?_Lcd_Write_String:
   880  0075                     ??_Write_USART_String:	
   881                           ; 1 bytes @ 0x5
   882                           
   883  0075                     ??_spiInit:	
   884                           ; 1 bytes @ 0x5
   885                           
   886  0075                     Lcd_Cmd@a:	
   887                           ; 1 bytes @ 0x5
   888                           
   889  0075                     spiInit@sType:	
   890                           ; 1 bytes @ 0x5
   891                           
   892  0075                     ___bmul@multiplier:	
   893                           ; 1 bytes @ 0x5
   894                           
   895  0075                     Lcd_Write_String@a:	
   896                           ; 1 bytes @ 0x5
   897                           
   898                           
   899                           ; 2 bytes @ 0x5
   900  0075                     	ds	1
   901  0076                     ??_setup:
   902  0076                     ??_Lcd_Init:	
   903                           ; 1 bytes @ 0x6
   904                           
   905  0076                     ??_Lcd_Clear:	
   906                           ; 1 bytes @ 0x6
   907                           
   908  0076                     ?_Lcd_Set_Cursor:	
   909                           ; 1 bytes @ 0x6
   910                           
   911  0076                     ??___lwdiv:	
   912                           ; 1 bytes @ 0x6
   913                           
   914  0076                     Lcd_Set_Cursor@b:	
   915                           ; 1 bytes @ 0x6
   916                           
   917  0076                     Write_USART_String@i:	
   918                           ; 1 bytes @ 0x6
   919                           
   920                           
   921                           ; 1 bytes @ 0x6
   922  0076                     	ds	1
   923  0077                     ??_Lcd_Set_Cursor:
   924  0077                     ??_Lcd_Write_String:	
   925                           ; 1 bytes @ 0x7
   926                           
   927  0077                     ___lwdiv@quotient:	
   928                           ; 1 bytes @ 0x7
   929                           
   930                           
   931                           ; 2 bytes @ 0x7
   932  0077                     	ds	1
   933  0078                     Lcd_Set_Cursor@a:
   934                           
   935                           ; 1 bytes @ 0x8
   936  0078                     	ds	1
   937  0079                     Lcd_Set_Cursor@temp:
   938  0079                     ___lwdiv@counter:	
   939                           ; 1 bytes @ 0x9
   940                           
   941                           
   942                           ; 1 bytes @ 0x9
   943  0079                     	ds	1
   944  007A                     ??_Show_val_LCD:
   945  007A                     ??_main:	
   946                           ; 1 bytes @ 0xA
   947                           
   948                           
   949                           	psect	cstackBANK0
   950  003E                     __pcstackBANK0:	
   951                           ; 1 bytes @ 0xA
   952                           
   953  003E                     ?___lwmod:
   954  003E                     Lcd_Write_String@i:	
   955                           ; 2 bytes @ 0x0
   956                           
   957  003E                     ___lwmod@divisor:	
   958                           ; 2 bytes @ 0x0
   959                           
   960                           
   961                           ; 2 bytes @ 0x0
   962  003E                     	ds	2
   963  0040                     ___lwmod@dividend:
   964                           
   965                           ; 2 bytes @ 0x2
   966  0040                     	ds	2
   967  0042                     ??___lwmod:
   968                           
   969                           ; 1 bytes @ 0x4
   970  0042                     	ds	1
   971  0043                     ___lwmod@counter:
   972                           
   973                           ; 1 bytes @ 0x5
   974  0043                     	ds	1
   975  0044                     ?_sprintf:
   976  0044                     sprintf@f:	
   977                           ; 2 bytes @ 0x6
   978                           
   979                           
   980                           ; 1 bytes @ 0x6
   981  0044                     	ds	3
   982  0047                     ??_sprintf:
   983                           
   984                           ; 1 bytes @ 0x9
   985  0047                     	ds	3
   986  004A                     sprintf@ap:
   987                           
   988                           ; 1 bytes @ 0xC
   989  004A                     	ds	1
   990  004B                     sprintf@flag:
   991                           
   992                           ; 1 bytes @ 0xD
   993  004B                     	ds	1
   994  004C                     sprintf@sp:
   995                           
   996                           ; 1 bytes @ 0xE
   997  004C                     	ds	1
   998  004D                     sprintf@val:
   999                           
  1000                           ; 2 bytes @ 0xF
  1001  004D                     	ds	2
  1002  004F                     sprintf@prec:
  1003                           
  1004                           ; 1 bytes @ 0x11
  1005  004F                     	ds	1
  1006  0050                     sprintf@c:
  1007                           
  1008                           ; 1 bytes @ 0x12
  1009  0050                     	ds	1
  1010  0051                     ??_ADC_to_string:
  1011                           
  1012                           ; 1 bytes @ 0x13
  1013  0051                     	ds	3
  1014                           
  1015                           	psect	maintext
  1016  0183                     __pmaintext:	
  1017 ;;
  1018 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1019 ;;
  1020 ;; *************** function _main *****************
  1021 ;; Defined at:
  1022 ;;		line 89 in file "main_maestro.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;		None
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1031 ;; Tracked objects:
  1032 ;;		On entry : B00/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1036 ;;      Params:         0       0       0       0       0
  1037 ;;      Locals:         0       0       0       0       0
  1038 ;;      Temps:          0       0       0       0       0
  1039 ;;      Totals:         0       0       0       0       0
  1040 ;;Total ram usage:        0 bytes
  1041 ;; Hardware stack levels required when called:    5
  1042 ;; This function calls:
  1043 ;;		_ADC_to_string
  1044 ;;		_Lcd_Clear
  1045 ;;		_Lcd_Init
  1046 ;;		_Lcd_Set_Cursor
  1047 ;;		_Lcd_Write_String
  1048 ;;		_SPI_ADC
  1049 ;;		_SPI_CONT
  1050 ;;		_Show_val_LCD
  1051 ;;		_Write_USART
  1052 ;;		_Write_USART_String
  1053 ;;		_setup
  1054 ;; This function is called by:
  1055 ;;		Startup code after reset
  1056 ;; This function uses a non-reentrant model
  1057 ;;
  1058                           
  1059                           
  1060                           ;psect for function _main
  1061  0183                     _main:
  1062  0183                     l1866:	
  1063                           ;incstack = 0
  1064                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1065                           
  1066                           
  1067                           ;main_maestro.c: 90:     setup();
  1068  0183  120A  118A  2312  120A  118A  	fcall	_setup
  1069  0188                     l1868:
  1070                           
  1071                           ;main_maestro.c: 91:     PORTB = 0;
  1072  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1073  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1074  018A  0186               	clrf	6	;volatile
  1075  018B                     l1870:
  1076                           
  1077                           ;main_maestro.c: 92:     cont = 0;
  1078  018B  01B5               	clrf	_cont
  1079  018C                     l1872:
  1080                           
  1081                           ;main_maestro.c: 94:     Lcd_Init();
  1082  018C  120A  118A  223D  120A  118A  	fcall	_Lcd_Init
  1083  0191                     l1874:
  1084                           
  1085                           ;main_maestro.c: 95:     Lcd_Clear();
  1086  0191  120A  118A  2510  120A  118A  	fcall	_Lcd_Clear
  1087  0196                     l1876:
  1088                           
  1089                           ;main_maestro.c: 96:     Lcd_Set_Cursor(1,1);
  1090  0196  01F6               	clrf	Lcd_Set_Cursor@b
  1091  0197  0AF6               	incf	Lcd_Set_Cursor@b,f
  1092  0198  3001               	movlw	1
  1093  0199  120A  118A  2459  120A  118A  	fcall	_Lcd_Set_Cursor
  1094  019E                     l1878:
  1095                           
  1096                           ;main_maestro.c: 97:     Lcd_Write_String("cont   S2:   S3:");
  1097  019E  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1098  019F  00F5               	movwf	Lcd_Write_String@a
  1099  01A0  3080               	movlw	128
  1100  01A1  00F6               	movwf	Lcd_Write_String@a+1
  1101  01A2  120A  118A  2288  120A  118A  	fcall	_Lcd_Write_String
  1102  01A7                     l1880:
  1103                           
  1104                           ;main_maestro.c: 104:         SPI_CONT();
  1105  01A7  120A  118A  23C4  120A  118A  	fcall	_SPI_CONT
  1106  01AC                     l1882:
  1107                           
  1108                           ;main_maestro.c: 105:         SPI_ADC();
  1109  01AC  120A  118A  23FA  120A  118A  	fcall	_SPI_ADC
  1110  01B1                     l1884:
  1111                           
  1112                           ;main_maestro.c: 108:         Write_USART_String("cont:  \n");
  1113  01B1  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1114  01B2  00F3               	movwf	Write_USART_String@a
  1115  01B3  3080               	movlw	128
  1116  01B4  00F4               	movwf	Write_USART_String@a+1
  1117  01B5  120A  118A  242E  120A  118A  	fcall	_Write_USART_String
  1118  01BA                     l1886:
  1119                           
  1120                           ;main_maestro.c: 109:         PORTB = val_ADC;
  1121  01BA  087A               	movf	_val_ADC,w
  1122  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1123  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1124  01BD  0086               	movwf	6	;volatile
  1125  01BE                     l1888:
  1126                           
  1127                           ;main_maestro.c: 110:         ADC_to_string();
  1128  01BE  120A  118A  24D8  120A  118A  	fcall	_ADC_to_string
  1129  01C3                     l1890:
  1130                           
  1131                           ;main_maestro.c: 111:         Show_val_LCD();
  1132  01C3  120A  118A  24EC  120A  118A  	fcall	_Show_val_LCD
  1133  01C8                     l1892:
  1134                           
  1135                           ;main_maestro.c: 112:         Write_USART_String(data);
  1136  01C8  3036               	movlw	(low (_data| 0))& (0+255)
  1137  01C9  00F3               	movwf	Write_USART_String@a
  1138  01CA  3000               	movlw	0
  1139  01CB  00F4               	movwf	Write_USART_String@a+1
  1140  01CC  120A  118A  242E  120A  118A  	fcall	_Write_USART_String
  1141  01D1                     l1894:
  1142                           
  1143                           ;main_maestro.c: 113:         Write_USART(13);
  1144  01D1  300D               	movlw	13
  1145  01D2  120A  118A  251D  120A  118A  	fcall	_Write_USART
  1146  01D7                     l1896:
  1147                           
  1148                           ;main_maestro.c: 114:         Write_USART(10);
  1149  01D7  300A               	movlw	10
  1150  01D8  120A  118A  251D  120A  118A  	fcall	_Write_USART
  1151  01DD  29A7               	goto	l1880
  1152  01DE  120A  118A  280C   	ljmp	start
  1153  01E1                     __end_of_main:
  1154                           
  1155                           	psect	text1
  1156  0312                     __ptext1:	
  1157 ;; *************** function _setup *****************
  1158 ;; Defined at:
  1159 ;;		line 126 in file "main_maestro.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1173 ;;      Params:         0       0       0       0       0
  1174 ;;      Locals:         0       0       0       0       0
  1175 ;;      Temps:          0       0       0       0       0
  1176 ;;      Totals:         0       0       0       0       0
  1177 ;;Total ram usage:        0 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    2
  1180 ;; This function calls:
  1181 ;;		_USART_Init
  1182 ;;		_USART_Init_BaudRate
  1183 ;;		_initOsc
  1184 ;;		_spiInit
  1185 ;; This function is called by:
  1186 ;;		_main
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           
  1191                           ;psect for function _setup
  1192  0312                     _setup:
  1193  0312                     l1510:	
  1194                           ;incstack = 0
  1195                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1196                           
  1197                           
  1198                           ;main_maestro.c: 127:     initOsc(0b00000111);
  1199  0312  3007               	movlw	7
  1200  0313  120A  118A  21E1  120A  118A  	fcall	_initOsc
  1201  0318                     l1512:
  1202                           
  1203                           ;main_maestro.c: 128:     ANSEL = 0;
  1204  0318  1683               	bsf	3,5	;RP0=1, select bank3
  1205  0319  1703               	bsf	3,6	;RP1=1, select bank3
  1206  031A  0188               	clrf	8	;volatile
  1207  031B                     l1514:
  1208                           
  1209                           ;main_maestro.c: 129:     ANSELH = 0;
  1210  031B  0189               	clrf	9	;volatile
  1211  031C                     l1516:
  1212                           
  1213                           ;main_maestro.c: 131:     TRISA = 0;
  1214  031C  1683               	bsf	3,5	;RP0=1, select bank1
  1215  031D  1303               	bcf	3,6	;RP1=0, select bank1
  1216  031E  0185               	clrf	5	;volatile
  1217  031F                     l1518:
  1218                           
  1219                           ;main_maestro.c: 132:     TRISB = 0;
  1220  031F  0186               	clrf	6	;volatile
  1221  0320                     l1520:
  1222                           
  1223                           ;main_maestro.c: 136:     TRISD = 0;
  1224  0320  0188               	clrf	8	;volatile
  1225  0321                     l1522:
  1226                           
  1227                           ;main_maestro.c: 137:     TRISE = 0;
  1228  0321  0189               	clrf	9	;volatile
  1229  0322                     l1524:
  1230                           
  1231                           ;main_maestro.c: 139:     PORTA = 0;
  1232  0322  1283               	bcf	3,5	;RP0=0, select bank0
  1233  0323  1303               	bcf	3,6	;RP1=0, select bank0
  1234  0324  0185               	clrf	5	;volatile
  1235  0325                     l1526:
  1236                           
  1237                           ;main_maestro.c: 140:     PORTB = 0;
  1238  0325  0186               	clrf	6	;volatile
  1239  0326                     l1528:
  1240                           
  1241                           ;main_maestro.c: 141:     PORTC = 0;
  1242  0326  0187               	clrf	7	;volatile
  1243  0327                     l1530:
  1244                           
  1245                           ;main_maestro.c: 142:     PORTD = 0;
  1246  0327  0188               	clrf	8	;volatile
  1247  0328                     l1532:
  1248                           
  1249                           ;main_maestro.c: 143:     PORTE = 0;
  1250  0328  0189               	clrf	9	;volatile
  1251  0329                     l1534:
  1252                           
  1253                           ;main_maestro.c: 146:     TRISC0 = 0;
  1254  0329  1683               	bsf	3,5	;RP0=1, select bank1
  1255  032A  1303               	bcf	3,6	;RP1=0, select bank1
  1256  032B  1007               	bcf	7,0	;volatile
  1257  032C                     l1536:
  1258                           
  1259                           ;main_maestro.c: 147:     PORTCbits.RC0 = 1;
  1260  032C  1283               	bcf	3,5	;RP0=0, select bank0
  1261  032D  1303               	bcf	3,6	;RP1=0, select bank0
  1262  032E  1407               	bsf	7,0	;volatile
  1263  032F                     l1538:
  1264                           
  1265                           ;main_maestro.c: 148:     TRISC1 = 0;
  1266  032F  1683               	bsf	3,5	;RP0=1, select bank1
  1267  0330  1303               	bcf	3,6	;RP1=0, select bank1
  1268  0331  1087               	bcf	7,1	;volatile
  1269  0332                     l1540:
  1270                           
  1271                           ;main_maestro.c: 149:     PORTCbits.RC1 = 1;
  1272  0332  1283               	bcf	3,5	;RP0=0, select bank0
  1273  0333  1303               	bcf	3,6	;RP1=0, select bank0
  1274  0334  1487               	bsf	7,1	;volatile
  1275  0335                     l1542:
  1276                           
  1277                           ;main_maestro.c: 150:     TRISC2 = 0;
  1278  0335  1683               	bsf	3,5	;RP0=1, select bank1
  1279  0336  1303               	bcf	3,6	;RP1=0, select bank1
  1280  0337  1107               	bcf	7,2	;volatile
  1281  0338                     l1544:
  1282                           
  1283                           ;main_maestro.c: 151:     PORTCbits.RC2 = 1;
  1284  0338  1283               	bcf	3,5	;RP0=0, select bank0
  1285  0339  1303               	bcf	3,6	;RP1=0, select bank0
  1286  033A  1507               	bsf	7,2	;volatile
  1287  033B                     l1546:
  1288                           
  1289                           ;main_maestro.c: 154:     USART_Init_BaudRate();
  1290  033B  120A  118A  2550  120A  118A  	fcall	_USART_Init_BaudRate
  1291  0340                     l1548:
  1292                           
  1293                           ;main_maestro.c: 155:     USART_Init();
  1294  0340  120A  118A  253A  120A  118A  	fcall	_USART_Init
  1295  0345                     l1550:
  1296                           
  1297                           ;main_maestro.c: 158:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1298  0345  01F2               	clrf	spiInit@sDataSample
  1299  0346  01F3               	clrf	spiInit@sClockIdle
  1300  0347  01F4               	clrf	spiInit@sTransmitEdge
  1301  0348  3020               	movlw	32
  1302  0349  120A  118A  2497  120A  118A  	fcall	_spiInit
  1303  034E                     l102:
  1304  034E  0008               	return
  1305  034F                     __end_of_setup:
  1306                           
  1307                           	psect	text2
  1308  0497                     __ptext2:	
  1309 ;; *************** function _spiInit *****************
  1310 ;; Defined at:
  1311 ;;		line 14 in file "SPI.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  sType           1    wreg     enum E1264
  1314 ;;  sDataSample     1    2[COMMON] enum E1272
  1315 ;;  sClockIdle      1    3[COMMON] enum E1276
  1316 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  sType           1    5[COMMON] enum E1264
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1328 ;;      Params:         3       0       0       0       0
  1329 ;;      Locals:         1       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0
  1331 ;;      Totals:         4       0       0       0       0
  1332 ;;Total ram usage:        4 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_setup
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _spiInit
  1344  0497                     _spiInit:
  1345                           
  1346                           ;incstack = 0
  1347                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1348                           ;spiInit@sType stored from wreg
  1349  0497  00F5               	movwf	spiInit@sType
  1350  0498                     l1402:
  1351                           
  1352                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1353  0498  1683               	bsf	3,5	;RP0=1, select bank1
  1354  0499  1303               	bcf	3,6	;RP1=0, select bank1
  1355  049A  1287               	bcf	7,5	;volatile
  1356                           
  1357                           ;SPI.c: 17:     if(sType & 0b00000100)
  1358  049B  1D75               	btfss	spiInit@sType,2
  1359  049C  2C9E               	goto	u651
  1360  049D  2C9F               	goto	u650
  1361  049E                     u651:
  1362  049E  2CA3               	goto	l1408
  1363  049F                     u650:
  1364  049F                     l1404:
  1365                           
  1366                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1367  049F  0874               	movf	spiInit@sTransmitEdge,w
  1368  04A0  0094               	movwf	20	;volatile
  1369  04A1                     l1406:
  1370                           
  1371                           ;SPI.c: 20:         TRISC3 = 1;
  1372  04A1  1587               	bsf	7,3	;volatile
  1373                           
  1374                           ;SPI.c: 21:     }
  1375  04A2  2CA7               	goto	l239
  1376  04A3                     l1408:
  1377                           
  1378                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1379  04A3  0872               	movf	spiInit@sDataSample,w
  1380  04A4  0474               	iorwf	spiInit@sTransmitEdge,w
  1381  04A5  0094               	movwf	20	;volatile
  1382  04A6                     l1410:
  1383                           
  1384                           ;SPI.c: 25:         TRISC3 = 0;
  1385  04A6  1187               	bcf	7,3	;volatile
  1386  04A7                     l239:	
  1387                           ;SPI.c: 26:     }
  1388                           
  1389                           
  1390                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1391  04A7  0875               	movf	spiInit@sType,w
  1392  04A8  0473               	iorwf	spiInit@sClockIdle,w
  1393  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1394  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1395  04AB  0094               	movwf	20	;volatile
  1396  04AC                     l240:
  1397  04AC  0008               	return
  1398  04AD                     __end_of_spiInit:
  1399                           
  1400                           	psect	text3
  1401  01E1                     __ptext3:	
  1402 ;; *************** function _initOsc *****************
  1403 ;; Defined at:
  1404 ;;		line 3 in file "Oscilador.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;  IRCF            1    wreg     unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;  IRCF            1    4[COMMON] unsigned char 
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1418 ;;      Params:         0       0       0       0       0
  1419 ;;      Locals:         1       0       0       0       0
  1420 ;;      Temps:          2       0       0       0       0
  1421 ;;      Totals:         3       0       0       0       0
  1422 ;;Total ram usage:        3 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    1
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_setup
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           
  1433                           ;psect for function _initOsc
  1434  01E1                     _initOsc:
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1438                           ;initOsc@IRCF stored from wreg
  1439  01E1  00F4               	movwf	initOsc@IRCF
  1440  01E2                     l1386:
  1441                           
  1442                           ;Oscilador.c: 5:     switch(IRCF){
  1443  01E2  2A19               	goto	l1390
  1444  01E3                     l123:	
  1445                           ;Oscilador.c: 6:         case 0:
  1446                           
  1447                           
  1448                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1449  01E3  1683               	bsf	3,5	;RP0=1, select bank1
  1450  01E4  1303               	bcf	3,6	;RP1=0, select bank1
  1451  01E5  130F               	bcf	15,6	;volatile
  1452                           
  1453                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1454  01E6  128F               	bcf	15,5	;volatile
  1455                           
  1456                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1457  01E7  120F               	bcf	15,4	;volatile
  1458                           
  1459                           ;Oscilador.c: 10:             break;
  1460  01E8  2A3B               	goto	l124
  1461  01E9                     l125:	
  1462                           ;Oscilador.c: 11:          case 1:
  1463                           
  1464                           
  1465                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1466  01E9  1683               	bsf	3,5	;RP0=1, select bank1
  1467  01EA  1303               	bcf	3,6	;RP1=0, select bank1
  1468  01EB  130F               	bcf	15,6	;volatile
  1469                           
  1470                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1471  01EC  128F               	bcf	15,5	;volatile
  1472                           
  1473                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1474  01ED  160F               	bsf	15,4	;volatile
  1475                           
  1476                           ;Oscilador.c: 15:             break;
  1477  01EE  2A3B               	goto	l124
  1478  01EF                     l126:	
  1479                           ;Oscilador.c: 16:         case 2:
  1480                           
  1481                           
  1482                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1483  01EF  1683               	bsf	3,5	;RP0=1, select bank1
  1484  01F0  1303               	bcf	3,6	;RP1=0, select bank1
  1485  01F1  130F               	bcf	15,6	;volatile
  1486                           
  1487                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1488  01F2  168F               	bsf	15,5	;volatile
  1489                           
  1490                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1491  01F3  120F               	bcf	15,4	;volatile
  1492                           
  1493                           ;Oscilador.c: 20:             break;
  1494  01F4  2A3B               	goto	l124
  1495  01F5                     l127:	
  1496                           ;Oscilador.c: 21:         case 3:
  1497                           
  1498                           
  1499                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1500  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1501  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1502  01F7  130F               	bcf	15,6	;volatile
  1503                           
  1504                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1505  01F8  168F               	bsf	15,5	;volatile
  1506                           
  1507                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1508  01F9  160F               	bsf	15,4	;volatile
  1509                           
  1510                           ;Oscilador.c: 25:             break;
  1511  01FA  2A3B               	goto	l124
  1512  01FB                     l128:	
  1513                           ;Oscilador.c: 26:         case 4:
  1514                           
  1515                           
  1516                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1517  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  1518  01FC  1303               	bcf	3,6	;RP1=0, select bank1
  1519  01FD  170F               	bsf	15,6	;volatile
  1520                           
  1521                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1522  01FE  128F               	bcf	15,5	;volatile
  1523                           
  1524                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1525  01FF  120F               	bcf	15,4	;volatile
  1526                           
  1527                           ;Oscilador.c: 30:             break;
  1528  0200  2A3B               	goto	l124
  1529  0201                     l129:	
  1530                           ;Oscilador.c: 31:         case 5:
  1531                           
  1532                           
  1533                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1534  0201  1683               	bsf	3,5	;RP0=1, select bank1
  1535  0202  1303               	bcf	3,6	;RP1=0, select bank1
  1536  0203  170F               	bsf	15,6	;volatile
  1537                           
  1538                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1539  0204  128F               	bcf	15,5	;volatile
  1540                           
  1541                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1542  0205  160F               	bsf	15,4	;volatile
  1543                           
  1544                           ;Oscilador.c: 35:             break;
  1545  0206  2A3B               	goto	l124
  1546  0207                     l130:	
  1547                           ;Oscilador.c: 36:         case 6:
  1548                           
  1549                           
  1550                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1551  0207  1683               	bsf	3,5	;RP0=1, select bank1
  1552  0208  1303               	bcf	3,6	;RP1=0, select bank1
  1553  0209  170F               	bsf	15,6	;volatile
  1554                           
  1555                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1556  020A  168F               	bsf	15,5	;volatile
  1557                           
  1558                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1559  020B  120F               	bcf	15,4	;volatile
  1560                           
  1561                           ;Oscilador.c: 40:             break;
  1562  020C  2A3B               	goto	l124
  1563  020D                     l131:	
  1564                           ;Oscilador.c: 41:         case 7:
  1565                           
  1566                           
  1567                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1568  020D  1683               	bsf	3,5	;RP0=1, select bank1
  1569  020E  1303               	bcf	3,6	;RP1=0, select bank1
  1570  020F  170F               	bsf	15,6	;volatile
  1571                           
  1572                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1573  0210  168F               	bsf	15,5	;volatile
  1574                           
  1575                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1576  0211  160F               	bsf	15,4	;volatile
  1577                           
  1578                           ;Oscilador.c: 45:             break;
  1579  0212  2A3B               	goto	l124
  1580  0213                     l132:	
  1581                           ;Oscilador.c: 46:         default:
  1582                           
  1583                           
  1584                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1585  0213  1683               	bsf	3,5	;RP0=1, select bank1
  1586  0214  1303               	bcf	3,6	;RP1=0, select bank1
  1587  0215  170F               	bsf	15,6	;volatile
  1588                           
  1589                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1590  0216  168F               	bsf	15,5	;volatile
  1591                           
  1592                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1593  0217  120F               	bcf	15,4	;volatile
  1594                           
  1595                           ;Oscilador.c: 50:             break;
  1596  0218  2A3B               	goto	l124
  1597  0219                     l1390:
  1598  0219  0874               	movf	initOsc@IRCF,w
  1599  021A  00F2               	movwf	??_initOsc
  1600  021B  01F3               	clrf	??_initOsc+1
  1601                           
  1602                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1603                           ; Switch size 1, requested type "simple"
  1604                           ; Number of cases is 1, Range of values is 0 to 0
  1605                           ; switch strategies available:
  1606                           ; Name         Instructions Cycles
  1607                           ; simple_byte            4     3 (average)
  1608                           ; direct_byte           11     8 (fixed)
  1609                           ; jumptable            260     6 (fixed)
  1610                           ;	Chosen strategy is simple_byte
  1611  021C  0873               	movf	??_initOsc+1,w
  1612  021D  3A00               	xorlw	0	; case 0
  1613  021E  1903               	skipnz
  1614  021F  2A21               	goto	l1952
  1615  0220  2A13               	goto	l132
  1616  0221                     l1952:
  1617                           
  1618                           ; Switch size 1, requested type "simple"
  1619                           ; Number of cases is 8, Range of values is 0 to 7
  1620                           ; switch strategies available:
  1621                           ; Name         Instructions Cycles
  1622                           ; simple_byte           25    13 (average)
  1623                           ; direct_byte           32     8 (fixed)
  1624                           ; jumptable            260     6 (fixed)
  1625                           ;	Chosen strategy is simple_byte
  1626  0221  0872               	movf	??_initOsc,w
  1627  0222  3A00               	xorlw	0	; case 0
  1628  0223  1903               	skipnz
  1629  0224  29E3               	goto	l123
  1630  0225  3A01               	xorlw	1	; case 1
  1631  0226  1903               	skipnz
  1632  0227  29E9               	goto	l125
  1633  0228  3A03               	xorlw	3	; case 2
  1634  0229  1903               	skipnz
  1635  022A  29EF               	goto	l126
  1636  022B  3A01               	xorlw	1	; case 3
  1637  022C  1903               	skipnz
  1638  022D  29F5               	goto	l127
  1639  022E  3A07               	xorlw	7	; case 4
  1640  022F  1903               	skipnz
  1641  0230  29FB               	goto	l128
  1642  0231  3A01               	xorlw	1	; case 5
  1643  0232  1903               	skipnz
  1644  0233  2A01               	goto	l129
  1645  0234  3A03               	xorlw	3	; case 6
  1646  0235  1903               	skipnz
  1647  0236  2A07               	goto	l130
  1648  0237  3A01               	xorlw	1	; case 7
  1649  0238  1903               	skipnz
  1650  0239  2A0D               	goto	l131
  1651  023A  2A13               	goto	l132
  1652  023B                     l124:
  1653                           
  1654                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1655  023B  140F               	bsf	15,0	;volatile
  1656  023C                     l133:
  1657  023C  0008               	return
  1658  023D                     __end_of_initOsc:
  1659                           
  1660                           	psect	text4
  1661  0550                     __ptext4:	
  1662 ;; *************** function _USART_Init_BaudRate *****************
  1663 ;; Defined at:
  1664 ;;		line 19 in file "USART.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1678 ;;      Params:         0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    1
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_setup
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _USART_Init_BaudRate
  1694  0550                     _USART_Init_BaudRate:
  1695  0550                     l1396:	
  1696                           ;incstack = 0
  1697                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1698                           
  1699                           
  1700                           ;USART.c: 20:     SPBRGH = 0;
  1701  0550  1683               	bsf	3,5	;RP0=1, select bank1
  1702  0551  1303               	bcf	3,6	;RP1=0, select bank1
  1703  0552  019A               	clrf	26	;volatile
  1704  0553                     l1398:
  1705                           
  1706                           ;USART.c: 21:     SPBRG = 12;
  1707  0553  300C               	movlw	12
  1708  0554  0099               	movwf	25	;volatile
  1709  0555                     l202:
  1710  0555  0008               	return
  1711  0556                     __end_of_USART_Init_BaudRate:
  1712                           
  1713                           	psect	text5
  1714  053A                     __ptext5:	
  1715 ;; *************** function _USART_Init *****************
  1716 ;; Defined at:
  1717 ;;		line 8 in file "USART.c"
  1718 ;; Parameters:    Size  Location     Type
  1719 ;;		None
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;		None
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  1    wreg      void 
  1724 ;; Registers used:
  1725 ;;		None
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1731 ;;      Params:         0       0       0       0       0
  1732 ;;      Locals:         0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0
  1734 ;;      Totals:         0       0       0       0       0
  1735 ;;Total ram usage:        0 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    1
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_setup
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           
  1746                           ;psect for function _USART_Init
  1747  053A                     _USART_Init:
  1748  053A                     l1400:	
  1749                           ;incstack = 0
  1750                           ; Regs used in _USART_Init: []
  1751                           
  1752                           
  1753                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1754  053A  1283               	bcf	3,5	;RP0=0, select bank0
  1755  053B  1303               	bcf	3,6	;RP1=0, select bank0
  1756  053C  1798               	bsf	24,7	;volatile
  1757                           
  1758                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1759  053D  1683               	bsf	3,5	;RP0=1, select bank1
  1760  053E  1303               	bcf	3,6	;RP1=0, select bank1
  1761  053F  1218               	bcf	24,4	;volatile
  1762                           
  1763                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1764  0540  1698               	bsf	24,5	;volatile
  1765  0541                     l199:
  1766  0541  0008               	return
  1767  0542                     __end_of_USART_Init:
  1768                           
  1769                           	psect	text6
  1770  042E                     __ptext6:	
  1771 ;; *************** function _Write_USART_String *****************
  1772 ;; Defined at:
  1773 ;;		line 37 in file "USART.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  a               2    3[COMMON] PTR unsigned char 
  1776 ;;		 -> data(8), STR_2(9), 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  i               1    6[COMMON] unsigned char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1788 ;;      Params:         2       0       0       0       0
  1789 ;;      Locals:         1       0       0       0       0
  1790 ;;      Temps:          1       0       0       0       0
  1791 ;;      Totals:         4       0       0       0       0
  1792 ;;Total ram usage:        4 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    2
  1795 ;; This function calls:
  1796 ;;		_Write_USART
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           
  1803                           ;psect for function _Write_USART_String
  1804  042E                     _Write_USART_String:
  1805  042E                     l1584:	
  1806                           ;incstack = 0
  1807                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1808                           
  1809                           
  1810                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  1811  042E  01F6               	clrf	Write_USART_String@i
  1812  042F  2C45               	goto	l1590
  1813  0430                     l1586:
  1814                           
  1815                           ;USART.c: 40:         Write_USART(a[i]);
  1816  0430  0876               	movf	Write_USART_String@i,w
  1817  0431  0773               	addwf	Write_USART_String@a,w
  1818  0432  0084               	movwf	4
  1819  0433  0874               	movf	Write_USART_String@a+1,w
  1820  0434  1803               	skipnc
  1821  0435  0A74               	incf	Write_USART_String@a+1,w
  1822  0436  00FF               	movwf	btemp+1
  1823  0437  120A  118A  238B  120A  118A  	fcall	stringtab
  1824  043C  120A  118A  251D  120A  118A  	fcall	_Write_USART
  1825  0441                     l1588:
  1826                           
  1827                           ;USART.c: 41:     }
  1828  0441  3001               	movlw	1
  1829  0442  00F5               	movwf	??_Write_USART_String
  1830  0443  0875               	movf	??_Write_USART_String,w
  1831  0444  07F6               	addwf	Write_USART_String@i,f
  1832  0445                     l1590:
  1833  0445  0876               	movf	Write_USART_String@i,w
  1834  0446  0773               	addwf	Write_USART_String@a,w
  1835  0447  0084               	movwf	4
  1836  0448  0874               	movf	Write_USART_String@a+1,w
  1837  0449  1803               	skipnc
  1838  044A  0A74               	incf	Write_USART_String@a+1,w
  1839  044B  1283               	bcf	3,5	;RP0=0, select bank0
  1840  044C  1303               	bcf	3,6	;RP1=0, select bank0
  1841  044D  00FF               	movwf	btemp+1
  1842  044E  120A  118A  238B  120A  118A  	fcall	stringtab
  1843  0453  3A00               	xorlw	0
  1844  0454  1D03               	skipz
  1845  0455  2C57               	goto	u791
  1846  0456  2C58               	goto	u790
  1847  0457                     u791:
  1848  0457  2C30               	goto	l1586
  1849  0458                     u790:
  1850  0458                     l217:
  1851  0458  0008               	return
  1852  0459                     __end_of_Write_USART_String:
  1853                           
  1854                           	psect	text7
  1855  051D                     __ptext7:	
  1856 ;; *************** function _Write_USART *****************
  1857 ;; Defined at:
  1858 ;;		line 33 in file "USART.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  a               1    wreg     unsigned char 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  a               1    2[COMMON] unsigned char 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1872 ;;      Params:         0       0       0       0       0
  1873 ;;      Locals:         1       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0
  1875 ;;      Totals:         1       0       0       0       0
  1876 ;;Total ram usage:        1 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    1
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;;		_Write_USART_String
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           
  1888                           ;psect for function _Write_USART
  1889  051D                     _Write_USART:
  1890                           
  1891                           ;incstack = 0
  1892                           ; Regs used in _Write_USART: [wreg]
  1893                           ;Write_USART@a stored from wreg
  1894  051D  00F2               	movwf	Write_USART@a
  1895  051E                     l1382:
  1896  051E                     l208:	
  1897                           ;USART.c: 34:     while(!TRMT);
  1898                           
  1899  051E  1683               	bsf	3,5	;RP0=1, select bank1
  1900  051F  1303               	bcf	3,6	;RP1=0, select bank1
  1901  0520  1C98               	btfss	24,1	;volatile
  1902  0521  2D23               	goto	u641
  1903  0522  2D24               	goto	u640
  1904  0523                     u641:
  1905  0523  2D1E               	goto	l208
  1906  0524                     u640:
  1907  0524                     l1384:
  1908                           
  1909                           ;USART.c: 35:     TXREG=a;
  1910  0524  0872               	movf	Write_USART@a,w
  1911  0525  1283               	bcf	3,5	;RP0=0, select bank0
  1912  0526  1303               	bcf	3,6	;RP1=0, select bank0
  1913  0527  0099               	movwf	25	;volatile
  1914  0528                     l211:
  1915  0528  0008               	return
  1916  0529                     __end_of_Write_USART:
  1917                           
  1918                           	psect	text8
  1919  04EC                     __ptext8:	
  1920 ;; *************** function _Show_val_LCD *****************
  1921 ;; Defined at:
  1922 ;;		line 173 in file "main_maestro.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;		None
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;		None
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1936 ;;      Params:         0       0       0       0       0
  1937 ;;      Locals:         0       0       0       0       0
  1938 ;;      Temps:          0       0       0       0       0
  1939 ;;      Totals:         0       0       0       0       0
  1940 ;;Total ram usage:        0 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    4
  1943 ;; This function calls:
  1944 ;;		_Lcd_Set_Cursor
  1945 ;;		_Lcd_Write_String
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           
  1952                           ;psect for function _Show_val_LCD
  1953  04EC                     _Show_val_LCD:
  1954  04EC                     l1862:	
  1955                           ;incstack = 0
  1956                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1957                           
  1958                           
  1959                           ;main_maestro.c: 176:     Lcd_Set_Cursor(2,1);
  1960  04EC  01F6               	clrf	Lcd_Set_Cursor@b
  1961  04ED  0AF6               	incf	Lcd_Set_Cursor@b,f
  1962  04EE  3002               	movlw	2
  1963  04EF  120A  118A  2459  120A  118A  	fcall	_Lcd_Set_Cursor
  1964  04F4                     l1864:
  1965                           
  1966                           ;main_maestro.c: 177:     Lcd_Write_String(data);
  1967  04F4  3036               	movlw	(low (_data| 0))& (0+255)
  1968  04F5  00F5               	movwf	Lcd_Write_String@a
  1969  04F6  3000               	movlw	0
  1970  04F7  00F6               	movwf	Lcd_Write_String@a+1
  1971  04F8  120A  118A  2288  120A  118A  	fcall	_Lcd_Write_String
  1972  04FD                     l108:
  1973  04FD  0008               	return
  1974  04FE                     __end_of_Show_val_LCD:
  1975                           
  1976                           	psect	text9
  1977  0288                     __ptext9:	
  1978 ;; *************** function _Lcd_Write_String *****************
  1979 ;; Defined at:
  1980 ;;		line 70 in file "LCD.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  a               2    5[COMMON] PTR unsigned char 
  1983 ;;		 -> data(8), STR_1(17), 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  i               2    0[BANK0 ] int 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1995 ;;      Params:         2       0       0       0       0
  1996 ;;      Locals:         0       2       0       0       0
  1997 ;;      Temps:          3       0       0       0       0
  1998 ;;      Totals:         5       2       0       0       0
  1999 ;;Total ram usage:        7 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    3
  2002 ;; This function calls:
  2003 ;;		_Lcd_Write_Char
  2004 ;; This function is called by:
  2005 ;;		_main
  2006 ;;		_Show_val_LCD
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           
  2011                           ;psect for function _Lcd_Write_String
  2012  0288                     _Lcd_Write_String:
  2013  0288                     l1750:	
  2014                           ;incstack = 0
  2015                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2016                           
  2017                           
  2018                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2019  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2020  0289  1303               	bcf	3,6	;RP1=0, select bank0
  2021  028A  01BE               	clrf	Lcd_Write_String@i
  2022  028B  01BF               	clrf	Lcd_Write_String@i+1
  2023  028C  2AB1               	goto	l1756
  2024  028D                     l1752:
  2025                           
  2026                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2027  028D  083E               	movf	Lcd_Write_String@i,w
  2028  028E  0775               	addwf	Lcd_Write_String@a,w
  2029  028F  00F8               	movwf	??_Lcd_Write_String+1
  2030  0290  0876               	movf	Lcd_Write_String@a+1,w
  2031  0291  00F7               	movwf	??_Lcd_Write_String
  2032  0292  1803               	skipnc
  2033  0293  0AF7               	incf	??_Lcd_Write_String,f
  2034  0294  1FBE               	btfss	Lcd_Write_String@i,7
  2035  0295  2A97               	goto	u880
  2036  0296  03F7               	decf	??_Lcd_Write_String,f
  2037  0297                     u880:
  2038  0297  0877               	movf	??_Lcd_Write_String,w
  2039  0298  00F9               	movwf	??_Lcd_Write_String+2
  2040  0299  0879               	movf	??_Lcd_Write_String+2,w
  2041  029A  1283               	bcf	3,5	;RP0=0, select bank0
  2042  029B  1303               	bcf	3,6	;RP1=0, select bank0
  2043  029C  00FF               	movwf	btemp+1
  2044  029D  0878               	movf	??_Lcd_Write_String+1,w
  2045  029E  0084               	movwf	4
  2046  029F  120A  118A  238B  120A  118A  	fcall	stringtab
  2047  02A4  120A  118A  24AD  120A  118A  	fcall	_Lcd_Write_Char
  2048  02A9                     l1754:
  2049  02A9  3001               	movlw	1
  2050  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2051  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2052  02AC  07BE               	addwf	Lcd_Write_String@i,f
  2053  02AD  1803               	skipnc
  2054  02AE  0ABF               	incf	Lcd_Write_String@i+1,f
  2055  02AF  3000               	movlw	0
  2056  02B0  07BF               	addwf	Lcd_Write_String@i+1,f
  2057  02B1                     l1756:
  2058  02B1  083E               	movf	Lcd_Write_String@i,w
  2059  02B2  0775               	addwf	Lcd_Write_String@a,w
  2060  02B3  00F8               	movwf	??_Lcd_Write_String+1
  2061  02B4  0876               	movf	Lcd_Write_String@a+1,w
  2062  02B5  00F7               	movwf	??_Lcd_Write_String
  2063  02B6  1803               	skipnc
  2064  02B7  0AF7               	incf	??_Lcd_Write_String,f
  2065  02B8  1FBE               	btfss	Lcd_Write_String@i,7
  2066  02B9  2ABB               	goto	u890
  2067  02BA  03F7               	decf	??_Lcd_Write_String,f
  2068  02BB                     u890:
  2069  02BB  0877               	movf	??_Lcd_Write_String,w
  2070  02BC  00F9               	movwf	??_Lcd_Write_String+2
  2071  02BD  0879               	movf	??_Lcd_Write_String+2,w
  2072  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  2073  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  2074  02C0  00FF               	movwf	btemp+1
  2075  02C1  0878               	movf	??_Lcd_Write_String+1,w
  2076  02C2  0084               	movwf	4
  2077  02C3  120A  118A  238B  120A  118A  	fcall	stringtab
  2078  02C8  3A00               	xorlw	0
  2079  02C9  1D03               	skipz
  2080  02CA  2ACC               	goto	u901
  2081  02CB  2ACD               	goto	u900
  2082  02CC                     u901:
  2083  02CC  2A8D               	goto	l1752
  2084  02CD                     u900:
  2085  02CD                     l170:
  2086  02CD  0008               	return
  2087  02CE                     __end_of_Lcd_Write_String:
  2088                           
  2089                           	psect	text10
  2090  04AD                     __ptext10:	
  2091 ;; *************** function _Lcd_Write_Char *****************
  2092 ;; Defined at:
  2093 ;;		line 61 in file "LCD.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  a               1    wreg     unsigned char 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  a               1    4[COMMON] unsigned char 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  1    wreg      void 
  2100 ;; Registers used:
  2101 ;;		wreg, status,2, status,0, pclath, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2107 ;;      Params:         0       0       0       0       0
  2108 ;;      Locals:         1       0       0       0       0
  2109 ;;      Temps:          1       0       0       0       0
  2110 ;;      Totals:         2       0       0       0       0
  2111 ;;Total ram usage:        2 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    2
  2114 ;; This function calls:
  2115 ;;		_Lcd_Port
  2116 ;; This function is called by:
  2117 ;;		_Lcd_Write_String
  2118 ;; This function uses a non-reentrant model
  2119 ;;
  2120                           
  2121                           
  2122                           ;psect for function _Lcd_Write_Char
  2123  04AD                     _Lcd_Write_Char:
  2124                           
  2125                           ;incstack = 0
  2126                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2127                           ;Lcd_Write_Char@a stored from wreg
  2128  04AD  00F4               	movwf	Lcd_Write_Char@a
  2129  04AE                     l1706:
  2130                           
  2131                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2132  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2133  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  2134  04B0  1409               	bsf	9,0	;volatile
  2135  04B1                     l1708:
  2136                           
  2137                           ;LCD.c: 63:    Lcd_Port(a);
  2138  04B1  0874               	movf	Lcd_Write_Char@a,w
  2139  04B2  120A  118A  255C  120A  118A  	fcall	_Lcd_Port
  2140  04B7                     l1710:
  2141                           
  2142                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2143  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  2144  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  2145  04B9  1509               	bsf	9,2	;volatile
  2146  04BA                     l1712:
  2147                           
  2148                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2149  04BA  301A               	movlw	26
  2150  04BB  00F3               	movwf	??_Lcd_Write_Char
  2151  04BC                     u1047:
  2152  04BC  0BF3               	decfsz	??_Lcd_Write_Char,f
  2153  04BD  2CBC               	goto	u1047
  2154  04BE  0000               	nop
  2155  04BF                     l1714:
  2156                           
  2157                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2158  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2159  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2160  04C1  1109               	bcf	9,2	;volatile
  2161  04C2                     l164:
  2162  04C2  0008               	return
  2163  04C3                     __end_of_Lcd_Write_Char:
  2164                           
  2165                           	psect	text11
  2166  0459                     __ptext11:	
  2167 ;; *************** function _Lcd_Set_Cursor *****************
  2168 ;; Defined at:
  2169 ;;		line 48 in file "LCD.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  a               1    wreg     unsigned char 
  2172 ;;  b               1    6[COMMON] unsigned char 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  a               1    8[COMMON] unsigned char 
  2175 ;;  temp            1    9[COMMON] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  1    wreg      void 
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0, pclath, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2185 ;;      Params:         1       0       0       0       0
  2186 ;;      Locals:         2       0       0       0       0
  2187 ;;      Temps:          1       0       0       0       0
  2188 ;;      Totals:         4       0       0       0       0
  2189 ;;Total ram usage:        4 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    3
  2192 ;; This function calls:
  2193 ;;		_Lcd_Cmd
  2194 ;; This function is called by:
  2195 ;;		_main
  2196 ;;		_Show_val_LCD
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           
  2201                           ;psect for function _Lcd_Set_Cursor
  2202  0459                     _Lcd_Set_Cursor:
  2203                           
  2204                           ;incstack = 0
  2205                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2206                           ;Lcd_Set_Cursor@a stored from wreg
  2207  0459  00F8               	movwf	Lcd_Set_Cursor@a
  2208  045A                     l1738:
  2209                           
  2210                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2211  045A  0378               	decf	Lcd_Set_Cursor@a,w
  2212  045B  1D03               	btfss	3,2
  2213  045C  2C5E               	goto	u861
  2214  045D  2C5F               	goto	u860
  2215  045E                     u861:
  2216  045E  2C6B               	goto	l1744
  2217  045F                     u860:
  2218  045F                     l1740:
  2219                           
  2220                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2221  045F  0876               	movf	Lcd_Set_Cursor@b,w
  2222  0460  3E7F               	addlw	127
  2223  0461  00F7               	movwf	??_Lcd_Set_Cursor
  2224  0462  0877               	movf	??_Lcd_Set_Cursor,w
  2225  0463  00F9               	movwf	Lcd_Set_Cursor@temp
  2226  0464                     l1742:
  2227                           
  2228                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2229  0464  0879               	movf	Lcd_Set_Cursor@temp,w
  2230  0465  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2231                           
  2232                           ;LCD.c: 53:  }
  2233  046A  2C7C               	goto	l161
  2234  046B                     l1744:
  2235  046B  3002               	movlw	2
  2236  046C  0678               	xorwf	Lcd_Set_Cursor@a,w
  2237  046D  1D03               	btfss	3,2
  2238  046E  2C70               	goto	u871
  2239  046F  2C71               	goto	u870
  2240  0470                     u871:
  2241  0470  2C7C               	goto	l161
  2242  0471                     u870:
  2243  0471                     l1746:
  2244                           
  2245                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2246  0471  0876               	movf	Lcd_Set_Cursor@b,w
  2247  0472  3EBF               	addlw	191
  2248  0473  00F7               	movwf	??_Lcd_Set_Cursor
  2249  0474  0877               	movf	??_Lcd_Set_Cursor,w
  2250  0475  00F9               	movwf	Lcd_Set_Cursor@temp
  2251  0476                     l1748:
  2252                           
  2253                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2254  0476  0879               	movf	Lcd_Set_Cursor@temp,w
  2255  0477  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2256  047C                     l161:
  2257  047C  0008               	return
  2258  047D                     __end_of_Lcd_Set_Cursor:
  2259                           
  2260                           	psect	text12
  2261  03C4                     __ptext12:	
  2262 ;; *************** function _SPI_CONT *****************
  2263 ;; Defined at:
  2264 ;;		line 190 in file "main_maestro.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      void 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0, pclath, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2278 ;;      Params:         0       0       0       0       0
  2279 ;;      Locals:         0       0       0       0       0
  2280 ;;      Temps:          3       0       0       0       0
  2281 ;;      Totals:         3       0       0       0       0
  2282 ;;Total ram usage:        3 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    3
  2285 ;; This function calls:
  2286 ;;		_spiRead
  2287 ;;		_spiWrite
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           
  2294                           ;psect for function _SPI_CONT
  2295  03C4                     _SPI_CONT:
  2296  03C4                     l1564:	
  2297                           ;incstack = 0
  2298                           ; Regs used in _SPI_CONT: [wreg+status,2+status,0+pclath+cstack]
  2299                           
  2300                           
  2301                           ;main_maestro.c: 191:     RC2 = 0;
  2302  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2303  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2304  03C6  1107               	bcf	7,2	;volatile
  2305  03C7                     l1566:
  2306                           
  2307                           ;main_maestro.c: 192:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2308  03C7  3003               	movlw	3
  2309  03C8  00F4               	movwf	??_SPI_CONT+1
  2310  03C9  3097               	movlw	151
  2311  03CA  00F3               	movwf	??_SPI_CONT
  2312  03CB                     u1057:
  2313  03CB  0BF3               	decfsz	??_SPI_CONT,f
  2314  03CC  2BCB               	goto	u1057
  2315  03CD  0BF4               	decfsz	??_SPI_CONT+1,f
  2316  03CE  2BCB               	goto	u1057
  2317  03CF  2BD0               	nop2
  2318  03D0                     l1568:
  2319                           
  2320                           ;main_maestro.c: 194:    spiWrite(hola_esclavo);
  2321  03D0  3000               	movlw	0
  2322  03D1  120A  118A  2556  120A  118A  	fcall	_spiWrite
  2323  03D6                     l1570:
  2324                           
  2325                           ;main_maestro.c: 195:    cont = spiRead();
  2326  03D6  120A  118A  2529  120A  118A  	fcall	_spiRead
  2327  03DB  00F3               	movwf	??_SPI_CONT
  2328  03DC  0873               	movf	??_SPI_CONT,w
  2329  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  2330  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2331  03DF  00B5               	movwf	_cont
  2332                           
  2333                           ;main_maestro.c: 197:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2334  03E0  3003               	movlw	3
  2335  03E1  00F4               	movwf	??_SPI_CONT+1
  2336  03E2  3097               	movlw	151
  2337  03E3  00F3               	movwf	??_SPI_CONT
  2338  03E4                     u1067:
  2339  03E4  0BF3               	decfsz	??_SPI_CONT,f
  2340  03E5  2BE4               	goto	u1067
  2341  03E6  0BF4               	decfsz	??_SPI_CONT+1,f
  2342  03E7  2BE4               	goto	u1067
  2343  03E8  2BE9               	nop2
  2344  03E9                     l1572:
  2345                           
  2346                           ;main_maestro.c: 198:    RC2 = 1;
  2347  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2348  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  2349  03EB  1507               	bsf	7,2	;volatile
  2350                           
  2351                           ;main_maestro.c: 200:    _delay((unsigned long)((100)*(8000000/4000.0)));
  2352  03EC  3002               	movlw	2
  2353  03ED  00F5               	movwf	??_SPI_CONT+2
  2354  03EE  3004               	movlw	4
  2355  03EF  00F4               	movwf	??_SPI_CONT+1
  2356  03F0  30BA               	movlw	186
  2357  03F1  00F3               	movwf	??_SPI_CONT
  2358  03F2                     u1077:
  2359  03F2  0BF3               	decfsz	??_SPI_CONT,f
  2360  03F3  2BF2               	goto	u1077
  2361  03F4  0BF4               	decfsz	??_SPI_CONT+1,f
  2362  03F5  2BF2               	goto	u1077
  2363  03F6  0BF5               	decfsz	??_SPI_CONT+2,f
  2364  03F7  2BF2               	goto	u1077
  2365  03F8  0000               	nop
  2366  03F9                     l111:
  2367  03F9  0008               	return
  2368  03FA                     __end_of_SPI_CONT:
  2369                           
  2370                           	psect	text13
  2371  03FA                     __ptext13:	
  2372 ;; *************** function _SPI_ADC *****************
  2373 ;; Defined at:
  2374 ;;		line 203 in file "main_maestro.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;		None
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;		None
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      void 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0, pclath, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2388 ;;      Params:         0       0       0       0       0
  2389 ;;      Locals:         0       0       0       0       0
  2390 ;;      Temps:          3       0       0       0       0
  2391 ;;      Totals:         3       0       0       0       0
  2392 ;;Total ram usage:        3 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    3
  2395 ;; This function calls:
  2396 ;;		_spiRead
  2397 ;;		_spiWrite
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _SPI_ADC
  2405  03FA                     _SPI_ADC:
  2406  03FA                     l1574:	
  2407                           ;incstack = 0
  2408                           ; Regs used in _SPI_ADC: [wreg+status,2+status,0+pclath+cstack]
  2409                           
  2410                           
  2411                           ;main_maestro.c: 204:     RC0 = 0;
  2412  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2413  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2414  03FC  1007               	bcf	7,0	;volatile
  2415  03FD                     l1576:
  2416                           
  2417                           ;main_maestro.c: 205:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2418  03FD  3003               	movlw	3
  2419  03FE  00F4               	movwf	??_SPI_ADC+1
  2420  03FF  3097               	movlw	151
  2421  0400  00F3               	movwf	??_SPI_ADC
  2422  0401                     u1087:
  2423  0401  0BF3               	decfsz	??_SPI_ADC,f
  2424  0402  2C01               	goto	u1087
  2425  0403  0BF4               	decfsz	??_SPI_ADC+1,f
  2426  0404  2C01               	goto	u1087
  2427  0405  2C06               	nop2
  2428  0406                     l1578:
  2429                           
  2430                           ;main_maestro.c: 207:    spiWrite(hola_esclavo);
  2431  0406  3000               	movlw	0
  2432  0407  120A  118A  2556  120A  118A  	fcall	_spiWrite
  2433  040C                     l1580:
  2434                           
  2435                           ;main_maestro.c: 208:    val_ADC = spiRead();
  2436  040C  120A  118A  2529  120A  118A  	fcall	_spiRead
  2437  0411  00F3               	movwf	??_SPI_ADC
  2438  0412  0873               	movf	??_SPI_ADC,w
  2439  0413  00FA               	movwf	_val_ADC
  2440                           
  2441                           ;main_maestro.c: 210:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2442  0414  3003               	movlw	3
  2443  0415  00F4               	movwf	??_SPI_ADC+1
  2444  0416  3097               	movlw	151
  2445  0417  00F3               	movwf	??_SPI_ADC
  2446  0418                     u1097:
  2447  0418  0BF3               	decfsz	??_SPI_ADC,f
  2448  0419  2C18               	goto	u1097
  2449  041A  0BF4               	decfsz	??_SPI_ADC+1,f
  2450  041B  2C18               	goto	u1097
  2451  041C  2C1D               	nop2
  2452  041D                     l1582:
  2453                           
  2454                           ;main_maestro.c: 211:    RC0 = 1;
  2455  041D  1283               	bcf	3,5	;RP0=0, select bank0
  2456  041E  1303               	bcf	3,6	;RP1=0, select bank0
  2457  041F  1407               	bsf	7,0	;volatile
  2458                           
  2459                           ;main_maestro.c: 213:    _delay((unsigned long)((100)*(8000000/4000.0)));
  2460  0420  3002               	movlw	2
  2461  0421  00F5               	movwf	??_SPI_ADC+2
  2462  0422  3004               	movlw	4
  2463  0423  00F4               	movwf	??_SPI_ADC+1
  2464  0424  30BA               	movlw	186
  2465  0425  00F3               	movwf	??_SPI_ADC
  2466  0426                     u1107:
  2467  0426  0BF3               	decfsz	??_SPI_ADC,f
  2468  0427  2C26               	goto	u1107
  2469  0428  0BF4               	decfsz	??_SPI_ADC+1,f
  2470  0429  2C26               	goto	u1107
  2471  042A  0BF5               	decfsz	??_SPI_ADC+2,f
  2472  042B  2C26               	goto	u1107
  2473  042C  0000               	nop
  2474  042D                     l114:
  2475  042D  0008               	return
  2476  042E                     __end_of_SPI_ADC:
  2477                           
  2478                           	psect	text14
  2479  0556                     __ptext14:	
  2480 ;; *************** function _spiWrite *****************
  2481 ;; Defined at:
  2482 ;;		line 36 in file "SPI.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  dat             1    wreg     unsigned char 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  dat             1    2[COMMON] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2496 ;;      Params:         0       0       0       0       0
  2497 ;;      Locals:         1       0       0       0       0
  2498 ;;      Temps:          0       0       0       0       0
  2499 ;;      Totals:         1       0       0       0       0
  2500 ;;Total ram usage:        1 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    1
  2503 ;; This function calls:
  2504 ;;		Nothing
  2505 ;; This function is called by:
  2506 ;;		_SPI_CONT
  2507 ;;		_SPI_ADC
  2508 ;;		_SPI_TEMP
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _spiWrite
  2514  0556                     _spiWrite:
  2515                           
  2516                           ;incstack = 0
  2517                           ; Regs used in _spiWrite: [wreg]
  2518                           ;spiWrite@dat stored from wreg
  2519  0556  00F2               	movwf	spiWrite@dat
  2520  0557                     l1502:
  2521                           
  2522                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  2523  0557  0872               	movf	spiWrite@dat,w
  2524  0558  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0559  1303               	bcf	3,6	;RP1=0, select bank0
  2526  055A  0093               	movwf	19	;volatile
  2527  055B                     l249:
  2528  055B  0008               	return
  2529  055C                     __end_of_spiWrite:
  2530                           
  2531                           	psect	text15
  2532  0529                     __ptext15:	
  2533 ;; *************** function _spiRead *****************
  2534 ;; Defined at:
  2535 ;;		line 49 in file "SPI.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      unsigned char 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0, pclath, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2549 ;;      Params:         0       0       0       0       0
  2550 ;;      Locals:         0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0
  2552 ;;      Totals:         0       0       0       0       0
  2553 ;;Total ram usage:        0 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    2
  2556 ;; This function calls:
  2557 ;;		_spiReceiveWait
  2558 ;; This function is called by:
  2559 ;;		_SPI_CONT
  2560 ;;		_SPI_ADC
  2561 ;;		_SPI_TEMP
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           
  2566                           ;psect for function _spiRead
  2567  0529                     _spiRead:
  2568  0529                     l1504:	
  2569                           ;incstack = 0
  2570                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2571                           
  2572                           
  2573                           ;SPI.c: 51:     spiReceiveWait();
  2574  0529  120A  118A  2542  120A  118A  	fcall	_spiReceiveWait
  2575  052E                     l1506:
  2576                           
  2577                           ;SPI.c: 52:     return(SSPBUF);
  2578  052E  1283               	bcf	3,5	;RP0=0, select bank0
  2579  052F  1303               	bcf	3,6	;RP1=0, select bank0
  2580  0530  0813               	movf	19,w	;volatile
  2581  0531                     l257:
  2582  0531  0008               	return
  2583  0532                     __end_of_spiRead:
  2584                           
  2585                           	psect	text16
  2586  0542                     __ptext16:	
  2587 ;; *************** function _spiReceiveWait *****************
  2588 ;; Defined at:
  2589 ;;		line 31 in file "SPI.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;		None
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		None
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2603 ;;      Params:         0       0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0
  2606 ;;      Totals:         0       0       0       0       0
  2607 ;;Total ram usage:        0 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    1
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_spiRead
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           
  2618                           ;psect for function _spiReceiveWait
  2619  0542                     _spiReceiveWait:
  2620  0542                     l1286:	
  2621                           ;incstack = 0
  2622                           ; Regs used in _spiReceiveWait: []
  2623                           
  2624  0542                     l243:	
  2625                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  2626                           
  2627  0542  1683               	bsf	3,5	;RP0=1, select bank1
  2628  0543  1303               	bcf	3,6	;RP1=0, select bank1
  2629  0544  1C14               	btfss	20,0	;volatile
  2630  0545  2D47               	goto	u411
  2631  0546  2D48               	goto	u410
  2632  0547                     u411:
  2633  0547  2D42               	goto	l243
  2634  0548                     u410:
  2635  0548                     l246:
  2636  0548  0008               	return
  2637  0549                     __end_of_spiReceiveWait:
  2638                           
  2639                           	psect	text17
  2640  023D                     __ptext17:	
  2641 ;; *************** function _Lcd_Init *****************
  2642 ;; Defined at:
  2643 ;;		line 14 in file "LCD.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0, pclath, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2657 ;;      Params:         0       0       0       0       0
  2658 ;;      Locals:         0       0       0       0       0
  2659 ;;      Temps:          2       0       0       0       0
  2660 ;;      Totals:         2       0       0       0       0
  2661 ;;Total ram usage:        2 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    3
  2664 ;; This function calls:
  2665 ;;		_Lcd_Cmd
  2666 ;;		_Lcd_Port
  2667 ;; This function is called by:
  2668 ;;		_main
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           
  2673                           ;psect for function _Lcd_Init
  2674  023D                     _Lcd_Init:
  2675  023D                     l1848:	
  2676                           ;incstack = 0
  2677                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2678                           
  2679                           
  2680                           ;LCD.c: 15:   Lcd_Port(0x00);
  2681  023D  3000               	movlw	0
  2682  023E  120A  118A  255C  120A  118A  	fcall	_Lcd_Port
  2683  0243                     l1850:
  2684                           
  2685                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  2686  0243  3034               	movlw	52
  2687  0244  00F7               	movwf	??_Lcd_Init+1
  2688  0245  30F1               	movlw	241
  2689  0246  00F6               	movwf	??_Lcd_Init
  2690  0247                     u1117:
  2691  0247  0BF6               	decfsz	??_Lcd_Init,f
  2692  0248  2A47               	goto	u1117
  2693  0249  0BF7               	decfsz	??_Lcd_Init+1,f
  2694  024A  2A47               	goto	u1117
  2695  024B  2A4C               	nop2
  2696  024C                     l1852:
  2697                           
  2698                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  2699  024C  3030               	movlw	48
  2700  024D  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2701                           
  2702                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2703  0252  300D               	movlw	13
  2704  0253  00F7               	movwf	??_Lcd_Init+1
  2705  0254  30FB               	movlw	251
  2706  0255  00F6               	movwf	??_Lcd_Init
  2707  0256                     u1127:
  2708  0256  0BF6               	decfsz	??_Lcd_Init,f
  2709  0257  2A56               	goto	u1127
  2710  0258  0BF7               	decfsz	??_Lcd_Init+1,f
  2711  0259  2A56               	goto	u1127
  2712  025A  2A5B               	nop2
  2713  025B                     l1854:
  2714                           
  2715                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  2716  025B  3030               	movlw	48
  2717  025C  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2718  0261                     l1856:
  2719                           
  2720                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  2721  0261  301D               	movlw	29
  2722  0262  00F7               	movwf	??_Lcd_Init+1
  2723  0263  3091               	movlw	145
  2724  0264  00F6               	movwf	??_Lcd_Init
  2725  0265                     u1137:
  2726  0265  0BF6               	decfsz	??_Lcd_Init,f
  2727  0266  2A65               	goto	u1137
  2728  0267  0BF7               	decfsz	??_Lcd_Init+1,f
  2729  0268  2A65               	goto	u1137
  2730                           
  2731                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  2732  0269  3030               	movlw	48
  2733  026A  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2734                           
  2735                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  2736  026F  3038               	movlw	56
  2737  0270  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2738                           
  2739                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  2740  0275  300C               	movlw	12
  2741  0276  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2742                           
  2743                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  2744  027B  3001               	movlw	1
  2745  027C  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2746                           
  2747                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  2748  0281  3006               	movlw	6
  2749  0282  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2750  0287                     l146:
  2751  0287  0008               	return
  2752  0288                     __end_of_Lcd_Init:
  2753                           
  2754                           	psect	text18
  2755  0510                     __ptext18:	
  2756 ;; *************** function _Lcd_Clear *****************
  2757 ;; Defined at:
  2758 ;;		line 42 in file "LCD.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;		None
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  1    wreg      void 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0, pclath, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2772 ;;      Params:         0       0       0       0       0
  2773 ;;      Locals:         0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0
  2775 ;;      Totals:         0       0       0       0       0
  2776 ;;Total ram usage:        0 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    3
  2779 ;; This function calls:
  2780 ;;		_Lcd_Cmd
  2781 ;; This function is called by:
  2782 ;;		_main
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           
  2787                           ;psect for function _Lcd_Clear
  2788  0510                     _Lcd_Clear:
  2789  0510                     l1858:	
  2790                           ;incstack = 0
  2791                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2792                           
  2793                           
  2794                           ;LCD.c: 43:  Lcd_Cmd(0);
  2795  0510  3000               	movlw	0
  2796  0511  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2797                           
  2798                           ;LCD.c: 44:  Lcd_Cmd(1);
  2799  0516  3001               	movlw	1
  2800  0517  120A  118A  247D  120A  118A  	fcall	_Lcd_Cmd
  2801  051C                     l155:
  2802  051C  0008               	return
  2803  051D                     __end_of_Lcd_Clear:
  2804                           
  2805                           	psect	text19
  2806  047D                     __ptext19:	
  2807 ;; *************** function _Lcd_Cmd *****************
  2808 ;; Defined at:
  2809 ;;		line 33 in file "LCD.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  a               1    wreg     unsigned char 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  a               1    5[COMMON] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0, pclath, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2823 ;;      Params:         0       0       0       0       0
  2824 ;;      Locals:         1       0       0       0       0
  2825 ;;      Temps:          2       0       0       0       0
  2826 ;;      Totals:         3       0       0       0       0
  2827 ;;Total ram usage:        3 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    2
  2830 ;; This function calls:
  2831 ;;		_Lcd_Port
  2832 ;; This function is called by:
  2833 ;;		_Lcd_Init
  2834 ;;		_Lcd_Clear
  2835 ;;		_Lcd_Set_Cursor
  2836 ;;		_Lcd_Shift_Right
  2837 ;;		_Lcd_Shift_Left
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           
  2842                           ;psect for function _Lcd_Cmd
  2843  047D                     _Lcd_Cmd:
  2844                           
  2845                           ;incstack = 0
  2846                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2847                           ;Lcd_Cmd@a stored from wreg
  2848  047D  00F5               	movwf	Lcd_Cmd@a
  2849  047E                     l1696:
  2850                           
  2851                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  2852  047E  1283               	bcf	3,5	;RP0=0, select bank0
  2853  047F  1303               	bcf	3,6	;RP1=0, select bank0
  2854  0480  1009               	bcf	9,0	;volatile
  2855  0481                     l1698:
  2856                           
  2857                           ;LCD.c: 35:  Lcd_Port(a);
  2858  0481  0875               	movf	Lcd_Cmd@a,w
  2859  0482  120A  118A  255C  120A  118A  	fcall	_Lcd_Port
  2860  0487                     l1700:
  2861                           
  2862                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  2863  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2864  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2865  0489  1509               	bsf	9,2	;volatile
  2866  048A                     l1702:
  2867                           
  2868                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2869  048A  300B               	movlw	11
  2870  048B  00F4               	movwf	??_Lcd_Cmd+1
  2871  048C  3062               	movlw	98
  2872  048D  00F3               	movwf	??_Lcd_Cmd
  2873  048E                     u1147:
  2874  048E  0BF3               	decfsz	??_Lcd_Cmd,f
  2875  048F  2C8E               	goto	u1147
  2876  0490  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2877  0491  2C8E               	goto	u1147
  2878  0492  0000               	nop
  2879  0493                     l1704:
  2880                           
  2881                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  2882  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2883  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2884  0495  1109               	bcf	9,2	;volatile
  2885  0496                     l152:
  2886  0496  0008               	return
  2887  0497                     __end_of_Lcd_Cmd:
  2888                           
  2889                           	psect	text20
  2890  055C                     __ptext20:	
  2891 ;; *************** function _Lcd_Port *****************
  2892 ;; Defined at:
  2893 ;;		line 29 in file "LCD.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  a               1    wreg     unsigned char 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  a               1    2[COMMON] unsigned char 
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2907 ;;      Params:         0       0       0       0       0
  2908 ;;      Locals:         1       0       0       0       0
  2909 ;;      Temps:          0       0       0       0       0
  2910 ;;      Totals:         1       0       0       0       0
  2911 ;;Total ram usage:        1 bytes
  2912 ;; Hardware stack levels used:    1
  2913 ;; Hardware stack levels required when called:    1
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_Lcd_Init
  2918 ;;		_Lcd_Cmd
  2919 ;;		_Lcd_Write_Char
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           
  2924                           ;psect for function _Lcd_Port
  2925  055C                     _Lcd_Port:
  2926                           
  2927                           ;incstack = 0
  2928                           ; Regs used in _Lcd_Port: [wreg]
  2929                           ;Lcd_Port@a stored from wreg
  2930  055C  00F2               	movwf	Lcd_Port@a
  2931  055D                     l1694:
  2932                           
  2933                           ;LCD.c: 30:     PORTD = a;
  2934  055D  0872               	movf	Lcd_Port@a,w
  2935  055E  1283               	bcf	3,5	;RP0=0, select bank0
  2936  055F  1303               	bcf	3,6	;RP1=0, select bank0
  2937  0560  0088               	movwf	8	;volatile
  2938  0561                     l149:
  2939  0561  0008               	return
  2940  0562                     __end_of_Lcd_Port:
  2941                           
  2942                           	psect	text21
  2943  04D8                     __ptext21:	
  2944 ;; *************** function _ADC_to_string *****************
  2945 ;; Defined at:
  2946 ;;		line 167 in file "main_maestro.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;		None
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;		None
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2960 ;;      Params:         0       0       0       0       0
  2961 ;;      Locals:         0       0       0       0       0
  2962 ;;      Temps:          0       3       0       0       0
  2963 ;;      Totals:         0       3       0       0       0
  2964 ;;Total ram usage:        3 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    3
  2967 ;; This function calls:
  2968 ;;		_sprintf
  2969 ;; This function is called by:
  2970 ;;		_main
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _ADC_to_string
  2976  04D8                     _ADC_to_string:
  2977  04D8                     l1860:	
  2978                           ;incstack = 0
  2979                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2980                           
  2981                           
  2982                           ;main_maestro.c: 169:     sprintf(data, "%.3i", cont);
  2983  04D8  3025               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2984  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  2985  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  2986  04DB  00D1               	movwf	??_ADC_to_string
  2987  04DC  0851               	movf	??_ADC_to_string,w
  2988  04DD  00C4               	movwf	sprintf@f
  2989  04DE  0835               	movf	_cont,w
  2990  04DF  00D2               	movwf	??_ADC_to_string+1
  2991  04E0  01D3               	clrf	??_ADC_to_string+2
  2992  04E1  0852               	movf	??_ADC_to_string+1,w
  2993  04E2  00C5               	movwf	?_sprintf+1
  2994  04E3  0853               	movf	??_ADC_to_string+2,w
  2995  04E4  00C6               	movwf	?_sprintf+2
  2996  04E5  3036               	movlw	(low (_data| 0))& (0+255)
  2997  04E6  120A  118A  201E  120A  118A  	fcall	_sprintf
  2998  04EB                     l105:
  2999  04EB  0008               	return
  3000  04EC                     __end_of_ADC_to_string:
  3001                           
  3002                           	psect	text22
  3003  001E                     __ptext22:	
  3004 ;; *************** function _sprintf *****************
  3005 ;; Defined at:
  3006 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;  sp              1    wreg     PTR unsigned char 
  3009 ;;		 -> data(8), 
  3010 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  3011 ;;		 -> STR_3(5), 
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  3014 ;;		 -> data(8), 
  3015 ;;  tmpval          4    0        struct .
  3016 ;;  val             2   15[BANK0 ] unsigned int 
  3017 ;;  cp              2    0        PTR const unsigned char 
  3018 ;;  len             2    0        unsigned int 
  3019 ;;  c               1   18[BANK0 ] unsigned char 
  3020 ;;  prec            1   17[BANK0 ] char 
  3021 ;;  flag            1   13[BANK0 ] unsigned char 
  3022 ;;  ap              1   12[BANK0 ] PTR void [1]
  3023 ;;		 -> ?_sprintf(2), 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  2    6[BANK0 ] int 
  3026 ;; Registers used:
  3027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3033 ;;      Params:         0       3       0       0       0
  3034 ;;      Locals:         0       7       0       0       0
  3035 ;;      Temps:          0       3       0       0       0
  3036 ;;      Totals:         0      13       0       0       0
  3037 ;;Total ram usage:       13 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    2
  3040 ;; This function calls:
  3041 ;;		___bmul
  3042 ;;		___lwdiv
  3043 ;;		___lwmod
  3044 ;;		_isdigit
  3045 ;; This function is called by:
  3046 ;;		_ADC_to_string
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           
  3051                           ;psect for function _sprintf
  3052  001E                     _sprintf:
  3053                           
  3054                           ;incstack = 0
  3055                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3056                           ;sprintf@sp stored from wreg
  3057  001E  1283               	bcf	3,5	;RP0=0, select bank0
  3058  001F  1303               	bcf	3,6	;RP1=0, select bank0
  3059  0020  00CC               	movwf	sprintf@sp
  3060  0021                     l1758:
  3061                           
  3062                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  3063  0021  3045               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3064  0022  00C7               	movwf	??_sprintf
  3065  0023  0847               	movf	??_sprintf,w
  3066  0024  00CA               	movwf	sprintf@ap
  3067                           
  3068                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3069  0025  296C               	goto	l1836
  3070  0026                     l1760:
  3071                           
  3072                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  3073  0026  3025               	movlw	37
  3074  0027  0650               	xorwf	sprintf@c,w
  3075  0028  1903               	btfsc	3,2
  3076  0029  282B               	goto	u911
  3077  002A  282C               	goto	u910
  3078  002B                     u911:
  3079  002B  2838               	goto	l1766
  3080  002C                     u910:
  3081  002C                     l1762:
  3082                           
  3083                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  3084  002C  0850               	movf	sprintf@c,w
  3085  002D  00C7               	movwf	??_sprintf
  3086  002E  084C               	movf	sprintf@sp,w
  3087  002F  0084               	movwf	4
  3088  0030  0847               	movf	??_sprintf,w
  3089  0031  1383               	bcf	3,7	;select IRP bank0
  3090  0032  0080               	movwf	0
  3091  0033                     l1764:
  3092  0033  3001               	movlw	1
  3093  0034  00C7               	movwf	??_sprintf
  3094  0035  0847               	movf	??_sprintf,w
  3095  0036  07CC               	addwf	sprintf@sp,f
  3096                           
  3097                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  3098  0037  296C               	goto	l1836
  3099  0038                     l1766:
  3100                           
  3101                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  3102  0038  01CB               	clrf	sprintf@flag
  3103  0039                     l1768:
  3104                           
  3105                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  3106  0039  0844               	movf	sprintf@f,w
  3107  003A  0084               	movwf	4
  3108  003B  120A  118A  2395  120A  118A  	fcall	stringdir
  3109  0040  3A2E               	xorlw	46
  3110  0041  1D03               	skipz
  3111  0042  2844               	goto	u921
  3112  0043  2845               	goto	u920
  3113  0044                     u921:
  3114  0044  287C               	goto	l1782
  3115  0045                     u920:
  3116  0045                     l1770:
  3117                           
  3118                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  3119  0045  3001               	movlw	1
  3120  0046  00C7               	movwf	??_sprintf
  3121  0047  0847               	movf	??_sprintf,w
  3122  0048  07C4               	addwf	sprintf@f,f
  3123  0049                     l1772:
  3124                           
  3125                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  3126  0049  01CF               	clrf	sprintf@prec
  3127                           
  3128                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3129  004A  286B               	goto	l1780
  3130  004B                     l1774:
  3131                           
  3132                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  3133  004B  1283               	bcf	3,5	;RP0=0, select bank0
  3134  004C  1303               	bcf	3,6	;RP1=0, select bank0
  3135  004D  084F               	movf	sprintf@prec,w
  3136  004E  00C7               	movwf	??_sprintf
  3137  004F  0847               	movf	??_sprintf,w
  3138  0050  00F2               	movwf	___bmul@multiplicand
  3139  0051  300A               	movlw	10
  3140  0052  120A  118A  24C3  120A  118A  	fcall	___bmul
  3141  0057  1283               	bcf	3,5	;RP0=0, select bank0
  3142  0058  1303               	bcf	3,6	;RP1=0, select bank0
  3143  0059  00C8               	movwf	??_sprintf+1
  3144  005A  0848               	movf	??_sprintf+1,w
  3145  005B  00CF               	movwf	sprintf@prec
  3146  005C                     l1776:
  3147                           
  3148                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  3149  005C  0844               	movf	sprintf@f,w
  3150  005D  0084               	movwf	4
  3151  005E  120A  118A  2395  120A  118A  	fcall	stringdir
  3152  0063  3ED0               	addlw	-48
  3153  0064  00C7               	movwf	??_sprintf
  3154  0065  0847               	movf	??_sprintf,w
  3155  0066  07CF               	addwf	sprintf@prec,f
  3156  0067                     l1778:
  3157  0067  3001               	movlw	1
  3158  0068  00C7               	movwf	??_sprintf
  3159  0069  0847               	movf	??_sprintf,w
  3160  006A  07C4               	addwf	sprintf@f,f
  3161  006B                     l1780:
  3162                           
  3163                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3164  006B  0844               	movf	sprintf@f,w
  3165  006C  0084               	movwf	4
  3166  006D  120A  118A  2395  120A  118A  	fcall	stringdir
  3167  0072  120A  118A  24FE  120A  118A  	fcall	_isdigit
  3168  0077  1803               	btfsc	3,0
  3169  0078  287A               	goto	u931
  3170  0079  287B               	goto	u930
  3171  007A                     u931:
  3172  007A  284B               	goto	l1774
  3173  007B                     u930:
  3174  007B  287D               	goto	l1786
  3175  007C                     l1782:
  3176                           
  3177                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  3178  007C  01CF               	clrf	sprintf@prec
  3179  007D                     l1786:
  3180  007D  3001               	movlw	1
  3181  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3182  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3183  0080  07C4               	addwf	sprintf@f,f
  3184  0081  30FF               	movlw	-1
  3185  0082  0744               	addwf	sprintf@f,w
  3186  0083  0084               	movwf	4
  3187  0084  120A  118A  2395  120A  118A  	fcall	stringdir
  3188  0089  00D0               	movwf	sprintf@c
  3189  008A  00C7               	movwf	??_sprintf
  3190  008B  01C8               	clrf	??_sprintf+1
  3191                           
  3192                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3193                           ; Switch size 1, requested type "simple"
  3194                           ; Number of cases is 1, Range of values is 0 to 0
  3195                           ; switch strategies available:
  3196                           ; Name         Instructions Cycles
  3197                           ; simple_byte            4     3 (average)
  3198                           ; direct_byte           11     8 (fixed)
  3199                           ; jumptable            260     6 (fixed)
  3200                           ;	Chosen strategy is simple_byte
  3201  008C  0848               	movf	??_sprintf+1,w
  3202  008D  3A00               	xorlw	0	; case 0
  3203  008E  1903               	skipnz
  3204  008F  2891               	goto	l1954
  3205  0090  296C               	goto	l1836
  3206  0091                     l1954:
  3207                           
  3208                           ; Switch size 1, requested type "simple"
  3209                           ; Number of cases is 3, Range of values is 0 to 105
  3210                           ; switch strategies available:
  3211                           ; Name         Instructions Cycles
  3212                           ; simple_byte           10     6 (average)
  3213                           ; jumptable            260     6 (fixed)
  3214                           ;	Chosen strategy is simple_byte
  3215  0091  0847               	movf	??_sprintf,w
  3216  0092  3A00               	xorlw	0	; case 0
  3217  0093  1903               	skipnz
  3218  0094  297E               	goto	l1838
  3219  0095  3A64               	xorlw	100	; case 100
  3220  0096  1903               	skipnz
  3221  0097  289C               	goto	l1788
  3222  0098  3A0D               	xorlw	13	; case 105
  3223  0099  1903               	skipnz
  3224  009A  289C               	goto	l1788
  3225  009B  296C               	goto	l1836
  3226  009C                     l1788:
  3227                           
  3228                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3229  009C  084A               	movf	sprintf@ap,w
  3230  009D  0084               	movwf	4
  3231  009E  1383               	bcf	3,7	;select IRP bank0
  3232  009F  0800               	movf	0,w
  3233  00A0  00CD               	movwf	sprintf@val
  3234  00A1  0A84               	incf	4,f
  3235  00A2  0800               	movf	0,w
  3236  00A3  00CE               	movwf	sprintf@val+1
  3237  00A4                     l1790:
  3238  00A4  3002               	movlw	2
  3239  00A5  00C7               	movwf	??_sprintf
  3240  00A6  0847               	movf	??_sprintf,w
  3241  00A7  07CA               	addwf	sprintf@ap,f
  3242  00A8                     l1792:
  3243                           
  3244                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  3245  00A8  1FCE               	btfss	sprintf@val+1,7
  3246  00A9  28AB               	goto	u941
  3247  00AA  28AC               	goto	u940
  3248  00AB                     u941:
  3249  00AB  28B5               	goto	l1798
  3250  00AC                     u940:
  3251  00AC                     l1794:
  3252                           
  3253                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  3254  00AC  3003               	movlw	3
  3255  00AD  00C7               	movwf	??_sprintf
  3256  00AE  0847               	movf	??_sprintf,w
  3257  00AF  04CB               	iorwf	sprintf@flag,f
  3258  00B0                     l1796:
  3259                           
  3260                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  3261  00B0  09CD               	comf	sprintf@val,f
  3262  00B1  09CE               	comf	sprintf@val+1,f
  3263  00B2  0ACD               	incf	sprintf@val,f
  3264  00B3  1903               	skipnz
  3265  00B4  0ACE               	incf	sprintf@val+1,f
  3266  00B5                     l1798:
  3267                           
  3268                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  3269  00B5  084F               	movf	sprintf@prec,w
  3270  00B6  1D03               	btfss	3,2
  3271  00B7  28B9               	goto	u951
  3272  00B8  28BA               	goto	u950
  3273  00B9                     u951:
  3274  00B9  28C4               	goto	l1804
  3275  00BA                     u950:
  3276  00BA                     l1800:
  3277  00BA  084D               	movf	sprintf@val,w
  3278  00BB  044E               	iorwf	sprintf@val+1,w
  3279  00BC  1D03               	btfss	3,2
  3280  00BD  28BF               	goto	u961
  3281  00BE  28C0               	goto	u960
  3282  00BF                     u961:
  3283  00BF  28C4               	goto	l1804
  3284  00C0                     u960:
  3285  00C0                     l1802:
  3286                           
  3287                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  3288  00C0  3001               	movlw	1
  3289  00C1  00C7               	movwf	??_sprintf
  3290  00C2  0847               	movf	??_sprintf,w
  3291  00C3  07CF               	addwf	sprintf@prec,f
  3292  00C4                     l1804:
  3293                           
  3294                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3295  00C4  01D0               	clrf	sprintf@c
  3296  00C5  0AD0               	incf	sprintf@c,f
  3297  00C6                     l1808:
  3298                           
  3299                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3300  00C6  0850               	movf	sprintf@c,w
  3301  00C7  00C7               	movwf	??_sprintf
  3302  00C8  0747               	addwf	??_sprintf,w
  3303  00C9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3304  00CA  0084               	movwf	4
  3305  00CB  120A  118A  2395  120A  118A  	fcall	stringdir
  3306  00D0  00C8               	movwf	??_sprintf+1
  3307  00D1  120A  118A  2395  120A  118A  	fcall	stringdir
  3308  00D6  00C9               	movwf	??_sprintf+2
  3309  00D7  0849               	movf	??_sprintf+2,w
  3310  00D8  024E               	subwf	sprintf@val+1,w
  3311  00D9  1D03               	skipz
  3312  00DA  28DD               	goto	u975
  3313  00DB  0848               	movf	??_sprintf+1,w
  3314  00DC  024D               	subwf	sprintf@val,w
  3315  00DD                     u975:
  3316  00DD  1803               	skipnc
  3317  00DE  28E0               	goto	u971
  3318  00DF  28E1               	goto	u970
  3319  00E0                     u971:
  3320  00E0  28E2               	goto	l1812
  3321  00E1                     u970:
  3322  00E1  28EC               	goto	l1814
  3323  00E2                     l1812:
  3324  00E2  3001               	movlw	1
  3325  00E3  00C7               	movwf	??_sprintf
  3326  00E4  0847               	movf	??_sprintf,w
  3327  00E5  07D0               	addwf	sprintf@c,f
  3328  00E6  3005               	movlw	5
  3329  00E7  0650               	xorwf	sprintf@c,w
  3330  00E8  1D03               	btfss	3,2
  3331  00E9  28EB               	goto	u981
  3332  00EA  28EC               	goto	u980
  3333  00EB                     u981:
  3334  00EB  28C6               	goto	l1808
  3335  00EC                     u980:
  3336  00EC                     l1814:
  3337                           
  3338                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  3339  00EC  084F               	movf	sprintf@prec,w
  3340  00ED  00C7               	movwf	??_sprintf
  3341  00EE  01C8               	clrf	??_sprintf+1
  3342  00EF  1BC7               	btfsc	??_sprintf,7
  3343  00F0  03C8               	decf	??_sprintf+1,f
  3344  00F1  0848               	movf	??_sprintf+1,w
  3345  00F2  3A80               	xorlw	128
  3346  00F3  3C80               	sublw	128
  3347  00F4  1D03               	skipz
  3348  00F5  28F8               	goto	u995
  3349  00F6  0847               	movf	??_sprintf,w
  3350  00F7  0250               	subwf	sprintf@c,w
  3351  00F8                     u995:
  3352  00F8  1803               	skipnc
  3353  00F9  28FB               	goto	u991
  3354  00FA  28FC               	goto	u990
  3355  00FB                     u991:
  3356  00FB  28FD               	goto	l1818
  3357  00FC                     u990:
  3358  00FC                     l1816:
  3359  00FC  2917               	goto	l1822
  3360  00FD                     l1818:
  3361  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3362  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  3363  00FF  084F               	movf	sprintf@prec,w
  3364  0100  00C7               	movwf	??_sprintf
  3365  0101  01C8               	clrf	??_sprintf+1
  3366  0102  1BC7               	btfsc	??_sprintf,7
  3367  0103  03C8               	decf	??_sprintf+1,f
  3368  0104  0848               	movf	??_sprintf+1,w
  3369  0105  3A80               	xorlw	128
  3370  0106  00C9               	movwf	??_sprintf+2
  3371  0107  3080               	movlw	128
  3372  0108  0249               	subwf	??_sprintf+2,w
  3373  0109  1D03               	skipz
  3374  010A  290D               	goto	u1005
  3375  010B  0850               	movf	sprintf@c,w
  3376  010C  0247               	subwf	??_sprintf,w
  3377  010D                     u1005:
  3378  010D  1803               	skipnc
  3379  010E  2910               	goto	u1001
  3380  010F  2911               	goto	u1000
  3381  0110                     u1001:
  3382  0110  2917               	goto	l1822
  3383  0111                     u1000:
  3384  0111                     l1820:
  3385                           
  3386                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
  3387  0111  1283               	bcf	3,5	;RP0=0, select bank0
  3388  0112  1303               	bcf	3,6	;RP1=0, select bank0
  3389  0113  0850               	movf	sprintf@c,w
  3390  0114  00C7               	movwf	??_sprintf
  3391  0115  0847               	movf	??_sprintf,w
  3392  0116  00CF               	movwf	sprintf@prec
  3393  0117                     l1822:
  3394                           
  3395                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  3396  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0118  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0119  084B               	movf	sprintf@flag,w
  3399  011A  3903               	andlw	3
  3400  011B  1903               	btfsc	3,2
  3401  011C  291E               	goto	u1011
  3402  011D  291F               	goto	u1010
  3403  011E                     u1011:
  3404  011E  2963               	goto	l1834
  3405  011F                     u1010:
  3406  011F                     l1824:
  3407                           
  3408                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  3409  011F  302D               	movlw	45
  3410  0120  00C7               	movwf	??_sprintf
  3411  0121  084C               	movf	sprintf@sp,w
  3412  0122  0084               	movwf	4
  3413  0123  0847               	movf	??_sprintf,w
  3414  0124  1383               	bcf	3,7	;select IRP bank0
  3415  0125  0080               	movwf	0
  3416  0126                     l1826:
  3417  0126  3001               	movlw	1
  3418  0127  00C7               	movwf	??_sprintf
  3419  0128  0847               	movf	??_sprintf,w
  3420  0129  07CC               	addwf	sprintf@sp,f
  3421  012A  2963               	goto	l1834
  3422  012B                     l1828:
  3423                           
  3424                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  3425  012B  300A               	movlw	10
  3426  012C  00BE               	movwf	___lwmod@divisor
  3427  012D  3000               	movlw	0
  3428  012E  00BF               	movwf	___lwmod@divisor+1
  3429  012F  084F               	movf	sprintf@prec,w
  3430  0130  00C7               	movwf	??_sprintf
  3431  0131  0747               	addwf	??_sprintf,w
  3432  0132  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3433  0133  0084               	movwf	4
  3434  0134  120A  118A  2395  120A  118A  	fcall	stringdir
  3435  0139  00F2               	movwf	___lwdiv@divisor
  3436  013A  120A  118A  2395  120A  118A  	fcall	stringdir
  3437  013F  00F3               	movwf	___lwdiv@divisor+1
  3438  0140  084E               	movf	sprintf@val+1,w
  3439  0141  00F5               	movwf	___lwdiv@dividend+1
  3440  0142  084D               	movf	sprintf@val,w
  3441  0143  00F4               	movwf	___lwdiv@dividend
  3442  0144  120A  118A  22CE  120A  118A  	fcall	___lwdiv
  3443  0149  0873               	movf	?___lwdiv+1,w
  3444  014A  1283               	bcf	3,5	;RP0=0, select bank0
  3445  014B  1303               	bcf	3,6	;RP1=0, select bank0
  3446  014C  00C1               	movwf	___lwmod@dividend+1
  3447  014D  0872               	movf	?___lwdiv,w
  3448  014E  00C0               	movwf	___lwmod@dividend
  3449  014F  120A  118A  234F  120A  118A  	fcall	___lwmod
  3450  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0156  083E               	movf	?___lwmod,w
  3453  0157  3E30               	addlw	48
  3454  0158  00C8               	movwf	??_sprintf+1
  3455  0159  0848               	movf	??_sprintf+1,w
  3456  015A  00D0               	movwf	sprintf@c
  3457  015B                     l1830:
  3458                           
  3459                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  3460  015B  0850               	movf	sprintf@c,w
  3461  015C  00C7               	movwf	??_sprintf
  3462  015D  084C               	movf	sprintf@sp,w
  3463  015E  0084               	movwf	4
  3464  015F  0847               	movf	??_sprintf,w
  3465  0160  1383               	bcf	3,7	;select IRP bank0
  3466  0161  0080               	movwf	0
  3467  0162  2926               	goto	l1826
  3468  0163                     l1834:
  3469                           
  3470                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  3471  0163  30FF               	movlw	255
  3472  0164  00C7               	movwf	??_sprintf
  3473  0165  0847               	movf	??_sprintf,w
  3474  0166  07CF               	addwf	sprintf@prec,f
  3475  0167  0A4F               	incf	sprintf@prec,w
  3476  0168  1D03               	btfss	3,2
  3477  0169  296B               	goto	u1021
  3478  016A  296C               	goto	u1020
  3479  016B                     u1021:
  3480  016B  292B               	goto	l1828
  3481  016C                     u1020:
  3482  016C                     l1836:
  3483                           
  3484                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3485  016C  3001               	movlw	1
  3486  016D  07C4               	addwf	sprintf@f,f
  3487  016E  30FF               	movlw	-1
  3488  016F  0744               	addwf	sprintf@f,w
  3489  0170  0084               	movwf	4
  3490  0171  120A  118A  2395  120A  118A  	fcall	stringdir
  3491  0176  00C7               	movwf	??_sprintf
  3492  0177  0847               	movf	??_sprintf,w
  3493  0178  00D0               	movwf	sprintf@c
  3494  0179  0850               	movf	sprintf@c,w
  3495  017A  1D03               	btfss	3,2
  3496  017B  297D               	goto	u1031
  3497  017C  297E               	goto	u1030
  3498  017D                     u1031:
  3499  017D  2826               	goto	l1760
  3500  017E                     u1030:
  3501  017E                     l1838:
  3502                           
  3503                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  3504  017E  084C               	movf	sprintf@sp,w
  3505  017F  0084               	movwf	4
  3506  0180  1383               	bcf	3,7	;select IRP bank0
  3507  0181  0180               	clrf	0
  3508  0182                     l378:
  3509  0182  0008               	return
  3510  0183                     __end_of_sprintf:
  3511                           
  3512                           	psect	text23
  3513  04FE                     __ptext23:	
  3514 ;; *************** function _isdigit *****************
  3515 ;; Defined at:
  3516 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  c               1    wreg     unsigned char 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  c               1    3[COMMON] unsigned char 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;		None               void
  3523 ;; Registers used:
  3524 ;;		wreg, status,2, status,0
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3530 ;;      Params:         0       0       0       0       0
  3531 ;;      Locals:         2       0       0       0       0
  3532 ;;      Temps:          0       0       0       0       0
  3533 ;;      Totals:         2       0       0       0       0
  3534 ;;Total ram usage:        2 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    1
  3537 ;; This function calls:
  3538 ;;		Nothing
  3539 ;; This function is called by:
  3540 ;;		_sprintf
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           
  3545                           ;psect for function _isdigit
  3546  04FE                     _isdigit:
  3547                           
  3548                           ;incstack = 0
  3549                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3550                           ;isdigit@c stored from wreg
  3551  04FE  00F3               	movwf	isdigit@c
  3552  04FF                     l1288:
  3553  04FF  01F2               	clrf	_isdigit$973
  3554  0500                     l1290:
  3555  0500  303A               	movlw	58
  3556  0501  0273               	subwf	isdigit@c,w
  3557  0502  1803               	skipnc
  3558  0503  2D05               	goto	u421
  3559  0504  2D06               	goto	u420
  3560  0505                     u421:
  3561  0505  2D0E               	goto	l1296
  3562  0506                     u420:
  3563  0506                     l1292:
  3564  0506  3030               	movlw	48
  3565  0507  0273               	subwf	isdigit@c,w
  3566  0508  1C03               	skipc
  3567  0509  2D0B               	goto	u431
  3568  050A  2D0C               	goto	u430
  3569  050B                     u431:
  3570  050B  2D0E               	goto	l1296
  3571  050C                     u430:
  3572  050C                     l1294:
  3573  050C  01F2               	clrf	_isdigit$973
  3574  050D  0AF2               	incf	_isdigit$973,f
  3575  050E                     l1296:
  3576  050E  0C72               	rrf	_isdigit$973,w
  3577  050F                     l810:
  3578  050F  0008               	return
  3579  0510                     __end_of_isdigit:
  3580                           
  3581                           	psect	text24
  3582  034F                     __ptext24:	
  3583 ;; *************** function ___lwmod *****************
  3584 ;; Defined at:
  3585 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  divisor         2    0[BANK0 ] unsigned int 
  3588 ;;  dividend        2    2[BANK0 ] unsigned int 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;  counter         1    5[BANK0 ] unsigned char 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  2    0[BANK0 ] unsigned int 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3600 ;;      Params:         0       4       0       0       0
  3601 ;;      Locals:         0       1       0       0       0
  3602 ;;      Temps:          0       1       0       0       0
  3603 ;;      Totals:         0       6       0       0       0
  3604 ;;Total ram usage:        6 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    1
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_sprintf
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function ___lwmod
  3616  034F                     ___lwmod:
  3617  034F                     l1716:	
  3618                           ;incstack = 0
  3619                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3620                           
  3621  034F  1283               	bcf	3,5	;RP0=0, select bank0
  3622  0350  1303               	bcf	3,6	;RP1=0, select bank0
  3623  0351  083E               	movf	___lwmod@divisor,w
  3624  0352  043F               	iorwf	___lwmod@divisor+1,w
  3625  0353  1903               	btfsc	3,2
  3626  0354  2B56               	goto	u801
  3627  0355  2B57               	goto	u800
  3628  0356                     u801:
  3629  0356  2B86               	goto	l1734
  3630  0357                     u800:
  3631  0357                     l1718:
  3632  0357  01C3               	clrf	___lwmod@counter
  3633  0358  0AC3               	incf	___lwmod@counter,f
  3634  0359  2B65               	goto	l1724
  3635  035A                     l1720:
  3636  035A  3001               	movlw	1
  3637  035B                     u815:
  3638  035B  1003               	clrc
  3639  035C  0DBE               	rlf	___lwmod@divisor,f
  3640  035D  0DBF               	rlf	___lwmod@divisor+1,f
  3641  035E  3EFF               	addlw	-1
  3642  035F  1D03               	skipz
  3643  0360  2B5B               	goto	u815
  3644  0361                     l1722:
  3645  0361  3001               	movlw	1
  3646  0362  00C2               	movwf	??___lwmod
  3647  0363  0842               	movf	??___lwmod,w
  3648  0364  07C3               	addwf	___lwmod@counter,f
  3649  0365                     l1724:
  3650  0365  1FBF               	btfss	___lwmod@divisor+1,7
  3651  0366  2B68               	goto	u821
  3652  0367  2B69               	goto	u820
  3653  0368                     u821:
  3654  0368  2B5A               	goto	l1720
  3655  0369                     u820:
  3656  0369                     l1726:
  3657  0369  083F               	movf	___lwmod@divisor+1,w
  3658  036A  0241               	subwf	___lwmod@dividend+1,w
  3659  036B  1D03               	skipz
  3660  036C  2B6F               	goto	u835
  3661  036D  083E               	movf	___lwmod@divisor,w
  3662  036E  0240               	subwf	___lwmod@dividend,w
  3663  036F                     u835:
  3664  036F  1C03               	skipc
  3665  0370  2B72               	goto	u831
  3666  0371  2B73               	goto	u830
  3667  0372                     u831:
  3668  0372  2B79               	goto	l1730
  3669  0373                     u830:
  3670  0373                     l1728:
  3671  0373  083E               	movf	___lwmod@divisor,w
  3672  0374  02C0               	subwf	___lwmod@dividend,f
  3673  0375  083F               	movf	___lwmod@divisor+1,w
  3674  0376  1C03               	skipc
  3675  0377  03C1               	decf	___lwmod@dividend+1,f
  3676  0378  02C1               	subwf	___lwmod@dividend+1,f
  3677  0379                     l1730:
  3678  0379  3001               	movlw	1
  3679  037A                     u845:
  3680  037A  1003               	clrc
  3681  037B  0CBF               	rrf	___lwmod@divisor+1,f
  3682  037C  0CBE               	rrf	___lwmod@divisor,f
  3683  037D  3EFF               	addlw	-1
  3684  037E  1D03               	skipz
  3685  037F  2B7A               	goto	u845
  3686  0380                     l1732:
  3687  0380  3001               	movlw	1
  3688  0381  02C3               	subwf	___lwmod@counter,f
  3689  0382  1D03               	btfss	3,2
  3690  0383  2B85               	goto	u851
  3691  0384  2B86               	goto	u850
  3692  0385                     u851:
  3693  0385  2B69               	goto	l1726
  3694  0386                     u850:
  3695  0386                     l1734:
  3696  0386  0841               	movf	___lwmod@dividend+1,w
  3697  0387  00BF               	movwf	?___lwmod+1
  3698  0388  0840               	movf	___lwmod@dividend,w
  3699  0389  00BE               	movwf	?___lwmod
  3700  038A                     l800:
  3701  038A  0008               	return
  3702  038B                     __end_of___lwmod:
  3703                           
  3704                           	psect	text25
  3705  02CE                     __ptext25:	
  3706 ;; *************** function ___lwdiv *****************
  3707 ;; Defined at:
  3708 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  3709 ;; Parameters:    Size  Location     Type
  3710 ;;  divisor         2    2[COMMON] unsigned int 
  3711 ;;  dividend        2    4[COMMON] unsigned int 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  quotient        2    7[COMMON] unsigned int 
  3714 ;;  counter         1    9[COMMON] unsigned char 
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  2    2[COMMON] unsigned int 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3724 ;;      Params:         4       0       0       0       0
  3725 ;;      Locals:         3       0       0       0       0
  3726 ;;      Temps:          1       0       0       0       0
  3727 ;;      Totals:         8       0       0       0       0
  3728 ;;Total ram usage:        8 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    1
  3731 ;; This function calls:
  3732 ;;		Nothing
  3733 ;; This function is called by:
  3734 ;;		_sprintf
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           
  3739                           ;psect for function ___lwdiv
  3740  02CE                     ___lwdiv:
  3741  02CE                     l1314:	
  3742                           ;incstack = 0
  3743                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3744                           
  3745  02CE  01F7               	clrf	___lwdiv@quotient
  3746  02CF  01F8               	clrf	___lwdiv@quotient+1
  3747  02D0                     l1316:
  3748  02D0  0872               	movf	___lwdiv@divisor,w
  3749  02D1  0473               	iorwf	___lwdiv@divisor+1,w
  3750  02D2  1903               	btfsc	3,2
  3751  02D3  2AD5               	goto	u461
  3752  02D4  2AD6               	goto	u460
  3753  02D5                     u461:
  3754  02D5  2B0D               	goto	l1336
  3755  02D6                     u460:
  3756  02D6                     l1318:
  3757  02D6  01F9               	clrf	___lwdiv@counter
  3758  02D7  0AF9               	incf	___lwdiv@counter,f
  3759  02D8  2AE4               	goto	l1324
  3760  02D9                     l1320:
  3761  02D9  3001               	movlw	1
  3762  02DA                     u475:
  3763  02DA  1003               	clrc
  3764  02DB  0DF2               	rlf	___lwdiv@divisor,f
  3765  02DC  0DF3               	rlf	___lwdiv@divisor+1,f
  3766  02DD  3EFF               	addlw	-1
  3767  02DE  1D03               	skipz
  3768  02DF  2ADA               	goto	u475
  3769  02E0                     l1322:
  3770  02E0  3001               	movlw	1
  3771  02E1  00F6               	movwf	??___lwdiv
  3772  02E2  0876               	movf	??___lwdiv,w
  3773  02E3  07F9               	addwf	___lwdiv@counter,f
  3774  02E4                     l1324:
  3775  02E4  1FF3               	btfss	___lwdiv@divisor+1,7
  3776  02E5  2AE7               	goto	u481
  3777  02E6  2AE8               	goto	u480
  3778  02E7                     u481:
  3779  02E7  2AD9               	goto	l1320
  3780  02E8                     u480:
  3781  02E8                     l1326:
  3782  02E8  3001               	movlw	1
  3783  02E9                     u495:
  3784  02E9  1003               	clrc
  3785  02EA  0DF7               	rlf	___lwdiv@quotient,f
  3786  02EB  0DF8               	rlf	___lwdiv@quotient+1,f
  3787  02EC  3EFF               	addlw	-1
  3788  02ED  1D03               	skipz
  3789  02EE  2AE9               	goto	u495
  3790  02EF  0873               	movf	___lwdiv@divisor+1,w
  3791  02F0  0275               	subwf	___lwdiv@dividend+1,w
  3792  02F1  1D03               	skipz
  3793  02F2  2AF5               	goto	u505
  3794  02F3  0872               	movf	___lwdiv@divisor,w
  3795  02F4  0274               	subwf	___lwdiv@dividend,w
  3796  02F5                     u505:
  3797  02F5  1C03               	skipc
  3798  02F6  2AF8               	goto	u501
  3799  02F7  2AF9               	goto	u500
  3800  02F8                     u501:
  3801  02F8  2B00               	goto	l1332
  3802  02F9                     u500:
  3803  02F9                     l1328:
  3804  02F9  0872               	movf	___lwdiv@divisor,w
  3805  02FA  02F4               	subwf	___lwdiv@dividend,f
  3806  02FB  0873               	movf	___lwdiv@divisor+1,w
  3807  02FC  1C03               	skipc
  3808  02FD  03F5               	decf	___lwdiv@dividend+1,f
  3809  02FE  02F5               	subwf	___lwdiv@dividend+1,f
  3810  02FF                     l1330:
  3811  02FF  1477               	bsf	___lwdiv@quotient,0
  3812  0300                     l1332:
  3813  0300  3001               	movlw	1
  3814  0301                     u515:
  3815  0301  1003               	clrc
  3816  0302  0CF3               	rrf	___lwdiv@divisor+1,f
  3817  0303  0CF2               	rrf	___lwdiv@divisor,f
  3818  0304  3EFF               	addlw	-1
  3819  0305  1D03               	skipz
  3820  0306  2B01               	goto	u515
  3821  0307                     l1334:
  3822  0307  3001               	movlw	1
  3823  0308  02F9               	subwf	___lwdiv@counter,f
  3824  0309  1D03               	btfss	3,2
  3825  030A  2B0C               	goto	u521
  3826  030B  2B0D               	goto	u520
  3827  030C                     u521:
  3828  030C  2AE8               	goto	l1326
  3829  030D                     u520:
  3830  030D                     l1336:
  3831  030D  0878               	movf	___lwdiv@quotient+1,w
  3832  030E  00F3               	movwf	?___lwdiv+1
  3833  030F  0877               	movf	___lwdiv@quotient,w
  3834  0310  00F2               	movwf	?___lwdiv
  3835  0311                     l790:
  3836  0311  0008               	return
  3837  0312                     __end_of___lwdiv:
  3838                           
  3839                           	psect	text26
  3840  04C3                     __ptext26:	
  3841 ;; *************** function ___bmul *****************
  3842 ;; Defined at:
  3843 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  multiplier      1    wreg     unsigned char 
  3846 ;;  multiplicand    1    2[COMMON] unsigned char 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  multiplier      1    5[COMMON] unsigned char 
  3849 ;;  product         1    4[COMMON] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      unsigned char 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3859 ;;      Params:         1       0       0       0       0
  3860 ;;      Locals:         2       0       0       0       0
  3861 ;;      Temps:          1       0       0       0       0
  3862 ;;      Totals:         4       0       0       0       0
  3863 ;;Total ram usage:        4 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:    1
  3866 ;; This function calls:
  3867 ;;		Nothing
  3868 ;; This function is called by:
  3869 ;;		_sprintf
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           
  3874                           ;psect for function ___bmul
  3875  04C3                     ___bmul:
  3876                           
  3877                           ;incstack = 0
  3878                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3879                           ;___bmul@multiplier stored from wreg
  3880  04C3  00F5               	movwf	___bmul@multiplier
  3881  04C4                     l1300:
  3882  04C4  01F4               	clrf	___bmul@product
  3883  04C5                     l1302:
  3884  04C5  1C75               	btfss	___bmul@multiplier,0
  3885  04C6  2CC8               	goto	u441
  3886  04C7  2CC9               	goto	u440
  3887  04C8                     u441:
  3888  04C8  2CCD               	goto	l1306
  3889  04C9                     u440:
  3890  04C9                     l1304:
  3891  04C9  0872               	movf	___bmul@multiplicand,w
  3892  04CA  00F3               	movwf	??___bmul
  3893  04CB  0873               	movf	??___bmul,w
  3894  04CC  07F4               	addwf	___bmul@product,f
  3895  04CD                     l1306:
  3896  04CD  1003               	clrc
  3897  04CE  0DF2               	rlf	___bmul@multiplicand,f
  3898  04CF                     l1308:
  3899  04CF  1003               	clrc
  3900  04D0  0CF5               	rrf	___bmul@multiplier,f
  3901  04D1  0875               	movf	___bmul@multiplier,w
  3902  04D2  1D03               	btfss	3,2
  3903  04D3  2CD5               	goto	u451
  3904  04D4  2CD6               	goto	u450
  3905  04D5                     u451:
  3906  04D5  2CC5               	goto	l1302
  3907  04D6                     u450:
  3908  04D6                     l1310:
  3909  04D6  0874               	movf	___bmul@product,w
  3910  04D7                     l408:
  3911  04D7  0008               	return
  3912  04D8                     __end_of___bmul:
  3913                           
  3914                           	psect	text27
  3915  0549                     __ptext27:	
  3916 ;; *************** function _ISR *****************
  3917 ;; Defined at:
  3918 ;;		line 82 in file "main_maestro.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;                  1    wreg      void 
  3925 ;; Registers used:
  3926 ;;		None
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3932 ;;      Params:         0       0       0       0       0
  3933 ;;      Locals:         0       0       0       0       0
  3934 ;;      Temps:          2       0       0       0       0
  3935 ;;      Totals:         2       0       0       0       0
  3936 ;;Total ram usage:        2 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		Interrupt level 1
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _ISR
  3947  0549                     _ISR:
  3948  0549                     i1l91:
  3949  0549  0871               	movf	??_ISR+1,w
  3950  054A  008A               	movwf	10
  3951  054B  0E70               	swapf	??_ISR,w
  3952  054C  0083               	movwf	3
  3953  054D  0EFE               	swapf	btemp,f
  3954  054E  0E7E               	swapf	btemp,w
  3955  054F  0009               	retfie
  3956  0550                     __end_of_ISR:
  3957  007E                     btemp	set	126	;btemp
  3958  007E                     wtemp0	set	126
  3959                           
  3960                           	psect	intentry
  3961  0004                     __pintentry:	
  3962                           ;incstack = 0
  3963                           ; Regs used in _ISR: []
  3964                           
  3965  0004                     interrupt_function:
  3966  007E                     saved_w	set	btemp
  3967  0004  00FE               	movwf	btemp
  3968  0005  0E03               	swapf	3,w
  3969  0006  00F0               	movwf	??_ISR
  3970  0007  080A               	movf	10,w
  3971  0008  00F1               	movwf	??_ISR+1
  3972  0009  120A  118A  2D49   	ljmp	_ISR
  3973                           
  3974                           	psect	config
  3975                           
  3976                           ;Config register CONFIG1 @ 0x2007
  3977                           ;	Oscillator Selection bits
  3978                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  3979                           ;	Watchdog Timer Enable bit
  3980                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3981                           ;	Power-up Timer Enable bit
  3982                           ;	PWRTE = OFF, PWRT disabled
  3983                           ;	RE3/MCLR pin function select bit
  3984                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3985                           ;	Code Protection bit
  3986                           ;	CP = OFF, Program memory code protection is disabled
  3987                           ;	Data Code Protection bit
  3988                           ;	CPD = OFF, Data memory code protection is disabled
  3989                           ;	Brown Out Reset Selection bits
  3990                           ;	BOREN = OFF, BOR disabled
  3991                           ;	Internal External Switchover bit
  3992                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3993                           ;	Fail-Safe Clock Monitor Enabled bit
  3994                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3995                           ;	Low Voltage Programming Enable bit
  3996                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3997                           ;	In-Circuit Debugger Mode bit
  3998                           ;	DEBUG = 0x1, unprogrammed default
  3999  2007                     	org	8199
  4000  2007  20D6               	dw	8406
  4001                           
  4002                           ;Config register CONFIG2 @ 0x2008
  4003                           ;	Brown-out Reset Selection bit
  4004                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4005                           ;	Flash Program Memory Self Write Enable bits
  4006                           ;	WRT = OFF, Write protection off
  4007  2008                     	org	8200
  4008  2008  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    10
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     22      52
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> data(BANK0[8]), STR_2(CODE[9]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> data(BANK0[8]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _SPI_CONT->_spiWrite
    _SPI_ADC->_spiWrite
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _ADC_to_string->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4163
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _SPI_ADC
                           _SPI_CONT
                       _Show_val_LCD
                        _Write_USART
                 _Write_USART_String
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   4     2      2     218
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         0     0      0     706
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     322
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     384
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _SPI_CONT                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_ADC                                              3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0    1999
                                             19 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1999
                                              6 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     145
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _isdigit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SPI_ADC
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_CONT
     _spiRead
       _spiReceiveWait
     _spiWrite
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Write_USART
   _Write_USART_String
     _Write_USART
   _setup
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      40       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      34       5       65.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      40      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 11:42:20 2021

                           pc 0002                ___bmul@product 0074                   _SSPSTATbits 0094  
                          fsr 0004          __size_of_Write_USART 000C                           l102 034E  
                         l111 03F9                           l105 04EB                           l114 042D  
                         l202 0555                           l130 0207                           l211 0528  
                         l131 020D                           l123 01E3                           l108 04FD  
                         l132 0213                           l124 023B                           l133 023C  
                         l125 01E9                           l126 01EF                           l127 01F5  
                         l152 0496                           l208 051E                           l128 01FB  
                         l240 04AC                           l161 047C                           l217 0458  
                         l129 0201                           l146 0287                           l170 02CD  
                         l155 051C                           l243 0542                           l164 04C2  
                         l149 0561                           l246 0548                           l239 04A7  
                         l408 04D7                           l257 0531                           l249 055B  
                         l199 0541                           l800 038A                           l810 050F  
                         l378 0182                           l790 0311                           _RC0 0038  
                         _RC1 0039                           _RC2 003A                           u410 0548  
                         u411 0547                           u500 02F9                           u420 0506  
                         u501 02F8                           u421 0505                           u430 050C  
                         u431 050B                           u440 04C9                           u520 030D  
                         u441 04C8                           u521 030C                           u505 02F5  
                         u450 04D6                           u451 04D5                           u515 0301  
                         u460 02D6                           _ISR 0549                           u461 02D5  
                         u480 02E8                           u800 0357                           u640 0524  
                         u481 02E7                           u801 0356                           u641 0523  
                         u650 049F                           u475 02DA                           u651 049E  
                         u820 0369                           u900 02CD                           u821 0368  
                         u901 02CC                           u830 0373                           u910 002C  
                         u495 02E9                           u831 0372                           u815 035B  
                         u911 002B                           u920 0045                           u921 0044  
                         u850 0386                           u930 007B                           u851 0385  
                         u835 036F                           u931 007A                           u940 00AC  
                         u860 045F                           u845 037A                           u941 00AB  
                         u861 045E                           u950 00BA                           u870 0471  
                         u790 0458                           u951 00B9                           u871 0470  
                         u791 0457                           u960 00C0                           u880 0297  
                         u961 00BF                           u970 00E1                           u890 02BB  
                         u971 00E0                           u980 00EC                           u981 00EB  
                         u990 00FC                           u991 00FB                           u975 00DD  
                         u995 00F8                           fsr0 0004                           indf 0000  
 __size_of_Write_USART_String 002B                          ?_ISR 0070                          l1300 04C4  
                        l1310 04D6                          l1302 04C5                          l1304 04C9  
                        l1320 02D9                          l1400 053A                          l1306 04CD  
                        l1330 02FF                          l1322 02E0                          l1314 02CE  
                        l1410 04A6                          l1402 0498                          l1308 04CF  
                        l1332 0300                          l1324 02E4                          l1316 02D0  
                        l1404 049F                          l1334 0307                          l1326 02E8  
                        l1318 02D6                          l1502 0557                          l1406 04A1  
                        l1510 0312                          l1328 02F9                          l1336 030D  
                        l1504 0529                          l1408 04A3                          l1520 0320  
                        l1512 0318                          l1290 0500                          l1506 052E  
                        l1530 0327                          l1522 0321                          l1514 031B  
                        l1292 0506                          l1700 0487                          l1540 0332  
                        l1532 0328                          l1524 0322                          l1516 031C  
                        l1294 050C                          l1702 048A                          l1286 0542  
                        l1710 04B7                          l1382 051E                          l1390 0219  
                        l1550 0345                          l1542 0335                          l1534 0329  
                        l1526 0325                          l1518 031F                          l1720 035A  
                        l1296 050E                          l1288 04FF                          l1800 00BA  
                        l1704 0493                          l1712 04BA                          l1384 0524  
                        l1544 0338                          l1536 032C                          l1528 0326  
                        l1730 0379                          l1722 0361                          l1802 00C0  
                        l1570 03D6                          l1714 04BF                          l1706 04AE  
                        l1386 01E2                          l1546 033B                          l1538 032F  
                        l1732 0380                          l1724 0365                          l1716 034F  
                        l1820 0111                          l1812 00E2                          l1804 00C4  
                        l1580 040C                          l1572 03E9                          l1564 03C4  
                        l1740 045F                          l1708 04B1                          l1396 0550  
                        l1548 0340                          l1726 0369                          l1718 0357  
                        l1734 0386                          l1830 015B                          l1822 0117  
                        l1814 00EC                          l1582 041D                          l1574 03FA  
                        l1566 03C7                          l1742 0464                          l1750 0288  
                        l1590 0445                          l1398 0553                          l1728 0373  
                        l1824 011F                          l1816 00FC                          l1808 00C6  
                        l1760 0026                          l1576 03FD                          l1568 03D0  
                        l1744 046B                          l1752 028D                          l1584 042E  
                        l1826 0126                          l1834 0163                          l1818 00FD  
                        l1770 0045                          l1762 002C                          l1850 0243  
                        l1578 0406                          l1746 0471                          l1738 045A  
                        l1754 02A9                          l1586 0430                          l1828 012B  
                        l1780 006B                          l1772 0049                          l1764 0033  
                        l1836 016C                          l1860 04D8                          l1852 024C  
                        l1748 0476                          l1756 02B1                          l1588 0441  
                        l1790 00A4                          l1838 017E                          l1774 004B  
                        l1782 007C                          l1766 0038                          l1758 0021  
                        l1694 055D                          l1854 025B                          l1862 04EC  
                        l1870 018B                          l1792 00A8                          l1776 005C  
                        l1768 0039                          l1696 047E                          l1856 0261  
                        l1848 023D                          l1864 04F4                          l1952 0221  
                        l1880 01A7                          l1872 018C                          l1794 00AC  
                        l1954 0091                          l1786 007D                          l1778 0067  
                        l1698 0481                          l1858 0510                          l1890 01C3  
                        l1882 01AC                          l1874 0191                          l1866 0183  
                        l1796 00B0                          l1788 009C                          l1892 01C8  
                        l1884 01B1                          l1876 0196                          l1868 0188  
                        l1798 00B5                          l1894 01D1                          l1886 01BA  
                        l1878 019E                          l1896 01D7                          l1888 01BE  
                        STR_1 03A5                          STR_2 03B6                          STR_3 03BF  
                        u1000 0111                          u1001 0110                          u1010 011F  
                        u1011 011E                          u1020 016C                          u1021 016B  
                        u1005 010D                          u1030 017E                          u1031 017D  
                        u1107 0426                          u1117 0247                          u1127 0256  
                        u1047 04BC                          u1137 0265                          u1057 03CB  
                        u1147 048E                          u1067 03E4                          u1077 03F2  
                        u1087 0401                          u1097 0418                          _RCIF 0065  
                        i1l91 0549                          _TRMT 04C1                          _data 0036  
           ?_Lcd_Write_String 0075               __end_of_SPI_ADC 042E                          _cont 0035  
                        _main 0183                          btemp 007E                          start 000C  
          ??_Lcd_Write_String 0077               __end_of_Lcd_Cmd 0497             ___bmul@multiplier 0075  
                       ??_ISR 0070                         ?_main 0070                         _ANSEL 0188  
             __end_of___lwdiv 0312               __end_of___lwmod 038B                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
     __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085                         _TRISB 0086  
                       _TRISD 0088                         _TRISE 0089                         _TXREG 0019  
             __end_of_dpowers 03A5               __end_of_initOsc 023D              __end_of_SPI_CONT 03FA  
             __end_of_isdigit 0510                         _setup 0312                         pclath 000A  
             __end_of_spiInit 04AD               __end_of_spiRead 0532                         status 0003  
                       wtemp0 007E               __end_of_sprintf 0183                   ?_USART_Init 0070  
            __end_of_Lcd_Init 0288              __end_of_Lcd_Port 0562               __initialization 000F  
                __end_of_main 01E1                        ??_main 007A            __size_of_Lcd_Clear 000D  
                   ??_SPI_ADC 0073                   initOsc@IRCF 0074           _USART_Init_BaudRate 0550  
                      ?_setup 0070                        _ANSELH 0189                     ??_Lcd_Cmd 0073  
                      _SPBRGH 009A       __size_of_Lcd_Write_Char 0016                        _TRISC0 0438  
                      _TRISC1 0439                        _TRISC2 043A                        _TRISC3 043B  
                      _TRISC5 043D                        _SSPCON 0014                        _SSPBUF 0013  
                      ___bmul 04C3          ?_USART_Init_BaudRate 0070                     ??___lwdiv 0076  
                   ??___lwmod 0042                     ??_initOsc 0072                     ??_isdigit 0072  
                      saved_w 007E              __end_of_spiWrite 055C                     ??_spiInit 0075  
                   ??_spiRead 0072           __size_of_USART_Init 0008                     ??_sprintf 0047  
             Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076       __end_of__initialization 001A  
           __end_of_Lcd_Clear 051D           ___bmul@multiplicand 0072                __pcstackCOMMON 0070  
       ??_USART_Init_BaudRate 0072                     ?_SPI_CONT 0070                 __end_of_setup 034F  
              _Lcd_Set_Cursor 0459                     ?_Lcd_Init 0070                     ?_Lcd_Port 0070  
                     ??_setup 0076                  Write_USART@a 0072                    __pbssBANK0 0020  
                  _data_total 0020                    __pmaintext 0183                       ?___bmul 0072  
               ??_Write_USART 0072                    __pintentry 0004       __size_of_spiReceiveWait 0007  
                  ??_SPI_CONT 0073     __size_of_Lcd_Write_String 0046        __end_of_Lcd_Set_Cursor 047D  
      __size_of_ADC_to_string 0014    __end_of_Write_USART_String 0459                    ??_Lcd_Init 0076  
                  ??_Lcd_Port 0072                       _SPI_ADC 03FA                       _SSPSTAT 0094  
                  __stringtab 038B                _Lcd_Write_Char 04AD                       _Lcd_Cmd 047D  
                ??_USART_Init 0072                     ?_spiWrite 0070               __size_of___bmul 0015  
               ?_Show_val_LCD 0070                       ___lwdiv 02CE                       ___lwmod 034F  
             ?_Lcd_Set_Cursor 0076                       __ptext1 0312                       __ptext2 0497  
                     __ptext3 01E1                       __ptext4 0550                       __ptext5 053A  
                     __ptext6 042E                       __ptext7 051D                       __ptext8 04EC  
                     __ptext9 0288                  __size_of_ISR 0007                       _dpowers 039B  
                     _initOsc 01E1           __end_of_Write_USART 0529                       _isdigit 04FE  
                     _val_ADC 007A                       _spiInit 0497                       _spiRead 0529  
          __end_of_USART_Init 0542                       _sprintf 001E                       clrloop0 0533  
      __end_of_Lcd_Write_Char 04C3          end_of_initialization 001A                 _ADC_to_string 04D8  
              ??_Show_val_LCD 007A                     _RCSTAbits 0018                    ??_spiWrite 0072  
                   Lcd_Port@a 0072                     _PORTCbits 0007                     _PORTEbits 0009  
                 spiWrite@dat 0072               ?_Lcd_Write_Char 0070             Lcd_Write_String@a 0075  
           Lcd_Write_String@i 003E                ?_ADC_to_string 0070                     _TXSTAbits 0098  
                   _Lcd_Clear 0510                _spiReceiveWait 0542                __end_of___bmul 04D8  
                 _Write_USART 051D              _Lcd_Write_String 0288             __size_of_SPI_CONT 0036  
         start_initialization 000F                   __end_of_ISR 0550             __size_of_Lcd_Init 004B  
                _hola_esclavo 007B             __size_of_Lcd_Port 0006   __end_of_USART_Init_BaudRate 0556  
      __end_of_spiReceiveWait 0549                    ?_Lcd_Clear 0070                      ??___bmul 0073  
             Lcd_Write_Char@a 0074                   __pbssCOMMON 007A                     ___latbits 0002  
               __pcstackBANK0 003E                      ?_SPI_ADC 0070          __end_of_Show_val_LCD 04FE  
             ??_ADC_to_string 0051                      ?_Lcd_Cmd 0070                   sprintf@flag 004B  
          _Write_USART_String 042E                   sprintf@prec 004F              ___lwdiv@dividend 0074  
             ?_spiReceiveWait 0070              ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0073  
                    ?___lwdiv 0072                      ?___lwmod 003E             __size_of_spiWrite 0006  
                   __pstrings 038B                      ?_initOsc 0070                      ?_isdigit 0070  
                    ?_spiInit 0072                      ?_spiRead 0070          ??_Write_USART_String 0075  
            ___lwdiv@quotient 0077                      ?_sprintf 0044                __size_of_setup 003D  
        spiInit@sTransmitEdge 0074             interrupt_function 0004                     clear_ram0 0532  
                    _PIE1bits 008C            spiInit@sDataSample 0072                      Lcd_Cmd@a 0075  
                 ??_Lcd_Clear 0076                      _SPI_CONT 03C4                   __stringbase 039A  
            ??_Lcd_Write_Char 0073                      _Lcd_Init 023D                      _Lcd_Port 055C  
            __size_of_SPI_ADC 0034      __end_of_Lcd_Write_String 02CE              __size_of_Lcd_Cmd 001A  
                ?_Write_USART 0070              __size_of___lwdiv 0044              __size_of___lwmod 003C  
          __end_of__stringtab 039B                   _isdigit$973 0072         __size_of_Show_val_LCD 0012  
                  sprintf@val 004D              __size_of_initOsc 005C              __size_of_isdigit 0012  
             ___lwdiv@divisor 0072               ___lwdiv@counter 0079                      __ptext10 04AD  
                    __ptext11 0459                      __ptext20 055C                      __ptext12 03C4  
                    __ptext21 04D8                      __ptext13 03FA                      __ptext22 001E  
                    __ptext14 0556                      __ptext23 04FE                      __ptext15 0529  
                    __ptext24 034F                      __ptext16 0542                      __ptext25 02CE  
                    __ptext17 023D                      __ptext26 04C3                      __ptext18 0510  
                    __ptext27 0549                      __ptext19 047D              __size_of_spiInit 0016  
            __size_of_spiRead 0009              __size_of_sprintf 0165                 __size_of_main 005E  
                    _val_TEMP 0034                      _spiWrite 0556                  _Show_val_LCD 04EC  
                spiInit@sType 0075             spiInit@sClockIdle 0073                    _INTCONbits 000B  
         Write_USART_String@a 0073           Write_USART_String@i 0076                      isdigit@c 0073  
                    intlevel1 0000                     sprintf@ap 004A                     sprintf@sp 004C  
            ___lwmod@dividend 0040              ??_spiReceiveWait 0072                     stringcode 0395  
                  _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006            Lcd_Set_Cursor@temp 0079  
                    sprintf@c 0050                      sprintf@f 0044               ___lwmod@divisor 003E  
             ___lwmod@counter 0043                      stringdir 0395                      stringtab 038B  
       __end_of_ADC_to_string 04EC                    _USART_Init 053A  
