

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 19:23:47 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2,group=3
    45                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    65                           	psect	text27_split_1,local,class=CODE,merge=1,delta=2
    66                           	dabs	1,0x7E,2
    67  0000                     
    68                           ; Version 2.20
    69                           ; Generated 12/02/2020 GMT
    70                           ; 
    71                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC16F887 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  0088                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  008F                     	;# 
   147  0090                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0093                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  0105                     	;# 
   166  0107                     	;# 
   167  0108                     	;# 
   168  0109                     	;# 
   169  010C                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  0185                     	;# 
   175  0187                     	;# 
   176  0188                     	;# 
   177  0189                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0008                     	;# 
   189  0009                     	;# 
   190  000A                     	;# 
   191  000B                     	;# 
   192  000C                     	;# 
   193  000D                     	;# 
   194  000E                     	;# 
   195  000E                     	;# 
   196  000F                     	;# 
   197  0010                     	;# 
   198  0011                     	;# 
   199  0012                     	;# 
   200  0013                     	;# 
   201  0014                     	;# 
   202  0015                     	;# 
   203  0015                     	;# 
   204  0016                     	;# 
   205  0017                     	;# 
   206  0018                     	;# 
   207  0019                     	;# 
   208  001A                     	;# 
   209  001B                     	;# 
   210  001B                     	;# 
   211  001C                     	;# 
   212  001D                     	;# 
   213  001E                     	;# 
   214  001F                     	;# 
   215  0081                     	;# 
   216  0085                     	;# 
   217  0086                     	;# 
   218  0087                     	;# 
   219  0088                     	;# 
   220  0089                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  008F                     	;# 
   225  0090                     	;# 
   226  0091                     	;# 
   227  0092                     	;# 
   228  0093                     	;# 
   229  0093                     	;# 
   230  0093                     	;# 
   231  0094                     	;# 
   232  0095                     	;# 
   233  0096                     	;# 
   234  0097                     	;# 
   235  0098                     	;# 
   236  0099                     	;# 
   237  009A                     	;# 
   238  009B                     	;# 
   239  009C                     	;# 
   240  009D                     	;# 
   241  009E                     	;# 
   242  009F                     	;# 
   243  0105                     	;# 
   244  0107                     	;# 
   245  0108                     	;# 
   246  0109                     	;# 
   247  010C                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  010F                     	;# 
   252  0185                     	;# 
   253  0187                     	;# 
   254  0188                     	;# 
   255  0189                     	;# 
   256  018C                     	;# 
   257  018D                     	;# 
   258  0000                     	;# 
   259  0001                     	;# 
   260  0002                     	;# 
   261  0003                     	;# 
   262  0004                     	;# 
   263  0005                     	;# 
   264  0006                     	;# 
   265  0007                     	;# 
   266  0008                     	;# 
   267  0009                     	;# 
   268  000A                     	;# 
   269  000B                     	;# 
   270  000C                     	;# 
   271  000D                     	;# 
   272  000E                     	;# 
   273  000E                     	;# 
   274  000F                     	;# 
   275  0010                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0014                     	;# 
   280  0015                     	;# 
   281  0015                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001B                     	;# 
   289  001C                     	;# 
   290  001D                     	;# 
   291  001E                     	;# 
   292  001F                     	;# 
   293  0081                     	;# 
   294  0085                     	;# 
   295  0086                     	;# 
   296  0087                     	;# 
   297  0088                     	;# 
   298  0089                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  008F                     	;# 
   303  0090                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0093                     	;# 
   307  0093                     	;# 
   308  0093                     	;# 
   309  0094                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0098                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  009F                     	;# 
   321  0105                     	;# 
   322  0107                     	;# 
   323  0108                     	;# 
   324  0109                     	;# 
   325  010C                     	;# 
   326  010C                     	;# 
   327  010D                     	;# 
   328  010E                     	;# 
   329  010F                     	;# 
   330  0185                     	;# 
   331  0187                     	;# 
   332  0188                     	;# 
   333  0189                     	;# 
   334  018C                     	;# 
   335  018D                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0008                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000D                     	;# 
   350  000E                     	;# 
   351  000E                     	;# 
   352  000F                     	;# 
   353  0010                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0014                     	;# 
   358  0015                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  001D                     	;# 
   369  001E                     	;# 
   370  001F                     	;# 
   371  0081                     	;# 
   372  0085                     	;# 
   373  0086                     	;# 
   374  0087                     	;# 
   375  0088                     	;# 
   376  0089                     	;# 
   377  008C                     	;# 
   378  008D                     	;# 
   379  008E                     	;# 
   380  008F                     	;# 
   381  0090                     	;# 
   382  0091                     	;# 
   383  0092                     	;# 
   384  0093                     	;# 
   385  0093                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0095                     	;# 
   389  0096                     	;# 
   390  0097                     	;# 
   391  0098                     	;# 
   392  0099                     	;# 
   393  009A                     	;# 
   394  009B                     	;# 
   395  009C                     	;# 
   396  009D                     	;# 
   397  009E                     	;# 
   398  009F                     	;# 
   399  0105                     	;# 
   400  0107                     	;# 
   401  0108                     	;# 
   402  0109                     	;# 
   403  010C                     	;# 
   404  010C                     	;# 
   405  010D                     	;# 
   406  010E                     	;# 
   407  010F                     	;# 
   408  0185                     	;# 
   409  0187                     	;# 
   410  0188                     	;# 
   411  0189                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0008                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000D                     	;# 
   428  000E                     	;# 
   429  000E                     	;# 
   430  000F                     	;# 
   431  0010                     	;# 
   432  0011                     	;# 
   433  0012                     	;# 
   434  0013                     	;# 
   435  0014                     	;# 
   436  0015                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  001D                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  0081                     	;# 
   450  0085                     	;# 
   451  0086                     	;# 
   452  0087                     	;# 
   453  0088                     	;# 
   454  0089                     	;# 
   455  008C                     	;# 
   456  008D                     	;# 
   457  008E                     	;# 
   458  008F                     	;# 
   459  0090                     	;# 
   460  0091                     	;# 
   461  0092                     	;# 
   462  0093                     	;# 
   463  0093                     	;# 
   464  0093                     	;# 
   465  0094                     	;# 
   466  0095                     	;# 
   467  0096                     	;# 
   468  0097                     	;# 
   469  0098                     	;# 
   470  0099                     	;# 
   471  009A                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  009F                     	;# 
   477  0105                     	;# 
   478  0107                     	;# 
   479  0108                     	;# 
   480  0109                     	;# 
   481  010C                     	;# 
   482  010C                     	;# 
   483  010D                     	;# 
   484  010E                     	;# 
   485  010F                     	;# 
   486  0185                     	;# 
   487  0187                     	;# 
   488  0188                     	;# 
   489  0189                     	;# 
   490  018C                     	;# 
   491  018D                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  000E                     	;# 
   508  000F                     	;# 
   509  0010                     	;# 
   510  0011                     	;# 
   511  0012                     	;# 
   512  0013                     	;# 
   513  0014                     	;# 
   514  0015                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  001D                     	;# 
   525  001E                     	;# 
   526  001F                     	;# 
   527  0081                     	;# 
   528  0085                     	;# 
   529  0086                     	;# 
   530  0087                     	;# 
   531  0088                     	;# 
   532  0089                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  008F                     	;# 
   537  0090                     	;# 
   538  0091                     	;# 
   539  0092                     	;# 
   540  0093                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0097                     	;# 
   547  0098                     	;# 
   548  0099                     	;# 
   549  009A                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  0105                     	;# 
   556  0107                     	;# 
   557  0108                     	;# 
   558  0109                     	;# 
   559  010C                     	;# 
   560  010C                     	;# 
   561  010D                     	;# 
   562  010E                     	;# 
   563  010F                     	;# 
   564  0185                     	;# 
   565  0187                     	;# 
   566  0188                     	;# 
   567  0189                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570                           
   571                           	psect	strings
   572  1000                     __pstrings:
   573  1000                     stringtab:
   574  1000                     __stringtab:
   575                           
   576                           ;	String table - string pointers are 1 byte each
   577  1000  1BFF               	btfsc	btemp+1,7
   578  1001  280A               	ljmp	stringcode
   579  1002  1383               	bcf	3,7
   580  1003  187F               	btfsc	btemp+1,0
   581  1004  1783               	bsf	3,7
   582  1005  0800               	movf	0,w
   583  1006  0A84               	incf	4,f
   584  1007  1903               	skipnz
   585  1008  0AFF               	incf	btemp+1,f
   586  1009  0008               	return
   587  100A                     stringcode:
   588  100A                     stringdir:
   589  100A  3010               	movlw	high stringdir
   590  100B  008A               	movwf	10
   591  100C  0804               	movf	4,w
   592  100D  0A84               	incf	4,f
   593  100E  0782               	addwf	2,f
   594  100F                     __stringbase:
   595  100F  3400               	retlw	0
   596  1010                     __end_of__stringtab:
   597  1010                     __powers_:
   598  1010  3400               	retlw	0
   599  1011  3480               	retlw	128
   600  1012  343F               	retlw	63
   601  1013  3400               	retlw	0
   602  1014  3420               	retlw	32
   603  1015  3441               	retlw	65
   604  1016  3400               	retlw	0
   605  1017  34C8               	retlw	200
   606  1018  3442               	retlw	66
   607  1019  3400               	retlw	0
   608  101A  347A               	retlw	122
   609  101B  3444               	retlw	68
   610  101C  3440               	retlw	64
   611  101D  341C               	retlw	28
   612  101E  3446               	retlw	70
   613  101F  3450               	retlw	80
   614  1020  34C3               	retlw	195
   615  1021  3447               	retlw	71
   616  1022  3424               	retlw	36
   617  1023  3474               	retlw	116
   618  1024  3449               	retlw	73
   619  1025  3497               	retlw	151
   620  1026  3418               	retlw	24
   621  1027  344B               	retlw	75
   622  1028  34BC               	retlw	188
   623  1029  34BE               	retlw	190
   624  102A  344C               	retlw	76
   625  102B  346B               	retlw	107
   626  102C  346E               	retlw	110
   627  102D  344E               	retlw	78
   628  102E  3403               	retlw	3
   629  102F  3415               	retlw	21
   630  1030  3450               	retlw	80
   631  1031  3479               	retlw	121
   632  1032  34AD               	retlw	173
   633  1033  3460               	retlw	96
   634  1034  34F3               	retlw	243
   635  1035  3449               	retlw	73
   636  1036  3471               	retlw	113
   637  1037                     __end_of__powers_:
   638  1037                     __npowers_:
   639  1037  3400               	retlw	0
   640  1038  3480               	retlw	128
   641  1039  343F               	retlw	63
   642  103A  34CD               	retlw	205
   643  103B  34CC               	retlw	204
   644  103C  343D               	retlw	61
   645  103D  34D7               	retlw	215
   646  103E  3423               	retlw	35
   647  103F  343C               	retlw	60
   648  1040  3412               	retlw	18
   649  1041  3483               	retlw	131
   650  1042  343A               	retlw	58
   651  1043  34B7               	retlw	183
   652  1044  34D1               	retlw	209
   653  1045  3438               	retlw	56
   654  1046  34C6               	retlw	198
   655  1047  3427               	retlw	39
   656  1048  3437               	retlw	55
   657  1049  3438               	retlw	56
   658  104A  3486               	retlw	134
   659  104B  3435               	retlw	53
   660  104C  34C0               	retlw	192
   661  104D  34D6               	retlw	214
   662  104E  3433               	retlw	51
   663  104F  34CC               	retlw	204
   664  1050  342B               	retlw	43
   665  1051  3432               	retlw	50
   666  1052  3470               	retlw	112
   667  1053  3489               	retlw	137
   668  1054  3430               	retlw	48
   669  1055  34E7               	retlw	231
   670  1056  34DB               	retlw	219
   671  1057  342E               	retlw	46
   672  1058  34E5               	retlw	229
   673  1059  343C               	retlw	60
   674  105A  341E               	retlw	30
   675  105B  3442               	retlw	66
   676  105C  34A2               	retlw	162
   677  105D  340D               	retlw	13
   678  105E                     __end_of__npowers_:
   679  105E                     _dpowers:
   680  105E  3401               	retlw	1
   681  105F  3400               	retlw	0
   682  1060  3400               	retlw	0
   683  1061  3400               	retlw	0
   684  1062  340A               	retlw	10
   685  1063  3400               	retlw	0
   686  1064  3400               	retlw	0
   687  1065  3400               	retlw	0
   688  1066  3464               	retlw	100
   689  1067  3400               	retlw	0
   690  1068  3400               	retlw	0
   691  1069  3400               	retlw	0
   692  106A  34E8               	retlw	232
   693  106B  3403               	retlw	3
   694  106C  3400               	retlw	0
   695  106D  3400               	retlw	0
   696  106E  3410               	retlw	16
   697  106F  3427               	retlw	39
   698  1070  3400               	retlw	0
   699  1071  3400               	retlw	0
   700  1072  34A0               	retlw	160
   701  1073  3486               	retlw	134
   702  1074  3401               	retlw	1
   703  1075  3400               	retlw	0
   704  1076  3440               	retlw	64
   705  1077  3442               	retlw	66
   706  1078  340F               	retlw	15
   707  1079  3400               	retlw	0
   708  107A  3480               	retlw	128
   709  107B  3496               	retlw	150
   710  107C  3498               	retlw	152
   711  107D  3400               	retlw	0
   712  107E  3400               	retlw	0
   713  107F  34E1               	retlw	225
   714  1080  34F5               	retlw	245
   715  1081  3405               	retlw	5
   716  1082  3400               	retlw	0
   717  1083  34CA               	retlw	202
   718  1084  349A               	retlw	154
   719  1085  343B               	retlw	59
   720  1086                     __end_of_dpowers:
   721  0013                     _SSPBUF	set	19
   722  0014                     _SSPCON	set	20
   723  001A                     _RCREG	set	26
   724  0019                     _TXREG	set	25
   725  000B                     _INTCONbits	set	11
   726  0018                     _RCSTAbits	set	24
   727  0009                     _PORTEbits	set	9
   728  0007                     _PORTCbits	set	7
   729  0009                     _PORTE	set	9
   730  0008                     _PORTD	set	8
   731  0007                     _PORTC	set	7
   732  0006                     _PORTB	set	6
   733  0005                     _PORTA	set	5
   734  0065                     _RCIF	set	101
   735  0039                     _RC1	set	57
   736  0038                     _RC0	set	56
   737  003A                     _RC2	set	58
   738  0094                     _SSPSTATbits	set	148
   739  0094                     _SSPSTAT	set	148
   740  008C                     _PIE1bits	set	140
   741  0099                     _SPBRG	set	153
   742  009A                     _SPBRGH	set	154
   743  0098                     _TXSTAbits	set	152
   744  008F                     _OSCCONbits	set	143
   745  0089                     _TRISE	set	137
   746  0088                     _TRISD	set	136
   747  0086                     _TRISB	set	134
   748  0085                     _TRISA	set	133
   749  043B                     _TRISC3	set	1083
   750  043D                     _TRISC5	set	1085
   751  04C1                     _TRMT	set	1217
   752  043A                     _TRISC2	set	1082
   753  0439                     _TRISC1	set	1081
   754  0438                     _TRISC0	set	1080
   755  0189                     _ANSELH	set	393
   756  0188                     _ANSEL	set	392
   757  1086                     STR_1:
   758  1086  3443               	retlw	67	;'C'
   759  1087  344F               	retlw	79	;'O'
   760  1088  344E               	retlw	78	;'N'
   761  1089  3454               	retlw	84	;'T'
   762  108A  3420               	retlw	32	;' '
   763  108B  3420               	retlw	32	;' '
   764  108C  3420               	retlw	32	;' '
   765  108D  3441               	retlw	65	;'A'
   766  108E  3444               	retlw	68	;'D'
   767  108F  3443               	retlw	67	;'C'
   768  1090  3420               	retlw	32	;' '
   769  1091  3420               	retlw	32	;' '
   770  1092  3454               	retlw	84	;'T'
   771  1093  3445               	retlw	69	;'E'
   772  1094  344D               	retlw	77	;'M'
   773  1095  3450               	retlw	80	;'P'
   774  1096  3400               	retlw	0
   775  1097                     STR_10:
   776  1097  3454               	retlw	84	;'T'
   777  1098  3445               	retlw	69	;'E'
   778  1099  344D               	retlw	77	;'M'
   779  109A  3450               	retlw	80	;'P'
   780  109B  343A               	retlw	58	;':'
   781  109C  3420               	retlw	32	;' '
   782  109D  3420               	retlw	32	;' '
   783  109E  340A               	retlw	10
   784  109F  3400               	retlw	0
   785  10A0                     STR_6:
   786  10A0  3443               	retlw	67	;'C'
   787  10A1  344F               	retlw	79	;'O'
   788  10A2  344E               	retlw	78	;'N'
   789  10A3  3454               	retlw	84	;'T'
   790  10A4  343A               	retlw	58	;':'
   791  10A5  3420               	retlw	32	;' '
   792  10A6  3420               	retlw	32	;' '
   793  10A7  340A               	retlw	10
   794  10A8  3400               	retlw	0
   795  10A9                     STR_8:
   796  10A9  3441               	retlw	65	;'A'
   797  10AA  3444               	retlw	68	;'D'
   798  10AB  3443               	retlw	67	;'C'
   799  10AC  343A               	retlw	58	;':'
   800  10AD  3420               	retlw	32	;' '
   801  10AE  3420               	retlw	32	;' '
   802  10AF  340A               	retlw	10
   803  10B0  3400               	retlw	0
   804  10B1                     STR_3:
   805  10B1  3425               	retlw	37	;'%'
   806  10B2  3431               	retlw	49	;'1'
   807  10B3  342E               	retlw	46	;'.'
   808  10B4  3432               	retlw	50	;'2'
   809  10B5  3466               	retlw	102	;'f'
   810  10B6  3456               	retlw	86	;'V'
   811  10B7  3400               	retlw	0
   812  10B8                     STR_11:
   813  10B8  34B0               	retlw	-80
   814  10B9  3443               	retlw	67	;'C'
   815  10BA  3420               	retlw	32	;' '
   816  10BB  3420               	retlw	32	;' '
   817  10BC  340A               	retlw	10
   818  10BD  3400               	retlw	0
   819  10BE                     STR_4:
   820  10BE  3425               	retlw	37	;'%'
   821  10BF  342E               	retlw	46	;'.'
   822  10C0  3432               	retlw	50	;'2'
   823  10C1  3469               	retlw	105	;'i'
   824  10C2  3400               	retlw	0
   825  10C3                     STR_2:
   826  10C3  3425               	retlw	37	;'%'
   827  10C4  342E               	retlw	46	;'.'
   828  10C5  3433               	retlw	51	;'3'
   829  10C6  3469               	retlw	105	;'i'
   830  10C7  3400               	retlw	0
   831  10C8                     STR_5:
   832  10C8  3443               	retlw	67	;'C'
   833  10C9  3400               	retlw	0
   834  10AD                     
   835                           	psect	cinit
   836  000F                     start_initialization:	
   837                           ; #config settings
   838                           
   839  000F                     __initialization:
   840                           
   841                           ; Clear objects allocated to COMMON
   842  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   843  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   844                           
   845                           ; Clear objects allocated to BANK0
   846  0011  1283               	bcf	3,5	;RP0=0, select bank0
   847  0012  1303               	bcf	3,6	;RP1=0, select bank0
   848  0013  01EC               	clrf	__pbssBANK0& (0+127)
   849  0014  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   850  0015  01EE               	clrf	(__pbssBANK0+2)& (0+127)
   851  0016  01EF               	clrf	(__pbssBANK0+3)& (0+127)
   852                           
   853                           ; Clear objects allocated to BANK1
   854  0017  1383               	bcf	3,7	;select IRP bank0
   855  0018  30A0               	movlw	low __pbssBANK1
   856  0019  0084               	movwf	4
   857  001A  30BB               	movlw	low (__pbssBANK1+27)
   858  001B  160A  158A  23F9  120A  118A  	fcall	clear_ram0
   859  0020                     end_of_initialization:	
   860                           ;End of C runtime variable initialization code
   861                           
   862  0020                     __end_of__initialization:
   863  0020  0183               	clrf	3
   864  0021  160A  158A  2F1A   	ljmp	_main	;jump to C main() function
   865                           
   866                           	psect	bssCOMMON
   867  007A                     __pbssCOMMON:
   868  007A                     _val_TEMP:
   869  007A                     	ds	1
   870  007B                     _val_ADC:
   871  007B                     	ds	1
   872                           
   873                           	psect	bssBANK0
   874  006C                     __pbssBANK0:
   875  006C                     _mv_temp_val_M:
   876  006C                     	ds	2
   877  006E                     _cont:
   878  006E                     	ds	1
   879  006F                     _hola_esclavo:
   880  006F                     	ds	1
   881                           
   882                           	psect	bssBANK1
   883  00A0                     __pbssBANK1:
   884  00A0                     _ADC_val_M:
   885  00A0                     	ds	3
   886  00A3                     _data_TEMP:
   887  00A3                     	ds	8
   888  00AB                     _data_ADC:
   889  00AB                     	ds	8
   890  00B3                     _data_cont:
   891  00B3                     	ds	8
   892                           
   893                           	psect	clrtext
   894  1BF9                     clear_ram0:	
   895                           ;	Called with FSR containing the base address, and
   896                           ;	W with the last address+1
   897                           
   898  1BF9  0064               	clrwdt	;clear the watchdog before getting into this loop
   899  1BFA                     clrloop0:
   900  1BFA  0180               	clrf	0	;clear RAM location pointed to by FSR
   901  1BFB  0A84               	incf	4,f	;increment pointer
   902  1BFC  0604               	xorwf	4,w	;XOR with final address
   903  1BFD  1903               	btfsc	3,2	;have we reached the end yet?
   904  1BFE  3400               	retlw	0	;all done for this memory range, return
   905  1BFF  0604               	xorwf	4,w	;XOR again to restore value
   906  1C00  2BFA               	goto	clrloop0	;do the next byte
   907                           
   908                           	psect	cstackBANK1
   909  00BB                     __pcstackBANK1:
   910  00BB                     _sprintf$1240:
   911                           
   912                           ; 3 bytes @ 0x0
   913  00BB                     	ds	3
   914  00BE                     sprintf@ap:
   915                           
   916                           ; 1 bytes @ 0x3
   917  00BE                     	ds	1
   918  00BF                     sprintf@flag:
   919                           
   920                           ; 2 bytes @ 0x4
   921  00BF                     	ds	2
   922  00C1                     sprintf@width:
   923                           
   924                           ; 2 bytes @ 0x6
   925  00C1                     	ds	2
   926  00C3                     sprintf@tmpval:
   927                           
   928                           ; 4 bytes @ 0x8
   929  00C3                     	ds	4
   930  00C7                     sprintf@val:
   931                           
   932                           ; 4 bytes @ 0xC
   933  00C7                     	ds	4
   934  00CB                     sprintf@eexp:
   935                           
   936                           ; 2 bytes @ 0x10
   937  00CB                     	ds	2
   938  00CD                     sprintf@fval:
   939                           
   940                           ; 3 bytes @ 0x12
   941  00CD                     	ds	3
   942  00D0                     sprintf@sp:
   943                           
   944                           ; 1 bytes @ 0x15
   945  00D0                     	ds	1
   946  00D1                     sprintf@prec:
   947                           
   948                           ; 2 bytes @ 0x16
   949  00D1                     	ds	2
   950  00D3                     sprintf@c:
   951                           
   952                           ; 1 bytes @ 0x18
   953  00D3                     	ds	1
   954                           
   955                           	psect	cstackCOMMON
   956  0070                     __pcstackCOMMON:
   957  0070                     ?_isdigit:
   958  0070                     ?_setup:	
   959                           ; 1 bit 
   960                           
   961  0070                     ?_Lcd_Init:	
   962                           ; 1 bytes @ 0x0
   963                           
   964  0070                     ?_Lcd_Clear:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_SPI_CONT:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_SPI_ADC:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_SPI_TEMP:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_Mapeo_M:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ?_ADC_to_string:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_Show_val_VT:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ?_Show_val_LCD:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_Write_USART:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ?_spiWrite:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_spiRead:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ?_initOsc:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ?_USART_Init_BaudRate:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_USART_Init:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ?_Lcd_Port:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0070                     ?_Lcd_Cmd:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0070                     ?_ISR:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0070                     ??_ISR:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ?_main:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?_Lcd_Write_Char:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ?_spiReceiveWait:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027                           
  1028                           ; 1 bytes @ 0x0
  1029  0070                     	ds	2
  1030  0072                     ?___ftge:
  1031  0072                     ??_Write_USART:	
  1032                           ; 1 bit 
  1033                           
  1034  0072                     ??_spiWrite:	
  1035                           ; 1 bytes @ 0x2
  1036                           
  1037  0072                     ??_spiRead:	
  1038                           ; 1 bytes @ 0x2
  1039                           
  1040  0072                     ??_initOsc:	
  1041                           ; 1 bytes @ 0x2
  1042                           
  1043  0072                     ??_USART_Init_BaudRate:	
  1044                           ; 1 bytes @ 0x2
  1045                           
  1046  0072                     ??_USART_Init:	
  1047                           ; 1 bytes @ 0x2
  1048                           
  1049  0072                     ?_spiInit:	
  1050                           ; 1 bytes @ 0x2
  1051                           
  1052  0072                     ??_Lcd_Port:	
  1053                           ; 1 bytes @ 0x2
  1054                           
  1055  0072                     ??_isdigit:	
  1056                           ; 1 bytes @ 0x2
  1057                           
  1058  0072                     ??_spiReceiveWait:	
  1059                           ; 1 bytes @ 0x2
  1060                           
  1061  0072                     ?___wmul:	
  1062                           ; 1 bytes @ 0x2
  1063                           
  1064  0072                     ?___awmod:	
  1065                           ; 2 bytes @ 0x2
  1066                           
  1067  0072                     ?___lwmod:	
  1068                           ; 2 bytes @ 0x2
  1069                           
  1070  0072                     ?___ftpack:	
  1071                           ; 2 bytes @ 0x2
  1072                           
  1073  0072                     ?___ftneg:	
  1074                           ; 3 bytes @ 0x2
  1075                           
  1076  0072                     ?__tdiv_to_l_:	
  1077                           ; 3 bytes @ 0x2
  1078                           
  1079  0072                     ?__div_to_l_:	
  1080                           ; 4 bytes @ 0x2
  1081                           
  1082  0072                     ?___lldiv:	
  1083                           ; 4 bytes @ 0x2
  1084                           
  1085  0072                     Lcd_Port@a:	
  1086                           ; 4 bytes @ 0x2
  1087                           
  1088  0072                     Write_USART@a:	
  1089                           ; 1 bytes @ 0x2
  1090                           
  1091  0072                     spiInit@sDataSample:	
  1092                           ; 1 bytes @ 0x2
  1093                           
  1094  0072                     spiWrite@dat:	
  1095                           ; 1 bytes @ 0x2
  1096                           
  1097  0072                     _isdigit$1034:	
  1098                           ; 1 bytes @ 0x2
  1099                           
  1100  0072                     ___wmul@multiplier:	
  1101                           ; 1 bytes @ 0x2
  1102                           
  1103  0072                     ___awmod@divisor:	
  1104                           ; 2 bytes @ 0x2
  1105                           
  1106  0072                     ___lwmod@divisor:	
  1107                           ; 2 bytes @ 0x2
  1108                           
  1109  0072                     __div_to_l_@f1:	
  1110                           ; 2 bytes @ 0x2
  1111                           
  1112  0072                     ___ftpack@arg:	
  1113                           ; 3 bytes @ 0x2
  1114                           
  1115  0072                     __tdiv_to_l_@f1:	
  1116                           ; 3 bytes @ 0x2
  1117                           
  1118  0072                     ___ftge@ff1:	
  1119                           ; 3 bytes @ 0x2
  1120                           
  1121  0072                     ___ftneg@f1:	
  1122                           ; 3 bytes @ 0x2
  1123                           
  1124  0072                     ___lldiv@divisor:	
  1125                           ; 3 bytes @ 0x2
  1126                           
  1127                           
  1128                           ; 4 bytes @ 0x2
  1129  0072                     	ds	1
  1130  0073                     ??_SPI_CONT:
  1131  0073                     ??_SPI_ADC:	
  1132                           ; 1 bytes @ 0x3
  1133                           
  1134  0073                     ??_SPI_TEMP:	
  1135                           ; 1 bytes @ 0x3
  1136                           
  1137  0073                     ?_Write_USART_String:	
  1138                           ; 1 bytes @ 0x3
  1139                           
  1140  0073                     ??_Lcd_Cmd:	
  1141                           ; 1 bytes @ 0x3
  1142                           
  1143  0073                     ??_Lcd_Write_Char:	
  1144                           ; 1 bytes @ 0x3
  1145                           
  1146  0073                     spiInit@sClockIdle:	
  1147                           ; 1 bytes @ 0x3
  1148                           
  1149  0073                     isdigit@c:	
  1150                           ; 1 bytes @ 0x3
  1151                           
  1152  0073                     Write_USART_String@a:	
  1153                           ; 1 bytes @ 0x3
  1154                           
  1155                           
  1156                           ; 2 bytes @ 0x3
  1157  0073                     	ds	1
  1158  0074                     initOsc@IRCF:
  1159  0074                     Lcd_Write_Char@a:	
  1160                           ; 1 bytes @ 0x4
  1161                           
  1162  0074                     spiInit@sTransmitEdge:	
  1163                           ; 1 bytes @ 0x4
  1164                           
  1165  0074                     ___wmul@multiplicand:	
  1166                           ; 1 bytes @ 0x4
  1167                           
  1168  0074                     ___awmod@dividend:	
  1169                           ; 2 bytes @ 0x4
  1170                           
  1171  0074                     ___lwmod@dividend:	
  1172                           ; 2 bytes @ 0x4
  1173                           
  1174                           
  1175                           ; 2 bytes @ 0x4
  1176  0074                     	ds	1
  1177  0075                     ?_Lcd_Write_String:
  1178  0075                     ??_Write_USART_String:	
  1179                           ; 1 bytes @ 0x5
  1180                           
  1181  0075                     ??_spiInit:	
  1182                           ; 1 bytes @ 0x5
  1183                           
  1184  0075                     ??___ftneg:	
  1185                           ; 1 bytes @ 0x5
  1186                           
  1187  0075                     Lcd_Cmd@a:	
  1188                           ; 1 bytes @ 0x5
  1189                           
  1190  0075                     spiInit@sType:	
  1191                           ; 1 bytes @ 0x5
  1192                           
  1193  0075                     ___ftpack@exp:	
  1194                           ; 1 bytes @ 0x5
  1195                           
  1196  0075                     Lcd_Write_String@a:	
  1197                           ; 1 bytes @ 0x5
  1198                           
  1199  0075                     __div_to_l_@f2:	
  1200                           ; 2 bytes @ 0x5
  1201                           
  1202  0075                     __tdiv_to_l_@f2:	
  1203                           ; 3 bytes @ 0x5
  1204                           
  1205  0075                     ___ftge@ff2:	
  1206                           ; 3 bytes @ 0x5
  1207                           
  1208                           
  1209                           ; 3 bytes @ 0x5
  1210  0075                     	ds	1
  1211  0076                     ??_setup:
  1212  0076                     ??_Lcd_Init:	
  1213                           ; 1 bytes @ 0x6
  1214                           
  1215  0076                     ??_Lcd_Clear:	
  1216                           ; 1 bytes @ 0x6
  1217                           
  1218  0076                     ?_Lcd_Set_Cursor:	
  1219                           ; 1 bytes @ 0x6
  1220                           
  1221  0076                     ??___wmul:	
  1222                           ; 1 bytes @ 0x6
  1223                           
  1224  0076                     ??___awmod:	
  1225                           ; 1 bytes @ 0x6
  1226                           
  1227  0076                     ??___lwmod:	
  1228                           ; 1 bytes @ 0x6
  1229                           
  1230  0076                     Lcd_Set_Cursor@b:	
  1231                           ; 1 bytes @ 0x6
  1232                           
  1233  0076                     Write_USART_String@i:	
  1234                           ; 1 bytes @ 0x6
  1235                           
  1236  0076                     ___ftpack@sign:	
  1237                           ; 1 bytes @ 0x6
  1238                           
  1239  0076                     ___wmul@product:	
  1240                           ; 1 bytes @ 0x6
  1241                           
  1242  0076                     ___lldiv@dividend:	
  1243                           ; 2 bytes @ 0x6
  1244                           
  1245                           
  1246                           ; 4 bytes @ 0x6
  1247  0076                     	ds	1
  1248  0077                     ??_Lcd_Set_Cursor:
  1249  0077                     ??_Lcd_Write_String:	
  1250                           ; 1 bytes @ 0x7
  1251                           
  1252  0077                     ??_Show_val_VT:	
  1253                           ; 1 bytes @ 0x7
  1254                           
  1255  0077                     ??___ftpack:	
  1256                           ; 1 bytes @ 0x7
  1257                           
  1258  0077                     ___awmod@counter:	
  1259                           ; 1 bytes @ 0x7
  1260                           
  1261  0077                     ___lwmod@counter:	
  1262                           ; 1 bytes @ 0x7
  1263                           
  1264                           
  1265                           ; 1 bytes @ 0x7
  1266  0077                     	ds	1
  1267  0078                     ??___ftge:
  1268  0078                     ??___lwdiv:	
  1269                           ; 1 bytes @ 0x8
  1270                           
  1271  0078                     Lcd_Set_Cursor@a:	
  1272                           ; 1 bytes @ 0x8
  1273                           
  1274  0078                     ___awmod@sign:	
  1275                           ; 1 bytes @ 0x8
  1276                           
  1277                           
  1278                           ; 1 bytes @ 0x8
  1279  0078                     	ds	1
  1280  0079                     ??___awdiv:
  1281  0079                     Lcd_Set_Cursor@temp:	
  1282                           ; 1 bytes @ 0x9
  1283                           
  1284                           
  1285                           ; 1 bytes @ 0x9
  1286  0079                     	ds	1
  1287  007A                     ??_main:
  1288  007A                     ??___ftsub:	
  1289                           ; 1 bytes @ 0xA
  1290                           
  1291                           
  1292                           	psect	cstackBANK0
  1293  0020                     __pcstackBANK0:	
  1294                           ; 1 bytes @ 0xA
  1295                           
  1296  0020                     ??__tdiv_to_l_:
  1297  0020                     ??__div_to_l_:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0020                     ??___lldiv:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0020                     ?___awdiv:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0020                     ?___lwdiv:	
  1307                           ; 2 bytes @ 0x0
  1308                           
  1309  0020                     ?___awtoft:	
  1310                           ; 2 bytes @ 0x0
  1311                           
  1312  0020                     ?___lltoft:	
  1313                           ; 3 bytes @ 0x0
  1314                           
  1315  0020                     Lcd_Write_String@i:	
  1316                           ; 3 bytes @ 0x0
  1317                           
  1318  0020                     ___awdiv@divisor:	
  1319                           ; 2 bytes @ 0x0
  1320                           
  1321  0020                     ___awtoft@c:	
  1322                           ; 2 bytes @ 0x0
  1323                           
  1324  0020                     ___lwdiv@divisor:	
  1325                           ; 2 bytes @ 0x0
  1326                           
  1327  0020                     ___lltoft@c:	
  1328                           ; 2 bytes @ 0x0
  1329                           
  1330                           
  1331                           ; 4 bytes @ 0x0
  1332  0020                     	ds	1
  1333  0021                     ___lldiv@quotient:
  1334                           
  1335                           ; 4 bytes @ 0x1
  1336  0021                     	ds	1
  1337  0022                     ??_Show_val_LCD:
  1338  0022                     ___awdiv@dividend:	
  1339                           ; 1 bytes @ 0x2
  1340                           
  1341  0022                     ___lwdiv@dividend:	
  1342                           ; 2 bytes @ 0x2
  1343                           
  1344                           
  1345                           ; 2 bytes @ 0x2
  1346  0022                     	ds	1
  1347  0023                     ??___awtoft:
  1348                           
  1349                           ; 1 bytes @ 0x3
  1350  0023                     	ds	1
  1351  0024                     ??___lltoft:
  1352  0024                     ___awdiv@counter:	
  1353                           ; 1 bytes @ 0x4
  1354                           
  1355  0024                     ___lwdiv@counter:	
  1356                           ; 1 bytes @ 0x4
  1357                           
  1358  0024                     __tdiv_to_l_@quot:	
  1359                           ; 1 bytes @ 0x4
  1360                           
  1361                           
  1362                           ; 4 bytes @ 0x4
  1363  0024                     	ds	1
  1364  0025                     ___lldiv@counter:
  1365  0025                     ___awdiv@sign:	
  1366                           ; 1 bytes @ 0x5
  1367                           
  1368  0025                     ___awtoft@sign:	
  1369                           ; 1 bytes @ 0x5
  1370                           
  1371  0025                     ___lltoft@exp:	
  1372                           ; 1 bytes @ 0x5
  1373                           
  1374  0025                     ___lwdiv@quotient:	
  1375                           ; 1 bytes @ 0x5
  1376                           
  1377                           
  1378                           ; 2 bytes @ 0x5
  1379  0025                     	ds	1
  1380  0026                     ?___llmod:
  1381  0026                     ___awdiv@quotient:	
  1382                           ; 4 bytes @ 0x6
  1383                           
  1384  0026                     ___llmod@divisor:	
  1385                           ; 2 bytes @ 0x6
  1386                           
  1387                           
  1388                           ; 4 bytes @ 0x6
  1389  0026                     	ds	2
  1390  0028                     ?___bmul:
  1391  0028                     ___bmul@multiplicand:	
  1392                           ; 1 bytes @ 0x8
  1393                           
  1394  0028                     __tdiv_to_l_@cntr:	
  1395                           ; 1 bytes @ 0x8
  1396                           
  1397  0028                     __div_to_l_@quot:	
  1398                           ; 1 bytes @ 0x8
  1399                           
  1400                           
  1401                           ; 4 bytes @ 0x8
  1402  0028                     	ds	1
  1403  0029                     ??___bmul:
  1404  0029                     __tdiv_to_l_@exp1:	
  1405                           ; 1 bytes @ 0x9
  1406                           
  1407                           
  1408                           ; 1 bytes @ 0x9
  1409  0029                     	ds	1
  1410  002A                     ___bmul@product:
  1411  002A                     ___llmod@dividend:	
  1412                           ; 1 bytes @ 0xA
  1413                           
  1414                           
  1415                           ; 4 bytes @ 0xA
  1416  002A                     	ds	1
  1417  002B                     ___bmul@multiplier:
  1418                           
  1419                           ; 1 bytes @ 0xB
  1420  002B                     	ds	1
  1421  002C                     ?___ftmul:
  1422  002C                     __div_to_l_@cntr:	
  1423                           ; 3 bytes @ 0xC
  1424                           
  1425  002C                     ___ftmul@f1:	
  1426                           ; 1 bytes @ 0xC
  1427                           
  1428                           
  1429                           ; 3 bytes @ 0xC
  1430  002C                     	ds	1
  1431  002D                     __div_to_l_@exp1:
  1432                           
  1433                           ; 1 bytes @ 0xD
  1434  002D                     	ds	1
  1435  002E                     ??___llmod:
  1436                           
  1437                           ; 1 bytes @ 0xE
  1438  002E                     	ds	1
  1439  002F                     ___llmod@counter:
  1440  002F                     ___ftmul@f2:	
  1441                           ; 1 bytes @ 0xF
  1442                           
  1443                           
  1444                           ; 3 bytes @ 0xF
  1445  002F                     	ds	3
  1446  0032                     ??___ftmul:
  1447                           
  1448                           ; 1 bytes @ 0x12
  1449  0032                     	ds	4
  1450  0036                     ___ftmul@exp:
  1451                           
  1452                           ; 1 bytes @ 0x16
  1453  0036                     	ds	1
  1454  0037                     ___ftmul@f3_as_product:
  1455                           
  1456                           ; 3 bytes @ 0x17
  1457  0037                     	ds	3
  1458  003A                     ___ftmul@cntr:
  1459                           
  1460                           ; 1 bytes @ 0x1A
  1461  003A                     	ds	1
  1462  003B                     ___ftmul@sign:
  1463                           
  1464                           ; 1 bytes @ 0x1B
  1465  003B                     	ds	1
  1466  003C                     ?_fround:
  1467  003C                     ?_scale:	
  1468                           ; 3 bytes @ 0x1C
  1469                           
  1470  003C                     ?___ftdiv:	
  1471                           ; 3 bytes @ 0x1C
  1472                           
  1473  003C                     ___ftdiv@f2:	
  1474                           ; 3 bytes @ 0x1C
  1475                           
  1476                           
  1477                           ; 3 bytes @ 0x1C
  1478  003C                     	ds	3
  1479  003F                     ??_fround:
  1480  003F                     ??_scale:	
  1481                           ; 1 bytes @ 0x1F
  1482                           
  1483  003F                     ___ftdiv@f1:	
  1484                           ; 1 bytes @ 0x1F
  1485                           
  1486                           
  1487                           ; 3 bytes @ 0x1F
  1488  003F                     	ds	2
  1489  0041                     _scale$1239:
  1490                           
  1491                           ; 3 bytes @ 0x21
  1492  0041                     	ds	1
  1493  0042                     ??___ftdiv:
  1494                           
  1495                           ; 1 bytes @ 0x22
  1496  0042                     	ds	2
  1497  0044                     scale@scl:
  1498                           
  1499                           ; 1 bytes @ 0x24
  1500  0044                     	ds	1
  1501  0045                     ?___fttol:
  1502  0045                     ___fttol@f1:	
  1503                           ; 4 bytes @ 0x25
  1504                           
  1505  0045                     _fround$1238:	
  1506                           ; 3 bytes @ 0x25
  1507                           
  1508                           
  1509                           ; 3 bytes @ 0x25
  1510  0045                     	ds	1
  1511  0046                     ___ftdiv@cntr:
  1512                           
  1513                           ; 1 bytes @ 0x26
  1514  0046                     	ds	1
  1515  0047                     ___ftdiv@f3:
  1516                           
  1517                           ; 3 bytes @ 0x27
  1518  0047                     	ds	1
  1519  0048                     _fround$1237:
  1520                           
  1521                           ; 3 bytes @ 0x28
  1522  0048                     	ds	1
  1523  0049                     ??___fttol:
  1524                           
  1525                           ; 1 bytes @ 0x29
  1526  0049                     	ds	1
  1527  004A                     ___ftdiv@exp:
  1528                           
  1529                           ; 1 bytes @ 0x2A
  1530  004A                     	ds	1
  1531  004B                     fround@prec:
  1532  004B                     ___ftdiv@sign:	
  1533                           ; 1 bytes @ 0x2B
  1534                           
  1535                           
  1536                           ; 1 bytes @ 0x2B
  1537  004B                     	ds	1
  1538  004C                     ??_Mapeo_M:
  1539  004C                     ?___ftadd:	
  1540                           ; 1 bytes @ 0x2C
  1541                           
  1542  004C                     ___ftadd@f1:	
  1543                           ; 3 bytes @ 0x2C
  1544                           
  1545                           
  1546                           ; 3 bytes @ 0x2C
  1547  004C                     	ds	1
  1548  004D                     ___fttol@sign1:
  1549                           
  1550                           ; 1 bytes @ 0x2D
  1551  004D                     	ds	1
  1552  004E                     ___fttol@lval:
  1553                           
  1554                           ; 4 bytes @ 0x2E
  1555  004E                     	ds	1
  1556  004F                     ___ftadd@f2:
  1557                           
  1558                           ; 3 bytes @ 0x2F
  1559  004F                     	ds	3
  1560  0052                     ??___ftadd:
  1561  0052                     ___fttol@exp1:	
  1562                           ; 1 bytes @ 0x32
  1563                           
  1564                           
  1565                           ; 1 bytes @ 0x32
  1566  0052                     	ds	4
  1567  0056                     ___ftadd@sign:
  1568                           
  1569                           ; 1 bytes @ 0x36
  1570  0056                     	ds	1
  1571  0057                     ___ftadd@exp2:
  1572                           
  1573                           ; 1 bytes @ 0x37
  1574  0057                     	ds	1
  1575  0058                     ___ftadd@exp1:
  1576                           
  1577                           ; 1 bytes @ 0x38
  1578  0058                     	ds	1
  1579  0059                     ?___ftsub:
  1580  0059                     ___ftsub@f2:	
  1581                           ; 3 bytes @ 0x39
  1582                           
  1583                           
  1584                           ; 3 bytes @ 0x39
  1585  0059                     	ds	3
  1586  005C                     ___ftsub@f1:
  1587                           
  1588                           ; 3 bytes @ 0x3C
  1589  005C                     	ds	3
  1590  005F                     ?_sprintf:
  1591  005F                     sprintf@f:	
  1592                           ; 2 bytes @ 0x3F
  1593                           
  1594                           
  1595                           ; 1 bytes @ 0x3F
  1596  005F                     	ds	4
  1597  0063                     ??_sprintf:
  1598                           
  1599                           ; 1 bytes @ 0x43
  1600  0063                     	ds	6
  1601  0069                     ??_ADC_to_string:
  1602                           
  1603                           ; 1 bytes @ 0x49
  1604  0069                     	ds	3
  1605                           
  1606                           	psect	maintext
  1607  1F1A                     __pmaintext:	
  1608 ;;
  1609 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1610 ;;
  1611 ;; *************** function _main *****************
  1612 ;; Defined at:
  1613 ;;		line 94 in file "main_maestro.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : B00/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1627 ;;      Params:         0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels required when called:    6
  1633 ;; This function calls:
  1634 ;;		_ADC_to_string
  1635 ;;		_Lcd_Clear
  1636 ;;		_Lcd_Init
  1637 ;;		_Lcd_Set_Cursor
  1638 ;;		_Lcd_Write_String
  1639 ;;		_Mapeo_M
  1640 ;;		_SPI_ADC
  1641 ;;		_SPI_CONT
  1642 ;;		_SPI_TEMP
  1643 ;;		_Show_val_LCD
  1644 ;;		_Show_val_VT
  1645 ;;		_setup
  1646 ;; This function is called by:
  1647 ;;		Startup code after reset
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           
  1652                           ;psect for function _main
  1653  1F1A                     _main:
  1654  1F1A                     l4240:	
  1655                           ;incstack = 0
  1656                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1657                           
  1658                           
  1659                           ;main_maestro.c: 95:     setup();
  1660  1F1A  160A  158A  2651  160A  158A  	fcall	_setup
  1661  1F1F                     l4242:
  1662                           
  1663                           ;main_maestro.c: 96:     cont = 0;
  1664  1F1F  1283               	bcf	3,5	;RP0=0, select bank0
  1665  1F20  1303               	bcf	3,6	;RP1=0, select bank0
  1666  1F21  01EE               	clrf	_cont
  1667  1F22                     l4244:
  1668                           
  1669                           ;main_maestro.c: 97:     Lcd_Init();
  1670  1F22  160A  158A  2764  160A  158A  	fcall	_Lcd_Init
  1671  1F27                     l4246:
  1672                           
  1673                           ;main_maestro.c: 98:     Lcd_Clear();
  1674  1F27  160A  158A  2420  160A  158A  	fcall	_Lcd_Clear
  1675  1F2C                     l4248:
  1676                           
  1677                           ;main_maestro.c: 99:     Lcd_Set_Cursor(1,1);
  1678  1F2C  01F6               	clrf	Lcd_Set_Cursor@b
  1679  1F2D  0AF6               	incf	Lcd_Set_Cursor@b,f
  1680  1F2E  3001               	movlw	1
  1681  1F2F  160A  158A  249C  160A  158A  	fcall	_Lcd_Set_Cursor
  1682  1F34                     l4250:
  1683                           
  1684                           ;main_maestro.c: 100:     Lcd_Write_String("CONT   ADC  TEMP");
  1685  1F34  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1686  1F35  00F5               	movwf	Lcd_Write_String@a
  1687  1F36  3080               	movlw	128
  1688  1F37  00F6               	movwf	Lcd_Write_String@a+1
  1689  1F38  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  1690  1F3D                     l4252:
  1691                           
  1692                           ;main_maestro.c: 107:         SPI_CONT();
  1693  1F3D  160A  158A  25A9  160A  158A  	fcall	_SPI_CONT
  1694  1F42                     l4254:
  1695                           
  1696                           ;main_maestro.c: 108:         SPI_ADC();
  1697  1F42  160A  158A  2541  160A  158A  	fcall	_SPI_ADC
  1698  1F47                     l4256:
  1699                           
  1700                           ;main_maestro.c: 109:         SPI_TEMP();
  1701  1F47  160A  158A  2575  160A  158A  	fcall	_SPI_TEMP
  1702  1F4C                     l4258:
  1703                           
  1704                           ;main_maestro.c: 110:         Mapeo_M();
  1705  1F4C  160A  118A  2335  160A  158A  	fcall	_Mapeo_M
  1706  1F51                     l4260:
  1707                           
  1708                           ;main_maestro.c: 111:         ADC_to_string();
  1709  1F51  120A  118A  27BD  160A  158A  	fcall	_ADC_to_string
  1710  1F56                     l4262:
  1711                           
  1712                           ;main_maestro.c: 112:         Show_val_VT();
  1713  1F56  160A  118A  2206  160A  158A  	fcall	_Show_val_VT
  1714  1F5B                     l4264:
  1715                           
  1716                           ;main_maestro.c: 113:         Show_val_LCD();
  1717  1F5B  160A  158A  27AF  160A  158A  	fcall	_Show_val_LCD
  1718  1F60  2F3D               	goto	l4252
  1719  1F61  120A  118A  280C   	ljmp	start
  1720  1F64                     __end_of_main:
  1721                           
  1722                           	psect	text1
  1723  1E51                     __ptext1:	
  1724 ;; *************** function _setup *****************
  1725 ;; Defined at:
  1726 ;;		line 204 in file "main_maestro.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1740 ;;      Params:         0       0       0       0       0
  1741 ;;      Locals:         0       0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0
  1743 ;;      Totals:         0       0       0       0       0
  1744 ;;Total ram usage:        0 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    2
  1747 ;; This function calls:
  1748 ;;		_USART_Init
  1749 ;;		_USART_Init_BaudRate
  1750 ;;		_initOsc
  1751 ;;		_spiInit
  1752 ;; This function is called by:
  1753 ;;		_main
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           
  1758                           ;psect for function _setup
  1759  1E51                     _setup:
  1760  1E51                     l3284:	
  1761                           ;incstack = 0
  1762                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1763                           
  1764                           
  1765                           ;main_maestro.c: 205:     initOsc(0b00000111);
  1766  1E51  3007               	movlw	7
  1767  1E52  160A  118A  21AA  160A  158A  	fcall	_initOsc
  1768  1E57                     l3286:
  1769                           
  1770                           ;main_maestro.c: 206:     ANSEL = 0;
  1771  1E57  1683               	bsf	3,5	;RP0=1, select bank3
  1772  1E58  1703               	bsf	3,6	;RP1=1, select bank3
  1773  1E59  0188               	clrf	8	;volatile
  1774  1E5A                     l3288:
  1775                           
  1776                           ;main_maestro.c: 207:     ANSELH = 0;
  1777  1E5A  0189               	clrf	9	;volatile
  1778  1E5B                     l3290:
  1779                           
  1780                           ;main_maestro.c: 209:     TRISA = 0;
  1781  1E5B  1683               	bsf	3,5	;RP0=1, select bank1
  1782  1E5C  1303               	bcf	3,6	;RP1=0, select bank1
  1783  1E5D  0185               	clrf	5	;volatile
  1784  1E5E                     l3292:
  1785                           
  1786                           ;main_maestro.c: 210:     TRISB = 0;
  1787  1E5E  0186               	clrf	6	;volatile
  1788  1E5F                     l3294:
  1789                           
  1790                           ;main_maestro.c: 214:     TRISD = 0;
  1791  1E5F  0188               	clrf	8	;volatile
  1792  1E60                     l3296:
  1793                           
  1794                           ;main_maestro.c: 215:     TRISE = 0;
  1795  1E60  0189               	clrf	9	;volatile
  1796  1E61                     l3298:
  1797                           
  1798                           ;main_maestro.c: 217:     PORTA = 0;
  1799  1E61  1283               	bcf	3,5	;RP0=0, select bank0
  1800  1E62  1303               	bcf	3,6	;RP1=0, select bank0
  1801  1E63  0185               	clrf	5	;volatile
  1802  1E64                     l3300:
  1803                           
  1804                           ;main_maestro.c: 218:     PORTB = 0;
  1805  1E64  0186               	clrf	6	;volatile
  1806  1E65                     l3302:
  1807                           
  1808                           ;main_maestro.c: 219:     PORTC = 0;
  1809  1E65  0187               	clrf	7	;volatile
  1810  1E66                     l3304:
  1811                           
  1812                           ;main_maestro.c: 220:     PORTD = 0;
  1813  1E66  0188               	clrf	8	;volatile
  1814  1E67                     l3306:
  1815                           
  1816                           ;main_maestro.c: 221:     PORTE = 0;
  1817  1E67  0189               	clrf	9	;volatile
  1818  1E68                     l3308:
  1819                           
  1820                           ;main_maestro.c: 224:     TRISC0 = 0;
  1821  1E68  1683               	bsf	3,5	;RP0=1, select bank1
  1822  1E69  1303               	bcf	3,6	;RP1=0, select bank1
  1823  1E6A  1007               	bcf	7,0	;volatile
  1824  1E6B                     l3310:
  1825                           
  1826                           ;main_maestro.c: 225:     PORTCbits.RC0 = 1;
  1827  1E6B  1283               	bcf	3,5	;RP0=0, select bank0
  1828  1E6C  1303               	bcf	3,6	;RP1=0, select bank0
  1829  1E6D  1407               	bsf	7,0	;volatile
  1830  1E6E                     l3312:
  1831                           
  1832                           ;main_maestro.c: 226:     TRISC1 = 0;
  1833  1E6E  1683               	bsf	3,5	;RP0=1, select bank1
  1834  1E6F  1303               	bcf	3,6	;RP1=0, select bank1
  1835  1E70  1087               	bcf	7,1	;volatile
  1836  1E71                     l3314:
  1837                           
  1838                           ;main_maestro.c: 227:     PORTCbits.RC1 = 1;
  1839  1E71  1283               	bcf	3,5	;RP0=0, select bank0
  1840  1E72  1303               	bcf	3,6	;RP1=0, select bank0
  1841  1E73  1487               	bsf	7,1	;volatile
  1842  1E74                     l3316:
  1843                           
  1844                           ;main_maestro.c: 228:     TRISC2 = 0;
  1845  1E74  1683               	bsf	3,5	;RP0=1, select bank1
  1846  1E75  1303               	bcf	3,6	;RP1=0, select bank1
  1847  1E76  1107               	bcf	7,2	;volatile
  1848  1E77                     l3318:
  1849                           
  1850                           ;main_maestro.c: 229:     PORTCbits.RC2 = 1;
  1851  1E77  1283               	bcf	3,5	;RP0=0, select bank0
  1852  1E78  1303               	bcf	3,6	;RP1=0, select bank0
  1853  1E79  1507               	bsf	7,2	;volatile
  1854  1E7A                     l3320:
  1855                           
  1856                           ;main_maestro.c: 232:     USART_Init_BaudRate();
  1857  1E7A  160A  118A  20CA  160A  158A  	fcall	_USART_Init_BaudRate
  1858  1E7F                     l3322:
  1859                           
  1860                           ;main_maestro.c: 233:     USART_Init();
  1861  1E7F  160A  158A  23F1  160A  158A  	fcall	_USART_Init
  1862  1E84                     l3324:
  1863                           
  1864                           ;main_maestro.c: 235:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1865  1E84  01F2               	clrf	spiInit@sDataSample
  1866  1E85  01F3               	clrf	spiInit@sClockIdle
  1867  1E86  01F4               	clrf	spiInit@sTransmitEdge
  1868  1E87  3020               	movlw	32
  1869  1E88  160A  158A  2455  160A  158A  	fcall	_spiInit
  1870  1E8D                     l135:
  1871  1E8D  0008               	return
  1872  1E8E                     __end_of_setup:
  1873                           
  1874                           	psect	text2
  1875  1C55                     __ptext2:	
  1876 ;; *************** function _spiInit *****************
  1877 ;; Defined at:
  1878 ;;		line 14 in file "SPI.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  sType           1    wreg     enum E1264
  1881 ;;  sDataSample     1    2[COMMON] enum E1272
  1882 ;;  sClockIdle      1    3[COMMON] enum E1276
  1883 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  sType           1    5[COMMON] enum E1264
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1895 ;;      Params:         3       0       0       0       0
  1896 ;;      Locals:         1       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0
  1898 ;;      Totals:         4       0       0       0       0
  1899 ;;Total ram usage:        4 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    1
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_setup
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function _spiInit
  1911  1C55                     _spiInit:
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1915                           ;spiInit@sType stored from wreg
  1916  1C55  00F5               	movwf	spiInit@sType
  1917  1C56                     l3220:
  1918                           
  1919                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1920  1C56  1683               	bsf	3,5	;RP0=1, select bank1
  1921  1C57  1303               	bcf	3,6	;RP1=0, select bank1
  1922  1C58  1287               	bcf	7,5	;volatile
  1923                           
  1924                           ;SPI.c: 17:     if(sType & 0b00000100)
  1925  1C59  1D75               	btfss	spiInit@sType,2
  1926  1C5A  2C5C               	goto	u4401
  1927  1C5B  2C5D               	goto	u4400
  1928  1C5C                     u4401:
  1929  1C5C  2C61               	goto	l3226
  1930  1C5D                     u4400:
  1931  1C5D                     l3222:
  1932                           
  1933                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1934  1C5D  0874               	movf	spiInit@sTransmitEdge,w
  1935  1C5E  0094               	movwf	20	;volatile
  1936  1C5F                     l3224:
  1937                           
  1938                           ;SPI.c: 20:         TRISC3 = 1;
  1939  1C5F  1587               	bsf	7,3	;volatile
  1940                           
  1941                           ;SPI.c: 21:     }
  1942  1C60  2C65               	goto	l257
  1943  1C61                     l3226:
  1944                           
  1945                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1946  1C61  0872               	movf	spiInit@sDataSample,w
  1947  1C62  0474               	iorwf	spiInit@sTransmitEdge,w
  1948  1C63  0094               	movwf	20	;volatile
  1949  1C64                     l3228:
  1950                           
  1951                           ;SPI.c: 25:         TRISC3 = 0;
  1952  1C64  1187               	bcf	7,3	;volatile
  1953  1C65                     l257:	
  1954                           ;SPI.c: 26:     }
  1955                           
  1956                           
  1957                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1958  1C65  0875               	movf	spiInit@sType,w
  1959  1C66  0473               	iorwf	spiInit@sClockIdle,w
  1960  1C67  1283               	bcf	3,5	;RP0=0, select bank0
  1961  1C68  1303               	bcf	3,6	;RP1=0, select bank0
  1962  1C69  0094               	movwf	20	;volatile
  1963  1C6A                     l258:
  1964  1C6A  0008               	return
  1965  1C6B                     __end_of_spiInit:
  1966                           
  1967                           	psect	text3
  1968  11AA                     __ptext3:	
  1969 ;; *************** function _initOsc *****************
  1970 ;; Defined at:
  1971 ;;		line 3 in file "Oscilador.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  IRCF            1    wreg     unsigned char 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  IRCF            1    4[COMMON] unsigned char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1985 ;;      Params:         0       0       0       0       0
  1986 ;;      Locals:         1       0       0       0       0
  1987 ;;      Temps:          2       0       0       0       0
  1988 ;;      Totals:         3       0       0       0       0
  1989 ;;Total ram usage:        3 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    1
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_setup
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _initOsc
  2001  11AA                     _initOsc:
  2002                           
  2003                           ;incstack = 0
  2004                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  2005                           ;initOsc@IRCF stored from wreg
  2006  11AA  00F4               	movwf	initOsc@IRCF
  2007  11AB                     l3204:
  2008                           
  2009                           ;Oscilador.c: 5:     switch(IRCF){
  2010  11AB  29E2               	goto	l3208
  2011  11AC                     l141:	
  2012                           ;Oscilador.c: 6:         case 0:
  2013                           
  2014                           
  2015                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  2016  11AC  1683               	bsf	3,5	;RP0=1, select bank1
  2017  11AD  1303               	bcf	3,6	;RP1=0, select bank1
  2018  11AE  130F               	bcf	15,6	;volatile
  2019                           
  2020                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  2021  11AF  128F               	bcf	15,5	;volatile
  2022                           
  2023                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  2024  11B0  120F               	bcf	15,4	;volatile
  2025                           
  2026                           ;Oscilador.c: 10:             break;
  2027  11B1  2A04               	goto	l142
  2028  11B2                     l143:	
  2029                           ;Oscilador.c: 11:          case 1:
  2030                           
  2031                           
  2032                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  2033  11B2  1683               	bsf	3,5	;RP0=1, select bank1
  2034  11B3  1303               	bcf	3,6	;RP1=0, select bank1
  2035  11B4  130F               	bcf	15,6	;volatile
  2036                           
  2037                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  2038  11B5  128F               	bcf	15,5	;volatile
  2039                           
  2040                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  2041  11B6  160F               	bsf	15,4	;volatile
  2042                           
  2043                           ;Oscilador.c: 15:             break;
  2044  11B7  2A04               	goto	l142
  2045  11B8                     l144:	
  2046                           ;Oscilador.c: 16:         case 2:
  2047                           
  2048                           
  2049                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  2050  11B8  1683               	bsf	3,5	;RP0=1, select bank1
  2051  11B9  1303               	bcf	3,6	;RP1=0, select bank1
  2052  11BA  130F               	bcf	15,6	;volatile
  2053                           
  2054                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  2055  11BB  168F               	bsf	15,5	;volatile
  2056                           
  2057                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  2058  11BC  120F               	bcf	15,4	;volatile
  2059                           
  2060                           ;Oscilador.c: 20:             break;
  2061  11BD  2A04               	goto	l142
  2062  11BE                     l145:	
  2063                           ;Oscilador.c: 21:         case 3:
  2064                           
  2065                           
  2066                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  2067  11BE  1683               	bsf	3,5	;RP0=1, select bank1
  2068  11BF  1303               	bcf	3,6	;RP1=0, select bank1
  2069  11C0  130F               	bcf	15,6	;volatile
  2070                           
  2071                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  2072  11C1  168F               	bsf	15,5	;volatile
  2073                           
  2074                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  2075  11C2  160F               	bsf	15,4	;volatile
  2076                           
  2077                           ;Oscilador.c: 25:             break;
  2078  11C3  2A04               	goto	l142
  2079  11C4                     l146:	
  2080                           ;Oscilador.c: 26:         case 4:
  2081                           
  2082                           
  2083                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  2084  11C4  1683               	bsf	3,5	;RP0=1, select bank1
  2085  11C5  1303               	bcf	3,6	;RP1=0, select bank1
  2086  11C6  170F               	bsf	15,6	;volatile
  2087                           
  2088                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  2089  11C7  128F               	bcf	15,5	;volatile
  2090                           
  2091                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  2092  11C8  120F               	bcf	15,4	;volatile
  2093                           
  2094                           ;Oscilador.c: 30:             break;
  2095  11C9  2A04               	goto	l142
  2096  11CA                     l147:	
  2097                           ;Oscilador.c: 31:         case 5:
  2098                           
  2099                           
  2100                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  2101  11CA  1683               	bsf	3,5	;RP0=1, select bank1
  2102  11CB  1303               	bcf	3,6	;RP1=0, select bank1
  2103  11CC  170F               	bsf	15,6	;volatile
  2104                           
  2105                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  2106  11CD  128F               	bcf	15,5	;volatile
  2107                           
  2108                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  2109  11CE  160F               	bsf	15,4	;volatile
  2110                           
  2111                           ;Oscilador.c: 35:             break;
  2112  11CF  2A04               	goto	l142
  2113  11D0                     l148:	
  2114                           ;Oscilador.c: 36:         case 6:
  2115                           
  2116                           
  2117                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  2118  11D0  1683               	bsf	3,5	;RP0=1, select bank1
  2119  11D1  1303               	bcf	3,6	;RP1=0, select bank1
  2120  11D2  170F               	bsf	15,6	;volatile
  2121                           
  2122                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  2123  11D3  168F               	bsf	15,5	;volatile
  2124                           
  2125                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  2126  11D4  120F               	bcf	15,4	;volatile
  2127                           
  2128                           ;Oscilador.c: 40:             break;
  2129  11D5  2A04               	goto	l142
  2130  11D6                     l149:	
  2131                           ;Oscilador.c: 41:         case 7:
  2132                           
  2133                           
  2134                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  2135  11D6  1683               	bsf	3,5	;RP0=1, select bank1
  2136  11D7  1303               	bcf	3,6	;RP1=0, select bank1
  2137  11D8  170F               	bsf	15,6	;volatile
  2138                           
  2139                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  2140  11D9  168F               	bsf	15,5	;volatile
  2141                           
  2142                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  2143  11DA  160F               	bsf	15,4	;volatile
  2144                           
  2145                           ;Oscilador.c: 45:             break;
  2146  11DB  2A04               	goto	l142
  2147  11DC                     l150:	
  2148                           ;Oscilador.c: 46:         default:
  2149                           
  2150                           
  2151                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  2152  11DC  1683               	bsf	3,5	;RP0=1, select bank1
  2153  11DD  1303               	bcf	3,6	;RP1=0, select bank1
  2154  11DE  170F               	bsf	15,6	;volatile
  2155                           
  2156                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  2157  11DF  168F               	bsf	15,5	;volatile
  2158                           
  2159                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  2160  11E0  120F               	bcf	15,4	;volatile
  2161                           
  2162                           ;Oscilador.c: 50:             break;
  2163  11E1  2A04               	goto	l142
  2164  11E2                     l3208:
  2165  11E2  0874               	movf	initOsc@IRCF,w
  2166  11E3  00F2               	movwf	??_initOsc
  2167  11E4  01F3               	clrf	??_initOsc+1
  2168                           
  2169                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2170                           ; Switch size 1, requested type "simple"
  2171                           ; Number of cases is 1, Range of values is 0 to 0
  2172                           ; switch strategies available:
  2173                           ; Name         Instructions Cycles
  2174                           ; simple_byte            4     3 (average)
  2175                           ; direct_byte           11     8 (fixed)
  2176                           ; jumptable            260     6 (fixed)
  2177                           ;	Chosen strategy is simple_byte
  2178  11E5  0873               	movf	??_initOsc+1,w
  2179  11E6  3A00               	xorlw	0	; case 0
  2180  11E7  1903               	skipnz
  2181  11E8  29EA               	goto	l4320
  2182  11E9  29DC               	goto	l150
  2183  11EA                     l4320:
  2184                           
  2185                           ; Switch size 1, requested type "simple"
  2186                           ; Number of cases is 8, Range of values is 0 to 7
  2187                           ; switch strategies available:
  2188                           ; Name         Instructions Cycles
  2189                           ; simple_byte           25    13 (average)
  2190                           ; direct_byte           32     8 (fixed)
  2191                           ; jumptable            260     6 (fixed)
  2192                           ;	Chosen strategy is simple_byte
  2193  11EA  0872               	movf	??_initOsc,w
  2194  11EB  3A00               	xorlw	0	; case 0
  2195  11EC  1903               	skipnz
  2196  11ED  29AC               	goto	l141
  2197  11EE  3A01               	xorlw	1	; case 1
  2198  11EF  1903               	skipnz
  2199  11F0  29B2               	goto	l143
  2200  11F1  3A03               	xorlw	3	; case 2
  2201  11F2  1903               	skipnz
  2202  11F3  29B8               	goto	l144
  2203  11F4  3A01               	xorlw	1	; case 3
  2204  11F5  1903               	skipnz
  2205  11F6  29BE               	goto	l145
  2206  11F7  3A07               	xorlw	7	; case 4
  2207  11F8  1903               	skipnz
  2208  11F9  29C4               	goto	l146
  2209  11FA  3A01               	xorlw	1	; case 5
  2210  11FB  1903               	skipnz
  2211  11FC  29CA               	goto	l147
  2212  11FD  3A03               	xorlw	3	; case 6
  2213  11FE  1903               	skipnz
  2214  11FF  29D0               	goto	l148
  2215  1200  3A01               	xorlw	1	; case 7
  2216  1201  1903               	skipnz
  2217  1202  29D6               	goto	l149
  2218  1203  29DC               	goto	l150
  2219  1204                     l142:
  2220                           
  2221                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  2222  1204  140F               	bsf	15,0	;volatile
  2223  1205                     l151:
  2224  1205  0008               	return
  2225  1206                     __end_of_initOsc:
  2226                           
  2227                           	psect	text4
  2228  10CA                     __ptext4:	
  2229 ;; *************** function _USART_Init_BaudRate *****************
  2230 ;; Defined at:
  2231 ;;		line 19 in file "USART.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;		None
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;		None
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      void 
  2238 ;; Registers used:
  2239 ;;		wreg, status,2
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2245 ;;      Params:         0       0       0       0       0
  2246 ;;      Locals:         0       0       0       0       0
  2247 ;;      Temps:          0       0       0       0       0
  2248 ;;      Totals:         0       0       0       0       0
  2249 ;;Total ram usage:        0 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    1
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_setup
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function _USART_Init_BaudRate
  2261  10CA                     _USART_Init_BaudRate:
  2262  10CA                     l3214:	
  2263                           ;incstack = 0
  2264                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  2265                           
  2266                           
  2267                           ;USART.c: 20:     SPBRGH = 0;
  2268  10CA  1683               	bsf	3,5	;RP0=1, select bank1
  2269  10CB  1303               	bcf	3,6	;RP1=0, select bank1
  2270  10CC  019A               	clrf	26	;volatile
  2271  10CD                     l3216:
  2272                           
  2273                           ;USART.c: 21:     SPBRG = 12;
  2274  10CD  300C               	movlw	12
  2275  10CE  0099               	movwf	25	;volatile
  2276  10CF                     l220:
  2277  10CF  0008               	return
  2278  10D0                     __end_of_USART_Init_BaudRate:
  2279                           
  2280                           	psect	text5
  2281  1BF1                     __ptext5:	
  2282 ;; *************** function _USART_Init *****************
  2283 ;; Defined at:
  2284 ;;		line 8 in file "USART.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		None
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2298 ;;      Params:         0       0       0       0       0
  2299 ;;      Locals:         0       0       0       0       0
  2300 ;;      Temps:          0       0       0       0       0
  2301 ;;      Totals:         0       0       0       0       0
  2302 ;;Total ram usage:        0 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    1
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_setup
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           
  2313                           ;psect for function _USART_Init
  2314  1BF1                     _USART_Init:
  2315  1BF1                     l3218:	
  2316                           ;incstack = 0
  2317                           ; Regs used in _USART_Init: []
  2318                           
  2319                           
  2320                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  2321  1BF1  1283               	bcf	3,5	;RP0=0, select bank0
  2322  1BF2  1303               	bcf	3,6	;RP1=0, select bank0
  2323  1BF3  1798               	bsf	24,7	;volatile
  2324                           
  2325                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  2326  1BF4  1683               	bsf	3,5	;RP0=1, select bank1
  2327  1BF5  1303               	bcf	3,6	;RP1=0, select bank1
  2328  1BF6  1218               	bcf	24,4	;volatile
  2329                           
  2330                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  2331  1BF7  1698               	bsf	24,5	;volatile
  2332  1BF8                     l217:
  2333  1BF8  0008               	return
  2334  1BF9                     __end_of_USART_Init:
  2335                           
  2336                           	psect	text6
  2337  1206                     __ptext6:	
  2338 ;; *************** function _Show_val_VT *****************
  2339 ;; Defined at:
  2340 ;;		line 145 in file "main_maestro.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;		None
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2354 ;;      Params:         0       0       0       0       0
  2355 ;;      Locals:         0       0       0       0       0
  2356 ;;      Temps:          0       0       0       0       0
  2357 ;;      Totals:         0       0       0       0       0
  2358 ;;Total ram usage:        0 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    3
  2361 ;; This function calls:
  2362 ;;		_Write_USART
  2363 ;;		_Write_USART_String
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           
  2370                           ;psect for function _Show_val_VT
  2371  1206                     _Show_val_VT:
  2372  1206                     l3372:	
  2373                           ;incstack = 0
  2374                           ; Regs used in _Show_val_VT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2375                           
  2376                           
  2377                           ;main_maestro.c: 146:     Write_USART_String("CONT:  \n");
  2378  1206  3091               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2379  1207  00F3               	movwf	Write_USART_String@a
  2380  1208  3080               	movlw	128
  2381  1209  00F4               	movwf	Write_USART_String@a+1
  2382  120A  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2383                           
  2384                           ;main_maestro.c: 147:     Write_USART_String(data_cont);
  2385  120F  30B3               	movlw	(low (_data_cont| 0))& (0+255)
  2386  1210  00F3               	movwf	Write_USART_String@a
  2387  1211  3000               	movlw	0
  2388  1212  00F4               	movwf	Write_USART_String@a+1
  2389  1213  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2390                           
  2391                           ;main_maestro.c: 148:     Write_USART_String("  \n");
  2392  1218  309E               	movlw	(low (((STR_8+4)-__stringbase)| (0+32768)))& (0+255)
  2393  1219  00F3               	movwf	Write_USART_String@a
  2394  121A  3080               	movlw	128
  2395  121B  00F4               	movwf	Write_USART_String@a+1
  2396  121C  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2397                           
  2398                           ;main_maestro.c: 149:     Write_USART_String("ADC:  \n");
  2399  1221  309A               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2400  1222  00F3               	movwf	Write_USART_String@a
  2401  1223  3080               	movlw	128
  2402  1224  00F4               	movwf	Write_USART_String@a+1
  2403  1225  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2404                           
  2405                           ;main_maestro.c: 150:     Write_USART_String(data_ADC);
  2406  122A  30AB               	movlw	(low (_data_ADC| 0))& (0+255)
  2407  122B  00F3               	movwf	Write_USART_String@a
  2408  122C  3000               	movlw	0
  2409  122D  00F4               	movwf	Write_USART_String@a+1
  2410  122E  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2411                           
  2412                           ;main_maestro.c: 151:     Write_USART_String("  \n");
  2413  1233  309E               	movlw	(low (((STR_8+4)-__stringbase)| (0+32768)))& (0+255)
  2414  1234  00F3               	movwf	Write_USART_String@a
  2415  1235  3080               	movlw	128
  2416  1236  00F4               	movwf	Write_USART_String@a+1
  2417  1237  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2418                           
  2419                           ;main_maestro.c: 152:     Write_USART_String("TEMP:  \n");
  2420  123C  3088               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2421  123D  00F3               	movwf	Write_USART_String@a
  2422  123E  3080               	movlw	128
  2423  123F  00F4               	movwf	Write_USART_String@a+1
  2424  1240  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2425                           
  2426                           ;main_maestro.c: 153:     Write_USART_String(data_TEMP);
  2427  1245  30A3               	movlw	(low (_data_TEMP| 0))& (0+255)
  2428  1246  00F3               	movwf	Write_USART_String@a
  2429  1247  3000               	movlw	0
  2430  1248  00F4               	movwf	Write_USART_String@a+1
  2431  1249  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2432                           
  2433                           ;main_maestro.c: 154:     Write_USART_String("°C  \n");
  2434  124E  30A9               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2435  124F  00F3               	movwf	Write_USART_String@a
  2436  1250  3080               	movlw	128
  2437  1251  00F4               	movwf	Write_USART_String@a+1
  2438  1252  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2439  1257                     l3374:
  2440                           
  2441                           ;main_maestro.c: 155:     Write_USART(13);
  2442  1257  300D               	movlw	13
  2443  1258  160A  158A  2414  160A  118A  	fcall	_Write_USART
  2444  125D                     l3376:
  2445                           
  2446                           ;main_maestro.c: 156:     Write_USART(10);
  2447  125D  300A               	movlw	10
  2448  125E  160A  158A  2414  160A  118A  	fcall	_Write_USART
  2449  1263                     l123:
  2450  1263  0008               	return
  2451  1264                     __end_of_Show_val_VT:
  2452                           
  2453                           	psect	text7
  2454  10D0                     __ptext7:	
  2455 ;; *************** function _Write_USART_String *****************
  2456 ;; Defined at:
  2457 ;;		line 37 in file "USART.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  a               2    3[COMMON] PTR unsigned char 
  2460 ;;		 -> STR_11(6), STR_10(9), STR_9(4), STR_8(8), 
  2461 ;;		 -> STR_7(4), STR_6(9), data_TEMP(8), data_ADC(8), 
  2462 ;;		 -> data_cont(8), 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  i               1    6[COMMON] unsigned char 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2474 ;;      Params:         2       0       0       0       0
  2475 ;;      Locals:         1       0       0       0       0
  2476 ;;      Temps:          1       0       0       0       0
  2477 ;;      Totals:         4       0       0       0       0
  2478 ;;Total ram usage:        4 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    2
  2481 ;; This function calls:
  2482 ;;		_Write_USART
  2483 ;; This function is called by:
  2484 ;;		_Show_val_VT
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _Write_USART_String
  2490  10D0                     _Write_USART_String:
  2491  10D0                     l3188:	
  2492                           ;incstack = 0
  2493                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2494                           
  2495                           
  2496                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  2497  10D0  01F6               	clrf	Write_USART_String@i
  2498  10D1  28E7               	goto	l3194
  2499  10D2                     l3190:
  2500                           
  2501                           ;USART.c: 40:         Write_USART(a[i]);
  2502  10D2  0876               	movf	Write_USART_String@i,w
  2503  10D3  0773               	addwf	Write_USART_String@a,w
  2504  10D4  0084               	movwf	4
  2505  10D5  0874               	movf	Write_USART_String@a+1,w
  2506  10D6  1803               	skipnc
  2507  10D7  0A74               	incf	Write_USART_String@a+1,w
  2508  10D8  00FF               	movwf	btemp+1
  2509  10D9  160A  118A  2000  160A  118A  	fcall	stringtab
  2510  10DE  160A  158A  2414  160A  118A  	fcall	_Write_USART
  2511  10E3                     l3192:
  2512                           
  2513                           ;USART.c: 41:     }
  2514  10E3  3001               	movlw	1
  2515  10E4  00F5               	movwf	??_Write_USART_String
  2516  10E5  0875               	movf	??_Write_USART_String,w
  2517  10E6  07F6               	addwf	Write_USART_String@i,f
  2518  10E7                     l3194:
  2519  10E7  0876               	movf	Write_USART_String@i,w
  2520  10E8  0773               	addwf	Write_USART_String@a,w
  2521  10E9  0084               	movwf	4
  2522  10EA  0874               	movf	Write_USART_String@a+1,w
  2523  10EB  1803               	skipnc
  2524  10EC  0A74               	incf	Write_USART_String@a+1,w
  2525  10ED  1283               	bcf	3,5	;RP0=0, select bank0
  2526  10EE  1303               	bcf	3,6	;RP1=0, select bank0
  2527  10EF  00FF               	movwf	btemp+1
  2528  10F0  160A  118A  2000  160A  118A  	fcall	stringtab
  2529  10F5  3A00               	xorlw	0
  2530  10F6  1D03               	skipz
  2531  10F7  28F9               	goto	u4391
  2532  10F8  28FA               	goto	u4390
  2533  10F9                     u4391:
  2534  10F9  28D2               	goto	l3190
  2535  10FA                     u4390:
  2536  10FA                     l235:
  2537  10FA  0008               	return
  2538  10FB                     __end_of_Write_USART_String:
  2539                           
  2540                           	psect	text8
  2541  1C14                     __ptext8:	
  2542 ;; *************** function _Write_USART *****************
  2543 ;; Defined at:
  2544 ;;		line 33 in file "USART.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  a               1    wreg     unsigned char 
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;  a               1    2[COMMON] unsigned char 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2558 ;;      Params:         0       0       0       0       0
  2559 ;;      Locals:         1       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0
  2561 ;;      Totals:         1       0       0       0       0
  2562 ;;Total ram usage:        1 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    1
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_Show_val_VT
  2569 ;;		_Write_USART_String
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           
  2574                           ;psect for function _Write_USART
  2575  1C14                     _Write_USART:
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in _Write_USART: [wreg]
  2579                           ;Write_USART@a stored from wreg
  2580  1C14  00F2               	movwf	Write_USART@a
  2581  1C15                     l2526:
  2582  1C15                     l226:	
  2583                           ;USART.c: 34:     while(!TRMT);
  2584                           
  2585  1C15  1683               	bsf	3,5	;RP0=1, select bank1
  2586  1C16  1303               	bcf	3,6	;RP1=0, select bank1
  2587  1C17  1C98               	btfss	24,1	;volatile
  2588  1C18  2C1A               	goto	u3101
  2589  1C19  2C1B               	goto	u3100
  2590  1C1A                     u3101:
  2591  1C1A  2C15               	goto	l226
  2592  1C1B                     u3100:
  2593  1C1B                     l2528:
  2594                           
  2595                           ;USART.c: 35:     TXREG=a;
  2596  1C1B  0872               	movf	Write_USART@a,w
  2597  1C1C  1283               	bcf	3,5	;RP0=0, select bank0
  2598  1C1D  1303               	bcf	3,6	;RP1=0, select bank0
  2599  1C1E  0099               	movwf	25	;volatile
  2600  1C1F                     l229:
  2601  1C1F  0008               	return
  2602  1C20                     __end_of_Write_USART:
  2603                           
  2604                           	psect	text9
  2605  1FAF                     __ptext9:	
  2606 ;; *************** function _Show_val_LCD *****************
  2607 ;; Defined at:
  2608 ;;		line 134 in file "main_maestro.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2622 ;;      Params:         0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0
  2624 ;;      Temps:          0       1       0       0       0
  2625 ;;      Totals:         0       1       0       0       0
  2626 ;;Total ram usage:        1 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    4
  2629 ;; This function calls:
  2630 ;;		_Lcd_Set_Cursor
  2631 ;;		_Lcd_Write_String
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function _Show_val_LCD
  2639  1FAF                     _Show_val_LCD:
  2640  1FAF                     l4228:	
  2641                           ;incstack = 0
  2642                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2643                           
  2644                           
  2645                           ;main_maestro.c: 135:     Lcd_Set_Cursor(2,1);
  2646  1FAF  01F6               	clrf	Lcd_Set_Cursor@b
  2647  1FB0  0AF6               	incf	Lcd_Set_Cursor@b,f
  2648  1FB1  3002               	movlw	2
  2649  1FB2  160A  158A  249C  160A  158A  	fcall	_Lcd_Set_Cursor
  2650  1FB7                     l4230:
  2651                           
  2652                           ;main_maestro.c: 136:     Lcd_Write_String(data_cont);
  2653  1FB7  30B3               	movlw	(low (_data_cont| 0))& (0+255)
  2654  1FB8  00F5               	movwf	Lcd_Write_String@a
  2655  1FB9  3000               	movlw	0
  2656  1FBA  00F6               	movwf	Lcd_Write_String@a+1
  2657  1FBB  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  2658  1FC0                     l4232:
  2659                           
  2660                           ;main_maestro.c: 137:     Lcd_Set_Cursor(2,7);
  2661  1FC0  3007               	movlw	7
  2662  1FC1  1283               	bcf	3,5	;RP0=0, select bank0
  2663  1FC2  1303               	bcf	3,6	;RP1=0, select bank0
  2664  1FC3  00A2               	movwf	??_Show_val_LCD
  2665  1FC4  0822               	movf	??_Show_val_LCD,w
  2666  1FC5  00F6               	movwf	Lcd_Set_Cursor@b
  2667  1FC6  3002               	movlw	2
  2668  1FC7  160A  158A  249C  160A  158A  	fcall	_Lcd_Set_Cursor
  2669                           
  2670                           ;main_maestro.c: 138:     Lcd_Write_String(data_ADC);
  2671  1FCC  30AB               	movlw	(low (_data_ADC| 0))& (0+255)
  2672  1FCD  00F5               	movwf	Lcd_Write_String@a
  2673  1FCE  3000               	movlw	0
  2674  1FCF  00F6               	movwf	Lcd_Write_String@a+1
  2675  1FD0  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  2676  1FD5                     l4234:
  2677                           
  2678                           ;main_maestro.c: 139:     Lcd_Set_Cursor(2,16);
  2679  1FD5  3010               	movlw	16
  2680  1FD6  1283               	bcf	3,5	;RP0=0, select bank0
  2681  1FD7  1303               	bcf	3,6	;RP1=0, select bank0
  2682  1FD8  00A2               	movwf	??_Show_val_LCD
  2683  1FD9  0822               	movf	??_Show_val_LCD,w
  2684  1FDA  00F6               	movwf	Lcd_Set_Cursor@b
  2685  1FDB  3002               	movlw	2
  2686  1FDC  160A  158A  249C  160A  158A  	fcall	_Lcd_Set_Cursor
  2687  1FE1                     l4236:
  2688                           
  2689                           ;main_maestro.c: 140:     Lcd_Write_String("C");
  2690  1FE1  30B9               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2691  1FE2  00F5               	movwf	Lcd_Write_String@a
  2692  1FE3  3080               	movlw	128
  2693  1FE4  00F6               	movwf	Lcd_Write_String@a+1
  2694  1FE5  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  2695                           
  2696                           ;main_maestro.c: 141:     Lcd_Set_Cursor(2,14);
  2697  1FEA  300E               	movlw	14
  2698  1FEB  1283               	bcf	3,5	;RP0=0, select bank0
  2699  1FEC  1303               	bcf	3,6	;RP1=0, select bank0
  2700  1FED  00A2               	movwf	??_Show_val_LCD
  2701  1FEE  0822               	movf	??_Show_val_LCD,w
  2702  1FEF  00F6               	movwf	Lcd_Set_Cursor@b
  2703  1FF0  3002               	movlw	2
  2704  1FF1  160A  158A  249C  160A  158A  	fcall	_Lcd_Set_Cursor
  2705  1FF6                     l4238:
  2706                           
  2707                           ;main_maestro.c: 142:     Lcd_Write_String(data_TEMP);
  2708  1FF6  30A3               	movlw	(low (_data_TEMP| 0))& (0+255)
  2709  1FF7  00F5               	movwf	Lcd_Write_String@a
  2710  1FF8  3000               	movlw	0
  2711  1FF9  00F6               	movwf	Lcd_Write_String@a+1
  2712  1FFA  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  2713  1FFF                     l120:
  2714  1FFF  0008               	return
  2715  2000                     __end_of_Show_val_LCD:
  2716                           
  2717                           	psect	text10
  2718  1ED4                     __ptext10:	
  2719 ;; *************** function _Lcd_Write_String *****************
  2720 ;; Defined at:
  2721 ;;		line 70 in file "LCD.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;  a               2    5[COMMON] PTR unsigned char 
  2724 ;;		 -> STR_5(2), data_TEMP(8), data_ADC(8), data_cont(8), 
  2725 ;;		 -> STR_1(17), 
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;  i               2    0[BANK0 ] int 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2737 ;;      Params:         2       0       0       0       0
  2738 ;;      Locals:         0       2       0       0       0
  2739 ;;      Temps:          3       0       0       0       0
  2740 ;;      Totals:         5       2       0       0       0
  2741 ;;Total ram usage:        7 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    3
  2744 ;; This function calls:
  2745 ;;		_Lcd_Write_Char
  2746 ;; This function is called by:
  2747 ;;		_main
  2748 ;;		_Show_val_LCD
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           
  2753                           ;psect for function _Lcd_Write_String
  2754  1ED4                     _Lcd_Write_String:
  2755  1ED4                     l3858:	
  2756                           ;incstack = 0
  2757                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2758                           
  2759                           
  2760                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2761  1ED4  1283               	bcf	3,5	;RP0=0, select bank0
  2762  1ED5  1303               	bcf	3,6	;RP1=0, select bank0
  2763  1ED6  01A0               	clrf	Lcd_Write_String@i
  2764  1ED7  01A1               	clrf	Lcd_Write_String@i+1
  2765  1ED8  2EFD               	goto	l3864
  2766  1ED9                     l3860:
  2767                           
  2768                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2769  1ED9  0820               	movf	Lcd_Write_String@i,w
  2770  1EDA  0775               	addwf	Lcd_Write_String@a,w
  2771  1EDB  00F8               	movwf	??_Lcd_Write_String+1
  2772  1EDC  0876               	movf	Lcd_Write_String@a+1,w
  2773  1EDD  00F7               	movwf	??_Lcd_Write_String
  2774  1EDE  1803               	skipnc
  2775  1EDF  0AF7               	incf	??_Lcd_Write_String,f
  2776  1EE0  1FA0               	btfss	Lcd_Write_String@i,7
  2777  1EE1  2EE3               	goto	u5450
  2778  1EE2  03F7               	decf	??_Lcd_Write_String,f
  2779  1EE3                     u5450:
  2780  1EE3  0877               	movf	??_Lcd_Write_String,w
  2781  1EE4  00F9               	movwf	??_Lcd_Write_String+2
  2782  1EE5  0879               	movf	??_Lcd_Write_String+2,w
  2783  1EE6  1283               	bcf	3,5	;RP0=0, select bank0
  2784  1EE7  1303               	bcf	3,6	;RP1=0, select bank0
  2785  1EE8  00FF               	movwf	btemp+1
  2786  1EE9  0878               	movf	??_Lcd_Write_String+1,w
  2787  1EEA  0084               	movwf	4
  2788  1EEB  160A  118A  2000  160A  158A  	fcall	stringtab
  2789  1EF0  160A  158A  243F  160A  158A  	fcall	_Lcd_Write_Char
  2790  1EF5                     l3862:
  2791  1EF5  3001               	movlw	1
  2792  1EF6  1283               	bcf	3,5	;RP0=0, select bank0
  2793  1EF7  1303               	bcf	3,6	;RP1=0, select bank0
  2794  1EF8  07A0               	addwf	Lcd_Write_String@i,f
  2795  1EF9  1803               	skipnc
  2796  1EFA  0AA1               	incf	Lcd_Write_String@i+1,f
  2797  1EFB  3000               	movlw	0
  2798  1EFC  07A1               	addwf	Lcd_Write_String@i+1,f
  2799  1EFD                     l3864:
  2800  1EFD  0820               	movf	Lcd_Write_String@i,w
  2801  1EFE  0775               	addwf	Lcd_Write_String@a,w
  2802  1EFF  00F8               	movwf	??_Lcd_Write_String+1
  2803  1F00  0876               	movf	Lcd_Write_String@a+1,w
  2804  1F01  00F7               	movwf	??_Lcd_Write_String
  2805  1F02  1803               	skipnc
  2806  1F03  0AF7               	incf	??_Lcd_Write_String,f
  2807  1F04  1FA0               	btfss	Lcd_Write_String@i,7
  2808  1F05  2F07               	goto	u5460
  2809  1F06  03F7               	decf	??_Lcd_Write_String,f
  2810  1F07                     u5460:
  2811  1F07  0877               	movf	??_Lcd_Write_String,w
  2812  1F08  00F9               	movwf	??_Lcd_Write_String+2
  2813  1F09  0879               	movf	??_Lcd_Write_String+2,w
  2814  1F0A  1283               	bcf	3,5	;RP0=0, select bank0
  2815  1F0B  1303               	bcf	3,6	;RP1=0, select bank0
  2816  1F0C  00FF               	movwf	btemp+1
  2817  1F0D  0878               	movf	??_Lcd_Write_String+1,w
  2818  1F0E  0084               	movwf	4
  2819  1F0F  160A  118A  2000  160A  158A  	fcall	stringtab
  2820  1F14  3A00               	xorlw	0
  2821  1F15  1D03               	skipz
  2822  1F16  2F18               	goto	u5471
  2823  1F17  2F19               	goto	u5470
  2824  1F18                     u5471:
  2825  1F18  2ED9               	goto	l3860
  2826  1F19                     u5470:
  2827  1F19                     l188:
  2828  1F19  0008               	return
  2829  1F1A                     __end_of_Lcd_Write_String:
  2830                           
  2831                           	psect	text11
  2832  1C3F                     __ptext11:	
  2833 ;; *************** function _Lcd_Write_Char *****************
  2834 ;; Defined at:
  2835 ;;		line 61 in file "LCD.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;  a               1    wreg     unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  a               1    4[COMMON] unsigned char 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2, status,0, pclath, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2849 ;;      Params:         0       0       0       0       0
  2850 ;;      Locals:         1       0       0       0       0
  2851 ;;      Temps:          1       0       0       0       0
  2852 ;;      Totals:         2       0       0       0       0
  2853 ;;Total ram usage:        2 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    2
  2856 ;; This function calls:
  2857 ;;		_Lcd_Port
  2858 ;; This function is called by:
  2859 ;;		_Lcd_Write_String
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _Lcd_Write_Char
  2865  1C3F                     _Lcd_Write_Char:
  2866                           
  2867                           ;incstack = 0
  2868                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2869                           ;Lcd_Write_Char@a stored from wreg
  2870  1C3F  00F4               	movwf	Lcd_Write_Char@a
  2871  1C40                     l3660:
  2872                           
  2873                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2874  1C40  1283               	bcf	3,5	;RP0=0, select bank0
  2875  1C41  1303               	bcf	3,6	;RP1=0, select bank0
  2876  1C42  1409               	bsf	9,0	;volatile
  2877  1C43                     l3662:
  2878                           
  2879                           ;LCD.c: 63:    Lcd_Port(a);
  2880  1C43  0874               	movf	Lcd_Write_Char@a,w
  2881  1C44  160A  158A  23D7  160A  158A  	fcall	_Lcd_Port
  2882  1C49                     l3664:
  2883                           
  2884                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2885  1C49  1283               	bcf	3,5	;RP0=0, select bank0
  2886  1C4A  1303               	bcf	3,6	;RP1=0, select bank0
  2887  1C4B  1509               	bsf	9,2	;volatile
  2888  1C4C                     l3666:
  2889                           
  2890                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2891  1C4C  301A               	movlw	26
  2892  1C4D  00F3               	movwf	??_Lcd_Write_Char
  2893  1C4E                     u6117:
  2894  1C4E  0BF3               	decfsz	??_Lcd_Write_Char,f
  2895  1C4F  2C4E               	goto	u6117
  2896  1C50  0000               	nop
  2897  1C51                     l3668:
  2898                           
  2899                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2900  1C51  1283               	bcf	3,5	;RP0=0, select bank0
  2901  1C52  1303               	bcf	3,6	;RP1=0, select bank0
  2902  1C53  1109               	bcf	9,2	;volatile
  2903  1C54                     l182:
  2904  1C54  0008               	return
  2905  1C55                     __end_of_Lcd_Write_Char:
  2906                           
  2907                           	psect	text12
  2908  1C9C                     __ptext12:	
  2909 ;; *************** function _Lcd_Set_Cursor *****************
  2910 ;; Defined at:
  2911 ;;		line 48 in file "LCD.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  a               1    wreg     unsigned char 
  2914 ;;  b               1    6[COMMON] unsigned char 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  a               1    8[COMMON] unsigned char 
  2917 ;;  temp            1    9[COMMON] unsigned char 
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, status,2, status,0, pclath, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2927 ;;      Params:         1       0       0       0       0
  2928 ;;      Locals:         2       0       0       0       0
  2929 ;;      Temps:          1       0       0       0       0
  2930 ;;      Totals:         4       0       0       0       0
  2931 ;;Total ram usage:        4 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    3
  2934 ;; This function calls:
  2935 ;;		_Lcd_Cmd
  2936 ;; This function is called by:
  2937 ;;		_main
  2938 ;;		_Show_val_LCD
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           
  2943                           ;psect for function _Lcd_Set_Cursor
  2944  1C9C                     _Lcd_Set_Cursor:
  2945                           
  2946                           ;incstack = 0
  2947                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2948                           ;Lcd_Set_Cursor@a stored from wreg
  2949  1C9C  00F8               	movwf	Lcd_Set_Cursor@a
  2950  1C9D                     l3846:
  2951                           
  2952                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2953  1C9D  0378               	decf	Lcd_Set_Cursor@a,w
  2954  1C9E  1D03               	btfss	3,2
  2955  1C9F  2CA1               	goto	u5431
  2956  1CA0  2CA2               	goto	u5430
  2957  1CA1                     u5431:
  2958  1CA1  2CAE               	goto	l3852
  2959  1CA2                     u5430:
  2960  1CA2                     l3848:
  2961                           
  2962                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2963  1CA2  0876               	movf	Lcd_Set_Cursor@b,w
  2964  1CA3  3E7F               	addlw	127
  2965  1CA4  00F7               	movwf	??_Lcd_Set_Cursor
  2966  1CA5  0877               	movf	??_Lcd_Set_Cursor,w
  2967  1CA6  00F9               	movwf	Lcd_Set_Cursor@temp
  2968  1CA7                     l3850:
  2969                           
  2970                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2971  1CA7  0879               	movf	Lcd_Set_Cursor@temp,w
  2972  1CA8  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  2973                           
  2974                           ;LCD.c: 53:  }
  2975  1CAD  2CBF               	goto	l179
  2976  1CAE                     l3852:
  2977  1CAE  3002               	movlw	2
  2978  1CAF  0678               	xorwf	Lcd_Set_Cursor@a,w
  2979  1CB0  1D03               	btfss	3,2
  2980  1CB1  2CB3               	goto	u5441
  2981  1CB2  2CB4               	goto	u5440
  2982  1CB3                     u5441:
  2983  1CB3  2CBF               	goto	l179
  2984  1CB4                     u5440:
  2985  1CB4                     l3854:
  2986                           
  2987                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2988  1CB4  0876               	movf	Lcd_Set_Cursor@b,w
  2989  1CB5  3EBF               	addlw	191
  2990  1CB6  00F7               	movwf	??_Lcd_Set_Cursor
  2991  1CB7  0877               	movf	??_Lcd_Set_Cursor,w
  2992  1CB8  00F9               	movwf	Lcd_Set_Cursor@temp
  2993  1CB9                     l3856:
  2994                           
  2995                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2996  1CB9  0879               	movf	Lcd_Set_Cursor@temp,w
  2997  1CBA  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  2998  1CBF                     l179:
  2999  1CBF  0008               	return
  3000  1CC0                     __end_of_Lcd_Set_Cursor:
  3001                           
  3002                           	psect	text13
  3003  1D75                     __ptext13:	
  3004 ;; *************** function _SPI_TEMP *****************
  3005 ;; Defined at:
  3006 ;;		line 186 in file "main_maestro.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2, status,0, pclath, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3020 ;;      Params:         0       0       0       0       0
  3021 ;;      Locals:         0       0       0       0       0
  3022 ;;      Temps:          3       0       0       0       0
  3023 ;;      Totals:         3       0       0       0       0
  3024 ;;Total ram usage:        3 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    3
  3027 ;; This function calls:
  3028 ;;		_spiRead
  3029 ;;		_spiWrite
  3030 ;; This function is called by:
  3031 ;;		_main
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           
  3036                           ;psect for function _SPI_TEMP
  3037  1D75                     _SPI_TEMP:
  3038  1D75                     l3358:	
  3039                           ;incstack = 0
  3040                           ; Regs used in _SPI_TEMP: [wreg+status,2+status,0+pclath+cstack]
  3041                           
  3042                           
  3043                           ;main_maestro.c: 187:     RC1 = 0;
  3044  1D75  1283               	bcf	3,5	;RP0=0, select bank0
  3045  1D76  1303               	bcf	3,6	;RP1=0, select bank0
  3046  1D77  1087               	bcf	7,1	;volatile
  3047  1D78                     l3360:
  3048                           
  3049                           ;main_maestro.c: 188:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3050  1D78  3003               	movlw	3
  3051  1D79  00F4               	movwf	??_SPI_TEMP+1
  3052  1D7A  3097               	movlw	151
  3053  1D7B  00F3               	movwf	??_SPI_TEMP
  3054  1D7C                     u6127:
  3055  1D7C  0BF3               	decfsz	??_SPI_TEMP,f
  3056  1D7D  2D7C               	goto	u6127
  3057  1D7E  0BF4               	decfsz	??_SPI_TEMP+1,f
  3058  1D7F  2D7C               	goto	u6127
  3059  1D80  2D81               	nop2
  3060  1D81                     l3362:
  3061                           
  3062                           ;main_maestro.c: 190:    spiWrite(hola_esclavo);
  3063  1D81  3000               	movlw	0
  3064  1D82  160A  158A  23DD  160A  158A  	fcall	_spiWrite
  3065  1D87                     l3364:
  3066                           
  3067                           ;main_maestro.c: 191:    val_TEMP = spiRead();
  3068  1D87  160A  158A  2401  160A  158A  	fcall	_spiRead
  3069  1D8C  00F3               	movwf	??_SPI_TEMP
  3070  1D8D  0873               	movf	??_SPI_TEMP,w
  3071  1D8E  00FA               	movwf	_val_TEMP
  3072                           
  3073                           ;main_maestro.c: 193:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3074  1D8F  3003               	movlw	3
  3075  1D90  00F4               	movwf	??_SPI_TEMP+1
  3076  1D91  3097               	movlw	151
  3077  1D92  00F3               	movwf	??_SPI_TEMP
  3078  1D93                     u6137:
  3079  1D93  0BF3               	decfsz	??_SPI_TEMP,f
  3080  1D94  2D93               	goto	u6137
  3081  1D95  0BF4               	decfsz	??_SPI_TEMP+1,f
  3082  1D96  2D93               	goto	u6137
  3083  1D97  2D98               	nop2
  3084  1D98                     l3366:
  3085                           
  3086                           ;main_maestro.c: 194:    RC1 = 1;
  3087  1D98  1283               	bcf	3,5	;RP0=0, select bank0
  3088  1D99  1303               	bcf	3,6	;RP1=0, select bank0
  3089  1D9A  1487               	bsf	7,1	;volatile
  3090                           
  3091                           ;main_maestro.c: 196:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3092  1D9B  3002               	movlw	2
  3093  1D9C  00F5               	movwf	??_SPI_TEMP+2
  3094  1D9D  3004               	movlw	4
  3095  1D9E  00F4               	movwf	??_SPI_TEMP+1
  3096  1D9F  30BA               	movlw	186
  3097  1DA0  00F3               	movwf	??_SPI_TEMP
  3098  1DA1                     u6147:
  3099  1DA1  0BF3               	decfsz	??_SPI_TEMP,f
  3100  1DA2  2DA1               	goto	u6147
  3101  1DA3  0BF4               	decfsz	??_SPI_TEMP+1,f
  3102  1DA4  2DA1               	goto	u6147
  3103  1DA5  0BF5               	decfsz	??_SPI_TEMP+2,f
  3104  1DA6  2DA1               	goto	u6147
  3105  1DA7  0000               	nop
  3106  1DA8                     l132:
  3107  1DA8  0008               	return
  3108  1DA9                     __end_of_SPI_TEMP:
  3109                           
  3110                           	psect	text14
  3111  1DA9                     __ptext14:	
  3112 ;; *************** function _SPI_CONT *****************
  3113 ;; Defined at:
  3114 ;;		line 161 in file "main_maestro.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;		None
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, status,2, status,0, pclath, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3128 ;;      Params:         0       0       0       0       0
  3129 ;;      Locals:         0       0       0       0       0
  3130 ;;      Temps:          3       0       0       0       0
  3131 ;;      Totals:         3       0       0       0       0
  3132 ;;Total ram usage:        3 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    3
  3135 ;; This function calls:
  3136 ;;		_spiRead
  3137 ;;		_spiWrite
  3138 ;; This function is called by:
  3139 ;;		_main
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           
  3144                           ;psect for function _SPI_CONT
  3145  1DA9                     _SPI_CONT:
  3146  1DA9                     l3338:	
  3147                           ;incstack = 0
  3148                           ; Regs used in _SPI_CONT: [wreg+status,2+status,0+pclath+cstack]
  3149                           
  3150                           
  3151                           ;main_maestro.c: 162:     RC2 = 0;
  3152  1DA9  1283               	bcf	3,5	;RP0=0, select bank0
  3153  1DAA  1303               	bcf	3,6	;RP1=0, select bank0
  3154  1DAB  1107               	bcf	7,2	;volatile
  3155  1DAC                     l3340:
  3156                           
  3157                           ;main_maestro.c: 163:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3158  1DAC  3003               	movlw	3
  3159  1DAD  00F4               	movwf	??_SPI_CONT+1
  3160  1DAE  3097               	movlw	151
  3161  1DAF  00F3               	movwf	??_SPI_CONT
  3162  1DB0                     u6157:
  3163  1DB0  0BF3               	decfsz	??_SPI_CONT,f
  3164  1DB1  2DB0               	goto	u6157
  3165  1DB2  0BF4               	decfsz	??_SPI_CONT+1,f
  3166  1DB3  2DB0               	goto	u6157
  3167  1DB4  2DB5               	nop2
  3168  1DB5                     l3342:
  3169                           
  3170                           ;main_maestro.c: 165:    spiWrite(hola_esclavo);
  3171  1DB5  3000               	movlw	0
  3172  1DB6  160A  158A  23DD  160A  158A  	fcall	_spiWrite
  3173  1DBB                     l3344:
  3174                           
  3175                           ;main_maestro.c: 166:    cont = spiRead();
  3176  1DBB  160A  158A  2401  160A  158A  	fcall	_spiRead
  3177  1DC0  00F3               	movwf	??_SPI_CONT
  3178  1DC1  0873               	movf	??_SPI_CONT,w
  3179  1DC2  1283               	bcf	3,5	;RP0=0, select bank0
  3180  1DC3  1303               	bcf	3,6	;RP1=0, select bank0
  3181  1DC4  00EE               	movwf	_cont
  3182                           
  3183                           ;main_maestro.c: 168:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3184  1DC5  3003               	movlw	3
  3185  1DC6  00F4               	movwf	??_SPI_CONT+1
  3186  1DC7  3097               	movlw	151
  3187  1DC8  00F3               	movwf	??_SPI_CONT
  3188  1DC9                     u6167:
  3189  1DC9  0BF3               	decfsz	??_SPI_CONT,f
  3190  1DCA  2DC9               	goto	u6167
  3191  1DCB  0BF4               	decfsz	??_SPI_CONT+1,f
  3192  1DCC  2DC9               	goto	u6167
  3193  1DCD  2DCE               	nop2
  3194  1DCE                     l3346:
  3195                           
  3196                           ;main_maestro.c: 169:    RC2 = 1;
  3197  1DCE  1283               	bcf	3,5	;RP0=0, select bank0
  3198  1DCF  1303               	bcf	3,6	;RP1=0, select bank0
  3199  1DD0  1507               	bsf	7,2	;volatile
  3200                           
  3201                           ;main_maestro.c: 171:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3202  1DD1  3002               	movlw	2
  3203  1DD2  00F5               	movwf	??_SPI_CONT+2
  3204  1DD3  3004               	movlw	4
  3205  1DD4  00F4               	movwf	??_SPI_CONT+1
  3206  1DD5  30BA               	movlw	186
  3207  1DD6  00F3               	movwf	??_SPI_CONT
  3208  1DD7                     u6177:
  3209  1DD7  0BF3               	decfsz	??_SPI_CONT,f
  3210  1DD8  2DD7               	goto	u6177
  3211  1DD9  0BF4               	decfsz	??_SPI_CONT+1,f
  3212  1DDA  2DD7               	goto	u6177
  3213  1DDB  0BF5               	decfsz	??_SPI_CONT+2,f
  3214  1DDC  2DD7               	goto	u6177
  3215  1DDD  0000               	nop
  3216  1DDE                     l126:
  3217  1DDE  0008               	return
  3218  1DDF                     __end_of_SPI_CONT:
  3219                           
  3220                           	psect	text15
  3221  1D41                     __ptext15:	
  3222 ;; *************** function _SPI_ADC *****************
  3223 ;; Defined at:
  3224 ;;		line 174 in file "main_maestro.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;		None
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  1    wreg      void 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, pclath, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3238 ;;      Params:         0       0       0       0       0
  3239 ;;      Locals:         0       0       0       0       0
  3240 ;;      Temps:          3       0       0       0       0
  3241 ;;      Totals:         3       0       0       0       0
  3242 ;;Total ram usage:        3 bytes
  3243 ;; Hardware stack levels used:    1
  3244 ;; Hardware stack levels required when called:    3
  3245 ;; This function calls:
  3246 ;;		_spiRead
  3247 ;;		_spiWrite
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           
  3254                           ;psect for function _SPI_ADC
  3255  1D41                     _SPI_ADC:
  3256  1D41                     l3348:	
  3257                           ;incstack = 0
  3258                           ; Regs used in _SPI_ADC: [wreg+status,2+status,0+pclath+cstack]
  3259                           
  3260                           
  3261                           ;main_maestro.c: 175:     RC0 = 0;
  3262  1D41  1283               	bcf	3,5	;RP0=0, select bank0
  3263  1D42  1303               	bcf	3,6	;RP1=0, select bank0
  3264  1D43  1007               	bcf	7,0	;volatile
  3265  1D44                     l3350:
  3266                           
  3267                           ;main_maestro.c: 176:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3268  1D44  3003               	movlw	3
  3269  1D45  00F4               	movwf	??_SPI_ADC+1
  3270  1D46  3097               	movlw	151
  3271  1D47  00F3               	movwf	??_SPI_ADC
  3272  1D48                     u6187:
  3273  1D48  0BF3               	decfsz	??_SPI_ADC,f
  3274  1D49  2D48               	goto	u6187
  3275  1D4A  0BF4               	decfsz	??_SPI_ADC+1,f
  3276  1D4B  2D48               	goto	u6187
  3277  1D4C  2D4D               	nop2
  3278  1D4D                     l3352:
  3279                           
  3280                           ;main_maestro.c: 178:    spiWrite(hola_esclavo);
  3281  1D4D  3000               	movlw	0
  3282  1D4E  160A  158A  23DD  160A  158A  	fcall	_spiWrite
  3283  1D53                     l3354:
  3284                           
  3285                           ;main_maestro.c: 179:    val_ADC = spiRead();
  3286  1D53  160A  158A  2401  160A  158A  	fcall	_spiRead
  3287  1D58  00F3               	movwf	??_SPI_ADC
  3288  1D59  0873               	movf	??_SPI_ADC,w
  3289  1D5A  00FB               	movwf	_val_ADC
  3290                           
  3291                           ;main_maestro.c: 181:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3292  1D5B  3003               	movlw	3
  3293  1D5C  00F4               	movwf	??_SPI_ADC+1
  3294  1D5D  3097               	movlw	151
  3295  1D5E  00F3               	movwf	??_SPI_ADC
  3296  1D5F                     u6197:
  3297  1D5F  0BF3               	decfsz	??_SPI_ADC,f
  3298  1D60  2D5F               	goto	u6197
  3299  1D61  0BF4               	decfsz	??_SPI_ADC+1,f
  3300  1D62  2D5F               	goto	u6197
  3301  1D63  2D64               	nop2
  3302  1D64                     l3356:
  3303                           
  3304                           ;main_maestro.c: 182:    RC0 = 1;
  3305  1D64  1283               	bcf	3,5	;RP0=0, select bank0
  3306  1D65  1303               	bcf	3,6	;RP1=0, select bank0
  3307  1D66  1407               	bsf	7,0	;volatile
  3308                           
  3309                           ;main_maestro.c: 184:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3310  1D67  3002               	movlw	2
  3311  1D68  00F5               	movwf	??_SPI_ADC+2
  3312  1D69  3004               	movlw	4
  3313  1D6A  00F4               	movwf	??_SPI_ADC+1
  3314  1D6B  30BA               	movlw	186
  3315  1D6C  00F3               	movwf	??_SPI_ADC
  3316  1D6D                     u6207:
  3317  1D6D  0BF3               	decfsz	??_SPI_ADC,f
  3318  1D6E  2D6D               	goto	u6207
  3319  1D6F  0BF4               	decfsz	??_SPI_ADC+1,f
  3320  1D70  2D6D               	goto	u6207
  3321  1D71  0BF5               	decfsz	??_SPI_ADC+2,f
  3322  1D72  2D6D               	goto	u6207
  3323  1D73  0000               	nop
  3324  1D74                     l129:
  3325  1D74  0008               	return
  3326  1D75                     __end_of_SPI_ADC:
  3327                           
  3328                           	psect	text16
  3329  1BDD                     __ptext16:	
  3330 ;; *************** function _spiWrite *****************
  3331 ;; Defined at:
  3332 ;;		line 36 in file "SPI.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;  dat             1    wreg     unsigned char 
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  dat             1    2[COMMON] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3346 ;;      Params:         0       0       0       0       0
  3347 ;;      Locals:         1       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0
  3349 ;;      Totals:         1       0       0       0       0
  3350 ;;Total ram usage:        1 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    1
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_SPI_CONT
  3357 ;;		_SPI_ADC
  3358 ;;		_SPI_TEMP
  3359 ;; This function uses a non-reentrant model
  3360 ;;
  3361                           
  3362                           
  3363                           ;psect for function _spiWrite
  3364  1BDD                     _spiWrite:
  3365                           
  3366                           ;incstack = 0
  3367                           ; Regs used in _spiWrite: [wreg]
  3368                           ;spiWrite@dat stored from wreg
  3369  1BDD  00F2               	movwf	spiWrite@dat
  3370  1BDE                     l3196:
  3371                           
  3372                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  3373  1BDE  0872               	movf	spiWrite@dat,w
  3374  1BDF  1283               	bcf	3,5	;RP0=0, select bank0
  3375  1BE0  1303               	bcf	3,6	;RP1=0, select bank0
  3376  1BE1  0093               	movwf	19	;volatile
  3377  1BE2                     l267:
  3378  1BE2  0008               	return
  3379  1BE3                     __end_of_spiWrite:
  3380                           
  3381                           	psect	text17
  3382  1C01                     __ptext17:	
  3383 ;; *************** function _spiRead *****************
  3384 ;; Defined at:
  3385 ;;		line 49 in file "SPI.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;		None
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      unsigned char 
  3392 ;; Registers used:
  3393 ;;		wreg, status,2, status,0, pclath, cstack
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3399 ;;      Params:         0       0       0       0       0
  3400 ;;      Locals:         0       0       0       0       0
  3401 ;;      Temps:          0       0       0       0       0
  3402 ;;      Totals:         0       0       0       0       0
  3403 ;;Total ram usage:        0 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    2
  3406 ;; This function calls:
  3407 ;;		_spiReceiveWait
  3408 ;; This function is called by:
  3409 ;;		_SPI_CONT
  3410 ;;		_SPI_ADC
  3411 ;;		_SPI_TEMP
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           
  3416                           ;psect for function _spiRead
  3417  1C01                     _spiRead:
  3418  1C01                     l3198:	
  3419                           ;incstack = 0
  3420                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  3421                           
  3422                           
  3423                           ;SPI.c: 51:     spiReceiveWait();
  3424  1C01  160A  158A  23EA  160A  158A  	fcall	_spiReceiveWait
  3425  1C06                     l3200:
  3426                           
  3427                           ;SPI.c: 52:     return(SSPBUF);
  3428  1C06  1283               	bcf	3,5	;RP0=0, select bank0
  3429  1C07  1303               	bcf	3,6	;RP1=0, select bank0
  3430  1C08  0813               	movf	19,w	;volatile
  3431  1C09                     l275:
  3432  1C09  0008               	return
  3433  1C0A                     __end_of_spiRead:
  3434                           
  3435                           	psect	text18
  3436  1BEA                     __ptext18:	
  3437 ;; *************** function _spiReceiveWait *****************
  3438 ;; Defined at:
  3439 ;;		line 31 in file "SPI.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;		None
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;		None
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  1    wreg      void 
  3446 ;; Registers used:
  3447 ;;		None
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3453 ;;      Params:         0       0       0       0       0
  3454 ;;      Locals:         0       0       0       0       0
  3455 ;;      Temps:          0       0       0       0       0
  3456 ;;      Totals:         0       0       0       0       0
  3457 ;;Total ram usage:        0 bytes
  3458 ;; Hardware stack levels used:    1
  3459 ;; Hardware stack levels required when called:    1
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_spiRead
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           
  3468                           ;psect for function _spiReceiveWait
  3469  1BEA                     _spiReceiveWait:
  3470  1BEA                     l2550:	
  3471                           ;incstack = 0
  3472                           ; Regs used in _spiReceiveWait: []
  3473                           
  3474  1BEA                     l261:	
  3475                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  3476                           
  3477  1BEA  1683               	bsf	3,5	;RP0=1, select bank1
  3478  1BEB  1303               	bcf	3,6	;RP1=0, select bank1
  3479  1BEC  1C14               	btfss	20,0	;volatile
  3480  1BED  2BEF               	goto	u3111
  3481  1BEE  2BF0               	goto	u3110
  3482  1BEF                     u3111:
  3483  1BEF  2BEA               	goto	l261
  3484  1BF0                     u3110:
  3485  1BF0                     l264:
  3486  1BF0  0008               	return
  3487  1BF1                     __end_of_spiReceiveWait:
  3488                           
  3489                           	psect	text19
  3490  1335                     __ptext19:	
  3491 ;; *************** function _Mapeo_M *****************
  3492 ;; Defined at:
  3493 ;;		line 129 in file "main_maestro.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0, pclath, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3507 ;;      Params:         0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0
  3509 ;;      Temps:          0       2       0       0       0
  3510 ;;      Totals:         0       2       0       0       0
  3511 ;;Total ram usage:        2 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    3
  3514 ;; This function calls:
  3515 ;;		___awdiv
  3516 ;;		___awtoft
  3517 ;;		___ftdiv
  3518 ;;		___ftmul
  3519 ;;		___wmul
  3520 ;; This function is called by:
  3521 ;;		_main
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _Mapeo_M
  3527  1335                     _Mapeo_M:
  3528  1335                     l4224:	
  3529                           ;incstack = 0
  3530                           ; Regs used in _Mapeo_M: [wreg+status,2+status,0+pclath+cstack]
  3531                           
  3532                           
  3533                           ;main_maestro.c: 130:     ADC_val_M = ((val_ADC * 5.0) / 255);
  3534  1335  3000               	movlw	0
  3535  1336  1283               	bcf	3,5	;RP0=0, select bank0
  3536  1337  1303               	bcf	3,6	;RP1=0, select bank0
  3537  1338  00BC               	movwf	___ftdiv@f2
  3538  1339  307F               	movlw	127
  3539  133A  00BD               	movwf	___ftdiv@f2+1
  3540  133B  3043               	movlw	67
  3541  133C  00BE               	movwf	___ftdiv@f2+2
  3542  133D  3000               	movlw	0
  3543  133E  00AC               	movwf	___ftmul@f1
  3544  133F  30A0               	movlw	160
  3545  1340  00AD               	movwf	___ftmul@f1+1
  3546  1341  3040               	movlw	64
  3547  1342  00AE               	movwf	___ftmul@f1+2
  3548  1343  087B               	movf	_val_ADC,w
  3549  1344  00CC               	movwf	??_Mapeo_M
  3550  1345  01CD               	clrf	??_Mapeo_M+1
  3551  1346  084C               	movf	??_Mapeo_M,w
  3552  1347  00A0               	movwf	___awtoft@c
  3553  1348  084D               	movf	??_Mapeo_M+1,w
  3554  1349  00A1               	movwf	___awtoft@c+1
  3555  134A  160A  158A  24E5  160A  118A  	fcall	___awtoft
  3556  134F  1283               	bcf	3,5	;RP0=0, select bank0
  3557  1350  1303               	bcf	3,6	;RP1=0, select bank0
  3558  1351  0820               	movf	?___awtoft,w
  3559  1352  00AF               	movwf	___ftmul@f2
  3560  1353  0821               	movf	?___awtoft+1,w
  3561  1354  00B0               	movwf	___ftmul@f2+1
  3562  1355  0822               	movf	?___awtoft+2,w
  3563  1356  00B1               	movwf	___ftmul@f2+2
  3564  1357  120A  118A  26D8  160A  118A  	fcall	___ftmul
  3565  135C  1283               	bcf	3,5	;RP0=0, select bank0
  3566  135D  1303               	bcf	3,6	;RP1=0, select bank0
  3567  135E  082C               	movf	?___ftmul,w
  3568  135F  00BF               	movwf	___ftdiv@f1
  3569  1360  082D               	movf	?___ftmul+1,w
  3570  1361  00C0               	movwf	___ftdiv@f1+1
  3571  1362  082E               	movf	?___ftmul+2,w
  3572  1363  00C1               	movwf	___ftdiv@f1+2
  3573  1364  160A  118A  24DC  160A  118A  	fcall	___ftdiv
  3574  1369  1283               	bcf	3,5	;RP0=0, select bank0
  3575  136A  1303               	bcf	3,6	;RP1=0, select bank0
  3576  136B  083C               	movf	?___ftdiv,w
  3577  136C  1683               	bsf	3,5	;RP0=1, select bank1
  3578  136D  1303               	bcf	3,6	;RP1=0, select bank1
  3579  136E  00A0               	movwf	_ADC_val_M^(0+128)
  3580  136F  1283               	bcf	3,5	;RP0=0, select bank0
  3581  1370  1303               	bcf	3,6	;RP1=0, select bank0
  3582  1371  083D               	movf	?___ftdiv+1,w
  3583  1372  1683               	bsf	3,5	;RP0=1, select bank1
  3584  1373  1303               	bcf	3,6	;RP1=0, select bank1
  3585  1374  00A1               	movwf	(_ADC_val_M+1)^(0+128)
  3586  1375  1283               	bcf	3,5	;RP0=0, select bank0
  3587  1376  1303               	bcf	3,6	;RP1=0, select bank0
  3588  1377  083E               	movf	?___ftdiv+2,w
  3589  1378  1683               	bsf	3,5	;RP0=1, select bank1
  3590  1379  1303               	bcf	3,6	;RP1=0, select bank1
  3591  137A  00A2               	movwf	(_ADC_val_M+2)^(0+128)
  3592                           
  3593                           ;main_maestro.c: 131:     mv_temp_val_M = ((val_TEMP * 150) / 255);
  3594  137B  30FF               	movlw	255
  3595  137C  1283               	bcf	3,5	;RP0=0, select bank0
  3596  137D  1303               	bcf	3,6	;RP1=0, select bank0
  3597  137E  00A0               	movwf	___awdiv@divisor
  3598  137F  3000               	movlw	0
  3599  1380  00A1               	movwf	___awdiv@divisor+1
  3600  1381  087A               	movf	_val_TEMP,w
  3601  1382  00CC               	movwf	??_Mapeo_M
  3602  1383  01CD               	clrf	??_Mapeo_M+1
  3603  1384  084C               	movf	??_Mapeo_M,w
  3604  1385  00F2               	movwf	___wmul@multiplier
  3605  1386  084D               	movf	??_Mapeo_M+1,w
  3606  1387  00F3               	movwf	___wmul@multiplier+1
  3607  1388  3096               	movlw	150
  3608  1389  00F4               	movwf	___wmul@multiplicand
  3609  138A  3000               	movlw	0
  3610  138B  00F5               	movwf	___wmul@multiplicand+1
  3611  138C  120A  158A  2003  160A  118A  	fcall	___wmul
  3612  1391  0873               	movf	?___wmul+1,w
  3613  1392  1283               	bcf	3,5	;RP0=0, select bank0
  3614  1393  1303               	bcf	3,6	;RP1=0, select bank0
  3615  1394  00A3               	movwf	___awdiv@dividend+1
  3616  1395  0872               	movf	?___wmul,w
  3617  1396  00A2               	movwf	___awdiv@dividend
  3618  1397  160A  118A  22CC  160A  118A  	fcall	___awdiv
  3619  139C  1283               	bcf	3,5	;RP0=0, select bank0
  3620  139D  1303               	bcf	3,6	;RP1=0, select bank0
  3621  139E  0821               	movf	?___awdiv+1,w
  3622  139F  00ED               	movwf	_mv_temp_val_M+1
  3623  13A0  0820               	movf	?___awdiv,w
  3624  13A1  00EC               	movwf	_mv_temp_val_M
  3625  13A2                     l117:
  3626  13A2  0008               	return
  3627  13A3                     __end_of_Mapeo_M:
  3628                           
  3629                           	psect	text20
  3630  14DC                     __ptext20:	
  3631 ;; *************** function ___ftdiv *****************
  3632 ;; Defined at:
  3633 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftdiv.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  f2              3   28[BANK0 ] float 
  3636 ;;  f1              3   31[BANK0 ] float 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  f3              3   39[BANK0 ] float 
  3639 ;;  sign            1   43[BANK0 ] unsigned char 
  3640 ;;  exp             1   42[BANK0 ] unsigned char 
  3641 ;;  cntr            1   38[BANK0 ] unsigned char 
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  3   28[BANK0 ] float 
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0, pclath, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3651 ;;      Params:         0       6       0       0       0
  3652 ;;      Locals:         0       6       0       0       0
  3653 ;;      Temps:          0       4       0       0       0
  3654 ;;      Totals:         0      16       0       0       0
  3655 ;;Total ram usage:       16 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    2
  3658 ;; This function calls:
  3659 ;;		___ftpack
  3660 ;; This function is called by:
  3661 ;;		_Mapeo_M
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function ___ftdiv
  3667  14DC                     ___ftdiv:
  3668  14DC                     l4170:	
  3669                           ;incstack = 0
  3670                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3671                           
  3672  14DC  1283               	bcf	3,5	;RP0=0, select bank0
  3673  14DD  1303               	bcf	3,6	;RP1=0, select bank0
  3674  14DE  083F               	movf	___ftdiv@f1,w
  3675  14DF  00C2               	movwf	??___ftdiv
  3676  14E0  0840               	movf	___ftdiv@f1+1,w
  3677  14E1  00C3               	movwf	??___ftdiv+1
  3678  14E2  0841               	movf	___ftdiv@f1+2,w
  3679  14E3  00C4               	movwf	??___ftdiv+2
  3680  14E4  1003               	clrc
  3681  14E5  0D43               	rlf	??___ftdiv+1,w
  3682  14E6  0D44               	rlf	??___ftdiv+2,w
  3683  14E7  00C5               	movwf	??___ftdiv+3
  3684  14E8  0845               	movf	??___ftdiv+3,w
  3685  14E9  00CA               	movwf	___ftdiv@exp
  3686  14EA  084A               	movf	___ftdiv@exp,w
  3687  14EB  1D03               	btfss	3,2
  3688  14EC  2CEE               	goto	u6031
  3689  14ED  2CEF               	goto	u6030
  3690  14EE                     u6031:
  3691  14EE  2CF6               	goto	l4176
  3692  14EF                     u6030:
  3693  14EF                     l4172:
  3694  14EF  3000               	movlw	0
  3695  14F0  00BC               	movwf	?___ftdiv
  3696  14F1  3000               	movlw	0
  3697  14F2  00BD               	movwf	?___ftdiv+1
  3698  14F3  3000               	movlw	0
  3699  14F4  00BE               	movwf	?___ftdiv+2
  3700  14F5  2D9D               	goto	l757
  3701  14F6                     l4176:
  3702  14F6  083C               	movf	___ftdiv@f2,w
  3703  14F7  00C2               	movwf	??___ftdiv
  3704  14F8  083D               	movf	___ftdiv@f2+1,w
  3705  14F9  00C3               	movwf	??___ftdiv+1
  3706  14FA  083E               	movf	___ftdiv@f2+2,w
  3707  14FB  00C4               	movwf	??___ftdiv+2
  3708  14FC  1003               	clrc
  3709  14FD  0D43               	rlf	??___ftdiv+1,w
  3710  14FE  0D44               	rlf	??___ftdiv+2,w
  3711  14FF  00C5               	movwf	??___ftdiv+3
  3712  1500  0845               	movf	??___ftdiv+3,w
  3713  1501  00CB               	movwf	___ftdiv@sign
  3714  1502  084B               	movf	___ftdiv@sign,w
  3715  1503  1D03               	btfss	3,2
  3716  1504  2D06               	goto	u6041
  3717  1505  2D07               	goto	u6040
  3718  1506                     u6041:
  3719  1506  2D0E               	goto	l4182
  3720  1507                     u6040:
  3721  1507                     l4178:
  3722  1507  3000               	movlw	0
  3723  1508  00BC               	movwf	?___ftdiv
  3724  1509  3000               	movlw	0
  3725  150A  00BD               	movwf	?___ftdiv+1
  3726  150B  3000               	movlw	0
  3727  150C  00BE               	movwf	?___ftdiv+2
  3728  150D  2D9D               	goto	l757
  3729  150E                     l4182:
  3730  150E  3000               	movlw	0
  3731  150F  00C7               	movwf	___ftdiv@f3
  3732  1510  3000               	movlw	0
  3733  1511  00C8               	movwf	___ftdiv@f3+1
  3734  1512  3000               	movlw	0
  3735  1513  00C9               	movwf	___ftdiv@f3+2
  3736  1514                     l4184:
  3737  1514  3089               	movlw	137
  3738  1515  074B               	addwf	___ftdiv@sign,w
  3739  1516  00C2               	movwf	??___ftdiv
  3740  1517  0842               	movf	??___ftdiv,w
  3741  1518  02CA               	subwf	___ftdiv@exp,f
  3742  1519                     l4186:
  3743  1519  083F               	movf	___ftdiv@f1,w
  3744  151A  00C2               	movwf	??___ftdiv
  3745  151B  0840               	movf	___ftdiv@f1+1,w
  3746  151C  00C3               	movwf	??___ftdiv+1
  3747  151D  0841               	movf	___ftdiv@f1+2,w
  3748  151E  00C4               	movwf	??___ftdiv+2
  3749  151F  3010               	movlw	16
  3750  1520                     u6055:
  3751  1520  1003               	clrc
  3752  1521  0CC4               	rrf	??___ftdiv+2,f
  3753  1522  0CC3               	rrf	??___ftdiv+1,f
  3754  1523  0CC2               	rrf	??___ftdiv,f
  3755  1524                     u6050:
  3756  1524  3EFF               	addlw	-1
  3757  1525  1D03               	skipz
  3758  1526  2D20               	goto	u6055
  3759  1527  0842               	movf	??___ftdiv,w
  3760  1528  00C5               	movwf	??___ftdiv+3
  3761  1529  0845               	movf	??___ftdiv+3,w
  3762  152A  00CB               	movwf	___ftdiv@sign
  3763  152B                     l4188:
  3764  152B  083C               	movf	___ftdiv@f2,w
  3765  152C  00C2               	movwf	??___ftdiv
  3766  152D  083D               	movf	___ftdiv@f2+1,w
  3767  152E  00C3               	movwf	??___ftdiv+1
  3768  152F  083E               	movf	___ftdiv@f2+2,w
  3769  1530  00C4               	movwf	??___ftdiv+2
  3770  1531  3010               	movlw	16
  3771  1532                     u6065:
  3772  1532  1003               	clrc
  3773  1533  0CC4               	rrf	??___ftdiv+2,f
  3774  1534  0CC3               	rrf	??___ftdiv+1,f
  3775  1535  0CC2               	rrf	??___ftdiv,f
  3776  1536                     u6060:
  3777  1536  3EFF               	addlw	-1
  3778  1537  1D03               	skipz
  3779  1538  2D32               	goto	u6065
  3780  1539  0842               	movf	??___ftdiv,w
  3781  153A  00C5               	movwf	??___ftdiv+3
  3782  153B  0845               	movf	??___ftdiv+3,w
  3783  153C  06CB               	xorwf	___ftdiv@sign,f
  3784  153D                     l4190:
  3785  153D  3080               	movlw	128
  3786  153E  00C2               	movwf	??___ftdiv
  3787  153F  0842               	movf	??___ftdiv,w
  3788  1540  05CB               	andwf	___ftdiv@sign,f
  3789  1541                     l4192:
  3790  1541  17C0               	bsf	___ftdiv@f1+1,7
  3791  1542  30FF               	movlw	255
  3792  1543  05BF               	andwf	___ftdiv@f1,f
  3793  1544  30FF               	movlw	255
  3794  1545  05C0               	andwf	___ftdiv@f1+1,f
  3795  1546  3000               	movlw	0
  3796  1547  05C1               	andwf	___ftdiv@f1+2,f
  3797  1548                     l4194:
  3798  1548  17BD               	bsf	___ftdiv@f2+1,7
  3799  1549  30FF               	movlw	255
  3800  154A  05BC               	andwf	___ftdiv@f2,f
  3801  154B  30FF               	movlw	255
  3802  154C  05BD               	andwf	___ftdiv@f2+1,f
  3803  154D  3000               	movlw	0
  3804  154E  05BE               	andwf	___ftdiv@f2+2,f
  3805  154F  3018               	movlw	24
  3806  1550  00C2               	movwf	??___ftdiv
  3807  1551  0842               	movf	??___ftdiv,w
  3808  1552  00C6               	movwf	___ftdiv@cntr
  3809  1553                     l4196:
  3810  1553  3001               	movlw	1
  3811  1554                     u6075:
  3812  1554  1003               	clrc
  3813  1555  0DC7               	rlf	___ftdiv@f3,f
  3814  1556  0DC8               	rlf	___ftdiv@f3+1,f
  3815  1557  0DC9               	rlf	___ftdiv@f3+2,f
  3816  1558  3EFF               	addlw	-1
  3817  1559  1D03               	skipz
  3818  155A  2D54               	goto	u6075
  3819  155B                     l4198:
  3820  155B  083E               	movf	___ftdiv@f2+2,w
  3821  155C  0241               	subwf	___ftdiv@f1+2,w
  3822  155D  1D03               	skipz
  3823  155E  2D65               	goto	u6085
  3824  155F  083D               	movf	___ftdiv@f2+1,w
  3825  1560  0240               	subwf	___ftdiv@f1+1,w
  3826  1561  1D03               	skipz
  3827  1562  2D65               	goto	u6085
  3828  1563  083C               	movf	___ftdiv@f2,w
  3829  1564  023F               	subwf	___ftdiv@f1,w
  3830  1565                     u6085:
  3831  1565  1C03               	skipc
  3832  1566  2D68               	goto	u6081
  3833  1567  2D69               	goto	u6080
  3834  1568                     u6081:
  3835  1568  2D74               	goto	l4204
  3836  1569                     u6080:
  3837  1569                     l4200:
  3838  1569  083C               	movf	___ftdiv@f2,w
  3839  156A  02BF               	subwf	___ftdiv@f1,f
  3840  156B  083D               	movf	___ftdiv@f2+1,w
  3841  156C  1C03               	skipc
  3842  156D  0F3D               	incfsz	___ftdiv@f2+1,w
  3843  156E  02C0               	subwf	___ftdiv@f1+1,f
  3844  156F  083E               	movf	___ftdiv@f2+2,w
  3845  1570  1C03               	skipc
  3846  1571  0A3E               	incf	___ftdiv@f2+2,w
  3847  1572  02C1               	subwf	___ftdiv@f1+2,f
  3848  1573                     l4202:
  3849  1573  1447               	bsf	___ftdiv@f3,0
  3850  1574                     l4204:
  3851  1574  3001               	movlw	1
  3852  1575                     u6095:
  3853  1575  1003               	clrc
  3854  1576  0DBF               	rlf	___ftdiv@f1,f
  3855  1577  0DC0               	rlf	___ftdiv@f1+1,f
  3856  1578  0DC1               	rlf	___ftdiv@f1+2,f
  3857  1579  3EFF               	addlw	-1
  3858  157A  1D03               	skipz
  3859  157B  2D75               	goto	u6095
  3860  157C                     l4206:
  3861  157C  3001               	movlw	1
  3862  157D  02C6               	subwf	___ftdiv@cntr,f
  3863  157E  1D03               	btfss	3,2
  3864  157F  2D81               	goto	u6101
  3865  1580  2D82               	goto	u6100
  3866  1581                     u6101:
  3867  1581  2D53               	goto	l4196
  3868  1582                     u6100:
  3869  1582                     l4208:
  3870  1582  0847               	movf	___ftdiv@f3,w
  3871  1583  00F2               	movwf	___ftpack@arg
  3872  1584  0848               	movf	___ftdiv@f3+1,w
  3873  1585  00F3               	movwf	___ftpack@arg+1
  3874  1586  0849               	movf	___ftdiv@f3+2,w
  3875  1587  00F4               	movwf	___ftpack@arg+2
  3876  1588  084A               	movf	___ftdiv@exp,w
  3877  1589  00C2               	movwf	??___ftdiv
  3878  158A  0842               	movf	??___ftdiv,w
  3879  158B  00F5               	movwf	___ftpack@exp
  3880  158C  084B               	movf	___ftdiv@sign,w
  3881  158D  00C3               	movwf	??___ftdiv+1
  3882  158E  0843               	movf	??___ftdiv+1,w
  3883  158F  00F6               	movwf	___ftpack@sign
  3884  1590  160A  118A  23A3  160A  118A  	fcall	___ftpack
  3885  1595  0872               	movf	?___ftpack,w
  3886  1596  1283               	bcf	3,5	;RP0=0, select bank0
  3887  1597  1303               	bcf	3,6	;RP1=0, select bank0
  3888  1598  00BC               	movwf	?___ftdiv
  3889  1599  0873               	movf	?___ftpack+1,w
  3890  159A  00BD               	movwf	?___ftdiv+1
  3891  159B  0874               	movf	?___ftpack+2,w
  3892  159C  00BE               	movwf	?___ftdiv+2
  3893  159D                     l757:
  3894  159D  0008               	return
  3895  159E                     __end_of___ftdiv:
  3896                           
  3897                           	psect	text21
  3898  1CE5                     __ptext21:	
  3899 ;; *************** function ___awtoft *****************
  3900 ;; Defined at:
  3901 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awtoft.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  c               2    0[BANK0 ] int 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  sign            1    5[BANK0 ] unsigned char 
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  3    0[BANK0 ] float 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3915 ;;      Params:         0       3       0       0       0
  3916 ;;      Locals:         0       1       0       0       0
  3917 ;;      Temps:          0       2       0       0       0
  3918 ;;      Totals:         0       6       0       0       0
  3919 ;;Total ram usage:        6 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    2
  3922 ;; This function calls:
  3923 ;;		___ftpack
  3924 ;; This function is called by:
  3925 ;;		_Mapeo_M
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           
  3930                           ;psect for function ___awtoft
  3931  1CE5                     ___awtoft:
  3932  1CE5                     l4158:	
  3933                           ;incstack = 0
  3934                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3935                           
  3936  1CE5  1283               	bcf	3,5	;RP0=0, select bank0
  3937  1CE6  1303               	bcf	3,6	;RP1=0, select bank0
  3938  1CE7  01A5               	clrf	___awtoft@sign
  3939  1CE8                     l4160:
  3940  1CE8  1FA1               	btfss	___awtoft@c+1,7
  3941  1CE9  2CEB               	goto	u6021
  3942  1CEA  2CEC               	goto	u6020
  3943  1CEB                     u6021:
  3944  1CEB  2CF3               	goto	l4166
  3945  1CEC                     u6020:
  3946  1CEC                     l4162:
  3947  1CEC  09A0               	comf	___awtoft@c,f
  3948  1CED  09A1               	comf	___awtoft@c+1,f
  3949  1CEE  0AA0               	incf	___awtoft@c,f
  3950  1CEF  1903               	skipnz
  3951  1CF0  0AA1               	incf	___awtoft@c+1,f
  3952  1CF1                     l4164:
  3953  1CF1  01A5               	clrf	___awtoft@sign
  3954  1CF2  0AA5               	incf	___awtoft@sign,f
  3955  1CF3                     l4166:
  3956  1CF3  0820               	movf	___awtoft@c,w
  3957  1CF4  00F2               	movwf	___ftpack@arg
  3958  1CF5  0821               	movf	___awtoft@c+1,w
  3959  1CF6  00F3               	movwf	___ftpack@arg+1
  3960  1CF7  01F4               	clrf	___ftpack@arg+2
  3961  1CF8  308E               	movlw	142
  3962  1CF9  00A3               	movwf	??___awtoft
  3963  1CFA  0823               	movf	??___awtoft,w
  3964  1CFB  00F5               	movwf	___ftpack@exp
  3965  1CFC  0825               	movf	___awtoft@sign,w
  3966  1CFD  00A4               	movwf	??___awtoft+1
  3967  1CFE  0824               	movf	??___awtoft+1,w
  3968  1CFF  00F6               	movwf	___ftpack@sign
  3969  1D00  160A  118A  23A3  160A  158A  	fcall	___ftpack
  3970  1D05  0872               	movf	?___ftpack,w
  3971  1D06  1283               	bcf	3,5	;RP0=0, select bank0
  3972  1D07  1303               	bcf	3,6	;RP1=0, select bank0
  3973  1D08  00A0               	movwf	?___awtoft
  3974  1D09  0873               	movf	?___ftpack+1,w
  3975  1D0A  00A1               	movwf	?___awtoft+1
  3976  1D0B  0874               	movf	?___ftpack+2,w
  3977  1D0C  00A2               	movwf	?___awtoft+2
  3978  1D0D                     l682:
  3979  1D0D  0008               	return
  3980  1D0E                     __end_of___awtoft:
  3981                           
  3982                           	psect	text22
  3983  1F64                     __ptext22:	
  3984 ;; *************** function _Lcd_Init *****************
  3985 ;; Defined at:
  3986 ;;		line 14 in file "LCD.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;		None
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;		None
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      void 
  3993 ;; Registers used:
  3994 ;;		wreg, status,2, status,0, pclath, cstack
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4000 ;;      Params:         0       0       0       0       0
  4001 ;;      Locals:         0       0       0       0       0
  4002 ;;      Temps:          2       0       0       0       0
  4003 ;;      Totals:         2       0       0       0       0
  4004 ;;Total ram usage:        2 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    3
  4007 ;; This function calls:
  4008 ;;		_Lcd_Cmd
  4009 ;;		_Lcd_Port
  4010 ;; This function is called by:
  4011 ;;		_main
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _Lcd_Init
  4017  1F64                     _Lcd_Init:
  4018  1F64                     l4212:	
  4019                           ;incstack = 0
  4020                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4021                           
  4022                           
  4023                           ;LCD.c: 15:   Lcd_Port(0x00);
  4024  1F64  3000               	movlw	0
  4025  1F65  160A  158A  23D7  160A  158A  	fcall	_Lcd_Port
  4026  1F6A                     l4214:
  4027                           
  4028                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  4029  1F6A  3034               	movlw	52
  4030  1F6B  00F7               	movwf	??_Lcd_Init+1
  4031  1F6C  30F1               	movlw	241
  4032  1F6D  00F6               	movwf	??_Lcd_Init
  4033  1F6E                     u6217:
  4034  1F6E  0BF6               	decfsz	??_Lcd_Init,f
  4035  1F6F  2F6E               	goto	u6217
  4036  1F70  0BF7               	decfsz	??_Lcd_Init+1,f
  4037  1F71  2F6E               	goto	u6217
  4038  1F72  2F73               	nop2
  4039  1F73                     l4216:
  4040                           
  4041                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  4042  1F73  3030               	movlw	48
  4043  1F74  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4044                           
  4045                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  4046  1F79  300D               	movlw	13
  4047  1F7A  00F7               	movwf	??_Lcd_Init+1
  4048  1F7B  30FB               	movlw	251
  4049  1F7C  00F6               	movwf	??_Lcd_Init
  4050  1F7D                     u6227:
  4051  1F7D  0BF6               	decfsz	??_Lcd_Init,f
  4052  1F7E  2F7D               	goto	u6227
  4053  1F7F  0BF7               	decfsz	??_Lcd_Init+1,f
  4054  1F80  2F7D               	goto	u6227
  4055  1F81  2F82               	nop2
  4056  1F82                     l4218:
  4057                           
  4058                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  4059  1F82  3030               	movlw	48
  4060  1F83  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4061  1F88                     l4220:
  4062                           
  4063                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  4064  1F88  301D               	movlw	29
  4065  1F89  00F7               	movwf	??_Lcd_Init+1
  4066  1F8A  3091               	movlw	145
  4067  1F8B  00F6               	movwf	??_Lcd_Init
  4068  1F8C                     u6237:
  4069  1F8C  0BF6               	decfsz	??_Lcd_Init,f
  4070  1F8D  2F8C               	goto	u6237
  4071  1F8E  0BF7               	decfsz	??_Lcd_Init+1,f
  4072  1F8F  2F8C               	goto	u6237
  4073                           
  4074                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  4075  1F90  3030               	movlw	48
  4076  1F91  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4077                           
  4078                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  4079  1F96  3038               	movlw	56
  4080  1F97  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4081                           
  4082                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  4083  1F9C  300C               	movlw	12
  4084  1F9D  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4085                           
  4086                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  4087  1FA2  3001               	movlw	1
  4088  1FA3  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4089                           
  4090                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  4091  1FA8  3006               	movlw	6
  4092  1FA9  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4093  1FAE                     l164:
  4094  1FAE  0008               	return
  4095  1FAF                     __end_of_Lcd_Init:
  4096                           
  4097                           	psect	text23
  4098  1C20                     __ptext23:	
  4099 ;; *************** function _Lcd_Clear *****************
  4100 ;; Defined at:
  4101 ;;		line 42 in file "LCD.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      void 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0, pclath, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4115 ;;      Params:         0       0       0       0       0
  4116 ;;      Locals:         0       0       0       0       0
  4117 ;;      Temps:          0       0       0       0       0
  4118 ;;      Totals:         0       0       0       0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    3
  4122 ;; This function calls:
  4123 ;;		_Lcd_Cmd
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           
  4130                           ;psect for function _Lcd_Clear
  4131  1C20                     _Lcd_Clear:
  4132  1C20                     l4222:	
  4133                           ;incstack = 0
  4134                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4135                           
  4136                           
  4137                           ;LCD.c: 43:  Lcd_Cmd(0);
  4138  1C20  3000               	movlw	0
  4139  1C21  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4140                           
  4141                           ;LCD.c: 44:  Lcd_Cmd(1);
  4142  1C26  3001               	movlw	1
  4143  1C27  160A  158A  2482  160A  158A  	fcall	_Lcd_Cmd
  4144  1C2C                     l173:
  4145  1C2C  0008               	return
  4146  1C2D                     __end_of_Lcd_Clear:
  4147                           
  4148                           	psect	text24
  4149  1C82                     __ptext24:	
  4150 ;; *************** function _Lcd_Cmd *****************
  4151 ;; Defined at:
  4152 ;;		line 33 in file "LCD.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  a               1    wreg     unsigned char 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;  a               1    5[COMMON] unsigned char 
  4157 ;; Return value:  Size  Location     Type
  4158 ;;                  1    wreg      void 
  4159 ;; Registers used:
  4160 ;;		wreg, status,2, status,0, pclath, cstack
  4161 ;; Tracked objects:
  4162 ;;		On entry : 0/0
  4163 ;;		On exit  : 0/0
  4164 ;;		Unchanged: 0/0
  4165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4166 ;;      Params:         0       0       0       0       0
  4167 ;;      Locals:         1       0       0       0       0
  4168 ;;      Temps:          2       0       0       0       0
  4169 ;;      Totals:         3       0       0       0       0
  4170 ;;Total ram usage:        3 bytes
  4171 ;; Hardware stack levels used:    1
  4172 ;; Hardware stack levels required when called:    2
  4173 ;; This function calls:
  4174 ;;		_Lcd_Port
  4175 ;; This function is called by:
  4176 ;;		_Lcd_Init
  4177 ;;		_Lcd_Clear
  4178 ;;		_Lcd_Set_Cursor
  4179 ;;		_Lcd_Shift_Right
  4180 ;;		_Lcd_Shift_Left
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           
  4185                           ;psect for function _Lcd_Cmd
  4186  1C82                     _Lcd_Cmd:
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4190                           ;Lcd_Cmd@a stored from wreg
  4191  1C82  00F5               	movwf	Lcd_Cmd@a
  4192  1C83                     l3650:
  4193                           
  4194                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  4195  1C83  1283               	bcf	3,5	;RP0=0, select bank0
  4196  1C84  1303               	bcf	3,6	;RP1=0, select bank0
  4197  1C85  1009               	bcf	9,0	;volatile
  4198  1C86                     l3652:
  4199                           
  4200                           ;LCD.c: 35:  Lcd_Port(a);
  4201  1C86  0875               	movf	Lcd_Cmd@a,w
  4202  1C87  160A  158A  23D7  160A  158A  	fcall	_Lcd_Port
  4203  1C8C                     l3654:
  4204                           
  4205                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  4206  1C8C  1283               	bcf	3,5	;RP0=0, select bank0
  4207  1C8D  1303               	bcf	3,6	;RP1=0, select bank0
  4208  1C8E  1509               	bsf	9,2	;volatile
  4209  1C8F                     l3656:
  4210                           
  4211                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4212  1C8F  300B               	movlw	11
  4213  1C90  00F4               	movwf	??_Lcd_Cmd+1
  4214  1C91  3062               	movlw	98
  4215  1C92  00F3               	movwf	??_Lcd_Cmd
  4216  1C93                     u6247:
  4217  1C93  0BF3               	decfsz	??_Lcd_Cmd,f
  4218  1C94  2C93               	goto	u6247
  4219  1C95  0BF4               	decfsz	??_Lcd_Cmd+1,f
  4220  1C96  2C93               	goto	u6247
  4221  1C97  0000               	nop
  4222  1C98                     l3658:
  4223                           
  4224                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  4225  1C98  1283               	bcf	3,5	;RP0=0, select bank0
  4226  1C99  1303               	bcf	3,6	;RP1=0, select bank0
  4227  1C9A  1109               	bcf	9,2	;volatile
  4228  1C9B                     l170:
  4229  1C9B  0008               	return
  4230  1C9C                     __end_of_Lcd_Cmd:
  4231                           
  4232                           	psect	text25
  4233  1BD7                     __ptext25:	
  4234 ;; *************** function _Lcd_Port *****************
  4235 ;; Defined at:
  4236 ;;		line 29 in file "LCD.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  a               1    wreg     unsigned char 
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  a               1    2[COMMON] unsigned char 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  1    wreg      void 
  4243 ;; Registers used:
  4244 ;;		wreg
  4245 ;; Tracked objects:
  4246 ;;		On entry : 0/0
  4247 ;;		On exit  : 0/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4250 ;;      Params:         0       0       0       0       0
  4251 ;;      Locals:         1       0       0       0       0
  4252 ;;      Temps:          0       0       0       0       0
  4253 ;;      Totals:         1       0       0       0       0
  4254 ;;Total ram usage:        1 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    1
  4257 ;; This function calls:
  4258 ;;		Nothing
  4259 ;; This function is called by:
  4260 ;;		_Lcd_Init
  4261 ;;		_Lcd_Cmd
  4262 ;;		_Lcd_Write_Char
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           
  4267                           ;psect for function _Lcd_Port
  4268  1BD7                     _Lcd_Port:
  4269                           
  4270                           ;incstack = 0
  4271                           ; Regs used in _Lcd_Port: [wreg]
  4272                           ;Lcd_Port@a stored from wreg
  4273  1BD7  00F2               	movwf	Lcd_Port@a
  4274  1BD8                     l3502:
  4275                           
  4276                           ;LCD.c: 30:     PORTD = a;
  4277  1BD8  0872               	movf	Lcd_Port@a,w
  4278  1BD9  1283               	bcf	3,5	;RP0=0, select bank0
  4279  1BDA  1303               	bcf	3,6	;RP1=0, select bank0
  4280  1BDB  0088               	movwf	8	;volatile
  4281  1BDC                     l167:
  4282  1BDC  0008               	return
  4283  1BDD                     __end_of_Lcd_Port:
  4284                           
  4285                           	psect	text26
  4286  07BD                     __ptext26:	
  4287 ;; *************** function _ADC_to_string *****************
  4288 ;; Defined at:
  4289 ;;		line 123 in file "main_maestro.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4303 ;;      Params:         0       0       0       0       0
  4304 ;;      Locals:         0       0       0       0       0
  4305 ;;      Temps:          0       3       0       0       0
  4306 ;;      Totals:         0       3       0       0       0
  4307 ;;Total ram usage:        3 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    5
  4310 ;; This function calls:
  4311 ;;		_sprintf
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _ADC_to_string
  4319  07BD                     _ADC_to_string:
  4320  07BD                     l4226:	
  4321                           ;incstack = 0
  4322                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4323                           
  4324                           
  4325                           ;main_maestro.c: 124:     sprintf(data_cont, "%.3i", cont);
  4326  07BD  30B4               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4327  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  4328  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  4329  07C0  00E9               	movwf	??_ADC_to_string
  4330  07C1  0869               	movf	??_ADC_to_string,w
  4331  07C2  00DF               	movwf	sprintf@f
  4332  07C3  086E               	movf	_cont,w
  4333  07C4  00EA               	movwf	??_ADC_to_string+1
  4334  07C5  01EB               	clrf	??_ADC_to_string+2
  4335  07C6  086A               	movf	??_ADC_to_string+1,w
  4336  07C7  00E0               	movwf	?_sprintf+1
  4337  07C8  086B               	movf	??_ADC_to_string+2,w
  4338  07C9  00E1               	movwf	?_sprintf+2
  4339  07CA  30B3               	movlw	(low (_data_cont| 0))& (0+255)
  4340  07CB  120A  158A  2518  120A  118A  	fcall	_sprintf
  4341                           
  4342                           ;main_maestro.c: 125:     sprintf(data_ADC, "%1.2fV", ADC_val_M);
  4343  07D0  30A2               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  4344  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  4345  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  4346  07D3  00E9               	movwf	??_ADC_to_string
  4347  07D4  0869               	movf	??_ADC_to_string,w
  4348  07D5  00DF               	movwf	sprintf@f
  4349  07D6  1683               	bsf	3,5	;RP0=1, select bank1
  4350  07D7  1303               	bcf	3,6	;RP1=0, select bank1
  4351  07D8  0820               	movf	_ADC_val_M^(0+128),w
  4352  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  4353  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  4354  07DB  00E0               	movwf	?_sprintf+1
  4355  07DC  1683               	bsf	3,5	;RP0=1, select bank1
  4356  07DD  1303               	bcf	3,6	;RP1=0, select bank1
  4357  07DE  0821               	movf	(_ADC_val_M+1)^(0+128),w
  4358  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  4359  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  4360  07E1  00E1               	movwf	?_sprintf+2
  4361  07E2  1683               	bsf	3,5	;RP0=1, select bank1
  4362  07E3  1303               	bcf	3,6	;RP1=0, select bank1
  4363  07E4  0822               	movf	(_ADC_val_M+2)^(0+128),w
  4364  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  4365  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  4366  07E7  00E2               	movwf	?_sprintf+3
  4367  07E8  30AB               	movlw	(low (_data_ADC| 0))& (0+255)
  4368  07E9  120A  158A  2518  120A  118A  	fcall	_sprintf
  4369                           
  4370                           ;main_maestro.c: 126:     sprintf(data_TEMP, "%.2i", mv_temp_val_M);
  4371  07EE  30AF               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  4372  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  4373  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  4374  07F1  00E9               	movwf	??_ADC_to_string
  4375  07F2  0869               	movf	??_ADC_to_string,w
  4376  07F3  00DF               	movwf	sprintf@f
  4377  07F4  086D               	movf	_mv_temp_val_M+1,w
  4378  07F5  00E1               	movwf	?_sprintf+2
  4379  07F6  086C               	movf	_mv_temp_val_M,w
  4380  07F7  00E0               	movwf	?_sprintf+1
  4381  07F8  30A3               	movlw	(low (_data_TEMP| 0))& (0+255)
  4382  07F9  120A  158A  2518  120A  118A  	fcall	_sprintf
  4383  07FE                     l114:
  4384  07FE  0008               	return
  4385  07FF                     __end_of_ADC_to_string:
  4386                           
  4387                           	psect	text27
  4388  0D18                     __ptext27:	
  4389 ;; *************** function _sprintf *****************
  4390 ;; Defined at:
  4391 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  sp              1    wreg     PTR unsigned char 
  4394 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  4395 ;;  f               1   63[BANK0 ] PTR const unsigned char 
  4396 ;;		 -> STR_4(5), STR_3(7), STR_2(5), 
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  4399 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  4400 ;;  val             4   12[BANK1 ] unsigned long 
  4401 ;;  tmpval          4    8[BANK1 ] struct .
  4402 ;;  fval            3   18[BANK1 ] struct .
  4403 ;;  prec            2   22[BANK1 ] int 
  4404 ;;  eexp            2   16[BANK1 ] int 
  4405 ;;  width           2    6[BANK1 ] int 
  4406 ;;  flag            2    4[BANK1 ] unsigned short 
  4407 ;;  cp              2    0        PTR const unsigned char 
  4408 ;;  len             2    0        unsigned int 
  4409 ;;  c               1   24[BANK1 ] unsigned char 
  4410 ;;  ap              1    3[BANK1 ] PTR void [1]
  4411 ;;		 -> ?_sprintf(2), 
  4412 ;;  d               1    0        unsigned char 
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  2   63[BANK0 ] int 
  4415 ;; Registers used:
  4416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4422 ;;      Params:         0       4       0       0       0
  4423 ;;      Locals:         0       0      25       0       0
  4424 ;;      Temps:          0       6       0       0       0
  4425 ;;      Totals:         0      10      25       0       0
  4426 ;;Total ram usage:       35 bytes
  4427 ;; Hardware stack levels used:    1
  4428 ;; Hardware stack levels required when called:    4
  4429 ;; This function calls:
  4430 ;;		___awdiv
  4431 ;;		___ftadd
  4432 ;;		___ftge
  4433 ;;		___ftmul
  4434 ;;		___ftneg
  4435 ;;		___ftsub
  4436 ;;		___fttol
  4437 ;;		___lldiv
  4438 ;;		___llmod
  4439 ;;		___lltoft
  4440 ;;		___wmul
  4441 ;;		__div_to_l_
  4442 ;;		__tdiv_to_l_
  4443 ;;		_fround
  4444 ;;		_isdigit
  4445 ;;		_scale
  4446 ;; This function is called by:
  4447 ;;		_ADC_to_string
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function _sprintf
  4453  0D18                     _sprintf:
  4454                           
  4455                           ;incstack = 0
  4456                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4457                           ;sprintf@sp stored from wreg
  4458  0D18  1683               	bsf	3,5	;RP0=1, select bank1
  4459  0D19  1303               	bcf	3,6	;RP1=0, select bank1
  4460  0D1A  00D0               	movwf	sprintf@sp^(0+128)
  4461  0D1B                     l3866:
  4462                           
  4463                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 517:  
      +                          int prec;
  4464  0D1B  3060               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4465  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  4466  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  4467  0D1E  00E3               	movwf	??_sprintf
  4468  0D1F  0863               	movf	??_sprintf,w
  4469  0D20  1683               	bsf	3,5	;RP0=1, select bank1
  4470  0D21  1303               	bcf	3,6	;RP1=0, select bank1
  4471  0D22  00BE               	movwf	sprintf@ap^(0+128)
  4472  0D23                     L1:
  4473                           
  4474                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4475  0D23  120A  118A  2EBA   	goto	l4146
  4476  0D26                     l3868:
  4477                           
  4478                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4479  0D26  3025               	movlw	37
  4480  0D27  0653               	xorwf	sprintf@c^(0+128),w
  4481  0D28  1903               	btfsc	3,2
  4482  0D29  2D2B               	goto	u5481
  4483  0D2A  2D2C               	goto	u5480
  4484  0D2B                     u5481:
  4485  0D2B  2D40               	goto	l3874
  4486  0D2C                     u5480:
  4487  0D2C                     l3870:
  4488                           
  4489                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4490  0D2C  0853               	movf	sprintf@c^(0+128),w
  4491  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  4492  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  4493  0D2F  00E3               	movwf	??_sprintf
  4494  0D30  1683               	bsf	3,5	;RP0=1, select bank1
  4495  0D31  1303               	bcf	3,6	;RP1=0, select bank1
  4496  0D32  0850               	movf	sprintf@sp^(0+128),w
  4497  0D33  0084               	movwf	4
  4498  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  4499  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  4500  0D36  0863               	movf	??_sprintf,w
  4501  0D37  1383               	bcf	3,7	;select IRP bank0
  4502  0D38  0080               	movwf	0
  4503  0D39                     l3872:
  4504  0D39  3001               	movlw	1
  4505  0D3A  00E3               	movwf	??_sprintf
  4506  0D3B  0863               	movf	??_sprintf,w
  4507  0D3C  1683               	bsf	3,5	;RP0=1, select bank1
  4508  0D3D  1303               	bcf	3,6	;RP1=0, select bank1
  4509  0D3E  07D0               	addwf	sprintf@sp^(0+128),f
  4510                           
  4511                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  4512  0D3F  2D23               	goto	L1
  4513  0D40                     l3874:
  4514                           
  4515                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  4516  0D40  01C1               	clrf	sprintf@width^(0+128)
  4517  0D41  01C2               	clrf	(sprintf@width+1)^(0+128)
  4518                           
  4519                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4520  0D42  01BF               	clrf	sprintf@flag^(0+128)
  4521  0D43  01C0               	clrf	(sprintf@flag+1)^(0+128)
  4522  0D44                     l3876:
  4523                           
  4524                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  4525  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  4526  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  4527  0D46  085F               	movf	sprintf@f,w
  4528  0D47  0084               	movwf	4
  4529  0D48  160A  118A  200A  120A  158A  	fcall	stringdir
  4530  0D4D  160A  158A  242D  120A  158A  	fcall	_isdigit
  4531  0D52  1C03               	btfss	3,0
  4532  0D53  2D55               	goto	u5491
  4533  0D54  2D56               	goto	u5490
  4534  0D55                     u5491:
  4535  0D55  2DA0               	goto	l3888
  4536  0D56                     u5490:
  4537  0D56                     l3878:
  4538                           
  4539                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  4540  0D56  1683               	bsf	3,5	;RP0=1, select bank1
  4541  0D57  1303               	bcf	3,6	;RP1=0, select bank1
  4542  0D58  01C1               	clrf	sprintf@width^(0+128)
  4543  0D59  01C2               	clrf	(sprintf@width+1)^(0+128)
  4544  0D5A                     l3880:
  4545                           
  4546                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  4547  0D5A  300A               	movlw	10
  4548  0D5B  00F2               	movwf	___wmul@multiplier
  4549  0D5C  3000               	movlw	0
  4550  0D5D  00F3               	movwf	___wmul@multiplier+1
  4551  0D5E  1683               	bsf	3,5	;RP0=1, select bank1
  4552  0D5F  1303               	bcf	3,6	;RP1=0, select bank1
  4553  0D60  0842               	movf	(sprintf@width+1)^(0+128),w
  4554  0D61  00F5               	movwf	___wmul@multiplicand+1
  4555  0D62  0841               	movf	sprintf@width^(0+128),w
  4556  0D63  00F4               	movwf	___wmul@multiplicand
  4557  0D64  120A  158A  2003  120A  158A  	fcall	___wmul
  4558  0D69  0873               	movf	?___wmul+1,w
  4559  0D6A  1683               	bsf	3,5	;RP0=1, select bank1
  4560  0D6B  1303               	bcf	3,6	;RP1=0, select bank1
  4561  0D6C  00C2               	movwf	(sprintf@width+1)^(0+128)
  4562  0D6D  0872               	movf	?___wmul,w
  4563  0D6E  00C1               	movwf	sprintf@width^(0+128)
  4564  0D6F                     l3882:
  4565                           
  4566                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  4567  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  4568  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  4569  0D71  085F               	movf	sprintf@f,w
  4570  0D72  0084               	movwf	4
  4571  0D73  160A  118A  200A  120A  158A  	fcall	stringdir
  4572  0D78  3ED0               	addlw	208
  4573  0D79  00E3               	movwf	??_sprintf
  4574  0D7A  30FF               	movlw	255
  4575  0D7B  1803               	skipnc
  4576  0D7C  3000               	movlw	0
  4577  0D7D  00E4               	movwf	??_sprintf+1
  4578  0D7E  0863               	movf	??_sprintf,w
  4579  0D7F  1683               	bsf	3,5	;RP0=1, select bank1
  4580  0D80  1303               	bcf	3,6	;RP1=0, select bank1
  4581  0D81  07C1               	addwf	sprintf@width^(0+128),f
  4582  0D82  1803               	skipnc
  4583  0D83  0AC2               	incf	(sprintf@width+1)^(0+128),f
  4584  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  4585  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  4586  0D86  0864               	movf	??_sprintf+1,w
  4587  0D87  1683               	bsf	3,5	;RP0=1, select bank1
  4588  0D88  1303               	bcf	3,6	;RP1=0, select bank1
  4589  0D89  07C2               	addwf	(sprintf@width+1)^(0+128),f
  4590  0D8A                     l3884:
  4591  0D8A  3001               	movlw	1
  4592  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  4593  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  4594  0D8D  00E3               	movwf	??_sprintf
  4595  0D8E  0863               	movf	??_sprintf,w
  4596  0D8F  07DF               	addwf	sprintf@f,f
  4597  0D90                     l3886:
  4598                           
  4599                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  4600  0D90  085F               	movf	sprintf@f,w
  4601  0D91  0084               	movwf	4
  4602  0D92  160A  118A  200A  120A  158A  	fcall	stringdir
  4603  0D97  160A  158A  242D  120A  158A  	fcall	_isdigit
  4604  0D9C  1803               	btfsc	3,0
  4605  0D9D  2D9F               	goto	u5501
  4606  0D9E  2DA0               	goto	u5500
  4607  0D9F                     u5501:
  4608  0D9F  2D5A               	goto	l3880
  4609  0DA0                     u5500:
  4610  0DA0                     l3888:
  4611                           
  4612                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  4613  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  4614  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  4615  0DA2  085F               	movf	sprintf@f,w
  4616  0DA3  0084               	movwf	4
  4617  0DA4  160A  118A  200A  120A  158A  	fcall	stringdir
  4618  0DA9  3A2E               	xorlw	46
  4619  0DAA  1D03               	skipz
  4620  0DAB  2DAD               	goto	u5511
  4621  0DAC  2DAE               	goto	u5510
  4622  0DAD                     u5511:
  4623  0DAD  2E04               	goto	l3904
  4624  0DAE                     u5510:
  4625  0DAE                     l3890:
  4626                           
  4627                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 629:    flag |= 0
      +                          x4000;
  4628  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  4629  0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  4630  0DB0  1740               	bsf	(sprintf@flag^(0+128)+1),6
  4631  0DB1                     l3892:
  4632                           
  4633                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  4634  0DB1  3001               	movlw	1
  4635  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  4636  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  4637  0DB4  00E3               	movwf	??_sprintf
  4638  0DB5  0863               	movf	??_sprintf,w
  4639  0DB6  07DF               	addwf	sprintf@f,f
  4640  0DB7                     l3894:
  4641                           
  4642                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  4643  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  4644  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  4645  0DB9  01D1               	clrf	sprintf@prec^(0+128)
  4646  0DBA  01D2               	clrf	(sprintf@prec+1)^(0+128)
  4647                           
  4648                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  4649  0DBB  2DF2               	goto	l3902
  4650  0DBC                     l3896:
  4651                           
  4652                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  4653  0DBC  300A               	movlw	10
  4654  0DBD  00F2               	movwf	___wmul@multiplier
  4655  0DBE  3000               	movlw	0
  4656  0DBF  00F3               	movwf	___wmul@multiplier+1
  4657  0DC0  1683               	bsf	3,5	;RP0=1, select bank1
  4658  0DC1  1303               	bcf	3,6	;RP1=0, select bank1
  4659  0DC2  0852               	movf	(sprintf@prec+1)^(0+128),w
  4660  0DC3  00F5               	movwf	___wmul@multiplicand+1
  4661  0DC4  0851               	movf	sprintf@prec^(0+128),w
  4662  0DC5  00F4               	movwf	___wmul@multiplicand
  4663  0DC6  120A  158A  2003  120A  158A  	fcall	___wmul
  4664  0DCB  0873               	movf	?___wmul+1,w
  4665  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
  4666  0DCD  1303               	bcf	3,6	;RP1=0, select bank1
  4667  0DCE  00D2               	movwf	(sprintf@prec+1)^(0+128)
  4668  0DCF  0872               	movf	?___wmul,w
  4669  0DD0  00D1               	movwf	sprintf@prec^(0+128)
  4670  0DD1                     l3898:
  4671                           
  4672                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  4673  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  4674  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  4675  0DD3  085F               	movf	sprintf@f,w
  4676  0DD4  0084               	movwf	4
  4677  0DD5  160A  118A  200A  120A  158A  	fcall	stringdir
  4678  0DDA  3ED0               	addlw	208
  4679  0DDB  00E3               	movwf	??_sprintf
  4680  0DDC  30FF               	movlw	255
  4681  0DDD  1803               	skipnc
  4682  0DDE  3000               	movlw	0
  4683  0DDF  00E4               	movwf	??_sprintf+1
  4684  0DE0  0863               	movf	??_sprintf,w
  4685  0DE1  1683               	bsf	3,5	;RP0=1, select bank1
  4686  0DE2  1303               	bcf	3,6	;RP1=0, select bank1
  4687  0DE3  07D1               	addwf	sprintf@prec^(0+128),f
  4688  0DE4  1803               	skipnc
  4689  0DE5  0AD2               	incf	(sprintf@prec+1)^(0+128),f
  4690  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  4691  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  4692  0DE8  0864               	movf	??_sprintf+1,w
  4693  0DE9  1683               	bsf	3,5	;RP0=1, select bank1
  4694  0DEA  1303               	bcf	3,6	;RP1=0, select bank1
  4695  0DEB  07D2               	addwf	(sprintf@prec+1)^(0+128),f
  4696  0DEC                     l3900:
  4697  0DEC  3001               	movlw	1
  4698  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  4699  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  4700  0DEF  00E3               	movwf	??_sprintf
  4701  0DF0  0863               	movf	??_sprintf,w
  4702  0DF1  07DF               	addwf	sprintf@f,f
  4703  0DF2                     l3902:
  4704                           
  4705                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  4706  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  4707  0DF3  085F               	movf	sprintf@f,w
  4708  0DF4  0084               	movwf	4
  4709  0DF5  160A  118A  200A  120A  158A  	fcall	stringdir
  4710  0DFA  160A  158A  242D  120A  158A  	fcall	_isdigit
  4711  0DFF  1803               	btfsc	3,0
  4712  0E00  2E02               	goto	u5521
  4713  0E01  2E03               	goto	u5520
  4714  0E02                     u5521:
  4715  0E02  2DBC               	goto	l3896
  4716  0E03                     u5520:
  4717  0E03  2E0E               	goto	l3910
  4718  0E04                     l3904:
  4719                           
  4720                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  4721  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  4722  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  4723  0E06  01D1               	clrf	sprintf@prec^(0+128)
  4724  0E07  01D2               	clrf	(sprintf@prec+1)^(0+128)
  4725  0E08                     l3906:
  4726                           
  4727                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 654:    flag |= 0
      +                          x1000;
  4728  0E08  1640               	bsf	(sprintf@flag^(0+128)+1),4
  4729  0E09  2E0E               	goto	l3910
  4730  0E0A                     l406:	
  4731                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 688:   case 'f':
  4732                           
  4733                           
  4734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 689:    flag |= 0
      +                          x400;
  4735  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  4736  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  4737  0E0C  1540               	bsf	(sprintf@flag^(0+128)+1),2
  4738                           
  4739                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 690:    break;
  4740  0E0D  2E34               	goto	l3912
  4741  0E0E                     l3910:
  4742  0E0E  3001               	movlw	1
  4743  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  4744  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  4745  0E11  07DF               	addwf	sprintf@f,f
  4746  0E12  30FF               	movlw	-1
  4747  0E13  075F               	addwf	sprintf@f,w
  4748  0E14  0084               	movwf	4
  4749  0E15  160A  118A  200A  120A  158A  	fcall	stringdir
  4750  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  4751  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  4752  0E1C  00D3               	movwf	sprintf@c^(0+128)
  4753  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  4755  0E1F  00E3               	movwf	??_sprintf
  4756  0E20  01E4               	clrf	??_sprintf+1
  4757                           
  4758                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4759                           ; Switch size 1, requested type "simple"
  4760                           ; Number of cases is 1, Range of values is 0 to 0
  4761                           ; switch strategies available:
  4762                           ; Name         Instructions Cycles
  4763                           ; simple_byte            4     3 (average)
  4764                           ; direct_byte           11     8 (fixed)
  4765                           ; jumptable            260     6 (fixed)
  4766                           ;	Chosen strategy is simple_byte
  4767  0E21  0864               	movf	??_sprintf+1,w
  4768  0E22  3A00               	xorlw	0	; case 0
  4769  0E23  1903               	skipnz
  4770  0E24  2E26               	goto	l4322
  4771  0E25  2D23               	goto	L1
  4772  0E26                     l4322:
  4773                           
  4774                           ; Switch size 1, requested type "simple"
  4775                           ; Number of cases is 4, Range of values is 0 to 105
  4776                           ; switch strategies available:
  4777                           ; Name         Instructions Cycles
  4778                           ; simple_byte           13     7 (average)
  4779                           ; jumptable            260     6 (fixed)
  4780                           ;	Chosen strategy is simple_byte
  4781  0E26  0863               	movf	??_sprintf,w
  4782  0E27  3A00               	xorlw	0	; case 0
  4783  0E28  1903               	skipnz
  4784  0E29  2FFD               	goto	L3
  4785  0E2A  3A64               	xorlw	100	; case 100
  4786  0E2B  1903               	skipnz
  4787  0E2C  2E34               	goto	l3912
  4788  0E2D  3A02               	xorlw	2	; case 102
  4789  0E2E  1903               	skipnz
  4790  0E2F  2E0A               	goto	l406
  4791  0E30  3A0F               	xorlw	15	; case 105
  4792  0E31  1903               	skipnz
  4793  0E32  2E34               	goto	l3912
  4794  0E33  2D23               	goto	L1
  4795  0E34                     l3912:
  4796                           
  4797                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 851:   if(flag & 
      +                          (0x700)) {
  4798  0E34  3000               	movlw	0
  4799  0E35  1683               	bsf	3,5	;RP0=1, select bank1
  4800  0E36  1303               	bcf	3,6	;RP1=0, select bank1
  4801  0E37  053F               	andwf	sprintf@flag^(0+128),w
  4802  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  4803  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  4804  0E3A  00E3               	movwf	??_sprintf
  4805  0E3B  3007               	movlw	7
  4806  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  4807  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  4808  0E3E  0540               	andwf	(sprintf@flag+1)^(0+128),w
  4809  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  4810  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  4811  0E41  00E4               	movwf	??_sprintf+1
  4812  0E42  0863               	movf	??_sprintf,w
  4813  0E43  0464               	iorwf	??_sprintf+1,w
  4814  0E44  1903               	btfsc	3,2
  4815  0E45  2E47               	goto	u5531
  4816  0E46  2E4A               	goto	u5530
  4817  0E47                     u5531:
  4818  0E47  120A  118A  2CB1   	goto	l4068
  4819  0E4A                     u5530:
  4820  0E4A                     l3914:
  4821                           
  4822                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 853:    if(flag &
      +                           0x1000)
  4823  0E4A  1683               	bsf	3,5	;RP0=1, select bank1
  4824  0E4B  1303               	bcf	3,6	;RP1=0, select bank1
  4825  0E4C  1E40               	btfss	(sprintf@flag+1)^(0+128),4
  4826  0E4D  2E4F               	goto	u5541
  4827  0E4E  2E50               	goto	u5540
  4828  0E4F                     u5541:
  4829  0E4F  2E54               	goto	l3918
  4830  0E50                     u5540:
  4831  0E50                     l3916:
  4832                           
  4833                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 855:     prec = 6
      +                          ;
  4834  0E50  3006               	movlw	6
  4835  0E51  00D1               	movwf	sprintf@prec^(0+128)
  4836  0E52  3000               	movlw	0
  4837  0E53  00D2               	movwf	(sprintf@prec^(0+128)+1)
  4838  0E54                     l3918:
  4839                           
  4840                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 856:    fval = (*
      +                          (double *)__va_arg((*(double **)ap), (double)0));
  4841  0E54  083E               	movf	sprintf@ap^(0+128),w
  4842  0E55  0084               	movwf	4
  4843  0E56  1383               	bcf	3,7	;select IRP bank0
  4844  0E57  0800               	movf	0,w
  4845  0E58  00CD               	movwf	sprintf@fval^(0+128)
  4846  0E59  0A84               	incf	4,f
  4847  0E5A  0800               	movf	0,w
  4848  0E5B  00CE               	movwf	(sprintf@fval+1)^(0+128)
  4849  0E5C  0A84               	incf	4,f
  4850  0E5D  0800               	movf	0,w
  4851  0E5E  00CF               	movwf	(sprintf@fval+2)^(0+128)
  4852  0E5F                     l3920:
  4853  0E5F  3003               	movlw	3
  4854  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  4855  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  4856  0E62  00E3               	movwf	??_sprintf
  4857  0E63  0863               	movf	??_sprintf,w
  4858  0E64  1683               	bsf	3,5	;RP0=1, select bank1
  4859  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  4860  0E66  07BE               	addwf	sprintf@ap^(0+128),f
  4861  0E67                     l3922:
  4862                           
  4863                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 857:    if(fval <
      +                           0.0) {
  4864  0E67  084D               	movf	sprintf@fval^(0+128),w
  4865  0E68  00F2               	movwf	___ftge@ff1
  4866  0E69  084E               	movf	(sprintf@fval+1)^(0+128),w
  4867  0E6A  00F3               	movwf	___ftge@ff1+1
  4868  0E6B  084F               	movf	(sprintf@fval+2)^(0+128),w
  4869  0E6C  00F4               	movwf	___ftge@ff1+2
  4870  0E6D  3000               	movlw	0
  4871  0E6E  00F5               	movwf	___ftge@ff2
  4872  0E6F  3000               	movlw	0
  4873  0E70  00F6               	movwf	___ftge@ff2+1
  4874  0E71  3000               	movlw	0
  4875  0E72  00F7               	movwf	___ftge@ff2+2
  4876  0E73  160A  158A  25DF  120A  158A  	fcall	___ftge
  4877  0E78  1803               	btfsc	3,0
  4878  0E79  2E7B               	goto	u5551
  4879  0E7A  2E7C               	goto	u5550
  4880  0E7B                     u5551:
  4881  0E7B  2E95               	goto	l3928
  4882  0E7C                     u5550:
  4883  0E7C                     l3924:
  4884                           
  4885                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 858:     fval = -
      +                          fval;
  4886  0E7C  1683               	bsf	3,5	;RP0=1, select bank1
  4887  0E7D  1303               	bcf	3,6	;RP1=0, select bank1
  4888  0E7E  084D               	movf	sprintf@fval^(0+128),w
  4889  0E7F  00F2               	movwf	___ftneg@f1
  4890  0E80  084E               	movf	(sprintf@fval+1)^(0+128),w
  4891  0E81  00F3               	movwf	___ftneg@f1+1
  4892  0E82  084F               	movf	(sprintf@fval+2)^(0+128),w
  4893  0E83  00F4               	movwf	___ftneg@f1+2
  4894  0E84  160A  158A  240A  120A  158A  	fcall	___ftneg
  4895  0E89  0872               	movf	?___ftneg,w
  4896  0E8A  1683               	bsf	3,5	;RP0=1, select bank1
  4897  0E8B  1303               	bcf	3,6	;RP1=0, select bank1
  4898  0E8C  00CD               	movwf	sprintf@fval^(0+128)
  4899  0E8D  0873               	movf	?___ftneg+1,w
  4900  0E8E  00CE               	movwf	(sprintf@fval+1)^(0+128)
  4901  0E8F  0874               	movf	?___ftneg+2,w
  4902  0E90  00CF               	movwf	(sprintf@fval+2)^(0+128)
  4903  0E91                     l3926:
  4904                           
  4905                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 859:     flag |= 
      +                          0x03;
  4906  0E91  3003               	movlw	3
  4907  0E92  04BF               	iorwf	sprintf@flag^(0+128),f
  4908  0E93  3000               	movlw	0
  4909  0E94  04C0               	iorwf	(sprintf@flag+1)^(0+128),f
  4910  0E95                     l3928:
  4911                           
  4912                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 861:    eexp = 0;
  4913  0E95  1683               	bsf	3,5	;RP0=1, select bank1
  4914  0E96  1303               	bcf	3,6	;RP1=0, select bank1
  4915  0E97  01CB               	clrf	sprintf@eexp^(0+128)
  4916  0E98  01CC               	clrf	(sprintf@eexp+1)^(0+128)
  4917  0E99                     l3930:
  4918                           
  4919                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 862:    if( fval!
      +                          =0) {
  4920  0E99  084F               	movf	(sprintf@fval+2)^(0+128),w
  4921  0E9A  044E               	iorwf	(sprintf@fval+1)^(0+128),w
  4922  0E9B  044D               	iorwf	sprintf@fval^(0+128),w
  4923  0E9C  1903               	skipnz
  4924  0E9D  2E9F               	goto	u5561
  4925  0E9E  2EA0               	goto	u5560
  4926  0E9F                     u5561:
  4927  0E9F  2FA2               	goto	l3956
  4928  0EA0                     u5560:
  4929  0EA0                     l3932:
  4930                           
  4931                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 863:     (void)(*
      +                          (&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4932  0EA0  30CD               	movlw	low (sprintf@fval| 0)
  4933  0EA1  0084               	movwf	4
  4934  0EA2  1383               	bcf	3,7	;select IRP bank1
  4935  0EA3  0800               	movf	0,w
  4936  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  4937  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  4938  0EA6  00E3               	movwf	??_sprintf
  4939  0EA7  0A84               	incf	4,f
  4940  0EA8  0800               	movf	0,w
  4941  0EA9  00E4               	movwf	??_sprintf+1
  4942  0EAA  0A84               	incf	4,f
  4943  0EAB  0800               	movf	0,w
  4944  0EAC  00E5               	movwf	??_sprintf+2
  4945  0EAD  0A84               	incf	4,f
  4946  0EAE  0800               	movf	0,w
  4947  0EAF  00E6               	movwf	??_sprintf+3
  4948  0EB0  300F               	movlw	15
  4949  0EB1                     u5575:
  4950  0EB1  1003               	clrc
  4951  0EB2  0CE6               	rrf	??_sprintf+3,f
  4952  0EB3  0CE5               	rrf	??_sprintf+2,f
  4953  0EB4  0CE4               	rrf	??_sprintf+1,f
  4954  0EB5  0CE3               	rrf	??_sprintf,f
  4955  0EB6                     u5570:
  4956  0EB6  3EFF               	addlw	-1
  4957  0EB7  1D03               	skipz
  4958  0EB8  2EB1               	goto	u5575
  4959  0EB9  30FF               	movlw	255
  4960  0EBA  0563               	andwf	??_sprintf,w
  4961  0EBB  00E7               	movwf	??_sprintf+4
  4962  0EBC  3000               	movlw	0
  4963  0EBD  0564               	andwf	??_sprintf+1,w
  4964  0EBE  00E8               	movwf	??_sprintf+5
  4965  0EBF  0867               	movf	??_sprintf+4,w
  4966  0EC0  3E82               	addlw	130
  4967  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  4968  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  4969  0EC3  00CB               	movwf	sprintf@eexp^(0+128)
  4970  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  4971  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  4972  0EC6  0868               	movf	??_sprintf+5,w
  4973  0EC7  1803               	skipnc
  4974  0EC8  3E01               	addlw	1
  4975  0EC9  3EFF               	addlw	255
  4976  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  4977  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  4978  0ECC  00CC               	movwf	(sprintf@eexp+1)^(0+128)
  4979  0ECD                     l3934:
  4980                           
  4981                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 864:     eexp--;
  4982  0ECD  30FF               	movlw	255
  4983  0ECE  07CB               	addwf	sprintf@eexp^(0+128),f
  4984  0ECF  1803               	skipnc
  4985  0ED0  0ACC               	incf	(sprintf@eexp+1)^(0+128),f
  4986  0ED1  30FF               	movlw	255
  4987  0ED2  07CC               	addwf	(sprintf@eexp+1)^(0+128),f
  4988  0ED3                     l3936:
  4989                           
  4990                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 865:     eexp *= 
      +                          3;
  4991  0ED3  3003               	movlw	3
  4992  0ED4  00F2               	movwf	___wmul@multiplier
  4993  0ED5  3000               	movlw	0
  4994  0ED6  00F3               	movwf	___wmul@multiplier+1
  4995  0ED7  084C               	movf	(sprintf@eexp+1)^(0+128),w
  4996  0ED8  00F5               	movwf	___wmul@multiplicand+1
  4997  0ED9  084B               	movf	sprintf@eexp^(0+128),w
  4998  0EDA  00F4               	movwf	___wmul@multiplicand
  4999  0EDB  120A  158A  2003  120A  158A  	fcall	___wmul
  5000  0EE0  0873               	movf	?___wmul+1,w
  5001  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  5002  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  5003  0EE3  00CC               	movwf	(sprintf@eexp+1)^(0+128)
  5004  0EE4  0872               	movf	?___wmul,w
  5005  0EE5  00CB               	movwf	sprintf@eexp^(0+128)
  5006  0EE6                     l3938:
  5007                           
  5008                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 866:     eexp /= 
      +                          10;
  5009  0EE6  300A               	movlw	10
  5010  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  5011  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  5012  0EE9  00A0               	movwf	___awdiv@divisor
  5013  0EEA  3000               	movlw	0
  5014  0EEB  00A1               	movwf	___awdiv@divisor+1
  5015  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  5016  0EED  1303               	bcf	3,6	;RP1=0, select bank1
  5017  0EEE  084C               	movf	(sprintf@eexp+1)^(0+128),w
  5018  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  5019  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  5020  0EF1  00A3               	movwf	___awdiv@dividend+1
  5021  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  5022  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  5023  0EF4  084B               	movf	sprintf@eexp^(0+128),w
  5024  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  5025  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  5026  0EF7  00A2               	movwf	___awdiv@dividend
  5027  0EF8  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5028  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  5029  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  5030  0EFF  0821               	movf	?___awdiv+1,w
  5031  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  5032  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  5033  0F02  00CC               	movwf	(sprintf@eexp+1)^(0+128)
  5034  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  5035  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  5036  0F05  0820               	movf	?___awdiv,w
  5037  0F06  1683               	bsf	3,5	;RP0=1, select bank1
  5038  0F07  1303               	bcf	3,6	;RP1=0, select bank1
  5039  0F08  00CB               	movwf	sprintf@eexp^(0+128)
  5040  0F09                     l3940:
  5041                           
  5042                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 867:     if(eexp 
      +                          < 0)
  5043  0F09  1FCC               	btfss	(sprintf@eexp+1)^(0+128),7
  5044  0F0A  2F0C               	goto	u5581
  5045  0F0B  2F0D               	goto	u5580
  5046  0F0C                     u5581:
  5047  0F0C  2F13               	goto	l3944
  5048  0F0D                     u5580:
  5049  0F0D                     l3942:
  5050                           
  5051                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 868:      eexp--;
  5052  0F0D  30FF               	movlw	255
  5053  0F0E  07CB               	addwf	sprintf@eexp^(0+128),f
  5054  0F0F  1803               	skipnc
  5055  0F10  0ACC               	incf	(sprintf@eexp+1)^(0+128),f
  5056  0F11  30FF               	movlw	255
  5057  0F12  07CC               	addwf	(sprintf@eexp+1)^(0+128),f
  5058  0F13                     l3944:
  5059                           
  5060                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 872:     tmpval.i
      +                          nteg = scale(-eexp);
  5061  0F13  034B               	decf	sprintf@eexp^(0+128),w
  5062  0F14  3AFF               	xorlw	255
  5063  0F15  120A  158A  225D  120A  158A  	fcall	_scale
  5064  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  5065  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  5066  0F1C  083C               	movf	?_scale,w
  5067  0F1D  1683               	bsf	3,5	;RP0=1, select bank1
  5068  0F1E  1303               	bcf	3,6	;RP1=0, select bank1
  5069  0F1F  00C3               	movwf	sprintf@tmpval^(0+128)
  5070  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  5071  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  5072  0F22  083D               	movf	?_scale+1,w
  5073  0F23  1683               	bsf	3,5	;RP0=1, select bank1
  5074  0F24  1303               	bcf	3,6	;RP1=0, select bank1
  5075  0F25  00C4               	movwf	(sprintf@tmpval+1)^(0+128)
  5076  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  5077  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  5078  0F28  083E               	movf	?_scale+2,w
  5079  0F29  1683               	bsf	3,5	;RP0=1, select bank1
  5080  0F2A  1303               	bcf	3,6	;RP1=0, select bank1
  5081  0F2B  00C5               	movwf	(sprintf@tmpval+2)^(0+128)
  5082  0F2C                     l3946:
  5083                           
  5084                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 873:     tmpval.i
      +                          nteg *= fval;
  5085  0F2C  084D               	movf	sprintf@fval^(0+128),w
  5086  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  5087  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  5088  0F2F  00AC               	movwf	___ftmul@f1
  5089  0F30  1683               	bsf	3,5	;RP0=1, select bank1
  5090  0F31  1303               	bcf	3,6	;RP1=0, select bank1
  5091  0F32  084E               	movf	(sprintf@fval+1)^(0+128),w
  5092  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  5093  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  5094  0F35  00AD               	movwf	___ftmul@f1+1
  5095  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  5096  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  5097  0F38  084F               	movf	(sprintf@fval+2)^(0+128),w
  5098  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  5099  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  5100  0F3B  00AE               	movwf	___ftmul@f1+2
  5101  0F3C  1683               	bsf	3,5	;RP0=1, select bank1
  5102  0F3D  1303               	bcf	3,6	;RP1=0, select bank1
  5103  0F3E  0843               	movf	sprintf@tmpval^(0+128),w
  5104  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  5105  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  5106  0F41  00AF               	movwf	___ftmul@f2
  5107  0F42  1683               	bsf	3,5	;RP0=1, select bank1
  5108  0F43  1303               	bcf	3,6	;RP1=0, select bank1
  5109  0F44  0844               	movf	(sprintf@tmpval+1)^(0+128),w
  5110  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  5111  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  5112  0F47  00B0               	movwf	___ftmul@f2+1
  5113  0F48  1683               	bsf	3,5	;RP0=1, select bank1
  5114  0F49  1303               	bcf	3,6	;RP1=0, select bank1
  5115  0F4A  0845               	movf	(sprintf@tmpval+2)^(0+128),w
  5116  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  5117  0F4C  1303               	bcf	3,6	;RP1=0, select bank0
  5118  0F4D  00B1               	movwf	___ftmul@f2+2
  5119  0F4E  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5120  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  5121  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  5122  0F55  082C               	movf	?___ftmul,w
  5123  0F56  1683               	bsf	3,5	;RP0=1, select bank1
  5124  0F57  1303               	bcf	3,6	;RP1=0, select bank1
  5125  0F58  00C3               	movwf	sprintf@tmpval^(0+128)
  5126  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  5127  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  5128  0F5B  082D               	movf	?___ftmul+1,w
  5129  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  5130  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  5131  0F5E  00C4               	movwf	(sprintf@tmpval+1)^(0+128)
  5132  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  5133  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  5134  0F61  082E               	movf	?___ftmul+2,w
  5135  0F62  1683               	bsf	3,5	;RP0=1, select bank1
  5136  0F63  1303               	bcf	3,6	;RP1=0, select bank1
  5137  0F64  00C5               	movwf	(sprintf@tmpval+2)^(0+128)
  5138  0F65                     l3948:
  5139                           
  5140                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 874:     if(tmpva
      +                          l.integ < 1.0)
  5141  0F65  0843               	movf	sprintf@tmpval^(0+128),w
  5142  0F66  00F2               	movwf	___ftge@ff1
  5143  0F67  0844               	movf	(sprintf@tmpval+1)^(0+128),w
  5144  0F68  00F3               	movwf	___ftge@ff1+1
  5145  0F69  0845               	movf	(sprintf@tmpval+2)^(0+128),w
  5146  0F6A  00F4               	movwf	___ftge@ff1+2
  5147  0F6B  3000               	movlw	0
  5148  0F6C  00F5               	movwf	___ftge@ff2
  5149  0F6D  3080               	movlw	128
  5150  0F6E  00F6               	movwf	___ftge@ff2+1
  5151  0F6F  303F               	movlw	63
  5152  0F70  00F7               	movwf	___ftge@ff2+2
  5153  0F71  160A  158A  25DF  120A  158A  	fcall	___ftge
  5154  0F76  1803               	btfsc	3,0
  5155  0F77  2F79               	goto	u5591
  5156  0F78  2F7A               	goto	u5590
  5157  0F79                     u5591:
  5158  0F79  2F83               	goto	l3952
  5159  0F7A                     u5590:
  5160  0F7A                     l3950:
  5161                           
  5162                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 875:      eexp--;
  5163  0F7A  30FF               	movlw	255
  5164  0F7B  1683               	bsf	3,5	;RP0=1, select bank1
  5165  0F7C  1303               	bcf	3,6	;RP1=0, select bank1
  5166  0F7D  07CB               	addwf	sprintf@eexp^(0+128),f
  5167  0F7E  1803               	skipnc
  5168  0F7F  0ACC               	incf	(sprintf@eexp+1)^(0+128),f
  5169  0F80  30FF               	movlw	255
  5170  0F81  07CC               	addwf	(sprintf@eexp+1)^(0+128),f
  5171  0F82  2FA2               	goto	l3956
  5172  0F83                     l3952:
  5173  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  5174  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  5175  0F85  0843               	movf	sprintf@tmpval^(0+128),w
  5176  0F86  00F2               	movwf	___ftge@ff1
  5177  0F87  0844               	movf	(sprintf@tmpval+1)^(0+128),w
  5178  0F88  00F3               	movwf	___ftge@ff1+1
  5179  0F89  0845               	movf	(sprintf@tmpval+2)^(0+128),w
  5180  0F8A  00F4               	movwf	___ftge@ff1+2
  5181  0F8B  3000               	movlw	0
  5182  0F8C  00F5               	movwf	___ftge@ff2
  5183  0F8D  3020               	movlw	32
  5184  0F8E  00F6               	movwf	___ftge@ff2+1
  5185  0F8F  3041               	movlw	65
  5186  0F90  00F7               	movwf	___ftge@ff2+2
  5187  0F91  160A  158A  25DF  120A  158A  	fcall	___ftge
  5188  0F96  1C03               	btfss	3,0
  5189  0F97  2F99               	goto	u5601
  5190  0F98  2F9A               	goto	u5600
  5191  0F99                     u5601:
  5192  0F99  2FA2               	goto	l3956
  5193  0F9A                     u5600:
  5194  0F9A                     l3954:
  5195                           
  5196                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 877:      eexp++;
  5197  0F9A  3001               	movlw	1
  5198  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  5199  0F9C  1303               	bcf	3,6	;RP1=0, select bank1
  5200  0F9D  07CB               	addwf	sprintf@eexp^(0+128),f
  5201  0F9E  1803               	skipnc
  5202  0F9F  0ACC               	incf	(sprintf@eexp+1)^(0+128),f
  5203  0FA0  3000               	movlw	0
  5204  0FA1  07CC               	addwf	(sprintf@eexp+1)^(0+128),f
  5205  0FA2                     l3956:
  5206                           
  5207                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1138:      if(pre
      +                          c <= 12)
  5208  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  5209  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  5210  0FA4  0852               	movf	(sprintf@prec+1)^(0+128),w
  5211  0FA5  3A80               	xorlw	128
  5212  0FA6  00FF               	movwf	btemp+1
  5213  0FA7  3080               	movlw	128
  5214  0FA8  027F               	subwf	btemp+1,w
  5215  0FA9  1D03               	skipz
  5216  0FAA  2FAD               	goto	u5615
  5217  0FAB  300D               	movlw	13
  5218  0FAC  0251               	subwf	sprintf@prec^(0+128),w
  5219  0FAD                     u5615:
  5220  0FAD  1803               	skipnc
  5221  0FAE  2FB0               	goto	u5611
  5222  0FAF  2FB1               	goto	u5610
  5223  0FB0                     u5611:
  5224  0FB0  2FEA               	goto	l3960
  5225  0FB1                     u5610:
  5226  0FB1                     l3958:
  5227                           
  5228                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1139:       fval 
      +                          += fround((unsigned int)prec);
  5229  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  5230  0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  5231  0FB3  0851               	movf	sprintf@prec^(0+128),w
  5232  0FB4  120A  158A  20B4  120A  158A  	fcall	_fround
  5233  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  5234  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  5235  0FBB  083C               	movf	?_fround,w
  5236  0FBC  00CC               	movwf	___ftadd@f1
  5237  0FBD  083D               	movf	?_fround+1,w
  5238  0FBE  00CD               	movwf	___ftadd@f1+1
  5239  0FBF  083E               	movf	?_fround+2,w
  5240  0FC0  00CE               	movwf	___ftadd@f1+2
  5241  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  5242  0FC2  1303               	bcf	3,6	;RP1=0, select bank1
  5243  0FC3  084D               	movf	sprintf@fval^(0+128),w
  5244  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  5245  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  5246  0FC6  00CF               	movwf	___ftadd@f2
  5247  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  5248  0FC8  1303               	bcf	3,6	;RP1=0, select bank1
  5249  0FC9  084E               	movf	(sprintf@fval+1)^(0+128),w
  5250  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  5251  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  5252  0FCC  00D0               	movwf	___ftadd@f2+1
  5253  0FCD  1683               	bsf	3,5	;RP0=1, select bank1
  5254  0FCE  1303               	bcf	3,6	;RP1=0, select bank1
  5255  0FCF  084F               	movf	(sprintf@fval+2)^(0+128),w
  5256  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  5257  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  5258  0FD2  00D1               	movwf	___ftadd@f2+2
  5259  0FD3  160A  118A  26CA  120A  158A  	fcall	___ftadd
  5260  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  5261  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  5262  0FDA  084C               	movf	?___ftadd,w
  5263  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  5264  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  5265  0FDD  00CD               	movwf	sprintf@fval^(0+128)
  5266  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5267  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5268  0FE0  084D               	movf	?___ftadd+1,w
  5269  0FE1  1683               	bsf	3,5	;RP0=1, select bank1
  5270  0FE2  1303               	bcf	3,6	;RP1=0, select bank1
  5271  0FE3  00CE               	movwf	(sprintf@fval+1)^(0+128)
  5272  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  5273  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  5274  0FE6  084E               	movf	?___ftadd+2,w
  5275  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  5276  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  5277  0FE9  00CF               	movwf	(sprintf@fval+2)^(0+128)
  5278  0FEA                     l3960:
  5279                           
  5280                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1142:     if((eex
      +                          p > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  5281  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  5282  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  5283  0FEC  084C               	movf	(sprintf@eexp+1)^(0+128),w
  5284  0FED  3A80               	xorlw	128
  5285  0FEE  00FF               	movwf	btemp+1
  5286  0FEF  3080               	movlw	128
  5287  0FF0  027F               	subwf	btemp+1,w
  5288  0FF1  1D03               	skipz
  5289  0FF2  2FF5               	goto	u5625
  5290  0FF3  300A               	movlw	10
  5291  0FF4  024B               	subwf	sprintf@eexp^(0+128),w
  5292  0FF5                     u5625:
  5293  0FF5  1803               	skipnc
  5294  0FF6  2FFA               	goto	u5621
  5295  0FF7  120A  118A  2824   	goto	u5620
  5296  0FFA                     u5621:
  5297  0FFA  120A  118A  285B   	goto	l3968
  5298  0FFD                     L3:
  5299  0FFD                     L2:
  5300  0FFD  120A  118A  2ED1   	ljmp	l4148
  5301                           
  5302                           	psect	text28
  5303  0A5D                     __ptext28:	
  5304 ;; *************** function _scale *****************
  5305 ;; Defined at:
  5306 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  scl             1    wreg     char 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  scl             1   36[BANK0 ] char 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  3   28[BANK0 ] char 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5320 ;;      Params:         0       3       0       0       0
  5321 ;;      Locals:         0       4       0       0       0
  5322 ;;      Temps:          0       2       0       0       0
  5323 ;;      Totals:         0       9       0       0       0
  5324 ;;Total ram usage:        9 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; Hardware stack levels required when called:    3
  5327 ;; This function calls:
  5328 ;;		___awdiv
  5329 ;;		___awmod
  5330 ;;		___bmul
  5331 ;;		___ftmul
  5332 ;; This function is called by:
  5333 ;;		_sprintf
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           
  5338                           ;psect for function _scale
  5339  0A5D                     _scale:
  5340                           
  5341                           ;incstack = 0
  5342                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5343                           ;scale@scl stored from wreg
  5344  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  5345  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  5346  0A5F  00C4               	movwf	scale@scl
  5347  0A60                     l3692:
  5348                           
  5349                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 433: scale(signed
      +                           char scl);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 434: {;
      +                          C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 436:  if(scl < 0) 
      +                          {
  5350  0A60  1FC4               	btfss	scale@scl,7
  5351  0A61  2A63               	goto	u5091
  5352  0A62  2A64               	goto	u5090
  5353  0A63                     u5091:
  5354  0A63  2BBF               	goto	l3714
  5355  0A64                     u5090:
  5356  0A64                     l3694:
  5357                           
  5358                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 437:   scl = -scl
      +                          ;
  5359  0A64  09C4               	comf	scale@scl,f
  5360  0A65  0AC4               	incf	scale@scl,f
  5361  0A66                     l3696:
  5362                           
  5363                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 438:   if(scl>=11
      +                          0)
  5364  0A66  0844               	movf	scale@scl,w
  5365  0A67  3A80               	xorlw	128
  5366  0A68  3E12               	addlw	-238
  5367  0A69  1C03               	skipc
  5368  0A6A  2A6C               	goto	u5101
  5369  0A6B  2A6D               	goto	u5100
  5370  0A6C                     u5101:
  5371  0A6C  2B2B               	goto	l3704
  5372  0A6D                     u5100:
  5373  0A6D                     l3698:
  5374                           
  5375                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  5376  0A6D  3003               	movlw	3
  5377  0A6E  00BF               	movwf	??_scale
  5378  0A6F  083F               	movf	??_scale,w
  5379  0A70  00A8               	movwf	___bmul@multiplicand
  5380  0A71  0844               	movf	scale@scl,w
  5381  0A72  00F4               	movwf	___awmod@dividend
  5382  0A73  01F5               	clrf	___awmod@dividend+1
  5383  0A74  1BF4               	btfsc	___awmod@dividend,7
  5384  0A75  03F5               	decf	___awmod@dividend+1,f
  5385  0A76  3064               	movlw	100
  5386  0A77  00F2               	movwf	___awmod@divisor
  5387  0A78  3000               	movlw	0
  5388  0A79  00F3               	movwf	___awmod@divisor+1
  5389  0A7A  160A  118A  2151  120A  158A  	fcall	___awmod
  5390  0A7F  0873               	movf	?___awmod+1,w
  5391  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  5392  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  5393  0A82  00A3               	movwf	___awdiv@dividend+1
  5394  0A83  0872               	movf	?___awmod,w
  5395  0A84  00A2               	movwf	___awdiv@dividend
  5396  0A85  300A               	movlw	10
  5397  0A86  00A0               	movwf	___awdiv@divisor
  5398  0A87  3000               	movlw	0
  5399  0A88  00A1               	movwf	___awdiv@divisor+1
  5400  0A89  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5401  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  5402  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  5403  0A90  0820               	movf	?___awdiv,w
  5404  0A91  160A  158A  246B  120A  158A  	fcall	___bmul
  5405  0A96  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  5406  0A97  0084               	movwf	4
  5407  0A98  160A  118A  200A  120A  158A  	fcall	stringdir
  5408  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  5409  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  5410  0A9F  00AC               	movwf	___ftmul@f1
  5411  0AA0  160A  118A  200A  120A  158A  	fcall	stringdir
  5412  0AA5  00AD               	movwf	___ftmul@f1+1
  5413  0AA6  160A  118A  200A  120A  158A  	fcall	stringdir
  5414  0AAB  00AE               	movwf	___ftmul@f1+2
  5415  0AAC  3003               	movlw	3
  5416  0AAD  00C0               	movwf	??_scale+1
  5417  0AAE  0840               	movf	??_scale+1,w
  5418  0AAF  00A8               	movwf	___bmul@multiplicand
  5419  0AB0  0844               	movf	scale@scl,w
  5420  0AB1  00A2               	movwf	___awdiv@dividend
  5421  0AB2  01A3               	clrf	___awdiv@dividend+1
  5422  0AB3  1BA2               	btfsc	___awdiv@dividend,7
  5423  0AB4  03A3               	decf	___awdiv@dividend+1,f
  5424  0AB5  3064               	movlw	100
  5425  0AB6  00A0               	movwf	___awdiv@divisor
  5426  0AB7  3000               	movlw	0
  5427  0AB8  00A1               	movwf	___awdiv@divisor+1
  5428  0AB9  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5429  0ABE  1283               	bcf	3,5	;RP0=0, select bank0
  5430  0ABF  1303               	bcf	3,6	;RP1=0, select bank0
  5431  0AC0  0820               	movf	?___awdiv,w
  5432  0AC1  160A  158A  246B  120A  158A  	fcall	___bmul
  5433  0AC6  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  5434  0AC7  0084               	movwf	4
  5435  0AC8  160A  118A  200A  120A  158A  	fcall	stringdir
  5436  0ACD  1283               	bcf	3,5	;RP0=0, select bank0
  5437  0ACE  1303               	bcf	3,6	;RP1=0, select bank0
  5438  0ACF  00AF               	movwf	___ftmul@f2
  5439  0AD0  160A  118A  200A  120A  158A  	fcall	stringdir
  5440  0AD5  00B0               	movwf	___ftmul@f2+1
  5441  0AD6  160A  118A  200A  120A  158A  	fcall	stringdir
  5442  0ADB  00B1               	movwf	___ftmul@f2+2
  5443  0ADC  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5444  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  5445  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  5446  0AE3  082C               	movf	?___ftmul,w
  5447  0AE4  00C1               	movwf	_scale$1239
  5448  0AE5  082D               	movf	?___ftmul+1,w
  5449  0AE6  00C2               	movwf	_scale$1239+1
  5450  0AE7  082E               	movf	?___ftmul+2,w
  5451  0AE8  00C3               	movwf	_scale$1239+2
  5452                           
  5453                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  5454  0AE9  3003               	movlw	3
  5455  0AEA  00BF               	movwf	??_scale
  5456  0AEB  083F               	movf	??_scale,w
  5457  0AEC  00A8               	movwf	___bmul@multiplicand
  5458  0AED  0844               	movf	scale@scl,w
  5459  0AEE  00F4               	movwf	___awmod@dividend
  5460  0AEF  01F5               	clrf	___awmod@dividend+1
  5461  0AF0  1BF4               	btfsc	___awmod@dividend,7
  5462  0AF1  03F5               	decf	___awmod@dividend+1,f
  5463  0AF2  300A               	movlw	10
  5464  0AF3  00F2               	movwf	___awmod@divisor
  5465  0AF4  3000               	movlw	0
  5466  0AF5  00F3               	movwf	___awmod@divisor+1
  5467  0AF6  160A  118A  2151  120A  158A  	fcall	___awmod
  5468  0AFB  0872               	movf	?___awmod,w
  5469  0AFC  160A  158A  246B  120A  158A  	fcall	___bmul
  5470  0B01  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5471  0B02  0084               	movwf	4
  5472  0B03  160A  118A  200A  120A  158A  	fcall	stringdir
  5473  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  5474  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  5475  0B0A  00AC               	movwf	___ftmul@f1
  5476  0B0B  160A  118A  200A  120A  158A  	fcall	stringdir
  5477  0B10  00AD               	movwf	___ftmul@f1+1
  5478  0B11  160A  118A  200A  120A  158A  	fcall	stringdir
  5479  0B16  00AE               	movwf	___ftmul@f1+2
  5480  0B17  0841               	movf	_scale$1239,w
  5481  0B18  00AF               	movwf	___ftmul@f2
  5482  0B19  0842               	movf	_scale$1239+1,w
  5483  0B1A  00B0               	movwf	___ftmul@f2+1
  5484  0B1B  0843               	movf	_scale$1239+2,w
  5485  0B1C  00B1               	movwf	___ftmul@f2+2
  5486  0B1D  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5487  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  5488  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  5489  0B24  082C               	movf	?___ftmul,w
  5490  0B25  00BC               	movwf	?_scale
  5491  0B26  082D               	movf	?___ftmul+1,w
  5492  0B27  00BD               	movwf	?_scale+1
  5493  0B28  082E               	movf	?___ftmul+2,w
  5494  0B29  00BE               	movwf	?_scale+2
  5495  0B2A  2D17               	goto	l384
  5496  0B2B                     l3704:
  5497  0B2B  0844               	movf	scale@scl,w
  5498  0B2C  3A80               	xorlw	128
  5499  0B2D  3E75               	addlw	-139
  5500  0B2E  1C03               	skipc
  5501  0B2F  2B31               	goto	u5111
  5502  0B30  2B32               	goto	u5110
  5503  0B31                     u5111:
  5504  0B31  2B9E               	goto	l3710
  5505  0B32                     u5110:
  5506  0B32                     l3706:
  5507                           
  5508                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 441:    return _n
      +                          powers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5509  0B32  3003               	movlw	3
  5510  0B33  00BF               	movwf	??_scale
  5511  0B34  083F               	movf	??_scale,w
  5512  0B35  00A8               	movwf	___bmul@multiplicand
  5513  0B36  0844               	movf	scale@scl,w
  5514  0B37  00F4               	movwf	___awmod@dividend
  5515  0B38  01F5               	clrf	___awmod@dividend+1
  5516  0B39  1BF4               	btfsc	___awmod@dividend,7
  5517  0B3A  03F5               	decf	___awmod@dividend+1,f
  5518  0B3B  300A               	movlw	10
  5519  0B3C  00F2               	movwf	___awmod@divisor
  5520  0B3D  3000               	movlw	0
  5521  0B3E  00F3               	movwf	___awmod@divisor+1
  5522  0B3F  160A  118A  2151  120A  158A  	fcall	___awmod
  5523  0B44  0872               	movf	?___awmod,w
  5524  0B45  160A  158A  246B  120A  158A  	fcall	___bmul
  5525  0B4A  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5526  0B4B  0084               	movwf	4
  5527  0B4C  160A  118A  200A  120A  158A  	fcall	stringdir
  5528  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  5529  0B52  1303               	bcf	3,6	;RP1=0, select bank0
  5530  0B53  00AC               	movwf	___ftmul@f1
  5531  0B54  160A  118A  200A  120A  158A  	fcall	stringdir
  5532  0B59  00AD               	movwf	___ftmul@f1+1
  5533  0B5A  160A  118A  200A  120A  158A  	fcall	stringdir
  5534  0B5F  00AE               	movwf	___ftmul@f1+2
  5535  0B60  3003               	movlw	3
  5536  0B61  00C0               	movwf	??_scale+1
  5537  0B62  0840               	movf	??_scale+1,w
  5538  0B63  00A8               	movwf	___bmul@multiplicand
  5539  0B64  0844               	movf	scale@scl,w
  5540  0B65  00A2               	movwf	___awdiv@dividend
  5541  0B66  01A3               	clrf	___awdiv@dividend+1
  5542  0B67  1BA2               	btfsc	___awdiv@dividend,7
  5543  0B68  03A3               	decf	___awdiv@dividend+1,f
  5544  0B69  300A               	movlw	10
  5545  0B6A  00A0               	movwf	___awdiv@divisor
  5546  0B6B  3000               	movlw	0
  5547  0B6C  00A1               	movwf	___awdiv@divisor+1
  5548  0B6D  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5549  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  5550  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  5551  0B74  0820               	movf	?___awdiv,w
  5552  0B75  160A  158A  246B  120A  158A  	fcall	___bmul
  5553  0B7A  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  5554  0B7B  0084               	movwf	4
  5555  0B7C  160A  118A  200A  120A  158A  	fcall	stringdir
  5556  0B81  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0B82  1303               	bcf	3,6	;RP1=0, select bank0
  5558  0B83  00AF               	movwf	___ftmul@f2
  5559  0B84  160A  118A  200A  120A  158A  	fcall	stringdir
  5560  0B89  00B0               	movwf	___ftmul@f2+1
  5561  0B8A  160A  118A  200A  120A  158A  	fcall	stringdir
  5562  0B8F  00B1               	movwf	___ftmul@f2+2
  5563  0B90  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5564  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  5565  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  5566  0B97  082C               	movf	?___ftmul,w
  5567  0B98  00BC               	movwf	?_scale
  5568  0B99  082D               	movf	?___ftmul+1,w
  5569  0B9A  00BD               	movwf	?_scale+1
  5570  0B9B  082E               	movf	?___ftmul+2,w
  5571  0B9C  00BE               	movwf	?_scale+2
  5572  0B9D  2D17               	goto	l384
  5573  0B9E                     l3710:
  5574                           
  5575                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 442:   return _np
      +                          owers_[(unsigned char)scl];
  5576  0B9E  3003               	movlw	3
  5577  0B9F  00BF               	movwf	??_scale
  5578  0BA0  083F               	movf	??_scale,w
  5579  0BA1  00A8               	movwf	___bmul@multiplicand
  5580  0BA2  0844               	movf	scale@scl,w
  5581  0BA3  160A  158A  246B  120A  158A  	fcall	___bmul
  5582  0BA8  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5583  0BA9  0084               	movwf	4
  5584  0BAA  160A  118A  200A  120A  158A  	fcall	stringdir
  5585  0BAF  1283               	bcf	3,5	;RP0=0, select bank0
  5586  0BB0  1303               	bcf	3,6	;RP1=0, select bank0
  5587  0BB1  00BC               	movwf	?_scale
  5588  0BB2  160A  118A  200A  120A  158A  	fcall	stringdir
  5589  0BB7  00BD               	movwf	?_scale+1
  5590  0BB8  160A  118A  200A  120A  158A  	fcall	stringdir
  5591  0BBD  00BE               	movwf	?_scale+2
  5592  0BBE  2D17               	goto	l384
  5593  0BBF                     l3714:
  5594                           
  5595                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 444:  if(scl>=110
      +                          )
  5596  0BBF  0844               	movf	scale@scl,w
  5597  0BC0  3A80               	xorlw	128
  5598  0BC1  3E12               	addlw	-238
  5599  0BC2  1C03               	skipc
  5600  0BC3  2BC5               	goto	u5121
  5601  0BC4  2BC6               	goto	u5120
  5602  0BC5                     u5121:
  5603  0BC5  2C84               	goto	l3722
  5604  0BC6                     u5120:
  5605  0BC6                     l3716:
  5606                           
  5607                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5608  0BC6  3003               	movlw	3
  5609  0BC7  00BF               	movwf	??_scale
  5610  0BC8  083F               	movf	??_scale,w
  5611  0BC9  00A8               	movwf	___bmul@multiplicand
  5612  0BCA  0844               	movf	scale@scl,w
  5613  0BCB  00F4               	movwf	___awmod@dividend
  5614  0BCC  01F5               	clrf	___awmod@dividend+1
  5615  0BCD  1BF4               	btfsc	___awmod@dividend,7
  5616  0BCE  03F5               	decf	___awmod@dividend+1,f
  5617  0BCF  3064               	movlw	100
  5618  0BD0  00F2               	movwf	___awmod@divisor
  5619  0BD1  3000               	movlw	0
  5620  0BD2  00F3               	movwf	___awmod@divisor+1
  5621  0BD3  160A  118A  2151  120A  158A  	fcall	___awmod
  5622  0BD8  0873               	movf	?___awmod+1,w
  5623  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  5624  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  5625  0BDB  00A3               	movwf	___awdiv@dividend+1
  5626  0BDC  0872               	movf	?___awmod,w
  5627  0BDD  00A2               	movwf	___awdiv@dividend
  5628  0BDE  300A               	movlw	10
  5629  0BDF  00A0               	movwf	___awdiv@divisor
  5630  0BE0  3000               	movlw	0
  5631  0BE1  00A1               	movwf	___awdiv@divisor+1
  5632  0BE2  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5633  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  5634  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  5635  0BE9  0820               	movf	?___awdiv,w
  5636  0BEA  160A  158A  246B  120A  158A  	fcall	___bmul
  5637  0BEF  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  5638  0BF0  0084               	movwf	4
  5639  0BF1  160A  118A  200A  120A  158A  	fcall	stringdir
  5640  0BF6  1283               	bcf	3,5	;RP0=0, select bank0
  5641  0BF7  1303               	bcf	3,6	;RP1=0, select bank0
  5642  0BF8  00AC               	movwf	___ftmul@f1
  5643  0BF9  160A  118A  200A  120A  158A  	fcall	stringdir
  5644  0BFE  00AD               	movwf	___ftmul@f1+1
  5645  0BFF  160A  118A  200A  120A  158A  	fcall	stringdir
  5646  0C04  00AE               	movwf	___ftmul@f1+2
  5647  0C05  3003               	movlw	3
  5648  0C06  00C0               	movwf	??_scale+1
  5649  0C07  0840               	movf	??_scale+1,w
  5650  0C08  00A8               	movwf	___bmul@multiplicand
  5651  0C09  0844               	movf	scale@scl,w
  5652  0C0A  00A2               	movwf	___awdiv@dividend
  5653  0C0B  01A3               	clrf	___awdiv@dividend+1
  5654  0C0C  1BA2               	btfsc	___awdiv@dividend,7
  5655  0C0D  03A3               	decf	___awdiv@dividend+1,f
  5656  0C0E  3064               	movlw	100
  5657  0C0F  00A0               	movwf	___awdiv@divisor
  5658  0C10  3000               	movlw	0
  5659  0C11  00A1               	movwf	___awdiv@divisor+1
  5660  0C12  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5661  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  5662  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  5663  0C19  0820               	movf	?___awdiv,w
  5664  0C1A  160A  158A  246B  120A  158A  	fcall	___bmul
  5665  0C1F  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  5666  0C20  0084               	movwf	4
  5667  0C21  160A  118A  200A  120A  158A  	fcall	stringdir
  5668  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  5669  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  5670  0C28  00AF               	movwf	___ftmul@f2
  5671  0C29  160A  118A  200A  120A  158A  	fcall	stringdir
  5672  0C2E  00B0               	movwf	___ftmul@f2+1
  5673  0C2F  160A  118A  200A  120A  158A  	fcall	stringdir
  5674  0C34  00B1               	movwf	___ftmul@f2+2
  5675  0C35  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5676  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  5677  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  5678  0C3C  082C               	movf	?___ftmul,w
  5679  0C3D  00C1               	movwf	_scale$1239
  5680  0C3E  082D               	movf	?___ftmul+1,w
  5681  0C3F  00C2               	movwf	_scale$1239+1
  5682  0C40  082E               	movf	?___ftmul+2,w
  5683  0C41  00C3               	movwf	_scale$1239+2
  5684                           
  5685                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5686  0C42  3003               	movlw	3
  5687  0C43  00BF               	movwf	??_scale
  5688  0C44  083F               	movf	??_scale,w
  5689  0C45  00A8               	movwf	___bmul@multiplicand
  5690  0C46  0844               	movf	scale@scl,w
  5691  0C47  00F4               	movwf	___awmod@dividend
  5692  0C48  01F5               	clrf	___awmod@dividend+1
  5693  0C49  1BF4               	btfsc	___awmod@dividend,7
  5694  0C4A  03F5               	decf	___awmod@dividend+1,f
  5695  0C4B  300A               	movlw	10
  5696  0C4C  00F2               	movwf	___awmod@divisor
  5697  0C4D  3000               	movlw	0
  5698  0C4E  00F3               	movwf	___awmod@divisor+1
  5699  0C4F  160A  118A  2151  120A  158A  	fcall	___awmod
  5700  0C54  0872               	movf	?___awmod,w
  5701  0C55  160A  158A  246B  120A  158A  	fcall	___bmul
  5702  0C5A  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5703  0C5B  0084               	movwf	4
  5704  0C5C  160A  118A  200A  120A  158A  	fcall	stringdir
  5705  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  5706  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  5707  0C63  00AC               	movwf	___ftmul@f1
  5708  0C64  160A  118A  200A  120A  158A  	fcall	stringdir
  5709  0C69  00AD               	movwf	___ftmul@f1+1
  5710  0C6A  160A  118A  200A  120A  158A  	fcall	stringdir
  5711  0C6F  00AE               	movwf	___ftmul@f1+2
  5712  0C70  0841               	movf	_scale$1239,w
  5713  0C71  00AF               	movwf	___ftmul@f2
  5714  0C72  0842               	movf	_scale$1239+1,w
  5715  0C73  00B0               	movwf	___ftmul@f2+1
  5716  0C74  0843               	movf	_scale$1239+2,w
  5717  0C75  00B1               	movwf	___ftmul@f2+2
  5718  0C76  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5719  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  5720  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  5721  0C7D  082C               	movf	?___ftmul,w
  5722  0C7E  00BC               	movwf	?_scale
  5723  0C7F  082D               	movf	?___ftmul+1,w
  5724  0C80  00BD               	movwf	?_scale+1
  5725  0C81  082E               	movf	?___ftmul+2,w
  5726  0C82  00BE               	movwf	?_scale+2
  5727  0C83  2D17               	goto	l384
  5728  0C84                     l3722:
  5729  0C84  0844               	movf	scale@scl,w
  5730  0C85  3A80               	xorlw	128
  5731  0C86  3E75               	addlw	-139
  5732  0C87  1C03               	skipc
  5733  0C88  2C8A               	goto	u5131
  5734  0C89  2C8B               	goto	u5130
  5735  0C8A                     u5131:
  5736  0C8A  2CF7               	goto	l3728
  5737  0C8B                     u5130:
  5738  0C8B                     l3724:
  5739                           
  5740                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 447:   return _po
      +                          wers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
  5741  0C8B  3003               	movlw	3
  5742  0C8C  00BF               	movwf	??_scale
  5743  0C8D  083F               	movf	??_scale,w
  5744  0C8E  00A8               	movwf	___bmul@multiplicand
  5745  0C8F  0844               	movf	scale@scl,w
  5746  0C90  00F4               	movwf	___awmod@dividend
  5747  0C91  01F5               	clrf	___awmod@dividend+1
  5748  0C92  1BF4               	btfsc	___awmod@dividend,7
  5749  0C93  03F5               	decf	___awmod@dividend+1,f
  5750  0C94  300A               	movlw	10
  5751  0C95  00F2               	movwf	___awmod@divisor
  5752  0C96  3000               	movlw	0
  5753  0C97  00F3               	movwf	___awmod@divisor+1
  5754  0C98  160A  118A  2151  120A  158A  	fcall	___awmod
  5755  0C9D  0872               	movf	?___awmod,w
  5756  0C9E  160A  158A  246B  120A  158A  	fcall	___bmul
  5757  0CA3  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5758  0CA4  0084               	movwf	4
  5759  0CA5  160A  118A  200A  120A  158A  	fcall	stringdir
  5760  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  5761  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  5762  0CAC  00AC               	movwf	___ftmul@f1
  5763  0CAD  160A  118A  200A  120A  158A  	fcall	stringdir
  5764  0CB2  00AD               	movwf	___ftmul@f1+1
  5765  0CB3  160A  118A  200A  120A  158A  	fcall	stringdir
  5766  0CB8  00AE               	movwf	___ftmul@f1+2
  5767  0CB9  3003               	movlw	3
  5768  0CBA  00C0               	movwf	??_scale+1
  5769  0CBB  0840               	movf	??_scale+1,w
  5770  0CBC  00A8               	movwf	___bmul@multiplicand
  5771  0CBD  0844               	movf	scale@scl,w
  5772  0CBE  00A2               	movwf	___awdiv@dividend
  5773  0CBF  01A3               	clrf	___awdiv@dividend+1
  5774  0CC0  1BA2               	btfsc	___awdiv@dividend,7
  5775  0CC1  03A3               	decf	___awdiv@dividend+1,f
  5776  0CC2  300A               	movlw	10
  5777  0CC3  00A0               	movwf	___awdiv@divisor
  5778  0CC4  3000               	movlw	0
  5779  0CC5  00A1               	movwf	___awdiv@divisor+1
  5780  0CC6  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5781  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  5782  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  5783  0CCD  0820               	movf	?___awdiv,w
  5784  0CCE  160A  158A  246B  120A  158A  	fcall	___bmul
  5785  0CD3  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  5786  0CD4  0084               	movwf	4
  5787  0CD5  160A  118A  200A  120A  158A  	fcall	stringdir
  5788  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  5789  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  5790  0CDC  00AF               	movwf	___ftmul@f2
  5791  0CDD  160A  118A  200A  120A  158A  	fcall	stringdir
  5792  0CE2  00B0               	movwf	___ftmul@f2+1
  5793  0CE3  160A  118A  200A  120A  158A  	fcall	stringdir
  5794  0CE8  00B1               	movwf	___ftmul@f2+2
  5795  0CE9  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5796  0CEE  1283               	bcf	3,5	;RP0=0, select bank0
  5797  0CEF  1303               	bcf	3,6	;RP1=0, select bank0
  5798  0CF0  082C               	movf	?___ftmul,w
  5799  0CF1  00BC               	movwf	?_scale
  5800  0CF2  082D               	movf	?___ftmul+1,w
  5801  0CF3  00BD               	movwf	?_scale+1
  5802  0CF4  082E               	movf	?___ftmul+2,w
  5803  0CF5  00BE               	movwf	?_scale+2
  5804  0CF6  2D17               	goto	l384
  5805  0CF7                     l3728:
  5806                           
  5807                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 448:  return _pow
      +                          ers_[(unsigned char)scl];
  5808  0CF7  3003               	movlw	3
  5809  0CF8  00BF               	movwf	??_scale
  5810  0CF9  083F               	movf	??_scale,w
  5811  0CFA  00A8               	movwf	___bmul@multiplicand
  5812  0CFB  0844               	movf	scale@scl,w
  5813  0CFC  160A  158A  246B  120A  158A  	fcall	___bmul
  5814  0D01  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5815  0D02  0084               	movwf	4
  5816  0D03  160A  118A  200A  120A  158A  	fcall	stringdir
  5817  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  5818  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  5819  0D0A  00BC               	movwf	?_scale
  5820  0D0B  160A  118A  200A  120A  158A  	fcall	stringdir
  5821  0D10  00BD               	movwf	?_scale+1
  5822  0D11  160A  118A  200A  120A  158A  	fcall	stringdir
  5823  0D16  00BE               	movwf	?_scale+2
  5824  0D17                     l384:
  5825  0D17  0008               	return
  5826  0D18                     __end_of_scale:
  5827                           
  5828                           	psect	text29
  5829  1151                     __ptext29:	
  5830 ;; *************** function ___awmod *****************
  5831 ;; Defined at:
  5832 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;  divisor         2    2[COMMON] int 
  5835 ;;  dividend        2    4[COMMON] int 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  sign            1    8[COMMON] unsigned char 
  5838 ;;  counter         1    7[COMMON] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  2    2[COMMON] int 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5848 ;;      Params:         4       0       0       0       0
  5849 ;;      Locals:         2       0       0       0       0
  5850 ;;      Temps:          1       0       0       0       0
  5851 ;;      Totals:         7       0       0       0       0
  5852 ;;Total ram usage:        7 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    1
  5855 ;; This function calls:
  5856 ;;		Nothing
  5857 ;; This function is called by:
  5858 ;;		_scale
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           
  5863                           ;psect for function ___awmod
  5864  1151                     ___awmod:
  5865  1151                     l2320:	
  5866                           ;incstack = 0
  5867                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5868                           
  5869  1151  01F8               	clrf	___awmod@sign
  5870  1152                     l2322:
  5871  1152  1FF5               	btfss	___awmod@dividend+1,7
  5872  1153  2955               	goto	u2501
  5873  1154  2956               	goto	u2500
  5874  1155                     u2501:
  5875  1155  295D               	goto	l2328
  5876  1156                     u2500:
  5877  1156                     l2324:
  5878  1156  09F4               	comf	___awmod@dividend,f
  5879  1157  09F5               	comf	___awmod@dividend+1,f
  5880  1158  0AF4               	incf	___awmod@dividend,f
  5881  1159  1903               	skipnz
  5882  115A  0AF5               	incf	___awmod@dividend+1,f
  5883  115B                     l2326:
  5884  115B  01F8               	clrf	___awmod@sign
  5885  115C  0AF8               	incf	___awmod@sign,f
  5886  115D                     l2328:
  5887  115D  1FF3               	btfss	___awmod@divisor+1,7
  5888  115E  2960               	goto	u2511
  5889  115F  2961               	goto	u2510
  5890  1160                     u2511:
  5891  1160  2966               	goto	l2332
  5892  1161                     u2510:
  5893  1161                     l2330:
  5894  1161  09F2               	comf	___awmod@divisor,f
  5895  1162  09F3               	comf	___awmod@divisor+1,f
  5896  1163  0AF2               	incf	___awmod@divisor,f
  5897  1164  1903               	skipnz
  5898  1165  0AF3               	incf	___awmod@divisor+1,f
  5899  1166                     l2332:
  5900  1166  0872               	movf	___awmod@divisor,w
  5901  1167  0473               	iorwf	___awmod@divisor+1,w
  5902  1168  1903               	btfsc	3,2
  5903  1169  296B               	goto	u2521
  5904  116A  296C               	goto	u2520
  5905  116B                     u2521:
  5906  116B  299B               	goto	l2350
  5907  116C                     u2520:
  5908  116C                     l2334:
  5909  116C  01F7               	clrf	___awmod@counter
  5910  116D  0AF7               	incf	___awmod@counter,f
  5911  116E  297A               	goto	l2340
  5912  116F                     l2336:
  5913  116F  3001               	movlw	1
  5914  1170                     u2535:
  5915  1170  1003               	clrc
  5916  1171  0DF2               	rlf	___awmod@divisor,f
  5917  1172  0DF3               	rlf	___awmod@divisor+1,f
  5918  1173  3EFF               	addlw	-1
  5919  1174  1D03               	skipz
  5920  1175  2970               	goto	u2535
  5921  1176                     l2338:
  5922  1176  3001               	movlw	1
  5923  1177  00F6               	movwf	??___awmod
  5924  1178  0876               	movf	??___awmod,w
  5925  1179  07F7               	addwf	___awmod@counter,f
  5926  117A                     l2340:
  5927  117A  1FF3               	btfss	___awmod@divisor+1,7
  5928  117B  297D               	goto	u2541
  5929  117C  297E               	goto	u2540
  5930  117D                     u2541:
  5931  117D  296F               	goto	l2336
  5932  117E                     u2540:
  5933  117E                     l2342:
  5934  117E  0873               	movf	___awmod@divisor+1,w
  5935  117F  0275               	subwf	___awmod@dividend+1,w
  5936  1180  1D03               	skipz
  5937  1181  2984               	goto	u2555
  5938  1182  0872               	movf	___awmod@divisor,w
  5939  1183  0274               	subwf	___awmod@dividend,w
  5940  1184                     u2555:
  5941  1184  1C03               	skipc
  5942  1185  2987               	goto	u2551
  5943  1186  2988               	goto	u2550
  5944  1187                     u2551:
  5945  1187  298E               	goto	l2346
  5946  1188                     u2550:
  5947  1188                     l2344:
  5948  1188  0872               	movf	___awmod@divisor,w
  5949  1189  02F4               	subwf	___awmod@dividend,f
  5950  118A  0873               	movf	___awmod@divisor+1,w
  5951  118B  1C03               	skipc
  5952  118C  03F5               	decf	___awmod@dividend+1,f
  5953  118D  02F5               	subwf	___awmod@dividend+1,f
  5954  118E                     l2346:
  5955  118E  3001               	movlw	1
  5956  118F                     u2565:
  5957  118F  1003               	clrc
  5958  1190  0CF3               	rrf	___awmod@divisor+1,f
  5959  1191  0CF2               	rrf	___awmod@divisor,f
  5960  1192  3EFF               	addlw	-1
  5961  1193  1D03               	skipz
  5962  1194  298F               	goto	u2565
  5963  1195                     l2348:
  5964  1195  3001               	movlw	1
  5965  1196  02F7               	subwf	___awmod@counter,f
  5966  1197  1D03               	btfss	3,2
  5967  1198  299A               	goto	u2571
  5968  1199  299B               	goto	u2570
  5969  119A                     u2571:
  5970  119A  297E               	goto	l2342
  5971  119B                     u2570:
  5972  119B                     l2350:
  5973  119B  0878               	movf	___awmod@sign,w
  5974  119C  1903               	btfsc	3,2
  5975  119D  299F               	goto	u2581
  5976  119E  29A0               	goto	u2580
  5977  119F                     u2581:
  5978  119F  29A5               	goto	l2354
  5979  11A0                     u2580:
  5980  11A0                     l2352:
  5981  11A0  09F4               	comf	___awmod@dividend,f
  5982  11A1  09F5               	comf	___awmod@dividend+1,f
  5983  11A2  0AF4               	incf	___awmod@dividend,f
  5984  11A3  1903               	skipnz
  5985  11A4  0AF5               	incf	___awmod@dividend+1,f
  5986  11A5                     l2354:
  5987  11A5  0875               	movf	___awmod@dividend+1,w
  5988  11A6  00F3               	movwf	?___awmod+1
  5989  11A7  0874               	movf	___awmod@dividend,w
  5990  11A8  00F2               	movwf	?___awmod
  5991  11A9                     l676:
  5992  11A9  0008               	return
  5993  11AA                     __end_of___awmod:
  5994                           
  5995                           	psect	text30
  5996  12CC                     __ptext30:	
  5997 ;; *************** function ___awdiv *****************
  5998 ;; Defined at:
  5999 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  divisor         2    0[BANK0 ] int 
  6002 ;;  dividend        2    2[BANK0 ] int 
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;  quotient        2    6[BANK0 ] int 
  6005 ;;  sign            1    5[BANK0 ] unsigned char 
  6006 ;;  counter         1    4[BANK0 ] unsigned char 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  2    0[BANK0 ] int 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6016 ;;      Params:         0       4       0       0       0
  6017 ;;      Locals:         0       4       0       0       0
  6018 ;;      Temps:          1       0       0       0       0
  6019 ;;      Totals:         1       8       0       0       0
  6020 ;;Total ram usage:        9 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    1
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_Mapeo_M
  6027 ;;		_scale
  6028 ;;		_sprintf
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           
  6033                           ;psect for function ___awdiv
  6034  12CC                     ___awdiv:
  6035  12CC                     l2276:	
  6036                           ;incstack = 0
  6037                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6038                           
  6039  12CC  1283               	bcf	3,5	;RP0=0, select bank0
  6040  12CD  1303               	bcf	3,6	;RP1=0, select bank0
  6041  12CE  01A5               	clrf	___awdiv@sign
  6042  12CF                     l2278:
  6043  12CF  1FA1               	btfss	___awdiv@divisor+1,7
  6044  12D0  2AD2               	goto	u2401
  6045  12D1  2AD3               	goto	u2400
  6046  12D2                     u2401:
  6047  12D2  2ADA               	goto	l2284
  6048  12D3                     u2400:
  6049  12D3                     l2280:
  6050  12D3  09A0               	comf	___awdiv@divisor,f
  6051  12D4  09A1               	comf	___awdiv@divisor+1,f
  6052  12D5  0AA0               	incf	___awdiv@divisor,f
  6053  12D6  1903               	skipnz
  6054  12D7  0AA1               	incf	___awdiv@divisor+1,f
  6055  12D8                     l2282:
  6056  12D8  01A5               	clrf	___awdiv@sign
  6057  12D9  0AA5               	incf	___awdiv@sign,f
  6058  12DA                     l2284:
  6059  12DA  1FA3               	btfss	___awdiv@dividend+1,7
  6060  12DB  2ADD               	goto	u2411
  6061  12DC  2ADE               	goto	u2410
  6062  12DD                     u2411:
  6063  12DD  2AE7               	goto	l2290
  6064  12DE                     u2410:
  6065  12DE                     l2286:
  6066  12DE  09A2               	comf	___awdiv@dividend,f
  6067  12DF  09A3               	comf	___awdiv@dividend+1,f
  6068  12E0  0AA2               	incf	___awdiv@dividend,f
  6069  12E1  1903               	skipnz
  6070  12E2  0AA3               	incf	___awdiv@dividend+1,f
  6071  12E3                     l2288:
  6072  12E3  3001               	movlw	1
  6073  12E4  00F9               	movwf	??___awdiv
  6074  12E5  0879               	movf	??___awdiv,w
  6075  12E6  06A5               	xorwf	___awdiv@sign,f
  6076  12E7                     l2290:
  6077  12E7  01A6               	clrf	___awdiv@quotient
  6078  12E8  01A7               	clrf	___awdiv@quotient+1
  6079  12E9                     l2292:
  6080  12E9  0820               	movf	___awdiv@divisor,w
  6081  12EA  0421               	iorwf	___awdiv@divisor+1,w
  6082  12EB  1903               	btfsc	3,2
  6083  12EC  2AEE               	goto	u2421
  6084  12ED  2AEF               	goto	u2420
  6085  12EE                     u2421:
  6086  12EE  2B26               	goto	l2312
  6087  12EF                     u2420:
  6088  12EF                     l2294:
  6089  12EF  01A4               	clrf	___awdiv@counter
  6090  12F0  0AA4               	incf	___awdiv@counter,f
  6091  12F1  2AFD               	goto	l2300
  6092  12F2                     l2296:
  6093  12F2  3001               	movlw	1
  6094  12F3                     u2435:
  6095  12F3  1003               	clrc
  6096  12F4  0DA0               	rlf	___awdiv@divisor,f
  6097  12F5  0DA1               	rlf	___awdiv@divisor+1,f
  6098  12F6  3EFF               	addlw	-1
  6099  12F7  1D03               	skipz
  6100  12F8  2AF3               	goto	u2435
  6101  12F9                     l2298:
  6102  12F9  3001               	movlw	1
  6103  12FA  00F9               	movwf	??___awdiv
  6104  12FB  0879               	movf	??___awdiv,w
  6105  12FC  07A4               	addwf	___awdiv@counter,f
  6106  12FD                     l2300:
  6107  12FD  1FA1               	btfss	___awdiv@divisor+1,7
  6108  12FE  2B00               	goto	u2441
  6109  12FF  2B01               	goto	u2440
  6110  1300                     u2441:
  6111  1300  2AF2               	goto	l2296
  6112  1301                     u2440:
  6113  1301                     l2302:
  6114  1301  3001               	movlw	1
  6115  1302                     u2455:
  6116  1302  1003               	clrc
  6117  1303  0DA6               	rlf	___awdiv@quotient,f
  6118  1304  0DA7               	rlf	___awdiv@quotient+1,f
  6119  1305  3EFF               	addlw	-1
  6120  1306  1D03               	skipz
  6121  1307  2B02               	goto	u2455
  6122  1308  0821               	movf	___awdiv@divisor+1,w
  6123  1309  0223               	subwf	___awdiv@dividend+1,w
  6124  130A  1D03               	skipz
  6125  130B  2B0E               	goto	u2465
  6126  130C  0820               	movf	___awdiv@divisor,w
  6127  130D  0222               	subwf	___awdiv@dividend,w
  6128  130E                     u2465:
  6129  130E  1C03               	skipc
  6130  130F  2B11               	goto	u2461
  6131  1310  2B12               	goto	u2460
  6132  1311                     u2461:
  6133  1311  2B19               	goto	l2308
  6134  1312                     u2460:
  6135  1312                     l2304:
  6136  1312  0820               	movf	___awdiv@divisor,w
  6137  1313  02A2               	subwf	___awdiv@dividend,f
  6138  1314  0821               	movf	___awdiv@divisor+1,w
  6139  1315  1C03               	skipc
  6140  1316  03A3               	decf	___awdiv@dividend+1,f
  6141  1317  02A3               	subwf	___awdiv@dividend+1,f
  6142  1318                     l2306:
  6143  1318  1426               	bsf	___awdiv@quotient,0
  6144  1319                     l2308:
  6145  1319  3001               	movlw	1
  6146  131A                     u2475:
  6147  131A  1003               	clrc
  6148  131B  0CA1               	rrf	___awdiv@divisor+1,f
  6149  131C  0CA0               	rrf	___awdiv@divisor,f
  6150  131D  3EFF               	addlw	-1
  6151  131E  1D03               	skipz
  6152  131F  2B1A               	goto	u2475
  6153  1320                     l2310:
  6154  1320  3001               	movlw	1
  6155  1321  02A4               	subwf	___awdiv@counter,f
  6156  1322  1D03               	btfss	3,2
  6157  1323  2B25               	goto	u2481
  6158  1324  2B26               	goto	u2480
  6159  1325                     u2481:
  6160  1325  2B01               	goto	l2302
  6161  1326                     u2480:
  6162  1326                     l2312:
  6163  1326  0825               	movf	___awdiv@sign,w
  6164  1327  1903               	btfsc	3,2
  6165  1328  2B2A               	goto	u2491
  6166  1329  2B2B               	goto	u2490
  6167  132A                     u2491:
  6168  132A  2B30               	goto	l2316
  6169  132B                     u2490:
  6170  132B                     l2314:
  6171  132B  09A6               	comf	___awdiv@quotient,f
  6172  132C  09A7               	comf	___awdiv@quotient+1,f
  6173  132D  0AA6               	incf	___awdiv@quotient,f
  6174  132E  1903               	skipnz
  6175  132F  0AA7               	incf	___awdiv@quotient+1,f
  6176  1330                     l2316:
  6177  1330  0827               	movf	___awdiv@quotient+1,w
  6178  1331  00A1               	movwf	?___awdiv+1
  6179  1332  0826               	movf	___awdiv@quotient,w
  6180  1333  00A0               	movwf	?___awdiv
  6181  1334                     l663:
  6182  1334  0008               	return
  6183  1335                     __end_of___awdiv:
  6184                           
  6185                           	psect	text31
  6186  1C2D                     __ptext31:	
  6187 ;; *************** function _isdigit *****************
  6188 ;; Defined at:
  6189 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  c               1    wreg     unsigned char 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  c               1    3[COMMON] unsigned char 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;		None               void
  6196 ;; Registers used:
  6197 ;;		wreg, status,2, status,0
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6203 ;;      Params:         0       0       0       0       0
  6204 ;;      Locals:         2       0       0       0       0
  6205 ;;      Temps:          0       0       0       0       0
  6206 ;;      Totals:         2       0       0       0       0
  6207 ;;Total ram usage:        2 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    1
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		_sprintf
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _isdigit
  6219  1C2D                     _isdigit:
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6223                           ;isdigit@c stored from wreg
  6224  1C2D  00F3               	movwf	isdigit@c
  6225  1C2E                     l2614:
  6226  1C2E  01F2               	clrf	_isdigit$1034
  6227  1C2F                     l2616:
  6228  1C2F  303A               	movlw	58
  6229  1C30  0273               	subwf	isdigit@c,w
  6230  1C31  1803               	skipnc
  6231  1C32  2C34               	goto	u3191
  6232  1C33  2C35               	goto	u3190
  6233  1C34                     u3191:
  6234  1C34  2C3D               	goto	l2622
  6235  1C35                     u3190:
  6236  1C35                     l2618:
  6237  1C35  3030               	movlw	48
  6238  1C36  0273               	subwf	isdigit@c,w
  6239  1C37  1C03               	skipc
  6240  1C38  2C3A               	goto	u3201
  6241  1C39  2C3B               	goto	u3200
  6242  1C3A                     u3201:
  6243  1C3A  2C3D               	goto	l2622
  6244  1C3B                     u3200:
  6245  1C3B                     l2620:
  6246  1C3B  01F2               	clrf	_isdigit$1034
  6247  1C3C  0AF2               	incf	_isdigit$1034,f
  6248  1C3D                     l2622:
  6249  1C3D  0C72               	rrf	_isdigit$1034,w
  6250  1C3E                     l942:
  6251  1C3E  0008               	return
  6252  1C3F                     __end_of_isdigit:
  6253                           
  6254                           	psect	text32
  6255  08B4                     __ptext32:	
  6256 ;; *************** function _fround *****************
  6257 ;; Defined at:
  6258 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  prec            1    wreg     unsigned char 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  prec            1   43[BANK0 ] unsigned char 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  3   28[BANK0 ] unsigned char 
  6265 ;; Registers used:
  6266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6272 ;;      Params:         0       3       0       0       0
  6273 ;;      Locals:         0       7       0       0       0
  6274 ;;      Temps:          0       6       0       0       0
  6275 ;;      Totals:         0      16       0       0       0
  6276 ;;Total ram usage:       16 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    3
  6279 ;; This function calls:
  6280 ;;		___bmul
  6281 ;;		___ftmul
  6282 ;;		___lwdiv
  6283 ;;		___lwmod
  6284 ;; This function is called by:
  6285 ;;		_sprintf
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           
  6290                           ;psect for function _fround
  6291  08B4                     _fround:
  6292                           
  6293                           ;incstack = 0
  6294                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6295                           ;fround@prec stored from wreg
  6296  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  6297  08B5  1303               	bcf	3,6	;RP1=0, select bank0
  6298  08B6  00CB               	movwf	fround@prec
  6299  08B7                     l3670:
  6300                           
  6301                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 417: fround(unsig
      +                          ned char prec);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 418
      +                          : {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 421:  if(prec>
      +                          =110)
  6302  08B7  306E               	movlw	110
  6303  08B8  024B               	subwf	fround@prec,w
  6304  08B9  1C03               	skipc
  6305  08BA  28BC               	goto	u5071
  6306  08BB  28BD               	goto	u5070
  6307  08BC                     u5071:
  6308  08BC  299A               	goto	l3680
  6309  08BD                     u5070:
  6310  08BD                     l3672:
  6311                           
  6312                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6313  08BD  3003               	movlw	3
  6314  08BE  00BF               	movwf	??_fround
  6315  08BF  083F               	movf	??_fround,w
  6316  08C0  00A8               	movwf	___bmul@multiplicand
  6317  08C1  084B               	movf	fround@prec,w
  6318  08C2  00C0               	movwf	??_fround+1
  6319  08C3  01C1               	clrf	??_fround+2
  6320  08C4  0840               	movf	??_fround+1,w
  6321  08C5  00F4               	movwf	___lwmod@dividend
  6322  08C6  0841               	movf	??_fround+2,w
  6323  08C7  00F5               	movwf	___lwmod@dividend+1
  6324  08C8  3064               	movlw	100
  6325  08C9  00F2               	movwf	___lwmod@divisor
  6326  08CA  3000               	movlw	0
  6327  08CB  00F3               	movwf	___lwmod@divisor+1
  6328  08CC  160A  158A  2617  120A  158A  	fcall	___lwmod
  6329  08D1  0873               	movf	?___lwmod+1,w
  6330  08D2  1283               	bcf	3,5	;RP0=0, select bank0
  6331  08D3  1303               	bcf	3,6	;RP1=0, select bank0
  6332  08D4  00A3               	movwf	___lwdiv@dividend+1
  6333  08D5  0872               	movf	?___lwmod,w
  6334  08D6  00A2               	movwf	___lwdiv@dividend
  6335  08D7  300A               	movlw	10
  6336  08D8  00A0               	movwf	___lwdiv@divisor
  6337  08D9  3000               	movlw	0
  6338  08DA  00A1               	movwf	___lwdiv@divisor+1
  6339  08DB  160A  158A  268E  120A  158A  	fcall	___lwdiv
  6340  08E0  1283               	bcf	3,5	;RP0=0, select bank0
  6341  08E1  1303               	bcf	3,6	;RP1=0, select bank0
  6342  08E2  0820               	movf	?___lwdiv,w
  6343  08E3  160A  158A  246B  120A  158A  	fcall	___bmul
  6344  08E8  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  6345  08E9  0084               	movwf	4
  6346  08EA  160A  118A  200A  120A  158A  	fcall	stringdir
  6347  08EF  1283               	bcf	3,5	;RP0=0, select bank0
  6348  08F0  1303               	bcf	3,6	;RP1=0, select bank0
  6349  08F1  00AC               	movwf	___ftmul@f1
  6350  08F2  160A  118A  200A  120A  158A  	fcall	stringdir
  6351  08F7  00AD               	movwf	___ftmul@f1+1
  6352  08F8  160A  118A  200A  120A  158A  	fcall	stringdir
  6353  08FD  00AE               	movwf	___ftmul@f1+2
  6354  08FE  3003               	movlw	3
  6355  08FF  00C2               	movwf	??_fround+3
  6356  0900  0842               	movf	??_fround+3,w
  6357  0901  00A8               	movwf	___bmul@multiplicand
  6358  0902  084B               	movf	fround@prec,w
  6359  0903  00C3               	movwf	??_fround+4
  6360  0904  01C4               	clrf	??_fround+5
  6361  0905  0843               	movf	??_fround+4,w
  6362  0906  00A2               	movwf	___lwdiv@dividend
  6363  0907  0844               	movf	??_fround+5,w
  6364  0908  00A3               	movwf	___lwdiv@dividend+1
  6365  0909  3064               	movlw	100
  6366  090A  00A0               	movwf	___lwdiv@divisor
  6367  090B  3000               	movlw	0
  6368  090C  00A1               	movwf	___lwdiv@divisor+1
  6369  090D  160A  158A  268E  120A  158A  	fcall	___lwdiv
  6370  0912  1283               	bcf	3,5	;RP0=0, select bank0
  6371  0913  1303               	bcf	3,6	;RP1=0, select bank0
  6372  0914  0820               	movf	?___lwdiv,w
  6373  0915  160A  158A  246B  120A  158A  	fcall	___bmul
  6374  091A  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  6375  091B  0084               	movwf	4
  6376  091C  160A  118A  200A  120A  158A  	fcall	stringdir
  6377  0921  1283               	bcf	3,5	;RP0=0, select bank0
  6378  0922  1303               	bcf	3,6	;RP1=0, select bank0
  6379  0923  00AF               	movwf	___ftmul@f2
  6380  0924  160A  118A  200A  120A  158A  	fcall	stringdir
  6381  0929  00B0               	movwf	___ftmul@f2+1
  6382  092A  160A  118A  200A  120A  158A  	fcall	stringdir
  6383  092F  00B1               	movwf	___ftmul@f2+2
  6384  0930  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6385  0935  1283               	bcf	3,5	;RP0=0, select bank0
  6386  0936  1303               	bcf	3,6	;RP1=0, select bank0
  6387  0937  082C               	movf	?___ftmul,w
  6388  0938  00C8               	movwf	_fround$1237
  6389  0939  082D               	movf	?___ftmul+1,w
  6390  093A  00C9               	movwf	_fround$1237+1
  6391  093B  082E               	movf	?___ftmul+2,w
  6392  093C  00CA               	movwf	_fround$1237+2
  6393                           
  6394                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6395  093D  3003               	movlw	3
  6396  093E  00BF               	movwf	??_fround
  6397  093F  083F               	movf	??_fround,w
  6398  0940  00A8               	movwf	___bmul@multiplicand
  6399  0941  084B               	movf	fround@prec,w
  6400  0942  00C0               	movwf	??_fround+1
  6401  0943  01C1               	clrf	??_fround+2
  6402  0944  0840               	movf	??_fround+1,w
  6403  0945  00F4               	movwf	___lwmod@dividend
  6404  0946  0841               	movf	??_fround+2,w
  6405  0947  00F5               	movwf	___lwmod@dividend+1
  6406  0948  300A               	movlw	10
  6407  0949  00F2               	movwf	___lwmod@divisor
  6408  094A  3000               	movlw	0
  6409  094B  00F3               	movwf	___lwmod@divisor+1
  6410  094C  160A  158A  2617  120A  158A  	fcall	___lwmod
  6411  0951  0872               	movf	?___lwmod,w
  6412  0952  160A  158A  246B  120A  158A  	fcall	___bmul
  6413  0957  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6414  0958  0084               	movwf	4
  6415  0959  160A  118A  200A  120A  158A  	fcall	stringdir
  6416  095E  1283               	bcf	3,5	;RP0=0, select bank0
  6417  095F  1303               	bcf	3,6	;RP1=0, select bank0
  6418  0960  00AC               	movwf	___ftmul@f1
  6419  0961  160A  118A  200A  120A  158A  	fcall	stringdir
  6420  0966  00AD               	movwf	___ftmul@f1+1
  6421  0967  160A  118A  200A  120A  158A  	fcall	stringdir
  6422  096C  00AE               	movwf	___ftmul@f1+2
  6423  096D  0848               	movf	_fround$1237,w
  6424  096E  00AF               	movwf	___ftmul@f2
  6425  096F  0849               	movf	_fround$1237+1,w
  6426  0970  00B0               	movwf	___ftmul@f2+1
  6427  0971  084A               	movf	_fround$1237+2,w
  6428  0972  00B1               	movwf	___ftmul@f2+2
  6429  0973  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6430  0978  1283               	bcf	3,5	;RP0=0, select bank0
  6431  0979  1303               	bcf	3,6	;RP1=0, select bank0
  6432  097A  082C               	movf	?___ftmul,w
  6433  097B  00C5               	movwf	_fround$1238
  6434  097C  082D               	movf	?___ftmul+1,w
  6435  097D  00C6               	movwf	_fround$1238+1
  6436  097E  082E               	movf	?___ftmul+2,w
  6437  097F  00C7               	movwf	_fround$1238+2
  6438  0980                     l3674:
  6439                           
  6440                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6441  0980  3000               	movlw	0
  6442  0981  00AC               	movwf	___ftmul@f1
  6443  0982  3000               	movlw	0
  6444  0983  00AD               	movwf	___ftmul@f1+1
  6445  0984  303F               	movlw	63
  6446  0985  00AE               	movwf	___ftmul@f1+2
  6447  0986  0845               	movf	_fround$1238,w
  6448  0987  00AF               	movwf	___ftmul@f2
  6449  0988  0846               	movf	_fround$1238+1,w
  6450  0989  00B0               	movwf	___ftmul@f2+1
  6451  098A  0847               	movf	_fround$1238+2,w
  6452  098B  00B1               	movwf	___ftmul@f2+2
  6453  098C  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6454  0991  1283               	bcf	3,5	;RP0=0, select bank0
  6455  0992  1303               	bcf	3,6	;RP1=0, select bank0
  6456  0993  082C               	movf	?___ftmul,w
  6457  0994  00BC               	movwf	?_fround
  6458  0995  082D               	movf	?___ftmul+1,w
  6459  0996  00BD               	movwf	?_fround+1
  6460  0997  082E               	movf	?___ftmul+2,w
  6461  0998  00BE               	movwf	?_fround+2
  6462  0999  2A5C               	goto	l377
  6463  099A                     l3680:
  6464  099A  300B               	movlw	11
  6465  099B  024B               	subwf	fround@prec,w
  6466  099C  1C03               	skipc
  6467  099D  299F               	goto	u5081
  6468  099E  29A0               	goto	u5080
  6469  099F                     u5081:
  6470  099F  2A29               	goto	l3688
  6471  09A0                     u5080:
  6472  09A0                     l3682:
  6473                           
  6474                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6475  09A0  3003               	movlw	3
  6476  09A1  00BF               	movwf	??_fround
  6477  09A2  083F               	movf	??_fround,w
  6478  09A3  00A8               	movwf	___bmul@multiplicand
  6479  09A4  084B               	movf	fround@prec,w
  6480  09A5  00C0               	movwf	??_fround+1
  6481  09A6  01C1               	clrf	??_fround+2
  6482  09A7  0840               	movf	??_fround+1,w
  6483  09A8  00F4               	movwf	___lwmod@dividend
  6484  09A9  0841               	movf	??_fround+2,w
  6485  09AA  00F5               	movwf	___lwmod@dividend+1
  6486  09AB  300A               	movlw	10
  6487  09AC  00F2               	movwf	___lwmod@divisor
  6488  09AD  3000               	movlw	0
  6489  09AE  00F3               	movwf	___lwmod@divisor+1
  6490  09AF  160A  158A  2617  120A  158A  	fcall	___lwmod
  6491  09B4  0872               	movf	?___lwmod,w
  6492  09B5  160A  158A  246B  120A  158A  	fcall	___bmul
  6493  09BA  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6494  09BB  0084               	movwf	4
  6495  09BC  160A  118A  200A  120A  158A  	fcall	stringdir
  6496  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  6497  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  6498  09C3  00AC               	movwf	___ftmul@f1
  6499  09C4  160A  118A  200A  120A  158A  	fcall	stringdir
  6500  09C9  00AD               	movwf	___ftmul@f1+1
  6501  09CA  160A  118A  200A  120A  158A  	fcall	stringdir
  6502  09CF  00AE               	movwf	___ftmul@f1+2
  6503  09D0  3003               	movlw	3
  6504  09D1  00C2               	movwf	??_fround+3
  6505  09D2  0842               	movf	??_fround+3,w
  6506  09D3  00A8               	movwf	___bmul@multiplicand
  6507  09D4  084B               	movf	fround@prec,w
  6508  09D5  00C3               	movwf	??_fround+4
  6509  09D6  01C4               	clrf	??_fround+5
  6510  09D7  0843               	movf	??_fround+4,w
  6511  09D8  00A2               	movwf	___lwdiv@dividend
  6512  09D9  0844               	movf	??_fround+5,w
  6513  09DA  00A3               	movwf	___lwdiv@dividend+1
  6514  09DB  300A               	movlw	10
  6515  09DC  00A0               	movwf	___lwdiv@divisor
  6516  09DD  3000               	movlw	0
  6517  09DE  00A1               	movwf	___lwdiv@divisor+1
  6518  09DF  160A  158A  268E  120A  158A  	fcall	___lwdiv
  6519  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  6520  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  6521  09E6  0820               	movf	?___lwdiv,w
  6522  09E7  160A  158A  246B  120A  158A  	fcall	___bmul
  6523  09EC  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  6524  09ED  0084               	movwf	4
  6525  09EE  160A  118A  200A  120A  158A  	fcall	stringdir
  6526  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  6527  09F4  1303               	bcf	3,6	;RP1=0, select bank0
  6528  09F5  00AF               	movwf	___ftmul@f2
  6529  09F6  160A  118A  200A  120A  158A  	fcall	stringdir
  6530  09FB  00B0               	movwf	___ftmul@f2+1
  6531  09FC  160A  118A  200A  120A  158A  	fcall	stringdir
  6532  0A01  00B1               	movwf	___ftmul@f2+2
  6533  0A02  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6534  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  6535  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  6536  0A09  082C               	movf	?___ftmul,w
  6537  0A0A  00C8               	movwf	_fround$1237
  6538  0A0B  082D               	movf	?___ftmul+1,w
  6539  0A0C  00C9               	movwf	_fround$1237+1
  6540  0A0D  082E               	movf	?___ftmul+2,w
  6541  0A0E  00CA               	movwf	_fround$1237+2
  6542  0A0F                     l3684:
  6543                           
  6544                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6545  0A0F  3000               	movlw	0
  6546  0A10  00AC               	movwf	___ftmul@f1
  6547  0A11  3000               	movlw	0
  6548  0A12  00AD               	movwf	___ftmul@f1+1
  6549  0A13  303F               	movlw	63
  6550  0A14  00AE               	movwf	___ftmul@f1+2
  6551  0A15  0848               	movf	_fround$1237,w
  6552  0A16  00AF               	movwf	___ftmul@f2
  6553  0A17  0849               	movf	_fround$1237+1,w
  6554  0A18  00B0               	movwf	___ftmul@f2+1
  6555  0A19  084A               	movf	_fround$1237+2,w
  6556  0A1A  00B1               	movwf	___ftmul@f2+2
  6557  0A1B  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6558  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  6559  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  6560  0A22  082C               	movf	?___ftmul,w
  6561  0A23  00BC               	movwf	?_fround
  6562  0A24  082D               	movf	?___ftmul+1,w
  6563  0A25  00BD               	movwf	?_fround+1
  6564  0A26  082E               	movf	?___ftmul+2,w
  6565  0A27  00BE               	movwf	?_fround+2
  6566  0A28  2A5C               	goto	l377
  6567  0A29                     l3688:
  6568                           
  6569                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 425:  return 0.5 
      +                          * _npowers_[prec];
  6570  0A29  3000               	movlw	0
  6571  0A2A  00AC               	movwf	___ftmul@f1
  6572  0A2B  3000               	movlw	0
  6573  0A2C  00AD               	movwf	___ftmul@f1+1
  6574  0A2D  303F               	movlw	63
  6575  0A2E  00AE               	movwf	___ftmul@f1+2
  6576  0A2F  3003               	movlw	3
  6577  0A30  00BF               	movwf	??_fround
  6578  0A31  083F               	movf	??_fround,w
  6579  0A32  00A8               	movwf	___bmul@multiplicand
  6580  0A33  084B               	movf	fround@prec,w
  6581  0A34  160A  158A  246B  120A  158A  	fcall	___bmul
  6582  0A39  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6583  0A3A  0084               	movwf	4
  6584  0A3B  160A  118A  200A  120A  158A  	fcall	stringdir
  6585  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  6586  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  6587  0A42  00AF               	movwf	___ftmul@f2
  6588  0A43  160A  118A  200A  120A  158A  	fcall	stringdir
  6589  0A48  00B0               	movwf	___ftmul@f2+1
  6590  0A49  160A  118A  200A  120A  158A  	fcall	stringdir
  6591  0A4E  00B1               	movwf	___ftmul@f2+2
  6592  0A4F  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6593  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  6594  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  6595  0A56  082C               	movf	?___ftmul,w
  6596  0A57  00BC               	movwf	?_fround
  6597  0A58  082D               	movf	?___ftmul+1,w
  6598  0A59  00BD               	movwf	?_fround+1
  6599  0A5A  082E               	movf	?___ftmul+2,w
  6600  0A5B  00BE               	movwf	?_fround+2
  6601  0A5C                     l377:
  6602  0A5C  0008               	return
  6603  0A5D                     __end_of_fround:
  6604                           
  6605                           	psect	text33
  6606  1E17                     __ptext33:	
  6607 ;; *************** function ___lwmod *****************
  6608 ;; Defined at:
  6609 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;  divisor         2    2[COMMON] unsigned int 
  6612 ;;  dividend        2    4[COMMON] unsigned int 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  counter         1    7[COMMON] unsigned char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  2    2[COMMON] unsigned int 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6624 ;;      Params:         4       0       0       0       0
  6625 ;;      Locals:         1       0       0       0       0
  6626 ;;      Temps:          1       0       0       0       0
  6627 ;;      Totals:         6       0       0       0       0
  6628 ;;Total ram usage:        6 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    1
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_fround
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function ___lwmod
  6640  1E17                     ___lwmod:
  6641  1E17                     l2504:	
  6642                           ;incstack = 0
  6643                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6644                           
  6645  1E17  0872               	movf	___lwmod@divisor,w
  6646  1E18  0473               	iorwf	___lwmod@divisor+1,w
  6647  1E19  1903               	btfsc	3,2
  6648  1E1A  2E1C               	goto	u3041
  6649  1E1B  2E1D               	goto	u3040
  6650  1E1C                     u3041:
  6651  1E1C  2E4C               	goto	l2522
  6652  1E1D                     u3040:
  6653  1E1D                     l2506:
  6654  1E1D  01F7               	clrf	___lwmod@counter
  6655  1E1E  0AF7               	incf	___lwmod@counter,f
  6656  1E1F  2E2B               	goto	l2512
  6657  1E20                     l2508:
  6658  1E20  3001               	movlw	1
  6659  1E21                     u3055:
  6660  1E21  1003               	clrc
  6661  1E22  0DF2               	rlf	___lwmod@divisor,f
  6662  1E23  0DF3               	rlf	___lwmod@divisor+1,f
  6663  1E24  3EFF               	addlw	-1
  6664  1E25  1D03               	skipz
  6665  1E26  2E21               	goto	u3055
  6666  1E27                     l2510:
  6667  1E27  3001               	movlw	1
  6668  1E28  00F6               	movwf	??___lwmod
  6669  1E29  0876               	movf	??___lwmod,w
  6670  1E2A  07F7               	addwf	___lwmod@counter,f
  6671  1E2B                     l2512:
  6672  1E2B  1FF3               	btfss	___lwmod@divisor+1,7
  6673  1E2C  2E2E               	goto	u3061
  6674  1E2D  2E2F               	goto	u3060
  6675  1E2E                     u3061:
  6676  1E2E  2E20               	goto	l2508
  6677  1E2F                     u3060:
  6678  1E2F                     l2514:
  6679  1E2F  0873               	movf	___lwmod@divisor+1,w
  6680  1E30  0275               	subwf	___lwmod@dividend+1,w
  6681  1E31  1D03               	skipz
  6682  1E32  2E35               	goto	u3075
  6683  1E33  0872               	movf	___lwmod@divisor,w
  6684  1E34  0274               	subwf	___lwmod@dividend,w
  6685  1E35                     u3075:
  6686  1E35  1C03               	skipc
  6687  1E36  2E38               	goto	u3071
  6688  1E37  2E39               	goto	u3070
  6689  1E38                     u3071:
  6690  1E38  2E3F               	goto	l2518
  6691  1E39                     u3070:
  6692  1E39                     l2516:
  6693  1E39  0872               	movf	___lwmod@divisor,w
  6694  1E3A  02F4               	subwf	___lwmod@dividend,f
  6695  1E3B  0873               	movf	___lwmod@divisor+1,w
  6696  1E3C  1C03               	skipc
  6697  1E3D  03F5               	decf	___lwmod@dividend+1,f
  6698  1E3E  02F5               	subwf	___lwmod@dividend+1,f
  6699  1E3F                     l2518:
  6700  1E3F  3001               	movlw	1
  6701  1E40                     u3085:
  6702  1E40  1003               	clrc
  6703  1E41  0CF3               	rrf	___lwmod@divisor+1,f
  6704  1E42  0CF2               	rrf	___lwmod@divisor,f
  6705  1E43  3EFF               	addlw	-1
  6706  1E44  1D03               	skipz
  6707  1E45  2E40               	goto	u3085
  6708  1E46                     l2520:
  6709  1E46  3001               	movlw	1
  6710  1E47  02F7               	subwf	___lwmod@counter,f
  6711  1E48  1D03               	btfss	3,2
  6712  1E49  2E4B               	goto	u3091
  6713  1E4A  2E4C               	goto	u3090
  6714  1E4B                     u3091:
  6715  1E4B  2E2F               	goto	l2514
  6716  1E4C                     u3090:
  6717  1E4C                     l2522:
  6718  1E4C  0875               	movf	___lwmod@dividend+1,w
  6719  1E4D  00F3               	movwf	?___lwmod+1
  6720  1E4E  0874               	movf	___lwmod@dividend,w
  6721  1E4F  00F2               	movwf	?___lwmod
  6722  1E50                     l932:
  6723  1E50  0008               	return
  6724  1E51                     __end_of___lwmod:
  6725                           
  6726                           	psect	text34
  6727  1E8E                     __ptext34:	
  6728 ;; *************** function ___lwdiv *****************
  6729 ;; Defined at:
  6730 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;  divisor         2    0[BANK0 ] unsigned int 
  6733 ;;  dividend        2    2[BANK0 ] unsigned int 
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;  quotient        2    5[BANK0 ] unsigned int 
  6736 ;;  counter         1    4[BANK0 ] unsigned char 
  6737 ;; Return value:  Size  Location     Type
  6738 ;;                  2    0[BANK0 ] unsigned int 
  6739 ;; Registers used:
  6740 ;;		wreg, status,2, status,0
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6746 ;;      Params:         0       4       0       0       0
  6747 ;;      Locals:         0       3       0       0       0
  6748 ;;      Temps:          1       0       0       0       0
  6749 ;;      Totals:         1       7       0       0       0
  6750 ;;Total ram usage:        8 bytes
  6751 ;; Hardware stack levels used:    1
  6752 ;; Hardware stack levels required when called:    1
  6753 ;; This function calls:
  6754 ;;		Nothing
  6755 ;; This function is called by:
  6756 ;;		_fround
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function ___lwdiv
  6762  1E8E                     ___lwdiv:
  6763  1E8E                     l3624:	
  6764                           ;incstack = 0
  6765                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6766                           
  6767  1E8E  1283               	bcf	3,5	;RP0=0, select bank0
  6768  1E8F  1303               	bcf	3,6	;RP1=0, select bank0
  6769  1E90  01A5               	clrf	___lwdiv@quotient
  6770  1E91  01A6               	clrf	___lwdiv@quotient+1
  6771  1E92                     l3626:
  6772  1E92  0820               	movf	___lwdiv@divisor,w
  6773  1E93  0421               	iorwf	___lwdiv@divisor+1,w
  6774  1E94  1903               	btfsc	3,2
  6775  1E95  2E97               	goto	u5001
  6776  1E96  2E98               	goto	u5000
  6777  1E97                     u5001:
  6778  1E97  2ECF               	goto	l3646
  6779  1E98                     u5000:
  6780  1E98                     l3628:
  6781  1E98  01A4               	clrf	___lwdiv@counter
  6782  1E99  0AA4               	incf	___lwdiv@counter,f
  6783  1E9A  2EA6               	goto	l3634
  6784  1E9B                     l3630:
  6785  1E9B  3001               	movlw	1
  6786  1E9C                     u5015:
  6787  1E9C  1003               	clrc
  6788  1E9D  0DA0               	rlf	___lwdiv@divisor,f
  6789  1E9E  0DA1               	rlf	___lwdiv@divisor+1,f
  6790  1E9F  3EFF               	addlw	-1
  6791  1EA0  1D03               	skipz
  6792  1EA1  2E9C               	goto	u5015
  6793  1EA2                     l3632:
  6794  1EA2  3001               	movlw	1
  6795  1EA3  00F8               	movwf	??___lwdiv
  6796  1EA4  0878               	movf	??___lwdiv,w
  6797  1EA5  07A4               	addwf	___lwdiv@counter,f
  6798  1EA6                     l3634:
  6799  1EA6  1FA1               	btfss	___lwdiv@divisor+1,7
  6800  1EA7  2EA9               	goto	u5021
  6801  1EA8  2EAA               	goto	u5020
  6802  1EA9                     u5021:
  6803  1EA9  2E9B               	goto	l3630
  6804  1EAA                     u5020:
  6805  1EAA                     l3636:
  6806  1EAA  3001               	movlw	1
  6807  1EAB                     u5035:
  6808  1EAB  1003               	clrc
  6809  1EAC  0DA5               	rlf	___lwdiv@quotient,f
  6810  1EAD  0DA6               	rlf	___lwdiv@quotient+1,f
  6811  1EAE  3EFF               	addlw	-1
  6812  1EAF  1D03               	skipz
  6813  1EB0  2EAB               	goto	u5035
  6814  1EB1  0821               	movf	___lwdiv@divisor+1,w
  6815  1EB2  0223               	subwf	___lwdiv@dividend+1,w
  6816  1EB3  1D03               	skipz
  6817  1EB4  2EB7               	goto	u5045
  6818  1EB5  0820               	movf	___lwdiv@divisor,w
  6819  1EB6  0222               	subwf	___lwdiv@dividend,w
  6820  1EB7                     u5045:
  6821  1EB7  1C03               	skipc
  6822  1EB8  2EBA               	goto	u5041
  6823  1EB9  2EBB               	goto	u5040
  6824  1EBA                     u5041:
  6825  1EBA  2EC2               	goto	l3642
  6826  1EBB                     u5040:
  6827  1EBB                     l3638:
  6828  1EBB  0820               	movf	___lwdiv@divisor,w
  6829  1EBC  02A2               	subwf	___lwdiv@dividend,f
  6830  1EBD  0821               	movf	___lwdiv@divisor+1,w
  6831  1EBE  1C03               	skipc
  6832  1EBF  03A3               	decf	___lwdiv@dividend+1,f
  6833  1EC0  02A3               	subwf	___lwdiv@dividend+1,f
  6834  1EC1                     l3640:
  6835  1EC1  1425               	bsf	___lwdiv@quotient,0
  6836  1EC2                     l3642:
  6837  1EC2  3001               	movlw	1
  6838  1EC3                     u5055:
  6839  1EC3  1003               	clrc
  6840  1EC4  0CA1               	rrf	___lwdiv@divisor+1,f
  6841  1EC5  0CA0               	rrf	___lwdiv@divisor,f
  6842  1EC6  3EFF               	addlw	-1
  6843  1EC7  1D03               	skipz
  6844  1EC8  2EC3               	goto	u5055
  6845  1EC9                     l3644:
  6846  1EC9  3001               	movlw	1
  6847  1ECA  02A4               	subwf	___lwdiv@counter,f
  6848  1ECB  1D03               	btfss	3,2
  6849  1ECC  2ECE               	goto	u5061
  6850  1ECD  2ECF               	goto	u5060
  6851  1ECE                     u5061:
  6852  1ECE  2EAA               	goto	l3636
  6853  1ECF                     u5060:
  6854  1ECF                     l3646:
  6855  1ECF  0826               	movf	___lwdiv@quotient+1,w
  6856  1ED0  00A1               	movwf	?___lwdiv+1
  6857  1ED1  0825               	movf	___lwdiv@quotient,w
  6858  1ED2  00A0               	movwf	?___lwdiv
  6859  1ED3                     l922:
  6860  1ED3  0008               	return
  6861  1ED4                     __end_of___lwdiv:
  6862                           
  6863                           	psect	text35
  6864  06D8                     __ptext35:	
  6865 ;; *************** function ___ftmul *****************
  6866 ;; Defined at:
  6867 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftmul.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  f1              3   12[BANK0 ] float 
  6870 ;;  f2              3   15[BANK0 ] float 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  6873 ;;  sign            1   27[BANK0 ] unsigned char 
  6874 ;;  cntr            1   26[BANK0 ] unsigned char 
  6875 ;;  exp             1   22[BANK0 ] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  3   12[BANK0 ] float 
  6878 ;; Registers used:
  6879 ;;		wreg, status,2, status,0, pclath, cstack
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6885 ;;      Params:         0       6       0       0       0
  6886 ;;      Locals:         0       6       0       0       0
  6887 ;;      Temps:          0       4       0       0       0
  6888 ;;      Totals:         0      16       0       0       0
  6889 ;;Total ram usage:       16 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    2
  6892 ;; This function calls:
  6893 ;;		___ftpack
  6894 ;; This function is called by:
  6895 ;;		_Mapeo_M
  6896 ;;		_fround
  6897 ;;		_scale
  6898 ;;		_sprintf
  6899 ;; This function uses a non-reentrant model
  6900 ;;
  6901                           
  6902                           
  6903                           ;psect for function ___ftmul
  6904  06D8                     ___ftmul:
  6905  06D8                     l3574:	
  6906                           ;incstack = 0
  6907                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6908                           
  6909  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  6910  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  6911  06DA  082C               	movf	___ftmul@f1,w
  6912  06DB  00B2               	movwf	??___ftmul
  6913  06DC  082D               	movf	___ftmul@f1+1,w
  6914  06DD  00B3               	movwf	??___ftmul+1
  6915  06DE  082E               	movf	___ftmul@f1+2,w
  6916  06DF  00B4               	movwf	??___ftmul+2
  6917  06E0  1003               	clrc
  6918  06E1  0D33               	rlf	??___ftmul+1,w
  6919  06E2  0D34               	rlf	??___ftmul+2,w
  6920  06E3  00B5               	movwf	??___ftmul+3
  6921  06E4  0835               	movf	??___ftmul+3,w
  6922  06E5  00B6               	movwf	___ftmul@exp
  6923  06E6  0836               	movf	___ftmul@exp,w
  6924  06E7  1D03               	btfss	3,2
  6925  06E8  2EEA               	goto	u4861
  6926  06E9  2EEB               	goto	u4860
  6927  06EA                     u4861:
  6928  06EA  2EF2               	goto	l3580
  6929  06EB                     u4860:
  6930  06EB                     l3576:
  6931  06EB  3000               	movlw	0
  6932  06EC  00AC               	movwf	?___ftmul
  6933  06ED  3000               	movlw	0
  6934  06EE  00AD               	movwf	?___ftmul+1
  6935  06EF  3000               	movlw	0
  6936  06F0  00AE               	movwf	?___ftmul+2
  6937  06F1  2FBC               	goto	l789
  6938  06F2                     l3580:
  6939  06F2  082F               	movf	___ftmul@f2,w
  6940  06F3  00B2               	movwf	??___ftmul
  6941  06F4  0830               	movf	___ftmul@f2+1,w
  6942  06F5  00B3               	movwf	??___ftmul+1
  6943  06F6  0831               	movf	___ftmul@f2+2,w
  6944  06F7  00B4               	movwf	??___ftmul+2
  6945  06F8  1003               	clrc
  6946  06F9  0D33               	rlf	??___ftmul+1,w
  6947  06FA  0D34               	rlf	??___ftmul+2,w
  6948  06FB  00B5               	movwf	??___ftmul+3
  6949  06FC  0835               	movf	??___ftmul+3,w
  6950  06FD  00BB               	movwf	___ftmul@sign
  6951  06FE  083B               	movf	___ftmul@sign,w
  6952  06FF  1D03               	btfss	3,2
  6953  0700  2F02               	goto	u4871
  6954  0701  2F03               	goto	u4870
  6955  0702                     u4871:
  6956  0702  2F0A               	goto	l3586
  6957  0703                     u4870:
  6958  0703                     l3582:
  6959  0703  3000               	movlw	0
  6960  0704  00AC               	movwf	?___ftmul
  6961  0705  3000               	movlw	0
  6962  0706  00AD               	movwf	?___ftmul+1
  6963  0707  3000               	movlw	0
  6964  0708  00AE               	movwf	?___ftmul+2
  6965  0709  2FBC               	goto	l789
  6966  070A                     l3586:
  6967  070A  083B               	movf	___ftmul@sign,w
  6968  070B  3E7B               	addlw	123
  6969  070C  00B2               	movwf	??___ftmul
  6970  070D  0832               	movf	??___ftmul,w
  6971  070E  07B6               	addwf	___ftmul@exp,f
  6972  070F  082C               	movf	___ftmul@f1,w
  6973  0710  00B2               	movwf	??___ftmul
  6974  0711  082D               	movf	___ftmul@f1+1,w
  6975  0712  00B3               	movwf	??___ftmul+1
  6976  0713  082E               	movf	___ftmul@f1+2,w
  6977  0714  00B4               	movwf	??___ftmul+2
  6978  0715  3010               	movlw	16
  6979  0716                     u4885:
  6980  0716  1003               	clrc
  6981  0717  0CB4               	rrf	??___ftmul+2,f
  6982  0718  0CB3               	rrf	??___ftmul+1,f
  6983  0719  0CB2               	rrf	??___ftmul,f
  6984  071A                     u4880:
  6985  071A  3EFF               	addlw	-1
  6986  071B  1D03               	skipz
  6987  071C  2F16               	goto	u4885
  6988  071D  0832               	movf	??___ftmul,w
  6989  071E  00B5               	movwf	??___ftmul+3
  6990  071F  0835               	movf	??___ftmul+3,w
  6991  0720  00BB               	movwf	___ftmul@sign
  6992  0721  082F               	movf	___ftmul@f2,w
  6993  0722  00B2               	movwf	??___ftmul
  6994  0723  0830               	movf	___ftmul@f2+1,w
  6995  0724  00B3               	movwf	??___ftmul+1
  6996  0725  0831               	movf	___ftmul@f2+2,w
  6997  0726  00B4               	movwf	??___ftmul+2
  6998  0727  3010               	movlw	16
  6999  0728                     u4895:
  7000  0728  1003               	clrc
  7001  0729  0CB4               	rrf	??___ftmul+2,f
  7002  072A  0CB3               	rrf	??___ftmul+1,f
  7003  072B  0CB2               	rrf	??___ftmul,f
  7004  072C                     u4890:
  7005  072C  3EFF               	addlw	-1
  7006  072D  1D03               	skipz
  7007  072E  2F28               	goto	u4895
  7008  072F  0832               	movf	??___ftmul,w
  7009  0730  00B5               	movwf	??___ftmul+3
  7010  0731  0835               	movf	??___ftmul+3,w
  7011  0732  06BB               	xorwf	___ftmul@sign,f
  7012  0733  3080               	movlw	128
  7013  0734  00B2               	movwf	??___ftmul
  7014  0735  0832               	movf	??___ftmul,w
  7015  0736  05BB               	andwf	___ftmul@sign,f
  7016  0737                     l3588:
  7017  0737  17AD               	bsf	___ftmul@f1+1,7
  7018  0738                     l3590:
  7019  0738  17B0               	bsf	___ftmul@f2+1,7
  7020  0739                     l3592:
  7021  0739  30FF               	movlw	255
  7022  073A  05AF               	andwf	___ftmul@f2,f
  7023  073B  30FF               	movlw	255
  7024  073C  05B0               	andwf	___ftmul@f2+1,f
  7025  073D  3000               	movlw	0
  7026  073E  05B1               	andwf	___ftmul@f2+2,f
  7027  073F                     l3594:
  7028  073F  3000               	movlw	0
  7029  0740  00B7               	movwf	___ftmul@f3_as_product
  7030  0741  3000               	movlw	0
  7031  0742  00B8               	movwf	___ftmul@f3_as_product+1
  7032  0743  3000               	movlw	0
  7033  0744  00B9               	movwf	___ftmul@f3_as_product+2
  7034  0745                     l3596:
  7035  0745  3007               	movlw	7
  7036  0746  00B2               	movwf	??___ftmul
  7037  0747  0832               	movf	??___ftmul,w
  7038  0748  00BA               	movwf	___ftmul@cntr
  7039  0749                     l3598:
  7040  0749  1C2C               	btfss	___ftmul@f1,0
  7041  074A  2F4C               	goto	u4901
  7042  074B  2F4D               	goto	u4900
  7043  074C                     u4901:
  7044  074C  2F5D               	goto	l3602
  7045  074D                     u4900:
  7046  074D                     l3600:
  7047  074D  082F               	movf	___ftmul@f2,w
  7048  074E  07B7               	addwf	___ftmul@f3_as_product,f
  7049  074F  0830               	movf	___ftmul@f2+1,w
  7050  0750  1103               	clrz
  7051  0751  1803               	skipnc
  7052  0752  0A30               	incf	___ftmul@f2+1,w
  7053  0753  1903               	skipnz
  7054  0754  2F56               	goto	u4911
  7055  0755  07B8               	addwf	___ftmul@f3_as_product+1,f
  7056  0756                     u4911:
  7057  0756  0831               	movf	___ftmul@f2+2,w
  7058  0757  1103               	clrz
  7059  0758  1803               	skipnc
  7060  0759  0A31               	incf	___ftmul@f2+2,w
  7061  075A  1903               	skipnz
  7062  075B  2F5D               	goto	u4912
  7063  075C  07B9               	addwf	___ftmul@f3_as_product+2,f
  7064  075D                     u4912:
  7065  075D                     l3602:
  7066  075D  3001               	movlw	1
  7067  075E                     u4925:
  7068  075E  1003               	clrc
  7069  075F  0CAE               	rrf	___ftmul@f1+2,f
  7070  0760  0CAD               	rrf	___ftmul@f1+1,f
  7071  0761  0CAC               	rrf	___ftmul@f1,f
  7072  0762  3EFF               	addlw	-1
  7073  0763  1D03               	skipz
  7074  0764  2F5E               	goto	u4925
  7075  0765                     l3604:
  7076  0765  3001               	movlw	1
  7077  0766                     u4935:
  7078  0766  1003               	clrc
  7079  0767  0DAF               	rlf	___ftmul@f2,f
  7080  0768  0DB0               	rlf	___ftmul@f2+1,f
  7081  0769  0DB1               	rlf	___ftmul@f2+2,f
  7082  076A  3EFF               	addlw	-1
  7083  076B  1D03               	skipz
  7084  076C  2F66               	goto	u4935
  7085  076D                     l3606:
  7086  076D  3001               	movlw	1
  7087  076E  02BA               	subwf	___ftmul@cntr,f
  7088  076F  1D03               	btfss	3,2
  7089  0770  2F72               	goto	u4941
  7090  0771  2F73               	goto	u4940
  7091  0772                     u4941:
  7092  0772  2F49               	goto	l3598
  7093  0773                     u4940:
  7094  0773                     l3608:
  7095  0773  3009               	movlw	9
  7096  0774  00B2               	movwf	??___ftmul
  7097  0775  0832               	movf	??___ftmul,w
  7098  0776  00BA               	movwf	___ftmul@cntr
  7099  0777                     l3610:
  7100  0777  1C2C               	btfss	___ftmul@f1,0
  7101  0778  2F7A               	goto	u4951
  7102  0779  2F7B               	goto	u4950
  7103  077A                     u4951:
  7104  077A  2F8B               	goto	l3614
  7105  077B                     u4950:
  7106  077B                     l3612:
  7107  077B  082F               	movf	___ftmul@f2,w
  7108  077C  07B7               	addwf	___ftmul@f3_as_product,f
  7109  077D  0830               	movf	___ftmul@f2+1,w
  7110  077E  1103               	clrz
  7111  077F  1803               	skipnc
  7112  0780  0A30               	incf	___ftmul@f2+1,w
  7113  0781  1903               	skipnz
  7114  0782  2F84               	goto	u4961
  7115  0783  07B8               	addwf	___ftmul@f3_as_product+1,f
  7116  0784                     u4961:
  7117  0784  0831               	movf	___ftmul@f2+2,w
  7118  0785  1103               	clrz
  7119  0786  1803               	skipnc
  7120  0787  0A31               	incf	___ftmul@f2+2,w
  7121  0788  1903               	skipnz
  7122  0789  2F8B               	goto	u4962
  7123  078A  07B9               	addwf	___ftmul@f3_as_product+2,f
  7124  078B                     u4962:
  7125  078B                     l3614:
  7126  078B  3001               	movlw	1
  7127  078C                     u4975:
  7128  078C  1003               	clrc
  7129  078D  0CAE               	rrf	___ftmul@f1+2,f
  7130  078E  0CAD               	rrf	___ftmul@f1+1,f
  7131  078F  0CAC               	rrf	___ftmul@f1,f
  7132  0790  3EFF               	addlw	-1
  7133  0791  1D03               	skipz
  7134  0792  2F8C               	goto	u4975
  7135  0793                     l3616:
  7136  0793  3001               	movlw	1
  7137  0794                     u4985:
  7138  0794  1003               	clrc
  7139  0795  0CB9               	rrf	___ftmul@f3_as_product+2,f
  7140  0796  0CB8               	rrf	___ftmul@f3_as_product+1,f
  7141  0797  0CB7               	rrf	___ftmul@f3_as_product,f
  7142  0798  3EFF               	addlw	-1
  7143  0799  1D03               	skipz
  7144  079A  2F94               	goto	u4985
  7145  079B                     l3618:
  7146  079B  3001               	movlw	1
  7147  079C  02BA               	subwf	___ftmul@cntr,f
  7148  079D  1D03               	btfss	3,2
  7149  079E  2FA0               	goto	u4991
  7150  079F  2FA1               	goto	u4990
  7151  07A0                     u4991:
  7152  07A0  2F77               	goto	l3610
  7153  07A1                     u4990:
  7154  07A1                     l3620:
  7155  07A1  0837               	movf	___ftmul@f3_as_product,w
  7156  07A2  00F2               	movwf	___ftpack@arg
  7157  07A3  0838               	movf	___ftmul@f3_as_product+1,w
  7158  07A4  00F3               	movwf	___ftpack@arg+1
  7159  07A5  0839               	movf	___ftmul@f3_as_product+2,w
  7160  07A6  00F4               	movwf	___ftpack@arg+2
  7161  07A7  0836               	movf	___ftmul@exp,w
  7162  07A8  00B2               	movwf	??___ftmul
  7163  07A9  0832               	movf	??___ftmul,w
  7164  07AA  00F5               	movwf	___ftpack@exp
  7165  07AB  083B               	movf	___ftmul@sign,w
  7166  07AC  00B3               	movwf	??___ftmul+1
  7167  07AD  0833               	movf	??___ftmul+1,w
  7168  07AE  00F6               	movwf	___ftpack@sign
  7169  07AF  160A  118A  23A3  120A  118A  	fcall	___ftpack
  7170  07B4  0872               	movf	?___ftpack,w
  7171  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  7172  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  7173  07B7  00AC               	movwf	?___ftmul
  7174  07B8  0873               	movf	?___ftpack+1,w
  7175  07B9  00AD               	movwf	?___ftmul+1
  7176  07BA  0874               	movf	?___ftpack+2,w
  7177  07BB  00AE               	movwf	?___ftmul+2
  7178  07BC                     l789:
  7179  07BC  0008               	return
  7180  07BD                     __end_of___ftmul:
  7181                           
  7182                           	psect	text36
  7183  1C6B                     __ptext36:	
  7184 ;; *************** function ___bmul *****************
  7185 ;; Defined at:
  7186 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  7187 ;; Parameters:    Size  Location     Type
  7188 ;;  multiplier      1    wreg     unsigned char 
  7189 ;;  multiplicand    1    8[BANK0 ] unsigned char 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;  multiplier      1   11[BANK0 ] unsigned char 
  7192 ;;  product         1   10[BANK0 ] unsigned char 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      unsigned char 
  7195 ;; Registers used:
  7196 ;;		wreg, status,2, status,0
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7202 ;;      Params:         0       1       0       0       0
  7203 ;;      Locals:         0       2       0       0       0
  7204 ;;      Temps:          0       1       0       0       0
  7205 ;;      Totals:         0       4       0       0       0
  7206 ;;Total ram usage:        4 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_fround
  7213 ;;		_scale
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function ___bmul
  7219  1C6B                     ___bmul:
  7220                           
  7221                           ;incstack = 0
  7222                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7223                           ;___bmul@multiplier stored from wreg
  7224  1C6B  1283               	bcf	3,5	;RP0=0, select bank0
  7225  1C6C  1303               	bcf	3,6	;RP1=0, select bank0
  7226  1C6D  00AB               	movwf	___bmul@multiplier
  7227  1C6E                     l2262:
  7228  1C6E  01AA               	clrf	___bmul@product
  7229  1C6F                     l2264:
  7230  1C6F  1C2B               	btfss	___bmul@multiplier,0
  7231  1C70  2C72               	goto	u2381
  7232  1C71  2C73               	goto	u2380
  7233  1C72                     u2381:
  7234  1C72  2C77               	goto	l2268
  7235  1C73                     u2380:
  7236  1C73                     l2266:
  7237  1C73  0828               	movf	___bmul@multiplicand,w
  7238  1C74  00A9               	movwf	??___bmul
  7239  1C75  0829               	movf	??___bmul,w
  7240  1C76  07AA               	addwf	___bmul@product,f
  7241  1C77                     l2268:
  7242  1C77  1003               	clrc
  7243  1C78  0DA8               	rlf	___bmul@multiplicand,f
  7244  1C79                     l2270:
  7245  1C79  1003               	clrc
  7246  1C7A  0CAB               	rrf	___bmul@multiplier,f
  7247  1C7B  082B               	movf	___bmul@multiplier,w
  7248  1C7C  1D03               	btfss	3,2
  7249  1C7D  2C7F               	goto	u2391
  7250  1C7E  2C80               	goto	u2390
  7251  1C7F                     u2391:
  7252  1C7F  2C6F               	goto	l2264
  7253  1C80                     u2390:
  7254  1C80                     l2272:
  7255  1C80  082A               	movf	___bmul@product,w
  7256  1C81                     l506:
  7257  1C81  0008               	return
  7258  1C82                     __end_of___bmul:
  7259                           
  7260                           	psect	text37
  7261  141F                     __ptext37:	
  7262 ;; *************** function __tdiv_to_l_ *****************
  7263 ;; Defined at:
  7264 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftdivl.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  f1              3    2[COMMON] float 
  7267 ;;  f2              3    5[COMMON] float 
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  quot            4    4[BANK0 ] unsigned long 
  7270 ;;  exp1            1    9[BANK0 ] unsigned char 
  7271 ;;  cntr            1    8[BANK0 ] unsigned char 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  4    2[COMMON] unsigned long 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7281 ;;      Params:         6       0       0       0       0
  7282 ;;      Locals:         0       6       0       0       0
  7283 ;;      Temps:          0       4       0       0       0
  7284 ;;      Totals:         6      10       0       0       0
  7285 ;;Total ram usage:       16 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    1
  7288 ;; This function calls:
  7289 ;;		Nothing
  7290 ;; This function is called by:
  7291 ;;		_sprintf
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function __tdiv_to_l_
  7297  141F                     __tdiv_to_l_:
  7298  141F                     l3732:	
  7299                           ;incstack = 0
  7300                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7301                           
  7302  141F  0872               	movf	__tdiv_to_l_@f1,w
  7303  1420  1283               	bcf	3,5	;RP0=0, select bank0
  7304  1421  1303               	bcf	3,6	;RP1=0, select bank0
  7305  1422  00A0               	movwf	??__tdiv_to_l_
  7306  1423  0873               	movf	__tdiv_to_l_@f1+1,w
  7307  1424  00A1               	movwf	??__tdiv_to_l_+1
  7308  1425  0874               	movf	__tdiv_to_l_@f1+2,w
  7309  1426  00A2               	movwf	??__tdiv_to_l_+2
  7310  1427  1003               	clrc
  7311  1428  0D21               	rlf	??__tdiv_to_l_+1,w
  7312  1429  0D22               	rlf	??__tdiv_to_l_+2,w
  7313  142A  00A3               	movwf	??__tdiv_to_l_+3
  7314  142B  0823               	movf	??__tdiv_to_l_+3,w
  7315  142C  00A9               	movwf	__tdiv_to_l_@exp1
  7316  142D  0829               	movf	__tdiv_to_l_@exp1,w
  7317  142E  1D03               	btfss	3,2
  7318  142F  2C31               	goto	u5141
  7319  1430  2C32               	goto	u5140
  7320  1431                     u5141:
  7321  1431  2C3B               	goto	l3738
  7322  1432                     u5140:
  7323  1432                     l3734:
  7324  1432  3000               	movlw	0
  7325  1433  00F5               	movwf	?__tdiv_to_l_+3
  7326  1434  3000               	movlw	0
  7327  1435  00F4               	movwf	?__tdiv_to_l_+2
  7328  1436  3000               	movlw	0
  7329  1437  00F3               	movwf	?__tdiv_to_l_+1
  7330  1438  3000               	movlw	0
  7331  1439  00F2               	movwf	?__tdiv_to_l_
  7332  143A  2CDB               	goto	l765
  7333  143B                     l3738:
  7334  143B  0875               	movf	__tdiv_to_l_@f2,w
  7335  143C  00A0               	movwf	??__tdiv_to_l_
  7336  143D  0876               	movf	__tdiv_to_l_@f2+1,w
  7337  143E  00A1               	movwf	??__tdiv_to_l_+1
  7338  143F  0877               	movf	__tdiv_to_l_@f2+2,w
  7339  1440  00A2               	movwf	??__tdiv_to_l_+2
  7340  1441  1003               	clrc
  7341  1442  0D21               	rlf	??__tdiv_to_l_+1,w
  7342  1443  0D22               	rlf	??__tdiv_to_l_+2,w
  7343  1444  00A3               	movwf	??__tdiv_to_l_+3
  7344  1445  0823               	movf	??__tdiv_to_l_+3,w
  7345  1446  00A8               	movwf	__tdiv_to_l_@cntr
  7346  1447  0828               	movf	__tdiv_to_l_@cntr,w
  7347  1448  1D03               	btfss	3,2
  7348  1449  2C4B               	goto	u5151
  7349  144A  2C4C               	goto	u5150
  7350  144B                     u5151:
  7351  144B  2C4D               	goto	l766
  7352  144C                     u5150:
  7353  144C  2C32               	goto	l3734
  7354  144D                     l766:
  7355  144D  17F3               	bsf	__tdiv_to_l_@f1+1,7
  7356  144E                     l3744:
  7357  144E  30FF               	movlw	255
  7358  144F  05F2               	andwf	__tdiv_to_l_@f1,f
  7359  1450  30FF               	movlw	255
  7360  1451  05F3               	andwf	__tdiv_to_l_@f1+1,f
  7361  1452  3000               	movlw	0
  7362  1453  05F4               	andwf	__tdiv_to_l_@f1+2,f
  7363  1454                     l3746:
  7364  1454  17F6               	bsf	__tdiv_to_l_@f2+1,7
  7365  1455  30FF               	movlw	255
  7366  1456  05F5               	andwf	__tdiv_to_l_@f2,f
  7367  1457  30FF               	movlw	255
  7368  1458  05F6               	andwf	__tdiv_to_l_@f2+1,f
  7369  1459  3000               	movlw	0
  7370  145A  05F7               	andwf	__tdiv_to_l_@f2+2,f
  7371  145B  3000               	movlw	0
  7372  145C  00A7               	movwf	__tdiv_to_l_@quot+3
  7373  145D  3000               	movlw	0
  7374  145E  00A6               	movwf	__tdiv_to_l_@quot+2
  7375  145F  3000               	movlw	0
  7376  1460  00A5               	movwf	__tdiv_to_l_@quot+1
  7377  1461  3000               	movlw	0
  7378  1462  00A4               	movwf	__tdiv_to_l_@quot
  7379  1463                     l3748:
  7380  1463  307F               	movlw	127
  7381  1464  02A9               	subwf	__tdiv_to_l_@exp1,f
  7382  1465                     l3750:
  7383  1465  3098               	movlw	152
  7384  1466  0728               	addwf	__tdiv_to_l_@cntr,w
  7385  1467  00A0               	movwf	??__tdiv_to_l_
  7386  1468  0820               	movf	??__tdiv_to_l_,w
  7387  1469  02A9               	subwf	__tdiv_to_l_@exp1,f
  7388  146A  3018               	movlw	24
  7389  146B  00A0               	movwf	??__tdiv_to_l_
  7390  146C  0820               	movf	??__tdiv_to_l_,w
  7391  146D  00A8               	movwf	__tdiv_to_l_@cntr
  7392  146E                     l3752:
  7393  146E  3001               	movlw	1
  7394  146F  00A0               	movwf	??__tdiv_to_l_
  7395  1470                     u5165:
  7396  1470  1003               	clrc
  7397  1471  0DA4               	rlf	__tdiv_to_l_@quot,f
  7398  1472  0DA5               	rlf	__tdiv_to_l_@quot+1,f
  7399  1473  0DA6               	rlf	__tdiv_to_l_@quot+2,f
  7400  1474  0DA7               	rlf	__tdiv_to_l_@quot+3,f
  7401  1475  0BA0               	decfsz	??__tdiv_to_l_,f
  7402  1476  2C70               	goto	u5165
  7403  1477                     l3754:
  7404  1477  0877               	movf	__tdiv_to_l_@f2+2,w
  7405  1478  0274               	subwf	__tdiv_to_l_@f1+2,w
  7406  1479  1D03               	skipz
  7407  147A  2C81               	goto	u5175
  7408  147B  0876               	movf	__tdiv_to_l_@f2+1,w
  7409  147C  0273               	subwf	__tdiv_to_l_@f1+1,w
  7410  147D  1D03               	skipz
  7411  147E  2C81               	goto	u5175
  7412  147F  0875               	movf	__tdiv_to_l_@f2,w
  7413  1480  0272               	subwf	__tdiv_to_l_@f1,w
  7414  1481                     u5175:
  7415  1481  1C03               	skipc
  7416  1482  2C84               	goto	u5171
  7417  1483  2C85               	goto	u5170
  7418  1484                     u5171:
  7419  1484  2C90               	goto	l3760
  7420  1485                     u5170:
  7421  1485                     l3756:
  7422  1485  0875               	movf	__tdiv_to_l_@f2,w
  7423  1486  02F2               	subwf	__tdiv_to_l_@f1,f
  7424  1487  0876               	movf	__tdiv_to_l_@f2+1,w
  7425  1488  1C03               	skipc
  7426  1489  0F76               	incfsz	__tdiv_to_l_@f2+1,w
  7427  148A  02F3               	subwf	__tdiv_to_l_@f1+1,f
  7428  148B  0877               	movf	__tdiv_to_l_@f2+2,w
  7429  148C  1C03               	skipc
  7430  148D  0A77               	incf	__tdiv_to_l_@f2+2,w
  7431  148E  02F4               	subwf	__tdiv_to_l_@f1+2,f
  7432  148F                     l3758:
  7433  148F  1424               	bsf	__tdiv_to_l_@quot,0
  7434  1490                     l3760:
  7435  1490  3001               	movlw	1
  7436  1491                     u5185:
  7437  1491  1003               	clrc
  7438  1492  0DF2               	rlf	__tdiv_to_l_@f1,f
  7439  1493  0DF3               	rlf	__tdiv_to_l_@f1+1,f
  7440  1494  0DF4               	rlf	__tdiv_to_l_@f1+2,f
  7441  1495  3EFF               	addlw	-1
  7442  1496  1D03               	skipz
  7443  1497  2C91               	goto	u5185
  7444  1498                     l3762:
  7445  1498  3001               	movlw	1
  7446  1499  02A8               	subwf	__tdiv_to_l_@cntr,f
  7447  149A  1D03               	btfss	3,2
  7448  149B  2C9D               	goto	u5191
  7449  149C  2C9E               	goto	u5190
  7450  149D                     u5191:
  7451  149D  2C6E               	goto	l3752
  7452  149E                     u5190:
  7453  149E                     l769:
  7454  149E  1FA9               	btfss	__tdiv_to_l_@exp1,7
  7455  149F  2CA1               	goto	u5201
  7456  14A0  2CA2               	goto	u5200
  7457  14A1                     u5201:
  7458  14A1  2CBC               	goto	l3772
  7459  14A2                     u5200:
  7460  14A2                     l3764:
  7461  14A2  0829               	movf	__tdiv_to_l_@exp1,w
  7462  14A3  3A80               	xorlw	128
  7463  14A4  3E97               	addlw	151
  7464  14A5  1803               	skipnc
  7465  14A6  2CA8               	goto	u5211
  7466  14A7  2CA9               	goto	u5210
  7467  14A8                     u5211:
  7468  14A8  2CAA               	goto	l3770
  7469  14A9                     u5210:
  7470  14A9  2C32               	goto	l3734
  7471  14AA                     l3770:
  7472  14AA  3001               	movlw	1
  7473  14AB                     u5225:
  7474  14AB  1003               	clrc
  7475  14AC  0CA7               	rrf	__tdiv_to_l_@quot+3,f
  7476  14AD  0CA6               	rrf	__tdiv_to_l_@quot+2,f
  7477  14AE  0CA5               	rrf	__tdiv_to_l_@quot+1,f
  7478  14AF  0CA4               	rrf	__tdiv_to_l_@quot,f
  7479  14B0  3EFF               	addlw	-1
  7480  14B1  1D03               	skipz
  7481  14B2  2CAB               	goto	u5225
  7482  14B3  3001               	movlw	1
  7483  14B4  00A0               	movwf	??__tdiv_to_l_
  7484  14B5  0820               	movf	??__tdiv_to_l_,w
  7485  14B6  07A9               	addwf	__tdiv_to_l_@exp1,f
  7486  14B7  1D03               	btfss	3,2
  7487  14B8  2CBA               	goto	u5231
  7488  14B9  2CBB               	goto	u5230
  7489  14BA                     u5231:
  7490  14BA  2CAA               	goto	l3770
  7491  14BB                     u5230:
  7492  14BB  2CD3               	goto	l3780
  7493  14BC                     l3772:
  7494  14BC  3018               	movlw	24
  7495  14BD  0229               	subwf	__tdiv_to_l_@exp1,w
  7496  14BE  1C03               	skipc
  7497  14BF  2CC1               	goto	u5241
  7498  14C0  2CC2               	goto	u5240
  7499  14C1                     u5241:
  7500  14C1  2CCE               	goto	l776
  7501  14C2                     u5240:
  7502  14C2  2C32               	goto	l3734
  7503  14C3                     l3778:
  7504  14C3  3001               	movlw	1
  7505  14C4  00A0               	movwf	??__tdiv_to_l_
  7506  14C5                     u5255:
  7507  14C5  1003               	clrc
  7508  14C6  0DA4               	rlf	__tdiv_to_l_@quot,f
  7509  14C7  0DA5               	rlf	__tdiv_to_l_@quot+1,f
  7510  14C8  0DA6               	rlf	__tdiv_to_l_@quot+2,f
  7511  14C9  0DA7               	rlf	__tdiv_to_l_@quot+3,f
  7512  14CA  0BA0               	decfsz	??__tdiv_to_l_,f
  7513  14CB  2CC5               	goto	u5255
  7514  14CC  3001               	movlw	1
  7515  14CD  02A9               	subwf	__tdiv_to_l_@exp1,f
  7516  14CE                     l776:
  7517  14CE  0829               	movf	__tdiv_to_l_@exp1,w
  7518  14CF  1D03               	btfss	3,2
  7519  14D0  2CD2               	goto	u5261
  7520  14D1  2CD3               	goto	u5260
  7521  14D2                     u5261:
  7522  14D2  2CC3               	goto	l3778
  7523  14D3                     u5260:
  7524  14D3                     l3780:
  7525  14D3  0827               	movf	__tdiv_to_l_@quot+3,w
  7526  14D4  00F5               	movwf	?__tdiv_to_l_+3
  7527  14D5  0826               	movf	__tdiv_to_l_@quot+2,w
  7528  14D6  00F4               	movwf	?__tdiv_to_l_+2
  7529  14D7  0825               	movf	__tdiv_to_l_@quot+1,w
  7530  14D8  00F3               	movwf	?__tdiv_to_l_+1
  7531  14D9  0824               	movf	__tdiv_to_l_@quot,w
  7532  14DA  00F2               	movwf	?__tdiv_to_l_
  7533  14DB                     l765:
  7534  14DB  0008               	return
  7535  14DC                     __end_of__tdiv_to_l_:
  7536                           
  7537                           	psect	text38
  7538  159E                     __ptext38:	
  7539 ;; *************** function __div_to_l_ *****************
  7540 ;; Defined at:
  7541 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fldivl.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  f1              3    2[COMMON] unsigned long 
  7544 ;;  f2              3    5[COMMON] unsigned long 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  quot            4    8[BANK0 ] unsigned long 
  7547 ;;  exp1            1   13[BANK0 ] unsigned char 
  7548 ;;  cntr            1   12[BANK0 ] unsigned char 
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  4    2[COMMON] unsigned long 
  7551 ;; Registers used:
  7552 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7558 ;;      Params:         6       0       0       0       0
  7559 ;;      Locals:         0       6       0       0       0
  7560 ;;      Temps:          0       8       0       0       0
  7561 ;;      Totals:         6      14       0       0       0
  7562 ;;Total ram usage:       20 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    1
  7565 ;; This function calls:
  7566 ;;		Nothing
  7567 ;; This function is called by:
  7568 ;;		_sprintf
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           
  7573                           ;psect for function __div_to_l_
  7574  159E                     __div_to_l_:
  7575  159E                     l2678:	
  7576                           ;incstack = 0
  7577                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  7578                           
  7579  159E  3072               	movlw	low (__div_to_l_@f1| 0)
  7580  159F  0084               	movwf	4
  7581  15A0  0800               	movf	0,w
  7582  15A1  1283               	bcf	3,5	;RP0=0, select bank0
  7583  15A2  1303               	bcf	3,6	;RP1=0, select bank0
  7584  15A3  00A0               	movwf	??__div_to_l_
  7585  15A4  0A84               	incf	4,f
  7586  15A5  0800               	movf	0,w
  7587  15A6  00A1               	movwf	??__div_to_l_+1
  7588  15A7  0A84               	incf	4,f
  7589  15A8  0800               	movf	0,w
  7590  15A9  00A2               	movwf	??__div_to_l_+2
  7591  15AA  0A84               	incf	4,f
  7592  15AB  0800               	movf	0,w
  7593  15AC  00A3               	movwf	??__div_to_l_+3
  7594  15AD  1003               	clrc
  7595  15AE  0D22               	rlf	??__div_to_l_+2,w
  7596  15AF  0D23               	rlf	??__div_to_l_+3,w
  7597  15B0  00A4               	movwf	??__div_to_l_+4
  7598  15B1  0824               	movf	??__div_to_l_+4,w
  7599  15B2  00AD               	movwf	__div_to_l_@exp1
  7600  15B3  082D               	movf	__div_to_l_@exp1,w
  7601  15B4  1D03               	btfss	3,2
  7602  15B5  2DB7               	goto	u3341
  7603  15B6  2DB8               	goto	u3340
  7604  15B7                     u3341:
  7605  15B7  2DC1               	goto	l2684
  7606  15B8                     u3340:
  7607  15B8                     l2680:
  7608  15B8  3000               	movlw	0
  7609  15B9  00F5               	movwf	?__div_to_l_+3
  7610  15BA  3000               	movlw	0
  7611  15BB  00F4               	movwf	?__div_to_l_+2
  7612  15BC  3000               	movlw	0
  7613  15BD  00F3               	movwf	?__div_to_l_+1
  7614  15BE  3000               	movlw	0
  7615  15BF  00F2               	movwf	?__div_to_l_
  7616  15C0  2EC9               	goto	l686
  7617  15C1                     l2684:
  7618  15C1  3075               	movlw	low (__div_to_l_@f2| 0)
  7619  15C2  0084               	movwf	4
  7620  15C3  0800               	movf	0,w
  7621  15C4  00A0               	movwf	??__div_to_l_
  7622  15C5  0A84               	incf	4,f
  7623  15C6  0800               	movf	0,w
  7624  15C7  00A1               	movwf	??__div_to_l_+1
  7625  15C8  0A84               	incf	4,f
  7626  15C9  0800               	movf	0,w
  7627  15CA  00A2               	movwf	??__div_to_l_+2
  7628  15CB  0A84               	incf	4,f
  7629  15CC  0800               	movf	0,w
  7630  15CD  00A3               	movwf	??__div_to_l_+3
  7631  15CE  1003               	clrc
  7632  15CF  0D22               	rlf	??__div_to_l_+2,w
  7633  15D0  0D23               	rlf	??__div_to_l_+3,w
  7634  15D1  00A4               	movwf	??__div_to_l_+4
  7635  15D2  0824               	movf	??__div_to_l_+4,w
  7636  15D3  00AC               	movwf	__div_to_l_@cntr
  7637  15D4  082C               	movf	__div_to_l_@cntr,w
  7638  15D5  1D03               	btfss	3,2
  7639  15D6  2DD8               	goto	u3351
  7640  15D7  2DD9               	goto	u3350
  7641  15D8                     u3351:
  7642  15D8  2DDA               	goto	l2690
  7643  15D9                     u3350:
  7644  15D9  2DB8               	goto	l2680
  7645  15DA                     l2690:
  7646  15DA  3072               	movlw	low (__div_to_l_@f1| 0)
  7647  15DB  0084               	movwf	4
  7648  15DC  3000               	movlw	0
  7649  15DD  0480               	iorwf	0,f
  7650  15DE  0A84               	incf	4,f
  7651  15DF  3000               	movlw	0
  7652  15E0  0480               	iorwf	0,f
  7653  15E1  0A84               	incf	4,f
  7654  15E2  3080               	movlw	128
  7655  15E3  0480               	iorwf	0,f
  7656  15E4  0A84               	incf	4,f
  7657  15E5  3000               	movlw	0
  7658  15E6  0480               	iorwf	0,f
  7659  15E7  3072               	movlw	low (__div_to_l_@f1| 0)
  7660  15E8  0084               	movwf	4
  7661  15E9  30FF               	movlw	255
  7662  15EA  0580               	andwf	0,f
  7663  15EB  0A84               	incf	4,f
  7664  15EC  30FF               	movlw	255
  7665  15ED  0580               	andwf	0,f
  7666  15EE  0A84               	incf	4,f
  7667  15EF  30FF               	movlw	255
  7668  15F0  0580               	andwf	0,f
  7669  15F1  0A84               	incf	4,f
  7670  15F2  3000               	movlw	0
  7671  15F3  0580               	andwf	0,f
  7672  15F4  3075               	movlw	low (__div_to_l_@f2| 0)
  7673  15F5  0084               	movwf	4
  7674  15F6  3000               	movlw	0
  7675  15F7  0480               	iorwf	0,f
  7676  15F8  0A84               	incf	4,f
  7677  15F9  3000               	movlw	0
  7678  15FA  0480               	iorwf	0,f
  7679  15FB  0A84               	incf	4,f
  7680  15FC  3080               	movlw	128
  7681  15FD  0480               	iorwf	0,f
  7682  15FE  0A84               	incf	4,f
  7683  15FF  3000               	movlw	0
  7684  1600  0480               	iorwf	0,f
  7685  1601  3075               	movlw	low (__div_to_l_@f2| 0)
  7686  1602  0084               	movwf	4
  7687  1603  30FF               	movlw	255
  7688  1604  0580               	andwf	0,f
  7689  1605  0A84               	incf	4,f
  7690  1606  30FF               	movlw	255
  7691  1607  0580               	andwf	0,f
  7692  1608  0A84               	incf	4,f
  7693  1609  30FF               	movlw	255
  7694  160A  0580               	andwf	0,f
  7695  160B  0A84               	incf	4,f
  7696  160C  3000               	movlw	0
  7697  160D  0580               	andwf	0,f
  7698  160E                     l2692:
  7699  160E  3000               	movlw	0
  7700  160F  00AB               	movwf	__div_to_l_@quot+3
  7701  1610  3000               	movlw	0
  7702  1611  00AA               	movwf	__div_to_l_@quot+2
  7703  1612  3000               	movlw	0
  7704  1613  00A9               	movwf	__div_to_l_@quot+1
  7705  1614  3000               	movlw	0
  7706  1615  00A8               	movwf	__div_to_l_@quot
  7707  1616                     l2694:
  7708  1616  307F               	movlw	127
  7709  1617  02AD               	subwf	__div_to_l_@exp1,f
  7710  1618                     l2696:
  7711  1618  30A0               	movlw	160
  7712  1619  072C               	addwf	__div_to_l_@cntr,w
  7713  161A  00A0               	movwf	??__div_to_l_
  7714  161B  0820               	movf	??__div_to_l_,w
  7715  161C  02AD               	subwf	__div_to_l_@exp1,f
  7716  161D                     l2698:
  7717  161D  3020               	movlw	32
  7718  161E  00A0               	movwf	??__div_to_l_
  7719  161F  0820               	movf	??__div_to_l_,w
  7720  1620  00AC               	movwf	__div_to_l_@cntr
  7721  1621                     l2700:
  7722  1621  3001               	movlw	1
  7723  1622  00A0               	movwf	??__div_to_l_
  7724  1623                     u3365:
  7725  1623  1003               	clrc
  7726  1624  0DA8               	rlf	__div_to_l_@quot,f
  7727  1625  0DA9               	rlf	__div_to_l_@quot+1,f
  7728  1626  0DAA               	rlf	__div_to_l_@quot+2,f
  7729  1627  0DAB               	rlf	__div_to_l_@quot+3,f
  7730  1628  0BA0               	decfsz	??__div_to_l_,f
  7731  1629  2E23               	goto	u3365
  7732  162A                     l2702:
  7733  162A  3075               	movlw	low (__div_to_l_@f2| 0)
  7734  162B  0084               	movwf	4
  7735  162C  0800               	movf	0,w
  7736  162D  00A0               	movwf	??__div_to_l_
  7737  162E  0A84               	incf	4,f
  7738  162F  0800               	movf	0,w
  7739  1630  00A1               	movwf	??__div_to_l_+1
  7740  1631  0A84               	incf	4,f
  7741  1632  0800               	movf	0,w
  7742  1633  00A2               	movwf	??__div_to_l_+2
  7743  1634  0A84               	incf	4,f
  7744  1635  0800               	movf	0,w
  7745  1636  00A3               	movwf	??__div_to_l_+3
  7746  1637  3072               	movlw	low (__div_to_l_@f1| 0)
  7747  1638  0084               	movwf	4
  7748  1639  0800               	movf	0,w
  7749  163A  00A4               	movwf	??__div_to_l_+4
  7750  163B  0A84               	incf	4,f
  7751  163C  0800               	movf	0,w
  7752  163D  00A5               	movwf	??__div_to_l_+5
  7753  163E  0A84               	incf	4,f
  7754  163F  0800               	movf	0,w
  7755  1640  00A6               	movwf	??__div_to_l_+6
  7756  1641  0A84               	incf	4,f
  7757  1642  0800               	movf	0,w
  7758  1643  00A7               	movwf	??__div_to_l_+7
  7759  1644  0823               	movf	??__div_to_l_+3,w
  7760  1645  0227               	subwf	??__div_to_l_+7,w
  7761  1646  1D03               	skipz
  7762  1647  2E52               	goto	u3375
  7763  1648  0822               	movf	??__div_to_l_+2,w
  7764  1649  0226               	subwf	??__div_to_l_+6,w
  7765  164A  1D03               	skipz
  7766  164B  2E52               	goto	u3375
  7767  164C  0821               	movf	??__div_to_l_+1,w
  7768  164D  0225               	subwf	??__div_to_l_+5,w
  7769  164E  1D03               	skipz
  7770  164F  2E52               	goto	u3375
  7771  1650  0820               	movf	??__div_to_l_,w
  7772  1651  0224               	subwf	??__div_to_l_+4,w
  7773  1652                     u3375:
  7774  1652  1C03               	skipc
  7775  1653  2E55               	goto	u3371
  7776  1654  2E56               	goto	u3370
  7777  1655                     u3371:
  7778  1655  2E79               	goto	l689
  7779  1656                     u3370:
  7780  1656                     l2704:
  7781  1656  3075               	movlw	low (__div_to_l_@f2| 0)
  7782  1657  0084               	movwf	4
  7783  1658  0800               	movf	0,w
  7784  1659  00A0               	movwf	??__div_to_l_
  7785  165A  0A84               	incf	4,f
  7786  165B  0800               	movf	0,w
  7787  165C  00A1               	movwf	??__div_to_l_+1
  7788  165D  0A84               	incf	4,f
  7789  165E  0800               	movf	0,w
  7790  165F  00A2               	movwf	??__div_to_l_+2
  7791  1660  0A84               	incf	4,f
  7792  1661  0800               	movf	0,w
  7793  1662  00A3               	movwf	??__div_to_l_+3
  7794  1663  3072               	movlw	low (__div_to_l_@f1| 0)
  7795  1664  0084               	movwf	4
  7796  1665  0820               	movf	??__div_to_l_,w
  7797  1666  0280               	subwf	0,f
  7798  1667  0A84               	incf	4,f
  7799  1668  0821               	movf	??__div_to_l_+1,w
  7800  1669  1C03               	skipc
  7801  166A  0F21               	incfsz	??__div_to_l_+1,w
  7802  166B  0280               	subwf	0,f
  7803  166C  0A84               	incf	4,f
  7804  166D  0822               	movf	??__div_to_l_+2,w
  7805  166E  1C03               	skipc
  7806  166F  0F22               	incfsz	??__div_to_l_+2,w
  7807  1670  0280               	subwf	0,f
  7808  1671  0A84               	incf	4,f
  7809  1672  0823               	movf	??__div_to_l_+3,w
  7810  1673  1C03               	skipc
  7811  1674  0A23               	incf	??__div_to_l_+3,w
  7812  1675  0280               	subwf	0,f
  7813  1676  3003               	movlw	3
  7814  1677  0284               	subwf	4,f
  7815  1678                     l2706:
  7816  1678  1428               	bsf	__div_to_l_@quot,0
  7817  1679                     l689:
  7818  1679  3072               	movlw	low (__div_to_l_@f1| 0)
  7819  167A  0084               	movwf	4
  7820  167B  1003               	clrc
  7821  167C  0D80               	rlf	0,f
  7822  167D  0A84               	incf	4,f
  7823  167E  0D80               	rlf	0,f
  7824  167F  0A84               	incf	4,f
  7825  1680  0D80               	rlf	0,f
  7826  1681  0A84               	incf	4,f
  7827  1682  0D80               	rlf	0,f
  7828  1683  0384               	decf	4,f
  7829  1684  0384               	decf	4,f
  7830  1685  0384               	decf	4,f
  7831  1686                     l2708:
  7832  1686  3001               	movlw	1
  7833  1687  02AC               	subwf	__div_to_l_@cntr,f
  7834  1688  1D03               	btfss	3,2
  7835  1689  2E8B               	goto	u3381
  7836  168A  2E8C               	goto	u3380
  7837  168B                     u3381:
  7838  168B  2E21               	goto	l2700
  7839  168C                     u3380:
  7840  168C                     l690:
  7841  168C  1FAD               	btfss	__div_to_l_@exp1,7
  7842  168D  2E8F               	goto	u3391
  7843  168E  2E90               	goto	u3390
  7844  168F                     u3391:
  7845  168F  2EAA               	goto	l2718
  7846  1690                     u3390:
  7847  1690                     l2710:
  7848  1690  082D               	movf	__div_to_l_@exp1,w
  7849  1691  3A80               	xorlw	128
  7850  1692  3E9F               	addlw	159
  7851  1693  1803               	skipnc
  7852  1694  2E96               	goto	u3401
  7853  1695  2E97               	goto	u3400
  7854  1696                     u3401:
  7855  1696  2E98               	goto	l2716
  7856  1697                     u3400:
  7857  1697  2DB8               	goto	l2680
  7858  1698                     l2716:
  7859  1698  3001               	movlw	1
  7860  1699                     u3415:
  7861  1699  1003               	clrc
  7862  169A  0CAB               	rrf	__div_to_l_@quot+3,f
  7863  169B  0CAA               	rrf	__div_to_l_@quot+2,f
  7864  169C  0CA9               	rrf	__div_to_l_@quot+1,f
  7865  169D  0CA8               	rrf	__div_to_l_@quot,f
  7866  169E  3EFF               	addlw	-1
  7867  169F  1D03               	skipz
  7868  16A0  2E99               	goto	u3415
  7869  16A1  3001               	movlw	1
  7870  16A2  00A0               	movwf	??__div_to_l_
  7871  16A3  0820               	movf	??__div_to_l_,w
  7872  16A4  07AD               	addwf	__div_to_l_@exp1,f
  7873  16A5  1D03               	btfss	3,2
  7874  16A6  2EA8               	goto	u3421
  7875  16A7  2EA9               	goto	u3420
  7876  16A8                     u3421:
  7877  16A8  2E98               	goto	l2716
  7878  16A9                     u3420:
  7879  16A9  2EC1               	goto	l2726
  7880  16AA                     l2718:
  7881  16AA  3020               	movlw	32
  7882  16AB  022D               	subwf	__div_to_l_@exp1,w
  7883  16AC  1C03               	skipc
  7884  16AD  2EAF               	goto	u3431
  7885  16AE  2EB0               	goto	u3430
  7886  16AF                     u3431:
  7887  16AF  2EBC               	goto	l697
  7888  16B0                     u3430:
  7889  16B0  2DB8               	goto	l2680
  7890  16B1                     l2724:
  7891  16B1  3001               	movlw	1
  7892  16B2  00A0               	movwf	??__div_to_l_
  7893  16B3                     u3445:
  7894  16B3  1003               	clrc
  7895  16B4  0DA8               	rlf	__div_to_l_@quot,f
  7896  16B5  0DA9               	rlf	__div_to_l_@quot+1,f
  7897  16B6  0DAA               	rlf	__div_to_l_@quot+2,f
  7898  16B7  0DAB               	rlf	__div_to_l_@quot+3,f
  7899  16B8  0BA0               	decfsz	??__div_to_l_,f
  7900  16B9  2EB3               	goto	u3445
  7901  16BA  3001               	movlw	1
  7902  16BB  02AD               	subwf	__div_to_l_@exp1,f
  7903  16BC                     l697:
  7904  16BC  082D               	movf	__div_to_l_@exp1,w
  7905  16BD  1D03               	btfss	3,2
  7906  16BE  2EC0               	goto	u3451
  7907  16BF  2EC1               	goto	u3450
  7908  16C0                     u3451:
  7909  16C0  2EB1               	goto	l2724
  7910  16C1                     u3450:
  7911  16C1                     l2726:
  7912  16C1  082B               	movf	__div_to_l_@quot+3,w
  7913  16C2  00F5               	movwf	?__div_to_l_+3
  7914  16C3  082A               	movf	__div_to_l_@quot+2,w
  7915  16C4  00F4               	movwf	?__div_to_l_+2
  7916  16C5  0829               	movf	__div_to_l_@quot+1,w
  7917  16C6  00F3               	movwf	?__div_to_l_+1
  7918  16C7  0828               	movf	__div_to_l_@quot,w
  7919  16C8  00F2               	movwf	?__div_to_l_
  7920  16C9                     l686:
  7921  16C9  0008               	return
  7922  16CA                     __end_of__div_to_l_:
  7923                           
  7924                           	psect	text39
  7925  0803                     __ptext39:	
  7926 ;; *************** function ___wmul *****************
  7927 ;; Defined at:
  7928 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  7929 ;; Parameters:    Size  Location     Type
  7930 ;;  multiplier      2    2[COMMON] unsigned int 
  7931 ;;  multiplicand    2    4[COMMON] unsigned int 
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;  product         2    6[COMMON] unsigned int 
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  2    2[COMMON] unsigned int 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7943 ;;      Params:         4       0       0       0       0
  7944 ;;      Locals:         2       0       0       0       0
  7945 ;;      Temps:          0       0       0       0       0
  7946 ;;      Totals:         6       0       0       0       0
  7947 ;;Total ram usage:        6 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    1
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_Mapeo_M
  7954 ;;		_sprintf
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           
  7959                           ;psect for function ___wmul
  7960  0803                     ___wmul:
  7961  0803                     l2730:	
  7962                           ;incstack = 0
  7963                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7964                           
  7965  0803  01F6               	clrf	___wmul@product
  7966  0804  01F7               	clrf	___wmul@product+1
  7967  0805                     l2732:
  7968  0805  1C72               	btfss	___wmul@multiplier,0
  7969  0806  2808               	goto	u3461
  7970  0807  2809               	goto	u3460
  7971  0808                     u3461:
  7972  0808  280F               	goto	l480
  7973  0809                     u3460:
  7974  0809                     l2734:
  7975  0809  0874               	movf	___wmul@multiplicand,w
  7976  080A  07F6               	addwf	___wmul@product,f
  7977  080B  1803               	skipnc
  7978  080C  0AF7               	incf	___wmul@product+1,f
  7979  080D  0875               	movf	___wmul@multiplicand+1,w
  7980  080E  07F7               	addwf	___wmul@product+1,f
  7981  080F                     l480:
  7982  080F  3001               	movlw	1
  7983  0810                     u3475:
  7984  0810  1003               	clrc
  7985  0811  0DF4               	rlf	___wmul@multiplicand,f
  7986  0812  0DF5               	rlf	___wmul@multiplicand+1,f
  7987  0813  3EFF               	addlw	-1
  7988  0814  1D03               	skipz
  7989  0815  2810               	goto	u3475
  7990  0816                     l2736:
  7991  0816  3001               	movlw	1
  7992  0817                     u3485:
  7993  0817  1003               	clrc
  7994  0818  0CF3               	rrf	___wmul@multiplier+1,f
  7995  0819  0CF2               	rrf	___wmul@multiplier,f
  7996  081A  3EFF               	addlw	-1
  7997  081B  1D03               	skipz
  7998  081C  2817               	goto	u3485
  7999  081D                     l2738:
  8000  081D  0872               	movf	___wmul@multiplier,w
  8001  081E  0473               	iorwf	___wmul@multiplier+1,w
  8002  081F  1D03               	btfss	3,2
  8003  0820  2822               	goto	u3491
  8004  0821  2823               	goto	u3490
  8005  0822                     u3491:
  8006  0822  2805               	goto	l2732
  8007  0823                     u3490:
  8008  0823                     l2740:
  8009  0823  0877               	movf	___wmul@product+1,w
  8010  0824  00F3               	movwf	?___wmul+1
  8011  0825  0876               	movf	___wmul@product,w
  8012  0826  00F2               	movwf	?___wmul
  8013  0827                     l482:
  8014  0827  0008               	return
  8015  0828                     __end_of___wmul:
  8016                           
  8017                           	psect	text40
  8018  1D0E                     __ptext40:	
  8019 ;; *************** function ___lltoft *****************
  8020 ;; Defined at:
  8021 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lltoft.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  c               4    0[BANK0 ] unsigned long 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  exp             1    5[BANK0 ] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  3    0[BANK0 ] float 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0, pclath, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8035 ;;      Params:         0       4       0       0       0
  8036 ;;      Locals:         0       1       0       0       0
  8037 ;;      Temps:          0       1       0       0       0
  8038 ;;      Totals:         0       6       0       0       0
  8039 ;;Total ram usage:        6 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    2
  8042 ;; This function calls:
  8043 ;;		___ftpack
  8044 ;; This function is called by:
  8045 ;;		_sprintf
  8046 ;; This function uses a non-reentrant model
  8047 ;;
  8048                           
  8049                           
  8050                           ;psect for function ___lltoft
  8051  1D0E                     ___lltoft:
  8052  1D0E                     l3836:	
  8053                           ;incstack = 0
  8054                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8055                           
  8056  1D0E  308E               	movlw	142
  8057  1D0F  1283               	bcf	3,5	;RP0=0, select bank0
  8058  1D10  1303               	bcf	3,6	;RP1=0, select bank0
  8059  1D11  00A4               	movwf	??___lltoft
  8060  1D12  0824               	movf	??___lltoft,w
  8061  1D13  00A5               	movwf	___lltoft@exp
  8062  1D14  2D22               	goto	l3840
  8063  1D15                     l3838:
  8064  1D15  3001               	movlw	1
  8065  1D16                     u5415:
  8066  1D16  1003               	clrc
  8067  1D17  0CA3               	rrf	___lltoft@c+3,f
  8068  1D18  0CA2               	rrf	___lltoft@c+2,f
  8069  1D19  0CA1               	rrf	___lltoft@c+1,f
  8070  1D1A  0CA0               	rrf	___lltoft@c,f
  8071  1D1B  3EFF               	addlw	-1
  8072  1D1C  1D03               	skipz
  8073  1D1D  2D16               	goto	u5415
  8074  1D1E  3001               	movlw	1
  8075  1D1F  00A4               	movwf	??___lltoft
  8076  1D20  0824               	movf	??___lltoft,w
  8077  1D21  07A5               	addwf	___lltoft@exp,f
  8078  1D22                     l3840:
  8079  1D22  30FF               	movlw	255
  8080  1D23  0523               	andwf	___lltoft@c+3,w
  8081  1D24  1D03               	btfss	3,2
  8082  1D25  2D27               	goto	u5421
  8083  1D26  2D28               	goto	u5420
  8084  1D27                     u5421:
  8085  1D27  2D15               	goto	l3838
  8086  1D28                     u5420:
  8087  1D28                     l3842:
  8088  1D28  0820               	movf	___lltoft@c,w
  8089  1D29  00F2               	movwf	___ftpack@arg
  8090  1D2A  0821               	movf	___lltoft@c+1,w
  8091  1D2B  00F3               	movwf	___ftpack@arg+1
  8092  1D2C  0822               	movf	___lltoft@c+2,w
  8093  1D2D  00F4               	movwf	___ftpack@arg+2
  8094  1D2E  0825               	movf	___lltoft@exp,w
  8095  1D2F  00A4               	movwf	??___lltoft
  8096  1D30  0824               	movf	??___lltoft,w
  8097  1D31  00F5               	movwf	___ftpack@exp
  8098  1D32  01F6               	clrf	___ftpack@sign
  8099  1D33  160A  118A  23A3  160A  158A  	fcall	___ftpack
  8100  1D38  0872               	movf	?___ftpack,w
  8101  1D39  1283               	bcf	3,5	;RP0=0, select bank0
  8102  1D3A  1303               	bcf	3,6	;RP1=0, select bank0
  8103  1D3B  00A0               	movwf	?___lltoft
  8104  1D3C  0873               	movf	?___ftpack+1,w
  8105  1D3D  00A1               	movwf	?___lltoft+1
  8106  1D3E  0874               	movf	?___ftpack+2,w
  8107  1D3F  00A2               	movwf	?___lltoft+2
  8108  1D40                     l859:
  8109  1D40  0008               	return
  8110  1D41                     __end_of___lltoft:
  8111                           
  8112                           	psect	text41
  8113  10FB                     __ptext41:	
  8114 ;; *************** function ___llmod *****************
  8115 ;; Defined at:
  8116 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\llmod.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;  divisor         4    6[BANK0 ] unsigned long 
  8119 ;;  dividend        4   10[BANK0 ] unsigned long 
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;  counter         1   15[BANK0 ] unsigned char 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  4    6[BANK0 ] unsigned long 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8131 ;;      Params:         0       8       0       0       0
  8132 ;;      Locals:         0       1       0       0       0
  8133 ;;      Temps:          0       1       0       0       0
  8134 ;;      Totals:         0      10       0       0       0
  8135 ;;Total ram usage:       10 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    1
  8138 ;; This function calls:
  8139 ;;		Nothing
  8140 ;; This function is called by:
  8141 ;;		_sprintf
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           
  8146                           ;psect for function ___llmod
  8147  10FB                     ___llmod:
  8148  10FB                     l3816:	
  8149                           ;incstack = 0
  8150                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8151                           
  8152  10FB  1283               	bcf	3,5	;RP0=0, select bank0
  8153  10FC  1303               	bcf	3,6	;RP1=0, select bank0
  8154  10FD  0829               	movf	___llmod@divisor+3,w
  8155  10FE  0428               	iorwf	___llmod@divisor+2,w
  8156  10FF  0427               	iorwf	___llmod@divisor+1,w
  8157  1100  0426               	iorwf	___llmod@divisor,w
  8158  1101  1903               	skipnz
  8159  1102  2904               	goto	u5351
  8160  1103  2905               	goto	u5350
  8161  1104                     u5351:
  8162  1104  2948               	goto	l3832
  8163  1105                     u5350:
  8164  1105                     l3818:
  8165  1105  01AF               	clrf	___llmod@counter
  8166  1106  0AAF               	incf	___llmod@counter,f
  8167  1107  2915               	goto	l3822
  8168  1108                     l3820:
  8169  1108  3001               	movlw	1
  8170  1109  00AE               	movwf	??___llmod
  8171  110A                     u5365:
  8172  110A  1003               	clrc
  8173  110B  0DA6               	rlf	___llmod@divisor,f
  8174  110C  0DA7               	rlf	___llmod@divisor+1,f
  8175  110D  0DA8               	rlf	___llmod@divisor+2,f
  8176  110E  0DA9               	rlf	___llmod@divisor+3,f
  8177  110F  0BAE               	decfsz	??___llmod,f
  8178  1110  290A               	goto	u5365
  8179  1111  3001               	movlw	1
  8180  1112  00AE               	movwf	??___llmod
  8181  1113  082E               	movf	??___llmod,w
  8182  1114  07AF               	addwf	___llmod@counter,f
  8183  1115                     l3822:
  8184  1115  1FA9               	btfss	___llmod@divisor+3,7
  8185  1116  2918               	goto	u5371
  8186  1117  2919               	goto	u5370
  8187  1118                     u5371:
  8188  1118  2908               	goto	l3820
  8189  1119                     u5370:
  8190  1119                     l3824:
  8191  1119  0829               	movf	___llmod@divisor+3,w
  8192  111A  022D               	subwf	___llmod@dividend+3,w
  8193  111B  1D03               	skipz
  8194  111C  2927               	goto	u5385
  8195  111D  0828               	movf	___llmod@divisor+2,w
  8196  111E  022C               	subwf	___llmod@dividend+2,w
  8197  111F  1D03               	skipz
  8198  1120  2927               	goto	u5385
  8199  1121  0827               	movf	___llmod@divisor+1,w
  8200  1122  022B               	subwf	___llmod@dividend+1,w
  8201  1123  1D03               	skipz
  8202  1124  2927               	goto	u5385
  8203  1125  0826               	movf	___llmod@divisor,w
  8204  1126  022A               	subwf	___llmod@dividend,w
  8205  1127                     u5385:
  8206  1127  1C03               	skipc
  8207  1128  292A               	goto	u5381
  8208  1129  292B               	goto	u5380
  8209  112A                     u5381:
  8210  112A  2939               	goto	l3828
  8211  112B                     u5380:
  8212  112B                     l3826:
  8213  112B  0826               	movf	___llmod@divisor,w
  8214  112C  02AA               	subwf	___llmod@dividend,f
  8215  112D  0827               	movf	___llmod@divisor+1,w
  8216  112E  1C03               	skipc
  8217  112F  0F27               	incfsz	___llmod@divisor+1,w
  8218  1130  02AB               	subwf	___llmod@dividend+1,f
  8219  1131  0828               	movf	___llmod@divisor+2,w
  8220  1132  1C03               	skipc
  8221  1133  0F28               	incfsz	___llmod@divisor+2,w
  8222  1134  02AC               	subwf	___llmod@dividend+2,f
  8223  1135  0829               	movf	___llmod@divisor+3,w
  8224  1136  1C03               	skipc
  8225  1137  0F29               	incfsz	___llmod@divisor+3,w
  8226  1138  02AD               	subwf	___llmod@dividend+3,f
  8227  1139                     l3828:
  8228  1139  3001               	movlw	1
  8229  113A                     u5395:
  8230  113A  1003               	clrc
  8231  113B  0CA9               	rrf	___llmod@divisor+3,f
  8232  113C  0CA8               	rrf	___llmod@divisor+2,f
  8233  113D  0CA7               	rrf	___llmod@divisor+1,f
  8234  113E  0CA6               	rrf	___llmod@divisor,f
  8235  113F  3EFF               	addlw	-1
  8236  1140  1D03               	skipz
  8237  1141  293A               	goto	u5395
  8238  1142                     l3830:
  8239  1142  3001               	movlw	1
  8240  1143  02AF               	subwf	___llmod@counter,f
  8241  1144  1D03               	btfss	3,2
  8242  1145  2947               	goto	u5401
  8243  1146  2948               	goto	u5400
  8244  1147                     u5401:
  8245  1147  2919               	goto	l3824
  8246  1148                     u5400:
  8247  1148                     l3832:
  8248  1148  082D               	movf	___llmod@dividend+3,w
  8249  1149  00A9               	movwf	?___llmod+3
  8250  114A  082C               	movf	___llmod@dividend+2,w
  8251  114B  00A8               	movwf	?___llmod+2
  8252  114C  082B               	movf	___llmod@dividend+1,w
  8253  114D  00A7               	movwf	?___llmod+1
  8254  114E  082A               	movf	___llmod@dividend,w
  8255  114F  00A6               	movwf	?___llmod
  8256  1150                     l851:
  8257  1150  0008               	return
  8258  1151                     __end_of___llmod:
  8259                           
  8260                           	psect	text42
  8261  1264                     __ptext42:	
  8262 ;; *************** function ___lldiv *****************
  8263 ;; Defined at:
  8264 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\__lldiv.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  divisor         4    2[COMMON] unsigned long 
  8267 ;;  dividend        4    6[COMMON] unsigned long 
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;  quotient        4    1[BANK0 ] unsigned long 
  8270 ;;  counter         1    5[BANK0 ] unsigned char 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  4    2[COMMON] unsigned long 
  8273 ;; Registers used:
  8274 ;;		wreg, status,2, status,0
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8280 ;;      Params:         8       0       0       0       0
  8281 ;;      Locals:         0       5       0       0       0
  8282 ;;      Temps:          0       1       0       0       0
  8283 ;;      Totals:         8       6       0       0       0
  8284 ;;Total ram usage:       14 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    1
  8287 ;; This function calls:
  8288 ;;		Nothing
  8289 ;; This function is called by:
  8290 ;;		_sprintf
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function ___lldiv
  8296  1264                     ___lldiv:
  8297  1264                     l3784:	
  8298                           ;incstack = 0
  8299                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8300                           
  8301  1264  3000               	movlw	0
  8302  1265  1283               	bcf	3,5	;RP0=0, select bank0
  8303  1266  1303               	bcf	3,6	;RP1=0, select bank0
  8304  1267  00A4               	movwf	___lldiv@quotient+3
  8305  1268  3000               	movlw	0
  8306  1269  00A3               	movwf	___lldiv@quotient+2
  8307  126A  3000               	movlw	0
  8308  126B  00A2               	movwf	___lldiv@quotient+1
  8309  126C  3000               	movlw	0
  8310  126D  00A1               	movwf	___lldiv@quotient
  8311  126E  0875               	movf	___lldiv@divisor+3,w
  8312  126F  0474               	iorwf	___lldiv@divisor+2,w
  8313  1270  0473               	iorwf	___lldiv@divisor+1,w
  8314  1271  0472               	iorwf	___lldiv@divisor,w
  8315  1272  1903               	skipnz
  8316  1273  2A75               	goto	u5271
  8317  1274  2A76               	goto	u5270
  8318  1275                     u5271:
  8319  1275  2AC3               	goto	l3804
  8320  1276                     u5270:
  8321  1276                     l3786:
  8322  1276  01A5               	clrf	___lldiv@counter
  8323  1277  0AA5               	incf	___lldiv@counter,f
  8324  1278  2A86               	goto	l3790
  8325  1279                     l3788:
  8326  1279  3001               	movlw	1
  8327  127A  00A0               	movwf	??___lldiv
  8328  127B                     u5285:
  8329  127B  1003               	clrc
  8330  127C  0DF2               	rlf	___lldiv@divisor,f
  8331  127D  0DF3               	rlf	___lldiv@divisor+1,f
  8332  127E  0DF4               	rlf	___lldiv@divisor+2,f
  8333  127F  0DF5               	rlf	___lldiv@divisor+3,f
  8334  1280  0BA0               	decfsz	??___lldiv,f
  8335  1281  2A7B               	goto	u5285
  8336  1282  3001               	movlw	1
  8337  1283  00A0               	movwf	??___lldiv
  8338  1284  0820               	movf	??___lldiv,w
  8339  1285  07A5               	addwf	___lldiv@counter,f
  8340  1286                     l3790:
  8341  1286  1FF5               	btfss	___lldiv@divisor+3,7
  8342  1287  2A89               	goto	u5291
  8343  1288  2A8A               	goto	u5290
  8344  1289                     u5291:
  8345  1289  2A79               	goto	l3788
  8346  128A                     u5290:
  8347  128A                     l3792:
  8348  128A  3001               	movlw	1
  8349  128B  00A0               	movwf	??___lldiv
  8350  128C                     u5305:
  8351  128C  1003               	clrc
  8352  128D  0DA1               	rlf	___lldiv@quotient,f
  8353  128E  0DA2               	rlf	___lldiv@quotient+1,f
  8354  128F  0DA3               	rlf	___lldiv@quotient+2,f
  8355  1290  0DA4               	rlf	___lldiv@quotient+3,f
  8356  1291  0BA0               	decfsz	??___lldiv,f
  8357  1292  2A8C               	goto	u5305
  8358  1293                     l3794:
  8359  1293  0875               	movf	___lldiv@divisor+3,w
  8360  1294  0279               	subwf	___lldiv@dividend+3,w
  8361  1295  1D03               	skipz
  8362  1296  2AA1               	goto	u5315
  8363  1297  0874               	movf	___lldiv@divisor+2,w
  8364  1298  0278               	subwf	___lldiv@dividend+2,w
  8365  1299  1D03               	skipz
  8366  129A  2AA1               	goto	u5315
  8367  129B  0873               	movf	___lldiv@divisor+1,w
  8368  129C  0277               	subwf	___lldiv@dividend+1,w
  8369  129D  1D03               	skipz
  8370  129E  2AA1               	goto	u5315
  8371  129F  0872               	movf	___lldiv@divisor,w
  8372  12A0  0276               	subwf	___lldiv@dividend,w
  8373  12A1                     u5315:
  8374  12A1  1C03               	skipc
  8375  12A2  2AA4               	goto	u5311
  8376  12A3  2AA5               	goto	u5310
  8377  12A4                     u5311:
  8378  12A4  2AB4               	goto	l3800
  8379  12A5                     u5310:
  8380  12A5                     l3796:
  8381  12A5  0872               	movf	___lldiv@divisor,w
  8382  12A6  02F6               	subwf	___lldiv@dividend,f
  8383  12A7  0873               	movf	___lldiv@divisor+1,w
  8384  12A8  1C03               	skipc
  8385  12A9  0F73               	incfsz	___lldiv@divisor+1,w
  8386  12AA  02F7               	subwf	___lldiv@dividend+1,f
  8387  12AB  0874               	movf	___lldiv@divisor+2,w
  8388  12AC  1C03               	skipc
  8389  12AD  0F74               	incfsz	___lldiv@divisor+2,w
  8390  12AE  02F8               	subwf	___lldiv@dividend+2,f
  8391  12AF  0875               	movf	___lldiv@divisor+3,w
  8392  12B0  1C03               	skipc
  8393  12B1  0F75               	incfsz	___lldiv@divisor+3,w
  8394  12B2  02F9               	subwf	___lldiv@dividend+3,f
  8395  12B3                     l3798:
  8396  12B3  1421               	bsf	___lldiv@quotient,0
  8397  12B4                     l3800:
  8398  12B4  3001               	movlw	1
  8399  12B5                     u5325:
  8400  12B5  1003               	clrc
  8401  12B6  0CF5               	rrf	___lldiv@divisor+3,f
  8402  12B7  0CF4               	rrf	___lldiv@divisor+2,f
  8403  12B8  0CF3               	rrf	___lldiv@divisor+1,f
  8404  12B9  0CF2               	rrf	___lldiv@divisor,f
  8405  12BA  3EFF               	addlw	-1
  8406  12BB  1D03               	skipz
  8407  12BC  2AB5               	goto	u5325
  8408  12BD                     l3802:
  8409  12BD  3001               	movlw	1
  8410  12BE  02A5               	subwf	___lldiv@counter,f
  8411  12BF  1D03               	btfss	3,2
  8412  12C0  2AC2               	goto	u5331
  8413  12C1  2AC3               	goto	u5330
  8414  12C2                     u5331:
  8415  12C2  2A8A               	goto	l3792
  8416  12C3                     u5330:
  8417  12C3                     l3804:
  8418  12C3  0824               	movf	___lldiv@quotient+3,w
  8419  12C4  00F5               	movwf	?___lldiv+3
  8420  12C5  0823               	movf	___lldiv@quotient+2,w
  8421  12C6  00F4               	movwf	?___lldiv+2
  8422  12C7  0822               	movf	___lldiv@quotient+1,w
  8423  12C8  00F3               	movwf	?___lldiv+1
  8424  12C9  0821               	movf	___lldiv@quotient,w
  8425  12CA  00F2               	movwf	?___lldiv
  8426  12CB                     l516:
  8427  12CB  0008               	return
  8428  12CC                     __end_of___lldiv:
  8429                           
  8430                           	psect	text43
  8431  0828                     __ptext43:	
  8432 ;; *************** function ___fttol *****************
  8433 ;; Defined at:
  8434 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fttol.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;  f1              3   37[BANK0 ] float 
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;  lval            4   46[BANK0 ] unsigned long 
  8439 ;;  exp1            1   50[BANK0 ] unsigned char 
  8440 ;;  sign1           1   45[BANK0 ] unsigned char 
  8441 ;; Return value:  Size  Location     Type
  8442 ;;                  4   37[BANK0 ] long 
  8443 ;; Registers used:
  8444 ;;		wreg, status,2, status,0
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8450 ;;      Params:         0       4       0       0       0
  8451 ;;      Locals:         0       6       0       0       0
  8452 ;;      Temps:          0       4       0       0       0
  8453 ;;      Totals:         0      14       0       0       0
  8454 ;;Total ram usage:       14 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    1
  8457 ;; This function calls:
  8458 ;;		Nothing
  8459 ;; This function is called by:
  8460 ;;		_sprintf
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464                           
  8465                           ;psect for function ___fttol
  8466  0828                     ___fttol:
  8467  0828                     l2804:	
  8468                           ;incstack = 0
  8469                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8470                           
  8471  0828  1283               	bcf	3,5	;RP0=0, select bank0
  8472  0829  1303               	bcf	3,6	;RP1=0, select bank0
  8473  082A  0845               	movf	___fttol@f1,w
  8474  082B  00C9               	movwf	??___fttol
  8475  082C  0846               	movf	___fttol@f1+1,w
  8476  082D  00CA               	movwf	??___fttol+1
  8477  082E  0847               	movf	___fttol@f1+2,w
  8478  082F  00CB               	movwf	??___fttol+2
  8479  0830  1003               	clrc
  8480  0831  0D4A               	rlf	??___fttol+1,w
  8481  0832  0D4B               	rlf	??___fttol+2,w
  8482  0833  00CC               	movwf	??___fttol+3
  8483  0834  084C               	movf	??___fttol+3,w
  8484  0835  00D2               	movwf	___fttol@exp1
  8485  0836  0852               	movf	___fttol@exp1,w
  8486  0837  1D03               	btfss	3,2
  8487  0838  283A               	goto	u3621
  8488  0839  283B               	goto	u3620
  8489  083A                     u3621:
  8490  083A  2844               	goto	l2810
  8491  083B                     u3620:
  8492  083B                     l2806:
  8493  083B  3000               	movlw	0
  8494  083C  00C8               	movwf	?___fttol+3
  8495  083D  3000               	movlw	0
  8496  083E  00C7               	movwf	?___fttol+2
  8497  083F  3000               	movlw	0
  8498  0840  00C6               	movwf	?___fttol+1
  8499  0841  3000               	movlw	0
  8500  0842  00C5               	movwf	?___fttol
  8501  0843  28B3               	goto	l810
  8502  0844                     l2810:
  8503  0844  0845               	movf	___fttol@f1,w
  8504  0845  00C9               	movwf	??___fttol
  8505  0846  0846               	movf	___fttol@f1+1,w
  8506  0847  00CA               	movwf	??___fttol+1
  8507  0848  0847               	movf	___fttol@f1+2,w
  8508  0849  00CB               	movwf	??___fttol+2
  8509  084A  3017               	movlw	23
  8510  084B                     u3635:
  8511  084B  1003               	clrc
  8512  084C  0CCB               	rrf	??___fttol+2,f
  8513  084D  0CCA               	rrf	??___fttol+1,f
  8514  084E  0CC9               	rrf	??___fttol,f
  8515  084F                     u3630:
  8516  084F  3EFF               	addlw	-1
  8517  0850  1D03               	skipz
  8518  0851  284B               	goto	u3635
  8519  0852  0849               	movf	??___fttol,w
  8520  0853  00CC               	movwf	??___fttol+3
  8521  0854  084C               	movf	??___fttol+3,w
  8522  0855  00CD               	movwf	___fttol@sign1
  8523  0856                     l2812:
  8524  0856  17C6               	bsf	___fttol@f1+1,7
  8525  0857                     l2814:
  8526  0857  30FF               	movlw	255
  8527  0858  05C5               	andwf	___fttol@f1,f
  8528  0859  30FF               	movlw	255
  8529  085A  05C6               	andwf	___fttol@f1+1,f
  8530  085B  3000               	movlw	0
  8531  085C  05C7               	andwf	___fttol@f1+2,f
  8532  085D                     l2816:
  8533  085D  0845               	movf	___fttol@f1,w
  8534  085E  00CE               	movwf	___fttol@lval
  8535  085F  0846               	movf	___fttol@f1+1,w
  8536  0860  00CF               	movwf	___fttol@lval+1
  8537  0861  0847               	movf	___fttol@f1+2,w
  8538  0862  00D0               	movwf	___fttol@lval+2
  8539  0863  01D1               	clrf	___fttol@lval+3
  8540  0864                     l2818:
  8541  0864  308E               	movlw	142
  8542  0865  02D2               	subwf	___fttol@exp1,f
  8543  0866                     l2820:
  8544  0866  1FD2               	btfss	___fttol@exp1,7
  8545  0867  2869               	goto	u3641
  8546  0868  286A               	goto	u3640
  8547  0869                     u3641:
  8548  0869  2884               	goto	l2830
  8549  086A                     u3640:
  8550  086A                     l2822:
  8551  086A  0852               	movf	___fttol@exp1,w
  8552  086B  3A80               	xorlw	128
  8553  086C  3E8F               	addlw	143
  8554  086D  1803               	skipnc
  8555  086E  2870               	goto	u3651
  8556  086F  2871               	goto	u3650
  8557  0870                     u3651:
  8558  0870  2872               	goto	l2828
  8559  0871                     u3650:
  8560  0871  283B               	goto	l2806
  8561  0872                     l2828:
  8562  0872  3001               	movlw	1
  8563  0873                     u3665:
  8564  0873  1003               	clrc
  8565  0874  0CD1               	rrf	___fttol@lval+3,f
  8566  0875  0CD0               	rrf	___fttol@lval+2,f
  8567  0876  0CCF               	rrf	___fttol@lval+1,f
  8568  0877  0CCE               	rrf	___fttol@lval,f
  8569  0878  3EFF               	addlw	-1
  8570  0879  1D03               	skipz
  8571  087A  2873               	goto	u3665
  8572  087B  3001               	movlw	1
  8573  087C  00C9               	movwf	??___fttol
  8574  087D  0849               	movf	??___fttol,w
  8575  087E  07D2               	addwf	___fttol@exp1,f
  8576  087F  1D03               	btfss	3,2
  8577  0880  2882               	goto	u3671
  8578  0881  2883               	goto	u3670
  8579  0882                     u3671:
  8580  0882  2872               	goto	l2828
  8581  0883                     u3670:
  8582  0883  289B               	goto	l2838
  8583  0884                     l2830:
  8584  0884  3018               	movlw	24
  8585  0885  0252               	subwf	___fttol@exp1,w
  8586  0886  1C03               	skipc
  8587  0887  2889               	goto	u3681
  8588  0888  288A               	goto	u3680
  8589  0889                     u3681:
  8590  0889  2896               	goto	l817
  8591  088A                     u3680:
  8592  088A  283B               	goto	l2806
  8593  088B                     l2836:
  8594  088B  3001               	movlw	1
  8595  088C  00C9               	movwf	??___fttol
  8596  088D                     u3695:
  8597  088D  1003               	clrc
  8598  088E  0DCE               	rlf	___fttol@lval,f
  8599  088F  0DCF               	rlf	___fttol@lval+1,f
  8600  0890  0DD0               	rlf	___fttol@lval+2,f
  8601  0891  0DD1               	rlf	___fttol@lval+3,f
  8602  0892  0BC9               	decfsz	??___fttol,f
  8603  0893  288D               	goto	u3695
  8604  0894  3001               	movlw	1
  8605  0895  02D2               	subwf	___fttol@exp1,f
  8606  0896                     l817:
  8607  0896  0852               	movf	___fttol@exp1,w
  8608  0897  1D03               	btfss	3,2
  8609  0898  289A               	goto	u3701
  8610  0899  289B               	goto	u3700
  8611  089A                     u3701:
  8612  089A  288B               	goto	l2836
  8613  089B                     u3700:
  8614  089B                     l2838:
  8615  089B  084D               	movf	___fttol@sign1,w
  8616  089C  1903               	btfsc	3,2
  8617  089D  289F               	goto	u3711
  8618  089E  28A0               	goto	u3710
  8619  089F                     u3711:
  8620  089F  28AB               	goto	l2842
  8621  08A0                     u3710:
  8622  08A0                     l2840:
  8623  08A0  09CE               	comf	___fttol@lval,f
  8624  08A1  09CF               	comf	___fttol@lval+1,f
  8625  08A2  09D0               	comf	___fttol@lval+2,f
  8626  08A3  09D1               	comf	___fttol@lval+3,f
  8627  08A4  0ACE               	incf	___fttol@lval,f
  8628  08A5  1903               	skipnz
  8629  08A6  0ACF               	incf	___fttol@lval+1,f
  8630  08A7  1903               	skipnz
  8631  08A8  0AD0               	incf	___fttol@lval+2,f
  8632  08A9  1903               	skipnz
  8633  08AA  0AD1               	incf	___fttol@lval+3,f
  8634  08AB                     l2842:
  8635  08AB  0851               	movf	___fttol@lval+3,w
  8636  08AC  00C8               	movwf	?___fttol+3
  8637  08AD  0850               	movf	___fttol@lval+2,w
  8638  08AE  00C7               	movwf	?___fttol+2
  8639  08AF  084F               	movf	___fttol@lval+1,w
  8640  08B0  00C6               	movwf	?___fttol+1
  8641  08B1  084E               	movf	___fttol@lval,w
  8642  08B2  00C5               	movwf	?___fttol
  8643  08B3                     l810:
  8644  08B3  0008               	return
  8645  08B4                     __end_of___fttol:
  8646                           
  8647                           	psect	text44
  8648  1CC0                     __ptext44:	
  8649 ;; *************** function ___ftsub *****************
  8650 ;; Defined at:
  8651 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftsub.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;  f2              3   57[BANK0 ] float 
  8654 ;;  f1              3   60[BANK0 ] float 
  8655 ;; Auto vars:     Size  Location     Type
  8656 ;;		None
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  3   57[BANK0 ] float 
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0, pclath, cstack
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8666 ;;      Params:         0       6       0       0       0
  8667 ;;      Locals:         0       0       0       0       0
  8668 ;;      Temps:          0       0       0       0       0
  8669 ;;      Totals:         0       6       0       0       0
  8670 ;;Total ram usage:        6 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; Hardware stack levels required when called:    3
  8673 ;; This function calls:
  8674 ;;		___ftadd
  8675 ;; This function is called by:
  8676 ;;		_sprintf
  8677 ;; This function uses a non-reentrant model
  8678 ;;
  8679                           
  8680                           
  8681                           ;psect for function ___ftsub
  8682  1CC0                     ___ftsub:
  8683  1CC0                     l3808:	
  8684                           ;incstack = 0
  8685                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8686                           
  8687  1CC0  1283               	bcf	3,5	;RP0=0, select bank0
  8688  1CC1  1303               	bcf	3,6	;RP1=0, select bank0
  8689  1CC2  085B               	movf	___ftsub@f2+2,w
  8690  1CC3  045A               	iorwf	___ftsub@f2+1,w
  8691  1CC4  0459               	iorwf	___ftsub@f2,w
  8692  1CC5  1903               	skipnz
  8693  1CC6  2CC8               	goto	u5341
  8694  1CC7  2CC9               	goto	u5340
  8695  1CC8                     u5341:
  8696  1CC8  2CCB               	goto	l3812
  8697  1CC9                     u5340:
  8698  1CC9                     l3810:
  8699  1CC9  3080               	movlw	128
  8700  1CCA  06DB               	xorwf	___ftsub@f2+2,f
  8701  1CCB                     l3812:
  8702  1CCB  085C               	movf	___ftsub@f1,w
  8703  1CCC  00CC               	movwf	___ftadd@f1
  8704  1CCD  085D               	movf	___ftsub@f1+1,w
  8705  1CCE  00CD               	movwf	___ftadd@f1+1
  8706  1CCF  085E               	movf	___ftsub@f1+2,w
  8707  1CD0  00CE               	movwf	___ftadd@f1+2
  8708  1CD1  0859               	movf	___ftsub@f2,w
  8709  1CD2  00CF               	movwf	___ftadd@f2
  8710  1CD3  085A               	movf	___ftsub@f2+1,w
  8711  1CD4  00D0               	movwf	___ftadd@f2+1
  8712  1CD5  085B               	movf	___ftsub@f2+2,w
  8713  1CD6  00D1               	movwf	___ftadd@f2+2
  8714  1CD7  160A  118A  26CA  160A  158A  	fcall	___ftadd
  8715  1CDC  1283               	bcf	3,5	;RP0=0, select bank0
  8716  1CDD  1303               	bcf	3,6	;RP1=0, select bank0
  8717  1CDE  084C               	movf	?___ftadd,w
  8718  1CDF  00D9               	movwf	?___ftsub
  8719  1CE0  084D               	movf	?___ftadd+1,w
  8720  1CE1  00DA               	movwf	?___ftsub+1
  8721  1CE2  084E               	movf	?___ftadd+2,w
  8722  1CE3  00DB               	movwf	?___ftsub+2
  8723  1CE4                     l806:
  8724  1CE4  0008               	return
  8725  1CE5                     __end_of___ftsub:
  8726                           
  8727                           	psect	text45
  8728  16CA                     __ptext45:	
  8729 ;; *************** function ___ftadd *****************
  8730 ;; Defined at:
  8731 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftadd.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;  f1              3   44[BANK0 ] float 
  8734 ;;  f2              3   47[BANK0 ] float 
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;  exp1            1   56[BANK0 ] unsigned char 
  8737 ;;  exp2            1   55[BANK0 ] unsigned char 
  8738 ;;  sign            1   54[BANK0 ] unsigned char 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;                  3   44[BANK0 ] float 
  8741 ;; Registers used:
  8742 ;;		wreg, status,2, status,0, pclath, cstack
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/0
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8748 ;;      Params:         0       6       0       0       0
  8749 ;;      Locals:         0       3       0       0       0
  8750 ;;      Temps:          0       4       0       0       0
  8751 ;;      Totals:         0      13       0       0       0
  8752 ;;Total ram usage:       13 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:    2
  8755 ;; This function calls:
  8756 ;;		___ftpack
  8757 ;; This function is called by:
  8758 ;;		_sprintf
  8759 ;;		___ftsub
  8760 ;; This function uses a non-reentrant model
  8761 ;;
  8762                           
  8763                           
  8764                           ;psect for function ___ftadd
  8765  16CA                     ___ftadd:
  8766  16CA                     l3504:	
  8767                           ;incstack = 0
  8768                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8769                           
  8770  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  8771  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  8772  16CC  084C               	movf	___ftadd@f1,w
  8773  16CD  00D2               	movwf	??___ftadd
  8774  16CE  084D               	movf	___ftadd@f1+1,w
  8775  16CF  00D3               	movwf	??___ftadd+1
  8776  16D0  084E               	movf	___ftadd@f1+2,w
  8777  16D1  00D4               	movwf	??___ftadd+2
  8778  16D2  1003               	clrc
  8779  16D3  0D53               	rlf	??___ftadd+1,w
  8780  16D4  0D54               	rlf	??___ftadd+2,w
  8781  16D5  00D5               	movwf	??___ftadd+3
  8782  16D6  0855               	movf	??___ftadd+3,w
  8783  16D7  00D8               	movwf	___ftadd@exp1
  8784  16D8  084F               	movf	___ftadd@f2,w
  8785  16D9  00D2               	movwf	??___ftadd
  8786  16DA  0850               	movf	___ftadd@f2+1,w
  8787  16DB  00D3               	movwf	??___ftadd+1
  8788  16DC  0851               	movf	___ftadd@f2+2,w
  8789  16DD  00D4               	movwf	??___ftadd+2
  8790  16DE  1003               	clrc
  8791  16DF  0D53               	rlf	??___ftadd+1,w
  8792  16E0  0D54               	rlf	??___ftadd+2,w
  8793  16E1  00D5               	movwf	??___ftadd+3
  8794  16E2  0855               	movf	??___ftadd+3,w
  8795  16E3  00D7               	movwf	___ftadd@exp2
  8796  16E4  0858               	movf	___ftadd@exp1,w
  8797  16E5  1903               	btfsc	3,2
  8798  16E6  2EE8               	goto	u4621
  8799  16E7  2EE9               	goto	u4620
  8800  16E8                     u4621:
  8801  16E8  2EF9               	goto	l3510
  8802  16E9                     u4620:
  8803  16E9                     l3506:
  8804  16E9  0857               	movf	___ftadd@exp2,w
  8805  16EA  0258               	subwf	___ftadd@exp1,w
  8806  16EB  1803               	skipnc
  8807  16EC  2EEE               	goto	u4631
  8808  16ED  2EEF               	goto	u4630
  8809  16EE                     u4631:
  8810  16EE  2F00               	goto	l3514
  8811  16EF                     u4630:
  8812  16EF                     l3508:
  8813  16EF  0857               	movf	___ftadd@exp2,w
  8814  16F0  00D2               	movwf	??___ftadd
  8815  16F1  0858               	movf	___ftadd@exp1,w
  8816  16F2  02D2               	subwf	??___ftadd,f
  8817  16F3  3019               	movlw	25
  8818  16F4  0252               	subwf	??___ftadd,w
  8819  16F5  1C03               	skipc
  8820  16F6  2EF8               	goto	u4641
  8821  16F7  2EF9               	goto	u4640
  8822  16F8                     u4641:
  8823  16F8  2F00               	goto	l3514
  8824  16F9                     u4640:
  8825  16F9                     l3510:
  8826  16F9  084F               	movf	___ftadd@f2,w
  8827  16FA  00CC               	movwf	?___ftadd
  8828  16FB  0850               	movf	___ftadd@f2+1,w
  8829  16FC  00CD               	movwf	?___ftadd+1
  8830  16FD  0851               	movf	___ftadd@f2+2,w
  8831  16FE  00CE               	movwf	?___ftadd+2
  8832  16FF  2FFF               	goto	l726
  8833  1700                     l3514:
  8834  1700  0857               	movf	___ftadd@exp2,w
  8835  1701  1903               	btfsc	3,2
  8836  1702  2F04               	goto	u4651
  8837  1703  2F05               	goto	u4650
  8838  1704                     u4651:
  8839  1704  2F15               	goto	l729
  8840  1705                     u4650:
  8841  1705                     l3516:
  8842  1705  0858               	movf	___ftadd@exp1,w
  8843  1706  0257               	subwf	___ftadd@exp2,w
  8844  1707  1803               	skipnc
  8845  1708  2F0A               	goto	u4661
  8846  1709  2F0B               	goto	u4660
  8847  170A                     u4661:
  8848  170A  2F16               	goto	l3520
  8849  170B                     u4660:
  8850  170B                     l3518:
  8851  170B  0858               	movf	___ftadd@exp1,w
  8852  170C  00D2               	movwf	??___ftadd
  8853  170D  0857               	movf	___ftadd@exp2,w
  8854  170E  02D2               	subwf	??___ftadd,f
  8855  170F  3019               	movlw	25
  8856  1710  0252               	subwf	??___ftadd,w
  8857  1711  1C03               	skipc
  8858  1712  2F14               	goto	u4671
  8859  1713  2F15               	goto	u4670
  8860  1714                     u4671:
  8861  1714  2F16               	goto	l3520
  8862  1715                     u4670:
  8863  1715                     l729:
  8864  1715  2FFF               	goto	l726
  8865  1716                     l3520:
  8866  1716  3006               	movlw	6
  8867  1717  00D2               	movwf	??___ftadd
  8868  1718  0852               	movf	??___ftadd,w
  8869  1719  00D6               	movwf	___ftadd@sign
  8870  171A                     l3522:
  8871  171A  1FCE               	btfss	___ftadd@f1+2,7
  8872  171B  2F1D               	goto	u4681
  8873  171C  2F1E               	goto	u4680
  8874  171D                     u4681:
  8875  171D  2F1F               	goto	l730
  8876  171E                     u4680:
  8877  171E                     l3524:
  8878  171E  17D6               	bsf	___ftadd@sign,7
  8879  171F                     l730:
  8880  171F  1FD1               	btfss	___ftadd@f2+2,7
  8881  1720  2F22               	goto	u4691
  8882  1721  2F23               	goto	u4690
  8883  1722                     u4691:
  8884  1722  2F24               	goto	l731
  8885  1723                     u4690:
  8886  1723                     l3526:
  8887  1723  1756               	bsf	___ftadd@sign,6
  8888  1724                     l731:
  8889  1724  17CD               	bsf	___ftadd@f1+1,7
  8890  1725                     l3528:
  8891  1725  30FF               	movlw	255
  8892  1726  05CC               	andwf	___ftadd@f1,f
  8893  1727  30FF               	movlw	255
  8894  1728  05CD               	andwf	___ftadd@f1+1,f
  8895  1729  3000               	movlw	0
  8896  172A  05CE               	andwf	___ftadd@f1+2,f
  8897  172B                     l3530:
  8898  172B  17D0               	bsf	___ftadd@f2+1,7
  8899  172C  30FF               	movlw	255
  8900  172D  05CF               	andwf	___ftadd@f2,f
  8901  172E  30FF               	movlw	255
  8902  172F  05D0               	andwf	___ftadd@f2+1,f
  8903  1730  3000               	movlw	0
  8904  1731  05D1               	andwf	___ftadd@f2+2,f
  8905  1732  0857               	movf	___ftadd@exp2,w
  8906  1733  0258               	subwf	___ftadd@exp1,w
  8907  1734  1803               	skipnc
  8908  1735  2F37               	goto	u4701
  8909  1736  2F38               	goto	u4700
  8910  1737                     u4701:
  8911  1737  2F64               	goto	l3542
  8912  1738                     u4700:
  8913  1738                     l3532:
  8914  1738  3001               	movlw	1
  8915  1739                     u4715:
  8916  1739  1003               	clrc
  8917  173A  0DCF               	rlf	___ftadd@f2,f
  8918  173B  0DD0               	rlf	___ftadd@f2+1,f
  8919  173C  0DD1               	rlf	___ftadd@f2+2,f
  8920  173D  3EFF               	addlw	-1
  8921  173E  1D03               	skipz
  8922  173F  2F39               	goto	u4715
  8923  1740  3001               	movlw	1
  8924  1741  02D7               	subwf	___ftadd@exp2,f
  8925  1742                     l3534:
  8926  1742  0857               	movf	___ftadd@exp2,w
  8927  1743  0658               	xorwf	___ftadd@exp1,w
  8928  1744  1903               	skipnz
  8929  1745  2F47               	goto	u4721
  8930  1746  2F48               	goto	u4720
  8931  1747                     u4721:
  8932  1747  2F5D               	goto	l3540
  8933  1748                     u4720:
  8934  1748                     l3536:
  8935  1748  3001               	movlw	1
  8936  1749  02D6               	subwf	___ftadd@sign,f
  8937  174A  0856               	movf	___ftadd@sign,w
  8938  174B  3907               	andlw	7
  8939  174C  1D03               	btfss	3,2
  8940  174D  2F4F               	goto	u4731
  8941  174E  2F50               	goto	u4730
  8942  174F                     u4731:
  8943  174F  2F38               	goto	l3532
  8944  1750                     u4730:
  8945  1750  2F5D               	goto	l3540
  8946  1751                     l3538:
  8947  1751  3001               	movlw	1
  8948  1752                     u4745:
  8949  1752  1003               	clrc
  8950  1753  0CCE               	rrf	___ftadd@f1+2,f
  8951  1754  0CCD               	rrf	___ftadd@f1+1,f
  8952  1755  0CCC               	rrf	___ftadd@f1,f
  8953  1756  3EFF               	addlw	-1
  8954  1757  1D03               	skipz
  8955  1758  2F52               	goto	u4745
  8956  1759  3001               	movlw	1
  8957  175A  00D2               	movwf	??___ftadd
  8958  175B  0852               	movf	??___ftadd,w
  8959  175C  07D8               	addwf	___ftadd@exp1,f
  8960  175D                     l3540:
  8961  175D  0858               	movf	___ftadd@exp1,w
  8962  175E  0657               	xorwf	___ftadd@exp2,w
  8963  175F  1D03               	skipz
  8964  1760  2F62               	goto	u4751
  8965  1761  2F63               	goto	u4750
  8966  1762                     u4751:
  8967  1762  2F51               	goto	l3538
  8968  1763                     u4750:
  8969  1763  2F95               	goto	l740
  8970  1764                     l3542:
  8971  1764  0858               	movf	___ftadd@exp1,w
  8972  1765  0257               	subwf	___ftadd@exp2,w
  8973  1766  1803               	skipnc
  8974  1767  2F69               	goto	u4761
  8975  1768  2F6A               	goto	u4760
  8976  1769                     u4761:
  8977  1769  2F95               	goto	l740
  8978  176A                     u4760:
  8979  176A                     l3544:
  8980  176A  3001               	movlw	1
  8981  176B                     u4775:
  8982  176B  1003               	clrc
  8983  176C  0DCC               	rlf	___ftadd@f1,f
  8984  176D  0DCD               	rlf	___ftadd@f1+1,f
  8985  176E  0DCE               	rlf	___ftadd@f1+2,f
  8986  176F  3EFF               	addlw	-1
  8987  1770  1D03               	skipz
  8988  1771  2F6B               	goto	u4775
  8989  1772  3001               	movlw	1
  8990  1773  02D8               	subwf	___ftadd@exp1,f
  8991  1774                     l3546:
  8992  1774  0857               	movf	___ftadd@exp2,w
  8993  1775  0658               	xorwf	___ftadd@exp1,w
  8994  1776  1903               	skipnz
  8995  1777  2F79               	goto	u4781
  8996  1778  2F7A               	goto	u4780
  8997  1779                     u4781:
  8998  1779  2F8F               	goto	l3552
  8999  177A                     u4780:
  9000  177A                     l3548:
  9001  177A  3001               	movlw	1
  9002  177B  02D6               	subwf	___ftadd@sign,f
  9003  177C  0856               	movf	___ftadd@sign,w
  9004  177D  3907               	andlw	7
  9005  177E  1D03               	btfss	3,2
  9006  177F  2F81               	goto	u4791
  9007  1780  2F82               	goto	u4790
  9008  1781                     u4791:
  9009  1781  2F6A               	goto	l3544
  9010  1782                     u4790:
  9011  1782  2F8F               	goto	l3552
  9012  1783                     l3550:
  9013  1783  3001               	movlw	1
  9014  1784                     u4805:
  9015  1784  1003               	clrc
  9016  1785  0CD1               	rrf	___ftadd@f2+2,f
  9017  1786  0CD0               	rrf	___ftadd@f2+1,f
  9018  1787  0CCF               	rrf	___ftadd@f2,f
  9019  1788  3EFF               	addlw	-1
  9020  1789  1D03               	skipz
  9021  178A  2F84               	goto	u4805
  9022  178B  3001               	movlw	1
  9023  178C  00D2               	movwf	??___ftadd
  9024  178D  0852               	movf	??___ftadd,w
  9025  178E  07D7               	addwf	___ftadd@exp2,f
  9026  178F                     l3552:
  9027  178F  0858               	movf	___ftadd@exp1,w
  9028  1790  0657               	xorwf	___ftadd@exp2,w
  9029  1791  1D03               	skipz
  9030  1792  2F94               	goto	u4811
  9031  1793  2F95               	goto	u4810
  9032  1794                     u4811:
  9033  1794  2F83               	goto	l3550
  9034  1795                     u4810:
  9035  1795                     l740:
  9036  1795  1FD6               	btfss	___ftadd@sign,7
  9037  1796  2F98               	goto	u4821
  9038  1797  2F99               	goto	u4820
  9039  1798                     u4821:
  9040  1798  2FA9               	goto	l3556
  9041  1799                     u4820:
  9042  1799                     l3554:
  9043  1799  30FF               	movlw	255
  9044  179A  06CC               	xorwf	___ftadd@f1,f
  9045  179B  30FF               	movlw	255
  9046  179C  06CD               	xorwf	___ftadd@f1+1,f
  9047  179D  30FF               	movlw	255
  9048  179E  06CE               	xorwf	___ftadd@f1+2,f
  9049  179F  3001               	movlw	1
  9050  17A0  07CC               	addwf	___ftadd@f1,f
  9051  17A1  3000               	movlw	0
  9052  17A2  1803               	skipnc
  9053  17A3  3001               	movlw	1
  9054  17A4  07CD               	addwf	___ftadd@f1+1,f
  9055  17A5  3000               	movlw	0
  9056  17A6  1803               	skipnc
  9057  17A7  3001               	movlw	1
  9058  17A8  07CE               	addwf	___ftadd@f1+2,f
  9059  17A9                     l3556:
  9060  17A9  1F56               	btfss	___ftadd@sign,6
  9061  17AA  2FAC               	goto	u4831
  9062  17AB  2FAD               	goto	u4830
  9063  17AC                     u4831:
  9064  17AC  2FBD               	goto	l3560
  9065  17AD                     u4830:
  9066  17AD                     l3558:
  9067  17AD  30FF               	movlw	255
  9068  17AE  06CF               	xorwf	___ftadd@f2,f
  9069  17AF  30FF               	movlw	255
  9070  17B0  06D0               	xorwf	___ftadd@f2+1,f
  9071  17B1  30FF               	movlw	255
  9072  17B2  06D1               	xorwf	___ftadd@f2+2,f
  9073  17B3  3001               	movlw	1
  9074  17B4  07CF               	addwf	___ftadd@f2,f
  9075  17B5  3000               	movlw	0
  9076  17B6  1803               	skipnc
  9077  17B7  3001               	movlw	1
  9078  17B8  07D0               	addwf	___ftadd@f2+1,f
  9079  17B9  3000               	movlw	0
  9080  17BA  1803               	skipnc
  9081  17BB  3001               	movlw	1
  9082  17BC  07D1               	addwf	___ftadd@f2+2,f
  9083  17BD                     l3560:
  9084  17BD  01D6               	clrf	___ftadd@sign
  9085  17BE                     l3562:
  9086  17BE  084C               	movf	___ftadd@f1,w
  9087  17BF  07CF               	addwf	___ftadd@f2,f
  9088  17C0  084D               	movf	___ftadd@f1+1,w
  9089  17C1  1103               	clrz
  9090  17C2  1803               	skipnc
  9091  17C3  0A4D               	incf	___ftadd@f1+1,w
  9092  17C4  1903               	skipnz
  9093  17C5  2FC7               	goto	u4841
  9094  17C6  07D0               	addwf	___ftadd@f2+1,f
  9095  17C7                     u4841:
  9096  17C7  084E               	movf	___ftadd@f1+2,w
  9097  17C8  1103               	clrz
  9098  17C9  1803               	skipnc
  9099  17CA  0A4E               	incf	___ftadd@f1+2,w
  9100  17CB  1903               	skipnz
  9101  17CC  2FCE               	goto	u4842
  9102  17CD  07D1               	addwf	___ftadd@f2+2,f
  9103  17CE                     u4842:
  9104  17CE                     l3564:
  9105  17CE  1FD1               	btfss	___ftadd@f2+2,7
  9106  17CF  2FD1               	goto	u4851
  9107  17D0  2FD2               	goto	u4850
  9108  17D1                     u4851:
  9109  17D1  2FE4               	goto	l3570
  9110  17D2                     u4850:
  9111  17D2                     l3566:
  9112  17D2  30FF               	movlw	255
  9113  17D3  06CF               	xorwf	___ftadd@f2,f
  9114  17D4  30FF               	movlw	255
  9115  17D5  06D0               	xorwf	___ftadd@f2+1,f
  9116  17D6  30FF               	movlw	255
  9117  17D7  06D1               	xorwf	___ftadd@f2+2,f
  9118  17D8  3001               	movlw	1
  9119  17D9  07CF               	addwf	___ftadd@f2,f
  9120  17DA  3000               	movlw	0
  9121  17DB  1803               	skipnc
  9122  17DC  3001               	movlw	1
  9123  17DD  07D0               	addwf	___ftadd@f2+1,f
  9124  17DE  3000               	movlw	0
  9125  17DF  1803               	skipnc
  9126  17E0  3001               	movlw	1
  9127  17E1  07D1               	addwf	___ftadd@f2+2,f
  9128  17E2                     l3568:
  9129  17E2  01D6               	clrf	___ftadd@sign
  9130  17E3  0AD6               	incf	___ftadd@sign,f
  9131  17E4                     l3570:
  9132  17E4  084F               	movf	___ftadd@f2,w
  9133  17E5  00F2               	movwf	___ftpack@arg
  9134  17E6  0850               	movf	___ftadd@f2+1,w
  9135  17E7  00F3               	movwf	___ftpack@arg+1
  9136  17E8  0851               	movf	___ftadd@f2+2,w
  9137  17E9  00F4               	movwf	___ftpack@arg+2
  9138  17EA  0858               	movf	___ftadd@exp1,w
  9139  17EB  00D2               	movwf	??___ftadd
  9140  17EC  0852               	movf	??___ftadd,w
  9141  17ED  00F5               	movwf	___ftpack@exp
  9142  17EE  0856               	movf	___ftadd@sign,w
  9143  17EF  00D3               	movwf	??___ftadd+1
  9144  17F0  0853               	movf	??___ftadd+1,w
  9145  17F1  00F6               	movwf	___ftpack@sign
  9146  17F2  160A  118A  23A3  160A  118A  	fcall	___ftpack
  9147  17F7  0872               	movf	?___ftpack,w
  9148  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  9149  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  9150  17FA  00CC               	movwf	?___ftadd
  9151  17FB  0873               	movf	?___ftpack+1,w
  9152  17FC  00CD               	movwf	?___ftadd+1
  9153  17FD  0874               	movf	?___ftpack+2,w
  9154  17FE  00CE               	movwf	?___ftadd+2
  9155  17FF                     l726:
  9156  17FF  0008               	return
  9157  1800                     __end_of___ftadd:
  9158                           
  9159                           	psect	text46
  9160  13A3                     __ptext46:	
  9161 ;; *************** function ___ftpack *****************
  9162 ;; Defined at:
  9163 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\float.c"
  9164 ;; Parameters:    Size  Location     Type
  9165 ;;  arg             3    2[COMMON] unsigned um
  9166 ;;  exp             1    5[COMMON] unsigned char 
  9167 ;;  sign            1    6[COMMON] unsigned char 
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;		None
  9170 ;; Return value:  Size  Location     Type
  9171 ;;                  3    2[COMMON] float 
  9172 ;; Registers used:
  9173 ;;		wreg, status,2, status,0
  9174 ;; Tracked objects:
  9175 ;;		On entry : 0/0
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9179 ;;      Params:         5       0       0       0       0
  9180 ;;      Locals:         0       0       0       0       0
  9181 ;;      Temps:          3       0       0       0       0
  9182 ;;      Totals:         8       0       0       0       0
  9183 ;;Total ram usage:        8 bytes
  9184 ;; Hardware stack levels used:    1
  9185 ;; Hardware stack levels required when called:    1
  9186 ;; This function calls:
  9187 ;;		Nothing
  9188 ;; This function is called by:
  9189 ;;		___awtoft
  9190 ;;		___ftadd
  9191 ;;		___ftdiv
  9192 ;;		___ftmul
  9193 ;;		___lltoft
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           
  9198                           ;psect for function ___ftpack
  9199  13A3                     ___ftpack:
  9200  13A3                     l3470:	
  9201                           ;incstack = 0
  9202                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9203                           
  9204  13A3  0875               	movf	___ftpack@exp,w
  9205  13A4  1903               	btfsc	3,2
  9206  13A5  2BA7               	goto	u4501
  9207  13A6  2BA8               	goto	u4500
  9208  13A7                     u4501:
  9209  13A7  2BAF               	goto	l3474
  9210  13A8                     u4500:
  9211  13A8                     l3472:
  9212  13A8  0874               	movf	___ftpack@arg+2,w
  9213  13A9  0473               	iorwf	___ftpack@arg+1,w
  9214  13AA  0472               	iorwf	___ftpack@arg,w
  9215  13AB  1D03               	skipz
  9216  13AC  2BAE               	goto	u4511
  9217  13AD  2BAF               	goto	u4510
  9218  13AE                     u4511:
  9219  13AE  2BC2               	goto	l3480
  9220  13AF                     u4510:
  9221  13AF                     l3474:
  9222  13AF  3000               	movlw	0
  9223  13B0  00F2               	movwf	?___ftpack
  9224  13B1  3000               	movlw	0
  9225  13B2  00F3               	movwf	?___ftpack+1
  9226  13B3  3000               	movlw	0
  9227  13B4  00F4               	movwf	?___ftpack+2
  9228  13B5  2C1E               	goto	l705
  9229  13B6                     l3478:
  9230  13B6  3001               	movlw	1
  9231  13B7  00F7               	movwf	??___ftpack
  9232  13B8  0877               	movf	??___ftpack,w
  9233  13B9  07F5               	addwf	___ftpack@exp,f
  9234  13BA  3001               	movlw	1
  9235  13BB                     u4525:
  9236  13BB  1003               	clrc
  9237  13BC  0CF4               	rrf	___ftpack@arg+2,f
  9238  13BD  0CF3               	rrf	___ftpack@arg+1,f
  9239  13BE  0CF2               	rrf	___ftpack@arg,f
  9240  13BF  3EFF               	addlw	-1
  9241  13C0  1D03               	skipz
  9242  13C1  2BBB               	goto	u4525
  9243  13C2                     l3480:
  9244  13C2  30FE               	movlw	254
  9245  13C3  0574               	andwf	___ftpack@arg+2,w
  9246  13C4  1D03               	btfss	3,2
  9247  13C5  2BC7               	goto	u4531
  9248  13C6  2BC8               	goto	u4530
  9249  13C7                     u4531:
  9250  13C7  2BB6               	goto	l3478
  9251  13C8                     u4530:
  9252  13C8  2BDF               	goto	l709
  9253  13C9                     l3482:
  9254  13C9  3001               	movlw	1
  9255  13CA  00F7               	movwf	??___ftpack
  9256  13CB  0877               	movf	??___ftpack,w
  9257  13CC  07F5               	addwf	___ftpack@exp,f
  9258  13CD                     l3484:
  9259  13CD  3001               	movlw	1
  9260  13CE  07F2               	addwf	___ftpack@arg,f
  9261  13CF  3000               	movlw	0
  9262  13D0  1803               	skipnc
  9263  13D1  3001               	movlw	1
  9264  13D2  07F3               	addwf	___ftpack@arg+1,f
  9265  13D3  3000               	movlw	0
  9266  13D4  1803               	skipnc
  9267  13D5  3001               	movlw	1
  9268  13D6  07F4               	addwf	___ftpack@arg+2,f
  9269  13D7                     l3486:
  9270  13D7  3001               	movlw	1
  9271  13D8                     u4545:
  9272  13D8  1003               	clrc
  9273  13D9  0CF4               	rrf	___ftpack@arg+2,f
  9274  13DA  0CF3               	rrf	___ftpack@arg+1,f
  9275  13DB  0CF2               	rrf	___ftpack@arg,f
  9276  13DC  3EFF               	addlw	-1
  9277  13DD  1D03               	skipz
  9278  13DE  2BD8               	goto	u4545
  9279  13DF                     l709:
  9280  13DF  30FF               	movlw	255
  9281  13E0  0574               	andwf	___ftpack@arg+2,w
  9282  13E1  1D03               	btfss	3,2
  9283  13E2  2BE4               	goto	u4551
  9284  13E3  2BE5               	goto	u4550
  9285  13E4                     u4551:
  9286  13E4  2BC9               	goto	l3482
  9287  13E5                     u4550:
  9288  13E5  2BF0               	goto	l3490
  9289  13E6                     l3488:
  9290  13E6  3001               	movlw	1
  9291  13E7  02F5               	subwf	___ftpack@exp,f
  9292  13E8  3001               	movlw	1
  9293  13E9                     u4565:
  9294  13E9  1003               	clrc
  9295  13EA  0DF2               	rlf	___ftpack@arg,f
  9296  13EB  0DF3               	rlf	___ftpack@arg+1,f
  9297  13EC  0DF4               	rlf	___ftpack@arg+2,f
  9298  13ED  3EFF               	addlw	-1
  9299  13EE  1D03               	skipz
  9300  13EF  2BE9               	goto	u4565
  9301  13F0                     l3490:
  9302  13F0  1BF3               	btfsc	___ftpack@arg+1,7
  9303  13F1  2BF3               	goto	u4571
  9304  13F2  2BF4               	goto	u4570
  9305  13F3                     u4571:
  9306  13F3  2BFA               	goto	l716
  9307  13F4                     u4570:
  9308  13F4                     l3492:
  9309  13F4  3002               	movlw	2
  9310  13F5  0275               	subwf	___ftpack@exp,w
  9311  13F6  1803               	skipnc
  9312  13F7  2BF9               	goto	u4581
  9313  13F8  2BFA               	goto	u4580
  9314  13F9                     u4581:
  9315  13F9  2BE6               	goto	l3488
  9316  13FA                     u4580:
  9317  13FA                     l716:
  9318  13FA  1875               	btfsc	___ftpack@exp,0
  9319  13FB  2BFD               	goto	u4591
  9320  13FC  2BFE               	goto	u4590
  9321  13FD                     u4591:
  9322  13FD  2C04               	goto	l717
  9323  13FE                     u4590:
  9324  13FE                     l3494:
  9325  13FE  30FF               	movlw	255
  9326  13FF  05F2               	andwf	___ftpack@arg,f
  9327  1400  307F               	movlw	127
  9328  1401  05F3               	andwf	___ftpack@arg+1,f
  9329  1402  30FF               	movlw	255
  9330  1403  05F4               	andwf	___ftpack@arg+2,f
  9331  1404                     l717:
  9332  1404  1003               	clrc
  9333  1405  0CF5               	rrf	___ftpack@exp,f
  9334  1406                     l3496:
  9335  1406  0875               	movf	___ftpack@exp,w
  9336  1407  00F7               	movwf	??___ftpack
  9337  1408  01F8               	clrf	??___ftpack+1
  9338  1409  01F9               	clrf	??___ftpack+2
  9339  140A  3010               	movlw	16
  9340  140B                     u4605:
  9341  140B  1003               	clrc
  9342  140C  0DF7               	rlf	??___ftpack,f
  9343  140D  0DF8               	rlf	??___ftpack+1,f
  9344  140E  0DF9               	rlf	??___ftpack+2,f
  9345  140F                     u4600:
  9346  140F  3EFF               	addlw	-1
  9347  1410  1D03               	skipz
  9348  1411  2C0B               	goto	u4605
  9349  1412  0877               	movf	??___ftpack,w
  9350  1413  04F2               	iorwf	___ftpack@arg,f
  9351  1414  0878               	movf	??___ftpack+1,w
  9352  1415  04F3               	iorwf	___ftpack@arg+1,f
  9353  1416  0879               	movf	??___ftpack+2,w
  9354  1417  04F4               	iorwf	___ftpack@arg+2,f
  9355  1418                     l3498:
  9356  1418  0876               	movf	___ftpack@sign,w
  9357  1419  1903               	btfsc	3,2
  9358  141A  2C1C               	goto	u4611
  9359  141B  2C1D               	goto	u4610
  9360  141C                     u4611:
  9361  141C  2C1E               	goto	l718
  9362  141D                     u4610:
  9363  141D                     l3500:
  9364  141D  17F4               	bsf	___ftpack@arg+2,7
  9365  141E                     l718:
  9366  141E                     l705:
  9367  141E  0008               	return
  9368  141F                     __end_of___ftpack:
  9369                           
  9370                           	psect	text47
  9371  1C0A                     __ptext47:	
  9372 ;; *************** function ___ftneg *****************
  9373 ;; Defined at:
  9374 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftneg.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;  f1              3    2[COMMON] float 
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;		None
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  3    2[COMMON] float 
  9381 ;; Registers used:
  9382 ;;		wreg
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9388 ;;      Params:         3       0       0       0       0
  9389 ;;      Locals:         0       0       0       0       0
  9390 ;;      Temps:          0       0       0       0       0
  9391 ;;      Totals:         3       0       0       0       0
  9392 ;;Total ram usage:        3 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    1
  9395 ;; This function calls:
  9396 ;;		Nothing
  9397 ;; This function is called by:
  9398 ;;		_sprintf
  9399 ;; This function uses a non-reentrant model
  9400 ;;
  9401                           
  9402                           
  9403                           ;psect for function ___ftneg
  9404  1C0A                     ___ftneg:
  9405  1C0A                     l2788:	
  9406                           ;incstack = 0
  9407                           ; Regs used in ___ftneg: [wreg]
  9408                           
  9409  1C0A  0874               	movf	___ftneg@f1+2,w
  9410  1C0B  0473               	iorwf	___ftneg@f1+1,w
  9411  1C0C  0472               	iorwf	___ftneg@f1,w
  9412  1C0D  1903               	skipnz
  9413  1C0E  2C10               	goto	u3601
  9414  1C0F  2C11               	goto	u3600
  9415  1C10                     u3601:
  9416  1C10  2C13               	goto	l2792
  9417  1C11                     u3600:
  9418  1C11                     l2790:
  9419  1C11  3080               	movlw	128
  9420  1C12  06F4               	xorwf	___ftneg@f1+2,f
  9421  1C13                     l2792:
  9422  1C13                     l800:
  9423  1C13  0008               	return
  9424  1C14                     __end_of___ftneg:
  9425                           
  9426                           	psect	text48
  9427  1DDF                     __ptext48:	
  9428 ;; *************** function ___ftge *****************
  9429 ;; Defined at:
  9430 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftge.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;  ff1             3    2[COMMON] float 
  9433 ;;  ff2             3    5[COMMON] float 
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;		None
  9436 ;; Return value:  Size  Location     Type
  9437 ;;		None               void
  9438 ;; Registers used:
  9439 ;;		wreg, status,2, status,0
  9440 ;; Tracked objects:
  9441 ;;		On entry : 0/0
  9442 ;;		On exit  : 0/0
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9445 ;;      Params:         6       0       0       0       0
  9446 ;;      Locals:         0       0       0       0       0
  9447 ;;      Temps:          0       0       0       0       0
  9448 ;;      Totals:         6       0       0       0       0
  9449 ;;Total ram usage:        6 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    1
  9452 ;; This function calls:
  9453 ;;		Nothing
  9454 ;; This function is called by:
  9455 ;;		_sprintf
  9456 ;; This function uses a non-reentrant model
  9457 ;;
  9458                           
  9459                           
  9460                           ;psect for function ___ftge
  9461  1DDF                     ___ftge:
  9462  1DDF                     l2768:	
  9463                           ;incstack = 0
  9464                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9465                           
  9466  1DDF  1FF4               	btfss	___ftge@ff1+2,7
  9467  1DE0  2DE2               	goto	u3571
  9468  1DE1  2DE3               	goto	u3570
  9469  1DE2                     u3571:
  9470  1DE2  2DF0               	goto	l2772
  9471  1DE3                     u3570:
  9472  1DE3                     l2770:
  9473  1DE3  0872               	movf	___ftge@ff1,w
  9474  1DE4  3C00               	sublw	0
  9475  1DE5  00F2               	movwf	___ftge@ff1
  9476  1DE6  0873               	movf	___ftge@ff1+1,w
  9477  1DE7  1C03               	skipc
  9478  1DE8  0F73               	incfsz	___ftge@ff1+1,w
  9479  1DE9  3C00               	sublw	0
  9480  1DEA  00F3               	movwf	___ftge@ff1+1
  9481  1DEB  0874               	movf	___ftge@ff1+2,w
  9482  1DEC  1C03               	skipc
  9483  1DED  0F74               	incfsz	___ftge@ff1+2,w
  9484  1DEE  3C80               	sublw	128
  9485  1DEF  00F4               	movwf	___ftge@ff1+2
  9486  1DF0                     l2772:
  9487  1DF0  1FF7               	btfss	___ftge@ff2+2,7
  9488  1DF1  2DF3               	goto	u3581
  9489  1DF2  2DF4               	goto	u3580
  9490  1DF3                     u3581:
  9491  1DF3  2E01               	goto	l2776
  9492  1DF4                     u3580:
  9493  1DF4                     l2774:
  9494  1DF4  0875               	movf	___ftge@ff2,w
  9495  1DF5  3C00               	sublw	0
  9496  1DF6  00F5               	movwf	___ftge@ff2
  9497  1DF7  0876               	movf	___ftge@ff2+1,w
  9498  1DF8  1C03               	skipc
  9499  1DF9  0F76               	incfsz	___ftge@ff2+1,w
  9500  1DFA  3C00               	sublw	0
  9501  1DFB  00F6               	movwf	___ftge@ff2+1
  9502  1DFC  0877               	movf	___ftge@ff2+2,w
  9503  1DFD  1C03               	skipc
  9504  1DFE  0F77               	incfsz	___ftge@ff2+2,w
  9505  1DFF  3C80               	sublw	128
  9506  1E00  00F7               	movwf	___ftge@ff2+2
  9507  1E01                     l2776:
  9508  1E01  3080               	movlw	128
  9509  1E02  06F4               	xorwf	___ftge@ff1+2,f
  9510  1E03                     l2778:
  9511  1E03  3080               	movlw	128
  9512  1E04  06F7               	xorwf	___ftge@ff2+2,f
  9513  1E05                     l2780:
  9514  1E05  0877               	movf	___ftge@ff2+2,w
  9515  1E06  0274               	subwf	___ftge@ff1+2,w
  9516  1E07  1D03               	skipz
  9517  1E08  2E0F               	goto	u3595
  9518  1E09  0876               	movf	___ftge@ff2+1,w
  9519  1E0A  0273               	subwf	___ftge@ff1+1,w
  9520  1E0B  1D03               	skipz
  9521  1E0C  2E0F               	goto	u3595
  9522  1E0D  0875               	movf	___ftge@ff2,w
  9523  1E0E  0272               	subwf	___ftge@ff1,w
  9524  1E0F                     u3595:
  9525  1E0F  1803               	skipnc
  9526  1E10  2E12               	goto	u3591
  9527  1E11  2E13               	goto	u3590
  9528  1E12                     u3591:
  9529  1E12  2E15               	goto	l2784
  9530  1E13                     u3590:
  9531  1E13                     l2782:
  9532  1E13  1003               	clrc
  9533  1E14  2E16               	goto	l783
  9534  1E15                     l2784:
  9535  1E15  1403               	setc
  9536  1E16                     l783:
  9537  1E16  0008               	return
  9538  1E17                     __end_of___ftge:
  9539                           
  9540                           	psect	text49
  9541  1BE3                     __ptext49:	
  9542 ;; *************** function _ISR *****************
  9543 ;; Defined at:
  9544 ;;		line 87 in file "main_maestro.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;		None
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;		None
  9549 ;; Return value:  Size  Location     Type
  9550 ;;                  1    wreg      void 
  9551 ;; Registers used:
  9552 ;;		None
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9558 ;;      Params:         0       0       0       0       0
  9559 ;;      Locals:         0       0       0       0       0
  9560 ;;      Temps:          2       0       0       0       0
  9561 ;;      Totals:         2       0       0       0       0
  9562 ;;Total ram usage:        2 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; This function calls:
  9565 ;;		Nothing
  9566 ;; This function is called by:
  9567 ;;		Interrupt level 1
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           
  9572                           ;psect for function _ISR
  9573  1BE3                     _ISR:
  9574  1BE3                     i1l103:
  9575  1BE3  0871               	movf	??_ISR+1,w
  9576  1BE4  008A               	movwf	10
  9577  1BE5  0E70               	swapf	??_ISR,w
  9578  1BE6  0083               	movwf	3
  9579  1BE7  0EFE               	swapf	btemp,f
  9580  1BE8  0E7E               	swapf	btemp,w
  9581  1BE9  0009               	retfie
  9582  1BEA                     __end_of_ISR:
  9583  007E                     btemp	set	126	;btemp
  9584  007E                     wtemp0	set	126
  9585                           
  9586                           	psect	intentry
  9587  0004                     __pintentry:	
  9588                           ;incstack = 0
  9589                           ; Regs used in _ISR: []
  9590                           
  9591  0004                     interrupt_function:
  9592  007E                     saved_w	set	btemp
  9593  0004  00FE               	movwf	btemp
  9594  0005  0E03               	swapf	3,w
  9595  0006  00F0               	movwf	??_ISR
  9596  0007  080A               	movf	10,w
  9597  0008  00F1               	movwf	??_ISR+1
  9598  0009  160A  158A  2BE3   	ljmp	_ISR
  9599                           
  9600                           	psect	config
  9601                           
  9602                           ;Config register CONFIG1 @ 0x2007
  9603                           ;	Oscillator Selection bits
  9604                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  9605                           ;	Watchdog Timer Enable bit
  9606                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  9607                           ;	Power-up Timer Enable bit
  9608                           ;	PWRTE = OFF, PWRT disabled
  9609                           ;	RE3/MCLR pin function select bit
  9610                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  9611                           ;	Code Protection bit
  9612                           ;	CP = OFF, Program memory code protection is disabled
  9613                           ;	Data Code Protection bit
  9614                           ;	CPD = OFF, Data memory code protection is disabled
  9615                           ;	Brown Out Reset Selection bits
  9616                           ;	BOREN = OFF, BOR disabled
  9617                           ;	Internal External Switchover bit
  9618                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  9619                           ;	Fail-Safe Clock Monitor Enabled bit
  9620                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  9621                           ;	Low Voltage Programming Enable bit
  9622                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  9623                           ;	In-Circuit Debugger Mode bit
  9624                           ;	DEBUG = 0x1, unprogrammed default
  9625  2007                     	org	8199
  9626  2007  20D6               	dw	8406
  9627                           
  9628                           ;Config register CONFIG2 @ 0x2008
  9629                           ;	Brown-out Reset Selection bit
  9630                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  9631                           ;	Flash Program Memory Self Write Enable bits
  9632                           ;	WRT = OFF, Write protection off
  9633  2008                     	org	8200
  9634  2008  3FFF               	dw	16383
  9635                           
  9636                           	psect	text27_split_1
  9637  0024                     u5620:
  9638  0024                     l3962:
  9639  0024  1683               	bsf	3,5	;RP0=1, select bank1
  9640  0025  1303               	bcf	3,6	;RP1=0, select bank1
  9641  0026  084F               	movf	(sprintf@fval+2)^(0+128),w
  9642  0027  044E               	iorwf	(sprintf@fval+1)^(0+128),w
  9643  0028  044D               	iorwf	sprintf@fval^(0+128),w
  9644  0029  1903               	skipnz
  9645  002A  282C               	goto	u5631
  9646  002B  282D               	goto	u5630
  9647  002C                     u5631:
  9648  002C  28BD               	goto	l3982
  9649  002D                     u5630:
  9650  002D                     l3964:
  9651  002D  084D               	movf	sprintf@fval^(0+128),w
  9652  002E  1283               	bcf	3,5	;RP0=0, select bank0
  9653  002F  1303               	bcf	3,6	;RP1=0, select bank0
  9654  0030  00C5               	movwf	___fttol@f1
  9655  0031  1683               	bsf	3,5	;RP0=1, select bank1
  9656  0032  1303               	bcf	3,6	;RP1=0, select bank1
  9657  0033  084E               	movf	(sprintf@fval+1)^(0+128),w
  9658  0034  1283               	bcf	3,5	;RP0=0, select bank0
  9659  0035  1303               	bcf	3,6	;RP1=0, select bank0
  9660  0036  00C6               	movwf	___fttol@f1+1
  9661  0037  1683               	bsf	3,5	;RP0=1, select bank1
  9662  0038  1303               	bcf	3,6	;RP1=0, select bank1
  9663  0039  084F               	movf	(sprintf@fval+2)^(0+128),w
  9664  003A  1283               	bcf	3,5	;RP0=0, select bank0
  9665  003B  1303               	bcf	3,6	;RP1=0, select bank0
  9666  003C  00C7               	movwf	___fttol@f1+2
  9667  003D  120A  158A  2028  120A  118A  	fcall	___fttol
  9668  0042  1283               	bcf	3,5	;RP0=0, select bank0
  9669  0043  1303               	bcf	3,6	;RP1=0, select bank0
  9670  0044  0848               	movf	?___fttol+3,w
  9671  0045  0447               	iorwf	?___fttol+2,w
  9672  0046  0446               	iorwf	?___fttol+1,w
  9673  0047  0445               	iorwf	?___fttol,w
  9674  0048  1D03               	skipz
  9675  0049  284B               	goto	u5641
  9676  004A  284C               	goto	u5640
  9677  004B                     u5641:
  9678  004B  28BD               	goto	l3982
  9679  004C                     u5640:
  9680  004C                     l3966:
  9681  004C  1683               	bsf	3,5	;RP0=1, select bank1
  9682  004D  1303               	bcf	3,6	;RP1=0, select bank1
  9683  004E  084C               	movf	(sprintf@eexp+1)^(0+128),w
  9684  004F  3A80               	xorlw	128
  9685  0050  00FF               	movwf	btemp+1
  9686  0051  3080               	movlw	128
  9687  0052  027F               	subwf	btemp+1,w
  9688  0053  1D03               	skipz
  9689  0054  2857               	goto	u5655
  9690  0055  3002               	movlw	2
  9691  0056  024B               	subwf	sprintf@eexp^(0+128),w
  9692  0057                     u5655:
  9693  0057  1C03               	skipc
  9694  0058  285A               	goto	u5651
  9695  0059  285B               	goto	u5650
  9696  005A                     u5651:
  9697  005A  28BD               	goto	l3982
  9698  005B                     u5650:
  9699  005B                     l3968:
  9700                           
  9701                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1146:      if(tmp
      +                          val.integ < 4.294967296){
  9702  005B  1683               	bsf	3,5	;RP0=1, select bank1
  9703  005C  1303               	bcf	3,6	;RP1=0, select bank1
  9704  005D  0843               	movf	sprintf@tmpval^(0+128),w
  9705  005E  00F2               	movwf	___ftge@ff1
  9706  005F  0844               	movf	(sprintf@tmpval+1)^(0+128),w
  9707  0060  00F3               	movwf	___ftge@ff1+1
  9708  0061  0845               	movf	(sprintf@tmpval+2)^(0+128),w
  9709  0062  00F4               	movwf	___ftge@ff1+2
  9710  0063  3070               	movlw	112
  9711  0064  00F5               	movwf	___ftge@ff2
  9712  0065  3089               	movlw	137
  9713  0066  00F6               	movwf	___ftge@ff2+1
  9714  0067  3040               	movlw	64
  9715  0068  00F7               	movwf	___ftge@ff2+2
  9716  0069  160A  158A  25DF  120A  118A  	fcall	___ftge
  9717  006E  1803               	btfsc	3,0
  9718  006F  2871               	goto	u5661
  9719  0070  2872               	goto	u5660
  9720  0071                     u5661:
  9721  0071  287B               	goto	l3972
  9722  0072                     u5660:
  9723  0072                     l3970:
  9724                           
  9725                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1147:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-1;
  9726  0072  30F7               	movlw	247
  9727  0073  1683               	bsf	3,5	;RP0=1, select bank1
  9728  0074  1303               	bcf	3,6	;RP1=0, select bank1
  9729  0075  07CB               	addwf	sprintf@eexp^(0+128),f
  9730  0076  1803               	skipnc
  9731  0077  0ACC               	incf	(sprintf@eexp+1)^(0+128),f
  9732  0078  30FF               	movlw	255
  9733  0079  07CC               	addwf	(sprintf@eexp+1)^(0+128),f
  9734                           
  9735                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1148:      }else{
  9736  007A  2883               	goto	l3974
  9737  007B                     l3972:
  9738                           
  9739                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1149:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-2;
  9740  007B  30F8               	movlw	248
  9741  007C  1683               	bsf	3,5	;RP0=1, select bank1
  9742  007D  1303               	bcf	3,6	;RP1=0, select bank1
  9743  007E  07CB               	addwf	sprintf@eexp^(0+128),f
  9744  007F  1803               	skipnc
  9745  0080  0ACC               	incf	(sprintf@eexp+1)^(0+128),f
  9746  0081  30FF               	movlw	255
  9747  0082  07CC               	addwf	(sprintf@eexp+1)^(0+128),f
  9748  0083                     l3974:
  9749                           
  9750                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1151:      tmpval
      +                          .integ = scale(eexp);
  9751  0083  084B               	movf	sprintf@eexp^(0+128),w
  9752  0084  120A  158A  225D  120A  118A  	fcall	_scale
  9753  0089  1283               	bcf	3,5	;RP0=0, select bank0
  9754  008A  1303               	bcf	3,6	;RP1=0, select bank0
  9755  008B  083C               	movf	?_scale,w
  9756  008C  1683               	bsf	3,5	;RP0=1, select bank1
  9757  008D  1303               	bcf	3,6	;RP1=0, select bank1
  9758  008E  00C3               	movwf	sprintf@tmpval^(0+128)
  9759  008F  1283               	bcf	3,5	;RP0=0, select bank0
  9760  0090  1303               	bcf	3,6	;RP1=0, select bank0
  9761  0091  083D               	movf	?_scale+1,w
  9762  0092  1683               	bsf	3,5	;RP0=1, select bank1
  9763  0093  1303               	bcf	3,6	;RP1=0, select bank1
  9764  0094  00C4               	movwf	(sprintf@tmpval+1)^(0+128)
  9765  0095  1283               	bcf	3,5	;RP0=0, select bank0
  9766  0096  1303               	bcf	3,6	;RP1=0, select bank0
  9767  0097  083E               	movf	?_scale+2,w
  9768  0098  1683               	bsf	3,5	;RP0=1, select bank1
  9769  0099  1303               	bcf	3,6	;RP1=0, select bank1
  9770  009A  00C5               	movwf	(sprintf@tmpval+2)^(0+128)
  9771  009B                     l3978:	
  9772                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1152:      val = 
      +                          ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
  9773                           
  9774  009B  084D               	movf	sprintf@fval^(0+128),w
  9775  009C  00F2               	movwf	__tdiv_to_l_@f1
  9776  009D  084E               	movf	(sprintf@fval+1)^(0+128),w
  9777  009E  00F3               	movwf	__tdiv_to_l_@f1+1
  9778  009F  084F               	movf	(sprintf@fval+2)^(0+128),w
  9779  00A0  00F4               	movwf	__tdiv_to_l_@f1+2
  9780  00A1  0843               	movf	sprintf@tmpval^(0+128),w
  9781  00A2  00F5               	movwf	__tdiv_to_l_@f2
  9782  00A3  0844               	movf	(sprintf@tmpval+1)^(0+128),w
  9783  00A4  00F6               	movwf	__tdiv_to_l_@f2+1
  9784  00A5  0845               	movf	(sprintf@tmpval+2)^(0+128),w
  9785  00A6  00F7               	movwf	__tdiv_to_l_@f2+2
  9786  00A7  160A  118A  241F  120A  118A  	fcall	__tdiv_to_l_
  9787  00AC  0875               	movf	?__tdiv_to_l_+3,w
  9788  00AD  1683               	bsf	3,5	;RP0=1, select bank1
  9789  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  9790  00AF  00CA               	movwf	(sprintf@val+3)^(0+128)
  9791  00B0  0874               	movf	?__tdiv_to_l_+2,w
  9792  00B1  00C9               	movwf	(sprintf@val+2)^(0+128)
  9793  00B2  0873               	movf	?__tdiv_to_l_+1,w
  9794  00B3  00C8               	movwf	(sprintf@val+1)^(0+128)
  9795  00B4  0872               	movf	?__tdiv_to_l_,w
  9796  00B5  00C7               	movwf	sprintf@val^(0+128)
  9797  00B6                     l3980:
  9798                           
  9799                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1155:      fval =
      +                           0.0;
  9800  00B6  3000               	movlw	0
  9801  00B7  00CD               	movwf	sprintf@fval^(0+128)
  9802  00B8  3000               	movlw	0
  9803  00B9  00CE               	movwf	(sprintf@fval+1)^(0+128)
  9804  00BA  3000               	movlw	0
  9805  00BB  00CF               	movwf	(sprintf@fval+2)^(0+128)
  9806                           
  9807                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1156:     } else 
      +                          {
  9808  00BC  293A               	goto	l3986
  9809  00BD                     l3982:
  9810                           
  9811                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1157:      val = 
      +                          (unsigned long)fval;
  9812  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  9813  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  9814  00BF  084D               	movf	sprintf@fval^(0+128),w
  9815  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  9816  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  9817  00C2  00C5               	movwf	___fttol@f1
  9818  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  9819  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  9820  00C5  084E               	movf	(sprintf@fval+1)^(0+128),w
  9821  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  9822  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  9823  00C8  00C6               	movwf	___fttol@f1+1
  9824  00C9  1683               	bsf	3,5	;RP0=1, select bank1
  9825  00CA  1303               	bcf	3,6	;RP1=0, select bank1
  9826  00CB  084F               	movf	(sprintf@fval+2)^(0+128),w
  9827  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  9828  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  9829  00CE  00C7               	movwf	___fttol@f1+2
  9830  00CF  120A  158A  2028  120A  118A  	fcall	___fttol
  9831  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  9832  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  9833  00D6  0848               	movf	?___fttol+3,w
  9834  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  9835  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  9836  00D9  00CA               	movwf	(sprintf@val+3)^(0+128)
  9837  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  9838  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  9839  00DC  0847               	movf	?___fttol+2,w
  9840  00DD  1683               	bsf	3,5	;RP0=1, select bank1
  9841  00DE  1303               	bcf	3,6	;RP1=0, select bank1
  9842  00DF  00C9               	movwf	(sprintf@val+2)^(0+128)
  9843  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  9844  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  9845  00E2  0846               	movf	?___fttol+1,w
  9846  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  9847  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  9848  00E5  00C8               	movwf	(sprintf@val+1)^(0+128)
  9849  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  9850  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  9851  00E8  0845               	movf	?___fttol,w
  9852  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  9853  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  9854  00EB  00C7               	movwf	sprintf@val^(0+128)
  9855                           
  9856                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1158:      fval -
      +                          = (double)val;
  9857  00EC  084A               	movf	(sprintf@val+3)^(0+128),w
  9858  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  9859  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  9860  00EF  00A3               	movwf	___lltoft@c+3
  9861  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  9862  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  9863  00F2  0849               	movf	(sprintf@val+2)^(0+128),w
  9864  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  9865  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  9866  00F5  00A2               	movwf	___lltoft@c+2
  9867  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  9868  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  9869  00F8  0848               	movf	(sprintf@val+1)^(0+128),w
  9870  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  9871  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  9872  00FB  00A1               	movwf	___lltoft@c+1
  9873  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  9874  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  9875  00FE  0847               	movf	sprintf@val^(0+128),w
  9876  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  9877  0100  1303               	bcf	3,6	;RP1=0, select bank0
  9878  0101  00A0               	movwf	___lltoft@c
  9879  0102  160A  158A  250E  120A  118A  	fcall	___lltoft
  9880  0107  1283               	bcf	3,5	;RP0=0, select bank0
  9881  0108  1303               	bcf	3,6	;RP1=0, select bank0
  9882  0109  0820               	movf	?___lltoft,w
  9883  010A  00D9               	movwf	___ftsub@f2
  9884  010B  0821               	movf	?___lltoft+1,w
  9885  010C  00DA               	movwf	___ftsub@f2+1
  9886  010D  0822               	movf	?___lltoft+2,w
  9887  010E  00DB               	movwf	___ftsub@f2+2
  9888  010F  1683               	bsf	3,5	;RP0=1, select bank1
  9889  0110  1303               	bcf	3,6	;RP1=0, select bank1
  9890  0111  084D               	movf	sprintf@fval^(0+128),w
  9891  0112  1283               	bcf	3,5	;RP0=0, select bank0
  9892  0113  1303               	bcf	3,6	;RP1=0, select bank0
  9893  0114  00DC               	movwf	___ftsub@f1
  9894  0115  1683               	bsf	3,5	;RP0=1, select bank1
  9895  0116  1303               	bcf	3,6	;RP1=0, select bank1
  9896  0117  084E               	movf	(sprintf@fval+1)^(0+128),w
  9897  0118  1283               	bcf	3,5	;RP0=0, select bank0
  9898  0119  1303               	bcf	3,6	;RP1=0, select bank0
  9899  011A  00DD               	movwf	___ftsub@f1+1
  9900  011B  1683               	bsf	3,5	;RP0=1, select bank1
  9901  011C  1303               	bcf	3,6	;RP1=0, select bank1
  9902  011D  084F               	movf	(sprintf@fval+2)^(0+128),w
  9903  011E  1283               	bcf	3,5	;RP0=0, select bank0
  9904  011F  1303               	bcf	3,6	;RP1=0, select bank0
  9905  0120  00DE               	movwf	___ftsub@f1+2
  9906  0121  160A  158A  24C0  120A  118A  	fcall	___ftsub
  9907  0126  1283               	bcf	3,5	;RP0=0, select bank0
  9908  0127  1303               	bcf	3,6	;RP1=0, select bank0
  9909  0128  0859               	movf	?___ftsub,w
  9910  0129  1683               	bsf	3,5	;RP0=1, select bank1
  9911  012A  1303               	bcf	3,6	;RP1=0, select bank1
  9912  012B  00CD               	movwf	sprintf@fval^(0+128)
  9913  012C  1283               	bcf	3,5	;RP0=0, select bank0
  9914  012D  1303               	bcf	3,6	;RP1=0, select bank0
  9915  012E  085A               	movf	?___ftsub+1,w
  9916  012F  1683               	bsf	3,5	;RP0=1, select bank1
  9917  0130  1303               	bcf	3,6	;RP1=0, select bank1
  9918  0131  00CE               	movwf	(sprintf@fval+1)^(0+128)
  9919  0132  1283               	bcf	3,5	;RP0=0, select bank0
  9920  0133  1303               	bcf	3,6	;RP1=0, select bank0
  9921  0134  085B               	movf	?___ftsub+2,w
  9922  0135  1683               	bsf	3,5	;RP0=1, select bank1
  9923  0136  1303               	bcf	3,6	;RP1=0, select bank1
  9924  0137  00CF               	movwf	(sprintf@fval+2)^(0+128)
  9925  0138                     l3984:
  9926                           
  9927                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1159:      eexp =
      +                           0;
  9928  0138  01CB               	clrf	sprintf@eexp^(0+128)
  9929  0139  01CC               	clrf	(sprintf@eexp+1)^(0+128)
  9930  013A                     l3986:
  9931                           
  9932                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1162:     for(c =
      +                           1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  9933  013A  01D3               	clrf	sprintf@c^(0+128)
  9934  013B  0AD3               	incf	sprintf@c^(0+128),f
  9935  013C                     l3992:
  9936                           
  9937                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1163:      if(val
      +                           < dpowers[c])
  9938  013C  0853               	movf	sprintf@c^(0+128),w
  9939  013D  1283               	bcf	3,5	;RP0=0, select bank0
  9940  013E  1303               	bcf	3,6	;RP1=0, select bank0
  9941  013F  00E3               	movwf	??_sprintf
  9942  0140  3001               	movlw	1
  9943  0141                     u5675:
  9944  0141  1003               	clrc
  9945  0142  0DE3               	rlf	??_sprintf,f
  9946  0143  3EFF               	addlw	-1
  9947  0144  1D03               	skipz
  9948  0145  2941               	goto	u5675
  9949  0146  1003               	clrc
  9950  0147  0D63               	rlf	??_sprintf,w
  9951  0148  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  9952  0149  0084               	movwf	4
  9953  014A  160A  118A  200A  120A  118A  	fcall	stringdir
  9954  014F  00E4               	movwf	??_sprintf+1
  9955  0150  160A  118A  200A  120A  118A  	fcall	stringdir
  9956  0155  00E5               	movwf	??_sprintf+2
  9957  0156  160A  118A  200A  120A  118A  	fcall	stringdir
  9958  015B  00E6               	movwf	??_sprintf+3
  9959  015C  160A  118A  200A  120A  118A  	fcall	stringdir
  9960  0161  00E7               	movwf	??_sprintf+4
  9961  0162  0867               	movf	??_sprintf+4,w
  9962  0163  1683               	bsf	3,5	;RP0=1, select bank1
  9963  0164  1303               	bcf	3,6	;RP1=0, select bank1
  9964  0165  024A               	subwf	(sprintf@val+3)^(0+128),w
  9965  0166  1D03               	skipz
  9966  0167  297E               	goto	u5685
  9967  0168  1283               	bcf	3,5	;RP0=0, select bank0
  9968  0169  1303               	bcf	3,6	;RP1=0, select bank0
  9969  016A  0866               	movf	??_sprintf+3,w
  9970  016B  1683               	bsf	3,5	;RP0=1, select bank1
  9971  016C  1303               	bcf	3,6	;RP1=0, select bank1
  9972  016D  0249               	subwf	(sprintf@val+2)^(0+128),w
  9973  016E  1D03               	skipz
  9974  016F  297E               	goto	u5685
  9975  0170  1283               	bcf	3,5	;RP0=0, select bank0
  9976  0171  1303               	bcf	3,6	;RP1=0, select bank0
  9977  0172  0865               	movf	??_sprintf+2,w
  9978  0173  1683               	bsf	3,5	;RP0=1, select bank1
  9979  0174  1303               	bcf	3,6	;RP1=0, select bank1
  9980  0175  0248               	subwf	(sprintf@val+1)^(0+128),w
  9981  0176  1D03               	skipz
  9982  0177  297E               	goto	u5685
  9983  0178  1283               	bcf	3,5	;RP0=0, select bank0
  9984  0179  1303               	bcf	3,6	;RP1=0, select bank0
  9985  017A  0864               	movf	??_sprintf+1,w
  9986  017B  1683               	bsf	3,5	;RP0=1, select bank1
  9987  017C  1303               	bcf	3,6	;RP1=0, select bank1
  9988  017D  0247               	subwf	sprintf@val^(0+128),w
  9989  017E                     u5685:
  9990  017E  1803               	skipnc
  9991  017F  2981               	goto	u5681
  9992  0180  2982               	goto	u5680
  9993  0181                     u5681:
  9994  0181  2983               	goto	l3996
  9995  0182                     u5680:
  9996  0182  2991               	goto	l3998
  9997  0183                     l3996:
  9998  0183  3001               	movlw	1
  9999  0184  1283               	bcf	3,5	;RP0=0, select bank0
 10000  0185  1303               	bcf	3,6	;RP1=0, select bank0
 10001  0186  00E3               	movwf	??_sprintf
 10002  0187  0863               	movf	??_sprintf,w
 10003  0188  1683               	bsf	3,5	;RP0=1, select bank1
 10004  0189  1303               	bcf	3,6	;RP1=0, select bank1
 10005  018A  07D3               	addwf	sprintf@c^(0+128),f
 10006  018B  300A               	movlw	10
 10007  018C  0653               	xorwf	sprintf@c^(0+128),w
 10008  018D  1D03               	btfss	3,2
 10009  018E  2990               	goto	u5691
 10010  018F  2991               	goto	u5690
 10011  0190                     u5691:
 10012  0190  293C               	goto	l3992
 10013  0191                     u5690:
 10014  0191                     l3998:
 10015                           
 10016                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1168:     width -
      +                          = prec + c + eexp;
 10017  0191  0853               	movf	sprintf@c^(0+128),w
 10018  0192  0751               	addwf	sprintf@prec^(0+128),w
 10019  0193  1283               	bcf	3,5	;RP0=0, select bank0
 10020  0194  1303               	bcf	3,6	;RP1=0, select bank0
 10021  0195  00E3               	movwf	??_sprintf
 10022  0196  1683               	bsf	3,5	;RP0=1, select bank1
 10023  0197  1303               	bcf	3,6	;RP1=0, select bank1
 10024  0198  0852               	movf	(sprintf@prec+1)^(0+128),w
 10025  0199  1803               	skipnc
 10026  019A  0A52               	incf	(sprintf@prec+1)^(0+128),w
 10027  019B  1283               	bcf	3,5	;RP0=0, select bank0
 10028  019C  1303               	bcf	3,6	;RP1=0, select bank0
 10029  019D  00E4               	movwf	??_sprintf+1
 10030  019E  1683               	bsf	3,5	;RP0=1, select bank1
 10031  019F  1303               	bcf	3,6	;RP1=0, select bank1
 10032  01A0  084B               	movf	sprintf@eexp^(0+128),w
 10033  01A1  1283               	bcf	3,5	;RP0=0, select bank0
 10034  01A2  1303               	bcf	3,6	;RP1=0, select bank0
 10035  01A3  0763               	addwf	??_sprintf,w
 10036  01A4  00E5               	movwf	??_sprintf+2
 10037  01A5  1683               	bsf	3,5	;RP0=1, select bank1
 10038  01A6  1303               	bcf	3,6	;RP1=0, select bank1
 10039  01A7  084C               	movf	(sprintf@eexp+1)^(0+128),w
 10040  01A8  1803               	skipnc
 10041  01A9  0A4C               	incf	(sprintf@eexp+1)^(0+128),w
 10042  01AA  1283               	bcf	3,5	;RP0=0, select bank0
 10043  01AB  1303               	bcf	3,6	;RP1=0, select bank0
 10044  01AC  0764               	addwf	??_sprintf+1,w
 10045  01AD  00E6               	movwf	??_sprintf+3
 10046  01AE  0865               	movf	??_sprintf+2,w
 10047  01AF  1683               	bsf	3,5	;RP0=1, select bank1
 10048  01B0  1303               	bcf	3,6	;RP1=0, select bank1
 10049  01B1  02C1               	subwf	sprintf@width^(0+128),f
 10050  01B2  1283               	bcf	3,5	;RP0=0, select bank0
 10051  01B3  1303               	bcf	3,6	;RP1=0, select bank0
 10052  01B4  0866               	movf	??_sprintf+3,w
 10053  01B5  1683               	bsf	3,5	;RP0=1, select bank1
 10054  01B6  1303               	bcf	3,6	;RP1=0, select bank1
 10055  01B7  1C03               	skipc
 10056  01B8  03C2               	decf	(sprintf@width+1)^(0+128),f
 10057  01B9  02C2               	subwf	(sprintf@width+1)^(0+128),f
 10058                           
 10059                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1169:     if(
 10060  01BA  0851               	movf	sprintf@prec^(0+128),w
 10061  01BB  0452               	iorwf	(sprintf@prec+1)^(0+128),w
 10062  01BC  1903               	btfsc	3,2
 10063  01BD  29BF               	goto	u5701
 10064  01BE  29C0               	goto	u5700
 10065  01BF                     u5701:
 10066  01BF  29C6               	goto	l4002
 10067  01C0                     u5700:
 10068  01C0                     l4000:
 10069                           
 10070                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1174:      width-
      +                          -;
 10071  01C0  30FF               	movlw	255
 10072  01C1  07C1               	addwf	sprintf@width^(0+128),f
 10073  01C2  1803               	skipnc
 10074  01C3  0AC2               	incf	(sprintf@width+1)^(0+128),f
 10075  01C4  30FF               	movlw	255
 10076  01C5  07C2               	addwf	(sprintf@width+1)^(0+128),f
 10077  01C6                     l4002:
 10078                           
 10079                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1175:     if(flag
      +                           & 0x03)
 10080  01C6  3003               	movlw	3
 10081  01C7  053F               	andwf	sprintf@flag^(0+128),w
 10082  01C8  1283               	bcf	3,5	;RP0=0, select bank0
 10083  01C9  1303               	bcf	3,6	;RP1=0, select bank0
 10084  01CA  00E3               	movwf	??_sprintf
 10085  01CB  3000               	movlw	0
 10086  01CC  1683               	bsf	3,5	;RP0=1, select bank1
 10087  01CD  1303               	bcf	3,6	;RP1=0, select bank1
 10088  01CE  0540               	andwf	(sprintf@flag+1)^(0+128),w
 10089  01CF  1283               	bcf	3,5	;RP0=0, select bank0
 10090  01D0  1303               	bcf	3,6	;RP1=0, select bank0
 10091  01D1  00E4               	movwf	??_sprintf+1
 10092  01D2  0863               	movf	??_sprintf,w
 10093  01D3  0464               	iorwf	??_sprintf+1,w
 10094  01D4  1903               	btfsc	3,2
 10095  01D5  29D7               	goto	u5711
 10096  01D6  29D8               	goto	u5710
 10097  01D7                     u5711:
 10098  01D7  29F5               	goto	l4012
 10099  01D8                     u5710:
 10100  01D8                     l4004:
 10101                           
 10102                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1176:      width-
      +                          -;
 10103  01D8  30FF               	movlw	255
 10104  01D9  1683               	bsf	3,5	;RP0=1, select bank1
 10105  01DA  1303               	bcf	3,6	;RP1=0, select bank1
 10106  01DB  07C1               	addwf	sprintf@width^(0+128),f
 10107  01DC  1803               	skipnc
 10108  01DD  0AC2               	incf	(sprintf@width+1)^(0+128),f
 10109  01DE  30FF               	movlw	255
 10110  01DF  07C2               	addwf	(sprintf@width+1)^(0+128),f
 10111  01E0  29F5               	goto	l4012
 10112  01E1                     l4006:
 10113                           
 10114                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1207:       ((*sp
      +                          ++ = (' ')));
 10115  01E1  3020               	movlw	32
 10116  01E2  1283               	bcf	3,5	;RP0=0, select bank0
 10117  01E3  1303               	bcf	3,6	;RP1=0, select bank0
 10118  01E4  00E3               	movwf	??_sprintf
 10119  01E5  1683               	bsf	3,5	;RP0=1, select bank1
 10120  01E6  1303               	bcf	3,6	;RP1=0, select bank1
 10121  01E7  0850               	movf	sprintf@sp^(0+128),w
 10122  01E8  0084               	movwf	4
 10123  01E9  1283               	bcf	3,5	;RP0=0, select bank0
 10124  01EA  1303               	bcf	3,6	;RP1=0, select bank0
 10125  01EB  0863               	movf	??_sprintf,w
 10126  01EC  1383               	bcf	3,7	;select IRP bank0
 10127  01ED  0080               	movwf	0
 10128  01EE                     l4008:
 10129  01EE  3001               	movlw	1
 10130  01EF  00E3               	movwf	??_sprintf
 10131  01F0  0863               	movf	??_sprintf,w
 10132  01F1  1683               	bsf	3,5	;RP0=1, select bank1
 10133  01F2  1303               	bcf	3,6	;RP1=0, select bank1
 10134  01F3  07D0               	addwf	sprintf@sp^(0+128),f
 10135  01F4  29D8               	goto	l4004
 10136  01F5                     l4012:
 10137                           
 10138                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1206:      while(
      +                          width > 0) {
 10139  01F5  1683               	bsf	3,5	;RP0=1, select bank1
 10140  01F6  1303               	bcf	3,6	;RP1=0, select bank1
 10141  01F7  0842               	movf	(sprintf@width+1)^(0+128),w
 10142  01F8  3A80               	xorlw	128
 10143  01F9  00FF               	movwf	btemp+1
 10144  01FA  3080               	movlw	128
 10145  01FB  027F               	subwf	btemp+1,w
 10146  01FC  1D03               	skipz
 10147  01FD  2A00               	goto	u5725
 10148  01FE  3001               	movlw	1
 10149  01FF  0241               	subwf	sprintf@width^(0+128),w
 10150  0200                     u5725:
 10151  0200  1803               	skipnc
 10152  0201  2A03               	goto	u5721
 10153  0202  2A04               	goto	u5720
 10154  0203                     u5721:
 10155  0203  29E1               	goto	l4006
 10156  0204                     u5720:
 10157  0204                     l4014:
 10158                           
 10159                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1214:     if(flag
      +                           & 0x03)
 10160  0204  3003               	movlw	3
 10161  0205  1683               	bsf	3,5	;RP0=1, select bank1
 10162  0206  1303               	bcf	3,6	;RP1=0, select bank1
 10163  0207  053F               	andwf	sprintf@flag^(0+128),w
 10164  0208  1283               	bcf	3,5	;RP0=0, select bank0
 10165  0209  1303               	bcf	3,6	;RP1=0, select bank0
 10166  020A  00E3               	movwf	??_sprintf
 10167  020B  3000               	movlw	0
 10168  020C  1683               	bsf	3,5	;RP0=1, select bank1
 10169  020D  1303               	bcf	3,6	;RP1=0, select bank1
 10170  020E  0540               	andwf	(sprintf@flag+1)^(0+128),w
 10171  020F  1283               	bcf	3,5	;RP0=0, select bank0
 10172  0210  1303               	bcf	3,6	;RP1=0, select bank0
 10173  0211  00E4               	movwf	??_sprintf+1
 10174  0212  0863               	movf	??_sprintf,w
 10175  0213  0464               	iorwf	??_sprintf+1,w
 10176  0214  1903               	btfsc	3,2
 10177  0215  2A17               	goto	u5731
 10178  0216  2A18               	goto	u5730
 10179  0217                     u5731:
 10180  0217  2ABC               	goto	l439
 10181  0218                     u5730:
 10182  0218                     l4016:
 10183                           
 10184                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1216:      ((*sp+
      +                          + = ('-')));
 10185  0218  302D               	movlw	45
 10186  0219  00E3               	movwf	??_sprintf
 10187  021A  1683               	bsf	3,5	;RP0=1, select bank1
 10188  021B  1303               	bcf	3,6	;RP1=0, select bank1
 10189  021C  0850               	movf	sprintf@sp^(0+128),w
 10190  021D  0084               	movwf	4
 10191  021E  1283               	bcf	3,5	;RP0=0, select bank0
 10192  021F  1303               	bcf	3,6	;RP1=0, select bank0
 10193  0220  0863               	movf	??_sprintf,w
 10194  0221  1383               	bcf	3,7	;select IRP bank0
 10195  0222  0080               	movwf	0
 10196  0223                     l4018:
 10197  0223  3001               	movlw	1
 10198  0224  00E3               	movwf	??_sprintf
 10199  0225  0863               	movf	??_sprintf,w
 10200  0226  1683               	bsf	3,5	;RP0=1, select bank1
 10201  0227  1303               	bcf	3,6	;RP1=0, select bank1
 10202  0228  07D0               	addwf	sprintf@sp^(0+128),f
 10203  0229  2ABC               	goto	l439
 10204  022A                     l4020:
 10205                           
 10206                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1226:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1227:      tmpval.vd = 
      +                          val/dpowers[c];
 10207  022A  0853               	movf	sprintf@c^(0+128),w
 10208  022B  1283               	bcf	3,5	;RP0=0, select bank0
 10209  022C  1303               	bcf	3,6	;RP1=0, select bank0
 10210  022D  00E3               	movwf	??_sprintf
 10211  022E  3001               	movlw	1
 10212  022F                     u5745:
 10213  022F  1003               	clrc
 10214  0230  0DE3               	rlf	??_sprintf,f
 10215  0231  3EFF               	addlw	-1
 10216  0232  1D03               	skipz
 10217  0233  2A2F               	goto	u5745
 10218  0234  1003               	clrc
 10219  0235  0D63               	rlf	??_sprintf,w
 10220  0236  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10221  0237  0084               	movwf	4
 10222  0238  160A  118A  200A  120A  118A  	fcall	stringdir
 10223  023D  00F2               	movwf	___lldiv@divisor
 10224  023E  160A  118A  200A  120A  118A  	fcall	stringdir
 10225  0243  00F3               	movwf	___lldiv@divisor+1
 10226  0244  160A  118A  200A  120A  118A  	fcall	stringdir
 10227  0249  00F4               	movwf	___lldiv@divisor+2
 10228  024A  160A  118A  200A  120A  118A  	fcall	stringdir
 10229  024F  00F5               	movwf	___lldiv@divisor+3
 10230  0250  1683               	bsf	3,5	;RP0=1, select bank1
 10231  0251  1303               	bcf	3,6	;RP1=0, select bank1
 10232  0252  084A               	movf	(sprintf@val+3)^(0+128),w
 10233  0253  00F9               	movwf	___lldiv@dividend+3
 10234  0254  0849               	movf	(sprintf@val+2)^(0+128),w
 10235  0255  00F8               	movwf	___lldiv@dividend+2
 10236  0256  0848               	movf	(sprintf@val+1)^(0+128),w
 10237  0257  00F7               	movwf	___lldiv@dividend+1
 10238  0258  0847               	movf	sprintf@val^(0+128),w
 10239  0259  00F6               	movwf	___lldiv@dividend
 10240  025A  160A  118A  2264  120A  118A  	fcall	___lldiv
 10241  025F  0875               	movf	?___lldiv+3,w
 10242  0260  1683               	bsf	3,5	;RP0=1, select bank1
 10243  0261  1303               	bcf	3,6	;RP1=0, select bank1
 10244  0262  00C6               	movwf	(sprintf@tmpval+3)^(0+128)
 10245  0263  0874               	movf	?___lldiv+2,w
 10246  0264  00C5               	movwf	(sprintf@tmpval+2)^(0+128)
 10247  0265  0873               	movf	?___lldiv+1,w
 10248  0266  00C4               	movwf	(sprintf@tmpval+1)^(0+128)
 10249  0267  0872               	movf	?___lldiv,w
 10250  0268  00C3               	movwf	sprintf@tmpval^(0+128)
 10251  0269                     l4022:
 10252                           
 10253                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1228:      tmpval
      +                          .vd %= 10;
 10254  0269  3000               	movlw	0
 10255  026A  1283               	bcf	3,5	;RP0=0, select bank0
 10256  026B  1303               	bcf	3,6	;RP1=0, select bank0
 10257  026C  00A9               	movwf	___llmod@divisor+3
 10258  026D  3000               	movlw	0
 10259  026E  00A8               	movwf	___llmod@divisor+2
 10260  026F  3000               	movlw	0
 10261  0270  00A7               	movwf	___llmod@divisor+1
 10262  0271  300A               	movlw	10
 10263  0272  00A6               	movwf	___llmod@divisor
 10264  0273  1683               	bsf	3,5	;RP0=1, select bank1
 10265  0274  1303               	bcf	3,6	;RP1=0, select bank1
 10266  0275  0846               	movf	(sprintf@tmpval+3)^(0+128),w
 10267  0276  1283               	bcf	3,5	;RP0=0, select bank0
 10268  0277  1303               	bcf	3,6	;RP1=0, select bank0
 10269  0278  00AD               	movwf	___llmod@dividend+3
 10270  0279  1683               	bsf	3,5	;RP0=1, select bank1
 10271  027A  1303               	bcf	3,6	;RP1=0, select bank1
 10272  027B  0845               	movf	(sprintf@tmpval+2)^(0+128),w
 10273  027C  1283               	bcf	3,5	;RP0=0, select bank0
 10274  027D  1303               	bcf	3,6	;RP1=0, select bank0
 10275  027E  00AC               	movwf	___llmod@dividend+2
 10276  027F  1683               	bsf	3,5	;RP0=1, select bank1
 10277  0280  1303               	bcf	3,6	;RP1=0, select bank1
 10278  0281  0844               	movf	(sprintf@tmpval+1)^(0+128),w
 10279  0282  1283               	bcf	3,5	;RP0=0, select bank0
 10280  0283  1303               	bcf	3,6	;RP1=0, select bank0
 10281  0284  00AB               	movwf	___llmod@dividend+1
 10282  0285  1683               	bsf	3,5	;RP0=1, select bank1
 10283  0286  1303               	bcf	3,6	;RP1=0, select bank1
 10284  0287  0843               	movf	sprintf@tmpval^(0+128),w
 10285  0288  1283               	bcf	3,5	;RP0=0, select bank0
 10286  0289  1303               	bcf	3,6	;RP1=0, select bank0
 10287  028A  00AA               	movwf	___llmod@dividend
 10288  028B  160A  118A  20FB  120A  118A  	fcall	___llmod
 10289  0290  1283               	bcf	3,5	;RP0=0, select bank0
 10290  0291  1303               	bcf	3,6	;RP1=0, select bank0
 10291  0292  0829               	movf	?___llmod+3,w
 10292  0293  1683               	bsf	3,5	;RP0=1, select bank1
 10293  0294  1303               	bcf	3,6	;RP1=0, select bank1
 10294  0295  00C6               	movwf	(sprintf@tmpval+3)^(0+128)
 10295  0296  1283               	bcf	3,5	;RP0=0, select bank0
 10296  0297  1303               	bcf	3,6	;RP1=0, select bank0
 10297  0298  0828               	movf	?___llmod+2,w
 10298  0299  1683               	bsf	3,5	;RP0=1, select bank1
 10299  029A  1303               	bcf	3,6	;RP1=0, select bank1
 10300  029B  00C5               	movwf	(sprintf@tmpval+2)^(0+128)
 10301  029C  1283               	bcf	3,5	;RP0=0, select bank0
 10302  029D  1303               	bcf	3,6	;RP1=0, select bank0
 10303  029E  0827               	movf	?___llmod+1,w
 10304  029F  1683               	bsf	3,5	;RP0=1, select bank1
 10305  02A0  1303               	bcf	3,6	;RP1=0, select bank1
 10306  02A1  00C4               	movwf	(sprintf@tmpval+1)^(0+128)
 10307  02A2  1283               	bcf	3,5	;RP0=0, select bank0
 10308  02A3  1303               	bcf	3,6	;RP1=0, select bank0
 10309  02A4  0826               	movf	?___llmod,w
 10310  02A5  1683               	bsf	3,5	;RP0=1, select bank1
 10311  02A6  1303               	bcf	3,6	;RP1=0, select bank1
 10312  02A7  00C3               	movwf	sprintf@tmpval^(0+128)
 10313  02A8                     l4024:
 10314                           
 10315                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1229:      ((*sp+
      +                          + = ('0' + tmpval.vd)));
 10316  02A8  0843               	movf	sprintf@tmpval^(0+128),w
 10317  02A9  3E30               	addlw	48
 10318  02AA  1283               	bcf	3,5	;RP0=0, select bank0
 10319  02AB  1303               	bcf	3,6	;RP1=0, select bank0
 10320  02AC  00E3               	movwf	??_sprintf
 10321  02AD  1683               	bsf	3,5	;RP0=1, select bank1
 10322  02AE  1303               	bcf	3,6	;RP1=0, select bank1
 10323  02AF  0850               	movf	sprintf@sp^(0+128),w
 10324  02B0  0084               	movwf	4
 10325  02B1  1283               	bcf	3,5	;RP0=0, select bank0
 10326  02B2  1303               	bcf	3,6	;RP1=0, select bank0
 10327  02B3  0863               	movf	??_sprintf,w
 10328  02B4  1383               	bcf	3,7	;select IRP bank0
 10329  02B5  0080               	movwf	0
 10330  02B6  3001               	movlw	1
 10331  02B7  00E3               	movwf	??_sprintf
 10332  02B8  0863               	movf	??_sprintf,w
 10333  02B9  1683               	bsf	3,5	;RP0=1, select bank1
 10334  02BA  1303               	bcf	3,6	;RP1=0, select bank1
 10335  02BB  07D0               	addwf	sprintf@sp^(0+128),f
 10336  02BC                     l439:	
 10337                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1230:     };C:\Pr
      +                          ogram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1232:    }
 10338                           
 10339                           
 10340                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1222:    while(c-
      +                          -) {
 10341  02BC  3001               	movlw	1
 10342  02BD  1683               	bsf	3,5	;RP0=1, select bank1
 10343  02BE  1303               	bcf	3,6	;RP1=0, select bank1
 10344  02BF  02D3               	subwf	sprintf@c^(0+128),f
 10345  02C0  0A53               	incf	sprintf@c^(0+128),w
 10346  02C1  1D03               	btfss	3,2
 10347  02C2  2AC4               	goto	u5751
 10348  02C3  2AC5               	goto	u5750
 10349  02C4                     u5751:
 10350  02C4  2A2A               	goto	l4020
 10351  02C5                     u5750:
 10352  02C5  2ADF               	goto	l4032
 10353  02C6                     l4026:
 10354                           
 10355                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1234:     ((*sp++
      +                           = ('0')));
 10356  02C6  3030               	movlw	48
 10357  02C7  1283               	bcf	3,5	;RP0=0, select bank0
 10358  02C8  1303               	bcf	3,6	;RP1=0, select bank0
 10359  02C9  00E3               	movwf	??_sprintf
 10360  02CA  1683               	bsf	3,5	;RP0=1, select bank1
 10361  02CB  1303               	bcf	3,6	;RP1=0, select bank1
 10362  02CC  0850               	movf	sprintf@sp^(0+128),w
 10363  02CD  0084               	movwf	4
 10364  02CE  1283               	bcf	3,5	;RP0=0, select bank0
 10365  02CF  1303               	bcf	3,6	;RP1=0, select bank0
 10366  02D0  0863               	movf	??_sprintf,w
 10367  02D1  1383               	bcf	3,7	;select IRP bank0
 10368  02D2  0080               	movwf	0
 10369  02D3                     l4028:
 10370  02D3  3001               	movlw	1
 10371  02D4  00E3               	movwf	??_sprintf
 10372  02D5  0863               	movf	??_sprintf,w
 10373  02D6  1683               	bsf	3,5	;RP0=1, select bank1
 10374  02D7  1303               	bcf	3,6	;RP1=0, select bank1
 10375  02D8  07D0               	addwf	sprintf@sp^(0+128),f
 10376  02D9                     l4030:
 10377                           
 10378                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1235:     eexp--;
 10379  02D9  30FF               	movlw	255
 10380  02DA  07CB               	addwf	sprintf@eexp^(0+128),f
 10381  02DB  1803               	skipnc
 10382  02DC  0ACC               	incf	(sprintf@eexp+1)^(0+128),f
 10383  02DD  30FF               	movlw	255
 10384  02DE  07CC               	addwf	(sprintf@eexp+1)^(0+128),f
 10385  02DF                     l4032:
 10386                           
 10387                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1233:    while(ee
      +                          xp > 0) {
 10388  02DF  084C               	movf	(sprintf@eexp+1)^(0+128),w
 10389  02E0  3A80               	xorlw	128
 10390  02E1  00FF               	movwf	btemp+1
 10391  02E2  3080               	movlw	128
 10392  02E3  027F               	subwf	btemp+1,w
 10393  02E4  1D03               	skipz
 10394  02E5  2AE8               	goto	u5765
 10395  02E6  3001               	movlw	1
 10396  02E7  024B               	subwf	sprintf@eexp^(0+128),w
 10397  02E8                     u5765:
 10398  02E8  1803               	skipnc
 10399  02E9  2AEB               	goto	u5761
 10400  02EA  2AEC               	goto	u5760
 10401  02EB                     u5761:
 10402  02EB  2AC6               	goto	l4026
 10403  02EC                     u5760:
 10404  02EC                     l4034:
 10405                           
 10406                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1237:    if(prec 
      +                          > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 10407  02EC  1683               	bsf	3,5	;RP0=1, select bank1
 10408  02ED  1303               	bcf	3,6	;RP1=0, select bank1
 10409  02EE  0852               	movf	(sprintf@prec+1)^(0+128),w
 10410  02EF  3A80               	xorlw	128
 10411  02F0  00FF               	movwf	btemp+1
 10412  02F1  3080               	movlw	128
 10413  02F2  027F               	subwf	btemp+1,w
 10414  02F3  1D03               	skipz
 10415  02F4  2AF7               	goto	u5775
 10416  02F5  3009               	movlw	9
 10417  02F6  0251               	subwf	sprintf@prec^(0+128),w
 10418  02F7                     u5775:
 10419  02F7  1C03               	skipc
 10420  02F8  2AFA               	goto	u5771
 10421  02F9  2AFB               	goto	u5770
 10422  02FA                     u5771:
 10423  02FA  2B04               	goto	l4038
 10424  02FB                     u5770:
 10425  02FB                     l4036:
 10426                           
 10427                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1238:     c = (si
      +                          zeof dpowers/sizeof dpowers[0])-2;
 10428  02FB  3008               	movlw	8
 10429  02FC  1283               	bcf	3,5	;RP0=0, select bank0
 10430  02FD  1303               	bcf	3,6	;RP1=0, select bank0
 10431  02FE  00E3               	movwf	??_sprintf
 10432  02FF  0863               	movf	??_sprintf,w
 10433  0300  1683               	bsf	3,5	;RP0=1, select bank1
 10434  0301  1303               	bcf	3,6	;RP1=0, select bank1
 10435  0302  00D3               	movwf	sprintf@c^(0+128)
 10436  0303  2B0E               	goto	l446
 10437  0304                     l4038:
 10438                           
 10439                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1240:     c = (ch
      +                          ar)prec;
 10440  0304  1683               	bsf	3,5	;RP0=1, select bank1
 10441  0305  1303               	bcf	3,6	;RP1=0, select bank1
 10442  0306  0851               	movf	sprintf@prec^(0+128),w
 10443  0307  1283               	bcf	3,5	;RP0=0, select bank0
 10444  0308  1303               	bcf	3,6	;RP1=0, select bank0
 10445  0309  00E3               	movwf	??_sprintf
 10446  030A  0863               	movf	??_sprintf,w
 10447  030B  1683               	bsf	3,5	;RP0=1, select bank1
 10448  030C  1303               	bcf	3,6	;RP1=0, select bank1
 10449  030D  00D3               	movwf	sprintf@c^(0+128)
 10450  030E                     l446:
 10451                           
 10452                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1241:    prec -= 
      +                          (int)c;
 10453  030E  0853               	movf	sprintf@c^(0+128),w
 10454  030F  1283               	bcf	3,5	;RP0=0, select bank0
 10455  0310  1303               	bcf	3,6	;RP1=0, select bank0
 10456  0311  00E3               	movwf	??_sprintf
 10457  0312  01E4               	clrf	??_sprintf+1
 10458  0313  0863               	movf	??_sprintf,w
 10459  0314  1683               	bsf	3,5	;RP0=1, select bank1
 10460  0315  1303               	bcf	3,6	;RP1=0, select bank1
 10461  0316  02D1               	subwf	sprintf@prec^(0+128),f
 10462  0317  1283               	bcf	3,5	;RP0=0, select bank0
 10463  0318  1303               	bcf	3,6	;RP1=0, select bank0
 10464  0319  0864               	movf	??_sprintf+1,w
 10465  031A  1683               	bsf	3,5	;RP0=1, select bank1
 10466  031B  1303               	bcf	3,6	;RP1=0, select bank1
 10467  031C  1C03               	skipc
 10468  031D  03D2               	decf	(sprintf@prec+1)^(0+128),f
 10469  031E  02D2               	subwf	(sprintf@prec+1)^(0+128),f
 10470  031F                     l4040:
 10471                           
 10472                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1245:    if(c)
 10473  031F  0853               	movf	sprintf@c^(0+128),w
 10474  0320  1903               	btfsc	3,2
 10475  0321  2B23               	goto	u5781
 10476  0322  2B24               	goto	u5780
 10477  0323                     u5781:
 10478  0323  2B37               	goto	l4046
 10479  0324                     u5780:
 10480  0324                     l4042:
 10481                           
 10482                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1247:     ((*sp++
      +                           = ('.')));
 10483  0324  302E               	movlw	46
 10484  0325  1283               	bcf	3,5	;RP0=0, select bank0
 10485  0326  1303               	bcf	3,6	;RP1=0, select bank0
 10486  0327  00E3               	movwf	??_sprintf
 10487  0328  1683               	bsf	3,5	;RP0=1, select bank1
 10488  0329  1303               	bcf	3,6	;RP1=0, select bank1
 10489  032A  0850               	movf	sprintf@sp^(0+128),w
 10490  032B  0084               	movwf	4
 10491  032C  1283               	bcf	3,5	;RP0=0, select bank0
 10492  032D  1303               	bcf	3,6	;RP1=0, select bank0
 10493  032E  0863               	movf	??_sprintf,w
 10494  032F  1383               	bcf	3,7	;select IRP bank0
 10495  0330  0080               	movwf	0
 10496  0331                     l4044:
 10497  0331  3001               	movlw	1
 10498  0332  00E3               	movwf	??_sprintf
 10499  0333  0863               	movf	??_sprintf,w
 10500  0334  1683               	bsf	3,5	;RP0=1, select bank1
 10501  0335  1303               	bcf	3,6	;RP1=0, select bank1
 10502  0336  07D0               	addwf	sprintf@sp^(0+128),f
 10503  0337                     l4046:
 10504                           
 10505                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
 10506  0337  0853               	movf	sprintf@c^(0+128),w
 10507  0338  120A  158A  225D  120A  118A  	fcall	_scale
 10508  033D  1283               	bcf	3,5	;RP0=0, select bank0
 10509  033E  1303               	bcf	3,6	;RP1=0, select bank0
 10510  033F  083C               	movf	?_scale,w
 10511  0340  1683               	bsf	3,5	;RP0=1, select bank1
 10512  0341  1303               	bcf	3,6	;RP1=0, select bank1
 10513  0342  00BB               	movwf	_sprintf$1240^(0+128)
 10514  0343  1283               	bcf	3,5	;RP0=0, select bank0
 10515  0344  1303               	bcf	3,6	;RP1=0, select bank0
 10516  0345  083D               	movf	?_scale+1,w
 10517  0346  1683               	bsf	3,5	;RP0=1, select bank1
 10518  0347  1303               	bcf	3,6	;RP1=0, select bank1
 10519  0348  00BC               	movwf	(_sprintf$1240+1)^(0+128)
 10520  0349  1283               	bcf	3,5	;RP0=0, select bank0
 10521  034A  1303               	bcf	3,6	;RP1=0, select bank0
 10522  034B  083E               	movf	?_scale+2,w
 10523  034C  1683               	bsf	3,5	;RP0=1, select bank1
 10524  034D  1303               	bcf	3,6	;RP1=0, select bank1
 10525  034E  00BD               	movwf	(_sprintf$1240+2)^(0+128)
 10526  034F                     l4048:
 10527                           
 10528                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
 10529  034F  083B               	movf	_sprintf$1240^(0+128),w
 10530  0350  1283               	bcf	3,5	;RP0=0, select bank0
 10531  0351  1303               	bcf	3,6	;RP1=0, select bank0
 10532  0352  00AF               	movwf	___ftmul@f2
 10533  0353  1683               	bsf	3,5	;RP0=1, select bank1
 10534  0354  1303               	bcf	3,6	;RP1=0, select bank1
 10535  0355  083C               	movf	(_sprintf$1240+1)^(0+128),w
 10536  0356  1283               	bcf	3,5	;RP0=0, select bank0
 10537  0357  1303               	bcf	3,6	;RP1=0, select bank0
 10538  0358  00B0               	movwf	___ftmul@f2+1
 10539  0359  1683               	bsf	3,5	;RP0=1, select bank1
 10540  035A  1303               	bcf	3,6	;RP1=0, select bank1
 10541  035B  083D               	movf	(_sprintf$1240+2)^(0+128),w
 10542  035C  1283               	bcf	3,5	;RP0=0, select bank0
 10543  035D  1303               	bcf	3,6	;RP1=0, select bank0
 10544  035E  00B1               	movwf	___ftmul@f2+2
 10545  035F  1683               	bsf	3,5	;RP0=1, select bank1
 10546  0360  1303               	bcf	3,6	;RP1=0, select bank1
 10547  0361  084D               	movf	sprintf@fval^(0+128),w
 10548  0362  1283               	bcf	3,5	;RP0=0, select bank0
 10549  0363  1303               	bcf	3,6	;RP1=0, select bank0
 10550  0364  00AC               	movwf	___ftmul@f1
 10551  0365  1683               	bsf	3,5	;RP0=1, select bank1
 10552  0366  1303               	bcf	3,6	;RP1=0, select bank1
 10553  0367  084E               	movf	(sprintf@fval+1)^(0+128),w
 10554  0368  1283               	bcf	3,5	;RP0=0, select bank0
 10555  0369  1303               	bcf	3,6	;RP1=0, select bank0
 10556  036A  00AD               	movwf	___ftmul@f1+1
 10557  036B  1683               	bsf	3,5	;RP0=1, select bank1
 10558  036C  1303               	bcf	3,6	;RP1=0, select bank1
 10559  036D  084F               	movf	(sprintf@fval+2)^(0+128),w
 10560  036E  1283               	bcf	3,5	;RP0=0, select bank0
 10561  036F  1303               	bcf	3,6	;RP1=0, select bank0
 10562  0370  00AE               	movwf	___ftmul@f1+2
 10563  0371  120A  118A  26D8  120A  118A  	fcall	___ftmul
 10564  0376  1283               	bcf	3,5	;RP0=0, select bank0
 10565  0377  1303               	bcf	3,6	;RP1=0, select bank0
 10566  0378  082C               	movf	?___ftmul,w
 10567  0379  00C5               	movwf	___fttol@f1
 10568  037A  082D               	movf	?___ftmul+1,w
 10569  037B  00C6               	movwf	___fttol@f1+1
 10570  037C  082E               	movf	?___ftmul+2,w
 10571  037D  00C7               	movwf	___fttol@f1+2
 10572  037E  120A  158A  2028  120A  118A  	fcall	___fttol
 10573  0383  1283               	bcf	3,5	;RP0=0, select bank0
 10574  0384  1303               	bcf	3,6	;RP1=0, select bank0
 10575  0385  0848               	movf	?___fttol+3,w
 10576  0386  1683               	bsf	3,5	;RP0=1, select bank1
 10577  0387  1303               	bcf	3,6	;RP1=0, select bank1
 10578  0388  00CA               	movwf	(sprintf@val+3)^(0+128)
 10579  0389  1283               	bcf	3,5	;RP0=0, select bank0
 10580  038A  1303               	bcf	3,6	;RP1=0, select bank0
 10581  038B  0847               	movf	?___fttol+2,w
 10582  038C  1683               	bsf	3,5	;RP0=1, select bank1
 10583  038D  1303               	bcf	3,6	;RP1=0, select bank1
 10584  038E  00C9               	movwf	(sprintf@val+2)^(0+128)
 10585  038F  1283               	bcf	3,5	;RP0=0, select bank0
 10586  0390  1303               	bcf	3,6	;RP1=0, select bank0
 10587  0391  0846               	movf	?___fttol+1,w
 10588  0392  1683               	bsf	3,5	;RP0=1, select bank1
 10589  0393  1303               	bcf	3,6	;RP1=0, select bank1
 10590  0394  00C8               	movwf	(sprintf@val+1)^(0+128)
 10591  0395  1283               	bcf	3,5	;RP0=0, select bank0
 10592  0396  1303               	bcf	3,6	;RP1=0, select bank0
 10593  0397  0845               	movf	?___fttol,w
 10594  0398  1683               	bsf	3,5	;RP0=1, select bank1
 10595  0399  1303               	bcf	3,6	;RP1=0, select bank1
 10596  039A  00C7               	movwf	sprintf@val^(0+128)
 10597                           
 10598                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
 10599  039B  2C89               	goto	l4058
 10600  039C                     l4050:
 10601                           
 10602                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1255:     tmpval.
      +                          vd = val/dpowers[c];
 10603  039C  0853               	movf	sprintf@c^(0+128),w
 10604  039D  1283               	bcf	3,5	;RP0=0, select bank0
 10605  039E  1303               	bcf	3,6	;RP1=0, select bank0
 10606  039F  00E3               	movwf	??_sprintf
 10607  03A0  3001               	movlw	1
 10608  03A1                     u5795:
 10609  03A1  1003               	clrc
 10610  03A2  0DE3               	rlf	??_sprintf,f
 10611  03A3  3EFF               	addlw	-1
 10612  03A4  1D03               	skipz
 10613  03A5  2BA1               	goto	u5795
 10614  03A6  1003               	clrc
 10615  03A7  0D63               	rlf	??_sprintf,w
 10616  03A8  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10617  03A9  0084               	movwf	4
 10618  03AA  160A  118A  200A  120A  118A  	fcall	stringdir
 10619  03AF  00F2               	movwf	___lldiv@divisor
 10620  03B0  160A  118A  200A  120A  118A  	fcall	stringdir
 10621  03B5  00F3               	movwf	___lldiv@divisor+1
 10622  03B6  160A  118A  200A  120A  118A  	fcall	stringdir
 10623  03BB  00F4               	movwf	___lldiv@divisor+2
 10624  03BC  160A  118A  200A  120A  118A  	fcall	stringdir
 10625  03C1  00F5               	movwf	___lldiv@divisor+3
 10626  03C2  1683               	bsf	3,5	;RP0=1, select bank1
 10627  03C3  1303               	bcf	3,6	;RP1=0, select bank1
 10628  03C4  084A               	movf	(sprintf@val+3)^(0+128),w
 10629  03C5  00F9               	movwf	___lldiv@dividend+3
 10630  03C6  0849               	movf	(sprintf@val+2)^(0+128),w
 10631  03C7  00F8               	movwf	___lldiv@dividend+2
 10632  03C8  0848               	movf	(sprintf@val+1)^(0+128),w
 10633  03C9  00F7               	movwf	___lldiv@dividend+1
 10634  03CA  0847               	movf	sprintf@val^(0+128),w
 10635  03CB  00F6               	movwf	___lldiv@dividend
 10636  03CC  160A  118A  2264  120A  118A  	fcall	___lldiv
 10637  03D1  0875               	movf	?___lldiv+3,w
 10638  03D2  1683               	bsf	3,5	;RP0=1, select bank1
 10639  03D3  1303               	bcf	3,6	;RP1=0, select bank1
 10640  03D4  00C6               	movwf	(sprintf@tmpval+3)^(0+128)
 10641  03D5  0874               	movf	?___lldiv+2,w
 10642  03D6  00C5               	movwf	(sprintf@tmpval+2)^(0+128)
 10643  03D7  0873               	movf	?___lldiv+1,w
 10644  03D8  00C4               	movwf	(sprintf@tmpval+1)^(0+128)
 10645  03D9  0872               	movf	?___lldiv,w
 10646  03DA  00C3               	movwf	sprintf@tmpval^(0+128)
 10647  03DB                     l4052:
 10648                           
 10649                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1256:     tmpval.
      +                          vd %= 10;
 10650  03DB  3000               	movlw	0
 10651  03DC  1283               	bcf	3,5	;RP0=0, select bank0
 10652  03DD  1303               	bcf	3,6	;RP1=0, select bank0
 10653  03DE  00A9               	movwf	___llmod@divisor+3
 10654  03DF  3000               	movlw	0
 10655  03E0  00A8               	movwf	___llmod@divisor+2
 10656  03E1  3000               	movlw	0
 10657  03E2  00A7               	movwf	___llmod@divisor+1
 10658  03E3  300A               	movlw	10
 10659  03E4  00A6               	movwf	___llmod@divisor
 10660  03E5  1683               	bsf	3,5	;RP0=1, select bank1
 10661  03E6  1303               	bcf	3,6	;RP1=0, select bank1
 10662  03E7  0846               	movf	(sprintf@tmpval+3)^(0+128),w
 10663  03E8  1283               	bcf	3,5	;RP0=0, select bank0
 10664  03E9  1303               	bcf	3,6	;RP1=0, select bank0
 10665  03EA  00AD               	movwf	___llmod@dividend+3
 10666  03EB  1683               	bsf	3,5	;RP0=1, select bank1
 10667  03EC  1303               	bcf	3,6	;RP1=0, select bank1
 10668  03ED  0845               	movf	(sprintf@tmpval+2)^(0+128),w
 10669  03EE  1283               	bcf	3,5	;RP0=0, select bank0
 10670  03EF  1303               	bcf	3,6	;RP1=0, select bank0
 10671  03F0  00AC               	movwf	___llmod@dividend+2
 10672  03F1  1683               	bsf	3,5	;RP0=1, select bank1
 10673  03F2  1303               	bcf	3,6	;RP1=0, select bank1
 10674  03F3  0844               	movf	(sprintf@tmpval+1)^(0+128),w
 10675  03F4  1283               	bcf	3,5	;RP0=0, select bank0
 10676  03F5  1303               	bcf	3,6	;RP1=0, select bank0
 10677  03F6  00AB               	movwf	___llmod@dividend+1
 10678  03F7  1683               	bsf	3,5	;RP0=1, select bank1
 10679  03F8  1303               	bcf	3,6	;RP1=0, select bank1
 10680  03F9  0843               	movf	sprintf@tmpval^(0+128),w
 10681  03FA  1283               	bcf	3,5	;RP0=0, select bank0
 10682  03FB  1303               	bcf	3,6	;RP1=0, select bank0
 10683  03FC  00AA               	movwf	___llmod@dividend
 10684  03FD  160A  118A  20FB  120A  118A  	fcall	___llmod
 10685  0402  1283               	bcf	3,5	;RP0=0, select bank0
 10686  0403  1303               	bcf	3,6	;RP1=0, select bank0
 10687  0404  0829               	movf	?___llmod+3,w
 10688  0405  1683               	bsf	3,5	;RP0=1, select bank1
 10689  0406  1303               	bcf	3,6	;RP1=0, select bank1
 10690  0407  00C6               	movwf	(sprintf@tmpval+3)^(0+128)
 10691  0408  1283               	bcf	3,5	;RP0=0, select bank0
 10692  0409  1303               	bcf	3,6	;RP1=0, select bank0
 10693  040A  0828               	movf	?___llmod+2,w
 10694  040B  1683               	bsf	3,5	;RP0=1, select bank1
 10695  040C  1303               	bcf	3,6	;RP1=0, select bank1
 10696  040D  00C5               	movwf	(sprintf@tmpval+2)^(0+128)
 10697  040E  1283               	bcf	3,5	;RP0=0, select bank0
 10698  040F  1303               	bcf	3,6	;RP1=0, select bank0
 10699  0410  0827               	movf	?___llmod+1,w
 10700  0411  1683               	bsf	3,5	;RP0=1, select bank1
 10701  0412  1303               	bcf	3,6	;RP1=0, select bank1
 10702  0413  00C4               	movwf	(sprintf@tmpval+1)^(0+128)
 10703  0414  1283               	bcf	3,5	;RP0=0, select bank0
 10704  0415  1303               	bcf	3,6	;RP1=0, select bank0
 10705  0416  0826               	movf	?___llmod,w
 10706  0417  1683               	bsf	3,5	;RP0=1, select bank1
 10707  0418  1303               	bcf	3,6	;RP1=0, select bank1
 10708  0419  00C3               	movwf	sprintf@tmpval^(0+128)
 10709  041A                     l4054:
 10710                           
 10711                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1257:     ((*sp++
      +                           = ('0' + tmpval.vd)));
 10712  041A  0843               	movf	sprintf@tmpval^(0+128),w
 10713  041B  3E30               	addlw	48
 10714  041C  1283               	bcf	3,5	;RP0=0, select bank0
 10715  041D  1303               	bcf	3,6	;RP1=0, select bank0
 10716  041E  00E3               	movwf	??_sprintf
 10717  041F  1683               	bsf	3,5	;RP0=1, select bank1
 10718  0420  1303               	bcf	3,6	;RP1=0, select bank1
 10719  0421  0850               	movf	sprintf@sp^(0+128),w
 10720  0422  0084               	movwf	4
 10721  0423  1283               	bcf	3,5	;RP0=0, select bank0
 10722  0424  1303               	bcf	3,6	;RP1=0, select bank0
 10723  0425  0863               	movf	??_sprintf,w
 10724  0426  1383               	bcf	3,7	;select IRP bank0
 10725  0427  0080               	movwf	0
 10726  0428  3001               	movlw	1
 10727  0429  00E3               	movwf	??_sprintf
 10728  042A  0863               	movf	??_sprintf,w
 10729  042B  1683               	bsf	3,5	;RP0=1, select bank1
 10730  042C  1303               	bcf	3,6	;RP1=0, select bank1
 10731  042D  07D0               	addwf	sprintf@sp^(0+128),f
 10732  042E                     l4056:
 10733                           
 10734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1258:     val %= 
      +                          dpowers[c];
 10735  042E  0853               	movf	sprintf@c^(0+128),w
 10736  042F  1283               	bcf	3,5	;RP0=0, select bank0
 10737  0430  1303               	bcf	3,6	;RP1=0, select bank0
 10738  0431  00E3               	movwf	??_sprintf
 10739  0432  3001               	movlw	1
 10740  0433                     u5805:
 10741  0433  1003               	clrc
 10742  0434  0DE3               	rlf	??_sprintf,f
 10743  0435  3EFF               	addlw	-1
 10744  0436  1D03               	skipz
 10745  0437  2C33               	goto	u5805
 10746  0438  1003               	clrc
 10747  0439  0D63               	rlf	??_sprintf,w
 10748  043A  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10749  043B  0084               	movwf	4
 10750  043C  160A  118A  200A  120A  118A  	fcall	stringdir
 10751  0441  00A6               	movwf	___llmod@divisor
 10752  0442  160A  118A  200A  120A  118A  	fcall	stringdir
 10753  0447  00A7               	movwf	___llmod@divisor+1
 10754  0448  160A  118A  200A  120A  118A  	fcall	stringdir
 10755  044D  00A8               	movwf	___llmod@divisor+2
 10756  044E  160A  118A  200A  120A  118A  	fcall	stringdir
 10757  0453  00A9               	movwf	___llmod@divisor+3
 10758  0454  1683               	bsf	3,5	;RP0=1, select bank1
 10759  0455  1303               	bcf	3,6	;RP1=0, select bank1
 10760  0456  084A               	movf	(sprintf@val+3)^(0+128),w
 10761  0457  1283               	bcf	3,5	;RP0=0, select bank0
 10762  0458  1303               	bcf	3,6	;RP1=0, select bank0
 10763  0459  00AD               	movwf	___llmod@dividend+3
 10764  045A  1683               	bsf	3,5	;RP0=1, select bank1
 10765  045B  1303               	bcf	3,6	;RP1=0, select bank1
 10766  045C  0849               	movf	(sprintf@val+2)^(0+128),w
 10767  045D  1283               	bcf	3,5	;RP0=0, select bank0
 10768  045E  1303               	bcf	3,6	;RP1=0, select bank0
 10769  045F  00AC               	movwf	___llmod@dividend+2
 10770  0460  1683               	bsf	3,5	;RP0=1, select bank1
 10771  0461  1303               	bcf	3,6	;RP1=0, select bank1
 10772  0462  0848               	movf	(sprintf@val+1)^(0+128),w
 10773  0463  1283               	bcf	3,5	;RP0=0, select bank0
 10774  0464  1303               	bcf	3,6	;RP1=0, select bank0
 10775  0465  00AB               	movwf	___llmod@dividend+1
 10776  0466  1683               	bsf	3,5	;RP0=1, select bank1
 10777  0467  1303               	bcf	3,6	;RP1=0, select bank1
 10778  0468  0847               	movf	sprintf@val^(0+128),w
 10779  0469  1283               	bcf	3,5	;RP0=0, select bank0
 10780  046A  1303               	bcf	3,6	;RP1=0, select bank0
 10781  046B  00AA               	movwf	___llmod@dividend
 10782  046C  160A  118A  20FB  120A  118A  	fcall	___llmod
 10783  0471  1283               	bcf	3,5	;RP0=0, select bank0
 10784  0472  1303               	bcf	3,6	;RP1=0, select bank0
 10785  0473  0829               	movf	?___llmod+3,w
 10786  0474  1683               	bsf	3,5	;RP0=1, select bank1
 10787  0475  1303               	bcf	3,6	;RP1=0, select bank1
 10788  0476  00CA               	movwf	(sprintf@val+3)^(0+128)
 10789  0477  1283               	bcf	3,5	;RP0=0, select bank0
 10790  0478  1303               	bcf	3,6	;RP1=0, select bank0
 10791  0479  0828               	movf	?___llmod+2,w
 10792  047A  1683               	bsf	3,5	;RP0=1, select bank1
 10793  047B  1303               	bcf	3,6	;RP1=0, select bank1
 10794  047C  00C9               	movwf	(sprintf@val+2)^(0+128)
 10795  047D  1283               	bcf	3,5	;RP0=0, select bank0
 10796  047E  1303               	bcf	3,6	;RP1=0, select bank0
 10797  047F  0827               	movf	?___llmod+1,w
 10798  0480  1683               	bsf	3,5	;RP0=1, select bank1
 10799  0481  1303               	bcf	3,6	;RP1=0, select bank1
 10800  0482  00C8               	movwf	(sprintf@val+1)^(0+128)
 10801  0483  1283               	bcf	3,5	;RP0=0, select bank0
 10802  0484  1303               	bcf	3,6	;RP1=0, select bank0
 10803  0485  0826               	movf	?___llmod,w
 10804  0486  1683               	bsf	3,5	;RP0=1, select bank1
 10805  0487  1303               	bcf	3,6	;RP1=0, select bank1
 10806  0488  00C7               	movwf	sprintf@val^(0+128)
 10807  0489                     l4058:
 10808                           
 10809                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
 10810  0489  3001               	movlw	1
 10811  048A  02D3               	subwf	sprintf@c^(0+128),f
 10812  048B  0A53               	incf	sprintf@c^(0+128),w
 10813  048C  1D03               	btfss	3,2
 10814  048D  2C8F               	goto	u5811
 10815  048E  2C90               	goto	u5810
 10816  048F                     u5811:
 10817  048F  2B9C               	goto	l4050
 10818  0490                     u5810:
 10819  0490  2CAA               	goto	l4066
 10820  0491                     l4060:
 10821                           
 10822                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1262:     ((*sp++
      +                           = ('0')));
 10823  0491  3030               	movlw	48
 10824  0492  1283               	bcf	3,5	;RP0=0, select bank0
 10825  0493  1303               	bcf	3,6	;RP1=0, select bank0
 10826  0494  00E3               	movwf	??_sprintf
 10827  0495  1683               	bsf	3,5	;RP0=1, select bank1
 10828  0496  1303               	bcf	3,6	;RP1=0, select bank1
 10829  0497  0850               	movf	sprintf@sp^(0+128),w
 10830  0498  0084               	movwf	4
 10831  0499  1283               	bcf	3,5	;RP0=0, select bank0
 10832  049A  1303               	bcf	3,6	;RP1=0, select bank0
 10833  049B  0863               	movf	??_sprintf,w
 10834  049C  1383               	bcf	3,7	;select IRP bank0
 10835  049D  0080               	movwf	0
 10836  049E                     l4062:
 10837  049E  3001               	movlw	1
 10838  049F  00E3               	movwf	??_sprintf
 10839  04A0  0863               	movf	??_sprintf,w
 10840  04A1  1683               	bsf	3,5	;RP0=1, select bank1
 10841  04A2  1303               	bcf	3,6	;RP1=0, select bank1
 10842  04A3  07D0               	addwf	sprintf@sp^(0+128),f
 10843  04A4                     l4064:
 10844                           
 10845                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1263:     prec--;
 10846  04A4  30FF               	movlw	255
 10847  04A5  07D1               	addwf	sprintf@prec^(0+128),f
 10848  04A6  1803               	skipnc
 10849  04A7  0AD2               	incf	(sprintf@prec+1)^(0+128),f
 10850  04A8  30FF               	movlw	255
 10851  04A9  07D2               	addwf	(sprintf@prec+1)^(0+128),f
 10852  04AA                     l4066:
 10853                           
 10854                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1261:    while(pr
      +                          ec) {
 10855  04AA  0851               	movf	sprintf@prec^(0+128),w
 10856  04AB  0452               	iorwf	(sprintf@prec+1)^(0+128),w
 10857  04AC  1D03               	btfss	3,2
 10858  04AD  2CAF               	goto	u5821
 10859  04AE  2CB0               	goto	u5820
 10860  04AF                     u5821:
 10861  04AF  2C91               	goto	l4060
 10862  04B0                     u5820:
 10863  04B0  2EBA               	goto	l4146
 10864  04B1                     l4068:
 10865                           
 10866                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           long)(*(int *)__va_arg((*(int **)ap), (int)0));
 10867  04B1  1683               	bsf	3,5	;RP0=1, select bank1
 10868  04B2  1303               	bcf	3,6	;RP1=0, select bank1
 10869  04B3  083E               	movf	sprintf@ap^(0+128),w
 10870  04B4  0084               	movwf	4
 10871  04B5  1383               	bcf	3,7	;select IRP bank0
 10872  04B6  0800               	movf	0,w
 10873  04B7  1283               	bcf	3,5	;RP0=0, select bank0
 10874  04B8  1303               	bcf	3,6	;RP1=0, select bank0
 10875  04B9  00E3               	movwf	??_sprintf
 10876  04BA  0A84               	incf	4,f
 10877  04BB  0800               	movf	0,w
 10878  04BC  00E4               	movwf	??_sprintf+1
 10879  04BD  0863               	movf	??_sprintf,w
 10880  04BE  1683               	bsf	3,5	;RP0=1, select bank1
 10881  04BF  1303               	bcf	3,6	;RP1=0, select bank1
 10882  04C0  00C7               	movwf	sprintf@val^(0+128)
 10883  04C1  1283               	bcf	3,5	;RP0=0, select bank0
 10884  04C2  1303               	bcf	3,6	;RP1=0, select bank0
 10885  04C3  0864               	movf	??_sprintf+1,w
 10886  04C4  1683               	bsf	3,5	;RP0=1, select bank1
 10887  04C5  1303               	bcf	3,6	;RP1=0, select bank1
 10888  04C6  00C8               	movwf	(sprintf@val+1)^(0+128)
 10889  04C7  3000               	movlw	0
 10890  04C8  1BC8               	btfsc	(sprintf@val+1)^(0+128),7
 10891  04C9  30FF               	movlw	255
 10892  04CA  00C9               	movwf	(sprintf@val+2)^(0+128)
 10893  04CB  00CA               	movwf	(sprintf@val+3)^(0+128)
 10894  04CC                     l4070:
 10895  04CC  3002               	movlw	2
 10896  04CD  1283               	bcf	3,5	;RP0=0, select bank0
 10897  04CE  1303               	bcf	3,6	;RP1=0, select bank0
 10898  04CF  00E3               	movwf	??_sprintf
 10899  04D0  0863               	movf	??_sprintf,w
 10900  04D1  1683               	bsf	3,5	;RP0=1, select bank1
 10901  04D2  1303               	bcf	3,6	;RP1=0, select bank1
 10902  04D3  07BE               	addwf	sprintf@ap^(0+128),f
 10903  04D4                     l4072:
 10904                           
 10905                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((long
      +                          )val < 0) {
 10906  04D4  1FCA               	btfss	(sprintf@val+3)^(0+128),7
 10907  04D5  2CD7               	goto	u5831
 10908  04D6  2CD8               	goto	u5830
 10909  04D7                     u5831:
 10910  04D7  2CE7               	goto	l4078
 10911  04D8                     u5830:
 10912  04D8                     l4074:
 10913                           
 10914                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
 10915  04D8  3003               	movlw	3
 10916  04D9  04BF               	iorwf	sprintf@flag^(0+128),f
 10917  04DA  3000               	movlw	0
 10918  04DB  04C0               	iorwf	(sprintf@flag+1)^(0+128),f
 10919  04DC                     l4076:
 10920                           
 10921                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
 10922  04DC  09C7               	comf	sprintf@val^(0+128),f
 10923  04DD  09C8               	comf	(sprintf@val+1)^(0+128),f
 10924  04DE  09C9               	comf	(sprintf@val+2)^(0+128),f
 10925  04DF  09CA               	comf	(sprintf@val+3)^(0+128),f
 10926  04E0  0AC7               	incf	sprintf@val^(0+128),f
 10927  04E1  1903               	skipnz
 10928  04E2  0AC8               	incf	(sprintf@val+1)^(0+128),f
 10929  04E3  1903               	skipnz
 10930  04E4  0AC9               	incf	(sprintf@val+2)^(0+128),f
 10931  04E5  1903               	skipnz
 10932  04E6  0ACA               	incf	(sprintf@val+3)^(0+128),f
 10933  04E7                     l4078:
 10934                           
 10935                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
 10936  04E7  0851               	movf	sprintf@prec^(0+128),w
 10937  04E8  0452               	iorwf	(sprintf@prec+1)^(0+128),w
 10938  04E9  1D03               	btfss	3,2
 10939  04EA  2CEC               	goto	u5841
 10940  04EB  2CED               	goto	u5840
 10941  04EC                     u5841:
 10942  04EC  2CFB               	goto	l4084
 10943  04ED                     u5840:
 10944  04ED                     l4080:
 10945  04ED  084A               	movf	(sprintf@val+3)^(0+128),w
 10946  04EE  0449               	iorwf	(sprintf@val+2)^(0+128),w
 10947  04EF  0448               	iorwf	(sprintf@val+1)^(0+128),w
 10948  04F0  0447               	iorwf	sprintf@val^(0+128),w
 10949  04F1  1D03               	skipz
 10950  04F2  2CF4               	goto	u5851
 10951  04F3  2CF5               	goto	u5850
 10952  04F4                     u5851:
 10953  04F4  2CFB               	goto	l4084
 10954  04F5                     u5850:
 10955  04F5                     l4082:
 10956                           
 10957                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
 10958  04F5  3001               	movlw	1
 10959  04F6  07D1               	addwf	sprintf@prec^(0+128),f
 10960  04F7  1803               	skipnc
 10961  04F8  0AD2               	incf	(sprintf@prec+1)^(0+128),f
 10962  04F9  3000               	movlw	0
 10963  04FA  07D2               	addwf	(sprintf@prec+1)^(0+128),f
 10964  04FB                     l4084:
 10965                           
 10966                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10967  04FB  01D3               	clrf	sprintf@c^(0+128)
 10968  04FC  0AD3               	incf	sprintf@c^(0+128),f
 10969  04FD                     l4090:
 10970                           
 10971                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
 10972  04FD  0853               	movf	sprintf@c^(0+128),w
 10973  04FE  1283               	bcf	3,5	;RP0=0, select bank0
 10974  04FF  1303               	bcf	3,6	;RP1=0, select bank0
 10975  0500  00E3               	movwf	??_sprintf
 10976  0501  3001               	movlw	1
 10977  0502                     u5865:
 10978  0502  1003               	clrc
 10979  0503  0DE3               	rlf	??_sprintf,f
 10980  0504  3EFF               	addlw	-1
 10981  0505  1D03               	skipz
 10982  0506  2D02               	goto	u5865
 10983  0507  1003               	clrc
 10984  0508  0D63               	rlf	??_sprintf,w
 10985  0509  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10986  050A  0084               	movwf	4
 10987  050B  160A  118A  200A  120A  118A  	fcall	stringdir
 10988  0510  00E4               	movwf	??_sprintf+1
 10989  0511  160A  118A  200A  120A  118A  	fcall	stringdir
 10990  0516  00E5               	movwf	??_sprintf+2
 10991  0517  160A  118A  200A  120A  118A  	fcall	stringdir
 10992  051C  00E6               	movwf	??_sprintf+3
 10993  051D  160A  118A  200A  120A  118A  	fcall	stringdir
 10994  0522  00E7               	movwf	??_sprintf+4
 10995  0523  0867               	movf	??_sprintf+4,w
 10996  0524  1683               	bsf	3,5	;RP0=1, select bank1
 10997  0525  1303               	bcf	3,6	;RP1=0, select bank1
 10998  0526  024A               	subwf	(sprintf@val+3)^(0+128),w
 10999  0527  1D03               	skipz
 11000  0528  2D3F               	goto	u5875
 11001  0529  1283               	bcf	3,5	;RP0=0, select bank0
 11002  052A  1303               	bcf	3,6	;RP1=0, select bank0
 11003  052B  0866               	movf	??_sprintf+3,w
 11004  052C  1683               	bsf	3,5	;RP0=1, select bank1
 11005  052D  1303               	bcf	3,6	;RP1=0, select bank1
 11006  052E  0249               	subwf	(sprintf@val+2)^(0+128),w
 11007  052F  1D03               	skipz
 11008  0530  2D3F               	goto	u5875
 11009  0531  1283               	bcf	3,5	;RP0=0, select bank0
 11010  0532  1303               	bcf	3,6	;RP1=0, select bank0
 11011  0533  0865               	movf	??_sprintf+2,w
 11012  0534  1683               	bsf	3,5	;RP0=1, select bank1
 11013  0535  1303               	bcf	3,6	;RP1=0, select bank1
 11014  0536  0248               	subwf	(sprintf@val+1)^(0+128),w
 11015  0537  1D03               	skipz
 11016  0538  2D3F               	goto	u5875
 11017  0539  1283               	bcf	3,5	;RP0=0, select bank0
 11018  053A  1303               	bcf	3,6	;RP1=0, select bank0
 11019  053B  0864               	movf	??_sprintf+1,w
 11020  053C  1683               	bsf	3,5	;RP0=1, select bank1
 11021  053D  1303               	bcf	3,6	;RP1=0, select bank1
 11022  053E  0247               	subwf	sprintf@val^(0+128),w
 11023  053F                     u5875:
 11024  053F  1803               	skipnc
 11025  0540  2D42               	goto	u5871
 11026  0541  2D43               	goto	u5870
 11027  0542                     u5871:
 11028  0542  2D44               	goto	l4094
 11029  0543                     u5870:
 11030  0543  2D52               	goto	l4096
 11031  0544                     l4094:
 11032  0544  3001               	movlw	1
 11033  0545  1283               	bcf	3,5	;RP0=0, select bank0
 11034  0546  1303               	bcf	3,6	;RP1=0, select bank0
 11035  0547  00E3               	movwf	??_sprintf
 11036  0548  0863               	movf	??_sprintf,w
 11037  0549  1683               	bsf	3,5	;RP0=1, select bank1
 11038  054A  1303               	bcf	3,6	;RP1=0, select bank1
 11039  054B  07D3               	addwf	sprintf@c^(0+128),f
 11040  054C  300A               	movlw	10
 11041  054D  0653               	xorwf	sprintf@c^(0+128),w
 11042  054E  1D03               	btfss	3,2
 11043  054F  2D51               	goto	u5881
 11044  0550  2D52               	goto	u5880
 11045  0551                     u5881:
 11046  0551  2CFD               	goto	l4090
 11047  0552                     u5880:
 11048  0552                     l4096:
 11049                           
 11050                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
 11051  0552  0852               	movf	(sprintf@prec+1)^(0+128),w
 11052  0553  3A80               	xorlw	128
 11053  0554  3C80               	sublw	128
 11054  0555  1D03               	skipz
 11055  0556  2D59               	goto	u5895
 11056  0557  0851               	movf	sprintf@prec^(0+128),w
 11057  0558  0253               	subwf	sprintf@c^(0+128),w
 11058  0559                     u5895:
 11059  0559  1803               	skipnc
 11060  055A  2D5C               	goto	u5891
 11061  055B  2D5D               	goto	u5890
 11062  055C                     u5891:
 11063  055C  2D68               	goto	l4100
 11064  055D                     u5890:
 11065  055D                     l4098:
 11066                           
 11067                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1366:    c = (cha
      +                          r)prec;
 11068  055D  1683               	bsf	3,5	;RP0=1, select bank1
 11069  055E  1303               	bcf	3,6	;RP1=0, select bank1
 11070  055F  0851               	movf	sprintf@prec^(0+128),w
 11071  0560  1283               	bcf	3,5	;RP0=0, select bank0
 11072  0561  1303               	bcf	3,6	;RP1=0, select bank0
 11073  0562  00E3               	movwf	??_sprintf
 11074  0563  0863               	movf	??_sprintf,w
 11075  0564  1683               	bsf	3,5	;RP0=1, select bank1
 11076  0565  1303               	bcf	3,6	;RP1=0, select bank1
 11077  0566  00D3               	movwf	sprintf@c^(0+128)
 11078  0567  2D8C               	goto	l4104
 11079  0568                     l4100:
 11080  0568  1683               	bsf	3,5	;RP0=1, select bank1
 11081  0569  1303               	bcf	3,6	;RP1=0, select bank1
 11082  056A  0852               	movf	(sprintf@prec+1)^(0+128),w
 11083  056B  3A80               	xorlw	128
 11084  056C  1283               	bcf	3,5	;RP0=0, select bank0
 11085  056D  1303               	bcf	3,6	;RP1=0, select bank0
 11086  056E  00E3               	movwf	??_sprintf
 11087  056F  3080               	movlw	128
 11088  0570  0263               	subwf	??_sprintf,w
 11089  0571  1D03               	skipz
 11090  0572  2D77               	goto	u5905
 11091  0573  1683               	bsf	3,5	;RP0=1, select bank1
 11092  0574  1303               	bcf	3,6	;RP1=0, select bank1
 11093  0575  0853               	movf	sprintf@c^(0+128),w
 11094  0576  0251               	subwf	sprintf@prec^(0+128),w
 11095  0577                     u5905:
 11096  0577  1803               	skipnc
 11097  0578  2D7A               	goto	u5901
 11098  0579  2D7B               	goto	u5900
 11099  057A                     u5901:
 11100  057A  2D8C               	goto	l4104
 11101  057B                     u5900:
 11102  057B                     l4102:
 11103                           
 11104                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
 11105  057B  1683               	bsf	3,5	;RP0=1, select bank1
 11106  057C  1303               	bcf	3,6	;RP1=0, select bank1
 11107  057D  0853               	movf	sprintf@c^(0+128),w
 11108  057E  1283               	bcf	3,5	;RP0=0, select bank0
 11109  057F  1303               	bcf	3,6	;RP1=0, select bank0
 11110  0580  00E3               	movwf	??_sprintf
 11111  0581  01E4               	clrf	??_sprintf+1
 11112  0582  0863               	movf	??_sprintf,w
 11113  0583  1683               	bsf	3,5	;RP0=1, select bank1
 11114  0584  1303               	bcf	3,6	;RP1=0, select bank1
 11115  0585  00D1               	movwf	sprintf@prec^(0+128)
 11116  0586  1283               	bcf	3,5	;RP0=0, select bank0
 11117  0587  1303               	bcf	3,6	;RP1=0, select bank0
 11118  0588  0864               	movf	??_sprintf+1,w
 11119  0589  1683               	bsf	3,5	;RP0=1, select bank1
 11120  058A  1303               	bcf	3,6	;RP1=0, select bank1
 11121  058B  00D2               	movwf	(sprintf@prec+1)^(0+128)
 11122  058C                     l4104:
 11123                           
 11124                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
 11125  058C  1683               	bsf	3,5	;RP0=1, select bank1
 11126  058D  1303               	bcf	3,6	;RP1=0, select bank1
 11127  058E  0841               	movf	sprintf@width^(0+128),w
 11128  058F  0442               	iorwf	(sprintf@width+1)^(0+128),w
 11129  0590  1903               	btfsc	3,2
 11130  0591  2D93               	goto	u5911
 11131  0592  2D94               	goto	u5910
 11132  0593                     u5911:
 11133  0593  2DAE               	goto	l4110
 11134  0594                     u5910:
 11135  0594                     l4106:
 11136  0594  3003               	movlw	3
 11137  0595  053F               	andwf	sprintf@flag^(0+128),w
 11138  0596  1283               	bcf	3,5	;RP0=0, select bank0
 11139  0597  1303               	bcf	3,6	;RP1=0, select bank0
 11140  0598  00E3               	movwf	??_sprintf
 11141  0599  3000               	movlw	0
 11142  059A  1683               	bsf	3,5	;RP0=1, select bank1
 11143  059B  1303               	bcf	3,6	;RP1=0, select bank1
 11144  059C  0540               	andwf	(sprintf@flag+1)^(0+128),w
 11145  059D  1283               	bcf	3,5	;RP0=0, select bank0
 11146  059E  1303               	bcf	3,6	;RP1=0, select bank0
 11147  059F  00E4               	movwf	??_sprintf+1
 11148  05A0  0863               	movf	??_sprintf,w
 11149  05A1  0464               	iorwf	??_sprintf+1,w
 11150  05A2  1903               	btfsc	3,2
 11151  05A3  2DA5               	goto	u5921
 11152  05A4  2DA6               	goto	u5920
 11153  05A5                     u5921:
 11154  05A5  2DAE               	goto	l4110
 11155  05A6                     u5920:
 11156  05A6                     l4108:
 11157                           
 11158                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
 11159  05A6  30FF               	movlw	255
 11160  05A7  1683               	bsf	3,5	;RP0=1, select bank1
 11161  05A8  1303               	bcf	3,6	;RP1=0, select bank1
 11162  05A9  07C1               	addwf	sprintf@width^(0+128),f
 11163  05AA  1803               	skipnc
 11164  05AB  0AC2               	incf	(sprintf@width+1)^(0+128),f
 11165  05AC  30FF               	movlw	255
 11166  05AD  07C2               	addwf	(sprintf@width+1)^(0+128),f
 11167  05AE                     l4110:
 11168                           
 11169                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1374:   if(flag &
      +                           0x4000) {
 11170  05AE  1683               	bsf	3,5	;RP0=1, select bank1
 11171  05AF  1303               	bcf	3,6	;RP1=0, select bank1
 11172  05B0  1F40               	btfss	(sprintf@flag+1)^(0+128),6
 11173  05B1  2DB3               	goto	u5931
 11174  05B2  2DB4               	goto	u5930
 11175  05B3                     u5931:
 11176  05B3  2DD7               	goto	l4118
 11177  05B4                     u5930:
 11178  05B4                     l4112:
 11179                           
 11180                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1375:    if(width
      +                           > prec)
 11181  05B4  0852               	movf	(sprintf@prec+1)^(0+128),w
 11182  05B5  3A80               	xorlw	128
 11183  05B6  1283               	bcf	3,5	;RP0=0, select bank0
 11184  05B7  1303               	bcf	3,6	;RP1=0, select bank0
 11185  05B8  00E3               	movwf	??_sprintf
 11186  05B9  1683               	bsf	3,5	;RP0=1, select bank1
 11187  05BA  1303               	bcf	3,6	;RP1=0, select bank1
 11188  05BB  0842               	movf	(sprintf@width+1)^(0+128),w
 11189  05BC  3A80               	xorlw	128
 11190  05BD  1283               	bcf	3,5	;RP0=0, select bank0
 11191  05BE  1303               	bcf	3,6	;RP1=0, select bank0
 11192  05BF  0263               	subwf	??_sprintf,w
 11193  05C0  1D03               	skipz
 11194  05C1  2DC6               	goto	u5945
 11195  05C2  1683               	bsf	3,5	;RP0=1, select bank1
 11196  05C3  1303               	bcf	3,6	;RP1=0, select bank1
 11197  05C4  0841               	movf	sprintf@width^(0+128),w
 11198  05C5  0251               	subwf	sprintf@prec^(0+128),w
 11199  05C6                     u5945:
 11200  05C6  1803               	skipnc
 11201  05C7  2DC9               	goto	u5941
 11202  05C8  2DCA               	goto	u5940
 11203  05C9                     u5941:
 11204  05C9  2DD3               	goto	l4116
 11205  05CA                     u5940:
 11206  05CA                     l4114:
 11207                           
 11208                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1376:     width -
      +                          = prec;
 11209  05CA  1683               	bsf	3,5	;RP0=1, select bank1
 11210  05CB  1303               	bcf	3,6	;RP1=0, select bank1
 11211  05CC  0851               	movf	sprintf@prec^(0+128),w
 11212  05CD  02C1               	subwf	sprintf@width^(0+128),f
 11213  05CE  0852               	movf	(sprintf@prec+1)^(0+128),w
 11214  05CF  1C03               	skipc
 11215  05D0  03C2               	decf	(sprintf@width+1)^(0+128),f
 11216  05D1  02C2               	subwf	(sprintf@width+1)^(0+128),f
 11217  05D2  2DD7               	goto	l4118
 11218  05D3                     l4116:
 11219                           
 11220                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1378:     width =
      +                           0;
 11221  05D3  1683               	bsf	3,5	;RP0=1, select bank1
 11222  05D4  1303               	bcf	3,6	;RP1=0, select bank1
 11223  05D5  01C1               	clrf	sprintf@width^(0+128)
 11224  05D6  01C2               	clrf	(sprintf@width+1)^(0+128)
 11225  05D7                     l4118:
 11226                           
 11227                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
 11228  05D7  0842               	movf	(sprintf@width+1)^(0+128),w
 11229  05D8  3A80               	xorlw	128
 11230  05D9  3C80               	sublw	128
 11231  05DA  1D03               	skipz
 11232  05DB  2DDE               	goto	u5955
 11233  05DC  0841               	movf	sprintf@width^(0+128),w
 11234  05DD  0253               	subwf	sprintf@c^(0+128),w
 11235  05DE                     u5955:
 11236  05DE  1803               	skipnc
 11237  05DF  2DE1               	goto	u5951
 11238  05E0  2DE2               	goto	u5950
 11239  05E1                     u5951:
 11240  05E1  2DF6               	goto	l4122
 11241  05E2                     u5950:
 11242  05E2                     l4120:
 11243                           
 11244                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
 11245  05E2  1683               	bsf	3,5	;RP0=1, select bank1
 11246  05E3  1303               	bcf	3,6	;RP1=0, select bank1
 11247  05E4  0853               	movf	sprintf@c^(0+128),w
 11248  05E5  1283               	bcf	3,5	;RP0=0, select bank0
 11249  05E6  1303               	bcf	3,6	;RP1=0, select bank0
 11250  05E7  00E3               	movwf	??_sprintf
 11251  05E8  01E4               	clrf	??_sprintf+1
 11252  05E9  0863               	movf	??_sprintf,w
 11253  05EA  1683               	bsf	3,5	;RP0=1, select bank1
 11254  05EB  1303               	bcf	3,6	;RP1=0, select bank1
 11255  05EC  02C1               	subwf	sprintf@width^(0+128),f
 11256  05ED  1283               	bcf	3,5	;RP0=0, select bank0
 11257  05EE  1303               	bcf	3,6	;RP1=0, select bank0
 11258  05EF  0864               	movf	??_sprintf+1,w
 11259  05F0  1683               	bsf	3,5	;RP0=1, select bank1
 11260  05F1  1303               	bcf	3,6	;RP1=0, select bank1
 11261  05F2  1C03               	skipc
 11262  05F3  03C2               	decf	(sprintf@width+1)^(0+128),f
 11263  05F4  02C2               	subwf	(sprintf@width+1)^(0+128),f
 11264  05F5  2DFA               	goto	l4124
 11265  05F6                     l4122:
 11266                           
 11267                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
 11268  05F6  1683               	bsf	3,5	;RP0=1, select bank1
 11269  05F7  1303               	bcf	3,6	;RP1=0, select bank1
 11270  05F8  01C1               	clrf	sprintf@width^(0+128)
 11271  05F9  01C2               	clrf	(sprintf@width+1)^(0+128)
 11272  05FA                     l4124:
 11273                           
 11274                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
 11275  05FA  0841               	movf	sprintf@width^(0+128),w
 11276  05FB  0442               	iorwf	(sprintf@width+1)^(0+128),w
 11277  05FC  1903               	btfsc	3,2
 11278  05FD  2DFF               	goto	u5961
 11279  05FE  2E00               	goto	u5960
 11280  05FF                     u5961:
 11281  05FF  2E1F               	goto	l4132
 11282  0600                     u5960:
 11283  0600                     l4126:
 11284                           
 11285                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
 11286  0600  3020               	movlw	32
 11287  0601  1283               	bcf	3,5	;RP0=0, select bank0
 11288  0602  1303               	bcf	3,6	;RP1=0, select bank0
 11289  0603  00E3               	movwf	??_sprintf
 11290  0604  1683               	bsf	3,5	;RP0=1, select bank1
 11291  0605  1303               	bcf	3,6	;RP1=0, select bank1
 11292  0606  0850               	movf	sprintf@sp^(0+128),w
 11293  0607  0084               	movwf	4
 11294  0608  1283               	bcf	3,5	;RP0=0, select bank0
 11295  0609  1303               	bcf	3,6	;RP1=0, select bank0
 11296  060A  0863               	movf	??_sprintf,w
 11297  060B  1383               	bcf	3,7	;select IRP bank0
 11298  060C  0080               	movwf	0
 11299  060D                     l4128:
 11300  060D  3001               	movlw	1
 11301  060E  00E3               	movwf	??_sprintf
 11302  060F  0863               	movf	??_sprintf,w
 11303  0610  1683               	bsf	3,5	;RP0=1, select bank1
 11304  0611  1303               	bcf	3,6	;RP1=0, select bank1
 11305  0612  07D0               	addwf	sprintf@sp^(0+128),f
 11306  0613                     l4130:
 11307  0613  30FF               	movlw	255
 11308  0614  07C1               	addwf	sprintf@width^(0+128),f
 11309  0615  1803               	skipnc
 11310  0616  0AC2               	incf	(sprintf@width+1)^(0+128),f
 11311  0617  30FF               	movlw	255
 11312  0618  07C2               	addwf	(sprintf@width+1)^(0+128),f
 11313  0619  0841               	movf	sprintf@width^(0+128),w
 11314  061A  0442               	iorwf	(sprintf@width+1)^(0+128),w
 11315  061B  1D03               	btfss	3,2
 11316  061C  2E1E               	goto	u5971
 11317  061D  2E1F               	goto	u5970
 11318  061E                     u5971:
 11319  061E  2E00               	goto	l4126
 11320  061F                     u5970:
 11321  061F                     l4132:
 11322                           
 11323                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
 11324  061F  3003               	movlw	3
 11325  0620  053F               	andwf	sprintf@flag^(0+128),w
 11326  0621  1283               	bcf	3,5	;RP0=0, select bank0
 11327  0622  1303               	bcf	3,6	;RP1=0, select bank0
 11328  0623  00E3               	movwf	??_sprintf
 11329  0624  3000               	movlw	0
 11330  0625  1683               	bsf	3,5	;RP0=1, select bank1
 11331  0626  1303               	bcf	3,6	;RP1=0, select bank1
 11332  0627  0540               	andwf	(sprintf@flag+1)^(0+128),w
 11333  0628  1283               	bcf	3,5	;RP0=0, select bank0
 11334  0629  1303               	bcf	3,6	;RP1=0, select bank0
 11335  062A  00E4               	movwf	??_sprintf+1
 11336  062B  0863               	movf	??_sprintf,w
 11337  062C  0464               	iorwf	??_sprintf+1,w
 11338  062D  1903               	btfsc	3,2
 11339  062E  2E30               	goto	u5981
 11340  062F  2E31               	goto	u5980
 11341  0630                     u5981:
 11342  0630  2EAA               	goto	l4144
 11343  0631                     u5980:
 11344  0631                     l4134:
 11345                           
 11346                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
 11347  0631  302D               	movlw	45
 11348  0632  00E3               	movwf	??_sprintf
 11349  0633  1683               	bsf	3,5	;RP0=1, select bank1
 11350  0634  1303               	bcf	3,6	;RP1=0, select bank1
 11351  0635  0850               	movf	sprintf@sp^(0+128),w
 11352  0636  0084               	movwf	4
 11353  0637  1283               	bcf	3,5	;RP0=0, select bank0
 11354  0638  1303               	bcf	3,6	;RP1=0, select bank0
 11355  0639  0863               	movf	??_sprintf,w
 11356  063A  1383               	bcf	3,7	;select IRP bank0
 11357  063B  0080               	movwf	0
 11358  063C                     l4136:
 11359  063C  3001               	movlw	1
 11360  063D  00E3               	movwf	??_sprintf
 11361  063E  0863               	movf	??_sprintf,w
 11362  063F  1683               	bsf	3,5	;RP0=1, select bank1
 11363  0640  1303               	bcf	3,6	;RP1=0, select bank1
 11364  0641  07D0               	addwf	sprintf@sp^(0+128),f
 11365  0642  2EAA               	goto	l4144
 11366  0643                     l4138:
 11367                           
 11368                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned int)prec]) % 10 + '0';
 11369  0643  3000               	movlw	0
 11370  0644  1283               	bcf	3,5	;RP0=0, select bank0
 11371  0645  1303               	bcf	3,6	;RP1=0, select bank0
 11372  0646  00A9               	movwf	___llmod@divisor+3
 11373  0647  3000               	movlw	0
 11374  0648  00A8               	movwf	___llmod@divisor+2
 11375  0649  3000               	movlw	0
 11376  064A  00A7               	movwf	___llmod@divisor+1
 11377  064B  300A               	movlw	10
 11378  064C  00A6               	movwf	___llmod@divisor
 11379  064D  1683               	bsf	3,5	;RP0=1, select bank1
 11380  064E  1303               	bcf	3,6	;RP1=0, select bank1
 11381  064F  0851               	movf	sprintf@prec^(0+128),w
 11382  0650  1283               	bcf	3,5	;RP0=0, select bank0
 11383  0651  1303               	bcf	3,6	;RP1=0, select bank0
 11384  0652  00E3               	movwf	??_sprintf
 11385  0653  3001               	movlw	1
 11386  0654                     u5995:
 11387  0654  1003               	clrc
 11388  0655  0DE3               	rlf	??_sprintf,f
 11389  0656  3EFF               	addlw	-1
 11390  0657  1D03               	skipz
 11391  0658  2E54               	goto	u5995
 11392  0659  1003               	clrc
 11393  065A  0D63               	rlf	??_sprintf,w
 11394  065B  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 11395  065C  0084               	movwf	4
 11396  065D  160A  118A  200A  120A  118A  	fcall	stringdir
 11397  0662  00F2               	movwf	___lldiv@divisor
 11398  0663  160A  118A  200A  120A  118A  	fcall	stringdir
 11399  0668  00F3               	movwf	___lldiv@divisor+1
 11400  0669  160A  118A  200A  120A  118A  	fcall	stringdir
 11401  066E  00F4               	movwf	___lldiv@divisor+2
 11402  066F  160A  118A  200A  120A  118A  	fcall	stringdir
 11403  0674  00F5               	movwf	___lldiv@divisor+3
 11404  0675  1683               	bsf	3,5	;RP0=1, select bank1
 11405  0676  1303               	bcf	3,6	;RP1=0, select bank1
 11406  0677  084A               	movf	(sprintf@val+3)^(0+128),w
 11407  0678  00F9               	movwf	___lldiv@dividend+3
 11408  0679  0849               	movf	(sprintf@val+2)^(0+128),w
 11409  067A  00F8               	movwf	___lldiv@dividend+2
 11410  067B  0848               	movf	(sprintf@val+1)^(0+128),w
 11411  067C  00F7               	movwf	___lldiv@dividend+1
 11412  067D  0847               	movf	sprintf@val^(0+128),w
 11413  067E  00F6               	movwf	___lldiv@dividend
 11414  067F  160A  118A  2264  120A  118A  	fcall	___lldiv
 11415  0684  0875               	movf	?___lldiv+3,w
 11416  0685  1283               	bcf	3,5	;RP0=0, select bank0
 11417  0686  1303               	bcf	3,6	;RP1=0, select bank0
 11418  0687  00AD               	movwf	___llmod@dividend+3
 11419  0688  0874               	movf	?___lldiv+2,w
 11420  0689  00AC               	movwf	___llmod@dividend+2
 11421  068A  0873               	movf	?___lldiv+1,w
 11422  068B  00AB               	movwf	___llmod@dividend+1
 11423  068C  0872               	movf	?___lldiv,w
 11424  068D  00AA               	movwf	___llmod@dividend
 11425  068E  160A  118A  20FB  120A  118A  	fcall	___llmod
 11426  0693  1283               	bcf	3,5	;RP0=0, select bank0
 11427  0694  1303               	bcf	3,6	;RP1=0, select bank0
 11428  0695  0826               	movf	?___llmod,w
 11429  0696  3E30               	addlw	48
 11430  0697  00E4               	movwf	??_sprintf+1
 11431  0698  0864               	movf	??_sprintf+1,w
 11432  0699  1683               	bsf	3,5	;RP0=1, select bank1
 11433  069A  1303               	bcf	3,6	;RP1=0, select bank1
 11434  069B  00D3               	movwf	sprintf@c^(0+128)
 11435  069C                     l4140:
 11436                           
 11437                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
 11438  069C  0853               	movf	sprintf@c^(0+128),w
 11439  069D  1283               	bcf	3,5	;RP0=0, select bank0
 11440  069E  1303               	bcf	3,6	;RP1=0, select bank0
 11441  069F  00E3               	movwf	??_sprintf
 11442  06A0  1683               	bsf	3,5	;RP0=1, select bank1
 11443  06A1  1303               	bcf	3,6	;RP1=0, select bank1
 11444  06A2  0850               	movf	sprintf@sp^(0+128),w
 11445  06A3  0084               	movwf	4
 11446  06A4  1283               	bcf	3,5	;RP0=0, select bank0
 11447  06A5  1303               	bcf	3,6	;RP1=0, select bank0
 11448  06A6  0863               	movf	??_sprintf,w
 11449  06A7  1383               	bcf	3,7	;select IRP bank0
 11450  06A8  0080               	movwf	0
 11451  06A9  2E3C               	goto	l4136
 11452  06AA                     l4144:
 11453                           
 11454                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
 11455  06AA  30FF               	movlw	255
 11456  06AB  1683               	bsf	3,5	;RP0=1, select bank1
 11457  06AC  1303               	bcf	3,6	;RP1=0, select bank1
 11458  06AD  07D1               	addwf	sprintf@prec^(0+128),f
 11459  06AE  1803               	skipnc
 11460  06AF  0AD2               	incf	(sprintf@prec+1)^(0+128),f
 11461  06B0  30FF               	movlw	255
 11462  06B1  07D2               	addwf	(sprintf@prec+1)^(0+128),f
 11463  06B2  0A51               	incf	sprintf@prec^(0+128),w
 11464  06B3  1D03               	skipz
 11465  06B4  2EB9               	goto	u6001
 11466  06B5  0A52               	incf	(sprintf@prec+1)^(0+128),w
 11467  06B6  1D03               	btfss	3,2
 11468  06B7  2EB9               	goto	u6001
 11469  06B8  2EBA               	goto	u6000
 11470  06B9                     u6001:
 11471  06B9  2E43               	goto	l4138
 11472  06BA                     u6000:
 11473  06BA                     l4146:
 11474                           
 11475                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
 11476  06BA  3001               	movlw	1
 11477  06BB  1283               	bcf	3,5	;RP0=0, select bank0
 11478  06BC  07DF               	addwf	sprintf@f,f
 11479  06BD  30FF               	movlw	-1
 11480  06BE  075F               	addwf	sprintf@f,w
 11481  06BF  0084               	movwf	4
 11482  06C0  160A  118A  200A  120A  118A  	fcall	stringdir
 11483  06C5  00E3               	movwf	??_sprintf
 11484  06C6  0863               	movf	??_sprintf,w
 11485  06C7  1683               	bsf	3,5	;RP0=1, select bank1
 11486  06C8  1303               	bcf	3,6	;RP1=0, select bank1
 11487  06C9  00D3               	movwf	sprintf@c^(0+128)
 11488  06CA  0853               	movf	sprintf@c^(0+128),w
 11489  06CB  1D03               	btfss	3,2
 11490  06CC  2ECE               	goto	u6011
 11491  06CD  2ED1               	goto	u6010
 11492  06CE                     u6011:
 11493  06CE  120A  158A  2D26   	goto	l3868
 11494  06D1                     u6010:
 11495  06D1                     l4148:
 11496                           
 11497                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
 11498  06D1  1683               	bsf	3,5	;RP0=1, select bank1
 11499  06D2  1303               	bcf	3,6	;RP1=0, select bank1
 11500  06D3  0850               	movf	sprintf@sp^(0+128),w
 11501  06D4  0084               	movwf	4
 11502  06D5  1383               	bcf	3,7	;select IRP bank0
 11503  06D6  0180               	clrf	0
 11504  06D7                     l476:
 11505  06D7  0008               	return
 11506  06D8                     __end_of_sprintf:

Data Sizes:
    Strings     68
    Constant    118
    Data        0
    BSS         33
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      80
    BANK1            80     25      52
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[5]), STR_3(CODE[7]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data_TEMP(BANK1[8]), data_ADC(BANK1[8]), data_cont(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[6]), STR_10(CODE[9]), STR_9(CODE[4]), STR_8(CODE[8]), 
		 -> STR_7(CODE[4]), STR_6(CODE[9]), data_TEMP(BANK1[8]), data_ADC(BANK1[8]), 
		 -> data_cont(BANK1[8]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[2]), data_TEMP(BANK1[8]), data_ADC(BANK1[8]), data_cont(BANK1[8]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Show_val_VT->_Write_USART_String
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _SPI_TEMP->_spiWrite
    _SPI_CONT->_spiWrite
    _SPI_ADC->_spiWrite
    _Mapeo_M->___awdiv
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___awdiv
    _sprintf->___lldiv
    _scale->___awdiv
    ___awdiv->___awmod
    ___lwdiv->___lwmod
    ___ftmul->___awdiv
    ___ftmul->___ftpack
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftadd->___ftpack

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _Mapeo_M->___ftdiv
    ___ftdiv->___ftmul
    _ADC_to_string->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _ADC_to_string->_sprintf

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   57204
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _Mapeo_M
                            _SPI_ADC
                           _SPI_CONT
                           _SPI_TEMP
                       _Show_val_LCD
                        _Show_val_VT
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Show_val_VT                                          0     0      0     611
                        _Write_USART
                 _Write_USART_String
 ---------------------------------------------------------------------------------
 (2) _Write_USART_String                                   4     2      2     589
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (3) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         1     1      0    1096
                                              2 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     517
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     579
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _SPI_TEMP                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_CONT                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_ADC                                              3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mapeo_M                                              2     2      0   13016
                                             44 BANK0      2     2      0
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2948
                                             28 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2596
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0   40851
                                             73 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             40    36      4   40851
                                             63 BANK0     10     6      4
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     6      3    8105
                                             28 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     932
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1148
                                              9 COMMON     1     1      0
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              16    13      3    6854
                                             28 BANK0     16    13      3
                             ___bmul
                            ___ftmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     477
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     631
                                              8 COMMON     1     1      0
                                              0 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4836
                                             12 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     560
                                              8 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     584
                                              2 COMMON     6     0      6
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1488
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2565
                                              0 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     752
                                              6 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     631
                                              2 COMMON     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     411
                                             37 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4109
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3883
                                             44 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2398
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     560
                                              2 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___lwdiv
               ___lwmod (ARG)
             ___lwmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Mapeo_M
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
     ___wmul
   _SPI_ADC
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_CONT
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_TEMP
     _spiRead
       _spiReceiveWait
     _spiWrite
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Show_val_VT
     _Write_USART
     _Write_USART_String
       _Write_USART
   _setup
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      90       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     19      34       7       65.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      90      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 19:23:47 2021

                           pc 0002                ___bmul@product 002A                   _SSPSTATbits 0094  
                ___awdiv@sign 0025                            fsr 0004           ___wmul@multiplicand 0074  
                ___ftadd@exp1 0058                  ___ftadd@exp2 0057          __size_of_Write_USART 000C  
                ___ftadd@sign 0056                           l120 1FFF                           l114 07FE  
                         l123 1263                           l132 1DA8                           l220 10CF  
                         l117 13A2                           l141 11AC                           l126 1DDE  
                         l150 11DC                           l142 1204                           l151 1205  
                         l143 11B2                           l135 1E8D                           l144 11B8  
                         l129 1D74                           l217 1BF8                           l145 11BE  
                         l170 1C9B                           l226 1C15                           l146 11C4  
                         l235 10FA                           l147 11CA                           l164 1FAE  
                         l148 11D0                           l173 1C2C                           l261 1BEA  
                         l229 1C1F                           l149 11D6                           l406 0E0A  
                         l182 1C54                           l167 1BDC                           l264 1BF0  
                         l257 1C65                           l506 1C81                           l258 1C6A  
                         l275 1C09                           l267 1BE2                           l179 1CBF  
                         l516 12CB                           l188 1F19                           l446 030E  
                         l439 02BC                           l800 1C13                           l480 080F  
                         l384 0D17                           l705 141E                           l377 0A5C  
                         l730 171F                           l810 08B3                           l482 0827  
                         l731 1724                           l716 13FA                           l740 1795  
                         l476 06D7                           l717 1404                           l709 13DF  
                         l718 141E                           l726 17FF                           l806 1CE4  
                         l663 1334                           l729 1715                           l817 0896  
                         l690 168C                           l922 1ED3                           l682 1D0D  
                         l851 1150                           l932 1E50                           l676 11A9  
                         l765 14DB                           l757 159D                           l686 16C9  
                         l766 144D                           l942 1C3E                           l783 1E16  
                         l776 14CE                           l697 16BC                           l689 1679  
                         l769 149E                           l859 1D40                           l789 07BC  
                         _RC0 0038                           _RC1 0039                           _RC2 003A  
                         _ISR 1BE3                           fsr0 0004                           indf 0000  
                ___awmod@sign 0078   __size_of_Write_USART_String 002B                          ?_ISR 0070  
                ___ftdiv@cntr 0046                  ___ftdiv@sign 004B                          l2300 12FD  
                        l2310 1320                          l2302 1301                          l2304 1312  
                        l2312 1326                          l2320 1151                          l4000 01C0  
                        l3200 1C06                          l2314 132B                          l2306 1318  
                        l2330 1161                          l2322 1152                          l4002 01C6  
                        l2316 1330                          l2308 1319                          l2340 117A  
                        l2332 1166                          l2324 1156                          l4100 0568  
                        l4020 022A                          l4004 01D8                          l4012 01F5  
                        l3204 11AB                          l3220 1C56                          l3300 1E64  
                        l2270 1C79                          l2262 1C6E                          l2510 1E27  
                        l2342 117E                          l2334 116C                          l2350 119B  
                        l2326 115B                          l4110 05AE                          l4102 057B  
                        l4030 02D9                          l4022 0269                          l4014 0204  
                        l4006 01E1                          l3214 10CA                          l3222 1C5D  
                        l3310 1E6B                          l3302 1E65                          l2272 1C80  
                        l2264 1C6F                          l2520 1E46                          l2512 1E2B  
                        l2504 1E17                          l2280 12D3                          l2352 11A0  
                        l2344 1188                          l2336 116F                          l2328 115D  
                        l4120 05E2                          l4112 05B4                          l4104 058C  
                        l4040 031F                          l4032 02DF                          l4024 02A8  
                        l4016 0218                          l4008 01EE                          l4200 1569  
                        l3216 10CD                          l3208 11E2                          l3224 1C5F  
                        l3320 1E7A                          l3312 1E6E                          l3304 1E66  
                        l2266 1C73                          l2514 1E2F                          l2506 1E1D  
                        l2522 1E4C                          l2290 12E7                          l2282 12D8  
                        l2354 11A5                          l2346 118E                          l2338 1176  
                        l4130 0613                          l4122 05F6                          l4114 05CA  
                        l4106 0594                          l4050 039C                          l4042 0324  
                        l4034 02EC                          l4026 02C6                          l4018 0223  
                        l4202 1573                          l3218 1BF1                          l3226 1C61  
                        l3322 1E7F                          l3314 1E71                          l3306 1E67  
                        l3500 141D                          l2700 1621                          l2268 1C77  
                        l2516 1E39                          l2508 1E20                          l2620 1C3B  
                        l2292 12E9                          l2284 12DA                          l2276 12CC  
                        l2348 1195                          l4140 069C                          l4132 061F  
                        l4124 05FA                          l4116 05D3                          l4108 05A6  
                        l4060 0491                          l4052 03DB                          l4044 0331  
                        l4036 02FB                          l4028 02D3                          l4220 1F88  
                        l4212 1F64                          l4204 1574                          l3340 1DAC  
                        l3228 1C64                          l3324 1E84                          l3316 1E74  
                        l3308 1E68                          l3510 16F9                          l2710 1690  
                        l2702 162A                          l2518 1E3F                          l2622 1C3D  
                        l2614 1C2E                          l2294 12EF                          l2286 12DE  
                        l2278 12CF                          l4134 0631                          l4126 0600  
                        l4118 05D7                          l4070 04CC                          l4062 049E  
                        l4054 041A                          l4046 0337                          l4038 0304  
                        l3502 1BD8                          l4222 1C20                          l4214 1F6A  
                        l4206 157C                          l2550 1BEA                          l3350 1D44  
                        l3342 1DB5                          l4230 1FB7                          l2526 1C15  
                        l3190 10D2                          l3318 1E77                          l3520 1716  
                        l3504 16CA                          l2704 1656                          l3600 074D  
                        l2616 1C2F                          l2296 12F2                          l2288 12E3  
                        l4136 063C                          l4144 06AA                          l4128 060D  
                        l4080 04ED                          l4072 04D4                          l4064 04A4  
                        l4056 042E                          l4048 034F                          l4216 1F73  
                        l4160 1CE8                          l4208 1582                          l4224 1335  
                        l3352 1D4D                          l3344 1DBB                          l3360 1D78  
                        l4232 1FC0                          l2528 1C1B                          l3192 10E3  
                        l4320 11EA                          l4240 1F1A                          l3530 172B  
                        l3522 171A                          l3514 1700                          l3506 16E9  
                        l2810 0844                          l2730 0803                          l2706 1678  
                        l3610 0777                          l3602 075D                          l2618 1C35  
                        l2298 12F9                          l4138 0643                          l4090 04FD  
                        l4082 04F5                          l4074 04D8                          l4066 04AA  
                        l4058 0489                          l4322 0E26                          l4146 06BA  
                        l4226 07BD                          l4218 1F82                          l4162 1CEC  
                        l4170 14DC                          l3354 1D53                          l3346 1DCE  
                        l3338 1DA9                          l3362 1D81                          l4234 1FD5  
                        l3194 10E7                          l3290 1E5B                          l4250 1F34  
                        l4242 1F1F                          l3540 175D                          l3532 1738  
                        l3524 171E                          l3516 1705                          l3508 16EF  
                        l2820 0866                          l2812 0856                          l2804 0828  
                        l2740 0823                          l2732 0805                          l2724 16B1  
                        l2716 1698                          l2708 1686                          l3620 07A1  
                        l3612 077B                          l3604 0765                          l4084 04FB  
                        l4076 04DC                          l4068 04B1                          l4148 06D1  
                        l4164 1CF1                          l4172 14EF                          l3196 1BDE  
                        l3356 1D64                          l3348 1D41                          l3364 1D87  
                        l4236 1FE1                          l4228 1FAF                          l3188 10D0  
                        l3372 1206                          l3292 1E5E                          l3284 1E51  
                        l4260 1F51                          l4252 1F3D                          l4244 1F22  
                        l3470 13A3                          l3550 1783                          l3534 1742  
                        l3542 1764                          l3526 1723                          l3518 170B  
                        l2822 086A                          l2830 0884                          l2814 0857  
                        l2806 083B                          l2734 0809                          l2726 16C1  
                        l2718 16AA                          l3614 078B                          l3606 076D  
                        l3630 1E9B                          l3710 0B9E                          l4094 0544  
                        l4078 04E7                          l4166 1CF3                          l4158 1CE5  
                        l4190 153D                          l4182 150E                          l3198 1C01  
                        l3366 1D98                          l3358 1D75                          l4238 1FF6  
                        l3374 1257                          l3294 1E5F                          l3286 1E57  
                        l4262 1F56                          l4254 1F42                          l4246 1F27  
                        l3480 13C2                          l3472 13A8                          l3560 17BD  
                        l3552 178F                          l3544 176A                          l3536 1748  
                        l3528 1725                          l2840 08A0                          l2816 085D  
                        l3800 12B4                          l2736 0816                          l2680 15B8  
                        l3616 0793                          l3608 0773                          l3640 1EC1  
                        l3632 1EA2                          l3624 1E8E                          l3704 0B2B  
                        l4096 0552                          l4192 1541                          l4184 1514  
                        l4176 14F6                          l3376 125D                          l3296 1E60  
                        l3288 1E5A                          l4264 1F5B                          l4256 1F47  
                        l4248 1F2C                          l2770 1DE3                          l3490 13F0  
                        l3482 13C9                          l3474 13AF                          l3570 17E4  
                        l3562 17BE                          l3554 1799                          l3546 1774  
                        l3538 1751                          l3810 1CC9                          l2842 08AB  
                        l2818 0864                          l3802 12BD                          l2738 081D  
                        l2690 15DA                          l3618 079B                          l3642 1EC2  
                        l3634 1EA6                          l3626 1E92                          l3722 0C84  
                        l3706 0B32                          l3714 0BBF                          l4098 055D  
                        l3650 1C83                          l4194 1548                          l4186 1519  
                        l4178 1507                          l3298 1E61                          l4258 1F4C  
                        l2780 1E05                          l2772 1DF0                          l3492 13F4  
                        l3484 13CD                          l3564 17CE                          l3556 17A9  
                        l3548 177A                          l3812 1CCB                          l2836 088B  
                        l2828 0872                          l3804 12C3                          l3820 1108  
                        l2692 160E                          l2684 15C1                          l3732 141F  
                        l3580 06F2                          l3644 1EC9                          l3636 1EAA  
                        l3628 1E98                          l3724 0C8B                          l3716 0BC6  
                        l3900 0DEC                          l3652 1C86                          l4196 1553  
                        l4188 152B                          l3660 1C40                          l2782 1E13  
                        l2774 1DF4                          l2790 1C11                          l3494 13FE  
                        l3486 13D7                          l3478 13B6                          l3566 17D2  
                        l3558 17AD                          l2838 089B                          l3830 1142  
                        l3822 1115                          l2694 1616                          l2678 159E  
                        l3750 1465                          l3734 1432                          l3590 0738  
                        l3582 0703                          l3574 06D8                          l3638 1EBB  
                        l3646 1ECF                          l3670 08B7                          l3910 0E0E  
                        l3902 0DF2                          l3654 1C8C                          l4198 155B  
                        l3662 1C43                          l2784 1E15                          l2776 1E01  
                        l2768 1DDF                          l2792 1C13                          l3496 1406  
                        l3488 13E6                          l3568 17E2                          l3808 1CC0  
                        l3824 1119                          l3832 1148                          l3816 10FB  
                        l3840 1D22                          l2696 1618                          l3760 1490  
                        l3752 146E                          l3744 144E                          l3592 0739  
                        l3576 06EB                          l3672 08BD                          l3680 099A  
                        l3728 0CF7                          l3920 0E5F                          l3912 0E34  
                        l3904 0E04                          l3656 1C8F                          l3664 1C49  
                        l2778 1E03                          l3498 1418                          l3826 112B  
                        l3818 1105                          l3842 1D28                          l2698 161D  
                        l3770 14AA                          l3762 1498                          l3754 1477  
                        l3746 1454                          l3738 143B                          l3594 073F  
                        l3586 070A                          l3682 09A0                          l3674 0980  
                        l3930 0E99                          l3922 0E67                          l3914 0E4A  
                        l3906 0E08                          l3658 1C98                          l3850 1CA7  
                        l3666 1C4C                          l2788 1C0A                          l3828 1139  
                        l3836 1D0E                          l3780 14D3                          l3764 14A2  
                        l3772 14BC                          l3756 1485                          l3748 1463  
                        l3596 0745                          l3588 0737                          l3684 0A0F  
                        l3692 0A60                          l3940 0F09                          l3932 0EA0  
                        l3924 0E7C                          l3916 0E50                          l3852 1CAE  
                        l3668 1C51                          l3860 1ED9                          l3790 1286  
                        l3838 1D15                          l3758 148F                          l3598 0749  
                        l3694 0A64                          l3950 0F7A                          l3942 0F0D  
                        l3934 0ECD                          l3926 0E91                          l3918 0E54  
                        l3870 0D2C                          l3854 1CB4                          l3846 1C9D  
                        l3862 1EF5                          l3792 128A                          l3784 1264  
                        l3688 0A29                          l3696 0A66                          l3960 0FEA  
                        l3952 0F83                          l3944 0F13                          l3936 0ED3  
                        l3928 0E95                          l3880 0D5A                          l3872 0D39  
                        l3856 1CB9                          l3848 1CA2                          l3864 1EFD  
                        l3794 1293                          l3786 1276                          l3778 14C3  
                        l3698 0A6D                          l3970 0072                          l3962 0024  
                        l3954 0F9A                          l3946 0F2C                          l3938 0EE6  
                        l3890 0DAE                          l3882 0D6F                          l3874 0D40  
                        l3866 0D1B                          l3858 1ED4                          l3796 12A5  
                        l3788 1279                          l3980 00B6                          l3972 007B  
                        l3964 002D                          l3948 0F65                          l3956 0FA2  
                        l3892 0DB1                          l3884 0D8A                          l3876 0D44  
                        l3868 0D26                          l3798 12B3                          l3974 0083  
                        l3966 004C                          l3982 00BD                          l3958 0FB1  
                        l3894 0DB7                          l3886 0D90                          l3878 0D56  
                        l3992 013C                          l3984 0138                          l3968 005B  
                        l3896 0DBC                          l3888 0DA0                          l3986 013A  
                        l3978 009B                          l3898 0DD1                          l3996 0183  
                        l3998 0191                          STR_1 1086                          STR_2 10C3  
                        STR_3 10B1                          STR_4 10BE                          STR_5 10C8  
                        STR_6 10A0                          STR_7 10AD                          STR_8 10A9  
                        STR_9 10AD                          u3100 1C1B                          u3101 1C1A  
                        u3110 1BF0                          u3111 1BEF                          u3040 1E1D  
                        u3200 1C3B                          u2400 12D3                          u3041 1E1C  
                        u3201 1C3A                          u2401 12D2                          u2410 12DE  
                        u2411 12DD                          u3060 1E2F                          u2420 12EF  
                        u2500 1156                          u3061 1E2E                          u2421 12EE  
                        u2501 1155                          u3070 1E39                          u2510 1161  
                        u3071 1E38                          u3055 1E21                          u2511 1160  
                        u3400 1697                          u5000 1E98                          u2440 1301  
                        u2520 116C                          u3401 1696                          u5001 1E97  
                        u2441 1300                          u2521 116B                          u3090 1E4C  
                        u3091 1E4B                          u3075 1E35                          u2435 12F3  
                        u3420 16A9                          u3340 15B8                          u2380 1C73  
                        u5020 1EAA                          u2460 1312                          u2540 117E  
                        u5100 0A6D                          u3421 16A8                          u3341 15B7  
                        u2381 1C72                          u5021 1EA9                          u3085 1E40  
                        u2461 1311                          u2541 117D                          u5101 0A6C  
                        u3430 16B0                          u3350 15D9                          u2390 1C80  
                        u3190 1C35                          u2550 1188                          u5110 0B32  
                        u3431 16AF                          u3415 1699                          u3351 15D8  
                        u2391 1C7F                          u5015 1E9C                          u3191 1C34  
                        u2455 1302                          u2551 1187                          u2535 1170  
                        u5111 0B31                          u3600 1C11                          u5200 14A2  
                        u5040 1EBB                          u2480 1326                          u5120 0BC6  
                        u6000 06BA                          u4400 1C5D                          u3601 1C10  
                        u5201 14A1                          u5041 1EBA                          u2481 1325  
                        u2465 130E                          u5121 0BC5                          u6001 06B9  
                        u4401 1C5C                          u3450 16C1                          u3370 1656  
                        u5210 14A9                          u2490 132B                          u2570 119B  
                        u5130 0C8B                          u6010 06D1                          u3451 16C0  
                        u3371 1655                          u5211 14A8                          u5035 1EAB  
                        u2491 132A                          u2475 131A                          u2571 119A  
                        u2555 1184                          u5131 0C8A                          u6011 06CE  
                        u4500 13A8                          u3700 089B                          u3620 083B  
                        u3460 0809                          u3380 168C                          u5140 1432  
                        u5060 1ECF                          u2580 11A0                          u6020 1CEC  
                        u6100 1582                          u4501 13A7                          u3701 089A  
                        u3621 083A                          u3461 0808                          u3445 16B3  
                        u3381 168B                          u3365 1623                          u5141 1431  
                        u5061 1ECE                          u5045 1EB7                          u2581 119F  
                        u2565 118F                          u6021 1CEB                          u6101 1581  
                        u4510 13AF                          u3710 08A0                          u3630 084F  
                        u5310 12A5                          u3390 1690                          u5230 14BB  
                        u5150 144C                          u5070 08BD                          u6030 14EF  
                        u4511 13AE                          u3711 089F                          u5311 12A4  
                        u3391 168F                          u3375 1652                          u5231 14BA  
                        u5151 144B                          u5055 1EC3                          u5071 08BC  
                        u6031 14EE                          u4600 140F                          u3640 086A  
                        u5400 1148                          u5240 14C2                          u5080 09A0  
                        u6040 1507                          u3641 0869                          u5305 128C  
                        u5401 1147                          u5241 14C1                          u5225 14AB  
                        u5081 099F                          u6041 1506                          u3570 1DE3  
                        u4610 141D                          u4530 13C8                          u3650 0871  
                        u5330 12C3                          u3490 0823                          u5170 1485  
                        u5090 0A64                          u6050 1524                          u3571 1DE2  
                        u4611 141C                          u4531 13C7                          u3651 0870  
                        u3635 084B                          u5331 12C2                          u5315 12A1  
                        u3491 0822                          u3475 0810                          u5171 1484  
                        u5091 0A63                          u3580 1DF4                          u4700 1738  
                        u4620 16E9                          u5340 1CC9                          u5420 1D28  
                        u5260 14D3                          u5500 0DA0                          u6060 1536  
                        u3581 1DF3                          u4605 140B                          u4525 13BB  
                        u4701 1737                          u4621 16E8                          u5341 1CC8  
                        u5325 12B5                          u5421 1D27                          u3485 0817  
                        u5261 14D2                          u5165 1470                          u5501 0D9F  
                        u6117 1C4E                          u3590 1E13                          u4550 13E5  
                        u4630 16EF                          u3670 0883                          u5270 1276  
                        u5350 1105                          u5190 149E                          u5510 0DAE  
                        u5430 1CA2                          u4390 10FA                          u3591 1E12  
                        u4551 13E4                          u4631 16EE                          u3671 0882  
                        u5271 1275                          u5351 1104                          u5415 1D16  
                        u5255 14C5                          u5191 149D                          u5175 1481  
                        u5511 0DAD                          u6055 1520                          u6207 1D6D  
                        u6127 1D7C                          u5431 1CA1                          u4391 10F9  
                        u4720 1748                          u4640 16F9                          u3680 088A  
                        u5600 0F9A                          u5520 0E03                          u6080 1569  
                        u5440 1CB4                          u4545 13D8                          u4721 1747  
                        u4641 16F8                          u3681 0889                          u3665 0873  
                        u5185 1491                          u5601 0F99                          u5521 0E02  
                        u6217 1F6E                          u6081 1568                          u6065 1532  
                        u6137 1D93                          u5441 1CB3                          u4570 13F4  
                        u4810 1795                          u4730 1750                          u4650 1705  
                        u5290 128A                          u5370 1119                          u5610 0FB1  
                        u5530 0E4A                          u5450 1EE3                          u3595 1E0F  
                        u4571 13F3                          u4811 1794                          u4731 174F  
                        u4715 1739                          u4651 1704                          u5291 1289  
                        u5371 1118                          u5611 0FB0                          u5531 0E47  
                        u6227 1F7D                          u6075 1554                          u6147 1DA1  
                        u4580 13FA                          u4820 1799                          u4660 170B  
                        u5380 112B                          u4900 074D                          u5700 01C0  
                        u5620 0024                          u5540 0E50                          u5460 1F07  
                        _RCIF 0065                          u4581 13F9                          u4565 13E9  
                        u4821 1798                          u4805 1784                          u4661 170A  
                        u5285 127B                          u5381 112A                          u5365 110A  
                        u4901 074C                          u5701 01BF                          u5621 0FFA  
                        u5541 0E4F                          u6237 1F8C                          u6085 1565  
                        u6157 1DB0                          u4590 13FE                          u4830 17AD  
                        u4750 1763                          u4670 1715                          u5710 01D8  
                        u5630 002D                          u5550 0E7C                          u5470 1F19  
                        u4591 13FD                          u4831 17AC                          u4751 1762  
                        u4671 1714                          u3695 088D                          u4911 0756  
                        u5711 01D7                          u5631 002C                          u5615 0FAD  
                        u5551 0E7B                          u6247 1C93                          u6095 1575  
                        u6167 1DC9                          u5471 1F18                          u4760 176A  
                        u4680 171E                          u4912 075D                          u5720 0204  
                        u5640 004C                          u5560 0EA0                          u5480 0D2C  
                        u4841 17C7                          u4761 1769                          u4745 1752  
                        u4681 171D                          u5385 1127                          u5721 0203  
                        u5641 004B                          u5625 0FF5                          u5561 0E9F  
                        u5481 0D2B                          u6177 1DD7                          u4850 17D2  
                        u4842 17CE                          u4690 1723                          u5810 0490  
                        u5730 0218                          u5650 005B                          u5570 0EB6  
                        u5490 0D56                          u4851 17D1                          u4691 1722  
                        u5395 113A                          u5811 048F                          u5731 0217  
                        u5651 005A                          u5491 0D55                          u6187 1D48  
                        u4780 177A                          u4940 0773                          u4860 06EB  
                        u5900 057B                          u5820 04B0                          u5660 0072  
                        u5580 0F0D                          u4781 1779                          u4941 0772  
                        u4925 075E                          u4861 06EA                          u5901 057A  
                        u5821 04AF                          u5805 0433                          u5725 0200  
                        u5661 0071                          u5581 0F0C                          u6197 1D5F  
                        u4790 1782                          u4950 077B                          u4870 0703  
                        u5910 0594                          u5830 04D8                          u5750 02C5  
                        u5590 0F7A                          u4791 1781                          u4775 176B  
                        u4951 077A                          u4935 0766                          u4871 0702  
                        u5911 0593                          u5831 04D7                          u5751 02C4  
                        u5655 0057                          u5591 0F79                          u5575 0EB1  
                        u4880 071A                          u5920 05A6                          u5840 04ED  
                        u5760 02EC                          u5680 0182                          u4961 0784  
                        u5921 05A5                          u5905 0577                          u5841 04EC  
                        u5761 02EB                          u5745 022F                          u5681 0181  
                        u4962 078B                          u4890 072C                          u5930 05B4  
                        u5850 04F5                          u5770 02FB                          u5690 0191  
                        u5931 05B3                          u5851 04F4                          u5771 02FA  
                        u5691 0190                          u5675 0141                          u5940 05CA  
                        u5780 0324                          u4885 0716                          u5941 05C9  
                        u5781 0323                          u5765 02E8                          u5685 017E  
                        u4990 07A1                          u5950 05E2                          u5870 0543  
                        u4991 07A0                          u4975 078C                          u4895 0728  
                        u5951 05E1                          u5871 0542                          u5775 02F7  
                        u5960 0600                          u5880 0552                          u4985 0794  
                        u5961 05FF                          u5945 05C6                          u5881 0551  
                        u5865 0502                          u5970 061F                          u5890 055D  
                        u5971 061E                          u5955 05DE                          u5891 055C  
                        u5875 053F                          u5795 03A1                          u5980 0631  
                        u5981 0630                          u5895 0559                          u5995 0654  
                        _TRMT 04C1             ?_Lcd_Write_String 0075               __end_of_SPI_ADC 1D75  
                        _cont 006E                          _main 1F1A                  ___ftpack@arg 0072  
                ___ftpack@exp 0075                          btemp 007E                          start 000C  
          ??_Lcd_Write_String 0077                  _sprintf$1240 00BB               __end_of_Lcd_Cmd 1C9C  
           ___bmul@multiplier 002B                  ___ftmul@cntr 003A                  ___ftmul@sign 003B  
             __end_of_Mapeo_M 13A3                         ??_ISR 0070                  ___fttol@exp1 0052  
                ___fttol@lval 004E                         ?_main 0070               __end_of___awdiv 1335  
             __end_of___ftadd 1800                         STR_10 1097                         STR_11 10B8  
             __end_of___awmod 11AA               __end_of___ftdiv 159E               __end_of___ftneg 1C14  
                       _ANSEL 0188               __end_of___lldiv 12CC               __end_of___ftmul 07BD  
             ___awdiv@divisor 0020               __end_of___llmod 1151               __end_of___ftsub 1CE5  
             __end_of___fttol 08B4               __end_of___lwdiv 1ED4                         i1l103 1BE3  
             __end_of___lwmod 1E51               ___awdiv@counter 0024                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
     __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085                         _TRISB 0086  
                       _TRISD 0088                         _TRISE 0089                         _TXREG 0019  
                ___lltoft@exp 0025                 ___awtoft@sign 0025               __end_of_dpowers 1086  
             __end_of_initOsc 1206              __end_of_SPI_CONT 1DDF                         _scale 0A5D  
             __end_of_isdigit 1C3F              __end_of_SPI_TEMP 1DA9                 ___ftpack@sign 0076  
                       _setup 1E51                         pclath 000A               __end_of_spiInit 1C6B  
             __end_of_spiRead 1C0A                         status 0003                         wtemp0 007E  
             __end_of_sprintf 06D8                   ?_USART_Init 0070              __end_of_Lcd_Init 1FAF  
            __end_of_Lcd_Port 1BDD               __initialization 000F                  __end_of_main 1F64  
                      ??_main 007A                 ___fttol@sign1 004D            __size_of_Lcd_Clear 000D  
        __size_of__tdiv_to_l_ 00BD                     ??_SPI_ADC 0073              ___llmod@dividend 002A  
                      ?_scale 003C                   initOsc@IRCF 0074              ___awdiv@dividend 0022  
         _USART_Init_BaudRate 10CA                        ?_setup 0070              __end_of___awtoft 1D0E  
            __end_of___ftpack 141F                        _ANSELH 0189              __end_of___lltoft 1D41  
                   ??_Lcd_Cmd 0073                        _SPBRGH 009A       __size_of_Lcd_Write_Char 0016  
                      _TRISC0 0438                        _TRISC1 0439                        _TRISC2 043A  
                      _TRISC3 043B                        _TRISC5 043D                        _SSPCON 0014  
                      _SSPBUF 0013                     ??_Mapeo_M 004C              __end_of__powers_ 1037  
                      ___bmul 1C6B                        ___ftge 1DDF                        ___wmul 0803  
                   ??___awdiv 0079                     ??___ftadd 0052                     ??___awmod 0076  
        ?_USART_Init_BaudRate 0070                     ??___ftdiv 0042                     ??___ftneg 0075  
                   ??___lldiv 0020                     ??___ftmul 0032                     ??___llmod 002E  
                   ??___ftsub 007A                     ??___fttol 0049                     ??___lwdiv 0078  
                   ??___lwmod 0076                        _fround 08B4              ___awdiv@quotient 0026  
             ___awmod@divisor 0072               ___awmod@counter 0077         ___ftmul@f3_as_product 0037  
                   ??_initOsc 0072                     ??_isdigit 0072                        saved_w 007E  
            __end_of_spiWrite 1BE3                     ??_spiInit 0075                     ??_spiRead 0072  
         __size_of_USART_Init 0008                 ??_Show_val_VT 0077                     ??_sprintf 0063  
             Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076       __end_of__initialization 0020  
                  ___ftadd@f1 004C                    ___ftadd@f2 004F                    ___ftge@ff1 0072  
                  ___ftge@ff2 0075             __end_of_Lcd_Clear 1C2D                    ___ftdiv@f1 003F  
                  ___ftdiv@f2 003C                    ___ftdiv@f3 0047                    ___ftneg@f1 0072  
                  ___awtoft@c 0020           ___bmul@multiplicand 0028                    ___ftmul@f1 002C  
                  ___ftmul@f2 002F                    ___ftsub@f1 005C                    ___ftsub@f2 0059  
                  ___fttol@f1 0045                __pcstackCOMMON 0070         ??_USART_Init_BaudRate 0072  
                  ___lltoft@c 0020                 __end_of_scale 0D18                     ?_SPI_CONT 0070  
               __end_of_setup 1E8E                     ?_SPI_TEMP 0070                _Lcd_Set_Cursor 1C9C  
                  __div_to_l_ 159E                     ?_Lcd_Init 0070                     ?_Lcd_Port 0070  
             __div_to_l_@exp1 002D               __div_to_l_@cntr 002C                       ??_scale 003F  
             __div_to_l_@quot 0028                  sprintf@width 00C1                       ??_setup 0076  
                Write_USART@a 0072                    __pbssBANK0 006C                    __pbssBANK1 00A0  
         __end_of_Show_val_VT 1264                 __div_to_l_@f1 0072                 __div_to_l_@f2 0075  
                  __pmaintext 1F1A                       ?___bmul 0028                       ?___ftge 0072  
                     ?___wmul 0072                 ??_Write_USART 0072                    __pintentry 0004  
     __size_of_spiReceiveWait 0007                    ??_SPI_CONT 0073                    ??_SPI_TEMP 0073  
                     ?_fround 003C     __size_of_Lcd_Write_String 0046                     ?___awtoft 0020  
                   ?___ftpack 0072        __end_of_Lcd_Set_Cursor 1CC0                     ?___lltoft 0020  
      __size_of_ADC_to_string 0042    __end_of_Write_USART_String 10FB                    ??_Lcd_Init 0076  
                  ??_Lcd_Port 0072                       _SPI_ADC 1D41                       _SSPSTAT 0094  
                  __stringtab 1000                _Lcd_Write_Char 1C3F                       _Lcd_Cmd 1C82  
                     _Mapeo_M 1335                  ??_USART_Init 0072             __end_of__npowers_ 105E  
                  _scale$1239 0041                     _ADC_val_M 00A0                     ?_spiWrite 0070  
             __size_of___bmul 0017                 ?_Show_val_LCD 0070               __size_of___ftge 0038  
                     ___awdiv 12CC                       ___ftadd 16CA                       ___awmod 1151  
                     ___ftdiv 14DC                       ___ftneg 1C0A                       ___lldiv 1264  
             __size_of___wmul 0025                       ___ftmul 06D8                       ___llmod 10FB  
                     ___ftsub 1CC0                       ___fttol 0828                       ___lwdiv 1E8E  
                     ___lwmod 1E17                    ??___awtoft 0023                    ??___ftpack 0077  
             __size_of_fround 01A9               ?_Lcd_Set_Cursor 0076                    ??___lltoft 0024  
                     __ptext1 1E51                       __ptext2 1C55                       __ptext3 11AA  
                     __ptext4 10CA                       __ptext5 1BF1                       __ptext6 1206  
                     __ptext7 10D0                       __ptext8 1C14                       __ptext9 1FAF  
                __size_of_ISR 0007                   ?__div_to_l_ 0072                       _dpowers 105E  
                     _initOsc 11AA           __end_of_Write_USART 1C20                       _isdigit 1C2D  
                     _val_ADC 007B              ___awmod@dividend 0074                       _spiInit 1C55  
                     _spiRead 1C01            __end_of_USART_Init 1BF9                   _Show_val_VT 1206  
                     _sprintf 0D18                       clrloop0 1BFA        __end_of_Lcd_Write_Char 1C55  
        end_of_initialization 0020                 _ADC_to_string 07BD               ___lldiv@divisor 0072  
             ___lldiv@counter 0025                ??_Show_val_LCD 0022                     _RCSTAbits 0018  
                  ??_spiWrite 0072                       psplit$0 26003F                     Lcd_Port@a 0072  
              __tdiv_to_l_@f1 0072                __tdiv_to_l_@f2 0075                 ??__tdiv_to_l_ 0020  
                   _PORTCbits 0007                     _PORTEbits 0009                   spiWrite@dat 0072  
             ?_Lcd_Write_Char 0070             Lcd_Write_String@a 0075             Lcd_Write_String@i 0020  
              ?_ADC_to_string 0070                   ___ftdiv@exp 004A                     _TXSTAbits 0098  
         __size_of__div_to_l_ 012C                   ___ftmul@exp 0036                     _Lcd_Clear 1C20  
              _spiReceiveWait 1BEA                __end_of___bmul 1C82                __end_of___ftge 1E17  
                 _Write_USART 1C14                __end_of___wmul 0828              _Lcd_Write_String 1ED4  
              __end_of_fround 0A5D             __size_of_SPI_CONT 0036             __size_of_SPI_TEMP 0034  
         start_initialization 000F                   __end_of_ISR 1BEA           __end_of__tdiv_to_l_ 14DC  
           __size_of_Lcd_Init 004B                  _hola_esclavo 006F             __size_of_Lcd_Port 0006  
             ___llmod@divisor 0026   __end_of_USART_Init_BaudRate 10D0               ___llmod@counter 002F  
      __end_of_spiReceiveWait 1BF1                    ?_Lcd_Clear 0070                      ??___bmul 0029  
                    ??___ftge 0078                      ??___wmul 0076               Lcd_Write_Char@a 0074  
                    ??_fround 003F                 sprintf@tmpval 00C3                    fround@prec 004B  
           __size_of___awtoft 0029             __size_of___ftpack 007C             __size_of___lltoft 0033  
                 __pbssCOMMON 007A                     ___latbits 0002                 __pcstackBANK0 0020  
               __pcstackBANK1 00BB                  _isdigit$1034 0072                      ?_SPI_ADC 0070  
        __end_of_Show_val_LCD 2000               ??_ADC_to_string 0069                      ?_Lcd_Cmd 0070  
                 sprintf@flag 00BF                   sprintf@eexp 00CB                   sprintf@fval 00CD  
                   _data_TEMP 00A3            _Write_USART_String 10D0                   sprintf@prec 00D1  
                    ?_Mapeo_M 0070                     _data_cont 00B3              ___lwdiv@dividend 0022  
             ?_spiReceiveWait 0070              ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0073  
                    ?___awdiv 0020                      ?___ftadd 004C                      ?___awmod 0072  
                    ?___ftdiv 003C                      ?___ftneg 0072                      ?___lldiv 0072  
                    ?___ftmul 002C                      ?___llmod 0026                      ?___ftsub 0059  
                   __npowers_ 1037                      ?___fttol 0045                      ?___lwdiv 0020  
                    ?___lwmod 0072             __size_of_spiWrite 0006                     __pstrings 1000  
                 __tdiv_to_l_ 141F                  ??__div_to_l_ 0020                      ?_initOsc 0070  
                    ?_isdigit 0070                      ?_spiInit 0072                      ?_spiRead 0070  
        ??_Write_USART_String 0075                  ?_Show_val_VT 0070              ___lwdiv@quotient 0025  
                  pnum$text27 0026                      ?_sprintf 005F                __size_of_scale 02BB  
              __size_of_setup 003D                 _mv_temp_val_M 006C          spiInit@sTransmitEdge 0074  
           interrupt_function 0004                ___wmul@product 0076                     clear_ram0 1BF9  
                    _PIE1bits 008C            spiInit@sDataSample 0072                      Lcd_Cmd@a 0075  
          __end_of__div_to_l_ 16CA                   ??_Lcd_Clear 0076                      _SPI_CONT 1DA9  
                    _SPI_TEMP 1D75                   __stringbase 100F             ___wmul@multiplier 0072  
            ??_Lcd_Write_Char 0073                      _Lcd_Init 1F64                      _Lcd_Port 1BD7  
            __size_of_SPI_ADC 0034      __end_of_Lcd_Write_String 1F1A              __size_of_Lcd_Cmd 001A  
            __size_of_Mapeo_M 006E                  ?_Write_USART 0070              __size_of___awdiv 0069  
            __size_of___ftadd 0136              __size_of___awmod 0059              __size_of___ftdiv 00C2  
            __size_of___ftneg 000A              __size_of___lldiv 0068              __size_of___ftmul 00E5  
            __size_of___llmod 0056              __size_of___ftsub 0025              __size_of___fttol 008C  
            __size_of___lwdiv 0046              __size_of___lwmod 003A                      ___awtoft 1CE5  
                    ___ftpack 13A3                   _fround$1237 0048                   _fround$1238 0045  
          __end_of__stringtab 1010                      ___lltoft 1D0E         __size_of_Show_val_LCD 0051  
                    _data_ADC 00AB                    sprintf@val 00C7              __size_of_initOsc 005C  
            __size_of_isdigit 0012               ___lwdiv@divisor 0020               ___lwdiv@counter 0024  
                    __ptext10 1ED4                      __ptext11 1C3F                      __ptext20 14DC  
                    __ptext12 1C9C                      __ptext21 1CE5                      __ptext13 1D75  
                    __ptext30 12CC                      __ptext22 1F64                      __ptext14 1DA9  
                    __ptext31 1C2D                      __ptext23 1C20                      __ptext15 1D41  
                    __ptext40 1D0E                      __ptext32 08B4                      __ptext24 1C82  
                    __ptext16 1BDD                      __ptext41 10FB                      __ptext33 1E17  
                    __ptext25 1BD7                      __ptext17 1C01                      __ptext42 1264  
                    __ptext34 1E8E                      __ptext26 07BD                      __ptext18 1BEA  
                    __ptext43 0828                      __ptext35 06D8                      __ptext27 0D18  
                    __ptext19 1335                      __ptext44 1CC0                      __ptext36 1C6B  
                    __ptext28 0A5D                      __ptext45 16CA                      __ptext37 141F  
                    __ptext29 1151                      __ptext46 13A3                      __ptext38 159E  
                    __ptext47 1C0A                      __ptext39 0803                      __ptext48 1DDF  
                    __ptext49 1BE3              __size_of_spiInit 0016              __size_of_spiRead 0009  
                    __powers_ 1010              __size_of_sprintf F9C0                 __size_of_main 004A  
                    _val_TEMP 007A                      _spiWrite 1BDD                  _Show_val_LCD 1FAF  
                spiInit@sType 0075             spiInit@sClockIdle 0073                    _INTCONbits 000B  
         Write_USART_String@a 0073           Write_USART_String@i 0076            pnum$text27_split_1 003F  
                    isdigit@c 0073                      scale@scl 0044                      intlevel1 0000  
                   sprintf@ap 00BE              __tdiv_to_l_@exp1 0029          __size_of_Show_val_VT 005E  
            __tdiv_to_l_@cntr 0028                     sprintf@sp 00D0              __tdiv_to_l_@quot 0024  
            ___lwmod@dividend 0074              ___lldiv@dividend 0076              ??_spiReceiveWait 0072  
                   stringcode 100A                    _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006  
          Lcd_Set_Cursor@temp 0079                  ?__tdiv_to_l_ 0072                      sprintf@c 00D3  
                    sprintf@f 005F              ___lldiv@quotient 0021               ___lwmod@divisor 0072  
             ___lwmod@counter 0077                      stringdir 100A                      stringtab 1000  
       __end_of_ADC_to_string 07FF                    _USART_Init 1BF1  
