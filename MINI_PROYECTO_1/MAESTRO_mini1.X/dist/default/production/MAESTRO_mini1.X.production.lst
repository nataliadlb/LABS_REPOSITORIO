

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 17:45:09 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2,group=3
    43                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	intentry,global,class=CODE,delta=2
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    63                           	psect	text25_split_1,local,class=CODE,merge=1,delta=2
    64                           	dabs	1,0x7E,2
    65  0000                     
    66                           ; Version 2.20
    67                           ; Generated 12/02/2020 GMT
    68                           ; 
    69                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC16F887 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000E                     	;# 
   116  000F                     	;# 
   117  0010                     	;# 
   118  0011                     	;# 
   119  0012                     	;# 
   120  0013                     	;# 
   121  0014                     	;# 
   122  0015                     	;# 
   123  0015                     	;# 
   124  0016                     	;# 
   125  0017                     	;# 
   126  0018                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  0081                     	;# 
   136  0085                     	;# 
   137  0086                     	;# 
   138  0087                     	;# 
   139  0088                     	;# 
   140  0089                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  008F                     	;# 
   145  0090                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0093                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0095                     	;# 
   153  0096                     	;# 
   154  0097                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009A                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  009F                     	;# 
   163  0105                     	;# 
   164  0107                     	;# 
   165  0108                     	;# 
   166  0109                     	;# 
   167  010C                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  0185                     	;# 
   173  0187                     	;# 
   174  0188                     	;# 
   175  0189                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178  0000                     	;# 
   179  0001                     	;# 
   180  0002                     	;# 
   181  0003                     	;# 
   182  0004                     	;# 
   183  0005                     	;# 
   184  0006                     	;# 
   185  0007                     	;# 
   186  0008                     	;# 
   187  0009                     	;# 
   188  000A                     	;# 
   189  000B                     	;# 
   190  000C                     	;# 
   191  000D                     	;# 
   192  000E                     	;# 
   193  000E                     	;# 
   194  000F                     	;# 
   195  0010                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0013                     	;# 
   199  0014                     	;# 
   200  0015                     	;# 
   201  0015                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001B                     	;# 
   208  001B                     	;# 
   209  001C                     	;# 
   210  001D                     	;# 
   211  001E                     	;# 
   212  001F                     	;# 
   213  0081                     	;# 
   214  0085                     	;# 
   215  0086                     	;# 
   216  0087                     	;# 
   217  0088                     	;# 
   218  0089                     	;# 
   219  008C                     	;# 
   220  008D                     	;# 
   221  008E                     	;# 
   222  008F                     	;# 
   223  0090                     	;# 
   224  0091                     	;# 
   225  0092                     	;# 
   226  0093                     	;# 
   227  0093                     	;# 
   228  0093                     	;# 
   229  0094                     	;# 
   230  0095                     	;# 
   231  0096                     	;# 
   232  0097                     	;# 
   233  0098                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  009F                     	;# 
   241  0105                     	;# 
   242  0107                     	;# 
   243  0108                     	;# 
   244  0109                     	;# 
   245  010C                     	;# 
   246  010C                     	;# 
   247  010D                     	;# 
   248  010E                     	;# 
   249  010F                     	;# 
   250  0185                     	;# 
   251  0187                     	;# 
   252  0188                     	;# 
   253  0189                     	;# 
   254  018C                     	;# 
   255  018D                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  000D                     	;# 
   270  000E                     	;# 
   271  000E                     	;# 
   272  000F                     	;# 
   273  0010                     	;# 
   274  0011                     	;# 
   275  0012                     	;# 
   276  0013                     	;# 
   277  0014                     	;# 
   278  0015                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0017                     	;# 
   282  0018                     	;# 
   283  0019                     	;# 
   284  001A                     	;# 
   285  001B                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  001D                     	;# 
   289  001E                     	;# 
   290  001F                     	;# 
   291  0081                     	;# 
   292  0085                     	;# 
   293  0086                     	;# 
   294  0087                     	;# 
   295  0088                     	;# 
   296  0089                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  008F                     	;# 
   301  0090                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0093                     	;# 
   305  0093                     	;# 
   306  0093                     	;# 
   307  0094                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0098                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  009F                     	;# 
   319  0105                     	;# 
   320  0107                     	;# 
   321  0108                     	;# 
   322  0109                     	;# 
   323  010C                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  010F                     	;# 
   328  0185                     	;# 
   329  0187                     	;# 
   330  0188                     	;# 
   331  0189                     	;# 
   332  018C                     	;# 
   333  018D                     	;# 
   334  0000                     	;# 
   335  0001                     	;# 
   336  0002                     	;# 
   337  0003                     	;# 
   338  0004                     	;# 
   339  0005                     	;# 
   340  0006                     	;# 
   341  0007                     	;# 
   342  0008                     	;# 
   343  0009                     	;# 
   344  000A                     	;# 
   345  000B                     	;# 
   346  000C                     	;# 
   347  000D                     	;# 
   348  000E                     	;# 
   349  000E                     	;# 
   350  000F                     	;# 
   351  0010                     	;# 
   352  0011                     	;# 
   353  0012                     	;# 
   354  0013                     	;# 
   355  0014                     	;# 
   356  0015                     	;# 
   357  0015                     	;# 
   358  0016                     	;# 
   359  0017                     	;# 
   360  0018                     	;# 
   361  0019                     	;# 
   362  001A                     	;# 
   363  001B                     	;# 
   364  001B                     	;# 
   365  001C                     	;# 
   366  001D                     	;# 
   367  001E                     	;# 
   368  001F                     	;# 
   369  0081                     	;# 
   370  0085                     	;# 
   371  0086                     	;# 
   372  0087                     	;# 
   373  0088                     	;# 
   374  0089                     	;# 
   375  008C                     	;# 
   376  008D                     	;# 
   377  008E                     	;# 
   378  008F                     	;# 
   379  0090                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0093                     	;# 
   383  0093                     	;# 
   384  0093                     	;# 
   385  0094                     	;# 
   386  0095                     	;# 
   387  0096                     	;# 
   388  0097                     	;# 
   389  0098                     	;# 
   390  0099                     	;# 
   391  009A                     	;# 
   392  009B                     	;# 
   393  009C                     	;# 
   394  009D                     	;# 
   395  009E                     	;# 
   396  009F                     	;# 
   397  0105                     	;# 
   398  0107                     	;# 
   399  0108                     	;# 
   400  0109                     	;# 
   401  010C                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010E                     	;# 
   405  010F                     	;# 
   406  0185                     	;# 
   407  0187                     	;# 
   408  0188                     	;# 
   409  0189                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  0000                     	;# 
   413  0001                     	;# 
   414  0002                     	;# 
   415  0003                     	;# 
   416  0004                     	;# 
   417  0005                     	;# 
   418  0006                     	;# 
   419  0007                     	;# 
   420  0008                     	;# 
   421  0009                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  000D                     	;# 
   426  000E                     	;# 
   427  000E                     	;# 
   428  000F                     	;# 
   429  0010                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0013                     	;# 
   433  0014                     	;# 
   434  0015                     	;# 
   435  0015                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  001A                     	;# 
   441  001B                     	;# 
   442  001B                     	;# 
   443  001C                     	;# 
   444  001D                     	;# 
   445  001E                     	;# 
   446  001F                     	;# 
   447  0081                     	;# 
   448  0085                     	;# 
   449  0086                     	;# 
   450  0087                     	;# 
   451  0088                     	;# 
   452  0089                     	;# 
   453  008C                     	;# 
   454  008D                     	;# 
   455  008E                     	;# 
   456  008F                     	;# 
   457  0090                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0093                     	;# 
   461  0093                     	;# 
   462  0093                     	;# 
   463  0094                     	;# 
   464  0095                     	;# 
   465  0096                     	;# 
   466  0097                     	;# 
   467  0098                     	;# 
   468  0099                     	;# 
   469  009A                     	;# 
   470  009B                     	;# 
   471  009C                     	;# 
   472  009D                     	;# 
   473  009E                     	;# 
   474  009F                     	;# 
   475  0105                     	;# 
   476  0107                     	;# 
   477  0108                     	;# 
   478  0109                     	;# 
   479  010C                     	;# 
   480  010C                     	;# 
   481  010D                     	;# 
   482  010E                     	;# 
   483  010F                     	;# 
   484  0185                     	;# 
   485  0187                     	;# 
   486  0188                     	;# 
   487  0189                     	;# 
   488  018C                     	;# 
   489  018D                     	;# 
   490  0000                     	;# 
   491  0001                     	;# 
   492  0002                     	;# 
   493  0003                     	;# 
   494  0004                     	;# 
   495  0005                     	;# 
   496  0006                     	;# 
   497  0007                     	;# 
   498  0008                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000D                     	;# 
   504  000E                     	;# 
   505  000E                     	;# 
   506  000F                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0013                     	;# 
   511  0014                     	;# 
   512  0015                     	;# 
   513  0015                     	;# 
   514  0016                     	;# 
   515  0017                     	;# 
   516  0018                     	;# 
   517  0019                     	;# 
   518  001A                     	;# 
   519  001B                     	;# 
   520  001B                     	;# 
   521  001C                     	;# 
   522  001D                     	;# 
   523  001E                     	;# 
   524  001F                     	;# 
   525  0081                     	;# 
   526  0085                     	;# 
   527  0086                     	;# 
   528  0087                     	;# 
   529  0088                     	;# 
   530  0089                     	;# 
   531  008C                     	;# 
   532  008D                     	;# 
   533  008E                     	;# 
   534  008F                     	;# 
   535  0090                     	;# 
   536  0091                     	;# 
   537  0092                     	;# 
   538  0093                     	;# 
   539  0093                     	;# 
   540  0093                     	;# 
   541  0094                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0097                     	;# 
   545  0098                     	;# 
   546  0099                     	;# 
   547  009A                     	;# 
   548  009B                     	;# 
   549  009C                     	;# 
   550  009D                     	;# 
   551  009E                     	;# 
   552  009F                     	;# 
   553  0105                     	;# 
   554  0107                     	;# 
   555  0108                     	;# 
   556  0109                     	;# 
   557  010C                     	;# 
   558  010C                     	;# 
   559  010D                     	;# 
   560  010E                     	;# 
   561  010F                     	;# 
   562  0185                     	;# 
   563  0187                     	;# 
   564  0188                     	;# 
   565  0189                     	;# 
   566  018C                     	;# 
   567  018D                     	;# 
   568                           
   569                           	psect	strings
   570  1000                     __pstrings:
   571  1000                     stringtab:
   572  1000                     __stringtab:
   573                           
   574                           ;	String table - string pointers are 1 byte each
   575  1000  1BFF               	btfsc	btemp+1,7
   576  1001  280A               	ljmp	stringcode
   577  1002  1383               	bcf	3,7
   578  1003  187F               	btfsc	btemp+1,0
   579  1004  1783               	bsf	3,7
   580  1005  0800               	movf	0,w
   581  1006  0A84               	incf	4,f
   582  1007  1903               	skipnz
   583  1008  0AFF               	incf	btemp+1,f
   584  1009  0008               	return
   585  100A                     stringcode:
   586  100A                     stringdir:
   587  100A  3010               	movlw	high stringdir
   588  100B  008A               	movwf	10
   589  100C  0804               	movf	4,w
   590  100D  0A84               	incf	4,f
   591  100E  0782               	addwf	2,f
   592  100F                     __stringbase:
   593  100F  3400               	retlw	0
   594  1010                     __end_of__stringtab:
   595  1010                     __powers_:
   596  1010  3400               	retlw	0
   597  1011  3480               	retlw	128
   598  1012  343F               	retlw	63
   599  1013  3400               	retlw	0
   600  1014  3420               	retlw	32
   601  1015  3441               	retlw	65
   602  1016  3400               	retlw	0
   603  1017  34C8               	retlw	200
   604  1018  3442               	retlw	66
   605  1019  3400               	retlw	0
   606  101A  347A               	retlw	122
   607  101B  3444               	retlw	68
   608  101C  3440               	retlw	64
   609  101D  341C               	retlw	28
   610  101E  3446               	retlw	70
   611  101F  3450               	retlw	80
   612  1020  34C3               	retlw	195
   613  1021  3447               	retlw	71
   614  1022  3424               	retlw	36
   615  1023  3474               	retlw	116
   616  1024  3449               	retlw	73
   617  1025  3497               	retlw	151
   618  1026  3418               	retlw	24
   619  1027  344B               	retlw	75
   620  1028  34BC               	retlw	188
   621  1029  34BE               	retlw	190
   622  102A  344C               	retlw	76
   623  102B  346B               	retlw	107
   624  102C  346E               	retlw	110
   625  102D  344E               	retlw	78
   626  102E  3403               	retlw	3
   627  102F  3415               	retlw	21
   628  1030  3450               	retlw	80
   629  1031  3479               	retlw	121
   630  1032  34AD               	retlw	173
   631  1033  3460               	retlw	96
   632  1034  34F3               	retlw	243
   633  1035  3449               	retlw	73
   634  1036  3471               	retlw	113
   635  1037                     __end_of__powers_:
   636  1037                     __npowers_:
   637  1037  3400               	retlw	0
   638  1038  3480               	retlw	128
   639  1039  343F               	retlw	63
   640  103A  34CD               	retlw	205
   641  103B  34CC               	retlw	204
   642  103C  343D               	retlw	61
   643  103D  34D7               	retlw	215
   644  103E  3423               	retlw	35
   645  103F  343C               	retlw	60
   646  1040  3412               	retlw	18
   647  1041  3483               	retlw	131
   648  1042  343A               	retlw	58
   649  1043  34B7               	retlw	183
   650  1044  34D1               	retlw	209
   651  1045  3438               	retlw	56
   652  1046  34C6               	retlw	198
   653  1047  3427               	retlw	39
   654  1048  3437               	retlw	55
   655  1049  3438               	retlw	56
   656  104A  3486               	retlw	134
   657  104B  3435               	retlw	53
   658  104C  34C0               	retlw	192
   659  104D  34D6               	retlw	214
   660  104E  3433               	retlw	51
   661  104F  34CC               	retlw	204
   662  1050  342B               	retlw	43
   663  1051  3432               	retlw	50
   664  1052  3470               	retlw	112
   665  1053  3489               	retlw	137
   666  1054  3430               	retlw	48
   667  1055  34E7               	retlw	231
   668  1056  34DB               	retlw	219
   669  1057  342E               	retlw	46
   670  1058  34E5               	retlw	229
   671  1059  343C               	retlw	60
   672  105A  341E               	retlw	30
   673  105B  3442               	retlw	66
   674  105C  34A2               	retlw	162
   675  105D  340D               	retlw	13
   676  105E                     __end_of__npowers_:
   677  105E                     _dpowers:
   678  105E  3401               	retlw	1
   679  105F  3400               	retlw	0
   680  1060  3400               	retlw	0
   681  1061  3400               	retlw	0
   682  1062  340A               	retlw	10
   683  1063  3400               	retlw	0
   684  1064  3400               	retlw	0
   685  1065  3400               	retlw	0
   686  1066  3464               	retlw	100
   687  1067  3400               	retlw	0
   688  1068  3400               	retlw	0
   689  1069  3400               	retlw	0
   690  106A  34E8               	retlw	232
   691  106B  3403               	retlw	3
   692  106C  3400               	retlw	0
   693  106D  3400               	retlw	0
   694  106E  3410               	retlw	16
   695  106F  3427               	retlw	39
   696  1070  3400               	retlw	0
   697  1071  3400               	retlw	0
   698  1072  34A0               	retlw	160
   699  1073  3486               	retlw	134
   700  1074  3401               	retlw	1
   701  1075  3400               	retlw	0
   702  1076  3440               	retlw	64
   703  1077  3442               	retlw	66
   704  1078  340F               	retlw	15
   705  1079  3400               	retlw	0
   706  107A  3480               	retlw	128
   707  107B  3496               	retlw	150
   708  107C  3498               	retlw	152
   709  107D  3400               	retlw	0
   710  107E  3400               	retlw	0
   711  107F  34E1               	retlw	225
   712  1080  34F5               	retlw	245
   713  1081  3405               	retlw	5
   714  1082  3400               	retlw	0
   715  1083  34CA               	retlw	202
   716  1084  349A               	retlw	154
   717  1085  343B               	retlw	59
   718  1086                     __end_of_dpowers:
   719  0013                     _SSPBUF	set	19
   720  0014                     _SSPCON	set	20
   721  001A                     _RCREG	set	26
   722  0019                     _TXREG	set	25
   723  000B                     _INTCONbits	set	11
   724  0018                     _RCSTAbits	set	24
   725  0009                     _PORTEbits	set	9
   726  0007                     _PORTCbits	set	7
   727  0009                     _PORTE	set	9
   728  0008                     _PORTD	set	8
   729  0007                     _PORTC	set	7
   730  0005                     _PORTA	set	5
   731  0006                     _PORTB	set	6
   732  0065                     _RCIF	set	101
   733  0039                     _RC1	set	57
   734  0038                     _RC0	set	56
   735  003A                     _RC2	set	58
   736  0094                     _SSPSTATbits	set	148
   737  0094                     _SSPSTAT	set	148
   738  008C                     _PIE1bits	set	140
   739  0099                     _SPBRG	set	153
   740  009A                     _SPBRGH	set	154
   741  0098                     _TXSTAbits	set	152
   742  008F                     _OSCCONbits	set	143
   743  0089                     _TRISE	set	137
   744  0088                     _TRISD	set	136
   745  0086                     _TRISB	set	134
   746  0085                     _TRISA	set	133
   747  043B                     _TRISC3	set	1083
   748  043D                     _TRISC5	set	1085
   749  04C1                     _TRMT	set	1217
   750  043A                     _TRISC2	set	1082
   751  0439                     _TRISC1	set	1081
   752  0438                     _TRISC0	set	1080
   753  0189                     _ANSELH	set	393
   754  0188                     _ANSEL	set	392
   755  1086                     STR_1:
   756  1086  3443               	retlw	67	;'C'
   757  1087  344F               	retlw	79	;'O'
   758  1088  344E               	retlw	78	;'N'
   759  1089  3454               	retlw	84	;'T'
   760  108A  3420               	retlw	32	;' '
   761  108B  3420               	retlw	32	;' '
   762  108C  3441               	retlw	65	;'A'
   763  108D  3444               	retlw	68	;'D'
   764  108E  3443               	retlw	67	;'C'
   765  108F  3420               	retlw	32	;' '
   766  1090  3420               	retlw	32	;' '
   767  1091  3420               	retlw	32	;' '
   768  1092  3454               	retlw	84	;'T'
   769  1093  3445               	retlw	69	;'E'
   770  1094  344D               	retlw	77	;'M'
   771  1095  3450               	retlw	80	;'P'
   772  1096  3400               	retlw	0
   773  1097                     STR_6:
   774  1097  3454               	retlw	84	;'T'
   775  1098  3445               	retlw	69	;'E'
   776  1099  344D               	retlw	77	;'M'
   777  109A  3450               	retlw	80	;'P'
   778  109B  343A               	retlw	58	;':'
   779  109C  3420               	retlw	32	;' '
   780  109D  3420               	retlw	32	;' '
   781  109E  340A               	retlw	10
   782  109F  3400               	retlw	0
   783  10A0                     STR_2:
   784  10A0  3443               	retlw	67	;'C'
   785  10A1  344F               	retlw	79	;'O'
   786  10A2  344E               	retlw	78	;'N'
   787  10A3  3454               	retlw	84	;'T'
   788  10A4  343A               	retlw	58	;':'
   789  10A5  3420               	retlw	32	;' '
   790  10A6  3420               	retlw	32	;' '
   791  10A7  340A               	retlw	10
   792  10A8  3400               	retlw	0
   793  10A9                     STR_4:
   794  10A9  3441               	retlw	65	;'A'
   795  10AA  3444               	retlw	68	;'D'
   796  10AB  3443               	retlw	67	;'C'
   797  10AC  343A               	retlw	58	;':'
   798  10AD  3420               	retlw	32	;' '
   799  10AE  3420               	retlw	32	;' '
   800  10AF  340A               	retlw	10
   801  10B0  3400               	retlw	0
   802  10B1                     STR_9:
   803  10B1  3425               	retlw	37	;'%'
   804  10B2  3431               	retlw	49	;'1'
   805  10B3  342E               	retlw	46	;'.'
   806  10B4  3432               	retlw	50	;'2'
   807  10B5  3466               	retlw	102	;'f'
   808  10B6  3456               	retlw	86	;'V'
   809  10B7  3400               	retlw	0
   810  10B8                     STR_7:
   811  10B8  34B0               	retlw	-80
   812  10B9  3443               	retlw	67	;'C'
   813  10BA  3420               	retlw	32	;' '
   814  10BB  3420               	retlw	32	;' '
   815  10BC  340A               	retlw	10
   816  10BD  3400               	retlw	0
   817  10BE                     STR_10:
   818  10BE  3425               	retlw	37	;'%'
   819  10BF  342E               	retlw	46	;'.'
   820  10C0  3432               	retlw	50	;'2'
   821  10C1  3469               	retlw	105	;'i'
   822  10C2  3400               	retlw	0
   823  10C3                     STR_8:
   824  10C3  3425               	retlw	37	;'%'
   825  10C4  342E               	retlw	46	;'.'
   826  10C5  3433               	retlw	51	;'3'
   827  10C6  3469               	retlw	105	;'i'
   828  10C7  3400               	retlw	0
   829  10C8                     STR_11:
   830  10C8  3443               	retlw	67	;'C'
   831  10C9  3400               	retlw	0
   832  10AD                     
   833                           	psect	cinit
   834  000F                     start_initialization:	
   835                           ; #config settings
   836                           
   837  000F                     __initialization:
   838                           
   839                           ; Clear objects allocated to COMMON
   840  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   841  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   842                           
   843                           ; Clear objects allocated to BANK0
   844  0011  1283               	bcf	3,5	;RP0=0, select bank0
   845  0012  1303               	bcf	3,6	;RP1=0, select bank0
   846  0013  01EE               	clrf	__pbssBANK0& (0+127)
   847  0014  01EF               	clrf	(__pbssBANK0+1)& (0+127)
   848                           
   849                           ; Clear objects allocated to BANK1
   850  0015  1383               	bcf	3,7	;select IRP bank0
   851  0016  30A0               	movlw	low __pbssBANK1
   852  0017  0084               	movwf	4
   853  0018  30D1               	movlw	low (__pbssBANK1+49)
   854  0019  160A  158A  23FB  120A  118A  	fcall	clear_ram0
   855  001E                     end_of_initialization:	
   856                           ;End of C runtime variable initialization code
   857                           
   858  001E                     __end_of__initialization:
   859  001E  0183               	clrf	3
   860  001F  120A  118A  2ED6   	ljmp	_main	;jump to C main() function
   861                           
   862                           	psect	bssCOMMON
   863  007A                     __pbssCOMMON:
   864  007A                     _val_TEMP:
   865  007A                     	ds	1
   866  007B                     _val_ADC:
   867  007B                     	ds	1
   868                           
   869                           	psect	bssBANK0
   870  006E                     __pbssBANK0:
   871  006E                     _cont:
   872  006E                     	ds	1
   873  006F                     _hola_esclavo:
   874  006F                     	ds	1
   875                           
   876                           	psect	bssBANK1
   877  00A0                     __pbssBANK1:
   878  00A0                     _data_total:
   879  00A0                     	ds	20
   880  00B4                     _ADC_val_M:
   881  00B4                     	ds	3
   882  00B7                     _mv_temp_val_M:
   883  00B7                     	ds	2
   884  00B9                     _data_TEMP:
   885  00B9                     	ds	8
   886  00C1                     _data_ADC:
   887  00C1                     	ds	8
   888  00C9                     _data_cont:
   889  00C9                     	ds	8
   890                           
   891                           	psect	clrtext
   892  1BFB                     clear_ram0:	
   893                           ;	Called with FSR containing the base address, and
   894                           ;	W with the last address+1
   895                           
   896  1BFB  0064               	clrwdt	;clear the watchdog before getting into this loop
   897  1BFC                     clrloop0:
   898  1BFC  0180               	clrf	0	;clear RAM location pointed to by FSR
   899  1BFD  0A84               	incf	4,f	;increment pointer
   900  1BFE  0604               	xorwf	4,w	;XOR with final address
   901  1BFF  1903               	btfsc	3,2	;have we reached the end yet?
   902  1C00  3400               	retlw	0	;all done for this memory range, return
   903  1C01  0604               	xorwf	4,w	;XOR again to restore value
   904  1C02  2BFC               	goto	clrloop0	;do the next byte
   905                           
   906                           	psect	cstackBANK1
   907  00D1                     __pcstackBANK1:
   908  00D1                     _sprintf$1231:
   909                           
   910                           ; 3 bytes @ 0x0
   911  00D1                     	ds	3
   912  00D4                     sprintf@ap:
   913                           
   914                           ; 1 bytes @ 0x3
   915  00D4                     	ds	1
   916  00D5                     sprintf@flag:
   917                           
   918                           ; 2 bytes @ 0x4
   919  00D5                     	ds	2
   920  00D7                     sprintf@width:
   921                           
   922                           ; 2 bytes @ 0x6
   923  00D7                     	ds	2
   924  00D9                     sprintf@tmpval:
   925                           
   926                           ; 4 bytes @ 0x8
   927  00D9                     	ds	4
   928  00DD                     sprintf@val:
   929                           
   930                           ; 4 bytes @ 0xC
   931  00DD                     	ds	4
   932  00E1                     sprintf@eexp:
   933                           
   934                           ; 2 bytes @ 0x10
   935  00E1                     	ds	2
   936  00E3                     sprintf@fval:
   937                           
   938                           ; 3 bytes @ 0x12
   939  00E3                     	ds	3
   940  00E6                     sprintf@sp:
   941                           
   942                           ; 1 bytes @ 0x15
   943  00E6                     	ds	1
   944  00E7                     sprintf@prec:
   945                           
   946                           ; 2 bytes @ 0x16
   947  00E7                     	ds	2
   948  00E9                     sprintf@c:
   949                           
   950                           ; 1 bytes @ 0x18
   951  00E9                     	ds	1
   952                           
   953                           	psect	cstackCOMMON
   954  0070                     __pcstackCOMMON:
   955  0070                     ?_isdigit:
   956  0070                     ?_setup:	
   957                           ; 1 bit 
   958                           
   959  0070                     ?_Lcd_Init:	
   960                           ; 1 bytes @ 0x0
   961                           
   962  0070                     ?_Lcd_Clear:	
   963                           ; 1 bytes @ 0x0
   964                           
   965  0070                     ?_SPI_CONT:	
   966                           ; 1 bytes @ 0x0
   967                           
   968  0070                     ?_SPI_ADC:	
   969                           ; 1 bytes @ 0x0
   970                           
   971  0070                     ?_SPI_TEMP:	
   972                           ; 1 bytes @ 0x0
   973                           
   974  0070                     ?_ADC_to_string:	
   975                           ; 1 bytes @ 0x0
   976                           
   977  0070                     ?_Write_USART:	
   978                           ; 1 bytes @ 0x0
   979                           
   980  0070                     ?_Show_val_LCD:	
   981                           ; 1 bytes @ 0x0
   982                           
   983  0070                     ?_initOsc:	
   984                           ; 1 bytes @ 0x0
   985                           
   986  0070                     ?_USART_Init_BaudRate:	
   987                           ; 1 bytes @ 0x0
   988                           
   989  0070                     ?_USART_Init:	
   990                           ; 1 bytes @ 0x0
   991                           
   992  0070                     ?_spiWrite:	
   993                           ; 1 bytes @ 0x0
   994                           
   995  0070                     ?_spiRead:	
   996                           ; 1 bytes @ 0x0
   997                           
   998  0070                     ?_Lcd_Port:	
   999                           ; 1 bytes @ 0x0
  1000                           
  1001  0070                     ?_Lcd_Cmd:	
  1002                           ; 1 bytes @ 0x0
  1003                           
  1004  0070                     ?_ISR:	
  1005                           ; 1 bytes @ 0x0
  1006                           
  1007  0070                     ??_ISR:	
  1008                           ; 1 bytes @ 0x0
  1009                           
  1010  0070                     ?_main:	
  1011                           ; 1 bytes @ 0x0
  1012                           
  1013  0070                     ?_Lcd_Write_Char:	
  1014                           ; 1 bytes @ 0x0
  1015                           
  1016  0070                     ?_spiReceiveWait:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019                           
  1020                           ; 1 bytes @ 0x0
  1021  0070                     	ds	2
  1022  0072                     ?___ftge:
  1023  0072                     ??_Write_USART:	
  1024                           ; 1 bit 
  1025                           
  1026  0072                     ??_initOsc:	
  1027                           ; 1 bytes @ 0x2
  1028                           
  1029  0072                     ??_USART_Init_BaudRate:	
  1030                           ; 1 bytes @ 0x2
  1031                           
  1032  0072                     ??_USART_Init:	
  1033                           ; 1 bytes @ 0x2
  1034                           
  1035  0072                     ?_spiInit:	
  1036                           ; 1 bytes @ 0x2
  1037                           
  1038  0072                     ??_spiWrite:	
  1039                           ; 1 bytes @ 0x2
  1040                           
  1041  0072                     ??_spiRead:	
  1042                           ; 1 bytes @ 0x2
  1043                           
  1044  0072                     ??_Lcd_Port:	
  1045                           ; 1 bytes @ 0x2
  1046                           
  1047  0072                     ??_isdigit:	
  1048                           ; 1 bytes @ 0x2
  1049                           
  1050  0072                     ??_spiReceiveWait:	
  1051                           ; 1 bytes @ 0x2
  1052                           
  1053  0072                     ?___wmul:	
  1054                           ; 1 bytes @ 0x2
  1055                           
  1056  0072                     ?___awmod:	
  1057                           ; 2 bytes @ 0x2
  1058                           
  1059  0072                     ?___lwmod:	
  1060                           ; 2 bytes @ 0x2
  1061                           
  1062  0072                     ?___ftpack:	
  1063                           ; 2 bytes @ 0x2
  1064                           
  1065  0072                     ?___ftneg:	
  1066                           ; 3 bytes @ 0x2
  1067                           
  1068  0072                     ?__tdiv_to_l_:	
  1069                           ; 3 bytes @ 0x2
  1070                           
  1071  0072                     ?__div_to_l_:	
  1072                           ; 4 bytes @ 0x2
  1073                           
  1074  0072                     ?___lldiv:	
  1075                           ; 4 bytes @ 0x2
  1076                           
  1077  0072                     Lcd_Port@a:	
  1078                           ; 4 bytes @ 0x2
  1079                           
  1080  0072                     Write_USART@a:	
  1081                           ; 1 bytes @ 0x2
  1082                           
  1083  0072                     spiInit@sDataSample:	
  1084                           ; 1 bytes @ 0x2
  1085                           
  1086  0072                     spiWrite@dat:	
  1087                           ; 1 bytes @ 0x2
  1088                           
  1089  0072                     _isdigit$1025:	
  1090                           ; 1 bytes @ 0x2
  1091                           
  1092  0072                     ___wmul@multiplier:	
  1093                           ; 1 bytes @ 0x2
  1094                           
  1095  0072                     ___awmod@divisor:	
  1096                           ; 2 bytes @ 0x2
  1097                           
  1098  0072                     ___lwmod@divisor:	
  1099                           ; 2 bytes @ 0x2
  1100                           
  1101  0072                     __div_to_l_@f1:	
  1102                           ; 2 bytes @ 0x2
  1103                           
  1104  0072                     ___ftpack@arg:	
  1105                           ; 3 bytes @ 0x2
  1106                           
  1107  0072                     __tdiv_to_l_@f1:	
  1108                           ; 3 bytes @ 0x2
  1109                           
  1110  0072                     ___ftge@ff1:	
  1111                           ; 3 bytes @ 0x2
  1112                           
  1113  0072                     ___ftneg@f1:	
  1114                           ; 3 bytes @ 0x2
  1115                           
  1116  0072                     ___lldiv@divisor:	
  1117                           ; 3 bytes @ 0x2
  1118                           
  1119                           
  1120                           ; 4 bytes @ 0x2
  1121  0072                     	ds	1
  1122  0073                     ??_SPI_CONT:
  1123  0073                     ??_SPI_ADC:	
  1124                           ; 1 bytes @ 0x3
  1125                           
  1126  0073                     ??_SPI_TEMP:	
  1127                           ; 1 bytes @ 0x3
  1128                           
  1129  0073                     ?_Write_USART_String:	
  1130                           ; 1 bytes @ 0x3
  1131                           
  1132  0073                     ??_Lcd_Cmd:	
  1133                           ; 1 bytes @ 0x3
  1134                           
  1135  0073                     ??_Lcd_Write_Char:	
  1136                           ; 1 bytes @ 0x3
  1137                           
  1138  0073                     spiInit@sClockIdle:	
  1139                           ; 1 bytes @ 0x3
  1140                           
  1141  0073                     isdigit@c:	
  1142                           ; 1 bytes @ 0x3
  1143                           
  1144  0073                     Write_USART_String@a:	
  1145                           ; 1 bytes @ 0x3
  1146                           
  1147                           
  1148                           ; 2 bytes @ 0x3
  1149  0073                     	ds	1
  1150  0074                     initOsc@IRCF:
  1151  0074                     Lcd_Write_Char@a:	
  1152                           ; 1 bytes @ 0x4
  1153                           
  1154  0074                     spiInit@sTransmitEdge:	
  1155                           ; 1 bytes @ 0x4
  1156                           
  1157  0074                     ___wmul@multiplicand:	
  1158                           ; 1 bytes @ 0x4
  1159                           
  1160  0074                     ___awmod@dividend:	
  1161                           ; 2 bytes @ 0x4
  1162                           
  1163  0074                     ___lwmod@dividend:	
  1164                           ; 2 bytes @ 0x4
  1165                           
  1166                           
  1167                           ; 2 bytes @ 0x4
  1168  0074                     	ds	1
  1169  0075                     ?_Lcd_Write_String:
  1170  0075                     ??_Write_USART_String:	
  1171                           ; 1 bytes @ 0x5
  1172                           
  1173  0075                     ??_spiInit:	
  1174                           ; 1 bytes @ 0x5
  1175                           
  1176  0075                     ??___ftneg:	
  1177                           ; 1 bytes @ 0x5
  1178                           
  1179  0075                     Lcd_Cmd@a:	
  1180                           ; 1 bytes @ 0x5
  1181                           
  1182  0075                     spiInit@sType:	
  1183                           ; 1 bytes @ 0x5
  1184                           
  1185  0075                     ___ftpack@exp:	
  1186                           ; 1 bytes @ 0x5
  1187                           
  1188  0075                     Lcd_Write_String@a:	
  1189                           ; 1 bytes @ 0x5
  1190                           
  1191  0075                     __div_to_l_@f2:	
  1192                           ; 2 bytes @ 0x5
  1193                           
  1194  0075                     __tdiv_to_l_@f2:	
  1195                           ; 3 bytes @ 0x5
  1196                           
  1197  0075                     ___ftge@ff2:	
  1198                           ; 3 bytes @ 0x5
  1199                           
  1200                           
  1201                           ; 3 bytes @ 0x5
  1202  0075                     	ds	1
  1203  0076                     ??_setup:
  1204  0076                     ??_Lcd_Init:	
  1205                           ; 1 bytes @ 0x6
  1206                           
  1207  0076                     ??_Lcd_Clear:	
  1208                           ; 1 bytes @ 0x6
  1209                           
  1210  0076                     ?_Lcd_Set_Cursor:	
  1211                           ; 1 bytes @ 0x6
  1212                           
  1213  0076                     ??___wmul:	
  1214                           ; 1 bytes @ 0x6
  1215                           
  1216  0076                     ??___awmod:	
  1217                           ; 1 bytes @ 0x6
  1218                           
  1219  0076                     ??___lwmod:	
  1220                           ; 1 bytes @ 0x6
  1221                           
  1222  0076                     Lcd_Set_Cursor@b:	
  1223                           ; 1 bytes @ 0x6
  1224                           
  1225  0076                     Write_USART_String@i:	
  1226                           ; 1 bytes @ 0x6
  1227                           
  1228  0076                     ___ftpack@sign:	
  1229                           ; 1 bytes @ 0x6
  1230                           
  1231  0076                     ___wmul@product:	
  1232                           ; 1 bytes @ 0x6
  1233                           
  1234  0076                     ___lldiv@dividend:	
  1235                           ; 2 bytes @ 0x6
  1236                           
  1237                           
  1238                           ; 4 bytes @ 0x6
  1239  0076                     	ds	1
  1240  0077                     ??_Lcd_Set_Cursor:
  1241  0077                     ??_Lcd_Write_String:	
  1242                           ; 1 bytes @ 0x7
  1243                           
  1244  0077                     ??___ftpack:	
  1245                           ; 1 bytes @ 0x7
  1246                           
  1247  0077                     ___awmod@counter:	
  1248                           ; 1 bytes @ 0x7
  1249                           
  1250  0077                     ___lwmod@counter:	
  1251                           ; 1 bytes @ 0x7
  1252                           
  1253                           
  1254                           ; 1 bytes @ 0x7
  1255  0077                     	ds	1
  1256  0078                     ??___ftge:
  1257  0078                     ??___lwdiv:	
  1258                           ; 1 bytes @ 0x8
  1259                           
  1260  0078                     Lcd_Set_Cursor@a:	
  1261                           ; 1 bytes @ 0x8
  1262                           
  1263  0078                     ___awmod@sign:	
  1264                           ; 1 bytes @ 0x8
  1265                           
  1266                           
  1267                           ; 1 bytes @ 0x8
  1268  0078                     	ds	1
  1269  0079                     ??___awdiv:
  1270  0079                     Lcd_Set_Cursor@temp:	
  1271                           ; 1 bytes @ 0x9
  1272                           
  1273                           
  1274                           ; 1 bytes @ 0x9
  1275  0079                     	ds	1
  1276  007A                     ??___ftsub:
  1277                           
  1278                           	psect	cstackBANK0
  1279  0020                     __pcstackBANK0:	
  1280                           ; 1 bytes @ 0xA
  1281                           
  1282  0020                     ??__tdiv_to_l_:
  1283  0020                     ??__div_to_l_:	
  1284                           ; 1 bytes @ 0x0
  1285                           
  1286  0020                     ??___lldiv:	
  1287                           ; 1 bytes @ 0x0
  1288                           
  1289  0020                     ?___awdiv:	
  1290                           ; 1 bytes @ 0x0
  1291                           
  1292  0020                     ?___lwdiv:	
  1293                           ; 2 bytes @ 0x0
  1294                           
  1295  0020                     ?___awtoft:	
  1296                           ; 2 bytes @ 0x0
  1297                           
  1298  0020                     ?___lltoft:	
  1299                           ; 3 bytes @ 0x0
  1300                           
  1301  0020                     Lcd_Write_String@i:	
  1302                           ; 3 bytes @ 0x0
  1303                           
  1304  0020                     ___awdiv@divisor:	
  1305                           ; 2 bytes @ 0x0
  1306                           
  1307  0020                     ___awtoft@c:	
  1308                           ; 2 bytes @ 0x0
  1309                           
  1310  0020                     ___lwdiv@divisor:	
  1311                           ; 2 bytes @ 0x0
  1312                           
  1313  0020                     ___lltoft@c:	
  1314                           ; 2 bytes @ 0x0
  1315                           
  1316                           
  1317                           ; 4 bytes @ 0x0
  1318  0020                     	ds	1
  1319  0021                     ___lldiv@quotient:
  1320                           
  1321                           ; 4 bytes @ 0x1
  1322  0021                     	ds	1
  1323  0022                     ??_Show_val_LCD:
  1324  0022                     ___awdiv@dividend:	
  1325                           ; 1 bytes @ 0x2
  1326                           
  1327  0022                     ___lwdiv@dividend:	
  1328                           ; 2 bytes @ 0x2
  1329                           
  1330                           
  1331                           ; 2 bytes @ 0x2
  1332  0022                     	ds	1
  1333  0023                     ??___awtoft:
  1334                           
  1335                           ; 1 bytes @ 0x3
  1336  0023                     	ds	1
  1337  0024                     ??___lltoft:
  1338  0024                     ___awdiv@counter:	
  1339                           ; 1 bytes @ 0x4
  1340                           
  1341  0024                     ___lwdiv@counter:	
  1342                           ; 1 bytes @ 0x4
  1343                           
  1344  0024                     __tdiv_to_l_@quot:	
  1345                           ; 1 bytes @ 0x4
  1346                           
  1347                           
  1348                           ; 4 bytes @ 0x4
  1349  0024                     	ds	1
  1350  0025                     ___lldiv@counter:
  1351  0025                     ___awdiv@sign:	
  1352                           ; 1 bytes @ 0x5
  1353                           
  1354  0025                     ___awtoft@sign:	
  1355                           ; 1 bytes @ 0x5
  1356                           
  1357  0025                     ___lltoft@exp:	
  1358                           ; 1 bytes @ 0x5
  1359                           
  1360  0025                     ___lwdiv@quotient:	
  1361                           ; 1 bytes @ 0x5
  1362                           
  1363                           
  1364                           ; 2 bytes @ 0x5
  1365  0025                     	ds	1
  1366  0026                     ?___llmod:
  1367  0026                     ___awdiv@quotient:	
  1368                           ; 4 bytes @ 0x6
  1369                           
  1370  0026                     ___llmod@divisor:	
  1371                           ; 2 bytes @ 0x6
  1372                           
  1373                           
  1374                           ; 4 bytes @ 0x6
  1375  0026                     	ds	2
  1376  0028                     ?___bmul:
  1377  0028                     ___bmul@multiplicand:	
  1378                           ; 1 bytes @ 0x8
  1379                           
  1380  0028                     __tdiv_to_l_@cntr:	
  1381                           ; 1 bytes @ 0x8
  1382                           
  1383  0028                     __div_to_l_@quot:	
  1384                           ; 1 bytes @ 0x8
  1385                           
  1386                           
  1387                           ; 4 bytes @ 0x8
  1388  0028                     	ds	1
  1389  0029                     ??___bmul:
  1390  0029                     __tdiv_to_l_@exp1:	
  1391                           ; 1 bytes @ 0x9
  1392                           
  1393                           
  1394                           ; 1 bytes @ 0x9
  1395  0029                     	ds	1
  1396  002A                     ___bmul@product:
  1397  002A                     ___llmod@dividend:	
  1398                           ; 1 bytes @ 0xA
  1399                           
  1400                           
  1401                           ; 4 bytes @ 0xA
  1402  002A                     	ds	1
  1403  002B                     ___bmul@multiplier:
  1404                           
  1405                           ; 1 bytes @ 0xB
  1406  002B                     	ds	1
  1407  002C                     ?___ftmul:
  1408  002C                     __div_to_l_@cntr:	
  1409                           ; 3 bytes @ 0xC
  1410                           
  1411  002C                     ___ftmul@f1:	
  1412                           ; 1 bytes @ 0xC
  1413                           
  1414                           
  1415                           ; 3 bytes @ 0xC
  1416  002C                     	ds	1
  1417  002D                     __div_to_l_@exp1:
  1418                           
  1419                           ; 1 bytes @ 0xD
  1420  002D                     	ds	1
  1421  002E                     ??___llmod:
  1422                           
  1423                           ; 1 bytes @ 0xE
  1424  002E                     	ds	1
  1425  002F                     ___llmod@counter:
  1426  002F                     ___ftmul@f2:	
  1427                           ; 1 bytes @ 0xF
  1428                           
  1429                           
  1430                           ; 3 bytes @ 0xF
  1431  002F                     	ds	3
  1432  0032                     ??___ftmul:
  1433                           
  1434                           ; 1 bytes @ 0x12
  1435  0032                     	ds	4
  1436  0036                     ___ftmul@exp:
  1437                           
  1438                           ; 1 bytes @ 0x16
  1439  0036                     	ds	1
  1440  0037                     ___ftmul@f3_as_product:
  1441                           
  1442                           ; 3 bytes @ 0x17
  1443  0037                     	ds	3
  1444  003A                     ___ftmul@cntr:
  1445                           
  1446                           ; 1 bytes @ 0x1A
  1447  003A                     	ds	1
  1448  003B                     ___ftmul@sign:
  1449                           
  1450                           ; 1 bytes @ 0x1B
  1451  003B                     	ds	1
  1452  003C                     ?_fround:
  1453  003C                     ?_scale:	
  1454                           ; 3 bytes @ 0x1C
  1455                           
  1456  003C                     ?___ftdiv:	
  1457                           ; 3 bytes @ 0x1C
  1458                           
  1459  003C                     ___ftdiv@f2:	
  1460                           ; 3 bytes @ 0x1C
  1461                           
  1462                           
  1463                           ; 3 bytes @ 0x1C
  1464  003C                     	ds	3
  1465  003F                     ??_fround:
  1466  003F                     ??_scale:	
  1467                           ; 1 bytes @ 0x1F
  1468                           
  1469  003F                     ___ftdiv@f1:	
  1470                           ; 1 bytes @ 0x1F
  1471                           
  1472                           
  1473                           ; 3 bytes @ 0x1F
  1474  003F                     	ds	2
  1475  0041                     _scale$1230:
  1476                           
  1477                           ; 3 bytes @ 0x21
  1478  0041                     	ds	1
  1479  0042                     ??___ftdiv:
  1480                           
  1481                           ; 1 bytes @ 0x22
  1482  0042                     	ds	2
  1483  0044                     scale@scl:
  1484                           
  1485                           ; 1 bytes @ 0x24
  1486  0044                     	ds	1
  1487  0045                     ?___fttol:
  1488  0045                     ___fttol@f1:	
  1489                           ; 4 bytes @ 0x25
  1490                           
  1491  0045                     _fround$1229:	
  1492                           ; 3 bytes @ 0x25
  1493                           
  1494                           
  1495                           ; 3 bytes @ 0x25
  1496  0045                     	ds	1
  1497  0046                     ___ftdiv@cntr:
  1498                           
  1499                           ; 1 bytes @ 0x26
  1500  0046                     	ds	1
  1501  0047                     ___ftdiv@f3:
  1502                           
  1503                           ; 3 bytes @ 0x27
  1504  0047                     	ds	1
  1505  0048                     _fround$1228:
  1506                           
  1507                           ; 3 bytes @ 0x28
  1508  0048                     	ds	1
  1509  0049                     ??___fttol:
  1510                           
  1511                           ; 1 bytes @ 0x29
  1512  0049                     	ds	1
  1513  004A                     ___ftdiv@exp:
  1514                           
  1515                           ; 1 bytes @ 0x2A
  1516  004A                     	ds	1
  1517  004B                     fround@prec:
  1518  004B                     ___ftdiv@sign:	
  1519                           ; 1 bytes @ 0x2B
  1520                           
  1521                           
  1522                           ; 1 bytes @ 0x2B
  1523  004B                     	ds	1
  1524  004C                     ?___ftadd:
  1525  004C                     ___ftadd@f1:	
  1526                           ; 3 bytes @ 0x2C
  1527                           
  1528                           
  1529                           ; 3 bytes @ 0x2C
  1530  004C                     	ds	1
  1531  004D                     ___fttol@sign1:
  1532                           
  1533                           ; 1 bytes @ 0x2D
  1534  004D                     	ds	1
  1535  004E                     ___fttol@lval:
  1536                           
  1537                           ; 4 bytes @ 0x2E
  1538  004E                     	ds	1
  1539  004F                     ___ftadd@f2:
  1540                           
  1541                           ; 3 bytes @ 0x2F
  1542  004F                     	ds	3
  1543  0052                     ??___ftadd:
  1544  0052                     ___fttol@exp1:	
  1545                           ; 1 bytes @ 0x32
  1546                           
  1547                           
  1548                           ; 1 bytes @ 0x32
  1549  0052                     	ds	4
  1550  0056                     ___ftadd@sign:
  1551                           
  1552                           ; 1 bytes @ 0x36
  1553  0056                     	ds	1
  1554  0057                     ___ftadd@exp2:
  1555                           
  1556                           ; 1 bytes @ 0x37
  1557  0057                     	ds	1
  1558  0058                     ___ftadd@exp1:
  1559                           
  1560                           ; 1 bytes @ 0x38
  1561  0058                     	ds	1
  1562  0059                     ?___ftsub:
  1563  0059                     ___ftsub@f2:	
  1564                           ; 3 bytes @ 0x39
  1565                           
  1566                           
  1567                           ; 3 bytes @ 0x39
  1568  0059                     	ds	3
  1569  005C                     ___ftsub@f1:
  1570                           
  1571                           ; 3 bytes @ 0x3C
  1572  005C                     	ds	3
  1573  005F                     ?_sprintf:
  1574  005F                     sprintf@f:	
  1575                           ; 2 bytes @ 0x3F
  1576                           
  1577                           
  1578                           ; 1 bytes @ 0x3F
  1579  005F                     	ds	4
  1580  0063                     ??_sprintf:
  1581                           
  1582                           ; 1 bytes @ 0x43
  1583  0063                     	ds	6
  1584  0069                     ??_ADC_to_string:
  1585                           
  1586                           ; 1 bytes @ 0x49
  1587  0069                     	ds	3
  1588  006C                     ??_main:
  1589                           
  1590                           ; 1 bytes @ 0x4C
  1591  006C                     	ds	2
  1592                           
  1593                           	psect	maintext
  1594  06D6                     __pmaintext:	
  1595 ;;
  1596 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1597 ;;
  1598 ;; *************** function _main *****************
  1599 ;; Defined at:
  1600 ;;		line 93 in file "main_maestro.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : B00/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1614 ;;      Params:         0       0       0       0       0
  1615 ;;      Locals:         0       0       0       0       0
  1616 ;;      Temps:          0       2       0       0       0
  1617 ;;      Totals:         0       2       0       0       0
  1618 ;;Total ram usage:        2 bytes
  1619 ;; Hardware stack levels required when called:    6
  1620 ;; This function calls:
  1621 ;;		_ADC_to_string
  1622 ;;		_Lcd_Clear
  1623 ;;		_Lcd_Init
  1624 ;;		_Lcd_Set_Cursor
  1625 ;;		_Lcd_Write_String
  1626 ;;		_SPI_ADC
  1627 ;;		_SPI_CONT
  1628 ;;		_SPI_TEMP
  1629 ;;		_Show_val_LCD
  1630 ;;		_Write_USART
  1631 ;;		_Write_USART_String
  1632 ;;		___awdiv
  1633 ;;		___awtoft
  1634 ;;		___ftdiv
  1635 ;;		___ftmul
  1636 ;;		___wmul
  1637 ;;		_setup
  1638 ;; This function is called by:
  1639 ;;		Startup code after reset
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           
  1644                           ;psect for function _main
  1645  06D6                     _main:
  1646  06D6                     l4266:	
  1647                           ;incstack = 0
  1648                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1649                           
  1650                           
  1651                           ;main_maestro.c: 94:     setup();
  1652  06D6  160A  158A  2651  120A  118A  	fcall	_setup
  1653  06DB                     l4268:
  1654                           
  1655                           ;main_maestro.c: 95:     PORTB = 0;
  1656  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  1657  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  1658  06DD  0186               	clrf	6	;volatile
  1659  06DE                     l4270:
  1660                           
  1661                           ;main_maestro.c: 96:     cont = 0;
  1662  06DE  01EE               	clrf	_cont
  1663  06DF                     l4272:
  1664                           
  1665                           ;main_maestro.c: 98:     Lcd_Init();
  1666  06DF  160A  158A  2764  120A  118A  	fcall	_Lcd_Init
  1667  06E4                     l4274:
  1668                           
  1669                           ;main_maestro.c: 99:     Lcd_Clear();
  1670  06E4  160A  158A  2422  120A  118A  	fcall	_Lcd_Clear
  1671  06E9                     l4276:
  1672                           
  1673                           ;main_maestro.c: 100:     Lcd_Set_Cursor(1,1);
  1674  06E9  01F6               	clrf	Lcd_Set_Cursor@b
  1675  06EA  0AF6               	incf	Lcd_Set_Cursor@b,f
  1676  06EB  3001               	movlw	1
  1677  06EC  160A  158A  2471  120A  118A  	fcall	_Lcd_Set_Cursor
  1678  06F1                     l4278:
  1679                           
  1680                           ;main_maestro.c: 101:     Lcd_Write_String("CONT  ADC   TEMP");
  1681  06F1  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1682  06F2  00F5               	movwf	Lcd_Write_String@a
  1683  06F3  3080               	movlw	128
  1684  06F4  00F6               	movwf	Lcd_Write_String@a+1
  1685  06F5  160A  158A  26D4  120A  118A  	fcall	_Lcd_Write_String
  1686  06FA                     l4280:
  1687                           
  1688                           ;main_maestro.c: 108:         SPI_CONT();
  1689  06FA  160A  158A  25A9  120A  118A  	fcall	_SPI_CONT
  1690  06FF                     l4282:
  1691                           
  1692                           ;main_maestro.c: 109:         SPI_ADC();
  1693  06FF  160A  158A  2541  120A  118A  	fcall	_SPI_ADC
  1694  0704                     l4284:
  1695                           
  1696                           ;main_maestro.c: 110:         SPI_TEMP();
  1697  0704  160A  158A  2575  120A  118A  	fcall	_SPI_TEMP
  1698  0709                     l4286:
  1699                           
  1700                           ;main_maestro.c: 112:         PORTB = val_ADC;
  1701  0709  087B               	movf	_val_ADC,w
  1702  070A  1283               	bcf	3,5	;RP0=0, select bank0
  1703  070B  1303               	bcf	3,6	;RP1=0, select bank0
  1704  070C  0086               	movwf	6	;volatile
  1705  070D                     l4288:
  1706                           
  1707                           ;main_maestro.c: 113:         ADC_val_M = ((val_ADC * 5.0) / 255);
  1708  070D  3000               	movlw	0
  1709  070E  00BC               	movwf	___ftdiv@f2
  1710  070F  307F               	movlw	127
  1711  0710  00BD               	movwf	___ftdiv@f2+1
  1712  0711  3043               	movlw	67
  1713  0712  00BE               	movwf	___ftdiv@f2+2
  1714  0713  3000               	movlw	0
  1715  0714  00AC               	movwf	___ftmul@f1
  1716  0715  30A0               	movlw	160
  1717  0716  00AD               	movwf	___ftmul@f1+1
  1718  0717  3040               	movlw	64
  1719  0718  00AE               	movwf	___ftmul@f1+2
  1720  0719  087B               	movf	_val_ADC,w
  1721  071A  00EC               	movwf	??_main
  1722  071B  01ED               	clrf	??_main+1
  1723  071C  086C               	movf	??_main,w
  1724  071D  00A0               	movwf	___awtoft@c
  1725  071E  086D               	movf	??_main+1,w
  1726  071F  00A1               	movwf	___awtoft@c+1
  1727  0720  160A  158A  24BA  120A  118A  	fcall	___awtoft
  1728  0725  1283               	bcf	3,5	;RP0=0, select bank0
  1729  0726  1303               	bcf	3,6	;RP1=0, select bank0
  1730  0727  0820               	movf	?___awtoft,w
  1731  0728  00AF               	movwf	___ftmul@f2
  1732  0729  0821               	movf	?___awtoft+1,w
  1733  072A  00B0               	movwf	___ftmul@f2+1
  1734  072B  0822               	movf	?___awtoft+2,w
  1735  072C  00B1               	movwf	___ftmul@f2+2
  1736  072D  160A  118A  24B9  120A  118A  	fcall	___ftmul
  1737  0732  1283               	bcf	3,5	;RP0=0, select bank0
  1738  0733  1303               	bcf	3,6	;RP1=0, select bank0
  1739  0734  082C               	movf	?___ftmul,w
  1740  0735  00BF               	movwf	___ftdiv@f1
  1741  0736  082D               	movf	?___ftmul+1,w
  1742  0737  00C0               	movwf	___ftdiv@f1+1
  1743  0738  082E               	movf	?___ftmul+2,w
  1744  0739  00C1               	movwf	___ftdiv@f1+2
  1745  073A  160A  118A  23F7  120A  118A  	fcall	___ftdiv
  1746  073F  1283               	bcf	3,5	;RP0=0, select bank0
  1747  0740  1303               	bcf	3,6	;RP1=0, select bank0
  1748  0741  083C               	movf	?___ftdiv,w
  1749  0742  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0743  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0744  00B4               	movwf	_ADC_val_M^(0+128)
  1752  0745  1283               	bcf	3,5	;RP0=0, select bank0
  1753  0746  1303               	bcf	3,6	;RP1=0, select bank0
  1754  0747  083D               	movf	?___ftdiv+1,w
  1755  0748  1683               	bsf	3,5	;RP0=1, select bank1
  1756  0749  1303               	bcf	3,6	;RP1=0, select bank1
  1757  074A  00B5               	movwf	(_ADC_val_M+1)^(0+128)
  1758  074B  1283               	bcf	3,5	;RP0=0, select bank0
  1759  074C  1303               	bcf	3,6	;RP1=0, select bank0
  1760  074D  083E               	movf	?___ftdiv+2,w
  1761  074E  1683               	bsf	3,5	;RP0=1, select bank1
  1762  074F  1303               	bcf	3,6	;RP1=0, select bank1
  1763  0750  00B6               	movwf	(_ADC_val_M+2)^(0+128)
  1764  0751                     l4290:
  1765                           
  1766                           ;main_maestro.c: 114:         mv_temp_val_M = ((val_TEMP * 150) / 255);
  1767  0751  30FF               	movlw	255
  1768  0752  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0753  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0754  00A0               	movwf	___awdiv@divisor
  1771  0755  3000               	movlw	0
  1772  0756  00A1               	movwf	___awdiv@divisor+1
  1773  0757  087A               	movf	_val_TEMP,w
  1774  0758  00EC               	movwf	??_main
  1775  0759  01ED               	clrf	??_main+1
  1776  075A  086C               	movf	??_main,w
  1777  075B  00F2               	movwf	___wmul@multiplier
  1778  075C  086D               	movf	??_main+1,w
  1779  075D  00F3               	movwf	___wmul@multiplier+1
  1780  075E  3096               	movlw	150
  1781  075F  00F4               	movwf	___wmul@multiplicand
  1782  0760  3000               	movlw	0
  1783  0761  00F5               	movwf	___wmul@multiplicand+1
  1784  0762  120A  158A  2003  120A  118A  	fcall	___wmul
  1785  0767  0873               	movf	?___wmul+1,w
  1786  0768  1283               	bcf	3,5	;RP0=0, select bank0
  1787  0769  1303               	bcf	3,6	;RP1=0, select bank0
  1788  076A  00A3               	movwf	___awdiv@dividend+1
  1789  076B  0872               	movf	?___wmul,w
  1790  076C  00A2               	movwf	___awdiv@dividend
  1791  076D  160A  118A  2255  120A  118A  	fcall	___awdiv
  1792  0772  1283               	bcf	3,5	;RP0=0, select bank0
  1793  0773  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0774  0821               	movf	?___awdiv+1,w
  1795  0775  1683               	bsf	3,5	;RP0=1, select bank1
  1796  0776  1303               	bcf	3,6	;RP1=0, select bank1
  1797  0777  00B8               	movwf	(_mv_temp_val_M+1)^(0+128)
  1798  0778  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0779  1303               	bcf	3,6	;RP1=0, select bank0
  1800  077A  0820               	movf	?___awdiv,w
  1801  077B  1683               	bsf	3,5	;RP0=1, select bank1
  1802  077C  1303               	bcf	3,6	;RP1=0, select bank1
  1803  077D  00B7               	movwf	_mv_temp_val_M^(0+128)
  1804  077E                     l4292:
  1805                           
  1806                           ;main_maestro.c: 117:         ADC_to_string();
  1807  077E  160A  158A  271A  120A  118A  	fcall	_ADC_to_string
  1808  0783                     l4294:
  1809                           
  1810                           ;main_maestro.c: 118:         Write_USART_String("CONT:  \n");
  1811  0783  3091               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1812  0784  00F3               	movwf	Write_USART_String@a
  1813  0785  3080               	movlw	128
  1814  0786  00F4               	movwf	Write_USART_String@a+1
  1815  0787  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1816  078C                     l4296:
  1817                           
  1818                           ;main_maestro.c: 119:         Write_USART_String(data_cont);
  1819  078C  30C9               	movlw	(low (_data_cont| 0))& (0+255)
  1820  078D  00F3               	movwf	Write_USART_String@a
  1821  078E  3000               	movlw	0
  1822  078F  00F4               	movwf	Write_USART_String@a+1
  1823  0790  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1824  0795                     l4298:
  1825                           
  1826                           ;main_maestro.c: 120:         Write_USART_String("  \n");
  1827  0795  309E               	movlw	(low (((STR_4+4)-__stringbase)| (0+32768)))& (0+255)
  1828  0796  00F3               	movwf	Write_USART_String@a
  1829  0797  3080               	movlw	128
  1830  0798  00F4               	movwf	Write_USART_String@a+1
  1831  0799  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1832  079E                     l4300:
  1833                           
  1834                           ;main_maestro.c: 121:         Write_USART_String("ADC:  \n");
  1835  079E  309A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1836  079F  00F3               	movwf	Write_USART_String@a
  1837  07A0  3080               	movlw	128
  1838  07A1  00F4               	movwf	Write_USART_String@a+1
  1839  07A2  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1840  07A7                     l4302:
  1841                           
  1842                           ;main_maestro.c: 122:         Write_USART_String(data_ADC);
  1843  07A7  30C1               	movlw	(low (_data_ADC| 0))& (0+255)
  1844  07A8  00F3               	movwf	Write_USART_String@a
  1845  07A9  3000               	movlw	0
  1846  07AA  00F4               	movwf	Write_USART_String@a+1
  1847  07AB  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1848  07B0                     l4304:
  1849                           
  1850                           ;main_maestro.c: 123:         Write_USART_String("  \n");
  1851  07B0  309E               	movlw	(low (((STR_4+4)-__stringbase)| (0+32768)))& (0+255)
  1852  07B1  00F3               	movwf	Write_USART_String@a
  1853  07B2  3080               	movlw	128
  1854  07B3  00F4               	movwf	Write_USART_String@a+1
  1855  07B4  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1856  07B9                     l4306:
  1857                           
  1858                           ;main_maestro.c: 124:         Write_USART_String("TEMP:  \n");
  1859  07B9  3088               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1860  07BA  00F3               	movwf	Write_USART_String@a
  1861  07BB  3080               	movlw	128
  1862  07BC  00F4               	movwf	Write_USART_String@a+1
  1863  07BD  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1864  07C2                     l4308:
  1865                           
  1866                           ;main_maestro.c: 125:         Write_USART_String(data_TEMP);
  1867  07C2  30B9               	movlw	(low (_data_TEMP| 0))& (0+255)
  1868  07C3  00F3               	movwf	Write_USART_String@a
  1869  07C4  3000               	movlw	0
  1870  07C5  00F4               	movwf	Write_USART_String@a+1
  1871  07C6  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1872  07CB                     l4310:
  1873                           
  1874                           ;main_maestro.c: 126:         Write_USART_String("°C  \n");
  1875  07CB  30A9               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1876  07CC  00F3               	movwf	Write_USART_String@a
  1877  07CD  3080               	movlw	128
  1878  07CE  00F4               	movwf	Write_USART_String@a+1
  1879  07CF  160A  158A  24E3  120A  118A  	fcall	_Write_USART_String
  1880  07D4                     l4312:
  1881                           
  1882                           ;main_maestro.c: 127:         Write_USART(13);
  1883  07D4  300D               	movlw	13
  1884  07D5  160A  158A  2416  120A  118A  	fcall	_Write_USART
  1885  07DA                     l4314:
  1886                           
  1887                           ;main_maestro.c: 128:         Write_USART(10);
  1888  07DA  300A               	movlw	10
  1889  07DB  160A  158A  2416  120A  118A  	fcall	_Write_USART
  1890  07E0                     l4316:
  1891                           
  1892                           ;main_maestro.c: 130:         Show_val_LCD();
  1893  07E0  160A  158A  27AF  120A  118A  	fcall	_Show_val_LCD
  1894  07E5  2EFA               	goto	l4280
  1895  07E6  120A  118A  280C   	ljmp	start
  1896  07E9                     __end_of_main:
  1897                           
  1898                           	psect	text1
  1899  1E51                     __ptext1:	
  1900 ;; *************** function _setup *****************
  1901 ;; Defined at:
  1902 ;;		line 140 in file "main_maestro.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1916 ;;      Params:         0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    2
  1923 ;; This function calls:
  1924 ;;		_USART_Init
  1925 ;;		_USART_Init_BaudRate
  1926 ;;		_initOsc
  1927 ;;		_spiInit
  1928 ;; This function is called by:
  1929 ;;		_main
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           
  1934                           ;psect for function _setup
  1935  1E51                     _setup:
  1936  1E51                     l3232:	
  1937                           ;incstack = 0
  1938                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1939                           
  1940                           
  1941                           ;main_maestro.c: 141:     initOsc(0b00000111);
  1942  1E51  3007               	movlw	7
  1943  1E52  160A  118A  2191  160A  158A  	fcall	_initOsc
  1944  1E57                     l3234:
  1945                           
  1946                           ;main_maestro.c: 142:     ANSEL = 0;
  1947  1E57  1683               	bsf	3,5	;RP0=1, select bank3
  1948  1E58  1703               	bsf	3,6	;RP1=1, select bank3
  1949  1E59  0188               	clrf	8	;volatile
  1950  1E5A                     l3236:
  1951                           
  1952                           ;main_maestro.c: 143:     ANSELH = 0;
  1953  1E5A  0189               	clrf	9	;volatile
  1954  1E5B                     l3238:
  1955                           
  1956                           ;main_maestro.c: 145:     TRISA = 0;
  1957  1E5B  1683               	bsf	3,5	;RP0=1, select bank1
  1958  1E5C  1303               	bcf	3,6	;RP1=0, select bank1
  1959  1E5D  0185               	clrf	5	;volatile
  1960  1E5E                     l3240:
  1961                           
  1962                           ;main_maestro.c: 146:     TRISB = 0;
  1963  1E5E  0186               	clrf	6	;volatile
  1964  1E5F                     l3242:
  1965                           
  1966                           ;main_maestro.c: 150:     TRISD = 0;
  1967  1E5F  0188               	clrf	8	;volatile
  1968  1E60                     l3244:
  1969                           
  1970                           ;main_maestro.c: 151:     TRISE = 0;
  1971  1E60  0189               	clrf	9	;volatile
  1972  1E61                     l3246:
  1973                           
  1974                           ;main_maestro.c: 153:     PORTA = 0;
  1975  1E61  1283               	bcf	3,5	;RP0=0, select bank0
  1976  1E62  1303               	bcf	3,6	;RP1=0, select bank0
  1977  1E63  0185               	clrf	5	;volatile
  1978  1E64                     l3248:
  1979                           
  1980                           ;main_maestro.c: 154:     PORTB = 0;
  1981  1E64  0186               	clrf	6	;volatile
  1982  1E65                     l3250:
  1983                           
  1984                           ;main_maestro.c: 155:     PORTC = 0;
  1985  1E65  0187               	clrf	7	;volatile
  1986  1E66                     l3252:
  1987                           
  1988                           ;main_maestro.c: 156:     PORTD = 0;
  1989  1E66  0188               	clrf	8	;volatile
  1990  1E67                     l3254:
  1991                           
  1992                           ;main_maestro.c: 157:     PORTE = 0;
  1993  1E67  0189               	clrf	9	;volatile
  1994  1E68                     l3256:
  1995                           
  1996                           ;main_maestro.c: 160:     TRISC0 = 0;
  1997  1E68  1683               	bsf	3,5	;RP0=1, select bank1
  1998  1E69  1303               	bcf	3,6	;RP1=0, select bank1
  1999  1E6A  1007               	bcf	7,0	;volatile
  2000  1E6B                     l3258:
  2001                           
  2002                           ;main_maestro.c: 161:     PORTCbits.RC0 = 1;
  2003  1E6B  1283               	bcf	3,5	;RP0=0, select bank0
  2004  1E6C  1303               	bcf	3,6	;RP1=0, select bank0
  2005  1E6D  1407               	bsf	7,0	;volatile
  2006  1E6E                     l3260:
  2007                           
  2008                           ;main_maestro.c: 162:     TRISC1 = 0;
  2009  1E6E  1683               	bsf	3,5	;RP0=1, select bank1
  2010  1E6F  1303               	bcf	3,6	;RP1=0, select bank1
  2011  1E70  1087               	bcf	7,1	;volatile
  2012  1E71                     l3262:
  2013                           
  2014                           ;main_maestro.c: 163:     PORTCbits.RC1 = 1;
  2015  1E71  1283               	bcf	3,5	;RP0=0, select bank0
  2016  1E72  1303               	bcf	3,6	;RP1=0, select bank0
  2017  1E73  1487               	bsf	7,1	;volatile
  2018  1E74                     l3264:
  2019                           
  2020                           ;main_maestro.c: 164:     TRISC2 = 0;
  2021  1E74  1683               	bsf	3,5	;RP0=1, select bank1
  2022  1E75  1303               	bcf	3,6	;RP1=0, select bank1
  2023  1E76  1107               	bcf	7,2	;volatile
  2024  1E77                     l3266:
  2025                           
  2026                           ;main_maestro.c: 165:     PORTCbits.RC2 = 1;
  2027  1E77  1283               	bcf	3,5	;RP0=0, select bank0
  2028  1E78  1303               	bcf	3,6	;RP1=0, select bank0
  2029  1E79  1507               	bsf	7,2	;volatile
  2030  1E7A                     l3268:
  2031                           
  2032                           ;main_maestro.c: 168:     USART_Init_BaudRate();
  2033  1E7A  160A  158A  23DF  160A  158A  	fcall	_USART_Init_BaudRate
  2034  1E7F                     l3270:
  2035                           
  2036                           ;main_maestro.c: 169:     USART_Init();
  2037  1E7F  160A  158A  23F3  160A  158A  	fcall	_USART_Init
  2038  1E84                     l3272:
  2039                           
  2040                           ;main_maestro.c: 171:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  2041  1E84  01F2               	clrf	spiInit@sDataSample
  2042  1E85  01F3               	clrf	spiInit@sClockIdle
  2043  1E86  01F4               	clrf	spiInit@sTransmitEdge
  2044  1E87  3020               	movlw	32
  2045  1E88  160A  118A  20CC  160A  158A  	fcall	_spiInit
  2046  1E8D                     l112:
  2047  1E8D  0008               	return
  2048  1E8E                     __end_of_setup:
  2049                           
  2050                           	psect	text2
  2051  10CC                     __ptext2:	
  2052 ;; *************** function _spiInit *****************
  2053 ;; Defined at:
  2054 ;;		line 14 in file "SPI.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  sType           1    wreg     enum E1264
  2057 ;;  sDataSample     1    2[COMMON] enum E1272
  2058 ;;  sClockIdle      1    3[COMMON] enum E1276
  2059 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  sType           1    5[COMMON] enum E1264
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      void 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2071 ;;      Params:         3       0       0       0       0
  2072 ;;      Locals:         1       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0
  2074 ;;      Totals:         4       0       0       0       0
  2075 ;;Total ram usage:        4 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    1
  2078 ;; This function calls:
  2079 ;;		Nothing
  2080 ;; This function is called by:
  2081 ;;		_setup
  2082 ;; This function uses a non-reentrant model
  2083 ;;
  2084                           
  2085                           
  2086                           ;psect for function _spiInit
  2087  10CC                     _spiInit:
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2091                           ;spiInit@sType stored from wreg
  2092  10CC  00F5               	movwf	spiInit@sType
  2093  10CD                     l2922:
  2094                           
  2095                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  2096  10CD  1683               	bsf	3,5	;RP0=1, select bank1
  2097  10CE  1303               	bcf	3,6	;RP1=0, select bank1
  2098  10CF  1287               	bcf	7,5	;volatile
  2099                           
  2100                           ;SPI.c: 17:     if(sType & 0b00000100)
  2101  10D0  1D75               	btfss	spiInit@sType,2
  2102  10D1  28D3               	goto	u3851
  2103  10D2  28D4               	goto	u3850
  2104  10D3                     u3851:
  2105  10D3  28D8               	goto	l2928
  2106  10D4                     u3850:
  2107  10D4                     l2924:
  2108                           
  2109                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  2110  10D4  0874               	movf	spiInit@sTransmitEdge,w
  2111  10D5  0094               	movwf	20	;volatile
  2112  10D6                     l2926:
  2113                           
  2114                           ;SPI.c: 20:         TRISC3 = 1;
  2115  10D6  1587               	bsf	7,3	;volatile
  2116                           
  2117                           ;SPI.c: 21:     }
  2118  10D7  28DC               	goto	l249
  2119  10D8                     l2928:
  2120                           
  2121                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  2122  10D8  0872               	movf	spiInit@sDataSample,w
  2123  10D9  0474               	iorwf	spiInit@sTransmitEdge,w
  2124  10DA  0094               	movwf	20	;volatile
  2125  10DB                     l2930:
  2126                           
  2127                           ;SPI.c: 25:         TRISC3 = 0;
  2128  10DB  1187               	bcf	7,3	;volatile
  2129  10DC                     l249:	
  2130                           ;SPI.c: 26:     }
  2131                           
  2132                           
  2133                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  2134  10DC  0875               	movf	spiInit@sType,w
  2135  10DD  0473               	iorwf	spiInit@sClockIdle,w
  2136  10DE  1283               	bcf	3,5	;RP0=0, select bank0
  2137  10DF  1303               	bcf	3,6	;RP1=0, select bank0
  2138  10E0  0094               	movwf	20	;volatile
  2139  10E1                     l250:
  2140  10E1  0008               	return
  2141  10E2                     __end_of_spiInit:
  2142                           
  2143                           	psect	text3
  2144  1191                     __ptext3:	
  2145 ;; *************** function _initOsc *****************
  2146 ;; Defined at:
  2147 ;;		line 3 in file "Oscilador.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  IRCF            1    wreg     unsigned char 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  IRCF            1    4[COMMON] unsigned char 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2161 ;;      Params:         0       0       0       0       0
  2162 ;;      Locals:         1       0       0       0       0
  2163 ;;      Temps:          2       0       0       0       0
  2164 ;;      Totals:         3       0       0       0       0
  2165 ;;Total ram usage:        3 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    1
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		_setup
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           
  2176                           ;psect for function _initOsc
  2177  1191                     _initOsc:
  2178                           
  2179                           ;incstack = 0
  2180                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  2181                           ;initOsc@IRCF stored from wreg
  2182  1191  00F4               	movwf	initOsc@IRCF
  2183  1192                     l2906:
  2184                           
  2185                           ;Oscilador.c: 5:     switch(IRCF){
  2186  1192  29C9               	goto	l2910
  2187  1193                     l133:	
  2188                           ;Oscilador.c: 6:         case 0:
  2189                           
  2190                           
  2191                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  2192  1193  1683               	bsf	3,5	;RP0=1, select bank1
  2193  1194  1303               	bcf	3,6	;RP1=0, select bank1
  2194  1195  130F               	bcf	15,6	;volatile
  2195                           
  2196                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  2197  1196  128F               	bcf	15,5	;volatile
  2198                           
  2199                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  2200  1197  120F               	bcf	15,4	;volatile
  2201                           
  2202                           ;Oscilador.c: 10:             break;
  2203  1198  29EB               	goto	l134
  2204  1199                     l135:	
  2205                           ;Oscilador.c: 11:          case 1:
  2206                           
  2207                           
  2208                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  2209  1199  1683               	bsf	3,5	;RP0=1, select bank1
  2210  119A  1303               	bcf	3,6	;RP1=0, select bank1
  2211  119B  130F               	bcf	15,6	;volatile
  2212                           
  2213                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  2214  119C  128F               	bcf	15,5	;volatile
  2215                           
  2216                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  2217  119D  160F               	bsf	15,4	;volatile
  2218                           
  2219                           ;Oscilador.c: 15:             break;
  2220  119E  29EB               	goto	l134
  2221  119F                     l136:	
  2222                           ;Oscilador.c: 16:         case 2:
  2223                           
  2224                           
  2225                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  2226  119F  1683               	bsf	3,5	;RP0=1, select bank1
  2227  11A0  1303               	bcf	3,6	;RP1=0, select bank1
  2228  11A1  130F               	bcf	15,6	;volatile
  2229                           
  2230                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  2231  11A2  168F               	bsf	15,5	;volatile
  2232                           
  2233                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  2234  11A3  120F               	bcf	15,4	;volatile
  2235                           
  2236                           ;Oscilador.c: 20:             break;
  2237  11A4  29EB               	goto	l134
  2238  11A5                     l137:	
  2239                           ;Oscilador.c: 21:         case 3:
  2240                           
  2241                           
  2242                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  2243  11A5  1683               	bsf	3,5	;RP0=1, select bank1
  2244  11A6  1303               	bcf	3,6	;RP1=0, select bank1
  2245  11A7  130F               	bcf	15,6	;volatile
  2246                           
  2247                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  2248  11A8  168F               	bsf	15,5	;volatile
  2249                           
  2250                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  2251  11A9  160F               	bsf	15,4	;volatile
  2252                           
  2253                           ;Oscilador.c: 25:             break;
  2254  11AA  29EB               	goto	l134
  2255  11AB                     l138:	
  2256                           ;Oscilador.c: 26:         case 4:
  2257                           
  2258                           
  2259                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  2260  11AB  1683               	bsf	3,5	;RP0=1, select bank1
  2261  11AC  1303               	bcf	3,6	;RP1=0, select bank1
  2262  11AD  170F               	bsf	15,6	;volatile
  2263                           
  2264                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  2265  11AE  128F               	bcf	15,5	;volatile
  2266                           
  2267                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  2268  11AF  120F               	bcf	15,4	;volatile
  2269                           
  2270                           ;Oscilador.c: 30:             break;
  2271  11B0  29EB               	goto	l134
  2272  11B1                     l139:	
  2273                           ;Oscilador.c: 31:         case 5:
  2274                           
  2275                           
  2276                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  2277  11B1  1683               	bsf	3,5	;RP0=1, select bank1
  2278  11B2  1303               	bcf	3,6	;RP1=0, select bank1
  2279  11B3  170F               	bsf	15,6	;volatile
  2280                           
  2281                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  2282  11B4  128F               	bcf	15,5	;volatile
  2283                           
  2284                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  2285  11B5  160F               	bsf	15,4	;volatile
  2286                           
  2287                           ;Oscilador.c: 35:             break;
  2288  11B6  29EB               	goto	l134
  2289  11B7                     l140:	
  2290                           ;Oscilador.c: 36:         case 6:
  2291                           
  2292                           
  2293                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  2294  11B7  1683               	bsf	3,5	;RP0=1, select bank1
  2295  11B8  1303               	bcf	3,6	;RP1=0, select bank1
  2296  11B9  170F               	bsf	15,6	;volatile
  2297                           
  2298                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  2299  11BA  168F               	bsf	15,5	;volatile
  2300                           
  2301                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  2302  11BB  120F               	bcf	15,4	;volatile
  2303                           
  2304                           ;Oscilador.c: 40:             break;
  2305  11BC  29EB               	goto	l134
  2306  11BD                     l141:	
  2307                           ;Oscilador.c: 41:         case 7:
  2308                           
  2309                           
  2310                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  2311  11BD  1683               	bsf	3,5	;RP0=1, select bank1
  2312  11BE  1303               	bcf	3,6	;RP1=0, select bank1
  2313  11BF  170F               	bsf	15,6	;volatile
  2314                           
  2315                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  2316  11C0  168F               	bsf	15,5	;volatile
  2317                           
  2318                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  2319  11C1  160F               	bsf	15,4	;volatile
  2320                           
  2321                           ;Oscilador.c: 45:             break;
  2322  11C2  29EB               	goto	l134
  2323  11C3                     l142:	
  2324                           ;Oscilador.c: 46:         default:
  2325                           
  2326                           
  2327                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  2328  11C3  1683               	bsf	3,5	;RP0=1, select bank1
  2329  11C4  1303               	bcf	3,6	;RP1=0, select bank1
  2330  11C5  170F               	bsf	15,6	;volatile
  2331                           
  2332                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  2333  11C6  168F               	bsf	15,5	;volatile
  2334                           
  2335                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  2336  11C7  120F               	bcf	15,4	;volatile
  2337                           
  2338                           ;Oscilador.c: 50:             break;
  2339  11C8  29EB               	goto	l134
  2340  11C9                     l2910:
  2341  11C9  0874               	movf	initOsc@IRCF,w
  2342  11CA  00F2               	movwf	??_initOsc
  2343  11CB  01F3               	clrf	??_initOsc+1
  2344                           
  2345                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2346                           ; Switch size 1, requested type "simple"
  2347                           ; Number of cases is 1, Range of values is 0 to 0
  2348                           ; switch strategies available:
  2349                           ; Name         Instructions Cycles
  2350                           ; simple_byte            4     3 (average)
  2351                           ; direct_byte           11     8 (fixed)
  2352                           ; jumptable            260     6 (fixed)
  2353                           ;	Chosen strategy is simple_byte
  2354  11CC  0873               	movf	??_initOsc+1,w
  2355  11CD  3A00               	xorlw	0	; case 0
  2356  11CE  1903               	skipnz
  2357  11CF  29D1               	goto	l4372
  2358  11D0  29C3               	goto	l142
  2359  11D1                     l4372:
  2360                           
  2361                           ; Switch size 1, requested type "simple"
  2362                           ; Number of cases is 8, Range of values is 0 to 7
  2363                           ; switch strategies available:
  2364                           ; Name         Instructions Cycles
  2365                           ; simple_byte           25    13 (average)
  2366                           ; direct_byte           32     8 (fixed)
  2367                           ; jumptable            260     6 (fixed)
  2368                           ;	Chosen strategy is simple_byte
  2369  11D1  0872               	movf	??_initOsc,w
  2370  11D2  3A00               	xorlw	0	; case 0
  2371  11D3  1903               	skipnz
  2372  11D4  2993               	goto	l133
  2373  11D5  3A01               	xorlw	1	; case 1
  2374  11D6  1903               	skipnz
  2375  11D7  2999               	goto	l135
  2376  11D8  3A03               	xorlw	3	; case 2
  2377  11D9  1903               	skipnz
  2378  11DA  299F               	goto	l136
  2379  11DB  3A01               	xorlw	1	; case 3
  2380  11DC  1903               	skipnz
  2381  11DD  29A5               	goto	l137
  2382  11DE  3A07               	xorlw	7	; case 4
  2383  11DF  1903               	skipnz
  2384  11E0  29AB               	goto	l138
  2385  11E1  3A01               	xorlw	1	; case 5
  2386  11E2  1903               	skipnz
  2387  11E3  29B1               	goto	l139
  2388  11E4  3A03               	xorlw	3	; case 6
  2389  11E5  1903               	skipnz
  2390  11E6  29B7               	goto	l140
  2391  11E7  3A01               	xorlw	1	; case 7
  2392  11E8  1903               	skipnz
  2393  11E9  29BD               	goto	l141
  2394  11EA  29C3               	goto	l142
  2395  11EB                     l134:
  2396                           
  2397                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  2398  11EB  140F               	bsf	15,0	;volatile
  2399  11EC                     l143:
  2400  11EC  0008               	return
  2401  11ED                     __end_of_initOsc:
  2402                           
  2403                           	psect	text4
  2404  1BDF                     __ptext4:	
  2405 ;; *************** function _USART_Init_BaudRate *****************
  2406 ;; Defined at:
  2407 ;;		line 19 in file "USART.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;		None
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;		None
  2412 ;; Return value:  Size  Location     Type
  2413 ;;                  1    wreg      void 
  2414 ;; Registers used:
  2415 ;;		wreg, status,2
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2421 ;;      Params:         0       0       0       0       0
  2422 ;;      Locals:         0       0       0       0       0
  2423 ;;      Temps:          0       0       0       0       0
  2424 ;;      Totals:         0       0       0       0       0
  2425 ;;Total ram usage:        0 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    1
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_setup
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           
  2436                           ;psect for function _USART_Init_BaudRate
  2437  1BDF                     _USART_Init_BaudRate:
  2438  1BDF                     l2916:	
  2439                           ;incstack = 0
  2440                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  2441                           
  2442                           
  2443                           ;USART.c: 20:     SPBRGH = 0;
  2444  1BDF  1683               	bsf	3,5	;RP0=1, select bank1
  2445  1BE0  1303               	bcf	3,6	;RP1=0, select bank1
  2446  1BE1  019A               	clrf	26	;volatile
  2447  1BE2                     l2918:
  2448                           
  2449                           ;USART.c: 21:     SPBRG = 12;
  2450  1BE2  300C               	movlw	12
  2451  1BE3  0099               	movwf	25	;volatile
  2452  1BE4                     l212:
  2453  1BE4  0008               	return
  2454  1BE5                     __end_of_USART_Init_BaudRate:
  2455                           
  2456                           	psect	text5
  2457  1BF3                     __ptext5:	
  2458 ;; *************** function _USART_Init *****************
  2459 ;; Defined at:
  2460 ;;		line 8 in file "USART.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		None
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2474 ;;      Params:         0       0       0       0       0
  2475 ;;      Locals:         0       0       0       0       0
  2476 ;;      Temps:          0       0       0       0       0
  2477 ;;      Totals:         0       0       0       0       0
  2478 ;;Total ram usage:        0 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    1
  2481 ;; This function calls:
  2482 ;;		Nothing
  2483 ;; This function is called by:
  2484 ;;		_setup
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _USART_Init
  2490  1BF3                     _USART_Init:
  2491  1BF3                     l2920:	
  2492                           ;incstack = 0
  2493                           ; Regs used in _USART_Init: []
  2494                           
  2495                           
  2496                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  2497  1BF3  1283               	bcf	3,5	;RP0=0, select bank0
  2498  1BF4  1303               	bcf	3,6	;RP1=0, select bank0
  2499  1BF5  1798               	bsf	24,7	;volatile
  2500                           
  2501                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  2502  1BF6  1683               	bsf	3,5	;RP0=1, select bank1
  2503  1BF7  1303               	bcf	3,6	;RP1=0, select bank1
  2504  1BF8  1218               	bcf	24,4	;volatile
  2505                           
  2506                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  2507  1BF9  1698               	bsf	24,5	;volatile
  2508  1BFA                     l209:
  2509  1BFA  0008               	return
  2510  1BFB                     __end_of_USART_Init:
  2511                           
  2512                           	psect	text6
  2513  13F7                     __ptext6:	
  2514 ;; *************** function ___ftdiv *****************
  2515 ;; Defined at:
  2516 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftdiv.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  f2              3   28[BANK0 ] float 
  2519 ;;  f1              3   31[BANK0 ] float 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  f3              3   39[BANK0 ] float 
  2522 ;;  sign            1   43[BANK0 ] unsigned char 
  2523 ;;  exp             1   42[BANK0 ] unsigned char 
  2524 ;;  cntr            1   38[BANK0 ] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  3   28[BANK0 ] float 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, pclath, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2534 ;;      Params:         0       6       0       0       0
  2535 ;;      Locals:         0       6       0       0       0
  2536 ;;      Temps:          0       4       0       0       0
  2537 ;;      Totals:         0      16       0       0       0
  2538 ;;Total ram usage:       16 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    2
  2541 ;; This function calls:
  2542 ;;		___ftpack
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           
  2549                           ;psect for function ___ftdiv
  2550  13F7                     ___ftdiv:
  2551  13F7                     l4224:	
  2552                           ;incstack = 0
  2553                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2554                           
  2555  13F7  1283               	bcf	3,5	;RP0=0, select bank0
  2556  13F8  1303               	bcf	3,6	;RP1=0, select bank0
  2557  13F9  083F               	movf	___ftdiv@f1,w
  2558  13FA  00C2               	movwf	??___ftdiv
  2559  13FB  0840               	movf	___ftdiv@f1+1,w
  2560  13FC  00C3               	movwf	??___ftdiv+1
  2561  13FD  0841               	movf	___ftdiv@f1+2,w
  2562  13FE  00C4               	movwf	??___ftdiv+2
  2563  13FF  1003               	clrc
  2564  1400  0D43               	rlf	??___ftdiv+1,w
  2565  1401  0D44               	rlf	??___ftdiv+2,w
  2566  1402  00C5               	movwf	??___ftdiv+3
  2567  1403  0845               	movf	??___ftdiv+3,w
  2568  1404  00CA               	movwf	___ftdiv@exp
  2569  1405  084A               	movf	___ftdiv@exp,w
  2570  1406  1D03               	btfss	3,2
  2571  1407  2C09               	goto	u6031
  2572  1408  2C0A               	goto	u6030
  2573  1409                     u6031:
  2574  1409  2C11               	goto	l4230
  2575  140A                     u6030:
  2576  140A                     l4226:
  2577  140A  3000               	movlw	0
  2578  140B  00BC               	movwf	?___ftdiv
  2579  140C  3000               	movlw	0
  2580  140D  00BD               	movwf	?___ftdiv+1
  2581  140E  3000               	movlw	0
  2582  140F  00BE               	movwf	?___ftdiv+2
  2583  1410  2CB8               	goto	l749
  2584  1411                     l4230:
  2585  1411  083C               	movf	___ftdiv@f2,w
  2586  1412  00C2               	movwf	??___ftdiv
  2587  1413  083D               	movf	___ftdiv@f2+1,w
  2588  1414  00C3               	movwf	??___ftdiv+1
  2589  1415  083E               	movf	___ftdiv@f2+2,w
  2590  1416  00C4               	movwf	??___ftdiv+2
  2591  1417  1003               	clrc
  2592  1418  0D43               	rlf	??___ftdiv+1,w
  2593  1419  0D44               	rlf	??___ftdiv+2,w
  2594  141A  00C5               	movwf	??___ftdiv+3
  2595  141B  0845               	movf	??___ftdiv+3,w
  2596  141C  00CB               	movwf	___ftdiv@sign
  2597  141D  084B               	movf	___ftdiv@sign,w
  2598  141E  1D03               	btfss	3,2
  2599  141F  2C21               	goto	u6041
  2600  1420  2C22               	goto	u6040
  2601  1421                     u6041:
  2602  1421  2C29               	goto	l4236
  2603  1422                     u6040:
  2604  1422                     l4232:
  2605  1422  3000               	movlw	0
  2606  1423  00BC               	movwf	?___ftdiv
  2607  1424  3000               	movlw	0
  2608  1425  00BD               	movwf	?___ftdiv+1
  2609  1426  3000               	movlw	0
  2610  1427  00BE               	movwf	?___ftdiv+2
  2611  1428  2CB8               	goto	l749
  2612  1429                     l4236:
  2613  1429  3000               	movlw	0
  2614  142A  00C7               	movwf	___ftdiv@f3
  2615  142B  3000               	movlw	0
  2616  142C  00C8               	movwf	___ftdiv@f3+1
  2617  142D  3000               	movlw	0
  2618  142E  00C9               	movwf	___ftdiv@f3+2
  2619  142F                     l4238:
  2620  142F  3089               	movlw	137
  2621  1430  074B               	addwf	___ftdiv@sign,w
  2622  1431  00C2               	movwf	??___ftdiv
  2623  1432  0842               	movf	??___ftdiv,w
  2624  1433  02CA               	subwf	___ftdiv@exp,f
  2625  1434                     l4240:
  2626  1434  083F               	movf	___ftdiv@f1,w
  2627  1435  00C2               	movwf	??___ftdiv
  2628  1436  0840               	movf	___ftdiv@f1+1,w
  2629  1437  00C3               	movwf	??___ftdiv+1
  2630  1438  0841               	movf	___ftdiv@f1+2,w
  2631  1439  00C4               	movwf	??___ftdiv+2
  2632  143A  3010               	movlw	16
  2633  143B                     u6055:
  2634  143B  1003               	clrc
  2635  143C  0CC4               	rrf	??___ftdiv+2,f
  2636  143D  0CC3               	rrf	??___ftdiv+1,f
  2637  143E  0CC2               	rrf	??___ftdiv,f
  2638  143F                     u6050:
  2639  143F  3EFF               	addlw	-1
  2640  1440  1D03               	skipz
  2641  1441  2C3B               	goto	u6055
  2642  1442  0842               	movf	??___ftdiv,w
  2643  1443  00C5               	movwf	??___ftdiv+3
  2644  1444  0845               	movf	??___ftdiv+3,w
  2645  1445  00CB               	movwf	___ftdiv@sign
  2646  1446                     l4242:
  2647  1446  083C               	movf	___ftdiv@f2,w
  2648  1447  00C2               	movwf	??___ftdiv
  2649  1448  083D               	movf	___ftdiv@f2+1,w
  2650  1449  00C3               	movwf	??___ftdiv+1
  2651  144A  083E               	movf	___ftdiv@f2+2,w
  2652  144B  00C4               	movwf	??___ftdiv+2
  2653  144C  3010               	movlw	16
  2654  144D                     u6065:
  2655  144D  1003               	clrc
  2656  144E  0CC4               	rrf	??___ftdiv+2,f
  2657  144F  0CC3               	rrf	??___ftdiv+1,f
  2658  1450  0CC2               	rrf	??___ftdiv,f
  2659  1451                     u6060:
  2660  1451  3EFF               	addlw	-1
  2661  1452  1D03               	skipz
  2662  1453  2C4D               	goto	u6065
  2663  1454  0842               	movf	??___ftdiv,w
  2664  1455  00C5               	movwf	??___ftdiv+3
  2665  1456  0845               	movf	??___ftdiv+3,w
  2666  1457  06CB               	xorwf	___ftdiv@sign,f
  2667  1458                     l4244:
  2668  1458  3080               	movlw	128
  2669  1459  00C2               	movwf	??___ftdiv
  2670  145A  0842               	movf	??___ftdiv,w
  2671  145B  05CB               	andwf	___ftdiv@sign,f
  2672  145C                     l4246:
  2673  145C  17C0               	bsf	___ftdiv@f1+1,7
  2674  145D  30FF               	movlw	255
  2675  145E  05BF               	andwf	___ftdiv@f1,f
  2676  145F  30FF               	movlw	255
  2677  1460  05C0               	andwf	___ftdiv@f1+1,f
  2678  1461  3000               	movlw	0
  2679  1462  05C1               	andwf	___ftdiv@f1+2,f
  2680  1463                     l4248:
  2681  1463  17BD               	bsf	___ftdiv@f2+1,7
  2682  1464  30FF               	movlw	255
  2683  1465  05BC               	andwf	___ftdiv@f2,f
  2684  1466  30FF               	movlw	255
  2685  1467  05BD               	andwf	___ftdiv@f2+1,f
  2686  1468  3000               	movlw	0
  2687  1469  05BE               	andwf	___ftdiv@f2+2,f
  2688  146A  3018               	movlw	24
  2689  146B  00C2               	movwf	??___ftdiv
  2690  146C  0842               	movf	??___ftdiv,w
  2691  146D  00C6               	movwf	___ftdiv@cntr
  2692  146E                     l4250:
  2693  146E  3001               	movlw	1
  2694  146F                     u6075:
  2695  146F  1003               	clrc
  2696  1470  0DC7               	rlf	___ftdiv@f3,f
  2697  1471  0DC8               	rlf	___ftdiv@f3+1,f
  2698  1472  0DC9               	rlf	___ftdiv@f3+2,f
  2699  1473  3EFF               	addlw	-1
  2700  1474  1D03               	skipz
  2701  1475  2C6F               	goto	u6075
  2702  1476                     l4252:
  2703  1476  083E               	movf	___ftdiv@f2+2,w
  2704  1477  0241               	subwf	___ftdiv@f1+2,w
  2705  1478  1D03               	skipz
  2706  1479  2C80               	goto	u6085
  2707  147A  083D               	movf	___ftdiv@f2+1,w
  2708  147B  0240               	subwf	___ftdiv@f1+1,w
  2709  147C  1D03               	skipz
  2710  147D  2C80               	goto	u6085
  2711  147E  083C               	movf	___ftdiv@f2,w
  2712  147F  023F               	subwf	___ftdiv@f1,w
  2713  1480                     u6085:
  2714  1480  1C03               	skipc
  2715  1481  2C83               	goto	u6081
  2716  1482  2C84               	goto	u6080
  2717  1483                     u6081:
  2718  1483  2C8F               	goto	l4258
  2719  1484                     u6080:
  2720  1484                     l4254:
  2721  1484  083C               	movf	___ftdiv@f2,w
  2722  1485  02BF               	subwf	___ftdiv@f1,f
  2723  1486  083D               	movf	___ftdiv@f2+1,w
  2724  1487  1C03               	skipc
  2725  1488  0F3D               	incfsz	___ftdiv@f2+1,w
  2726  1489  02C0               	subwf	___ftdiv@f1+1,f
  2727  148A  083E               	movf	___ftdiv@f2+2,w
  2728  148B  1C03               	skipc
  2729  148C  0A3E               	incf	___ftdiv@f2+2,w
  2730  148D  02C1               	subwf	___ftdiv@f1+2,f
  2731  148E                     l4256:
  2732  148E  1447               	bsf	___ftdiv@f3,0
  2733  148F                     l4258:
  2734  148F  3001               	movlw	1
  2735  1490                     u6095:
  2736  1490  1003               	clrc
  2737  1491  0DBF               	rlf	___ftdiv@f1,f
  2738  1492  0DC0               	rlf	___ftdiv@f1+1,f
  2739  1493  0DC1               	rlf	___ftdiv@f1+2,f
  2740  1494  3EFF               	addlw	-1
  2741  1495  1D03               	skipz
  2742  1496  2C90               	goto	u6095
  2743  1497                     l4260:
  2744  1497  3001               	movlw	1
  2745  1498  02C6               	subwf	___ftdiv@cntr,f
  2746  1499  1D03               	btfss	3,2
  2747  149A  2C9C               	goto	u6101
  2748  149B  2C9D               	goto	u6100
  2749  149C                     u6101:
  2750  149C  2C6E               	goto	l4250
  2751  149D                     u6100:
  2752  149D                     l4262:
  2753  149D  0847               	movf	___ftdiv@f3,w
  2754  149E  00F2               	movwf	___ftpack@arg
  2755  149F  0848               	movf	___ftdiv@f3+1,w
  2756  14A0  00F3               	movwf	___ftpack@arg+1
  2757  14A1  0849               	movf	___ftdiv@f3+2,w
  2758  14A2  00F4               	movwf	___ftpack@arg+2
  2759  14A3  084A               	movf	___ftdiv@exp,w
  2760  14A4  00C2               	movwf	??___ftdiv
  2761  14A5  0842               	movf	??___ftdiv,w
  2762  14A6  00F5               	movwf	___ftpack@exp
  2763  14A7  084B               	movf	___ftdiv@sign,w
  2764  14A8  00C3               	movwf	??___ftdiv+1
  2765  14A9  0843               	movf	??___ftdiv+1,w
  2766  14AA  00F6               	movwf	___ftpack@sign
  2767  14AB  160A  118A  22BE  160A  118A  	fcall	___ftpack
  2768  14B0  0872               	movf	?___ftpack,w
  2769  14B1  1283               	bcf	3,5	;RP0=0, select bank0
  2770  14B2  1303               	bcf	3,6	;RP1=0, select bank0
  2771  14B3  00BC               	movwf	?___ftdiv
  2772  14B4  0873               	movf	?___ftpack+1,w
  2773  14B5  00BD               	movwf	?___ftdiv+1
  2774  14B6  0874               	movf	?___ftpack+2,w
  2775  14B7  00BE               	movwf	?___ftdiv+2
  2776  14B8                     l749:
  2777  14B8  0008               	return
  2778  14B9                     __end_of___ftdiv:
  2779                           
  2780                           	psect	text7
  2781  1CBA                     __ptext7:	
  2782 ;; *************** function ___awtoft *****************
  2783 ;; Defined at:
  2784 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awtoft.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;  c               2    0[BANK0 ] int 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  sign            1    5[BANK0 ] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  3    0[BANK0 ] float 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0, pclath, cstack
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2798 ;;      Params:         0       3       0       0       0
  2799 ;;      Locals:         0       1       0       0       0
  2800 ;;      Temps:          0       2       0       0       0
  2801 ;;      Totals:         0       6       0       0       0
  2802 ;;Total ram usage:        6 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    2
  2805 ;; This function calls:
  2806 ;;		___ftpack
  2807 ;; This function is called by:
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           
  2813                           ;psect for function ___awtoft
  2814  1CBA                     ___awtoft:
  2815  1CBA                     l4212:	
  2816                           ;incstack = 0
  2817                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  2818                           
  2819  1CBA  1283               	bcf	3,5	;RP0=0, select bank0
  2820  1CBB  1303               	bcf	3,6	;RP1=0, select bank0
  2821  1CBC  01A5               	clrf	___awtoft@sign
  2822  1CBD                     l4214:
  2823  1CBD  1FA1               	btfss	___awtoft@c+1,7
  2824  1CBE  2CC0               	goto	u6021
  2825  1CBF  2CC1               	goto	u6020
  2826  1CC0                     u6021:
  2827  1CC0  2CC8               	goto	l4220
  2828  1CC1                     u6020:
  2829  1CC1                     l4216:
  2830  1CC1  09A0               	comf	___awtoft@c,f
  2831  1CC2  09A1               	comf	___awtoft@c+1,f
  2832  1CC3  0AA0               	incf	___awtoft@c,f
  2833  1CC4  1903               	skipnz
  2834  1CC5  0AA1               	incf	___awtoft@c+1,f
  2835  1CC6                     l4218:
  2836  1CC6  01A5               	clrf	___awtoft@sign
  2837  1CC7  0AA5               	incf	___awtoft@sign,f
  2838  1CC8                     l4220:
  2839  1CC8  0820               	movf	___awtoft@c,w
  2840  1CC9  00F2               	movwf	___ftpack@arg
  2841  1CCA  0821               	movf	___awtoft@c+1,w
  2842  1CCB  00F3               	movwf	___ftpack@arg+1
  2843  1CCC  01F4               	clrf	___ftpack@arg+2
  2844  1CCD  308E               	movlw	142
  2845  1CCE  00A3               	movwf	??___awtoft
  2846  1CCF  0823               	movf	??___awtoft,w
  2847  1CD0  00F5               	movwf	___ftpack@exp
  2848  1CD1  0825               	movf	___awtoft@sign,w
  2849  1CD2  00A4               	movwf	??___awtoft+1
  2850  1CD3  0824               	movf	??___awtoft+1,w
  2851  1CD4  00F6               	movwf	___ftpack@sign
  2852  1CD5  160A  118A  22BE  160A  158A  	fcall	___ftpack
  2853  1CDA  0872               	movf	?___ftpack,w
  2854  1CDB  1283               	bcf	3,5	;RP0=0, select bank0
  2855  1CDC  1303               	bcf	3,6	;RP1=0, select bank0
  2856  1CDD  00A0               	movwf	?___awtoft
  2857  1CDE  0873               	movf	?___ftpack+1,w
  2858  1CDF  00A1               	movwf	?___awtoft+1
  2859  1CE0  0874               	movf	?___ftpack+2,w
  2860  1CE1  00A2               	movwf	?___awtoft+2
  2861  1CE2                     l674:
  2862  1CE2  0008               	return
  2863  1CE3                     __end_of___awtoft:
  2864                           
  2865                           	psect	text8
  2866  1CE3                     __ptext8:	
  2867 ;; *************** function _Write_USART_String *****************
  2868 ;; Defined at:
  2869 ;;		line 37 in file "USART.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  a               2    3[COMMON] PTR unsigned char 
  2872 ;;		 -> STR_7(6), data_TEMP(8), STR_6(9), STR_5(4), 
  2873 ;;		 -> data_ADC(8), STR_4(8), STR_3(4), data_cont(8), 
  2874 ;;		 -> STR_2(9), 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  i               1    6[COMMON] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2886 ;;      Params:         2       0       0       0       0
  2887 ;;      Locals:         1       0       0       0       0
  2888 ;;      Temps:          1       0       0       0       0
  2889 ;;      Totals:         4       0       0       0       0
  2890 ;;Total ram usage:        4 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    2
  2893 ;; This function calls:
  2894 ;;		_Write_USART
  2895 ;; This function is called by:
  2896 ;;		_main
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           
  2901                           ;psect for function _Write_USART_String
  2902  1CE3                     _Write_USART_String:
  2903  1CE3                     l3318:	
  2904                           ;incstack = 0
  2905                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2906                           
  2907                           
  2908                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  2909  1CE3  01F6               	clrf	Write_USART_String@i
  2910  1CE4  2CFA               	goto	l3324
  2911  1CE5                     l3320:
  2912                           
  2913                           ;USART.c: 40:         Write_USART(a[i]);
  2914  1CE5  0876               	movf	Write_USART_String@i,w
  2915  1CE6  0773               	addwf	Write_USART_String@a,w
  2916  1CE7  0084               	movwf	4
  2917  1CE8  0874               	movf	Write_USART_String@a+1,w
  2918  1CE9  1803               	skipnc
  2919  1CEA  0A74               	incf	Write_USART_String@a+1,w
  2920  1CEB  00FF               	movwf	btemp+1
  2921  1CEC  160A  118A  2000  160A  158A  	fcall	stringtab
  2922  1CF1  160A  158A  2416  160A  158A  	fcall	_Write_USART
  2923  1CF6                     l3322:
  2924                           
  2925                           ;USART.c: 41:     }
  2926  1CF6  3001               	movlw	1
  2927  1CF7  00F5               	movwf	??_Write_USART_String
  2928  1CF8  0875               	movf	??_Write_USART_String,w
  2929  1CF9  07F6               	addwf	Write_USART_String@i,f
  2930  1CFA                     l3324:
  2931  1CFA  0876               	movf	Write_USART_String@i,w
  2932  1CFB  0773               	addwf	Write_USART_String@a,w
  2933  1CFC  0084               	movwf	4
  2934  1CFD  0874               	movf	Write_USART_String@a+1,w
  2935  1CFE  1803               	skipnc
  2936  1CFF  0A74               	incf	Write_USART_String@a+1,w
  2937  1D00  1283               	bcf	3,5	;RP0=0, select bank0
  2938  1D01  1303               	bcf	3,6	;RP1=0, select bank0
  2939  1D02  00FF               	movwf	btemp+1
  2940  1D03  160A  118A  2000  160A  158A  	fcall	stringtab
  2941  1D08  3A00               	xorlw	0
  2942  1D09  1D03               	skipz
  2943  1D0A  2D0C               	goto	u4401
  2944  1D0B  2D0D               	goto	u4400
  2945  1D0C                     u4401:
  2946  1D0C  2CE5               	goto	l3320
  2947  1D0D                     u4400:
  2948  1D0D                     l227:
  2949  1D0D  0008               	return
  2950  1D0E                     __end_of_Write_USART_String:
  2951                           
  2952                           	psect	text9
  2953  1C16                     __ptext9:	
  2954 ;; *************** function _Write_USART *****************
  2955 ;; Defined at:
  2956 ;;		line 33 in file "USART.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  a               1    wreg     unsigned char 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  a               1    2[COMMON] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2970 ;;      Params:         0       0       0       0       0
  2971 ;;      Locals:         1       0       0       0       0
  2972 ;;      Temps:          0       0       0       0       0
  2973 ;;      Totals:         1       0       0       0       0
  2974 ;;Total ram usage:        1 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    1
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_main
  2981 ;;		_Write_USART_String
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _Write_USART
  2987  1C16                     _Write_USART:
  2988                           
  2989                           ;incstack = 0
  2990                           ; Regs used in _Write_USART: [wreg]
  2991                           ;Write_USART@a stored from wreg
  2992  1C16  00F2               	movwf	Write_USART@a
  2993  1C17                     l2902:
  2994  1C17                     l218:	
  2995                           ;USART.c: 34:     while(!TRMT);
  2996                           
  2997  1C17  1683               	bsf	3,5	;RP0=1, select bank1
  2998  1C18  1303               	bcf	3,6	;RP1=0, select bank1
  2999  1C19  1C98               	btfss	24,1	;volatile
  3000  1C1A  2C1C               	goto	u3841
  3001  1C1B  2C1D               	goto	u3840
  3002  1C1C                     u3841:
  3003  1C1C  2C17               	goto	l218
  3004  1C1D                     u3840:
  3005  1C1D                     l2904:
  3006                           
  3007                           ;USART.c: 35:     TXREG=a;
  3008  1C1D  0872               	movf	Write_USART@a,w
  3009  1C1E  1283               	bcf	3,5	;RP0=0, select bank0
  3010  1C1F  1303               	bcf	3,6	;RP1=0, select bank0
  3011  1C20  0099               	movwf	25	;volatile
  3012  1C21                     l221:
  3013  1C21  0008               	return
  3014  1C22                     __end_of_Write_USART:
  3015                           
  3016                           	psect	text10
  3017  1FAF                     __ptext10:	
  3018 ;; *************** function _Show_val_LCD *****************
  3019 ;; Defined at:
  3020 ;;		line 189 in file "main_maestro.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3034 ;;      Params:         0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0
  3036 ;;      Temps:          0       1       0       0       0
  3037 ;;      Totals:         0       1       0       0       0
  3038 ;;Total ram usage:        1 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:    4
  3041 ;; This function calls:
  3042 ;;		_Lcd_Set_Cursor
  3043 ;;		_Lcd_Write_String
  3044 ;; This function is called by:
  3045 ;;		_main
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           
  3050                           ;psect for function _Show_val_LCD
  3051  1FAF                     _Show_val_LCD:
  3052  1FAF                     l4200:	
  3053                           ;incstack = 0
  3054                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3055                           
  3056                           
  3057                           ;main_maestro.c: 192:     Lcd_Set_Cursor(2,1);
  3058  1FAF  01F6               	clrf	Lcd_Set_Cursor@b
  3059  1FB0  0AF6               	incf	Lcd_Set_Cursor@b,f
  3060  1FB1  3002               	movlw	2
  3061  1FB2  160A  158A  2471  160A  158A  	fcall	_Lcd_Set_Cursor
  3062  1FB7                     l4202:
  3063                           
  3064                           ;main_maestro.c: 193:     Lcd_Write_String(data_cont);
  3065  1FB7  30C9               	movlw	(low (_data_cont| 0))& (0+255)
  3066  1FB8  00F5               	movwf	Lcd_Write_String@a
  3067  1FB9  3000               	movlw	0
  3068  1FBA  00F6               	movwf	Lcd_Write_String@a+1
  3069  1FBB  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  3070  1FC0                     l4204:
  3071                           
  3072                           ;main_maestro.c: 194:     Lcd_Set_Cursor(2,15);
  3073  1FC0  300F               	movlw	15
  3074  1FC1  1283               	bcf	3,5	;RP0=0, select bank0
  3075  1FC2  1303               	bcf	3,6	;RP1=0, select bank0
  3076  1FC3  00A2               	movwf	??_Show_val_LCD
  3077  1FC4  0822               	movf	??_Show_val_LCD,w
  3078  1FC5  00F6               	movwf	Lcd_Set_Cursor@b
  3079  1FC6  3002               	movlw	2
  3080  1FC7  160A  158A  2471  160A  158A  	fcall	_Lcd_Set_Cursor
  3081                           
  3082                           ;main_maestro.c: 195:     Lcd_Write_String("C");
  3083  1FCC  30B9               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3084  1FCD  00F5               	movwf	Lcd_Write_String@a
  3085  1FCE  3080               	movlw	128
  3086  1FCF  00F6               	movwf	Lcd_Write_String@a+1
  3087  1FD0  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  3088  1FD5                     l4206:
  3089                           
  3090                           ;main_maestro.c: 196:     Lcd_Set_Cursor(2,13);
  3091  1FD5  300D               	movlw	13
  3092  1FD6  1283               	bcf	3,5	;RP0=0, select bank0
  3093  1FD7  1303               	bcf	3,6	;RP1=0, select bank0
  3094  1FD8  00A2               	movwf	??_Show_val_LCD
  3095  1FD9  0822               	movf	??_Show_val_LCD,w
  3096  1FDA  00F6               	movwf	Lcd_Set_Cursor@b
  3097  1FDB  3002               	movlw	2
  3098  1FDC  160A  158A  2471  160A  158A  	fcall	_Lcd_Set_Cursor
  3099  1FE1                     l4208:
  3100                           
  3101                           ;main_maestro.c: 197:     Lcd_Write_String(data_TEMP);
  3102  1FE1  30B9               	movlw	(low (_data_TEMP| 0))& (0+255)
  3103  1FE2  00F5               	movwf	Lcd_Write_String@a
  3104  1FE3  3000               	movlw	0
  3105  1FE4  00F6               	movwf	Lcd_Write_String@a+1
  3106  1FE5  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  3107                           
  3108                           ;main_maestro.c: 198:     Lcd_Set_Cursor(2,6);
  3109  1FEA  3006               	movlw	6
  3110  1FEB  1283               	bcf	3,5	;RP0=0, select bank0
  3111  1FEC  1303               	bcf	3,6	;RP1=0, select bank0
  3112  1FED  00A2               	movwf	??_Show_val_LCD
  3113  1FEE  0822               	movf	??_Show_val_LCD,w
  3114  1FEF  00F6               	movwf	Lcd_Set_Cursor@b
  3115  1FF0  3002               	movlw	2
  3116  1FF1  160A  158A  2471  160A  158A  	fcall	_Lcd_Set_Cursor
  3117  1FF6                     l4210:
  3118                           
  3119                           ;main_maestro.c: 199:     Lcd_Write_String(data_ADC);
  3120  1FF6  30C1               	movlw	(low (_data_ADC| 0))& (0+255)
  3121  1FF7  00F5               	movwf	Lcd_Write_String@a
  3122  1FF8  3000               	movlw	0
  3123  1FF9  00F6               	movwf	Lcd_Write_String@a+1
  3124  1FFA  160A  158A  26D4  160A  158A  	fcall	_Lcd_Write_String
  3125  1FFF                     l118:
  3126  1FFF  0008               	return
  3127  2000                     __end_of_Show_val_LCD:
  3128                           
  3129                           	psect	text11
  3130  1ED4                     __ptext11:	
  3131 ;; *************** function _Lcd_Write_String *****************
  3132 ;; Defined at:
  3133 ;;		line 70 in file "LCD.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  a               2    5[COMMON] PTR unsigned char 
  3136 ;;		 -> STR_11(2), data_TEMP(8), data_ADC(8), data_cont(8), 
  3137 ;;		 -> STR_1(17), 
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  i               2    0[BANK0 ] int 
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3149 ;;      Params:         2       0       0       0       0
  3150 ;;      Locals:         0       2       0       0       0
  3151 ;;      Temps:          3       0       0       0       0
  3152 ;;      Totals:         5       2       0       0       0
  3153 ;;Total ram usage:        7 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    3
  3156 ;; This function calls:
  3157 ;;		_Lcd_Write_Char
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;;		_Show_val_LCD
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           
  3165                           ;psect for function _Lcd_Write_String
  3166  1ED4                     _Lcd_Write_String:
  3167  1ED4                     l3886:	
  3168                           ;incstack = 0
  3169                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3170                           
  3171                           
  3172                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  3173  1ED4  1283               	bcf	3,5	;RP0=0, select bank0
  3174  1ED5  1303               	bcf	3,6	;RP1=0, select bank0
  3175  1ED6  01A0               	clrf	Lcd_Write_String@i
  3176  1ED7  01A1               	clrf	Lcd_Write_String@i+1
  3177  1ED8  2EFD               	goto	l3892
  3178  1ED9                     l3888:
  3179                           
  3180                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  3181  1ED9  0820               	movf	Lcd_Write_String@i,w
  3182  1EDA  0775               	addwf	Lcd_Write_String@a,w
  3183  1EDB  00F8               	movwf	??_Lcd_Write_String+1
  3184  1EDC  0876               	movf	Lcd_Write_String@a+1,w
  3185  1EDD  00F7               	movwf	??_Lcd_Write_String
  3186  1EDE  1803               	skipnc
  3187  1EDF  0AF7               	incf	??_Lcd_Write_String,f
  3188  1EE0  1FA0               	btfss	Lcd_Write_String@i,7
  3189  1EE1  2EE3               	goto	u5450
  3190  1EE2  03F7               	decf	??_Lcd_Write_String,f
  3191  1EE3                     u5450:
  3192  1EE3  0877               	movf	??_Lcd_Write_String,w
  3193  1EE4  00F9               	movwf	??_Lcd_Write_String+2
  3194  1EE5  0879               	movf	??_Lcd_Write_String+2,w
  3195  1EE6  1283               	bcf	3,5	;RP0=0, select bank0
  3196  1EE7  1303               	bcf	3,6	;RP1=0, select bank0
  3197  1EE8  00FF               	movwf	btemp+1
  3198  1EE9  0878               	movf	??_Lcd_Write_String+1,w
  3199  1EEA  0084               	movwf	4
  3200  1EEB  160A  118A  2000  160A  158A  	fcall	stringtab
  3201  1EF0  160A  158A  2441  160A  158A  	fcall	_Lcd_Write_Char
  3202  1EF5                     l3890:
  3203  1EF5  3001               	movlw	1
  3204  1EF6  1283               	bcf	3,5	;RP0=0, select bank0
  3205  1EF7  1303               	bcf	3,6	;RP1=0, select bank0
  3206  1EF8  07A0               	addwf	Lcd_Write_String@i,f
  3207  1EF9  1803               	skipnc
  3208  1EFA  0AA1               	incf	Lcd_Write_String@i+1,f
  3209  1EFB  3000               	movlw	0
  3210  1EFC  07A1               	addwf	Lcd_Write_String@i+1,f
  3211  1EFD                     l3892:
  3212  1EFD  0820               	movf	Lcd_Write_String@i,w
  3213  1EFE  0775               	addwf	Lcd_Write_String@a,w
  3214  1EFF  00F8               	movwf	??_Lcd_Write_String+1
  3215  1F00  0876               	movf	Lcd_Write_String@a+1,w
  3216  1F01  00F7               	movwf	??_Lcd_Write_String
  3217  1F02  1803               	skipnc
  3218  1F03  0AF7               	incf	??_Lcd_Write_String,f
  3219  1F04  1FA0               	btfss	Lcd_Write_String@i,7
  3220  1F05  2F07               	goto	u5460
  3221  1F06  03F7               	decf	??_Lcd_Write_String,f
  3222  1F07                     u5460:
  3223  1F07  0877               	movf	??_Lcd_Write_String,w
  3224  1F08  00F9               	movwf	??_Lcd_Write_String+2
  3225  1F09  0879               	movf	??_Lcd_Write_String+2,w
  3226  1F0A  1283               	bcf	3,5	;RP0=0, select bank0
  3227  1F0B  1303               	bcf	3,6	;RP1=0, select bank0
  3228  1F0C  00FF               	movwf	btemp+1
  3229  1F0D  0878               	movf	??_Lcd_Write_String+1,w
  3230  1F0E  0084               	movwf	4
  3231  1F0F  160A  118A  2000  160A  158A  	fcall	stringtab
  3232  1F14  3A00               	xorlw	0
  3233  1F15  1D03               	skipz
  3234  1F16  2F18               	goto	u5471
  3235  1F17  2F19               	goto	u5470
  3236  1F18                     u5471:
  3237  1F18  2ED9               	goto	l3888
  3238  1F19                     u5470:
  3239  1F19                     l180:
  3240  1F19  0008               	return
  3241  1F1A                     __end_of_Lcd_Write_String:
  3242                           
  3243                           	psect	text12
  3244  1C41                     __ptext12:	
  3245 ;; *************** function _Lcd_Write_Char *****************
  3246 ;; Defined at:
  3247 ;;		line 61 in file "LCD.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  a               1    wreg     unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  a               1    4[COMMON] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3261 ;;      Params:         0       0       0       0       0
  3262 ;;      Locals:         1       0       0       0       0
  3263 ;;      Temps:          1       0       0       0       0
  3264 ;;      Totals:         2       0       0       0       0
  3265 ;;Total ram usage:        2 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    2
  3268 ;; This function calls:
  3269 ;;		_Lcd_Port
  3270 ;; This function is called by:
  3271 ;;		_Lcd_Write_String
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           
  3276                           ;psect for function _Lcd_Write_Char
  3277  1C41                     _Lcd_Write_Char:
  3278                           
  3279                           ;incstack = 0
  3280                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3281                           ;Lcd_Write_Char@a stored from wreg
  3282  1C41  00F4               	movwf	Lcd_Write_Char@a
  3283  1C42                     l3688:
  3284                           
  3285                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  3286  1C42  1283               	bcf	3,5	;RP0=0, select bank0
  3287  1C43  1303               	bcf	3,6	;RP1=0, select bank0
  3288  1C44  1409               	bsf	9,0	;volatile
  3289  1C45                     l3690:
  3290                           
  3291                           ;LCD.c: 63:    Lcd_Port(a);
  3292  1C45  0874               	movf	Lcd_Write_Char@a,w
  3293  1C46  160A  158A  23D3  160A  158A  	fcall	_Lcd_Port
  3294  1C4B                     l3692:
  3295                           
  3296                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  3297  1C4B  1283               	bcf	3,5	;RP0=0, select bank0
  3298  1C4C  1303               	bcf	3,6	;RP1=0, select bank0
  3299  1C4D  1509               	bsf	9,2	;volatile
  3300  1C4E                     l3694:
  3301                           
  3302                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  3303  1C4E  301A               	movlw	26
  3304  1C4F  00F3               	movwf	??_Lcd_Write_Char
  3305  1C50                     u6117:
  3306  1C50  0BF3               	decfsz	??_Lcd_Write_Char,f
  3307  1C51  2C50               	goto	u6117
  3308  1C52  0000               	nop
  3309  1C53                     l3696:
  3310                           
  3311                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  3312  1C53  1283               	bcf	3,5	;RP0=0, select bank0
  3313  1C54  1303               	bcf	3,6	;RP1=0, select bank0
  3314  1C55  1109               	bcf	9,2	;volatile
  3315  1C56                     l174:
  3316  1C56  0008               	return
  3317  1C57                     __end_of_Lcd_Write_Char:
  3318                           
  3319                           	psect	text13
  3320  1C71                     __ptext13:	
  3321 ;; *************** function _Lcd_Set_Cursor *****************
  3322 ;; Defined at:
  3323 ;;		line 48 in file "LCD.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  a               1    wreg     unsigned char 
  3326 ;;  b               1    6[COMMON] unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  a               1    8[COMMON] unsigned char 
  3329 ;;  temp            1    9[COMMON] unsigned char 
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      void 
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0, pclath, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3339 ;;      Params:         1       0       0       0       0
  3340 ;;      Locals:         2       0       0       0       0
  3341 ;;      Temps:          1       0       0       0       0
  3342 ;;      Totals:         4       0       0       0       0
  3343 ;;Total ram usage:        4 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    3
  3346 ;; This function calls:
  3347 ;;		_Lcd_Cmd
  3348 ;; This function is called by:
  3349 ;;		_main
  3350 ;;		_Show_val_LCD
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _Lcd_Set_Cursor
  3356  1C71                     _Lcd_Set_Cursor:
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3360                           ;Lcd_Set_Cursor@a stored from wreg
  3361  1C71  00F8               	movwf	Lcd_Set_Cursor@a
  3362  1C72                     l3874:
  3363                           
  3364                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  3365  1C72  0378               	decf	Lcd_Set_Cursor@a,w
  3366  1C73  1D03               	btfss	3,2
  3367  1C74  2C76               	goto	u5431
  3368  1C75  2C77               	goto	u5430
  3369  1C76                     u5431:
  3370  1C76  2C83               	goto	l3880
  3371  1C77                     u5430:
  3372  1C77                     l3876:
  3373                           
  3374                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  3375  1C77  0876               	movf	Lcd_Set_Cursor@b,w
  3376  1C78  3E7F               	addlw	127
  3377  1C79  00F7               	movwf	??_Lcd_Set_Cursor
  3378  1C7A  0877               	movf	??_Lcd_Set_Cursor,w
  3379  1C7B  00F9               	movwf	Lcd_Set_Cursor@temp
  3380  1C7C                     l3878:
  3381                           
  3382                           ;LCD.c: 52:         Lcd_Cmd(temp);
  3383  1C7C  0879               	movf	Lcd_Set_Cursor@temp,w
  3384  1C7D  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  3385                           
  3386                           ;LCD.c: 53:  }
  3387  1C82  2C94               	goto	l171
  3388  1C83                     l3880:
  3389  1C83  3002               	movlw	2
  3390  1C84  0678               	xorwf	Lcd_Set_Cursor@a,w
  3391  1C85  1D03               	btfss	3,2
  3392  1C86  2C88               	goto	u5441
  3393  1C87  2C89               	goto	u5440
  3394  1C88                     u5441:
  3395  1C88  2C94               	goto	l171
  3396  1C89                     u5440:
  3397  1C89                     l3882:
  3398                           
  3399                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  3400  1C89  0876               	movf	Lcd_Set_Cursor@b,w
  3401  1C8A  3EBF               	addlw	191
  3402  1C8B  00F7               	movwf	??_Lcd_Set_Cursor
  3403  1C8C  0877               	movf	??_Lcd_Set_Cursor,w
  3404  1C8D  00F9               	movwf	Lcd_Set_Cursor@temp
  3405  1C8E                     l3884:
  3406                           
  3407                           ;LCD.c: 56:   Lcd_Cmd(temp);
  3408  1C8E  0879               	movf	Lcd_Set_Cursor@temp,w
  3409  1C8F  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  3410  1C94                     l171:
  3411  1C94  0008               	return
  3412  1C95                     __end_of_Lcd_Set_Cursor:
  3413                           
  3414                           	psect	text14
  3415  1D75                     __ptext14:	
  3416 ;; *************** function _SPI_TEMP *****************
  3417 ;; Defined at:
  3418 ;;		line 228 in file "main_maestro.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;		None
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      void 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0, pclath, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3432 ;;      Params:         0       0       0       0       0
  3433 ;;      Locals:         0       0       0       0       0
  3434 ;;      Temps:          3       0       0       0       0
  3435 ;;      Totals:         3       0       0       0       0
  3436 ;;Total ram usage:        3 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    3
  3439 ;; This function calls:
  3440 ;;		_spiRead
  3441 ;;		_spiWrite
  3442 ;; This function is called by:
  3443 ;;		_main
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           
  3448                           ;psect for function _SPI_TEMP
  3449  1D75                     _SPI_TEMP:
  3450  1D75                     l3306:	
  3451                           ;incstack = 0
  3452                           ; Regs used in _SPI_TEMP: [wreg+status,2+status,0+pclath+cstack]
  3453                           
  3454                           
  3455                           ;main_maestro.c: 229:     RC1 = 0;
  3456  1D75  1283               	bcf	3,5	;RP0=0, select bank0
  3457  1D76  1303               	bcf	3,6	;RP1=0, select bank0
  3458  1D77  1087               	bcf	7,1	;volatile
  3459  1D78                     l3308:
  3460                           
  3461                           ;main_maestro.c: 230:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3462  1D78  3003               	movlw	3
  3463  1D79  00F4               	movwf	??_SPI_TEMP+1
  3464  1D7A  3097               	movlw	151
  3465  1D7B  00F3               	movwf	??_SPI_TEMP
  3466  1D7C                     u6127:
  3467  1D7C  0BF3               	decfsz	??_SPI_TEMP,f
  3468  1D7D  2D7C               	goto	u6127
  3469  1D7E  0BF4               	decfsz	??_SPI_TEMP+1,f
  3470  1D7F  2D7C               	goto	u6127
  3471  1D80  2D81               	nop2
  3472  1D81                     l3310:
  3473                           
  3474                           ;main_maestro.c: 232:    spiWrite(hola_esclavo);
  3475  1D81  3000               	movlw	0
  3476  1D82  160A  158A  23D9  160A  158A  	fcall	_spiWrite
  3477  1D87                     l3312:
  3478                           
  3479                           ;main_maestro.c: 233:    val_TEMP = spiRead();
  3480  1D87  160A  158A  2403  160A  158A  	fcall	_spiRead
  3481  1D8C  00F3               	movwf	??_SPI_TEMP
  3482  1D8D  0873               	movf	??_SPI_TEMP,w
  3483  1D8E  00FA               	movwf	_val_TEMP
  3484                           
  3485                           ;main_maestro.c: 235:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3486  1D8F  3003               	movlw	3
  3487  1D90  00F4               	movwf	??_SPI_TEMP+1
  3488  1D91  3097               	movlw	151
  3489  1D92  00F3               	movwf	??_SPI_TEMP
  3490  1D93                     u6137:
  3491  1D93  0BF3               	decfsz	??_SPI_TEMP,f
  3492  1D94  2D93               	goto	u6137
  3493  1D95  0BF4               	decfsz	??_SPI_TEMP+1,f
  3494  1D96  2D93               	goto	u6137
  3495  1D97  2D98               	nop2
  3496  1D98                     l3314:
  3497                           
  3498                           ;main_maestro.c: 236:    RC1 = 1;
  3499  1D98  1283               	bcf	3,5	;RP0=0, select bank0
  3500  1D99  1303               	bcf	3,6	;RP1=0, select bank0
  3501  1D9A  1487               	bsf	7,1	;volatile
  3502                           
  3503                           ;main_maestro.c: 238:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3504  1D9B  3002               	movlw	2
  3505  1D9C  00F5               	movwf	??_SPI_TEMP+2
  3506  1D9D  3004               	movlw	4
  3507  1D9E  00F4               	movwf	??_SPI_TEMP+1
  3508  1D9F  30BA               	movlw	186
  3509  1DA0  00F3               	movwf	??_SPI_TEMP
  3510  1DA1                     u6147:
  3511  1DA1  0BF3               	decfsz	??_SPI_TEMP,f
  3512  1DA2  2DA1               	goto	u6147
  3513  1DA3  0BF4               	decfsz	??_SPI_TEMP+1,f
  3514  1DA4  2DA1               	goto	u6147
  3515  1DA5  0BF5               	decfsz	??_SPI_TEMP+2,f
  3516  1DA6  2DA1               	goto	u6147
  3517  1DA7  0000               	nop
  3518  1DA8                     l127:
  3519  1DA8  0008               	return
  3520  1DA9                     __end_of_SPI_TEMP:
  3521                           
  3522                           	psect	text15
  3523  1DA9                     __ptext15:	
  3524 ;; *************** function _SPI_CONT *****************
  3525 ;; Defined at:
  3526 ;;		line 203 in file "main_maestro.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2, status,0, pclath, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3540 ;;      Params:         0       0       0       0       0
  3541 ;;      Locals:         0       0       0       0       0
  3542 ;;      Temps:          3       0       0       0       0
  3543 ;;      Totals:         3       0       0       0       0
  3544 ;;Total ram usage:        3 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    3
  3547 ;; This function calls:
  3548 ;;		_spiRead
  3549 ;;		_spiWrite
  3550 ;; This function is called by:
  3551 ;;		_main
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function _SPI_CONT
  3557  1DA9                     _SPI_CONT:
  3558  1DA9                     l3286:	
  3559                           ;incstack = 0
  3560                           ; Regs used in _SPI_CONT: [wreg+status,2+status,0+pclath+cstack]
  3561                           
  3562                           
  3563                           ;main_maestro.c: 204:     RC2 = 0;
  3564  1DA9  1283               	bcf	3,5	;RP0=0, select bank0
  3565  1DAA  1303               	bcf	3,6	;RP1=0, select bank0
  3566  1DAB  1107               	bcf	7,2	;volatile
  3567  1DAC                     l3288:
  3568                           
  3569                           ;main_maestro.c: 205:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3570  1DAC  3003               	movlw	3
  3571  1DAD  00F4               	movwf	??_SPI_CONT+1
  3572  1DAE  3097               	movlw	151
  3573  1DAF  00F3               	movwf	??_SPI_CONT
  3574  1DB0                     u6157:
  3575  1DB0  0BF3               	decfsz	??_SPI_CONT,f
  3576  1DB1  2DB0               	goto	u6157
  3577  1DB2  0BF4               	decfsz	??_SPI_CONT+1,f
  3578  1DB3  2DB0               	goto	u6157
  3579  1DB4  2DB5               	nop2
  3580  1DB5                     l3290:
  3581                           
  3582                           ;main_maestro.c: 207:    spiWrite(hola_esclavo);
  3583  1DB5  3000               	movlw	0
  3584  1DB6  160A  158A  23D9  160A  158A  	fcall	_spiWrite
  3585  1DBB                     l3292:
  3586                           
  3587                           ;main_maestro.c: 208:    cont = spiRead();
  3588  1DBB  160A  158A  2403  160A  158A  	fcall	_spiRead
  3589  1DC0  00F3               	movwf	??_SPI_CONT
  3590  1DC1  0873               	movf	??_SPI_CONT,w
  3591  1DC2  1283               	bcf	3,5	;RP0=0, select bank0
  3592  1DC3  1303               	bcf	3,6	;RP1=0, select bank0
  3593  1DC4  00EE               	movwf	_cont
  3594                           
  3595                           ;main_maestro.c: 210:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3596  1DC5  3003               	movlw	3
  3597  1DC6  00F4               	movwf	??_SPI_CONT+1
  3598  1DC7  3097               	movlw	151
  3599  1DC8  00F3               	movwf	??_SPI_CONT
  3600  1DC9                     u6167:
  3601  1DC9  0BF3               	decfsz	??_SPI_CONT,f
  3602  1DCA  2DC9               	goto	u6167
  3603  1DCB  0BF4               	decfsz	??_SPI_CONT+1,f
  3604  1DCC  2DC9               	goto	u6167
  3605  1DCD  2DCE               	nop2
  3606  1DCE                     l3294:
  3607                           
  3608                           ;main_maestro.c: 211:    RC2 = 1;
  3609  1DCE  1283               	bcf	3,5	;RP0=0, select bank0
  3610  1DCF  1303               	bcf	3,6	;RP1=0, select bank0
  3611  1DD0  1507               	bsf	7,2	;volatile
  3612                           
  3613                           ;main_maestro.c: 213:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3614  1DD1  3002               	movlw	2
  3615  1DD2  00F5               	movwf	??_SPI_CONT+2
  3616  1DD3  3004               	movlw	4
  3617  1DD4  00F4               	movwf	??_SPI_CONT+1
  3618  1DD5  30BA               	movlw	186
  3619  1DD6  00F3               	movwf	??_SPI_CONT
  3620  1DD7                     u6177:
  3621  1DD7  0BF3               	decfsz	??_SPI_CONT,f
  3622  1DD8  2DD7               	goto	u6177
  3623  1DD9  0BF4               	decfsz	??_SPI_CONT+1,f
  3624  1DDA  2DD7               	goto	u6177
  3625  1DDB  0BF5               	decfsz	??_SPI_CONT+2,f
  3626  1DDC  2DD7               	goto	u6177
  3627  1DDD  0000               	nop
  3628  1DDE                     l121:
  3629  1DDE  0008               	return
  3630  1DDF                     __end_of_SPI_CONT:
  3631                           
  3632                           	psect	text16
  3633  1D41                     __ptext16:	
  3634 ;; *************** function _SPI_ADC *****************
  3635 ;; Defined at:
  3636 ;;		line 216 in file "main_maestro.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2, status,0, pclath, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3650 ;;      Params:         0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0
  3652 ;;      Temps:          3       0       0       0       0
  3653 ;;      Totals:         3       0       0       0       0
  3654 ;;Total ram usage:        3 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    3
  3657 ;; This function calls:
  3658 ;;		_spiRead
  3659 ;;		_spiWrite
  3660 ;; This function is called by:
  3661 ;;		_main
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _SPI_ADC
  3667  1D41                     _SPI_ADC:
  3668  1D41                     l3296:	
  3669                           ;incstack = 0
  3670                           ; Regs used in _SPI_ADC: [wreg+status,2+status,0+pclath+cstack]
  3671                           
  3672                           
  3673                           ;main_maestro.c: 217:     RC0 = 0;
  3674  1D41  1283               	bcf	3,5	;RP0=0, select bank0
  3675  1D42  1303               	bcf	3,6	;RP1=0, select bank0
  3676  1D43  1007               	bcf	7,0	;volatile
  3677  1D44                     l3298:
  3678                           
  3679                           ;main_maestro.c: 218:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3680  1D44  3003               	movlw	3
  3681  1D45  00F4               	movwf	??_SPI_ADC+1
  3682  1D46  3097               	movlw	151
  3683  1D47  00F3               	movwf	??_SPI_ADC
  3684  1D48                     u6187:
  3685  1D48  0BF3               	decfsz	??_SPI_ADC,f
  3686  1D49  2D48               	goto	u6187
  3687  1D4A  0BF4               	decfsz	??_SPI_ADC+1,f
  3688  1D4B  2D48               	goto	u6187
  3689  1D4C  2D4D               	nop2
  3690  1D4D                     l3300:
  3691                           
  3692                           ;main_maestro.c: 220:    spiWrite(hola_esclavo);
  3693  1D4D  3000               	movlw	0
  3694  1D4E  160A  158A  23D9  160A  158A  	fcall	_spiWrite
  3695  1D53                     l3302:
  3696                           
  3697                           ;main_maestro.c: 221:    val_ADC = spiRead();
  3698  1D53  160A  158A  2403  160A  158A  	fcall	_spiRead
  3699  1D58  00F3               	movwf	??_SPI_ADC
  3700  1D59  0873               	movf	??_SPI_ADC,w
  3701  1D5A  00FB               	movwf	_val_ADC
  3702                           
  3703                           ;main_maestro.c: 223:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3704  1D5B  3003               	movlw	3
  3705  1D5C  00F4               	movwf	??_SPI_ADC+1
  3706  1D5D  3097               	movlw	151
  3707  1D5E  00F3               	movwf	??_SPI_ADC
  3708  1D5F                     u6197:
  3709  1D5F  0BF3               	decfsz	??_SPI_ADC,f
  3710  1D60  2D5F               	goto	u6197
  3711  1D61  0BF4               	decfsz	??_SPI_ADC+1,f
  3712  1D62  2D5F               	goto	u6197
  3713  1D63  2D64               	nop2
  3714  1D64                     l3304:
  3715                           
  3716                           ;main_maestro.c: 224:    RC0 = 1;
  3717  1D64  1283               	bcf	3,5	;RP0=0, select bank0
  3718  1D65  1303               	bcf	3,6	;RP1=0, select bank0
  3719  1D66  1407               	bsf	7,0	;volatile
  3720                           
  3721                           ;main_maestro.c: 226:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3722  1D67  3002               	movlw	2
  3723  1D68  00F5               	movwf	??_SPI_ADC+2
  3724  1D69  3004               	movlw	4
  3725  1D6A  00F4               	movwf	??_SPI_ADC+1
  3726  1D6B  30BA               	movlw	186
  3727  1D6C  00F3               	movwf	??_SPI_ADC
  3728  1D6D                     u6207:
  3729  1D6D  0BF3               	decfsz	??_SPI_ADC,f
  3730  1D6E  2D6D               	goto	u6207
  3731  1D6F  0BF4               	decfsz	??_SPI_ADC+1,f
  3732  1D70  2D6D               	goto	u6207
  3733  1D71  0BF5               	decfsz	??_SPI_ADC+2,f
  3734  1D72  2D6D               	goto	u6207
  3735  1D73  0000               	nop
  3736  1D74                     l124:
  3737  1D74  0008               	return
  3738  1D75                     __end_of_SPI_ADC:
  3739                           
  3740                           	psect	text17
  3741  1BD9                     __ptext17:	
  3742 ;; *************** function _spiWrite *****************
  3743 ;; Defined at:
  3744 ;;		line 36 in file "SPI.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  dat             1    wreg     unsigned char 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;  dat             1    2[COMMON] unsigned char 
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  1    wreg      void 
  3751 ;; Registers used:
  3752 ;;		wreg
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3758 ;;      Params:         0       0       0       0       0
  3759 ;;      Locals:         1       0       0       0       0
  3760 ;;      Temps:          0       0       0       0       0
  3761 ;;      Totals:         1       0       0       0       0
  3762 ;;Total ram usage:        1 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; Hardware stack levels required when called:    1
  3765 ;; This function calls:
  3766 ;;		Nothing
  3767 ;; This function is called by:
  3768 ;;		_SPI_CONT
  3769 ;;		_SPI_ADC
  3770 ;;		_SPI_TEMP
  3771 ;; This function uses a non-reentrant model
  3772 ;;
  3773                           
  3774                           
  3775                           ;psect for function _spiWrite
  3776  1BD9                     _spiWrite:
  3777                           
  3778                           ;incstack = 0
  3779                           ; Regs used in _spiWrite: [wreg]
  3780                           ;spiWrite@dat stored from wreg
  3781  1BD9  00F2               	movwf	spiWrite@dat
  3782  1BDA                     l3224:
  3783                           
  3784                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  3785  1BDA  0872               	movf	spiWrite@dat,w
  3786  1BDB  1283               	bcf	3,5	;RP0=0, select bank0
  3787  1BDC  1303               	bcf	3,6	;RP1=0, select bank0
  3788  1BDD  0093               	movwf	19	;volatile
  3789  1BDE                     l259:
  3790  1BDE  0008               	return
  3791  1BDF                     __end_of_spiWrite:
  3792                           
  3793                           	psect	text18
  3794  1C03                     __ptext18:	
  3795 ;; *************** function _spiRead *****************
  3796 ;; Defined at:
  3797 ;;		line 49 in file "SPI.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      unsigned char 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, pclath, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3811 ;;      Params:         0       0       0       0       0
  3812 ;;      Locals:         0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0
  3814 ;;      Totals:         0       0       0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    2
  3818 ;; This function calls:
  3819 ;;		_spiReceiveWait
  3820 ;; This function is called by:
  3821 ;;		_SPI_CONT
  3822 ;;		_SPI_ADC
  3823 ;;		_SPI_TEMP
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           
  3828                           ;psect for function _spiRead
  3829  1C03                     _spiRead:
  3830  1C03                     l3226:	
  3831                           ;incstack = 0
  3832                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  3833                           
  3834                           
  3835                           ;SPI.c: 51:     spiReceiveWait();
  3836  1C03  160A  158A  23EC  160A  158A  	fcall	_spiReceiveWait
  3837  1C08                     l3228:
  3838                           
  3839                           ;SPI.c: 52:     return(SSPBUF);
  3840  1C08  1283               	bcf	3,5	;RP0=0, select bank0
  3841  1C09  1303               	bcf	3,6	;RP1=0, select bank0
  3842  1C0A  0813               	movf	19,w	;volatile
  3843  1C0B                     l267:
  3844  1C0B  0008               	return
  3845  1C0C                     __end_of_spiRead:
  3846                           
  3847                           	psect	text19
  3848  1BEC                     __ptext19:	
  3849 ;; *************** function _spiReceiveWait *****************
  3850 ;; Defined at:
  3851 ;;		line 31 in file "SPI.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		None
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3865 ;;      Params:         0       0       0       0       0
  3866 ;;      Locals:         0       0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0
  3868 ;;      Totals:         0       0       0       0       0
  3869 ;;Total ram usage:        0 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    1
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_spiRead
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _spiReceiveWait
  3881  1BEC                     _spiReceiveWait:
  3882  1BEC                     l2556:	
  3883                           ;incstack = 0
  3884                           ; Regs used in _spiReceiveWait: []
  3885                           
  3886  1BEC                     l253:	
  3887                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  3888                           
  3889  1BEC  1683               	bsf	3,5	;RP0=1, select bank1
  3890  1BED  1303               	bcf	3,6	;RP1=0, select bank1
  3891  1BEE  1C14               	btfss	20,0	;volatile
  3892  1BEF  2BF1               	goto	u3101
  3893  1BF0  2BF2               	goto	u3100
  3894  1BF1                     u3101:
  3895  1BF1  2BEC               	goto	l253
  3896  1BF2                     u3100:
  3897  1BF2                     l256:
  3898  1BF2  0008               	return
  3899  1BF3                     __end_of_spiReceiveWait:
  3900                           
  3901                           	psect	text20
  3902  1F64                     __ptext20:	
  3903 ;; *************** function _Lcd_Init *****************
  3904 ;; Defined at:
  3905 ;;		line 14 in file "LCD.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0, pclath, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3919 ;;      Params:         0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0
  3921 ;;      Temps:          2       0       0       0       0
  3922 ;;      Totals:         2       0       0       0       0
  3923 ;;Total ram usage:        2 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    3
  3926 ;; This function calls:
  3927 ;;		_Lcd_Cmd
  3928 ;;		_Lcd_Port
  3929 ;; This function is called by:
  3930 ;;		_main
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           
  3935                           ;psect for function _Lcd_Init
  3936  1F64                     _Lcd_Init:
  3937  1F64                     l4186:	
  3938                           ;incstack = 0
  3939                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3940                           
  3941                           
  3942                           ;LCD.c: 15:   Lcd_Port(0x00);
  3943  1F64  3000               	movlw	0
  3944  1F65  160A  158A  23D3  160A  158A  	fcall	_Lcd_Port
  3945  1F6A                     l4188:
  3946                           
  3947                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  3948  1F6A  3034               	movlw	52
  3949  1F6B  00F7               	movwf	??_Lcd_Init+1
  3950  1F6C  30F1               	movlw	241
  3951  1F6D  00F6               	movwf	??_Lcd_Init
  3952  1F6E                     u6217:
  3953  1F6E  0BF6               	decfsz	??_Lcd_Init,f
  3954  1F6F  2F6E               	goto	u6217
  3955  1F70  0BF7               	decfsz	??_Lcd_Init+1,f
  3956  1F71  2F6E               	goto	u6217
  3957  1F72  2F73               	nop2
  3958  1F73                     l4190:
  3959                           
  3960                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  3961  1F73  3030               	movlw	48
  3962  1F74  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  3963                           
  3964                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  3965  1F79  300D               	movlw	13
  3966  1F7A  00F7               	movwf	??_Lcd_Init+1
  3967  1F7B  30FB               	movlw	251
  3968  1F7C  00F6               	movwf	??_Lcd_Init
  3969  1F7D                     u6227:
  3970  1F7D  0BF6               	decfsz	??_Lcd_Init,f
  3971  1F7E  2F7D               	goto	u6227
  3972  1F7F  0BF7               	decfsz	??_Lcd_Init+1,f
  3973  1F80  2F7D               	goto	u6227
  3974  1F81  2F82               	nop2
  3975  1F82                     l4192:
  3976                           
  3977                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  3978  1F82  3030               	movlw	48
  3979  1F83  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  3980  1F88                     l4194:
  3981                           
  3982                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  3983  1F88  301D               	movlw	29
  3984  1F89  00F7               	movwf	??_Lcd_Init+1
  3985  1F8A  3091               	movlw	145
  3986  1F8B  00F6               	movwf	??_Lcd_Init
  3987  1F8C                     u6237:
  3988  1F8C  0BF6               	decfsz	??_Lcd_Init,f
  3989  1F8D  2F8C               	goto	u6237
  3990  1F8E  0BF7               	decfsz	??_Lcd_Init+1,f
  3991  1F8F  2F8C               	goto	u6237
  3992                           
  3993                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  3994  1F90  3030               	movlw	48
  3995  1F91  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  3996                           
  3997                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  3998  1F96  3038               	movlw	56
  3999  1F97  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  4000                           
  4001                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  4002  1F9C  300C               	movlw	12
  4003  1F9D  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  4004                           
  4005                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  4006  1FA2  3001               	movlw	1
  4007  1FA3  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  4008                           
  4009                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  4010  1FA8  3006               	movlw	6
  4011  1FA9  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  4012  1FAE                     l156:
  4013  1FAE  0008               	return
  4014  1FAF                     __end_of_Lcd_Init:
  4015                           
  4016                           	psect	text21
  4017  1C22                     __ptext21:	
  4018 ;; *************** function _Lcd_Clear *****************
  4019 ;; Defined at:
  4020 ;;		line 42 in file "LCD.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg, status,2, status,0, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4034 ;;      Params:         0       0       0       0       0
  4035 ;;      Locals:         0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0
  4037 ;;      Totals:         0       0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    3
  4041 ;; This function calls:
  4042 ;;		_Lcd_Cmd
  4043 ;; This function is called by:
  4044 ;;		_main
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           
  4049                           ;psect for function _Lcd_Clear
  4050  1C22                     _Lcd_Clear:
  4051  1C22                     l4196:	
  4052                           ;incstack = 0
  4053                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4054                           
  4055                           
  4056                           ;LCD.c: 43:  Lcd_Cmd(0);
  4057  1C22  3000               	movlw	0
  4058  1C23  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  4059                           
  4060                           ;LCD.c: 44:  Lcd_Cmd(1);
  4061  1C28  3001               	movlw	1
  4062  1C29  160A  158A  2457  160A  158A  	fcall	_Lcd_Cmd
  4063  1C2E                     l165:
  4064  1C2E  0008               	return
  4065  1C2F                     __end_of_Lcd_Clear:
  4066                           
  4067                           	psect	text22
  4068  1C57                     __ptext22:	
  4069 ;; *************** function _Lcd_Cmd *****************
  4070 ;; Defined at:
  4071 ;;		line 33 in file "LCD.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;  a               1    wreg     unsigned char 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;  a               1    5[COMMON] unsigned char 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0, pclath, cstack
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4085 ;;      Params:         0       0       0       0       0
  4086 ;;      Locals:         1       0       0       0       0
  4087 ;;      Temps:          2       0       0       0       0
  4088 ;;      Totals:         3       0       0       0       0
  4089 ;;Total ram usage:        3 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    2
  4092 ;; This function calls:
  4093 ;;		_Lcd_Port
  4094 ;; This function is called by:
  4095 ;;		_Lcd_Init
  4096 ;;		_Lcd_Clear
  4097 ;;		_Lcd_Set_Cursor
  4098 ;;		_Lcd_Shift_Right
  4099 ;;		_Lcd_Shift_Left
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _Lcd_Cmd
  4105  1C57                     _Lcd_Cmd:
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4109                           ;Lcd_Cmd@a stored from wreg
  4110  1C57  00F5               	movwf	Lcd_Cmd@a
  4111  1C58                     l3678:
  4112                           
  4113                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  4114  1C58  1283               	bcf	3,5	;RP0=0, select bank0
  4115  1C59  1303               	bcf	3,6	;RP1=0, select bank0
  4116  1C5A  1009               	bcf	9,0	;volatile
  4117  1C5B                     l3680:
  4118                           
  4119                           ;LCD.c: 35:  Lcd_Port(a);
  4120  1C5B  0875               	movf	Lcd_Cmd@a,w
  4121  1C5C  160A  158A  23D3  160A  158A  	fcall	_Lcd_Port
  4122  1C61                     l3682:
  4123                           
  4124                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  4125  1C61  1283               	bcf	3,5	;RP0=0, select bank0
  4126  1C62  1303               	bcf	3,6	;RP1=0, select bank0
  4127  1C63  1509               	bsf	9,2	;volatile
  4128  1C64                     l3684:
  4129                           
  4130                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4131  1C64  300B               	movlw	11
  4132  1C65  00F4               	movwf	??_Lcd_Cmd+1
  4133  1C66  3062               	movlw	98
  4134  1C67  00F3               	movwf	??_Lcd_Cmd
  4135  1C68                     u6247:
  4136  1C68  0BF3               	decfsz	??_Lcd_Cmd,f
  4137  1C69  2C68               	goto	u6247
  4138  1C6A  0BF4               	decfsz	??_Lcd_Cmd+1,f
  4139  1C6B  2C68               	goto	u6247
  4140  1C6C  0000               	nop
  4141  1C6D                     l3686:
  4142                           
  4143                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  4144  1C6D  1283               	bcf	3,5	;RP0=0, select bank0
  4145  1C6E  1303               	bcf	3,6	;RP1=0, select bank0
  4146  1C6F  1109               	bcf	9,2	;volatile
  4147  1C70                     l162:
  4148  1C70  0008               	return
  4149  1C71                     __end_of_Lcd_Cmd:
  4150                           
  4151                           	psect	text23
  4152  1BD3                     __ptext23:	
  4153 ;; *************** function _Lcd_Port *****************
  4154 ;; Defined at:
  4155 ;;		line 29 in file "LCD.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  a               1    wreg     unsigned char 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  a               1    2[COMMON] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4169 ;;      Params:         0       0       0       0       0
  4170 ;;      Locals:         1       0       0       0       0
  4171 ;;      Temps:          0       0       0       0       0
  4172 ;;      Totals:         1       0       0       0       0
  4173 ;;Total ram usage:        1 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    1
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_Lcd_Init
  4180 ;;		_Lcd_Cmd
  4181 ;;		_Lcd_Write_Char
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           
  4186                           ;psect for function _Lcd_Port
  4187  1BD3                     _Lcd_Port:
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _Lcd_Port: [wreg]
  4191                           ;Lcd_Port@a stored from wreg
  4192  1BD3  00F2               	movwf	Lcd_Port@a
  4193  1BD4                     l3530:
  4194                           
  4195                           ;LCD.c: 30:     PORTD = a;
  4196  1BD4  0872               	movf	Lcd_Port@a,w
  4197  1BD5  1283               	bcf	3,5	;RP0=0, select bank0
  4198  1BD6  1303               	bcf	3,6	;RP1=0, select bank0
  4199  1BD7  0088               	movwf	8	;volatile
  4200  1BD8                     l159:
  4201  1BD8  0008               	return
  4202  1BD9                     __end_of_Lcd_Port:
  4203                           
  4204                           	psect	text24
  4205  1F1A                     __ptext24:	
  4206 ;; *************** function _ADC_to_string *****************
  4207 ;; Defined at:
  4208 ;;		line 180 in file "main_maestro.c"
  4209 ;; Parameters:    Size  Location     Type
  4210 ;;		None
  4211 ;; Auto vars:     Size  Location     Type
  4212 ;;		None
  4213 ;; Return value:  Size  Location     Type
  4214 ;;                  1    wreg      void 
  4215 ;; Registers used:
  4216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4217 ;; Tracked objects:
  4218 ;;		On entry : 0/0
  4219 ;;		On exit  : 0/0
  4220 ;;		Unchanged: 0/0
  4221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4222 ;;      Params:         0       0       0       0       0
  4223 ;;      Locals:         0       0       0       0       0
  4224 ;;      Temps:          0       3       0       0       0
  4225 ;;      Totals:         0       3       0       0       0
  4226 ;;Total ram usage:        3 bytes
  4227 ;; Hardware stack levels used:    1
  4228 ;; Hardware stack levels required when called:    5
  4229 ;; This function calls:
  4230 ;;		_sprintf
  4231 ;; This function is called by:
  4232 ;;		_main
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           
  4237                           ;psect for function _ADC_to_string
  4238  1F1A                     _ADC_to_string:
  4239  1F1A                     l4198:	
  4240                           ;incstack = 0
  4241                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4242                           
  4243                           
  4244                           ;main_maestro.c: 182:     sprintf(data_cont, "%.3i", cont);
  4245  1F1A  30B4               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4246  1F1B  1283               	bcf	3,5	;RP0=0, select bank0
  4247  1F1C  1303               	bcf	3,6	;RP1=0, select bank0
  4248  1F1D  00E9               	movwf	??_ADC_to_string
  4249  1F1E  0869               	movf	??_ADC_to_string,w
  4250  1F1F  00DF               	movwf	sprintf@f
  4251  1F20  086E               	movf	_cont,w
  4252  1F21  00EA               	movwf	??_ADC_to_string+1
  4253  1F22  01EB               	clrf	??_ADC_to_string+2
  4254  1F23  086A               	movf	??_ADC_to_string+1,w
  4255  1F24  00E0               	movwf	?_sprintf+1
  4256  1F25  086B               	movf	??_ADC_to_string+2,w
  4257  1F26  00E1               	movwf	?_sprintf+2
  4258  1F27  30C9               	movlw	(low (_data_cont| 0))& (0+255)
  4259  1F28  120A  158A  2518  160A  158A  	fcall	_sprintf
  4260                           
  4261                           ;main_maestro.c: 183:     sprintf(data_ADC, "%1.2fV", ADC_val_M);
  4262  1F2D  30A2               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  4263  1F2E  1283               	bcf	3,5	;RP0=0, select bank0
  4264  1F2F  1303               	bcf	3,6	;RP1=0, select bank0
  4265  1F30  00E9               	movwf	??_ADC_to_string
  4266  1F31  0869               	movf	??_ADC_to_string,w
  4267  1F32  00DF               	movwf	sprintf@f
  4268  1F33  1683               	bsf	3,5	;RP0=1, select bank1
  4269  1F34  1303               	bcf	3,6	;RP1=0, select bank1
  4270  1F35  0834               	movf	_ADC_val_M^(0+128),w
  4271  1F36  1283               	bcf	3,5	;RP0=0, select bank0
  4272  1F37  1303               	bcf	3,6	;RP1=0, select bank0
  4273  1F38  00E0               	movwf	?_sprintf+1
  4274  1F39  1683               	bsf	3,5	;RP0=1, select bank1
  4275  1F3A  1303               	bcf	3,6	;RP1=0, select bank1
  4276  1F3B  0835               	movf	(_ADC_val_M+1)^(0+128),w
  4277  1F3C  1283               	bcf	3,5	;RP0=0, select bank0
  4278  1F3D  1303               	bcf	3,6	;RP1=0, select bank0
  4279  1F3E  00E1               	movwf	?_sprintf+2
  4280  1F3F  1683               	bsf	3,5	;RP0=1, select bank1
  4281  1F40  1303               	bcf	3,6	;RP1=0, select bank1
  4282  1F41  0836               	movf	(_ADC_val_M+2)^(0+128),w
  4283  1F42  1283               	bcf	3,5	;RP0=0, select bank0
  4284  1F43  1303               	bcf	3,6	;RP1=0, select bank0
  4285  1F44  00E2               	movwf	?_sprintf+3
  4286  1F45  30C1               	movlw	(low (_data_ADC| 0))& (0+255)
  4287  1F46  120A  158A  2518  160A  158A  	fcall	_sprintf
  4288                           
  4289                           ;main_maestro.c: 184:     sprintf(data_TEMP, "%.2i", mv_temp_val_M);
  4290  1F4B  30AF               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  4291  1F4C  1283               	bcf	3,5	;RP0=0, select bank0
  4292  1F4D  1303               	bcf	3,6	;RP1=0, select bank0
  4293  1F4E  00E9               	movwf	??_ADC_to_string
  4294  1F4F  0869               	movf	??_ADC_to_string,w
  4295  1F50  00DF               	movwf	sprintf@f
  4296  1F51  1683               	bsf	3,5	;RP0=1, select bank1
  4297  1F52  1303               	bcf	3,6	;RP1=0, select bank1
  4298  1F53  0838               	movf	(_mv_temp_val_M+1)^(0+128),w
  4299  1F54  1283               	bcf	3,5	;RP0=0, select bank0
  4300  1F55  1303               	bcf	3,6	;RP1=0, select bank0
  4301  1F56  00E1               	movwf	?_sprintf+2
  4302  1F57  1683               	bsf	3,5	;RP0=1, select bank1
  4303  1F58  1303               	bcf	3,6	;RP1=0, select bank1
  4304  1F59  0837               	movf	_mv_temp_val_M^(0+128),w
  4305  1F5A  1283               	bcf	3,5	;RP0=0, select bank0
  4306  1F5B  1303               	bcf	3,6	;RP1=0, select bank0
  4307  1F5C  00E0               	movwf	?_sprintf+1
  4308  1F5D  30B9               	movlw	(low (_data_TEMP| 0))& (0+255)
  4309  1F5E  120A  158A  2518  160A  158A  	fcall	_sprintf
  4310  1F63                     l115:
  4311  1F63  0008               	return
  4312  1F64                     __end_of_ADC_to_string:
  4313                           
  4314                           	psect	text25
  4315  0D18                     __ptext25:	
  4316 ;; *************** function _sprintf *****************
  4317 ;; Defined at:
  4318 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  sp              1    wreg     PTR unsigned char 
  4321 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  4322 ;;  f               1   63[BANK0 ] PTR const unsigned char 
  4323 ;;		 -> STR_10(5), STR_9(7), STR_8(5), 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  4326 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  4327 ;;  val             4   12[BANK1 ] unsigned long 
  4328 ;;  tmpval          4    8[BANK1 ] struct .
  4329 ;;  fval            3   18[BANK1 ] struct .
  4330 ;;  prec            2   22[BANK1 ] int 
  4331 ;;  eexp            2   16[BANK1 ] int 
  4332 ;;  width           2    6[BANK1 ] int 
  4333 ;;  flag            2    4[BANK1 ] unsigned short 
  4334 ;;  cp              2    0        PTR const unsigned char 
  4335 ;;  len             2    0        unsigned int 
  4336 ;;  c               1   24[BANK1 ] unsigned char 
  4337 ;;  ap              1    3[BANK1 ] PTR void [1]
  4338 ;;		 -> ?_sprintf(2), 
  4339 ;;  d               1    0        unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  2   63[BANK0 ] int 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4349 ;;      Params:         0       4       0       0       0
  4350 ;;      Locals:         0       0      25       0       0
  4351 ;;      Temps:          0       6       0       0       0
  4352 ;;      Totals:         0      10      25       0       0
  4353 ;;Total ram usage:       35 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    4
  4356 ;; This function calls:
  4357 ;;		___awdiv
  4358 ;;		___ftadd
  4359 ;;		___ftge
  4360 ;;		___ftmul
  4361 ;;		___ftneg
  4362 ;;		___ftsub
  4363 ;;		___fttol
  4364 ;;		___lldiv
  4365 ;;		___llmod
  4366 ;;		___lltoft
  4367 ;;		___wmul
  4368 ;;		__div_to_l_
  4369 ;;		__tdiv_to_l_
  4370 ;;		_fround
  4371 ;;		_isdigit
  4372 ;;		_scale
  4373 ;; This function is called by:
  4374 ;;		_ADC_to_string
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _sprintf
  4380  0D18                     _sprintf:
  4381                           
  4382                           ;incstack = 0
  4383                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4384                           ;sprintf@sp stored from wreg
  4385  0D18  1683               	bsf	3,5	;RP0=1, select bank1
  4386  0D19  1303               	bcf	3,6	;RP1=0, select bank1
  4387  0D1A  00E6               	movwf	sprintf@sp^(0+128)
  4388  0D1B                     l3894:
  4389                           
  4390                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 517:  
      +                          int prec;
  4391  0D1B  3060               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4392  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  4393  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  4394  0D1E  00E3               	movwf	??_sprintf
  4395  0D1F  0863               	movf	??_sprintf,w
  4396  0D20  1683               	bsf	3,5	;RP0=1, select bank1
  4397  0D21  1303               	bcf	3,6	;RP1=0, select bank1
  4398  0D22  00D4               	movwf	sprintf@ap^(0+128)
  4399  0D23                     L1:
  4400                           
  4401                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4402  0D23  120A  118A  2EB8   	goto	l4174
  4403  0D26                     l3896:
  4404                           
  4405                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4406  0D26  3025               	movlw	37
  4407  0D27  0669               	xorwf	sprintf@c^(0+128),w
  4408  0D28  1903               	btfsc	3,2
  4409  0D29  2D2B               	goto	u5481
  4410  0D2A  2D2C               	goto	u5480
  4411  0D2B                     u5481:
  4412  0D2B  2D40               	goto	l3902
  4413  0D2C                     u5480:
  4414  0D2C                     l3898:
  4415                           
  4416                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4417  0D2C  0869               	movf	sprintf@c^(0+128),w
  4418  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  4419  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  4420  0D2F  00E3               	movwf	??_sprintf
  4421  0D30  1683               	bsf	3,5	;RP0=1, select bank1
  4422  0D31  1303               	bcf	3,6	;RP1=0, select bank1
  4423  0D32  0866               	movf	sprintf@sp^(0+128),w
  4424  0D33  0084               	movwf	4
  4425  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  4426  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  4427  0D36  0863               	movf	??_sprintf,w
  4428  0D37  1383               	bcf	3,7	;select IRP bank0
  4429  0D38  0080               	movwf	0
  4430  0D39                     l3900:
  4431  0D39  3001               	movlw	1
  4432  0D3A  00E3               	movwf	??_sprintf
  4433  0D3B  0863               	movf	??_sprintf,w
  4434  0D3C  1683               	bsf	3,5	;RP0=1, select bank1
  4435  0D3D  1303               	bcf	3,6	;RP1=0, select bank1
  4436  0D3E  07E6               	addwf	sprintf@sp^(0+128),f
  4437                           
  4438                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  4439  0D3F  2D23               	goto	L1
  4440  0D40                     l3902:
  4441                           
  4442                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  4443  0D40  01D7               	clrf	sprintf@width^(0+128)
  4444  0D41  01D8               	clrf	(sprintf@width+1)^(0+128)
  4445                           
  4446                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4447  0D42  01D5               	clrf	sprintf@flag^(0+128)
  4448  0D43  01D6               	clrf	(sprintf@flag+1)^(0+128)
  4449  0D44                     l3904:
  4450                           
  4451                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  4452  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0D46  085F               	movf	sprintf@f,w
  4455  0D47  0084               	movwf	4
  4456  0D48  160A  118A  200A  120A  158A  	fcall	stringdir
  4457  0D4D  160A  158A  242F  120A  158A  	fcall	_isdigit
  4458  0D52  1C03               	btfss	3,0
  4459  0D53  2D55               	goto	u5491
  4460  0D54  2D56               	goto	u5490
  4461  0D55                     u5491:
  4462  0D55  2DA0               	goto	l3916
  4463  0D56                     u5490:
  4464  0D56                     l3906:
  4465                           
  4466                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  4467  0D56  1683               	bsf	3,5	;RP0=1, select bank1
  4468  0D57  1303               	bcf	3,6	;RP1=0, select bank1
  4469  0D58  01D7               	clrf	sprintf@width^(0+128)
  4470  0D59  01D8               	clrf	(sprintf@width+1)^(0+128)
  4471  0D5A                     l3908:
  4472                           
  4473                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  4474  0D5A  300A               	movlw	10
  4475  0D5B  00F2               	movwf	___wmul@multiplier
  4476  0D5C  3000               	movlw	0
  4477  0D5D  00F3               	movwf	___wmul@multiplier+1
  4478  0D5E  1683               	bsf	3,5	;RP0=1, select bank1
  4479  0D5F  1303               	bcf	3,6	;RP1=0, select bank1
  4480  0D60  0858               	movf	(sprintf@width+1)^(0+128),w
  4481  0D61  00F5               	movwf	___wmul@multiplicand+1
  4482  0D62  0857               	movf	sprintf@width^(0+128),w
  4483  0D63  00F4               	movwf	___wmul@multiplicand
  4484  0D64  120A  158A  2003  120A  158A  	fcall	___wmul
  4485  0D69  0873               	movf	?___wmul+1,w
  4486  0D6A  1683               	bsf	3,5	;RP0=1, select bank1
  4487  0D6B  1303               	bcf	3,6	;RP1=0, select bank1
  4488  0D6C  00D8               	movwf	(sprintf@width+1)^(0+128)
  4489  0D6D  0872               	movf	?___wmul,w
  4490  0D6E  00D7               	movwf	sprintf@width^(0+128)
  4491  0D6F                     l3910:
  4492                           
  4493                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  4494  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  4495  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  4496  0D71  085F               	movf	sprintf@f,w
  4497  0D72  0084               	movwf	4
  4498  0D73  160A  118A  200A  120A  158A  	fcall	stringdir
  4499  0D78  3ED0               	addlw	208
  4500  0D79  00E3               	movwf	??_sprintf
  4501  0D7A  30FF               	movlw	255
  4502  0D7B  1803               	skipnc
  4503  0D7C  3000               	movlw	0
  4504  0D7D  00E4               	movwf	??_sprintf+1
  4505  0D7E  0863               	movf	??_sprintf,w
  4506  0D7F  1683               	bsf	3,5	;RP0=1, select bank1
  4507  0D80  1303               	bcf	3,6	;RP1=0, select bank1
  4508  0D81  07D7               	addwf	sprintf@width^(0+128),f
  4509  0D82  1803               	skipnc
  4510  0D83  0AD8               	incf	(sprintf@width+1)^(0+128),f
  4511  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  4512  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  4513  0D86  0864               	movf	??_sprintf+1,w
  4514  0D87  1683               	bsf	3,5	;RP0=1, select bank1
  4515  0D88  1303               	bcf	3,6	;RP1=0, select bank1
  4516  0D89  07D8               	addwf	(sprintf@width+1)^(0+128),f
  4517  0D8A                     l3912:
  4518  0D8A  3001               	movlw	1
  4519  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  4520  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  4521  0D8D  00E3               	movwf	??_sprintf
  4522  0D8E  0863               	movf	??_sprintf,w
  4523  0D8F  07DF               	addwf	sprintf@f,f
  4524  0D90                     l3914:
  4525                           
  4526                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  4527  0D90  085F               	movf	sprintf@f,w
  4528  0D91  0084               	movwf	4
  4529  0D92  160A  118A  200A  120A  158A  	fcall	stringdir
  4530  0D97  160A  158A  242F  120A  158A  	fcall	_isdigit
  4531  0D9C  1803               	btfsc	3,0
  4532  0D9D  2D9F               	goto	u5501
  4533  0D9E  2DA0               	goto	u5500
  4534  0D9F                     u5501:
  4535  0D9F  2D5A               	goto	l3908
  4536  0DA0                     u5500:
  4537  0DA0                     l3916:
  4538                           
  4539                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  4540  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  4541  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  4542  0DA2  085F               	movf	sprintf@f,w
  4543  0DA3  0084               	movwf	4
  4544  0DA4  160A  118A  200A  120A  158A  	fcall	stringdir
  4545  0DA9  3A2E               	xorlw	46
  4546  0DAA  1D03               	skipz
  4547  0DAB  2DAD               	goto	u5511
  4548  0DAC  2DAE               	goto	u5510
  4549  0DAD                     u5511:
  4550  0DAD  2E04               	goto	l3932
  4551  0DAE                     u5510:
  4552  0DAE                     l3918:
  4553                           
  4554                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 629:    flag |= 0
      +                          x4000;
  4555  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  4556  0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  4557  0DB0  1756               	bsf	(sprintf@flag^(0+128)+1),6
  4558  0DB1                     l3920:
  4559                           
  4560                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  4561  0DB1  3001               	movlw	1
  4562  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  4563  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  4564  0DB4  00E3               	movwf	??_sprintf
  4565  0DB5  0863               	movf	??_sprintf,w
  4566  0DB6  07DF               	addwf	sprintf@f,f
  4567  0DB7                     l3922:
  4568                           
  4569                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  4570  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  4571  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  4572  0DB9  01E7               	clrf	sprintf@prec^(0+128)
  4573  0DBA  01E8               	clrf	(sprintf@prec+1)^(0+128)
  4574                           
  4575                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  4576  0DBB  2DF2               	goto	l3930
  4577  0DBC                     l3924:
  4578                           
  4579                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  4580  0DBC  300A               	movlw	10
  4581  0DBD  00F2               	movwf	___wmul@multiplier
  4582  0DBE  3000               	movlw	0
  4583  0DBF  00F3               	movwf	___wmul@multiplier+1
  4584  0DC0  1683               	bsf	3,5	;RP0=1, select bank1
  4585  0DC1  1303               	bcf	3,6	;RP1=0, select bank1
  4586  0DC2  0868               	movf	(sprintf@prec+1)^(0+128),w
  4587  0DC3  00F5               	movwf	___wmul@multiplicand+1
  4588  0DC4  0867               	movf	sprintf@prec^(0+128),w
  4589  0DC5  00F4               	movwf	___wmul@multiplicand
  4590  0DC6  120A  158A  2003  120A  158A  	fcall	___wmul
  4591  0DCB  0873               	movf	?___wmul+1,w
  4592  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
  4593  0DCD  1303               	bcf	3,6	;RP1=0, select bank1
  4594  0DCE  00E8               	movwf	(sprintf@prec+1)^(0+128)
  4595  0DCF  0872               	movf	?___wmul,w
  4596  0DD0  00E7               	movwf	sprintf@prec^(0+128)
  4597  0DD1                     l3926:
  4598                           
  4599                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  4600  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  4601  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  4602  0DD3  085F               	movf	sprintf@f,w
  4603  0DD4  0084               	movwf	4
  4604  0DD5  160A  118A  200A  120A  158A  	fcall	stringdir
  4605  0DDA  3ED0               	addlw	208
  4606  0DDB  00E3               	movwf	??_sprintf
  4607  0DDC  30FF               	movlw	255
  4608  0DDD  1803               	skipnc
  4609  0DDE  3000               	movlw	0
  4610  0DDF  00E4               	movwf	??_sprintf+1
  4611  0DE0  0863               	movf	??_sprintf,w
  4612  0DE1  1683               	bsf	3,5	;RP0=1, select bank1
  4613  0DE2  1303               	bcf	3,6	;RP1=0, select bank1
  4614  0DE3  07E7               	addwf	sprintf@prec^(0+128),f
  4615  0DE4  1803               	skipnc
  4616  0DE5  0AE8               	incf	(sprintf@prec+1)^(0+128),f
  4617  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  4618  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  4619  0DE8  0864               	movf	??_sprintf+1,w
  4620  0DE9  1683               	bsf	3,5	;RP0=1, select bank1
  4621  0DEA  1303               	bcf	3,6	;RP1=0, select bank1
  4622  0DEB  07E8               	addwf	(sprintf@prec+1)^(0+128),f
  4623  0DEC                     l3928:
  4624  0DEC  3001               	movlw	1
  4625  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  4626  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  4627  0DEF  00E3               	movwf	??_sprintf
  4628  0DF0  0863               	movf	??_sprintf,w
  4629  0DF1  07DF               	addwf	sprintf@f,f
  4630  0DF2                     l3930:
  4631                           
  4632                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  4633  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  4634  0DF3  085F               	movf	sprintf@f,w
  4635  0DF4  0084               	movwf	4
  4636  0DF5  160A  118A  200A  120A  158A  	fcall	stringdir
  4637  0DFA  160A  158A  242F  120A  158A  	fcall	_isdigit
  4638  0DFF  1803               	btfsc	3,0
  4639  0E00  2E02               	goto	u5521
  4640  0E01  2E03               	goto	u5520
  4641  0E02                     u5521:
  4642  0E02  2DBC               	goto	l3924
  4643  0E03                     u5520:
  4644  0E03  2E0E               	goto	l3938
  4645  0E04                     l3932:
  4646                           
  4647                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  4648  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  4649  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  4650  0E06  01E7               	clrf	sprintf@prec^(0+128)
  4651  0E07  01E8               	clrf	(sprintf@prec+1)^(0+128)
  4652  0E08                     l3934:
  4653                           
  4654                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 654:    flag |= 0
      +                          x1000;
  4655  0E08  1656               	bsf	(sprintf@flag^(0+128)+1),4
  4656  0E09  2E0E               	goto	l3938
  4657  0E0A                     l398:	
  4658                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 688:   case 'f':
  4659                           
  4660                           
  4661                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 689:    flag |= 0
      +                          x400;
  4662  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  4663  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  4664  0E0C  1556               	bsf	(sprintf@flag^(0+128)+1),2
  4665                           
  4666                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 690:    break;
  4667  0E0D  2E34               	goto	l3940
  4668  0E0E                     l3938:
  4669  0E0E  3001               	movlw	1
  4670  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  4671  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  4672  0E11  07DF               	addwf	sprintf@f,f
  4673  0E12  30FF               	movlw	-1
  4674  0E13  075F               	addwf	sprintf@f,w
  4675  0E14  0084               	movwf	4
  4676  0E15  160A  118A  200A  120A  158A  	fcall	stringdir
  4677  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  4678  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  4679  0E1C  00E9               	movwf	sprintf@c^(0+128)
  4680  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  4681  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  4682  0E1F  00E3               	movwf	??_sprintf
  4683  0E20  01E4               	clrf	??_sprintf+1
  4684                           
  4685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4686                           ; Switch size 1, requested type "simple"
  4687                           ; Number of cases is 1, Range of values is 0 to 0
  4688                           ; switch strategies available:
  4689                           ; Name         Instructions Cycles
  4690                           ; simple_byte            4     3 (average)
  4691                           ; direct_byte           11     8 (fixed)
  4692                           ; jumptable            260     6 (fixed)
  4693                           ;	Chosen strategy is simple_byte
  4694  0E21  0864               	movf	??_sprintf+1,w
  4695  0E22  3A00               	xorlw	0	; case 0
  4696  0E23  1903               	skipnz
  4697  0E24  2E26               	goto	l4374
  4698  0E25  2D23               	goto	L1
  4699  0E26                     l4374:
  4700                           
  4701                           ; Switch size 1, requested type "simple"
  4702                           ; Number of cases is 4, Range of values is 0 to 105
  4703                           ; switch strategies available:
  4704                           ; Name         Instructions Cycles
  4705                           ; simple_byte           13     7 (average)
  4706                           ; jumptable            260     6 (fixed)
  4707                           ;	Chosen strategy is simple_byte
  4708  0E26  0863               	movf	??_sprintf,w
  4709  0E27  3A00               	xorlw	0	; case 0
  4710  0E28  1903               	skipnz
  4711  0E29  2FFD               	goto	L3
  4712  0E2A  3A64               	xorlw	100	; case 100
  4713  0E2B  1903               	skipnz
  4714  0E2C  2E34               	goto	l3940
  4715  0E2D  3A02               	xorlw	2	; case 102
  4716  0E2E  1903               	skipnz
  4717  0E2F  2E0A               	goto	l398
  4718  0E30  3A0F               	xorlw	15	; case 105
  4719  0E31  1903               	skipnz
  4720  0E32  2E34               	goto	l3940
  4721  0E33  2D23               	goto	L1
  4722  0E34                     l3940:
  4723                           
  4724                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 851:   if(flag & 
      +                          (0x700)) {
  4725  0E34  3000               	movlw	0
  4726  0E35  1683               	bsf	3,5	;RP0=1, select bank1
  4727  0E36  1303               	bcf	3,6	;RP1=0, select bank1
  4728  0E37  0555               	andwf	sprintf@flag^(0+128),w
  4729  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  4730  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  4731  0E3A  00E3               	movwf	??_sprintf
  4732  0E3B  3007               	movlw	7
  4733  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  4734  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  4735  0E3E  0556               	andwf	(sprintf@flag+1)^(0+128),w
  4736  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  4737  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  4738  0E41  00E4               	movwf	??_sprintf+1
  4739  0E42  0863               	movf	??_sprintf,w
  4740  0E43  0464               	iorwf	??_sprintf+1,w
  4741  0E44  1903               	btfsc	3,2
  4742  0E45  2E47               	goto	u5531
  4743  0E46  2E4A               	goto	u5530
  4744  0E47                     u5531:
  4745  0E47  120A  118A  2CAF   	goto	l4096
  4746  0E4A                     u5530:
  4747  0E4A                     l3942:
  4748                           
  4749                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 853:    if(flag &
      +                           0x1000)
  4750  0E4A  1683               	bsf	3,5	;RP0=1, select bank1
  4751  0E4B  1303               	bcf	3,6	;RP1=0, select bank1
  4752  0E4C  1E56               	btfss	(sprintf@flag+1)^(0+128),4
  4753  0E4D  2E4F               	goto	u5541
  4754  0E4E  2E50               	goto	u5540
  4755  0E4F                     u5541:
  4756  0E4F  2E54               	goto	l3946
  4757  0E50                     u5540:
  4758  0E50                     l3944:
  4759                           
  4760                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 855:     prec = 6
      +                          ;
  4761  0E50  3006               	movlw	6
  4762  0E51  00E7               	movwf	sprintf@prec^(0+128)
  4763  0E52  3000               	movlw	0
  4764  0E53  00E8               	movwf	(sprintf@prec^(0+128)+1)
  4765  0E54                     l3946:
  4766                           
  4767                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 856:    fval = (*
      +                          (double *)__va_arg((*(double **)ap), (double)0));
  4768  0E54  0854               	movf	sprintf@ap^(0+128),w
  4769  0E55  0084               	movwf	4
  4770  0E56  1383               	bcf	3,7	;select IRP bank0
  4771  0E57  0800               	movf	0,w
  4772  0E58  00E3               	movwf	sprintf@fval^(0+128)
  4773  0E59  0A84               	incf	4,f
  4774  0E5A  0800               	movf	0,w
  4775  0E5B  00E4               	movwf	(sprintf@fval+1)^(0+128)
  4776  0E5C  0A84               	incf	4,f
  4777  0E5D  0800               	movf	0,w
  4778  0E5E  00E5               	movwf	(sprintf@fval+2)^(0+128)
  4779  0E5F                     l3948:
  4780  0E5F  3003               	movlw	3
  4781  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  4782  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  4783  0E62  00E3               	movwf	??_sprintf
  4784  0E63  0863               	movf	??_sprintf,w
  4785  0E64  1683               	bsf	3,5	;RP0=1, select bank1
  4786  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  4787  0E66  07D4               	addwf	sprintf@ap^(0+128),f
  4788  0E67                     l3950:
  4789                           
  4790                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 857:    if(fval <
      +                           0.0) {
  4791  0E67  0863               	movf	sprintf@fval^(0+128),w
  4792  0E68  00F2               	movwf	___ftge@ff1
  4793  0E69  0864               	movf	(sprintf@fval+1)^(0+128),w
  4794  0E6A  00F3               	movwf	___ftge@ff1+1
  4795  0E6B  0865               	movf	(sprintf@fval+2)^(0+128),w
  4796  0E6C  00F4               	movwf	___ftge@ff1+2
  4797  0E6D  3000               	movlw	0
  4798  0E6E  00F5               	movwf	___ftge@ff2
  4799  0E6F  3000               	movlw	0
  4800  0E70  00F6               	movwf	___ftge@ff2+1
  4801  0E71  3000               	movlw	0
  4802  0E72  00F7               	movwf	___ftge@ff2+2
  4803  0E73  160A  158A  25DF  120A  158A  	fcall	___ftge
  4804  0E78  1803               	btfsc	3,0
  4805  0E79  2E7B               	goto	u5551
  4806  0E7A  2E7C               	goto	u5550
  4807  0E7B                     u5551:
  4808  0E7B  2E95               	goto	l3956
  4809  0E7C                     u5550:
  4810  0E7C                     l3952:
  4811                           
  4812                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 858:     fval = -
      +                          fval;
  4813  0E7C  1683               	bsf	3,5	;RP0=1, select bank1
  4814  0E7D  1303               	bcf	3,6	;RP1=0, select bank1
  4815  0E7E  0863               	movf	sprintf@fval^(0+128),w
  4816  0E7F  00F2               	movwf	___ftneg@f1
  4817  0E80  0864               	movf	(sprintf@fval+1)^(0+128),w
  4818  0E81  00F3               	movwf	___ftneg@f1+1
  4819  0E82  0865               	movf	(sprintf@fval+2)^(0+128),w
  4820  0E83  00F4               	movwf	___ftneg@f1+2
  4821  0E84  160A  158A  240C  120A  158A  	fcall	___ftneg
  4822  0E89  0872               	movf	?___ftneg,w
  4823  0E8A  1683               	bsf	3,5	;RP0=1, select bank1
  4824  0E8B  1303               	bcf	3,6	;RP1=0, select bank1
  4825  0E8C  00E3               	movwf	sprintf@fval^(0+128)
  4826  0E8D  0873               	movf	?___ftneg+1,w
  4827  0E8E  00E4               	movwf	(sprintf@fval+1)^(0+128)
  4828  0E8F  0874               	movf	?___ftneg+2,w
  4829  0E90  00E5               	movwf	(sprintf@fval+2)^(0+128)
  4830  0E91                     l3954:
  4831                           
  4832                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 859:     flag |= 
      +                          0x03;
  4833  0E91  3003               	movlw	3
  4834  0E92  04D5               	iorwf	sprintf@flag^(0+128),f
  4835  0E93  3000               	movlw	0
  4836  0E94  04D6               	iorwf	(sprintf@flag+1)^(0+128),f
  4837  0E95                     l3956:
  4838                           
  4839                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 861:    eexp = 0;
  4840  0E95  1683               	bsf	3,5	;RP0=1, select bank1
  4841  0E96  1303               	bcf	3,6	;RP1=0, select bank1
  4842  0E97  01E1               	clrf	sprintf@eexp^(0+128)
  4843  0E98  01E2               	clrf	(sprintf@eexp+1)^(0+128)
  4844  0E99                     l3958:
  4845                           
  4846                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 862:    if( fval!
      +                          =0) {
  4847  0E99  0865               	movf	(sprintf@fval+2)^(0+128),w
  4848  0E9A  0464               	iorwf	(sprintf@fval+1)^(0+128),w
  4849  0E9B  0463               	iorwf	sprintf@fval^(0+128),w
  4850  0E9C  1903               	skipnz
  4851  0E9D  2E9F               	goto	u5561
  4852  0E9E  2EA0               	goto	u5560
  4853  0E9F                     u5561:
  4854  0E9F  2FA2               	goto	l3984
  4855  0EA0                     u5560:
  4856  0EA0                     l3960:
  4857                           
  4858                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 863:     (void)(*
      +                          (&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4859  0EA0  30E3               	movlw	low (sprintf@fval| 0)
  4860  0EA1  0084               	movwf	4
  4861  0EA2  1383               	bcf	3,7	;select IRP bank1
  4862  0EA3  0800               	movf	0,w
  4863  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  4864  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  4865  0EA6  00E3               	movwf	??_sprintf
  4866  0EA7  0A84               	incf	4,f
  4867  0EA8  0800               	movf	0,w
  4868  0EA9  00E4               	movwf	??_sprintf+1
  4869  0EAA  0A84               	incf	4,f
  4870  0EAB  0800               	movf	0,w
  4871  0EAC  00E5               	movwf	??_sprintf+2
  4872  0EAD  0A84               	incf	4,f
  4873  0EAE  0800               	movf	0,w
  4874  0EAF  00E6               	movwf	??_sprintf+3
  4875  0EB0  300F               	movlw	15
  4876  0EB1                     u5575:
  4877  0EB1  1003               	clrc
  4878  0EB2  0CE6               	rrf	??_sprintf+3,f
  4879  0EB3  0CE5               	rrf	??_sprintf+2,f
  4880  0EB4  0CE4               	rrf	??_sprintf+1,f
  4881  0EB5  0CE3               	rrf	??_sprintf,f
  4882  0EB6                     u5570:
  4883  0EB6  3EFF               	addlw	-1
  4884  0EB7  1D03               	skipz
  4885  0EB8  2EB1               	goto	u5575
  4886  0EB9  30FF               	movlw	255
  4887  0EBA  0563               	andwf	??_sprintf,w
  4888  0EBB  00E7               	movwf	??_sprintf+4
  4889  0EBC  3000               	movlw	0
  4890  0EBD  0564               	andwf	??_sprintf+1,w
  4891  0EBE  00E8               	movwf	??_sprintf+5
  4892  0EBF  0867               	movf	??_sprintf+4,w
  4893  0EC0  3E82               	addlw	130
  4894  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  4895  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  4896  0EC3  00E1               	movwf	sprintf@eexp^(0+128)
  4897  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  4898  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  4899  0EC6  0868               	movf	??_sprintf+5,w
  4900  0EC7  1803               	skipnc
  4901  0EC8  3E01               	addlw	1
  4902  0EC9  3EFF               	addlw	255
  4903  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  4904  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  4905  0ECC  00E2               	movwf	(sprintf@eexp+1)^(0+128)
  4906  0ECD                     l3962:
  4907                           
  4908                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 864:     eexp--;
  4909  0ECD  30FF               	movlw	255
  4910  0ECE  07E1               	addwf	sprintf@eexp^(0+128),f
  4911  0ECF  1803               	skipnc
  4912  0ED0  0AE2               	incf	(sprintf@eexp+1)^(0+128),f
  4913  0ED1  30FF               	movlw	255
  4914  0ED2  07E2               	addwf	(sprintf@eexp+1)^(0+128),f
  4915  0ED3                     l3964:
  4916                           
  4917                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 865:     eexp *= 
      +                          3;
  4918  0ED3  3003               	movlw	3
  4919  0ED4  00F2               	movwf	___wmul@multiplier
  4920  0ED5  3000               	movlw	0
  4921  0ED6  00F3               	movwf	___wmul@multiplier+1
  4922  0ED7  0862               	movf	(sprintf@eexp+1)^(0+128),w
  4923  0ED8  00F5               	movwf	___wmul@multiplicand+1
  4924  0ED9  0861               	movf	sprintf@eexp^(0+128),w
  4925  0EDA  00F4               	movwf	___wmul@multiplicand
  4926  0EDB  120A  158A  2003  120A  158A  	fcall	___wmul
  4927  0EE0  0873               	movf	?___wmul+1,w
  4928  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  4929  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  4930  0EE3  00E2               	movwf	(sprintf@eexp+1)^(0+128)
  4931  0EE4  0872               	movf	?___wmul,w
  4932  0EE5  00E1               	movwf	sprintf@eexp^(0+128)
  4933  0EE6                     l3966:
  4934                           
  4935                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 866:     eexp /= 
      +                          10;
  4936  0EE6  300A               	movlw	10
  4937  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  4938  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  4939  0EE9  00A0               	movwf	___awdiv@divisor
  4940  0EEA  3000               	movlw	0
  4941  0EEB  00A1               	movwf	___awdiv@divisor+1
  4942  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  4943  0EED  1303               	bcf	3,6	;RP1=0, select bank1
  4944  0EEE  0862               	movf	(sprintf@eexp+1)^(0+128),w
  4945  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  4946  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  4947  0EF1  00A3               	movwf	___awdiv@dividend+1
  4948  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  4949  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  4950  0EF4  0861               	movf	sprintf@eexp^(0+128),w
  4951  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  4952  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  4953  0EF7  00A2               	movwf	___awdiv@dividend
  4954  0EF8  160A  118A  2255  120A  158A  	fcall	___awdiv
  4955  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  4956  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  4957  0EFF  0821               	movf	?___awdiv+1,w
  4958  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  4959  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  4960  0F02  00E2               	movwf	(sprintf@eexp+1)^(0+128)
  4961  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  4962  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  4963  0F05  0820               	movf	?___awdiv,w
  4964  0F06  1683               	bsf	3,5	;RP0=1, select bank1
  4965  0F07  1303               	bcf	3,6	;RP1=0, select bank1
  4966  0F08  00E1               	movwf	sprintf@eexp^(0+128)
  4967  0F09                     l3968:
  4968                           
  4969                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 867:     if(eexp 
      +                          < 0)
  4970  0F09  1FE2               	btfss	(sprintf@eexp+1)^(0+128),7
  4971  0F0A  2F0C               	goto	u5581
  4972  0F0B  2F0D               	goto	u5580
  4973  0F0C                     u5581:
  4974  0F0C  2F13               	goto	l3972
  4975  0F0D                     u5580:
  4976  0F0D                     l3970:
  4977                           
  4978                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 868:      eexp--;
  4979  0F0D  30FF               	movlw	255
  4980  0F0E  07E1               	addwf	sprintf@eexp^(0+128),f
  4981  0F0F  1803               	skipnc
  4982  0F10  0AE2               	incf	(sprintf@eexp+1)^(0+128),f
  4983  0F11  30FF               	movlw	255
  4984  0F12  07E2               	addwf	(sprintf@eexp+1)^(0+128),f
  4985  0F13                     l3972:
  4986                           
  4987                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 872:     tmpval.i
      +                          nteg = scale(-eexp);
  4988  0F13  0361               	decf	sprintf@eexp^(0+128),w
  4989  0F14  3AFF               	xorlw	255
  4990  0F15  120A  158A  225D  120A  158A  	fcall	_scale
  4991  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  4992  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  4993  0F1C  083C               	movf	?_scale,w
  4994  0F1D  1683               	bsf	3,5	;RP0=1, select bank1
  4995  0F1E  1303               	bcf	3,6	;RP1=0, select bank1
  4996  0F1F  00D9               	movwf	sprintf@tmpval^(0+128)
  4997  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  4998  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  4999  0F22  083D               	movf	?_scale+1,w
  5000  0F23  1683               	bsf	3,5	;RP0=1, select bank1
  5001  0F24  1303               	bcf	3,6	;RP1=0, select bank1
  5002  0F25  00DA               	movwf	(sprintf@tmpval+1)^(0+128)
  5003  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  5004  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  5005  0F28  083E               	movf	?_scale+2,w
  5006  0F29  1683               	bsf	3,5	;RP0=1, select bank1
  5007  0F2A  1303               	bcf	3,6	;RP1=0, select bank1
  5008  0F2B  00DB               	movwf	(sprintf@tmpval+2)^(0+128)
  5009  0F2C                     l3974:
  5010                           
  5011                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 873:     tmpval.i
      +                          nteg *= fval;
  5012  0F2C  0863               	movf	sprintf@fval^(0+128),w
  5013  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  5014  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  5015  0F2F  00AC               	movwf	___ftmul@f1
  5016  0F30  1683               	bsf	3,5	;RP0=1, select bank1
  5017  0F31  1303               	bcf	3,6	;RP1=0, select bank1
  5018  0F32  0864               	movf	(sprintf@fval+1)^(0+128),w
  5019  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  5020  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  5021  0F35  00AD               	movwf	___ftmul@f1+1
  5022  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  5023  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  5024  0F38  0865               	movf	(sprintf@fval+2)^(0+128),w
  5025  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  5026  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  5027  0F3B  00AE               	movwf	___ftmul@f1+2
  5028  0F3C  1683               	bsf	3,5	;RP0=1, select bank1
  5029  0F3D  1303               	bcf	3,6	;RP1=0, select bank1
  5030  0F3E  0859               	movf	sprintf@tmpval^(0+128),w
  5031  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  5032  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  5033  0F41  00AF               	movwf	___ftmul@f2
  5034  0F42  1683               	bsf	3,5	;RP0=1, select bank1
  5035  0F43  1303               	bcf	3,6	;RP1=0, select bank1
  5036  0F44  085A               	movf	(sprintf@tmpval+1)^(0+128),w
  5037  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  5038  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  5039  0F47  00B0               	movwf	___ftmul@f2+1
  5040  0F48  1683               	bsf	3,5	;RP0=1, select bank1
  5041  0F49  1303               	bcf	3,6	;RP1=0, select bank1
  5042  0F4A  085B               	movf	(sprintf@tmpval+2)^(0+128),w
  5043  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  5044  0F4C  1303               	bcf	3,6	;RP1=0, select bank0
  5045  0F4D  00B1               	movwf	___ftmul@f2+2
  5046  0F4E  160A  118A  24B9  120A  158A  	fcall	___ftmul
  5047  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  5048  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  5049  0F55  082C               	movf	?___ftmul,w
  5050  0F56  1683               	bsf	3,5	;RP0=1, select bank1
  5051  0F57  1303               	bcf	3,6	;RP1=0, select bank1
  5052  0F58  00D9               	movwf	sprintf@tmpval^(0+128)
  5053  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  5054  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  5055  0F5B  082D               	movf	?___ftmul+1,w
  5056  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  5057  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  5058  0F5E  00DA               	movwf	(sprintf@tmpval+1)^(0+128)
  5059  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  5060  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  5061  0F61  082E               	movf	?___ftmul+2,w
  5062  0F62  1683               	bsf	3,5	;RP0=1, select bank1
  5063  0F63  1303               	bcf	3,6	;RP1=0, select bank1
  5064  0F64  00DB               	movwf	(sprintf@tmpval+2)^(0+128)
  5065  0F65                     l3976:
  5066                           
  5067                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 874:     if(tmpva
      +                          l.integ < 1.0)
  5068  0F65  0859               	movf	sprintf@tmpval^(0+128),w
  5069  0F66  00F2               	movwf	___ftge@ff1
  5070  0F67  085A               	movf	(sprintf@tmpval+1)^(0+128),w
  5071  0F68  00F3               	movwf	___ftge@ff1+1
  5072  0F69  085B               	movf	(sprintf@tmpval+2)^(0+128),w
  5073  0F6A  00F4               	movwf	___ftge@ff1+2
  5074  0F6B  3000               	movlw	0
  5075  0F6C  00F5               	movwf	___ftge@ff2
  5076  0F6D  3080               	movlw	128
  5077  0F6E  00F6               	movwf	___ftge@ff2+1
  5078  0F6F  303F               	movlw	63
  5079  0F70  00F7               	movwf	___ftge@ff2+2
  5080  0F71  160A  158A  25DF  120A  158A  	fcall	___ftge
  5081  0F76  1803               	btfsc	3,0
  5082  0F77  2F79               	goto	u5591
  5083  0F78  2F7A               	goto	u5590
  5084  0F79                     u5591:
  5085  0F79  2F83               	goto	l3980
  5086  0F7A                     u5590:
  5087  0F7A                     l3978:
  5088                           
  5089                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 875:      eexp--;
  5090  0F7A  30FF               	movlw	255
  5091  0F7B  1683               	bsf	3,5	;RP0=1, select bank1
  5092  0F7C  1303               	bcf	3,6	;RP1=0, select bank1
  5093  0F7D  07E1               	addwf	sprintf@eexp^(0+128),f
  5094  0F7E  1803               	skipnc
  5095  0F7F  0AE2               	incf	(sprintf@eexp+1)^(0+128),f
  5096  0F80  30FF               	movlw	255
  5097  0F81  07E2               	addwf	(sprintf@eexp+1)^(0+128),f
  5098  0F82  2FA2               	goto	l3984
  5099  0F83                     l3980:
  5100  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  5101  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  5102  0F85  0859               	movf	sprintf@tmpval^(0+128),w
  5103  0F86  00F2               	movwf	___ftge@ff1
  5104  0F87  085A               	movf	(sprintf@tmpval+1)^(0+128),w
  5105  0F88  00F3               	movwf	___ftge@ff1+1
  5106  0F89  085B               	movf	(sprintf@tmpval+2)^(0+128),w
  5107  0F8A  00F4               	movwf	___ftge@ff1+2
  5108  0F8B  3000               	movlw	0
  5109  0F8C  00F5               	movwf	___ftge@ff2
  5110  0F8D  3020               	movlw	32
  5111  0F8E  00F6               	movwf	___ftge@ff2+1
  5112  0F8F  3041               	movlw	65
  5113  0F90  00F7               	movwf	___ftge@ff2+2
  5114  0F91  160A  158A  25DF  120A  158A  	fcall	___ftge
  5115  0F96  1C03               	btfss	3,0
  5116  0F97  2F99               	goto	u5601
  5117  0F98  2F9A               	goto	u5600
  5118  0F99                     u5601:
  5119  0F99  2FA2               	goto	l3984
  5120  0F9A                     u5600:
  5121  0F9A                     l3982:
  5122                           
  5123                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 877:      eexp++;
  5124  0F9A  3001               	movlw	1
  5125  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  5126  0F9C  1303               	bcf	3,6	;RP1=0, select bank1
  5127  0F9D  07E1               	addwf	sprintf@eexp^(0+128),f
  5128  0F9E  1803               	skipnc
  5129  0F9F  0AE2               	incf	(sprintf@eexp+1)^(0+128),f
  5130  0FA0  3000               	movlw	0
  5131  0FA1  07E2               	addwf	(sprintf@eexp+1)^(0+128),f
  5132  0FA2                     l3984:
  5133                           
  5134                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1138:      if(pre
      +                          c <= 12)
  5135  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  5136  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  5137  0FA4  0868               	movf	(sprintf@prec+1)^(0+128),w
  5138  0FA5  3A80               	xorlw	128
  5139  0FA6  00FF               	movwf	btemp+1
  5140  0FA7  3080               	movlw	128
  5141  0FA8  027F               	subwf	btemp+1,w
  5142  0FA9  1D03               	skipz
  5143  0FAA  2FAD               	goto	u5615
  5144  0FAB  300D               	movlw	13
  5145  0FAC  0267               	subwf	sprintf@prec^(0+128),w
  5146  0FAD                     u5615:
  5147  0FAD  1803               	skipnc
  5148  0FAE  2FB0               	goto	u5611
  5149  0FAF  2FB1               	goto	u5610
  5150  0FB0                     u5611:
  5151  0FB0  2FEA               	goto	l3988
  5152  0FB1                     u5610:
  5153  0FB1                     l3986:
  5154                           
  5155                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1139:       fval 
      +                          += fround((unsigned int)prec);
  5156  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  5157  0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  5158  0FB3  0867               	movf	sprintf@prec^(0+128),w
  5159  0FB4  120A  158A  20B4  120A  158A  	fcall	_fround
  5160  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  5161  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  5162  0FBB  083C               	movf	?_fround,w
  5163  0FBC  00CC               	movwf	___ftadd@f1
  5164  0FBD  083D               	movf	?_fround+1,w
  5165  0FBE  00CD               	movwf	___ftadd@f1+1
  5166  0FBF  083E               	movf	?_fround+2,w
  5167  0FC0  00CE               	movwf	___ftadd@f1+2
  5168  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  5169  0FC2  1303               	bcf	3,6	;RP1=0, select bank1
  5170  0FC3  0863               	movf	sprintf@fval^(0+128),w
  5171  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  5172  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  5173  0FC6  00CF               	movwf	___ftadd@f2
  5174  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  5175  0FC8  1303               	bcf	3,6	;RP1=0, select bank1
  5176  0FC9  0864               	movf	(sprintf@fval+1)^(0+128),w
  5177  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  5178  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  5179  0FCC  00D0               	movwf	___ftadd@f2+1
  5180  0FCD  1683               	bsf	3,5	;RP0=1, select bank1
  5181  0FCE  1303               	bcf	3,6	;RP1=0, select bank1
  5182  0FCF  0865               	movf	(sprintf@fval+2)^(0+128),w
  5183  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  5184  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  5185  0FD2  00D1               	movwf	___ftadd@f2+2
  5186  0FD3  160A  118A  26CA  120A  158A  	fcall	___ftadd
  5187  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  5188  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  5189  0FDA  084C               	movf	?___ftadd,w
  5190  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  5191  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  5192  0FDD  00E3               	movwf	sprintf@fval^(0+128)
  5193  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5194  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5195  0FE0  084D               	movf	?___ftadd+1,w
  5196  0FE1  1683               	bsf	3,5	;RP0=1, select bank1
  5197  0FE2  1303               	bcf	3,6	;RP1=0, select bank1
  5198  0FE3  00E4               	movwf	(sprintf@fval+1)^(0+128)
  5199  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  5200  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  5201  0FE6  084E               	movf	?___ftadd+2,w
  5202  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  5203  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  5204  0FE9  00E5               	movwf	(sprintf@fval+2)^(0+128)
  5205  0FEA                     l3988:
  5206                           
  5207                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1142:     if((eex
      +                          p > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  5208  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  5209  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  5210  0FEC  0862               	movf	(sprintf@eexp+1)^(0+128),w
  5211  0FED  3A80               	xorlw	128
  5212  0FEE  00FF               	movwf	btemp+1
  5213  0FEF  3080               	movlw	128
  5214  0FF0  027F               	subwf	btemp+1,w
  5215  0FF1  1D03               	skipz
  5216  0FF2  2FF5               	goto	u5625
  5217  0FF3  300A               	movlw	10
  5218  0FF4  0261               	subwf	sprintf@eexp^(0+128),w
  5219  0FF5                     u5625:
  5220  0FF5  1803               	skipnc
  5221  0FF6  2FFA               	goto	u5621
  5222  0FF7  120A  118A  2822   	goto	u5620
  5223  0FFA                     u5621:
  5224  0FFA  120A  118A  2859   	goto	l3996
  5225  0FFD                     L3:
  5226  0FFD                     L2:
  5227  0FFD  120A  118A  2ECF   	ljmp	l4176
  5228                           
  5229                           	psect	text26
  5230  0A5D                     __ptext26:	
  5231 ;; *************** function _scale *****************
  5232 ;; Defined at:
  5233 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  scl             1    wreg     char 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;  scl             1   36[BANK0 ] char 
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  3   28[BANK0 ] char 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5247 ;;      Params:         0       3       0       0       0
  5248 ;;      Locals:         0       4       0       0       0
  5249 ;;      Temps:          0       2       0       0       0
  5250 ;;      Totals:         0       9       0       0       0
  5251 ;;Total ram usage:        9 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    3
  5254 ;; This function calls:
  5255 ;;		___awdiv
  5256 ;;		___awmod
  5257 ;;		___bmul
  5258 ;;		___ftmul
  5259 ;; This function is called by:
  5260 ;;		_sprintf
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           
  5265                           ;psect for function _scale
  5266  0A5D                     _scale:
  5267                           
  5268                           ;incstack = 0
  5269                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5270                           ;scale@scl stored from wreg
  5271  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0A5F  00C4               	movwf	scale@scl
  5274  0A60                     l3720:
  5275                           
  5276                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 433: scale(signed
      +                           char scl);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 434: {;
      +                          C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 436:  if(scl < 0) 
      +                          {
  5277  0A60  1FC4               	btfss	scale@scl,7
  5278  0A61  2A63               	goto	u5091
  5279  0A62  2A64               	goto	u5090
  5280  0A63                     u5091:
  5281  0A63  2BBF               	goto	l3742
  5282  0A64                     u5090:
  5283  0A64                     l3722:
  5284                           
  5285                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 437:   scl = -scl
      +                          ;
  5286  0A64  09C4               	comf	scale@scl,f
  5287  0A65  0AC4               	incf	scale@scl,f
  5288  0A66                     l3724:
  5289                           
  5290                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 438:   if(scl>=11
      +                          0)
  5291  0A66  0844               	movf	scale@scl,w
  5292  0A67  3A80               	xorlw	128
  5293  0A68  3E12               	addlw	-238
  5294  0A69  1C03               	skipc
  5295  0A6A  2A6C               	goto	u5101
  5296  0A6B  2A6D               	goto	u5100
  5297  0A6C                     u5101:
  5298  0A6C  2B2B               	goto	l3732
  5299  0A6D                     u5100:
  5300  0A6D                     l3726:
  5301                           
  5302                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  5303  0A6D  3003               	movlw	3
  5304  0A6E  00BF               	movwf	??_scale
  5305  0A6F  083F               	movf	??_scale,w
  5306  0A70  00A8               	movwf	___bmul@multiplicand
  5307  0A71  0844               	movf	scale@scl,w
  5308  0A72  00F4               	movwf	___awmod@dividend
  5309  0A73  01F5               	clrf	___awmod@dividend+1
  5310  0A74  1BF4               	btfsc	___awmod@dividend,7
  5311  0A75  03F5               	decf	___awmod@dividend+1,f
  5312  0A76  3064               	movlw	100
  5313  0A77  00F2               	movwf	___awmod@divisor
  5314  0A78  3000               	movlw	0
  5315  0A79  00F3               	movwf	___awmod@divisor+1
  5316  0A7A  160A  118A  2138  120A  158A  	fcall	___awmod
  5317  0A7F  0873               	movf	?___awmod+1,w
  5318  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  5319  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  5320  0A82  00A3               	movwf	___awdiv@dividend+1
  5321  0A83  0872               	movf	?___awmod,w
  5322  0A84  00A2               	movwf	___awdiv@dividend
  5323  0A85  300A               	movlw	10
  5324  0A86  00A0               	movwf	___awdiv@divisor
  5325  0A87  3000               	movlw	0
  5326  0A88  00A1               	movwf	___awdiv@divisor+1
  5327  0A89  160A  118A  2255  120A  158A  	fcall	___awdiv
  5328  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  5329  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  5330  0A90  0820               	movf	?___awdiv,w
  5331  0A91  120A  118A  27E9  120A  158A  	fcall	___bmul
  5332  0A96  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  5333  0A97  0084               	movwf	4
  5334  0A98  160A  118A  200A  120A  158A  	fcall	stringdir
  5335  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  5336  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  5337  0A9F  00AC               	movwf	___ftmul@f1
  5338  0AA0  160A  118A  200A  120A  158A  	fcall	stringdir
  5339  0AA5  00AD               	movwf	___ftmul@f1+1
  5340  0AA6  160A  118A  200A  120A  158A  	fcall	stringdir
  5341  0AAB  00AE               	movwf	___ftmul@f1+2
  5342  0AAC  3003               	movlw	3
  5343  0AAD  00C0               	movwf	??_scale+1
  5344  0AAE  0840               	movf	??_scale+1,w
  5345  0AAF  00A8               	movwf	___bmul@multiplicand
  5346  0AB0  0844               	movf	scale@scl,w
  5347  0AB1  00A2               	movwf	___awdiv@dividend
  5348  0AB2  01A3               	clrf	___awdiv@dividend+1
  5349  0AB3  1BA2               	btfsc	___awdiv@dividend,7
  5350  0AB4  03A3               	decf	___awdiv@dividend+1,f
  5351  0AB5  3064               	movlw	100
  5352  0AB6  00A0               	movwf	___awdiv@divisor
  5353  0AB7  3000               	movlw	0
  5354  0AB8  00A1               	movwf	___awdiv@divisor+1
  5355  0AB9  160A  118A  2255  120A  158A  	fcall	___awdiv
  5356  0ABE  1283               	bcf	3,5	;RP0=0, select bank0
  5357  0ABF  1303               	bcf	3,6	;RP1=0, select bank0
  5358  0AC0  0820               	movf	?___awdiv,w
  5359  0AC1  120A  118A  27E9  120A  158A  	fcall	___bmul
  5360  0AC6  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  5361  0AC7  0084               	movwf	4
  5362  0AC8  160A  118A  200A  120A  158A  	fcall	stringdir
  5363  0ACD  1283               	bcf	3,5	;RP0=0, select bank0
  5364  0ACE  1303               	bcf	3,6	;RP1=0, select bank0
  5365  0ACF  00AF               	movwf	___ftmul@f2
  5366  0AD0  160A  118A  200A  120A  158A  	fcall	stringdir
  5367  0AD5  00B0               	movwf	___ftmul@f2+1
  5368  0AD6  160A  118A  200A  120A  158A  	fcall	stringdir
  5369  0ADB  00B1               	movwf	___ftmul@f2+2
  5370  0ADC  160A  118A  24B9  120A  158A  	fcall	___ftmul
  5371  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  5372  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  5373  0AE3  082C               	movf	?___ftmul,w
  5374  0AE4  00C1               	movwf	_scale$1230
  5375  0AE5  082D               	movf	?___ftmul+1,w
  5376  0AE6  00C2               	movwf	_scale$1230+1
  5377  0AE7  082E               	movf	?___ftmul+2,w
  5378  0AE8  00C3               	movwf	_scale$1230+2
  5379                           
  5380                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  5381  0AE9  3003               	movlw	3
  5382  0AEA  00BF               	movwf	??_scale
  5383  0AEB  083F               	movf	??_scale,w
  5384  0AEC  00A8               	movwf	___bmul@multiplicand
  5385  0AED  0844               	movf	scale@scl,w
  5386  0AEE  00F4               	movwf	___awmod@dividend
  5387  0AEF  01F5               	clrf	___awmod@dividend+1
  5388  0AF0  1BF4               	btfsc	___awmod@dividend,7
  5389  0AF1  03F5               	decf	___awmod@dividend+1,f
  5390  0AF2  300A               	movlw	10
  5391  0AF3  00F2               	movwf	___awmod@divisor
  5392  0AF4  3000               	movlw	0
  5393  0AF5  00F3               	movwf	___awmod@divisor+1
  5394  0AF6  160A  118A  2138  120A  158A  	fcall	___awmod
  5395  0AFB  0872               	movf	?___awmod,w
  5396  0AFC  120A  118A  27E9  120A  158A  	fcall	___bmul
  5397  0B01  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5398  0B02  0084               	movwf	4
  5399  0B03  160A  118A  200A  120A  158A  	fcall	stringdir
  5400  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  5401  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  5402  0B0A  00AC               	movwf	___ftmul@f1
  5403  0B0B  160A  118A  200A  120A  158A  	fcall	stringdir
  5404  0B10  00AD               	movwf	___ftmul@f1+1
  5405  0B11  160A  118A  200A  120A  158A  	fcall	stringdir
  5406  0B16  00AE               	movwf	___ftmul@f1+2
  5407  0B17  0841               	movf	_scale$1230,w
  5408  0B18  00AF               	movwf	___ftmul@f2
  5409  0B19  0842               	movf	_scale$1230+1,w
  5410  0B1A  00B0               	movwf	___ftmul@f2+1
  5411  0B1B  0843               	movf	_scale$1230+2,w
  5412  0B1C  00B1               	movwf	___ftmul@f2+2
  5413  0B1D  160A  118A  24B9  120A  158A  	fcall	___ftmul
  5414  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  5415  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  5416  0B24  082C               	movf	?___ftmul,w
  5417  0B25  00BC               	movwf	?_scale
  5418  0B26  082D               	movf	?___ftmul+1,w
  5419  0B27  00BD               	movwf	?_scale+1
  5420  0B28  082E               	movf	?___ftmul+2,w
  5421  0B29  00BE               	movwf	?_scale+2
  5422  0B2A  2D17               	goto	l376
  5423  0B2B                     l3732:
  5424  0B2B  0844               	movf	scale@scl,w
  5425  0B2C  3A80               	xorlw	128
  5426  0B2D  3E75               	addlw	-139
  5427  0B2E  1C03               	skipc
  5428  0B2F  2B31               	goto	u5111
  5429  0B30  2B32               	goto	u5110
  5430  0B31                     u5111:
  5431  0B31  2B9E               	goto	l3738
  5432  0B32                     u5110:
  5433  0B32                     l3734:
  5434                           
  5435                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 441:    return _n
      +                          powers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5436  0B32  3003               	movlw	3
  5437  0B33  00BF               	movwf	??_scale
  5438  0B34  083F               	movf	??_scale,w
  5439  0B35  00A8               	movwf	___bmul@multiplicand
  5440  0B36  0844               	movf	scale@scl,w
  5441  0B37  00F4               	movwf	___awmod@dividend
  5442  0B38  01F5               	clrf	___awmod@dividend+1
  5443  0B39  1BF4               	btfsc	___awmod@dividend,7
  5444  0B3A  03F5               	decf	___awmod@dividend+1,f
  5445  0B3B  300A               	movlw	10
  5446  0B3C  00F2               	movwf	___awmod@divisor
  5447  0B3D  3000               	movlw	0
  5448  0B3E  00F3               	movwf	___awmod@divisor+1
  5449  0B3F  160A  118A  2138  120A  158A  	fcall	___awmod
  5450  0B44  0872               	movf	?___awmod,w
  5451  0B45  120A  118A  27E9  120A  158A  	fcall	___bmul
  5452  0B4A  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5453  0B4B  0084               	movwf	4
  5454  0B4C  160A  118A  200A  120A  158A  	fcall	stringdir
  5455  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  5456  0B52  1303               	bcf	3,6	;RP1=0, select bank0
  5457  0B53  00AC               	movwf	___ftmul@f1
  5458  0B54  160A  118A  200A  120A  158A  	fcall	stringdir
  5459  0B59  00AD               	movwf	___ftmul@f1+1
  5460  0B5A  160A  118A  200A  120A  158A  	fcall	stringdir
  5461  0B5F  00AE               	movwf	___ftmul@f1+2
  5462  0B60  3003               	movlw	3
  5463  0B61  00C0               	movwf	??_scale+1
  5464  0B62  0840               	movf	??_scale+1,w
  5465  0B63  00A8               	movwf	___bmul@multiplicand
  5466  0B64  0844               	movf	scale@scl,w
  5467  0B65  00A2               	movwf	___awdiv@dividend
  5468  0B66  01A3               	clrf	___awdiv@dividend+1
  5469  0B67  1BA2               	btfsc	___awdiv@dividend,7
  5470  0B68  03A3               	decf	___awdiv@dividend+1,f
  5471  0B69  300A               	movlw	10
  5472  0B6A  00A0               	movwf	___awdiv@divisor
  5473  0B6B  3000               	movlw	0
  5474  0B6C  00A1               	movwf	___awdiv@divisor+1
  5475  0B6D  160A  118A  2255  120A  158A  	fcall	___awdiv
  5476  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  5477  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  5478  0B74  0820               	movf	?___awdiv,w
  5479  0B75  120A  118A  27E9  120A  158A  	fcall	___bmul
  5480  0B7A  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  5481  0B7B  0084               	movwf	4
  5482  0B7C  160A  118A  200A  120A  158A  	fcall	stringdir
  5483  0B81  1283               	bcf	3,5	;RP0=0, select bank0
  5484  0B82  1303               	bcf	3,6	;RP1=0, select bank0
  5485  0B83  00AF               	movwf	___ftmul@f2
  5486  0B84  160A  118A  200A  120A  158A  	fcall	stringdir
  5487  0B89  00B0               	movwf	___ftmul@f2+1
  5488  0B8A  160A  118A  200A  120A  158A  	fcall	stringdir
  5489  0B8F  00B1               	movwf	___ftmul@f2+2
  5490  0B90  160A  118A  24B9  120A  158A  	fcall	___ftmul
  5491  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  5492  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  5493  0B97  082C               	movf	?___ftmul,w
  5494  0B98  00BC               	movwf	?_scale
  5495  0B99  082D               	movf	?___ftmul+1,w
  5496  0B9A  00BD               	movwf	?_scale+1
  5497  0B9B  082E               	movf	?___ftmul+2,w
  5498  0B9C  00BE               	movwf	?_scale+2
  5499  0B9D  2D17               	goto	l376
  5500  0B9E                     l3738:
  5501                           
  5502                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 442:   return _np
      +                          owers_[(unsigned char)scl];
  5503  0B9E  3003               	movlw	3
  5504  0B9F  00BF               	movwf	??_scale
  5505  0BA0  083F               	movf	??_scale,w
  5506  0BA1  00A8               	movwf	___bmul@multiplicand
  5507  0BA2  0844               	movf	scale@scl,w
  5508  0BA3  120A  118A  27E9  120A  158A  	fcall	___bmul
  5509  0BA8  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5510  0BA9  0084               	movwf	4
  5511  0BAA  160A  118A  200A  120A  158A  	fcall	stringdir
  5512  0BAF  1283               	bcf	3,5	;RP0=0, select bank0
  5513  0BB0  1303               	bcf	3,6	;RP1=0, select bank0
  5514  0BB1  00BC               	movwf	?_scale
  5515  0BB2  160A  118A  200A  120A  158A  	fcall	stringdir
  5516  0BB7  00BD               	movwf	?_scale+1
  5517  0BB8  160A  118A  200A  120A  158A  	fcall	stringdir
  5518  0BBD  00BE               	movwf	?_scale+2
  5519  0BBE  2D17               	goto	l376
  5520  0BBF                     l3742:
  5521                           
  5522                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 444:  if(scl>=110
      +                          )
  5523  0BBF  0844               	movf	scale@scl,w
  5524  0BC0  3A80               	xorlw	128
  5525  0BC1  3E12               	addlw	-238
  5526  0BC2  1C03               	skipc
  5527  0BC3  2BC5               	goto	u5121
  5528  0BC4  2BC6               	goto	u5120
  5529  0BC5                     u5121:
  5530  0BC5  2C84               	goto	l3750
  5531  0BC6                     u5120:
  5532  0BC6                     l3744:
  5533                           
  5534                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5535  0BC6  3003               	movlw	3
  5536  0BC7  00BF               	movwf	??_scale
  5537  0BC8  083F               	movf	??_scale,w
  5538  0BC9  00A8               	movwf	___bmul@multiplicand
  5539  0BCA  0844               	movf	scale@scl,w
  5540  0BCB  00F4               	movwf	___awmod@dividend
  5541  0BCC  01F5               	clrf	___awmod@dividend+1
  5542  0BCD  1BF4               	btfsc	___awmod@dividend,7
  5543  0BCE  03F5               	decf	___awmod@dividend+1,f
  5544  0BCF  3064               	movlw	100
  5545  0BD0  00F2               	movwf	___awmod@divisor
  5546  0BD1  3000               	movlw	0
  5547  0BD2  00F3               	movwf	___awmod@divisor+1
  5548  0BD3  160A  118A  2138  120A  158A  	fcall	___awmod
  5549  0BD8  0873               	movf	?___awmod+1,w
  5550  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  5551  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  5552  0BDB  00A3               	movwf	___awdiv@dividend+1
  5553  0BDC  0872               	movf	?___awmod,w
  5554  0BDD  00A2               	movwf	___awdiv@dividend
  5555  0BDE  300A               	movlw	10
  5556  0BDF  00A0               	movwf	___awdiv@divisor
  5557  0BE0  3000               	movlw	0
  5558  0BE1  00A1               	movwf	___awdiv@divisor+1
  5559  0BE2  160A  118A  2255  120A  158A  	fcall	___awdiv
  5560  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  5561  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  5562  0BE9  0820               	movf	?___awdiv,w
  5563  0BEA  120A  118A  27E9  120A  158A  	fcall	___bmul
  5564  0BEF  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  5565  0BF0  0084               	movwf	4
  5566  0BF1  160A  118A  200A  120A  158A  	fcall	stringdir
  5567  0BF6  1283               	bcf	3,5	;RP0=0, select bank0
  5568  0BF7  1303               	bcf	3,6	;RP1=0, select bank0
  5569  0BF8  00AC               	movwf	___ftmul@f1
  5570  0BF9  160A  118A  200A  120A  158A  	fcall	stringdir
  5571  0BFE  00AD               	movwf	___ftmul@f1+1
  5572  0BFF  160A  118A  200A  120A  158A  	fcall	stringdir
  5573  0C04  00AE               	movwf	___ftmul@f1+2
  5574  0C05  3003               	movlw	3
  5575  0C06  00C0               	movwf	??_scale+1
  5576  0C07  0840               	movf	??_scale+1,w
  5577  0C08  00A8               	movwf	___bmul@multiplicand
  5578  0C09  0844               	movf	scale@scl,w
  5579  0C0A  00A2               	movwf	___awdiv@dividend
  5580  0C0B  01A3               	clrf	___awdiv@dividend+1
  5581  0C0C  1BA2               	btfsc	___awdiv@dividend,7
  5582  0C0D  03A3               	decf	___awdiv@dividend+1,f
  5583  0C0E  3064               	movlw	100
  5584  0C0F  00A0               	movwf	___awdiv@divisor
  5585  0C10  3000               	movlw	0
  5586  0C11  00A1               	movwf	___awdiv@divisor+1
  5587  0C12  160A  118A  2255  120A  158A  	fcall	___awdiv
  5588  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  5590  0C19  0820               	movf	?___awdiv,w
  5591  0C1A  120A  118A  27E9  120A  158A  	fcall	___bmul
  5592  0C1F  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  5593  0C20  0084               	movwf	4
  5594  0C21  160A  118A  200A  120A  158A  	fcall	stringdir
  5595  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  5596  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  5597  0C28  00AF               	movwf	___ftmul@f2
  5598  0C29  160A  118A  200A  120A  158A  	fcall	stringdir
  5599  0C2E  00B0               	movwf	___ftmul@f2+1
  5600  0C2F  160A  118A  200A  120A  158A  	fcall	stringdir
  5601  0C34  00B1               	movwf	___ftmul@f2+2
  5602  0C35  160A  118A  24B9  120A  158A  	fcall	___ftmul
  5603  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  5604  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  5605  0C3C  082C               	movf	?___ftmul,w
  5606  0C3D  00C1               	movwf	_scale$1230
  5607  0C3E  082D               	movf	?___ftmul+1,w
  5608  0C3F  00C2               	movwf	_scale$1230+1
  5609  0C40  082E               	movf	?___ftmul+2,w
  5610  0C41  00C3               	movwf	_scale$1230+2
  5611                           
  5612                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5613  0C42  3003               	movlw	3
  5614  0C43  00BF               	movwf	??_scale
  5615  0C44  083F               	movf	??_scale,w
  5616  0C45  00A8               	movwf	___bmul@multiplicand
  5617  0C46  0844               	movf	scale@scl,w
  5618  0C47  00F4               	movwf	___awmod@dividend
  5619  0C48  01F5               	clrf	___awmod@dividend+1
  5620  0C49  1BF4               	btfsc	___awmod@dividend,7
  5621  0C4A  03F5               	decf	___awmod@dividend+1,f
  5622  0C4B  300A               	movlw	10
  5623  0C4C  00F2               	movwf	___awmod@divisor
  5624  0C4D  3000               	movlw	0
  5625  0C4E  00F3               	movwf	___awmod@divisor+1
  5626  0C4F  160A  118A  2138  120A  158A  	fcall	___awmod
  5627  0C54  0872               	movf	?___awmod,w
  5628  0C55  120A  118A  27E9  120A  158A  	fcall	___bmul
  5629  0C5A  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5630  0C5B  0084               	movwf	4
  5631  0C5C  160A  118A  200A  120A  158A  	fcall	stringdir
  5632  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  5633  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  5634  0C63  00AC               	movwf	___ftmul@f1
  5635  0C64  160A  118A  200A  120A  158A  	fcall	stringdir
  5636  0C69  00AD               	movwf	___ftmul@f1+1
  5637  0C6A  160A  118A  200A  120A  158A  	fcall	stringdir
  5638  0C6F  00AE               	movwf	___ftmul@f1+2
  5639  0C70  0841               	movf	_scale$1230,w
  5640  0C71  00AF               	movwf	___ftmul@f2
  5641  0C72  0842               	movf	_scale$1230+1,w
  5642  0C73  00B0               	movwf	___ftmul@f2+1
  5643  0C74  0843               	movf	_scale$1230+2,w
  5644  0C75  00B1               	movwf	___ftmul@f2+2
  5645  0C76  160A  118A  24B9  120A  158A  	fcall	___ftmul
  5646  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  5647  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  5648  0C7D  082C               	movf	?___ftmul,w
  5649  0C7E  00BC               	movwf	?_scale
  5650  0C7F  082D               	movf	?___ftmul+1,w
  5651  0C80  00BD               	movwf	?_scale+1
  5652  0C81  082E               	movf	?___ftmul+2,w
  5653  0C82  00BE               	movwf	?_scale+2
  5654  0C83  2D17               	goto	l376
  5655  0C84                     l3750:
  5656  0C84  0844               	movf	scale@scl,w
  5657  0C85  3A80               	xorlw	128
  5658  0C86  3E75               	addlw	-139
  5659  0C87  1C03               	skipc
  5660  0C88  2C8A               	goto	u5131
  5661  0C89  2C8B               	goto	u5130
  5662  0C8A                     u5131:
  5663  0C8A  2CF7               	goto	l3756
  5664  0C8B                     u5130:
  5665  0C8B                     l3752:
  5666                           
  5667                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 447:   return _po
      +                          wers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
  5668  0C8B  3003               	movlw	3
  5669  0C8C  00BF               	movwf	??_scale
  5670  0C8D  083F               	movf	??_scale,w
  5671  0C8E  00A8               	movwf	___bmul@multiplicand
  5672  0C8F  0844               	movf	scale@scl,w
  5673  0C90  00F4               	movwf	___awmod@dividend
  5674  0C91  01F5               	clrf	___awmod@dividend+1
  5675  0C92  1BF4               	btfsc	___awmod@dividend,7
  5676  0C93  03F5               	decf	___awmod@dividend+1,f
  5677  0C94  300A               	movlw	10
  5678  0C95  00F2               	movwf	___awmod@divisor
  5679  0C96  3000               	movlw	0
  5680  0C97  00F3               	movwf	___awmod@divisor+1
  5681  0C98  160A  118A  2138  120A  158A  	fcall	___awmod
  5682  0C9D  0872               	movf	?___awmod,w
  5683  0C9E  120A  118A  27E9  120A  158A  	fcall	___bmul
  5684  0CA3  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5685  0CA4  0084               	movwf	4
  5686  0CA5  160A  118A  200A  120A  158A  	fcall	stringdir
  5687  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0CAC  00AC               	movwf	___ftmul@f1
  5690  0CAD  160A  118A  200A  120A  158A  	fcall	stringdir
  5691  0CB2  00AD               	movwf	___ftmul@f1+1
  5692  0CB3  160A  118A  200A  120A  158A  	fcall	stringdir
  5693  0CB8  00AE               	movwf	___ftmul@f1+2
  5694  0CB9  3003               	movlw	3
  5695  0CBA  00C0               	movwf	??_scale+1
  5696  0CBB  0840               	movf	??_scale+1,w
  5697  0CBC  00A8               	movwf	___bmul@multiplicand
  5698  0CBD  0844               	movf	scale@scl,w
  5699  0CBE  00A2               	movwf	___awdiv@dividend
  5700  0CBF  01A3               	clrf	___awdiv@dividend+1
  5701  0CC0  1BA2               	btfsc	___awdiv@dividend,7
  5702  0CC1  03A3               	decf	___awdiv@dividend+1,f
  5703  0CC2  300A               	movlw	10
  5704  0CC3  00A0               	movwf	___awdiv@divisor
  5705  0CC4  3000               	movlw	0
  5706  0CC5  00A1               	movwf	___awdiv@divisor+1
  5707  0CC6  160A  118A  2255  120A  158A  	fcall	___awdiv
  5708  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  5709  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  5710  0CCD  0820               	movf	?___awdiv,w
  5711  0CCE  120A  118A  27E9  120A  158A  	fcall	___bmul
  5712  0CD3  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  5713  0CD4  0084               	movwf	4
  5714  0CD5  160A  118A  200A  120A  158A  	fcall	stringdir
  5715  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  5716  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  5717  0CDC  00AF               	movwf	___ftmul@f2
  5718  0CDD  160A  118A  200A  120A  158A  	fcall	stringdir
  5719  0CE2  00B0               	movwf	___ftmul@f2+1
  5720  0CE3  160A  118A  200A  120A  158A  	fcall	stringdir
  5721  0CE8  00B1               	movwf	___ftmul@f2+2
  5722  0CE9  160A  118A  24B9  120A  158A  	fcall	___ftmul
  5723  0CEE  1283               	bcf	3,5	;RP0=0, select bank0
  5724  0CEF  1303               	bcf	3,6	;RP1=0, select bank0
  5725  0CF0  082C               	movf	?___ftmul,w
  5726  0CF1  00BC               	movwf	?_scale
  5727  0CF2  082D               	movf	?___ftmul+1,w
  5728  0CF3  00BD               	movwf	?_scale+1
  5729  0CF4  082E               	movf	?___ftmul+2,w
  5730  0CF5  00BE               	movwf	?_scale+2
  5731  0CF6  2D17               	goto	l376
  5732  0CF7                     l3756:
  5733                           
  5734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 448:  return _pow
      +                          ers_[(unsigned char)scl];
  5735  0CF7  3003               	movlw	3
  5736  0CF8  00BF               	movwf	??_scale
  5737  0CF9  083F               	movf	??_scale,w
  5738  0CFA  00A8               	movwf	___bmul@multiplicand
  5739  0CFB  0844               	movf	scale@scl,w
  5740  0CFC  120A  118A  27E9  120A  158A  	fcall	___bmul
  5741  0D01  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5742  0D02  0084               	movwf	4
  5743  0D03  160A  118A  200A  120A  158A  	fcall	stringdir
  5744  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  5745  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  5746  0D0A  00BC               	movwf	?_scale
  5747  0D0B  160A  118A  200A  120A  158A  	fcall	stringdir
  5748  0D10  00BD               	movwf	?_scale+1
  5749  0D11  160A  118A  200A  120A  158A  	fcall	stringdir
  5750  0D16  00BE               	movwf	?_scale+2
  5751  0D17                     l376:
  5752  0D17  0008               	return
  5753  0D18                     __end_of_scale:
  5754                           
  5755                           	psect	text27
  5756  1138                     __ptext27:	
  5757 ;; *************** function ___awmod *****************
  5758 ;; Defined at:
  5759 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  divisor         2    2[COMMON] int 
  5762 ;;  dividend        2    4[COMMON] int 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  sign            1    8[COMMON] unsigned char 
  5765 ;;  counter         1    7[COMMON] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  2    2[COMMON] int 
  5768 ;; Registers used:
  5769 ;;		wreg, status,2, status,0
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5775 ;;      Params:         4       0       0       0       0
  5776 ;;      Locals:         2       0       0       0       0
  5777 ;;      Temps:          1       0       0       0       0
  5778 ;;      Totals:         7       0       0       0       0
  5779 ;;Total ram usage:        7 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    1
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_scale
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function ___awmod
  5791  1138                     ___awmod:
  5792  1138                     l2330:	
  5793                           ;incstack = 0
  5794                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5795                           
  5796  1138  01F8               	clrf	___awmod@sign
  5797  1139                     l2332:
  5798  1139  1FF5               	btfss	___awmod@dividend+1,7
  5799  113A  293C               	goto	u2501
  5800  113B  293D               	goto	u2500
  5801  113C                     u2501:
  5802  113C  2944               	goto	l2338
  5803  113D                     u2500:
  5804  113D                     l2334:
  5805  113D  09F4               	comf	___awmod@dividend,f
  5806  113E  09F5               	comf	___awmod@dividend+1,f
  5807  113F  0AF4               	incf	___awmod@dividend,f
  5808  1140  1903               	skipnz
  5809  1141  0AF5               	incf	___awmod@dividend+1,f
  5810  1142                     l2336:
  5811  1142  01F8               	clrf	___awmod@sign
  5812  1143  0AF8               	incf	___awmod@sign,f
  5813  1144                     l2338:
  5814  1144  1FF3               	btfss	___awmod@divisor+1,7
  5815  1145  2947               	goto	u2511
  5816  1146  2948               	goto	u2510
  5817  1147                     u2511:
  5818  1147  294D               	goto	l2342
  5819  1148                     u2510:
  5820  1148                     l2340:
  5821  1148  09F2               	comf	___awmod@divisor,f
  5822  1149  09F3               	comf	___awmod@divisor+1,f
  5823  114A  0AF2               	incf	___awmod@divisor,f
  5824  114B  1903               	skipnz
  5825  114C  0AF3               	incf	___awmod@divisor+1,f
  5826  114D                     l2342:
  5827  114D  0872               	movf	___awmod@divisor,w
  5828  114E  0473               	iorwf	___awmod@divisor+1,w
  5829  114F  1903               	btfsc	3,2
  5830  1150  2952               	goto	u2521
  5831  1151  2953               	goto	u2520
  5832  1152                     u2521:
  5833  1152  2982               	goto	l2360
  5834  1153                     u2520:
  5835  1153                     l2344:
  5836  1153  01F7               	clrf	___awmod@counter
  5837  1154  0AF7               	incf	___awmod@counter,f
  5838  1155  2961               	goto	l2350
  5839  1156                     l2346:
  5840  1156  3001               	movlw	1
  5841  1157                     u2535:
  5842  1157  1003               	clrc
  5843  1158  0DF2               	rlf	___awmod@divisor,f
  5844  1159  0DF3               	rlf	___awmod@divisor+1,f
  5845  115A  3EFF               	addlw	-1
  5846  115B  1D03               	skipz
  5847  115C  2957               	goto	u2535
  5848  115D                     l2348:
  5849  115D  3001               	movlw	1
  5850  115E  00F6               	movwf	??___awmod
  5851  115F  0876               	movf	??___awmod,w
  5852  1160  07F7               	addwf	___awmod@counter,f
  5853  1161                     l2350:
  5854  1161  1FF3               	btfss	___awmod@divisor+1,7
  5855  1162  2964               	goto	u2541
  5856  1163  2965               	goto	u2540
  5857  1164                     u2541:
  5858  1164  2956               	goto	l2346
  5859  1165                     u2540:
  5860  1165                     l2352:
  5861  1165  0873               	movf	___awmod@divisor+1,w
  5862  1166  0275               	subwf	___awmod@dividend+1,w
  5863  1167  1D03               	skipz
  5864  1168  296B               	goto	u2555
  5865  1169  0872               	movf	___awmod@divisor,w
  5866  116A  0274               	subwf	___awmod@dividend,w
  5867  116B                     u2555:
  5868  116B  1C03               	skipc
  5869  116C  296E               	goto	u2551
  5870  116D  296F               	goto	u2550
  5871  116E                     u2551:
  5872  116E  2975               	goto	l2356
  5873  116F                     u2550:
  5874  116F                     l2354:
  5875  116F  0872               	movf	___awmod@divisor,w
  5876  1170  02F4               	subwf	___awmod@dividend,f
  5877  1171  0873               	movf	___awmod@divisor+1,w
  5878  1172  1C03               	skipc
  5879  1173  03F5               	decf	___awmod@dividend+1,f
  5880  1174  02F5               	subwf	___awmod@dividend+1,f
  5881  1175                     l2356:
  5882  1175  3001               	movlw	1
  5883  1176                     u2565:
  5884  1176  1003               	clrc
  5885  1177  0CF3               	rrf	___awmod@divisor+1,f
  5886  1178  0CF2               	rrf	___awmod@divisor,f
  5887  1179  3EFF               	addlw	-1
  5888  117A  1D03               	skipz
  5889  117B  2976               	goto	u2565
  5890  117C                     l2358:
  5891  117C  3001               	movlw	1
  5892  117D  02F7               	subwf	___awmod@counter,f
  5893  117E  1D03               	btfss	3,2
  5894  117F  2981               	goto	u2571
  5895  1180  2982               	goto	u2570
  5896  1181                     u2571:
  5897  1181  2965               	goto	l2352
  5898  1182                     u2570:
  5899  1182                     l2360:
  5900  1182  0878               	movf	___awmod@sign,w
  5901  1183  1903               	btfsc	3,2
  5902  1184  2986               	goto	u2581
  5903  1185  2987               	goto	u2580
  5904  1186                     u2581:
  5905  1186  298C               	goto	l2364
  5906  1187                     u2580:
  5907  1187                     l2362:
  5908  1187  09F4               	comf	___awmod@dividend,f
  5909  1188  09F5               	comf	___awmod@dividend+1,f
  5910  1189  0AF4               	incf	___awmod@dividend,f
  5911  118A  1903               	skipnz
  5912  118B  0AF5               	incf	___awmod@dividend+1,f
  5913  118C                     l2364:
  5914  118C  0875               	movf	___awmod@dividend+1,w
  5915  118D  00F3               	movwf	?___awmod+1
  5916  118E  0874               	movf	___awmod@dividend,w
  5917  118F  00F2               	movwf	?___awmod
  5918  1190                     l668:
  5919  1190  0008               	return
  5920  1191                     __end_of___awmod:
  5921                           
  5922                           	psect	text28
  5923  1255                     __ptext28:	
  5924 ;; *************** function ___awdiv *****************
  5925 ;; Defined at:
  5926 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  divisor         2    0[BANK0 ] int 
  5929 ;;  dividend        2    2[BANK0 ] int 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  quotient        2    6[BANK0 ] int 
  5932 ;;  sign            1    5[BANK0 ] unsigned char 
  5933 ;;  counter         1    4[BANK0 ] unsigned char 
  5934 ;; Return value:  Size  Location     Type
  5935 ;;                  2    0[BANK0 ] int 
  5936 ;; Registers used:
  5937 ;;		wreg, status,2, status,0
  5938 ;; Tracked objects:
  5939 ;;		On entry : 0/0
  5940 ;;		On exit  : 0/0
  5941 ;;		Unchanged: 0/0
  5942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5943 ;;      Params:         0       4       0       0       0
  5944 ;;      Locals:         0       4       0       0       0
  5945 ;;      Temps:          1       0       0       0       0
  5946 ;;      Totals:         1       8       0       0       0
  5947 ;;Total ram usage:        9 bytes
  5948 ;; Hardware stack levels used:    1
  5949 ;; Hardware stack levels required when called:    1
  5950 ;; This function calls:
  5951 ;;		Nothing
  5952 ;; This function is called by:
  5953 ;;		_main
  5954 ;;		_scale
  5955 ;;		_sprintf
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           
  5960                           ;psect for function ___awdiv
  5961  1255                     ___awdiv:
  5962  1255                     l2286:	
  5963                           ;incstack = 0
  5964                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5965                           
  5966  1255  1283               	bcf	3,5	;RP0=0, select bank0
  5967  1256  1303               	bcf	3,6	;RP1=0, select bank0
  5968  1257  01A5               	clrf	___awdiv@sign
  5969  1258                     l2288:
  5970  1258  1FA1               	btfss	___awdiv@divisor+1,7
  5971  1259  2A5B               	goto	u2401
  5972  125A  2A5C               	goto	u2400
  5973  125B                     u2401:
  5974  125B  2A63               	goto	l2294
  5975  125C                     u2400:
  5976  125C                     l2290:
  5977  125C  09A0               	comf	___awdiv@divisor,f
  5978  125D  09A1               	comf	___awdiv@divisor+1,f
  5979  125E  0AA0               	incf	___awdiv@divisor,f
  5980  125F  1903               	skipnz
  5981  1260  0AA1               	incf	___awdiv@divisor+1,f
  5982  1261                     l2292:
  5983  1261  01A5               	clrf	___awdiv@sign
  5984  1262  0AA5               	incf	___awdiv@sign,f
  5985  1263                     l2294:
  5986  1263  1FA3               	btfss	___awdiv@dividend+1,7
  5987  1264  2A66               	goto	u2411
  5988  1265  2A67               	goto	u2410
  5989  1266                     u2411:
  5990  1266  2A70               	goto	l2300
  5991  1267                     u2410:
  5992  1267                     l2296:
  5993  1267  09A2               	comf	___awdiv@dividend,f
  5994  1268  09A3               	comf	___awdiv@dividend+1,f
  5995  1269  0AA2               	incf	___awdiv@dividend,f
  5996  126A  1903               	skipnz
  5997  126B  0AA3               	incf	___awdiv@dividend+1,f
  5998  126C                     l2298:
  5999  126C  3001               	movlw	1
  6000  126D  00F9               	movwf	??___awdiv
  6001  126E  0879               	movf	??___awdiv,w
  6002  126F  06A5               	xorwf	___awdiv@sign,f
  6003  1270                     l2300:
  6004  1270  01A6               	clrf	___awdiv@quotient
  6005  1271  01A7               	clrf	___awdiv@quotient+1
  6006  1272                     l2302:
  6007  1272  0820               	movf	___awdiv@divisor,w
  6008  1273  0421               	iorwf	___awdiv@divisor+1,w
  6009  1274  1903               	btfsc	3,2
  6010  1275  2A77               	goto	u2421
  6011  1276  2A78               	goto	u2420
  6012  1277                     u2421:
  6013  1277  2AAF               	goto	l2322
  6014  1278                     u2420:
  6015  1278                     l2304:
  6016  1278  01A4               	clrf	___awdiv@counter
  6017  1279  0AA4               	incf	___awdiv@counter,f
  6018  127A  2A86               	goto	l2310
  6019  127B                     l2306:
  6020  127B  3001               	movlw	1
  6021  127C                     u2435:
  6022  127C  1003               	clrc
  6023  127D  0DA0               	rlf	___awdiv@divisor,f
  6024  127E  0DA1               	rlf	___awdiv@divisor+1,f
  6025  127F  3EFF               	addlw	-1
  6026  1280  1D03               	skipz
  6027  1281  2A7C               	goto	u2435
  6028  1282                     l2308:
  6029  1282  3001               	movlw	1
  6030  1283  00F9               	movwf	??___awdiv
  6031  1284  0879               	movf	??___awdiv,w
  6032  1285  07A4               	addwf	___awdiv@counter,f
  6033  1286                     l2310:
  6034  1286  1FA1               	btfss	___awdiv@divisor+1,7
  6035  1287  2A89               	goto	u2441
  6036  1288  2A8A               	goto	u2440
  6037  1289                     u2441:
  6038  1289  2A7B               	goto	l2306
  6039  128A                     u2440:
  6040  128A                     l2312:
  6041  128A  3001               	movlw	1
  6042  128B                     u2455:
  6043  128B  1003               	clrc
  6044  128C  0DA6               	rlf	___awdiv@quotient,f
  6045  128D  0DA7               	rlf	___awdiv@quotient+1,f
  6046  128E  3EFF               	addlw	-1
  6047  128F  1D03               	skipz
  6048  1290  2A8B               	goto	u2455
  6049  1291  0821               	movf	___awdiv@divisor+1,w
  6050  1292  0223               	subwf	___awdiv@dividend+1,w
  6051  1293  1D03               	skipz
  6052  1294  2A97               	goto	u2465
  6053  1295  0820               	movf	___awdiv@divisor,w
  6054  1296  0222               	subwf	___awdiv@dividend,w
  6055  1297                     u2465:
  6056  1297  1C03               	skipc
  6057  1298  2A9A               	goto	u2461
  6058  1299  2A9B               	goto	u2460
  6059  129A                     u2461:
  6060  129A  2AA2               	goto	l2318
  6061  129B                     u2460:
  6062  129B                     l2314:
  6063  129B  0820               	movf	___awdiv@divisor,w
  6064  129C  02A2               	subwf	___awdiv@dividend,f
  6065  129D  0821               	movf	___awdiv@divisor+1,w
  6066  129E  1C03               	skipc
  6067  129F  03A3               	decf	___awdiv@dividend+1,f
  6068  12A0  02A3               	subwf	___awdiv@dividend+1,f
  6069  12A1                     l2316:
  6070  12A1  1426               	bsf	___awdiv@quotient,0
  6071  12A2                     l2318:
  6072  12A2  3001               	movlw	1
  6073  12A3                     u2475:
  6074  12A3  1003               	clrc
  6075  12A4  0CA1               	rrf	___awdiv@divisor+1,f
  6076  12A5  0CA0               	rrf	___awdiv@divisor,f
  6077  12A6  3EFF               	addlw	-1
  6078  12A7  1D03               	skipz
  6079  12A8  2AA3               	goto	u2475
  6080  12A9                     l2320:
  6081  12A9  3001               	movlw	1
  6082  12AA  02A4               	subwf	___awdiv@counter,f
  6083  12AB  1D03               	btfss	3,2
  6084  12AC  2AAE               	goto	u2481
  6085  12AD  2AAF               	goto	u2480
  6086  12AE                     u2481:
  6087  12AE  2A8A               	goto	l2312
  6088  12AF                     u2480:
  6089  12AF                     l2322:
  6090  12AF  0825               	movf	___awdiv@sign,w
  6091  12B0  1903               	btfsc	3,2
  6092  12B1  2AB3               	goto	u2491
  6093  12B2  2AB4               	goto	u2490
  6094  12B3                     u2491:
  6095  12B3  2AB9               	goto	l2326
  6096  12B4                     u2490:
  6097  12B4                     l2324:
  6098  12B4  09A6               	comf	___awdiv@quotient,f
  6099  12B5  09A7               	comf	___awdiv@quotient+1,f
  6100  12B6  0AA6               	incf	___awdiv@quotient,f
  6101  12B7  1903               	skipnz
  6102  12B8  0AA7               	incf	___awdiv@quotient+1,f
  6103  12B9                     l2326:
  6104  12B9  0827               	movf	___awdiv@quotient+1,w
  6105  12BA  00A1               	movwf	?___awdiv+1
  6106  12BB  0826               	movf	___awdiv@quotient,w
  6107  12BC  00A0               	movwf	?___awdiv
  6108  12BD                     l655:
  6109  12BD  0008               	return
  6110  12BE                     __end_of___awdiv:
  6111                           
  6112                           	psect	text29
  6113  1C2F                     __ptext29:	
  6114 ;; *************** function _isdigit *****************
  6115 ;; Defined at:
  6116 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  c               1    wreg     unsigned char 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  c               1    3[COMMON] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;		None               void
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6130 ;;      Params:         0       0       0       0       0
  6131 ;;      Locals:         2       0       0       0       0
  6132 ;;      Temps:          0       0       0       0       0
  6133 ;;      Totals:         2       0       0       0       0
  6134 ;;Total ram usage:        2 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    1
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_sprintf
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _isdigit
  6146  1C2F                     _isdigit:
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6150                           ;isdigit@c stored from wreg
  6151  1C2F  00F3               	movwf	isdigit@c
  6152  1C30                     l2620:
  6153  1C30  01F2               	clrf	_isdigit$1025
  6154  1C31                     l2622:
  6155  1C31  303A               	movlw	58
  6156  1C32  0273               	subwf	isdigit@c,w
  6157  1C33  1803               	skipnc
  6158  1C34  2C36               	goto	u3181
  6159  1C35  2C37               	goto	u3180
  6160  1C36                     u3181:
  6161  1C36  2C3F               	goto	l2628
  6162  1C37                     u3180:
  6163  1C37                     l2624:
  6164  1C37  3030               	movlw	48
  6165  1C38  0273               	subwf	isdigit@c,w
  6166  1C39  1C03               	skipc
  6167  1C3A  2C3C               	goto	u3191
  6168  1C3B  2C3D               	goto	u3190
  6169  1C3C                     u3191:
  6170  1C3C  2C3F               	goto	l2628
  6171  1C3D                     u3190:
  6172  1C3D                     l2626:
  6173  1C3D  01F2               	clrf	_isdigit$1025
  6174  1C3E  0AF2               	incf	_isdigit$1025,f
  6175  1C3F                     l2628:
  6176  1C3F  0C72               	rrf	_isdigit$1025,w
  6177  1C40                     l934:
  6178  1C40  0008               	return
  6179  1C41                     __end_of_isdigit:
  6180                           
  6181                           	psect	text30
  6182  08B4                     __ptext30:	
  6183 ;; *************** function _fround *****************
  6184 ;; Defined at:
  6185 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  prec            1    wreg     unsigned char 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  prec            1   43[BANK0 ] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  3   28[BANK0 ] unsigned char 
  6192 ;; Registers used:
  6193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6199 ;;      Params:         0       3       0       0       0
  6200 ;;      Locals:         0       7       0       0       0
  6201 ;;      Temps:          0       6       0       0       0
  6202 ;;      Totals:         0      16       0       0       0
  6203 ;;Total ram usage:       16 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    3
  6206 ;; This function calls:
  6207 ;;		___bmul
  6208 ;;		___ftmul
  6209 ;;		___lwdiv
  6210 ;;		___lwmod
  6211 ;; This function is called by:
  6212 ;;		_sprintf
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           
  6217                           ;psect for function _fround
  6218  08B4                     _fround:
  6219                           
  6220                           ;incstack = 0
  6221                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6222                           ;fround@prec stored from wreg
  6223  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  6224  08B5  1303               	bcf	3,6	;RP1=0, select bank0
  6225  08B6  00CB               	movwf	fround@prec
  6226  08B7                     l3698:
  6227                           
  6228                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 417: fround(unsig
      +                          ned char prec);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 418
      +                          : {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 421:  if(prec>
      +                          =110)
  6229  08B7  306E               	movlw	110
  6230  08B8  024B               	subwf	fround@prec,w
  6231  08B9  1C03               	skipc
  6232  08BA  28BC               	goto	u5071
  6233  08BB  28BD               	goto	u5070
  6234  08BC                     u5071:
  6235  08BC  299A               	goto	l3708
  6236  08BD                     u5070:
  6237  08BD                     l3700:
  6238                           
  6239                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6240  08BD  3003               	movlw	3
  6241  08BE  00BF               	movwf	??_fround
  6242  08BF  083F               	movf	??_fround,w
  6243  08C0  00A8               	movwf	___bmul@multiplicand
  6244  08C1  084B               	movf	fround@prec,w
  6245  08C2  00C0               	movwf	??_fround+1
  6246  08C3  01C1               	clrf	??_fround+2
  6247  08C4  0840               	movf	??_fround+1,w
  6248  08C5  00F4               	movwf	___lwmod@dividend
  6249  08C6  0841               	movf	??_fround+2,w
  6250  08C7  00F5               	movwf	___lwmod@dividend+1
  6251  08C8  3064               	movlw	100
  6252  08C9  00F2               	movwf	___lwmod@divisor
  6253  08CA  3000               	movlw	0
  6254  08CB  00F3               	movwf	___lwmod@divisor+1
  6255  08CC  160A  158A  2617  120A  158A  	fcall	___lwmod
  6256  08D1  0873               	movf	?___lwmod+1,w
  6257  08D2  1283               	bcf	3,5	;RP0=0, select bank0
  6258  08D3  1303               	bcf	3,6	;RP1=0, select bank0
  6259  08D4  00A3               	movwf	___lwdiv@dividend+1
  6260  08D5  0872               	movf	?___lwmod,w
  6261  08D6  00A2               	movwf	___lwdiv@dividend
  6262  08D7  300A               	movlw	10
  6263  08D8  00A0               	movwf	___lwdiv@divisor
  6264  08D9  3000               	movlw	0
  6265  08DA  00A1               	movwf	___lwdiv@divisor+1
  6266  08DB  160A  158A  268E  120A  158A  	fcall	___lwdiv
  6267  08E0  1283               	bcf	3,5	;RP0=0, select bank0
  6268  08E1  1303               	bcf	3,6	;RP1=0, select bank0
  6269  08E2  0820               	movf	?___lwdiv,w
  6270  08E3  120A  118A  27E9  120A  158A  	fcall	___bmul
  6271  08E8  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  6272  08E9  0084               	movwf	4
  6273  08EA  160A  118A  200A  120A  158A  	fcall	stringdir
  6274  08EF  1283               	bcf	3,5	;RP0=0, select bank0
  6275  08F0  1303               	bcf	3,6	;RP1=0, select bank0
  6276  08F1  00AC               	movwf	___ftmul@f1
  6277  08F2  160A  118A  200A  120A  158A  	fcall	stringdir
  6278  08F7  00AD               	movwf	___ftmul@f1+1
  6279  08F8  160A  118A  200A  120A  158A  	fcall	stringdir
  6280  08FD  00AE               	movwf	___ftmul@f1+2
  6281  08FE  3003               	movlw	3
  6282  08FF  00C2               	movwf	??_fround+3
  6283  0900  0842               	movf	??_fround+3,w
  6284  0901  00A8               	movwf	___bmul@multiplicand
  6285  0902  084B               	movf	fround@prec,w
  6286  0903  00C3               	movwf	??_fround+4
  6287  0904  01C4               	clrf	??_fround+5
  6288  0905  0843               	movf	??_fround+4,w
  6289  0906  00A2               	movwf	___lwdiv@dividend
  6290  0907  0844               	movf	??_fround+5,w
  6291  0908  00A3               	movwf	___lwdiv@dividend+1
  6292  0909  3064               	movlw	100
  6293  090A  00A0               	movwf	___lwdiv@divisor
  6294  090B  3000               	movlw	0
  6295  090C  00A1               	movwf	___lwdiv@divisor+1
  6296  090D  160A  158A  268E  120A  158A  	fcall	___lwdiv
  6297  0912  1283               	bcf	3,5	;RP0=0, select bank0
  6298  0913  1303               	bcf	3,6	;RP1=0, select bank0
  6299  0914  0820               	movf	?___lwdiv,w
  6300  0915  120A  118A  27E9  120A  158A  	fcall	___bmul
  6301  091A  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  6302  091B  0084               	movwf	4
  6303  091C  160A  118A  200A  120A  158A  	fcall	stringdir
  6304  0921  1283               	bcf	3,5	;RP0=0, select bank0
  6305  0922  1303               	bcf	3,6	;RP1=0, select bank0
  6306  0923  00AF               	movwf	___ftmul@f2
  6307  0924  160A  118A  200A  120A  158A  	fcall	stringdir
  6308  0929  00B0               	movwf	___ftmul@f2+1
  6309  092A  160A  118A  200A  120A  158A  	fcall	stringdir
  6310  092F  00B1               	movwf	___ftmul@f2+2
  6311  0930  160A  118A  24B9  120A  158A  	fcall	___ftmul
  6312  0935  1283               	bcf	3,5	;RP0=0, select bank0
  6313  0936  1303               	bcf	3,6	;RP1=0, select bank0
  6314  0937  082C               	movf	?___ftmul,w
  6315  0938  00C8               	movwf	_fround$1228
  6316  0939  082D               	movf	?___ftmul+1,w
  6317  093A  00C9               	movwf	_fround$1228+1
  6318  093B  082E               	movf	?___ftmul+2,w
  6319  093C  00CA               	movwf	_fround$1228+2
  6320                           
  6321                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6322  093D  3003               	movlw	3
  6323  093E  00BF               	movwf	??_fround
  6324  093F  083F               	movf	??_fround,w
  6325  0940  00A8               	movwf	___bmul@multiplicand
  6326  0941  084B               	movf	fround@prec,w
  6327  0942  00C0               	movwf	??_fround+1
  6328  0943  01C1               	clrf	??_fround+2
  6329  0944  0840               	movf	??_fround+1,w
  6330  0945  00F4               	movwf	___lwmod@dividend
  6331  0946  0841               	movf	??_fround+2,w
  6332  0947  00F5               	movwf	___lwmod@dividend+1
  6333  0948  300A               	movlw	10
  6334  0949  00F2               	movwf	___lwmod@divisor
  6335  094A  3000               	movlw	0
  6336  094B  00F3               	movwf	___lwmod@divisor+1
  6337  094C  160A  158A  2617  120A  158A  	fcall	___lwmod
  6338  0951  0872               	movf	?___lwmod,w
  6339  0952  120A  118A  27E9  120A  158A  	fcall	___bmul
  6340  0957  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6341  0958  0084               	movwf	4
  6342  0959  160A  118A  200A  120A  158A  	fcall	stringdir
  6343  095E  1283               	bcf	3,5	;RP0=0, select bank0
  6344  095F  1303               	bcf	3,6	;RP1=0, select bank0
  6345  0960  00AC               	movwf	___ftmul@f1
  6346  0961  160A  118A  200A  120A  158A  	fcall	stringdir
  6347  0966  00AD               	movwf	___ftmul@f1+1
  6348  0967  160A  118A  200A  120A  158A  	fcall	stringdir
  6349  096C  00AE               	movwf	___ftmul@f1+2
  6350  096D  0848               	movf	_fround$1228,w
  6351  096E  00AF               	movwf	___ftmul@f2
  6352  096F  0849               	movf	_fround$1228+1,w
  6353  0970  00B0               	movwf	___ftmul@f2+1
  6354  0971  084A               	movf	_fround$1228+2,w
  6355  0972  00B1               	movwf	___ftmul@f2+2
  6356  0973  160A  118A  24B9  120A  158A  	fcall	___ftmul
  6357  0978  1283               	bcf	3,5	;RP0=0, select bank0
  6358  0979  1303               	bcf	3,6	;RP1=0, select bank0
  6359  097A  082C               	movf	?___ftmul,w
  6360  097B  00C5               	movwf	_fround$1229
  6361  097C  082D               	movf	?___ftmul+1,w
  6362  097D  00C6               	movwf	_fround$1229+1
  6363  097E  082E               	movf	?___ftmul+2,w
  6364  097F  00C7               	movwf	_fround$1229+2
  6365  0980                     l3702:
  6366                           
  6367                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6368  0980  3000               	movlw	0
  6369  0981  00AC               	movwf	___ftmul@f1
  6370  0982  3000               	movlw	0
  6371  0983  00AD               	movwf	___ftmul@f1+1
  6372  0984  303F               	movlw	63
  6373  0985  00AE               	movwf	___ftmul@f1+2
  6374  0986  0845               	movf	_fround$1229,w
  6375  0987  00AF               	movwf	___ftmul@f2
  6376  0988  0846               	movf	_fround$1229+1,w
  6377  0989  00B0               	movwf	___ftmul@f2+1
  6378  098A  0847               	movf	_fround$1229+2,w
  6379  098B  00B1               	movwf	___ftmul@f2+2
  6380  098C  160A  118A  24B9  120A  158A  	fcall	___ftmul
  6381  0991  1283               	bcf	3,5	;RP0=0, select bank0
  6382  0992  1303               	bcf	3,6	;RP1=0, select bank0
  6383  0993  082C               	movf	?___ftmul,w
  6384  0994  00BC               	movwf	?_fround
  6385  0995  082D               	movf	?___ftmul+1,w
  6386  0996  00BD               	movwf	?_fround+1
  6387  0997  082E               	movf	?___ftmul+2,w
  6388  0998  00BE               	movwf	?_fround+2
  6389  0999  2A5C               	goto	l369
  6390  099A                     l3708:
  6391  099A  300B               	movlw	11
  6392  099B  024B               	subwf	fround@prec,w
  6393  099C  1C03               	skipc
  6394  099D  299F               	goto	u5081
  6395  099E  29A0               	goto	u5080
  6396  099F                     u5081:
  6397  099F  2A29               	goto	l3716
  6398  09A0                     u5080:
  6399  09A0                     l3710:
  6400                           
  6401                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6402  09A0  3003               	movlw	3
  6403  09A1  00BF               	movwf	??_fround
  6404  09A2  083F               	movf	??_fround,w
  6405  09A3  00A8               	movwf	___bmul@multiplicand
  6406  09A4  084B               	movf	fround@prec,w
  6407  09A5  00C0               	movwf	??_fround+1
  6408  09A6  01C1               	clrf	??_fround+2
  6409  09A7  0840               	movf	??_fround+1,w
  6410  09A8  00F4               	movwf	___lwmod@dividend
  6411  09A9  0841               	movf	??_fround+2,w
  6412  09AA  00F5               	movwf	___lwmod@dividend+1
  6413  09AB  300A               	movlw	10
  6414  09AC  00F2               	movwf	___lwmod@divisor
  6415  09AD  3000               	movlw	0
  6416  09AE  00F3               	movwf	___lwmod@divisor+1
  6417  09AF  160A  158A  2617  120A  158A  	fcall	___lwmod
  6418  09B4  0872               	movf	?___lwmod,w
  6419  09B5  120A  118A  27E9  120A  158A  	fcall	___bmul
  6420  09BA  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6421  09BB  0084               	movwf	4
  6422  09BC  160A  118A  200A  120A  158A  	fcall	stringdir
  6423  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  6424  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  6425  09C3  00AC               	movwf	___ftmul@f1
  6426  09C4  160A  118A  200A  120A  158A  	fcall	stringdir
  6427  09C9  00AD               	movwf	___ftmul@f1+1
  6428  09CA  160A  118A  200A  120A  158A  	fcall	stringdir
  6429  09CF  00AE               	movwf	___ftmul@f1+2
  6430  09D0  3003               	movlw	3
  6431  09D1  00C2               	movwf	??_fround+3
  6432  09D2  0842               	movf	??_fround+3,w
  6433  09D3  00A8               	movwf	___bmul@multiplicand
  6434  09D4  084B               	movf	fround@prec,w
  6435  09D5  00C3               	movwf	??_fround+4
  6436  09D6  01C4               	clrf	??_fround+5
  6437  09D7  0843               	movf	??_fround+4,w
  6438  09D8  00A2               	movwf	___lwdiv@dividend
  6439  09D9  0844               	movf	??_fround+5,w
  6440  09DA  00A3               	movwf	___lwdiv@dividend+1
  6441  09DB  300A               	movlw	10
  6442  09DC  00A0               	movwf	___lwdiv@divisor
  6443  09DD  3000               	movlw	0
  6444  09DE  00A1               	movwf	___lwdiv@divisor+1
  6445  09DF  160A  158A  268E  120A  158A  	fcall	___lwdiv
  6446  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  6447  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  6448  09E6  0820               	movf	?___lwdiv,w
  6449  09E7  120A  118A  27E9  120A  158A  	fcall	___bmul
  6450  09EC  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  6451  09ED  0084               	movwf	4
  6452  09EE  160A  118A  200A  120A  158A  	fcall	stringdir
  6453  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  6454  09F4  1303               	bcf	3,6	;RP1=0, select bank0
  6455  09F5  00AF               	movwf	___ftmul@f2
  6456  09F6  160A  118A  200A  120A  158A  	fcall	stringdir
  6457  09FB  00B0               	movwf	___ftmul@f2+1
  6458  09FC  160A  118A  200A  120A  158A  	fcall	stringdir
  6459  0A01  00B1               	movwf	___ftmul@f2+2
  6460  0A02  160A  118A  24B9  120A  158A  	fcall	___ftmul
  6461  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  6462  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  6463  0A09  082C               	movf	?___ftmul,w
  6464  0A0A  00C8               	movwf	_fround$1228
  6465  0A0B  082D               	movf	?___ftmul+1,w
  6466  0A0C  00C9               	movwf	_fround$1228+1
  6467  0A0D  082E               	movf	?___ftmul+2,w
  6468  0A0E  00CA               	movwf	_fround$1228+2
  6469  0A0F                     l3712:
  6470                           
  6471                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6472  0A0F  3000               	movlw	0
  6473  0A10  00AC               	movwf	___ftmul@f1
  6474  0A11  3000               	movlw	0
  6475  0A12  00AD               	movwf	___ftmul@f1+1
  6476  0A13  303F               	movlw	63
  6477  0A14  00AE               	movwf	___ftmul@f1+2
  6478  0A15  0848               	movf	_fround$1228,w
  6479  0A16  00AF               	movwf	___ftmul@f2
  6480  0A17  0849               	movf	_fround$1228+1,w
  6481  0A18  00B0               	movwf	___ftmul@f2+1
  6482  0A19  084A               	movf	_fround$1228+2,w
  6483  0A1A  00B1               	movwf	___ftmul@f2+2
  6484  0A1B  160A  118A  24B9  120A  158A  	fcall	___ftmul
  6485  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  6486  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  6487  0A22  082C               	movf	?___ftmul,w
  6488  0A23  00BC               	movwf	?_fround
  6489  0A24  082D               	movf	?___ftmul+1,w
  6490  0A25  00BD               	movwf	?_fround+1
  6491  0A26  082E               	movf	?___ftmul+2,w
  6492  0A27  00BE               	movwf	?_fround+2
  6493  0A28  2A5C               	goto	l369
  6494  0A29                     l3716:
  6495                           
  6496                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 425:  return 0.5 
      +                          * _npowers_[prec];
  6497  0A29  3000               	movlw	0
  6498  0A2A  00AC               	movwf	___ftmul@f1
  6499  0A2B  3000               	movlw	0
  6500  0A2C  00AD               	movwf	___ftmul@f1+1
  6501  0A2D  303F               	movlw	63
  6502  0A2E  00AE               	movwf	___ftmul@f1+2
  6503  0A2F  3003               	movlw	3
  6504  0A30  00BF               	movwf	??_fround
  6505  0A31  083F               	movf	??_fround,w
  6506  0A32  00A8               	movwf	___bmul@multiplicand
  6507  0A33  084B               	movf	fround@prec,w
  6508  0A34  120A  118A  27E9  120A  158A  	fcall	___bmul
  6509  0A39  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6510  0A3A  0084               	movwf	4
  6511  0A3B  160A  118A  200A  120A  158A  	fcall	stringdir
  6512  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  6513  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  6514  0A42  00AF               	movwf	___ftmul@f2
  6515  0A43  160A  118A  200A  120A  158A  	fcall	stringdir
  6516  0A48  00B0               	movwf	___ftmul@f2+1
  6517  0A49  160A  118A  200A  120A  158A  	fcall	stringdir
  6518  0A4E  00B1               	movwf	___ftmul@f2+2
  6519  0A4F  160A  118A  24B9  120A  158A  	fcall	___ftmul
  6520  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  6521  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  6522  0A56  082C               	movf	?___ftmul,w
  6523  0A57  00BC               	movwf	?_fround
  6524  0A58  082D               	movf	?___ftmul+1,w
  6525  0A59  00BD               	movwf	?_fround+1
  6526  0A5A  082E               	movf	?___ftmul+2,w
  6527  0A5B  00BE               	movwf	?_fround+2
  6528  0A5C                     l369:
  6529  0A5C  0008               	return
  6530  0A5D                     __end_of_fround:
  6531                           
  6532                           	psect	text31
  6533  1E17                     __ptext31:	
  6534 ;; *************** function ___lwmod *****************
  6535 ;; Defined at:
  6536 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  divisor         2    2[COMMON] unsigned int 
  6539 ;;  dividend        2    4[COMMON] unsigned int 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;  counter         1    7[COMMON] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  2    2[COMMON] unsigned int 
  6544 ;; Registers used:
  6545 ;;		wreg, status,2, status,0
  6546 ;; Tracked objects:
  6547 ;;		On entry : 0/0
  6548 ;;		On exit  : 0/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6551 ;;      Params:         4       0       0       0       0
  6552 ;;      Locals:         1       0       0       0       0
  6553 ;;      Temps:          1       0       0       0       0
  6554 ;;      Totals:         6       0       0       0       0
  6555 ;;Total ram usage:        6 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    1
  6558 ;; This function calls:
  6559 ;;		Nothing
  6560 ;; This function is called by:
  6561 ;;		_fround
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           
  6566                           ;psect for function ___lwmod
  6567  1E17                     ___lwmod:
  6568  1E17                     l2514:	
  6569                           ;incstack = 0
  6570                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6571                           
  6572  1E17  0872               	movf	___lwmod@divisor,w
  6573  1E18  0473               	iorwf	___lwmod@divisor+1,w
  6574  1E19  1903               	btfsc	3,2
  6575  1E1A  2E1C               	goto	u3041
  6576  1E1B  2E1D               	goto	u3040
  6577  1E1C                     u3041:
  6578  1E1C  2E4C               	goto	l2532
  6579  1E1D                     u3040:
  6580  1E1D                     l2516:
  6581  1E1D  01F7               	clrf	___lwmod@counter
  6582  1E1E  0AF7               	incf	___lwmod@counter,f
  6583  1E1F  2E2B               	goto	l2522
  6584  1E20                     l2518:
  6585  1E20  3001               	movlw	1
  6586  1E21                     u3055:
  6587  1E21  1003               	clrc
  6588  1E22  0DF2               	rlf	___lwmod@divisor,f
  6589  1E23  0DF3               	rlf	___lwmod@divisor+1,f
  6590  1E24  3EFF               	addlw	-1
  6591  1E25  1D03               	skipz
  6592  1E26  2E21               	goto	u3055
  6593  1E27                     l2520:
  6594  1E27  3001               	movlw	1
  6595  1E28  00F6               	movwf	??___lwmod
  6596  1E29  0876               	movf	??___lwmod,w
  6597  1E2A  07F7               	addwf	___lwmod@counter,f
  6598  1E2B                     l2522:
  6599  1E2B  1FF3               	btfss	___lwmod@divisor+1,7
  6600  1E2C  2E2E               	goto	u3061
  6601  1E2D  2E2F               	goto	u3060
  6602  1E2E                     u3061:
  6603  1E2E  2E20               	goto	l2518
  6604  1E2F                     u3060:
  6605  1E2F                     l2524:
  6606  1E2F  0873               	movf	___lwmod@divisor+1,w
  6607  1E30  0275               	subwf	___lwmod@dividend+1,w
  6608  1E31  1D03               	skipz
  6609  1E32  2E35               	goto	u3075
  6610  1E33  0872               	movf	___lwmod@divisor,w
  6611  1E34  0274               	subwf	___lwmod@dividend,w
  6612  1E35                     u3075:
  6613  1E35  1C03               	skipc
  6614  1E36  2E38               	goto	u3071
  6615  1E37  2E39               	goto	u3070
  6616  1E38                     u3071:
  6617  1E38  2E3F               	goto	l2528
  6618  1E39                     u3070:
  6619  1E39                     l2526:
  6620  1E39  0872               	movf	___lwmod@divisor,w
  6621  1E3A  02F4               	subwf	___lwmod@dividend,f
  6622  1E3B  0873               	movf	___lwmod@divisor+1,w
  6623  1E3C  1C03               	skipc
  6624  1E3D  03F5               	decf	___lwmod@dividend+1,f
  6625  1E3E  02F5               	subwf	___lwmod@dividend+1,f
  6626  1E3F                     l2528:
  6627  1E3F  3001               	movlw	1
  6628  1E40                     u3085:
  6629  1E40  1003               	clrc
  6630  1E41  0CF3               	rrf	___lwmod@divisor+1,f
  6631  1E42  0CF2               	rrf	___lwmod@divisor,f
  6632  1E43  3EFF               	addlw	-1
  6633  1E44  1D03               	skipz
  6634  1E45  2E40               	goto	u3085
  6635  1E46                     l2530:
  6636  1E46  3001               	movlw	1
  6637  1E47  02F7               	subwf	___lwmod@counter,f
  6638  1E48  1D03               	btfss	3,2
  6639  1E49  2E4B               	goto	u3091
  6640  1E4A  2E4C               	goto	u3090
  6641  1E4B                     u3091:
  6642  1E4B  2E2F               	goto	l2524
  6643  1E4C                     u3090:
  6644  1E4C                     l2532:
  6645  1E4C  0875               	movf	___lwmod@dividend+1,w
  6646  1E4D  00F3               	movwf	?___lwmod+1
  6647  1E4E  0874               	movf	___lwmod@dividend,w
  6648  1E4F  00F2               	movwf	?___lwmod
  6649  1E50                     l924:
  6650  1E50  0008               	return
  6651  1E51                     __end_of___lwmod:
  6652                           
  6653                           	psect	text32
  6654  1E8E                     __ptext32:	
  6655 ;; *************** function ___lwdiv *****************
  6656 ;; Defined at:
  6657 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  divisor         2    0[BANK0 ] unsigned int 
  6660 ;;  dividend        2    2[BANK0 ] unsigned int 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  quotient        2    5[BANK0 ] unsigned int 
  6663 ;;  counter         1    4[BANK0 ] unsigned char 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  2    0[BANK0 ] unsigned int 
  6666 ;; Registers used:
  6667 ;;		wreg, status,2, status,0
  6668 ;; Tracked objects:
  6669 ;;		On entry : 0/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6673 ;;      Params:         0       4       0       0       0
  6674 ;;      Locals:         0       3       0       0       0
  6675 ;;      Temps:          1       0       0       0       0
  6676 ;;      Totals:         1       7       0       0       0
  6677 ;;Total ram usage:        8 bytes
  6678 ;; Hardware stack levels used:    1
  6679 ;; Hardware stack levels required when called:    1
  6680 ;; This function calls:
  6681 ;;		Nothing
  6682 ;; This function is called by:
  6683 ;;		_fround
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           
  6688                           ;psect for function ___lwdiv
  6689  1E8E                     ___lwdiv:
  6690  1E8E                     l3652:	
  6691                           ;incstack = 0
  6692                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6693                           
  6694  1E8E  1283               	bcf	3,5	;RP0=0, select bank0
  6695  1E8F  1303               	bcf	3,6	;RP1=0, select bank0
  6696  1E90  01A5               	clrf	___lwdiv@quotient
  6697  1E91  01A6               	clrf	___lwdiv@quotient+1
  6698  1E92                     l3654:
  6699  1E92  0820               	movf	___lwdiv@divisor,w
  6700  1E93  0421               	iorwf	___lwdiv@divisor+1,w
  6701  1E94  1903               	btfsc	3,2
  6702  1E95  2E97               	goto	u5001
  6703  1E96  2E98               	goto	u5000
  6704  1E97                     u5001:
  6705  1E97  2ECF               	goto	l3674
  6706  1E98                     u5000:
  6707  1E98                     l3656:
  6708  1E98  01A4               	clrf	___lwdiv@counter
  6709  1E99  0AA4               	incf	___lwdiv@counter,f
  6710  1E9A  2EA6               	goto	l3662
  6711  1E9B                     l3658:
  6712  1E9B  3001               	movlw	1
  6713  1E9C                     u5015:
  6714  1E9C  1003               	clrc
  6715  1E9D  0DA0               	rlf	___lwdiv@divisor,f
  6716  1E9E  0DA1               	rlf	___lwdiv@divisor+1,f
  6717  1E9F  3EFF               	addlw	-1
  6718  1EA0  1D03               	skipz
  6719  1EA1  2E9C               	goto	u5015
  6720  1EA2                     l3660:
  6721  1EA2  3001               	movlw	1
  6722  1EA3  00F8               	movwf	??___lwdiv
  6723  1EA4  0878               	movf	??___lwdiv,w
  6724  1EA5  07A4               	addwf	___lwdiv@counter,f
  6725  1EA6                     l3662:
  6726  1EA6  1FA1               	btfss	___lwdiv@divisor+1,7
  6727  1EA7  2EA9               	goto	u5021
  6728  1EA8  2EAA               	goto	u5020
  6729  1EA9                     u5021:
  6730  1EA9  2E9B               	goto	l3658
  6731  1EAA                     u5020:
  6732  1EAA                     l3664:
  6733  1EAA  3001               	movlw	1
  6734  1EAB                     u5035:
  6735  1EAB  1003               	clrc
  6736  1EAC  0DA5               	rlf	___lwdiv@quotient,f
  6737  1EAD  0DA6               	rlf	___lwdiv@quotient+1,f
  6738  1EAE  3EFF               	addlw	-1
  6739  1EAF  1D03               	skipz
  6740  1EB0  2EAB               	goto	u5035
  6741  1EB1  0821               	movf	___lwdiv@divisor+1,w
  6742  1EB2  0223               	subwf	___lwdiv@dividend+1,w
  6743  1EB3  1D03               	skipz
  6744  1EB4  2EB7               	goto	u5045
  6745  1EB5  0820               	movf	___lwdiv@divisor,w
  6746  1EB6  0222               	subwf	___lwdiv@dividend,w
  6747  1EB7                     u5045:
  6748  1EB7  1C03               	skipc
  6749  1EB8  2EBA               	goto	u5041
  6750  1EB9  2EBB               	goto	u5040
  6751  1EBA                     u5041:
  6752  1EBA  2EC2               	goto	l3670
  6753  1EBB                     u5040:
  6754  1EBB                     l3666:
  6755  1EBB  0820               	movf	___lwdiv@divisor,w
  6756  1EBC  02A2               	subwf	___lwdiv@dividend,f
  6757  1EBD  0821               	movf	___lwdiv@divisor+1,w
  6758  1EBE  1C03               	skipc
  6759  1EBF  03A3               	decf	___lwdiv@dividend+1,f
  6760  1EC0  02A3               	subwf	___lwdiv@dividend+1,f
  6761  1EC1                     l3668:
  6762  1EC1  1425               	bsf	___lwdiv@quotient,0
  6763  1EC2                     l3670:
  6764  1EC2  3001               	movlw	1
  6765  1EC3                     u5055:
  6766  1EC3  1003               	clrc
  6767  1EC4  0CA1               	rrf	___lwdiv@divisor+1,f
  6768  1EC5  0CA0               	rrf	___lwdiv@divisor,f
  6769  1EC6  3EFF               	addlw	-1
  6770  1EC7  1D03               	skipz
  6771  1EC8  2EC3               	goto	u5055
  6772  1EC9                     l3672:
  6773  1EC9  3001               	movlw	1
  6774  1ECA  02A4               	subwf	___lwdiv@counter,f
  6775  1ECB  1D03               	btfss	3,2
  6776  1ECC  2ECE               	goto	u5061
  6777  1ECD  2ECF               	goto	u5060
  6778  1ECE                     u5061:
  6779  1ECE  2EAA               	goto	l3664
  6780  1ECF                     u5060:
  6781  1ECF                     l3674:
  6782  1ECF  0826               	movf	___lwdiv@quotient+1,w
  6783  1ED0  00A1               	movwf	?___lwdiv+1
  6784  1ED1  0825               	movf	___lwdiv@quotient,w
  6785  1ED2  00A0               	movwf	?___lwdiv
  6786  1ED3                     l914:
  6787  1ED3  0008               	return
  6788  1ED4                     __end_of___lwdiv:
  6789                           
  6790                           	psect	text33
  6791  14B9                     __ptext33:	
  6792 ;; *************** function ___ftmul *****************
  6793 ;; Defined at:
  6794 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftmul.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  f1              3   12[BANK0 ] float 
  6797 ;;  f2              3   15[BANK0 ] float 
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  6800 ;;  sign            1   27[BANK0 ] unsigned char 
  6801 ;;  cntr            1   26[BANK0 ] unsigned char 
  6802 ;;  exp             1   22[BANK0 ] unsigned char 
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  3   12[BANK0 ] float 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2, status,0, pclath, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6812 ;;      Params:         0       6       0       0       0
  6813 ;;      Locals:         0       6       0       0       0
  6814 ;;      Temps:          0       4       0       0       0
  6815 ;;      Totals:         0      16       0       0       0
  6816 ;;Total ram usage:       16 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    2
  6819 ;; This function calls:
  6820 ;;		___ftpack
  6821 ;; This function is called by:
  6822 ;;		_main
  6823 ;;		_fround
  6824 ;;		_scale
  6825 ;;		_sprintf
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           
  6830                           ;psect for function ___ftmul
  6831  14B9                     ___ftmul:
  6832  14B9                     l3602:	
  6833                           ;incstack = 0
  6834                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6835                           
  6836  14B9  1283               	bcf	3,5	;RP0=0, select bank0
  6837  14BA  1303               	bcf	3,6	;RP1=0, select bank0
  6838  14BB  082C               	movf	___ftmul@f1,w
  6839  14BC  00B2               	movwf	??___ftmul
  6840  14BD  082D               	movf	___ftmul@f1+1,w
  6841  14BE  00B3               	movwf	??___ftmul+1
  6842  14BF  082E               	movf	___ftmul@f1+2,w
  6843  14C0  00B4               	movwf	??___ftmul+2
  6844  14C1  1003               	clrc
  6845  14C2  0D33               	rlf	??___ftmul+1,w
  6846  14C3  0D34               	rlf	??___ftmul+2,w
  6847  14C4  00B5               	movwf	??___ftmul+3
  6848  14C5  0835               	movf	??___ftmul+3,w
  6849  14C6  00B6               	movwf	___ftmul@exp
  6850  14C7  0836               	movf	___ftmul@exp,w
  6851  14C8  1D03               	btfss	3,2
  6852  14C9  2CCB               	goto	u4861
  6853  14CA  2CCC               	goto	u4860
  6854  14CB                     u4861:
  6855  14CB  2CD3               	goto	l3608
  6856  14CC                     u4860:
  6857  14CC                     l3604:
  6858  14CC  3000               	movlw	0
  6859  14CD  00AC               	movwf	?___ftmul
  6860  14CE  3000               	movlw	0
  6861  14CF  00AD               	movwf	?___ftmul+1
  6862  14D0  3000               	movlw	0
  6863  14D1  00AE               	movwf	?___ftmul+2
  6864  14D2  2D9D               	goto	l781
  6865  14D3                     l3608:
  6866  14D3  082F               	movf	___ftmul@f2,w
  6867  14D4  00B2               	movwf	??___ftmul
  6868  14D5  0830               	movf	___ftmul@f2+1,w
  6869  14D6  00B3               	movwf	??___ftmul+1
  6870  14D7  0831               	movf	___ftmul@f2+2,w
  6871  14D8  00B4               	movwf	??___ftmul+2
  6872  14D9  1003               	clrc
  6873  14DA  0D33               	rlf	??___ftmul+1,w
  6874  14DB  0D34               	rlf	??___ftmul+2,w
  6875  14DC  00B5               	movwf	??___ftmul+3
  6876  14DD  0835               	movf	??___ftmul+3,w
  6877  14DE  00BB               	movwf	___ftmul@sign
  6878  14DF  083B               	movf	___ftmul@sign,w
  6879  14E0  1D03               	btfss	3,2
  6880  14E1  2CE3               	goto	u4871
  6881  14E2  2CE4               	goto	u4870
  6882  14E3                     u4871:
  6883  14E3  2CEB               	goto	l3614
  6884  14E4                     u4870:
  6885  14E4                     l3610:
  6886  14E4  3000               	movlw	0
  6887  14E5  00AC               	movwf	?___ftmul
  6888  14E6  3000               	movlw	0
  6889  14E7  00AD               	movwf	?___ftmul+1
  6890  14E8  3000               	movlw	0
  6891  14E9  00AE               	movwf	?___ftmul+2
  6892  14EA  2D9D               	goto	l781
  6893  14EB                     l3614:
  6894  14EB  083B               	movf	___ftmul@sign,w
  6895  14EC  3E7B               	addlw	123
  6896  14ED  00B2               	movwf	??___ftmul
  6897  14EE  0832               	movf	??___ftmul,w
  6898  14EF  07B6               	addwf	___ftmul@exp,f
  6899  14F0  082C               	movf	___ftmul@f1,w
  6900  14F1  00B2               	movwf	??___ftmul
  6901  14F2  082D               	movf	___ftmul@f1+1,w
  6902  14F3  00B3               	movwf	??___ftmul+1
  6903  14F4  082E               	movf	___ftmul@f1+2,w
  6904  14F5  00B4               	movwf	??___ftmul+2
  6905  14F6  3010               	movlw	16
  6906  14F7                     u4885:
  6907  14F7  1003               	clrc
  6908  14F8  0CB4               	rrf	??___ftmul+2,f
  6909  14F9  0CB3               	rrf	??___ftmul+1,f
  6910  14FA  0CB2               	rrf	??___ftmul,f
  6911  14FB                     u4880:
  6912  14FB  3EFF               	addlw	-1
  6913  14FC  1D03               	skipz
  6914  14FD  2CF7               	goto	u4885
  6915  14FE  0832               	movf	??___ftmul,w
  6916  14FF  00B5               	movwf	??___ftmul+3
  6917  1500  0835               	movf	??___ftmul+3,w
  6918  1501  00BB               	movwf	___ftmul@sign
  6919  1502  082F               	movf	___ftmul@f2,w
  6920  1503  00B2               	movwf	??___ftmul
  6921  1504  0830               	movf	___ftmul@f2+1,w
  6922  1505  00B3               	movwf	??___ftmul+1
  6923  1506  0831               	movf	___ftmul@f2+2,w
  6924  1507  00B4               	movwf	??___ftmul+2
  6925  1508  3010               	movlw	16
  6926  1509                     u4895:
  6927  1509  1003               	clrc
  6928  150A  0CB4               	rrf	??___ftmul+2,f
  6929  150B  0CB3               	rrf	??___ftmul+1,f
  6930  150C  0CB2               	rrf	??___ftmul,f
  6931  150D                     u4890:
  6932  150D  3EFF               	addlw	-1
  6933  150E  1D03               	skipz
  6934  150F  2D09               	goto	u4895
  6935  1510  0832               	movf	??___ftmul,w
  6936  1511  00B5               	movwf	??___ftmul+3
  6937  1512  0835               	movf	??___ftmul+3,w
  6938  1513  06BB               	xorwf	___ftmul@sign,f
  6939  1514  3080               	movlw	128
  6940  1515  00B2               	movwf	??___ftmul
  6941  1516  0832               	movf	??___ftmul,w
  6942  1517  05BB               	andwf	___ftmul@sign,f
  6943  1518                     l3616:
  6944  1518  17AD               	bsf	___ftmul@f1+1,7
  6945  1519                     l3618:
  6946  1519  17B0               	bsf	___ftmul@f2+1,7
  6947  151A                     l3620:
  6948  151A  30FF               	movlw	255
  6949  151B  05AF               	andwf	___ftmul@f2,f
  6950  151C  30FF               	movlw	255
  6951  151D  05B0               	andwf	___ftmul@f2+1,f
  6952  151E  3000               	movlw	0
  6953  151F  05B1               	andwf	___ftmul@f2+2,f
  6954  1520                     l3622:
  6955  1520  3000               	movlw	0
  6956  1521  00B7               	movwf	___ftmul@f3_as_product
  6957  1522  3000               	movlw	0
  6958  1523  00B8               	movwf	___ftmul@f3_as_product+1
  6959  1524  3000               	movlw	0
  6960  1525  00B9               	movwf	___ftmul@f3_as_product+2
  6961  1526                     l3624:
  6962  1526  3007               	movlw	7
  6963  1527  00B2               	movwf	??___ftmul
  6964  1528  0832               	movf	??___ftmul,w
  6965  1529  00BA               	movwf	___ftmul@cntr
  6966  152A                     l3626:
  6967  152A  1C2C               	btfss	___ftmul@f1,0
  6968  152B  2D2D               	goto	u4901
  6969  152C  2D2E               	goto	u4900
  6970  152D                     u4901:
  6971  152D  2D3E               	goto	l3630
  6972  152E                     u4900:
  6973  152E                     l3628:
  6974  152E  082F               	movf	___ftmul@f2,w
  6975  152F  07B7               	addwf	___ftmul@f3_as_product,f
  6976  1530  0830               	movf	___ftmul@f2+1,w
  6977  1531  1103               	clrz
  6978  1532  1803               	skipnc
  6979  1533  0A30               	incf	___ftmul@f2+1,w
  6980  1534  1903               	skipnz
  6981  1535  2D37               	goto	u4911
  6982  1536  07B8               	addwf	___ftmul@f3_as_product+1,f
  6983  1537                     u4911:
  6984  1537  0831               	movf	___ftmul@f2+2,w
  6985  1538  1103               	clrz
  6986  1539  1803               	skipnc
  6987  153A  0A31               	incf	___ftmul@f2+2,w
  6988  153B  1903               	skipnz
  6989  153C  2D3E               	goto	u4912
  6990  153D  07B9               	addwf	___ftmul@f3_as_product+2,f
  6991  153E                     u4912:
  6992  153E                     l3630:
  6993  153E  3001               	movlw	1
  6994  153F                     u4925:
  6995  153F  1003               	clrc
  6996  1540  0CAE               	rrf	___ftmul@f1+2,f
  6997  1541  0CAD               	rrf	___ftmul@f1+1,f
  6998  1542  0CAC               	rrf	___ftmul@f1,f
  6999  1543  3EFF               	addlw	-1
  7000  1544  1D03               	skipz
  7001  1545  2D3F               	goto	u4925
  7002  1546                     l3632:
  7003  1546  3001               	movlw	1
  7004  1547                     u4935:
  7005  1547  1003               	clrc
  7006  1548  0DAF               	rlf	___ftmul@f2,f
  7007  1549  0DB0               	rlf	___ftmul@f2+1,f
  7008  154A  0DB1               	rlf	___ftmul@f2+2,f
  7009  154B  3EFF               	addlw	-1
  7010  154C  1D03               	skipz
  7011  154D  2D47               	goto	u4935
  7012  154E                     l3634:
  7013  154E  3001               	movlw	1
  7014  154F  02BA               	subwf	___ftmul@cntr,f
  7015  1550  1D03               	btfss	3,2
  7016  1551  2D53               	goto	u4941
  7017  1552  2D54               	goto	u4940
  7018  1553                     u4941:
  7019  1553  2D2A               	goto	l3626
  7020  1554                     u4940:
  7021  1554                     l3636:
  7022  1554  3009               	movlw	9
  7023  1555  00B2               	movwf	??___ftmul
  7024  1556  0832               	movf	??___ftmul,w
  7025  1557  00BA               	movwf	___ftmul@cntr
  7026  1558                     l3638:
  7027  1558  1C2C               	btfss	___ftmul@f1,0
  7028  1559  2D5B               	goto	u4951
  7029  155A  2D5C               	goto	u4950
  7030  155B                     u4951:
  7031  155B  2D6C               	goto	l3642
  7032  155C                     u4950:
  7033  155C                     l3640:
  7034  155C  082F               	movf	___ftmul@f2,w
  7035  155D  07B7               	addwf	___ftmul@f3_as_product,f
  7036  155E  0830               	movf	___ftmul@f2+1,w
  7037  155F  1103               	clrz
  7038  1560  1803               	skipnc
  7039  1561  0A30               	incf	___ftmul@f2+1,w
  7040  1562  1903               	skipnz
  7041  1563  2D65               	goto	u4961
  7042  1564  07B8               	addwf	___ftmul@f3_as_product+1,f
  7043  1565                     u4961:
  7044  1565  0831               	movf	___ftmul@f2+2,w
  7045  1566  1103               	clrz
  7046  1567  1803               	skipnc
  7047  1568  0A31               	incf	___ftmul@f2+2,w
  7048  1569  1903               	skipnz
  7049  156A  2D6C               	goto	u4962
  7050  156B  07B9               	addwf	___ftmul@f3_as_product+2,f
  7051  156C                     u4962:
  7052  156C                     l3642:
  7053  156C  3001               	movlw	1
  7054  156D                     u4975:
  7055  156D  1003               	clrc
  7056  156E  0CAE               	rrf	___ftmul@f1+2,f
  7057  156F  0CAD               	rrf	___ftmul@f1+1,f
  7058  1570  0CAC               	rrf	___ftmul@f1,f
  7059  1571  3EFF               	addlw	-1
  7060  1572  1D03               	skipz
  7061  1573  2D6D               	goto	u4975
  7062  1574                     l3644:
  7063  1574  3001               	movlw	1
  7064  1575                     u4985:
  7065  1575  1003               	clrc
  7066  1576  0CB9               	rrf	___ftmul@f3_as_product+2,f
  7067  1577  0CB8               	rrf	___ftmul@f3_as_product+1,f
  7068  1578  0CB7               	rrf	___ftmul@f3_as_product,f
  7069  1579  3EFF               	addlw	-1
  7070  157A  1D03               	skipz
  7071  157B  2D75               	goto	u4985
  7072  157C                     l3646:
  7073  157C  3001               	movlw	1
  7074  157D  02BA               	subwf	___ftmul@cntr,f
  7075  157E  1D03               	btfss	3,2
  7076  157F  2D81               	goto	u4991
  7077  1580  2D82               	goto	u4990
  7078  1581                     u4991:
  7079  1581  2D58               	goto	l3638
  7080  1582                     u4990:
  7081  1582                     l3648:
  7082  1582  0837               	movf	___ftmul@f3_as_product,w
  7083  1583  00F2               	movwf	___ftpack@arg
  7084  1584  0838               	movf	___ftmul@f3_as_product+1,w
  7085  1585  00F3               	movwf	___ftpack@arg+1
  7086  1586  0839               	movf	___ftmul@f3_as_product+2,w
  7087  1587  00F4               	movwf	___ftpack@arg+2
  7088  1588  0836               	movf	___ftmul@exp,w
  7089  1589  00B2               	movwf	??___ftmul
  7090  158A  0832               	movf	??___ftmul,w
  7091  158B  00F5               	movwf	___ftpack@exp
  7092  158C  083B               	movf	___ftmul@sign,w
  7093  158D  00B3               	movwf	??___ftmul+1
  7094  158E  0833               	movf	??___ftmul+1,w
  7095  158F  00F6               	movwf	___ftpack@sign
  7096  1590  160A  118A  22BE  160A  118A  	fcall	___ftpack
  7097  1595  0872               	movf	?___ftpack,w
  7098  1596  1283               	bcf	3,5	;RP0=0, select bank0
  7099  1597  1303               	bcf	3,6	;RP1=0, select bank0
  7100  1598  00AC               	movwf	?___ftmul
  7101  1599  0873               	movf	?___ftpack+1,w
  7102  159A  00AD               	movwf	?___ftmul+1
  7103  159B  0874               	movf	?___ftpack+2,w
  7104  159C  00AE               	movwf	?___ftmul+2
  7105  159D                     l781:
  7106  159D  0008               	return
  7107  159E                     __end_of___ftmul:
  7108                           
  7109                           	psect	text34
  7110  07E9                     __ptext34:	
  7111 ;; *************** function ___bmul *****************
  7112 ;; Defined at:
  7113 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  multiplier      1    wreg     unsigned char 
  7116 ;;  multiplicand    1    8[BANK0 ] unsigned char 
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;  multiplier      1   11[BANK0 ] unsigned char 
  7119 ;;  product         1   10[BANK0 ] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      unsigned char 
  7122 ;; Registers used:
  7123 ;;		wreg, status,2, status,0
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7129 ;;      Params:         0       1       0       0       0
  7130 ;;      Locals:         0       2       0       0       0
  7131 ;;      Temps:          0       1       0       0       0
  7132 ;;      Totals:         0       4       0       0       0
  7133 ;;Total ram usage:        4 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    1
  7136 ;; This function calls:
  7137 ;;		Nothing
  7138 ;; This function is called by:
  7139 ;;		_fround
  7140 ;;		_scale
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           
  7145                           ;psect for function ___bmul
  7146  07E9                     ___bmul:
  7147                           
  7148                           ;incstack = 0
  7149                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7150                           ;___bmul@multiplier stored from wreg
  7151  07E9  1283               	bcf	3,5	;RP0=0, select bank0
  7152  07EA  1303               	bcf	3,6	;RP1=0, select bank0
  7153  07EB  00AB               	movwf	___bmul@multiplier
  7154  07EC                     l2272:
  7155  07EC  01AA               	clrf	___bmul@product
  7156  07ED                     l2274:
  7157  07ED  1C2B               	btfss	___bmul@multiplier,0
  7158  07EE  2FF0               	goto	u2381
  7159  07EF  2FF1               	goto	u2380
  7160  07F0                     u2381:
  7161  07F0  2FF5               	goto	l2278
  7162  07F1                     u2380:
  7163  07F1                     l2276:
  7164  07F1  0828               	movf	___bmul@multiplicand,w
  7165  07F2  00A9               	movwf	??___bmul
  7166  07F3  0829               	movf	??___bmul,w
  7167  07F4  07AA               	addwf	___bmul@product,f
  7168  07F5                     l2278:
  7169  07F5  1003               	clrc
  7170  07F6  0DA8               	rlf	___bmul@multiplicand,f
  7171  07F7                     l2280:
  7172  07F7  1003               	clrc
  7173  07F8  0CAB               	rrf	___bmul@multiplier,f
  7174  07F9  082B               	movf	___bmul@multiplier,w
  7175  07FA  1D03               	btfss	3,2
  7176  07FB  2FFD               	goto	u2391
  7177  07FC  2FFE               	goto	u2390
  7178  07FD                     u2391:
  7179  07FD  2FED               	goto	l2274
  7180  07FE                     u2390:
  7181  07FE                     l2282:
  7182  07FE  082A               	movf	___bmul@product,w
  7183  07FF                     l498:
  7184  07FF  0008               	return
  7185  0800                     __end_of___bmul:
  7186                           
  7187                           	psect	text35
  7188  133A                     __ptext35:	
  7189 ;; *************** function __tdiv_to_l_ *****************
  7190 ;; Defined at:
  7191 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftdivl.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  f1              3    2[COMMON] float 
  7194 ;;  f2              3    5[COMMON] float 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  quot            4    4[BANK0 ] unsigned long 
  7197 ;;  exp1            1    9[BANK0 ] unsigned char 
  7198 ;;  cntr            1    8[BANK0 ] unsigned char 
  7199 ;; Return value:  Size  Location     Type
  7200 ;;                  4    2[COMMON] unsigned long 
  7201 ;; Registers used:
  7202 ;;		wreg, status,2, status,0
  7203 ;; Tracked objects:
  7204 ;;		On entry : 0/0
  7205 ;;		On exit  : 0/0
  7206 ;;		Unchanged: 0/0
  7207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7208 ;;      Params:         6       0       0       0       0
  7209 ;;      Locals:         0       6       0       0       0
  7210 ;;      Temps:          0       4       0       0       0
  7211 ;;      Totals:         6      10       0       0       0
  7212 ;;Total ram usage:       16 bytes
  7213 ;; Hardware stack levels used:    1
  7214 ;; Hardware stack levels required when called:    1
  7215 ;; This function calls:
  7216 ;;		Nothing
  7217 ;; This function is called by:
  7218 ;;		_sprintf
  7219 ;; This function uses a non-reentrant model
  7220 ;;
  7221                           
  7222                           
  7223                           ;psect for function __tdiv_to_l_
  7224  133A                     __tdiv_to_l_:
  7225  133A                     l3760:	
  7226                           ;incstack = 0
  7227                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7228                           
  7229  133A  0872               	movf	__tdiv_to_l_@f1,w
  7230  133B  1283               	bcf	3,5	;RP0=0, select bank0
  7231  133C  1303               	bcf	3,6	;RP1=0, select bank0
  7232  133D  00A0               	movwf	??__tdiv_to_l_
  7233  133E  0873               	movf	__tdiv_to_l_@f1+1,w
  7234  133F  00A1               	movwf	??__tdiv_to_l_+1
  7235  1340  0874               	movf	__tdiv_to_l_@f1+2,w
  7236  1341  00A2               	movwf	??__tdiv_to_l_+2
  7237  1342  1003               	clrc
  7238  1343  0D21               	rlf	??__tdiv_to_l_+1,w
  7239  1344  0D22               	rlf	??__tdiv_to_l_+2,w
  7240  1345  00A3               	movwf	??__tdiv_to_l_+3
  7241  1346  0823               	movf	??__tdiv_to_l_+3,w
  7242  1347  00A9               	movwf	__tdiv_to_l_@exp1
  7243  1348  0829               	movf	__tdiv_to_l_@exp1,w
  7244  1349  1D03               	btfss	3,2
  7245  134A  2B4C               	goto	u5141
  7246  134B  2B4D               	goto	u5140
  7247  134C                     u5141:
  7248  134C  2B56               	goto	l3766
  7249  134D                     u5140:
  7250  134D                     l3762:
  7251  134D  3000               	movlw	0
  7252  134E  00F5               	movwf	?__tdiv_to_l_+3
  7253  134F  3000               	movlw	0
  7254  1350  00F4               	movwf	?__tdiv_to_l_+2
  7255  1351  3000               	movlw	0
  7256  1352  00F3               	movwf	?__tdiv_to_l_+1
  7257  1353  3000               	movlw	0
  7258  1354  00F2               	movwf	?__tdiv_to_l_
  7259  1355  2BF6               	goto	l757
  7260  1356                     l3766:
  7261  1356  0875               	movf	__tdiv_to_l_@f2,w
  7262  1357  00A0               	movwf	??__tdiv_to_l_
  7263  1358  0876               	movf	__tdiv_to_l_@f2+1,w
  7264  1359  00A1               	movwf	??__tdiv_to_l_+1
  7265  135A  0877               	movf	__tdiv_to_l_@f2+2,w
  7266  135B  00A2               	movwf	??__tdiv_to_l_+2
  7267  135C  1003               	clrc
  7268  135D  0D21               	rlf	??__tdiv_to_l_+1,w
  7269  135E  0D22               	rlf	??__tdiv_to_l_+2,w
  7270  135F  00A3               	movwf	??__tdiv_to_l_+3
  7271  1360  0823               	movf	??__tdiv_to_l_+3,w
  7272  1361  00A8               	movwf	__tdiv_to_l_@cntr
  7273  1362  0828               	movf	__tdiv_to_l_@cntr,w
  7274  1363  1D03               	btfss	3,2
  7275  1364  2B66               	goto	u5151
  7276  1365  2B67               	goto	u5150
  7277  1366                     u5151:
  7278  1366  2B68               	goto	l758
  7279  1367                     u5150:
  7280  1367  2B4D               	goto	l3762
  7281  1368                     l758:
  7282  1368  17F3               	bsf	__tdiv_to_l_@f1+1,7
  7283  1369                     l3772:
  7284  1369  30FF               	movlw	255
  7285  136A  05F2               	andwf	__tdiv_to_l_@f1,f
  7286  136B  30FF               	movlw	255
  7287  136C  05F3               	andwf	__tdiv_to_l_@f1+1,f
  7288  136D  3000               	movlw	0
  7289  136E  05F4               	andwf	__tdiv_to_l_@f1+2,f
  7290  136F                     l3774:
  7291  136F  17F6               	bsf	__tdiv_to_l_@f2+1,7
  7292  1370  30FF               	movlw	255
  7293  1371  05F5               	andwf	__tdiv_to_l_@f2,f
  7294  1372  30FF               	movlw	255
  7295  1373  05F6               	andwf	__tdiv_to_l_@f2+1,f
  7296  1374  3000               	movlw	0
  7297  1375  05F7               	andwf	__tdiv_to_l_@f2+2,f
  7298  1376  3000               	movlw	0
  7299  1377  00A7               	movwf	__tdiv_to_l_@quot+3
  7300  1378  3000               	movlw	0
  7301  1379  00A6               	movwf	__tdiv_to_l_@quot+2
  7302  137A  3000               	movlw	0
  7303  137B  00A5               	movwf	__tdiv_to_l_@quot+1
  7304  137C  3000               	movlw	0
  7305  137D  00A4               	movwf	__tdiv_to_l_@quot
  7306  137E                     l3776:
  7307  137E  307F               	movlw	127
  7308  137F  02A9               	subwf	__tdiv_to_l_@exp1,f
  7309  1380                     l3778:
  7310  1380  3098               	movlw	152
  7311  1381  0728               	addwf	__tdiv_to_l_@cntr,w
  7312  1382  00A0               	movwf	??__tdiv_to_l_
  7313  1383  0820               	movf	??__tdiv_to_l_,w
  7314  1384  02A9               	subwf	__tdiv_to_l_@exp1,f
  7315  1385  3018               	movlw	24
  7316  1386  00A0               	movwf	??__tdiv_to_l_
  7317  1387  0820               	movf	??__tdiv_to_l_,w
  7318  1388  00A8               	movwf	__tdiv_to_l_@cntr
  7319  1389                     l3780:
  7320  1389  3001               	movlw	1
  7321  138A  00A0               	movwf	??__tdiv_to_l_
  7322  138B                     u5165:
  7323  138B  1003               	clrc
  7324  138C  0DA4               	rlf	__tdiv_to_l_@quot,f
  7325  138D  0DA5               	rlf	__tdiv_to_l_@quot+1,f
  7326  138E  0DA6               	rlf	__tdiv_to_l_@quot+2,f
  7327  138F  0DA7               	rlf	__tdiv_to_l_@quot+3,f
  7328  1390  0BA0               	decfsz	??__tdiv_to_l_,f
  7329  1391  2B8B               	goto	u5165
  7330  1392                     l3782:
  7331  1392  0877               	movf	__tdiv_to_l_@f2+2,w
  7332  1393  0274               	subwf	__tdiv_to_l_@f1+2,w
  7333  1394  1D03               	skipz
  7334  1395  2B9C               	goto	u5175
  7335  1396  0876               	movf	__tdiv_to_l_@f2+1,w
  7336  1397  0273               	subwf	__tdiv_to_l_@f1+1,w
  7337  1398  1D03               	skipz
  7338  1399  2B9C               	goto	u5175
  7339  139A  0875               	movf	__tdiv_to_l_@f2,w
  7340  139B  0272               	subwf	__tdiv_to_l_@f1,w
  7341  139C                     u5175:
  7342  139C  1C03               	skipc
  7343  139D  2B9F               	goto	u5171
  7344  139E  2BA0               	goto	u5170
  7345  139F                     u5171:
  7346  139F  2BAB               	goto	l3788
  7347  13A0                     u5170:
  7348  13A0                     l3784:
  7349  13A0  0875               	movf	__tdiv_to_l_@f2,w
  7350  13A1  02F2               	subwf	__tdiv_to_l_@f1,f
  7351  13A2  0876               	movf	__tdiv_to_l_@f2+1,w
  7352  13A3  1C03               	skipc
  7353  13A4  0F76               	incfsz	__tdiv_to_l_@f2+1,w
  7354  13A5  02F3               	subwf	__tdiv_to_l_@f1+1,f
  7355  13A6  0877               	movf	__tdiv_to_l_@f2+2,w
  7356  13A7  1C03               	skipc
  7357  13A8  0A77               	incf	__tdiv_to_l_@f2+2,w
  7358  13A9  02F4               	subwf	__tdiv_to_l_@f1+2,f
  7359  13AA                     l3786:
  7360  13AA  1424               	bsf	__tdiv_to_l_@quot,0
  7361  13AB                     l3788:
  7362  13AB  3001               	movlw	1
  7363  13AC                     u5185:
  7364  13AC  1003               	clrc
  7365  13AD  0DF2               	rlf	__tdiv_to_l_@f1,f
  7366  13AE  0DF3               	rlf	__tdiv_to_l_@f1+1,f
  7367  13AF  0DF4               	rlf	__tdiv_to_l_@f1+2,f
  7368  13B0  3EFF               	addlw	-1
  7369  13B1  1D03               	skipz
  7370  13B2  2BAC               	goto	u5185
  7371  13B3                     l3790:
  7372  13B3  3001               	movlw	1
  7373  13B4  02A8               	subwf	__tdiv_to_l_@cntr,f
  7374  13B5  1D03               	btfss	3,2
  7375  13B6  2BB8               	goto	u5191
  7376  13B7  2BB9               	goto	u5190
  7377  13B8                     u5191:
  7378  13B8  2B89               	goto	l3780
  7379  13B9                     u5190:
  7380  13B9                     l761:
  7381  13B9  1FA9               	btfss	__tdiv_to_l_@exp1,7
  7382  13BA  2BBC               	goto	u5201
  7383  13BB  2BBD               	goto	u5200
  7384  13BC                     u5201:
  7385  13BC  2BD7               	goto	l3800
  7386  13BD                     u5200:
  7387  13BD                     l3792:
  7388  13BD  0829               	movf	__tdiv_to_l_@exp1,w
  7389  13BE  3A80               	xorlw	128
  7390  13BF  3E97               	addlw	151
  7391  13C0  1803               	skipnc
  7392  13C1  2BC3               	goto	u5211
  7393  13C2  2BC4               	goto	u5210
  7394  13C3                     u5211:
  7395  13C3  2BC5               	goto	l3798
  7396  13C4                     u5210:
  7397  13C4  2B4D               	goto	l3762
  7398  13C5                     l3798:
  7399  13C5  3001               	movlw	1
  7400  13C6                     u5225:
  7401  13C6  1003               	clrc
  7402  13C7  0CA7               	rrf	__tdiv_to_l_@quot+3,f
  7403  13C8  0CA6               	rrf	__tdiv_to_l_@quot+2,f
  7404  13C9  0CA5               	rrf	__tdiv_to_l_@quot+1,f
  7405  13CA  0CA4               	rrf	__tdiv_to_l_@quot,f
  7406  13CB  3EFF               	addlw	-1
  7407  13CC  1D03               	skipz
  7408  13CD  2BC6               	goto	u5225
  7409  13CE  3001               	movlw	1
  7410  13CF  00A0               	movwf	??__tdiv_to_l_
  7411  13D0  0820               	movf	??__tdiv_to_l_,w
  7412  13D1  07A9               	addwf	__tdiv_to_l_@exp1,f
  7413  13D2  1D03               	btfss	3,2
  7414  13D3  2BD5               	goto	u5231
  7415  13D4  2BD6               	goto	u5230
  7416  13D5                     u5231:
  7417  13D5  2BC5               	goto	l3798
  7418  13D6                     u5230:
  7419  13D6  2BEE               	goto	l3808
  7420  13D7                     l3800:
  7421  13D7  3018               	movlw	24
  7422  13D8  0229               	subwf	__tdiv_to_l_@exp1,w
  7423  13D9  1C03               	skipc
  7424  13DA  2BDC               	goto	u5241
  7425  13DB  2BDD               	goto	u5240
  7426  13DC                     u5241:
  7427  13DC  2BE9               	goto	l768
  7428  13DD                     u5240:
  7429  13DD  2B4D               	goto	l3762
  7430  13DE                     l3806:
  7431  13DE  3001               	movlw	1
  7432  13DF  00A0               	movwf	??__tdiv_to_l_
  7433  13E0                     u5255:
  7434  13E0  1003               	clrc
  7435  13E1  0DA4               	rlf	__tdiv_to_l_@quot,f
  7436  13E2  0DA5               	rlf	__tdiv_to_l_@quot+1,f
  7437  13E3  0DA6               	rlf	__tdiv_to_l_@quot+2,f
  7438  13E4  0DA7               	rlf	__tdiv_to_l_@quot+3,f
  7439  13E5  0BA0               	decfsz	??__tdiv_to_l_,f
  7440  13E6  2BE0               	goto	u5255
  7441  13E7  3001               	movlw	1
  7442  13E8  02A9               	subwf	__tdiv_to_l_@exp1,f
  7443  13E9                     l768:
  7444  13E9  0829               	movf	__tdiv_to_l_@exp1,w
  7445  13EA  1D03               	btfss	3,2
  7446  13EB  2BED               	goto	u5261
  7447  13EC  2BEE               	goto	u5260
  7448  13ED                     u5261:
  7449  13ED  2BDE               	goto	l3806
  7450  13EE                     u5260:
  7451  13EE                     l3808:
  7452  13EE  0827               	movf	__tdiv_to_l_@quot+3,w
  7453  13EF  00F5               	movwf	?__tdiv_to_l_+3
  7454  13F0  0826               	movf	__tdiv_to_l_@quot+2,w
  7455  13F1  00F4               	movwf	?__tdiv_to_l_+2
  7456  13F2  0825               	movf	__tdiv_to_l_@quot+1,w
  7457  13F3  00F3               	movwf	?__tdiv_to_l_+1
  7458  13F4  0824               	movf	__tdiv_to_l_@quot,w
  7459  13F5  00F2               	movwf	?__tdiv_to_l_
  7460  13F6                     l757:
  7461  13F6  0008               	return
  7462  13F7                     __end_of__tdiv_to_l_:
  7463                           
  7464                           	psect	text36
  7465  159E                     __ptext36:	
  7466 ;; *************** function __div_to_l_ *****************
  7467 ;; Defined at:
  7468 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fldivl.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  f1              3    2[COMMON] unsigned long 
  7471 ;;  f2              3    5[COMMON] unsigned long 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  quot            4    8[BANK0 ] unsigned long 
  7474 ;;  exp1            1   13[BANK0 ] unsigned char 
  7475 ;;  cntr            1   12[BANK0 ] unsigned char 
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  4    2[COMMON] unsigned long 
  7478 ;; Registers used:
  7479 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7485 ;;      Params:         6       0       0       0       0
  7486 ;;      Locals:         0       6       0       0       0
  7487 ;;      Temps:          0       8       0       0       0
  7488 ;;      Totals:         6      14       0       0       0
  7489 ;;Total ram usage:       20 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    1
  7492 ;; This function calls:
  7493 ;;		Nothing
  7494 ;; This function is called by:
  7495 ;;		_sprintf
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           
  7500                           ;psect for function __div_to_l_
  7501  159E                     __div_to_l_:
  7502  159E                     l2684:	
  7503                           ;incstack = 0
  7504                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  7505                           
  7506  159E  3072               	movlw	low (__div_to_l_@f1| 0)
  7507  159F  0084               	movwf	4
  7508  15A0  0800               	movf	0,w
  7509  15A1  1283               	bcf	3,5	;RP0=0, select bank0
  7510  15A2  1303               	bcf	3,6	;RP1=0, select bank0
  7511  15A3  00A0               	movwf	??__div_to_l_
  7512  15A4  0A84               	incf	4,f
  7513  15A5  0800               	movf	0,w
  7514  15A6  00A1               	movwf	??__div_to_l_+1
  7515  15A7  0A84               	incf	4,f
  7516  15A8  0800               	movf	0,w
  7517  15A9  00A2               	movwf	??__div_to_l_+2
  7518  15AA  0A84               	incf	4,f
  7519  15AB  0800               	movf	0,w
  7520  15AC  00A3               	movwf	??__div_to_l_+3
  7521  15AD  1003               	clrc
  7522  15AE  0D22               	rlf	??__div_to_l_+2,w
  7523  15AF  0D23               	rlf	??__div_to_l_+3,w
  7524  15B0  00A4               	movwf	??__div_to_l_+4
  7525  15B1  0824               	movf	??__div_to_l_+4,w
  7526  15B2  00AD               	movwf	__div_to_l_@exp1
  7527  15B3  082D               	movf	__div_to_l_@exp1,w
  7528  15B4  1D03               	btfss	3,2
  7529  15B5  2DB7               	goto	u3331
  7530  15B6  2DB8               	goto	u3330
  7531  15B7                     u3331:
  7532  15B7  2DC1               	goto	l2690
  7533  15B8                     u3330:
  7534  15B8                     l2686:
  7535  15B8  3000               	movlw	0
  7536  15B9  00F5               	movwf	?__div_to_l_+3
  7537  15BA  3000               	movlw	0
  7538  15BB  00F4               	movwf	?__div_to_l_+2
  7539  15BC  3000               	movlw	0
  7540  15BD  00F3               	movwf	?__div_to_l_+1
  7541  15BE  3000               	movlw	0
  7542  15BF  00F2               	movwf	?__div_to_l_
  7543  15C0  2EC9               	goto	l678
  7544  15C1                     l2690:
  7545  15C1  3075               	movlw	low (__div_to_l_@f2| 0)
  7546  15C2  0084               	movwf	4
  7547  15C3  0800               	movf	0,w
  7548  15C4  00A0               	movwf	??__div_to_l_
  7549  15C5  0A84               	incf	4,f
  7550  15C6  0800               	movf	0,w
  7551  15C7  00A1               	movwf	??__div_to_l_+1
  7552  15C8  0A84               	incf	4,f
  7553  15C9  0800               	movf	0,w
  7554  15CA  00A2               	movwf	??__div_to_l_+2
  7555  15CB  0A84               	incf	4,f
  7556  15CC  0800               	movf	0,w
  7557  15CD  00A3               	movwf	??__div_to_l_+3
  7558  15CE  1003               	clrc
  7559  15CF  0D22               	rlf	??__div_to_l_+2,w
  7560  15D0  0D23               	rlf	??__div_to_l_+3,w
  7561  15D1  00A4               	movwf	??__div_to_l_+4
  7562  15D2  0824               	movf	??__div_to_l_+4,w
  7563  15D3  00AC               	movwf	__div_to_l_@cntr
  7564  15D4  082C               	movf	__div_to_l_@cntr,w
  7565  15D5  1D03               	btfss	3,2
  7566  15D6  2DD8               	goto	u3341
  7567  15D7  2DD9               	goto	u3340
  7568  15D8                     u3341:
  7569  15D8  2DDA               	goto	l2696
  7570  15D9                     u3340:
  7571  15D9  2DB8               	goto	l2686
  7572  15DA                     l2696:
  7573  15DA  3072               	movlw	low (__div_to_l_@f1| 0)
  7574  15DB  0084               	movwf	4
  7575  15DC  3000               	movlw	0
  7576  15DD  0480               	iorwf	0,f
  7577  15DE  0A84               	incf	4,f
  7578  15DF  3000               	movlw	0
  7579  15E0  0480               	iorwf	0,f
  7580  15E1  0A84               	incf	4,f
  7581  15E2  3080               	movlw	128
  7582  15E3  0480               	iorwf	0,f
  7583  15E4  0A84               	incf	4,f
  7584  15E5  3000               	movlw	0
  7585  15E6  0480               	iorwf	0,f
  7586  15E7  3072               	movlw	low (__div_to_l_@f1| 0)
  7587  15E8  0084               	movwf	4
  7588  15E9  30FF               	movlw	255
  7589  15EA  0580               	andwf	0,f
  7590  15EB  0A84               	incf	4,f
  7591  15EC  30FF               	movlw	255
  7592  15ED  0580               	andwf	0,f
  7593  15EE  0A84               	incf	4,f
  7594  15EF  30FF               	movlw	255
  7595  15F0  0580               	andwf	0,f
  7596  15F1  0A84               	incf	4,f
  7597  15F2  3000               	movlw	0
  7598  15F3  0580               	andwf	0,f
  7599  15F4  3075               	movlw	low (__div_to_l_@f2| 0)
  7600  15F5  0084               	movwf	4
  7601  15F6  3000               	movlw	0
  7602  15F7  0480               	iorwf	0,f
  7603  15F8  0A84               	incf	4,f
  7604  15F9  3000               	movlw	0
  7605  15FA  0480               	iorwf	0,f
  7606  15FB  0A84               	incf	4,f
  7607  15FC  3080               	movlw	128
  7608  15FD  0480               	iorwf	0,f
  7609  15FE  0A84               	incf	4,f
  7610  15FF  3000               	movlw	0
  7611  1600  0480               	iorwf	0,f
  7612  1601  3075               	movlw	low (__div_to_l_@f2| 0)
  7613  1602  0084               	movwf	4
  7614  1603  30FF               	movlw	255
  7615  1604  0580               	andwf	0,f
  7616  1605  0A84               	incf	4,f
  7617  1606  30FF               	movlw	255
  7618  1607  0580               	andwf	0,f
  7619  1608  0A84               	incf	4,f
  7620  1609  30FF               	movlw	255
  7621  160A  0580               	andwf	0,f
  7622  160B  0A84               	incf	4,f
  7623  160C  3000               	movlw	0
  7624  160D  0580               	andwf	0,f
  7625  160E                     l2698:
  7626  160E  3000               	movlw	0
  7627  160F  00AB               	movwf	__div_to_l_@quot+3
  7628  1610  3000               	movlw	0
  7629  1611  00AA               	movwf	__div_to_l_@quot+2
  7630  1612  3000               	movlw	0
  7631  1613  00A9               	movwf	__div_to_l_@quot+1
  7632  1614  3000               	movlw	0
  7633  1615  00A8               	movwf	__div_to_l_@quot
  7634  1616                     l2700:
  7635  1616  307F               	movlw	127
  7636  1617  02AD               	subwf	__div_to_l_@exp1,f
  7637  1618                     l2702:
  7638  1618  30A0               	movlw	160
  7639  1619  072C               	addwf	__div_to_l_@cntr,w
  7640  161A  00A0               	movwf	??__div_to_l_
  7641  161B  0820               	movf	??__div_to_l_,w
  7642  161C  02AD               	subwf	__div_to_l_@exp1,f
  7643  161D                     l2704:
  7644  161D  3020               	movlw	32
  7645  161E  00A0               	movwf	??__div_to_l_
  7646  161F  0820               	movf	??__div_to_l_,w
  7647  1620  00AC               	movwf	__div_to_l_@cntr
  7648  1621                     l2706:
  7649  1621  3001               	movlw	1
  7650  1622  00A0               	movwf	??__div_to_l_
  7651  1623                     u3355:
  7652  1623  1003               	clrc
  7653  1624  0DA8               	rlf	__div_to_l_@quot,f
  7654  1625  0DA9               	rlf	__div_to_l_@quot+1,f
  7655  1626  0DAA               	rlf	__div_to_l_@quot+2,f
  7656  1627  0DAB               	rlf	__div_to_l_@quot+3,f
  7657  1628  0BA0               	decfsz	??__div_to_l_,f
  7658  1629  2E23               	goto	u3355
  7659  162A                     l2708:
  7660  162A  3075               	movlw	low (__div_to_l_@f2| 0)
  7661  162B  0084               	movwf	4
  7662  162C  0800               	movf	0,w
  7663  162D  00A0               	movwf	??__div_to_l_
  7664  162E  0A84               	incf	4,f
  7665  162F  0800               	movf	0,w
  7666  1630  00A1               	movwf	??__div_to_l_+1
  7667  1631  0A84               	incf	4,f
  7668  1632  0800               	movf	0,w
  7669  1633  00A2               	movwf	??__div_to_l_+2
  7670  1634  0A84               	incf	4,f
  7671  1635  0800               	movf	0,w
  7672  1636  00A3               	movwf	??__div_to_l_+3
  7673  1637  3072               	movlw	low (__div_to_l_@f1| 0)
  7674  1638  0084               	movwf	4
  7675  1639  0800               	movf	0,w
  7676  163A  00A4               	movwf	??__div_to_l_+4
  7677  163B  0A84               	incf	4,f
  7678  163C  0800               	movf	0,w
  7679  163D  00A5               	movwf	??__div_to_l_+5
  7680  163E  0A84               	incf	4,f
  7681  163F  0800               	movf	0,w
  7682  1640  00A6               	movwf	??__div_to_l_+6
  7683  1641  0A84               	incf	4,f
  7684  1642  0800               	movf	0,w
  7685  1643  00A7               	movwf	??__div_to_l_+7
  7686  1644  0823               	movf	??__div_to_l_+3,w
  7687  1645  0227               	subwf	??__div_to_l_+7,w
  7688  1646  1D03               	skipz
  7689  1647  2E52               	goto	u3365
  7690  1648  0822               	movf	??__div_to_l_+2,w
  7691  1649  0226               	subwf	??__div_to_l_+6,w
  7692  164A  1D03               	skipz
  7693  164B  2E52               	goto	u3365
  7694  164C  0821               	movf	??__div_to_l_+1,w
  7695  164D  0225               	subwf	??__div_to_l_+5,w
  7696  164E  1D03               	skipz
  7697  164F  2E52               	goto	u3365
  7698  1650  0820               	movf	??__div_to_l_,w
  7699  1651  0224               	subwf	??__div_to_l_+4,w
  7700  1652                     u3365:
  7701  1652  1C03               	skipc
  7702  1653  2E55               	goto	u3361
  7703  1654  2E56               	goto	u3360
  7704  1655                     u3361:
  7705  1655  2E79               	goto	l681
  7706  1656                     u3360:
  7707  1656                     l2710:
  7708  1656  3075               	movlw	low (__div_to_l_@f2| 0)
  7709  1657  0084               	movwf	4
  7710  1658  0800               	movf	0,w
  7711  1659  00A0               	movwf	??__div_to_l_
  7712  165A  0A84               	incf	4,f
  7713  165B  0800               	movf	0,w
  7714  165C  00A1               	movwf	??__div_to_l_+1
  7715  165D  0A84               	incf	4,f
  7716  165E  0800               	movf	0,w
  7717  165F  00A2               	movwf	??__div_to_l_+2
  7718  1660  0A84               	incf	4,f
  7719  1661  0800               	movf	0,w
  7720  1662  00A3               	movwf	??__div_to_l_+3
  7721  1663  3072               	movlw	low (__div_to_l_@f1| 0)
  7722  1664  0084               	movwf	4
  7723  1665  0820               	movf	??__div_to_l_,w
  7724  1666  0280               	subwf	0,f
  7725  1667  0A84               	incf	4,f
  7726  1668  0821               	movf	??__div_to_l_+1,w
  7727  1669  1C03               	skipc
  7728  166A  0F21               	incfsz	??__div_to_l_+1,w
  7729  166B  0280               	subwf	0,f
  7730  166C  0A84               	incf	4,f
  7731  166D  0822               	movf	??__div_to_l_+2,w
  7732  166E  1C03               	skipc
  7733  166F  0F22               	incfsz	??__div_to_l_+2,w
  7734  1670  0280               	subwf	0,f
  7735  1671  0A84               	incf	4,f
  7736  1672  0823               	movf	??__div_to_l_+3,w
  7737  1673  1C03               	skipc
  7738  1674  0A23               	incf	??__div_to_l_+3,w
  7739  1675  0280               	subwf	0,f
  7740  1676  3003               	movlw	3
  7741  1677  0284               	subwf	4,f
  7742  1678                     l2712:
  7743  1678  1428               	bsf	__div_to_l_@quot,0
  7744  1679                     l681:
  7745  1679  3072               	movlw	low (__div_to_l_@f1| 0)
  7746  167A  0084               	movwf	4
  7747  167B  1003               	clrc
  7748  167C  0D80               	rlf	0,f
  7749  167D  0A84               	incf	4,f
  7750  167E  0D80               	rlf	0,f
  7751  167F  0A84               	incf	4,f
  7752  1680  0D80               	rlf	0,f
  7753  1681  0A84               	incf	4,f
  7754  1682  0D80               	rlf	0,f
  7755  1683  0384               	decf	4,f
  7756  1684  0384               	decf	4,f
  7757  1685  0384               	decf	4,f
  7758  1686                     l2714:
  7759  1686  3001               	movlw	1
  7760  1687  02AC               	subwf	__div_to_l_@cntr,f
  7761  1688  1D03               	btfss	3,2
  7762  1689  2E8B               	goto	u3371
  7763  168A  2E8C               	goto	u3370
  7764  168B                     u3371:
  7765  168B  2E21               	goto	l2706
  7766  168C                     u3370:
  7767  168C                     l682:
  7768  168C  1FAD               	btfss	__div_to_l_@exp1,7
  7769  168D  2E8F               	goto	u3381
  7770  168E  2E90               	goto	u3380
  7771  168F                     u3381:
  7772  168F  2EAA               	goto	l2724
  7773  1690                     u3380:
  7774  1690                     l2716:
  7775  1690  082D               	movf	__div_to_l_@exp1,w
  7776  1691  3A80               	xorlw	128
  7777  1692  3E9F               	addlw	159
  7778  1693  1803               	skipnc
  7779  1694  2E96               	goto	u3391
  7780  1695  2E97               	goto	u3390
  7781  1696                     u3391:
  7782  1696  2E98               	goto	l2722
  7783  1697                     u3390:
  7784  1697  2DB8               	goto	l2686
  7785  1698                     l2722:
  7786  1698  3001               	movlw	1
  7787  1699                     u3405:
  7788  1699  1003               	clrc
  7789  169A  0CAB               	rrf	__div_to_l_@quot+3,f
  7790  169B  0CAA               	rrf	__div_to_l_@quot+2,f
  7791  169C  0CA9               	rrf	__div_to_l_@quot+1,f
  7792  169D  0CA8               	rrf	__div_to_l_@quot,f
  7793  169E  3EFF               	addlw	-1
  7794  169F  1D03               	skipz
  7795  16A0  2E99               	goto	u3405
  7796  16A1  3001               	movlw	1
  7797  16A2  00A0               	movwf	??__div_to_l_
  7798  16A3  0820               	movf	??__div_to_l_,w
  7799  16A4  07AD               	addwf	__div_to_l_@exp1,f
  7800  16A5  1D03               	btfss	3,2
  7801  16A6  2EA8               	goto	u3411
  7802  16A7  2EA9               	goto	u3410
  7803  16A8                     u3411:
  7804  16A8  2E98               	goto	l2722
  7805  16A9                     u3410:
  7806  16A9  2EC1               	goto	l2732
  7807  16AA                     l2724:
  7808  16AA  3020               	movlw	32
  7809  16AB  022D               	subwf	__div_to_l_@exp1,w
  7810  16AC  1C03               	skipc
  7811  16AD  2EAF               	goto	u3421
  7812  16AE  2EB0               	goto	u3420
  7813  16AF                     u3421:
  7814  16AF  2EBC               	goto	l689
  7815  16B0                     u3420:
  7816  16B0  2DB8               	goto	l2686
  7817  16B1                     l2730:
  7818  16B1  3001               	movlw	1
  7819  16B2  00A0               	movwf	??__div_to_l_
  7820  16B3                     u3435:
  7821  16B3  1003               	clrc
  7822  16B4  0DA8               	rlf	__div_to_l_@quot,f
  7823  16B5  0DA9               	rlf	__div_to_l_@quot+1,f
  7824  16B6  0DAA               	rlf	__div_to_l_@quot+2,f
  7825  16B7  0DAB               	rlf	__div_to_l_@quot+3,f
  7826  16B8  0BA0               	decfsz	??__div_to_l_,f
  7827  16B9  2EB3               	goto	u3435
  7828  16BA  3001               	movlw	1
  7829  16BB  02AD               	subwf	__div_to_l_@exp1,f
  7830  16BC                     l689:
  7831  16BC  082D               	movf	__div_to_l_@exp1,w
  7832  16BD  1D03               	btfss	3,2
  7833  16BE  2EC0               	goto	u3441
  7834  16BF  2EC1               	goto	u3440
  7835  16C0                     u3441:
  7836  16C0  2EB1               	goto	l2730
  7837  16C1                     u3440:
  7838  16C1                     l2732:
  7839  16C1  082B               	movf	__div_to_l_@quot+3,w
  7840  16C2  00F5               	movwf	?__div_to_l_+3
  7841  16C3  082A               	movf	__div_to_l_@quot+2,w
  7842  16C4  00F4               	movwf	?__div_to_l_+2
  7843  16C5  0829               	movf	__div_to_l_@quot+1,w
  7844  16C6  00F3               	movwf	?__div_to_l_+1
  7845  16C7  0828               	movf	__div_to_l_@quot,w
  7846  16C8  00F2               	movwf	?__div_to_l_
  7847  16C9                     l678:
  7848  16C9  0008               	return
  7849  16CA                     __end_of__div_to_l_:
  7850                           
  7851                           	psect	text37
  7852  0803                     __ptext37:	
  7853 ;; *************** function ___wmul *****************
  7854 ;; Defined at:
  7855 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;  multiplier      2    2[COMMON] unsigned int 
  7858 ;;  multiplicand    2    4[COMMON] unsigned int 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;  product         2    6[COMMON] unsigned int 
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  2    2[COMMON] unsigned int 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2, status,0
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7870 ;;      Params:         4       0       0       0       0
  7871 ;;      Locals:         2       0       0       0       0
  7872 ;;      Temps:          0       0       0       0       0
  7873 ;;      Totals:         6       0       0       0       0
  7874 ;;Total ram usage:        6 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    1
  7877 ;; This function calls:
  7878 ;;		Nothing
  7879 ;; This function is called by:
  7880 ;;		_main
  7881 ;;		_sprintf
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           
  7886                           ;psect for function ___wmul
  7887  0803                     ___wmul:
  7888  0803                     l2736:	
  7889                           ;incstack = 0
  7890                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7891                           
  7892  0803  01F6               	clrf	___wmul@product
  7893  0804  01F7               	clrf	___wmul@product+1
  7894  0805                     l2738:
  7895  0805  1C72               	btfss	___wmul@multiplier,0
  7896  0806  2808               	goto	u3451
  7897  0807  2809               	goto	u3450
  7898  0808                     u3451:
  7899  0808  280F               	goto	l472
  7900  0809                     u3450:
  7901  0809                     l2740:
  7902  0809  0874               	movf	___wmul@multiplicand,w
  7903  080A  07F6               	addwf	___wmul@product,f
  7904  080B  1803               	skipnc
  7905  080C  0AF7               	incf	___wmul@product+1,f
  7906  080D  0875               	movf	___wmul@multiplicand+1,w
  7907  080E  07F7               	addwf	___wmul@product+1,f
  7908  080F                     l472:
  7909  080F  3001               	movlw	1
  7910  0810                     u3465:
  7911  0810  1003               	clrc
  7912  0811  0DF4               	rlf	___wmul@multiplicand,f
  7913  0812  0DF5               	rlf	___wmul@multiplicand+1,f
  7914  0813  3EFF               	addlw	-1
  7915  0814  1D03               	skipz
  7916  0815  2810               	goto	u3465
  7917  0816                     l2742:
  7918  0816  3001               	movlw	1
  7919  0817                     u3475:
  7920  0817  1003               	clrc
  7921  0818  0CF3               	rrf	___wmul@multiplier+1,f
  7922  0819  0CF2               	rrf	___wmul@multiplier,f
  7923  081A  3EFF               	addlw	-1
  7924  081B  1D03               	skipz
  7925  081C  2817               	goto	u3475
  7926  081D                     l2744:
  7927  081D  0872               	movf	___wmul@multiplier,w
  7928  081E  0473               	iorwf	___wmul@multiplier+1,w
  7929  081F  1D03               	btfss	3,2
  7930  0820  2822               	goto	u3481
  7931  0821  2823               	goto	u3480
  7932  0822                     u3481:
  7933  0822  2805               	goto	l2738
  7934  0823                     u3480:
  7935  0823                     l2746:
  7936  0823  0877               	movf	___wmul@product+1,w
  7937  0824  00F3               	movwf	?___wmul+1
  7938  0825  0876               	movf	___wmul@product,w
  7939  0826  00F2               	movwf	?___wmul
  7940  0827                     l474:
  7941  0827  0008               	return
  7942  0828                     __end_of___wmul:
  7943                           
  7944                           	psect	text38
  7945  1D0E                     __ptext38:	
  7946 ;; *************** function ___lltoft *****************
  7947 ;; Defined at:
  7948 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lltoft.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  c               4    0[BANK0 ] unsigned long 
  7951 ;; Auto vars:     Size  Location     Type
  7952 ;;  exp             1    5[BANK0 ] unsigned char 
  7953 ;; Return value:  Size  Location     Type
  7954 ;;                  3    0[BANK0 ] float 
  7955 ;; Registers used:
  7956 ;;		wreg, status,2, status,0, pclath, cstack
  7957 ;; Tracked objects:
  7958 ;;		On entry : 0/0
  7959 ;;		On exit  : 0/0
  7960 ;;		Unchanged: 0/0
  7961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7962 ;;      Params:         0       4       0       0       0
  7963 ;;      Locals:         0       1       0       0       0
  7964 ;;      Temps:          0       1       0       0       0
  7965 ;;      Totals:         0       6       0       0       0
  7966 ;;Total ram usage:        6 bytes
  7967 ;; Hardware stack levels used:    1
  7968 ;; Hardware stack levels required when called:    2
  7969 ;; This function calls:
  7970 ;;		___ftpack
  7971 ;; This function is called by:
  7972 ;;		_sprintf
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           
  7977                           ;psect for function ___lltoft
  7978  1D0E                     ___lltoft:
  7979  1D0E                     l3864:	
  7980                           ;incstack = 0
  7981                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  7982                           
  7983  1D0E  308E               	movlw	142
  7984  1D0F  1283               	bcf	3,5	;RP0=0, select bank0
  7985  1D10  1303               	bcf	3,6	;RP1=0, select bank0
  7986  1D11  00A4               	movwf	??___lltoft
  7987  1D12  0824               	movf	??___lltoft,w
  7988  1D13  00A5               	movwf	___lltoft@exp
  7989  1D14  2D22               	goto	l3868
  7990  1D15                     l3866:
  7991  1D15  3001               	movlw	1
  7992  1D16                     u5415:
  7993  1D16  1003               	clrc
  7994  1D17  0CA3               	rrf	___lltoft@c+3,f
  7995  1D18  0CA2               	rrf	___lltoft@c+2,f
  7996  1D19  0CA1               	rrf	___lltoft@c+1,f
  7997  1D1A  0CA0               	rrf	___lltoft@c,f
  7998  1D1B  3EFF               	addlw	-1
  7999  1D1C  1D03               	skipz
  8000  1D1D  2D16               	goto	u5415
  8001  1D1E  3001               	movlw	1
  8002  1D1F  00A4               	movwf	??___lltoft
  8003  1D20  0824               	movf	??___lltoft,w
  8004  1D21  07A5               	addwf	___lltoft@exp,f
  8005  1D22                     l3868:
  8006  1D22  30FF               	movlw	255
  8007  1D23  0523               	andwf	___lltoft@c+3,w
  8008  1D24  1D03               	btfss	3,2
  8009  1D25  2D27               	goto	u5421
  8010  1D26  2D28               	goto	u5420
  8011  1D27                     u5421:
  8012  1D27  2D15               	goto	l3866
  8013  1D28                     u5420:
  8014  1D28                     l3870:
  8015  1D28  0820               	movf	___lltoft@c,w
  8016  1D29  00F2               	movwf	___ftpack@arg
  8017  1D2A  0821               	movf	___lltoft@c+1,w
  8018  1D2B  00F3               	movwf	___ftpack@arg+1
  8019  1D2C  0822               	movf	___lltoft@c+2,w
  8020  1D2D  00F4               	movwf	___ftpack@arg+2
  8021  1D2E  0825               	movf	___lltoft@exp,w
  8022  1D2F  00A4               	movwf	??___lltoft
  8023  1D30  0824               	movf	??___lltoft,w
  8024  1D31  00F5               	movwf	___ftpack@exp
  8025  1D32  01F6               	clrf	___ftpack@sign
  8026  1D33  160A  118A  22BE  160A  158A  	fcall	___ftpack
  8027  1D38  0872               	movf	?___ftpack,w
  8028  1D39  1283               	bcf	3,5	;RP0=0, select bank0
  8029  1D3A  1303               	bcf	3,6	;RP1=0, select bank0
  8030  1D3B  00A0               	movwf	?___lltoft
  8031  1D3C  0873               	movf	?___ftpack+1,w
  8032  1D3D  00A1               	movwf	?___lltoft+1
  8033  1D3E  0874               	movf	?___ftpack+2,w
  8034  1D3F  00A2               	movwf	?___lltoft+2
  8035  1D40                     l851:
  8036  1D40  0008               	return
  8037  1D41                     __end_of___lltoft:
  8038                           
  8039                           	psect	text39
  8040  10E2                     __ptext39:	
  8041 ;; *************** function ___llmod *****************
  8042 ;; Defined at:
  8043 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\llmod.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;  divisor         4    6[BANK0 ] unsigned long 
  8046 ;;  dividend        4   10[BANK0 ] unsigned long 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  counter         1   15[BANK0 ] unsigned char 
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  4    6[BANK0 ] unsigned long 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2, status,0
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8058 ;;      Params:         0       8       0       0       0
  8059 ;;      Locals:         0       1       0       0       0
  8060 ;;      Temps:          0       1       0       0       0
  8061 ;;      Totals:         0      10       0       0       0
  8062 ;;Total ram usage:       10 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; Hardware stack levels required when called:    1
  8065 ;; This function calls:
  8066 ;;		Nothing
  8067 ;; This function is called by:
  8068 ;;		_sprintf
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072                           
  8073                           ;psect for function ___llmod
  8074  10E2                     ___llmod:
  8075  10E2                     l3844:	
  8076                           ;incstack = 0
  8077                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8078                           
  8079  10E2  1283               	bcf	3,5	;RP0=0, select bank0
  8080  10E3  1303               	bcf	3,6	;RP1=0, select bank0
  8081  10E4  0829               	movf	___llmod@divisor+3,w
  8082  10E5  0428               	iorwf	___llmod@divisor+2,w
  8083  10E6  0427               	iorwf	___llmod@divisor+1,w
  8084  10E7  0426               	iorwf	___llmod@divisor,w
  8085  10E8  1903               	skipnz
  8086  10E9  28EB               	goto	u5351
  8087  10EA  28EC               	goto	u5350
  8088  10EB                     u5351:
  8089  10EB  292F               	goto	l3860
  8090  10EC                     u5350:
  8091  10EC                     l3846:
  8092  10EC  01AF               	clrf	___llmod@counter
  8093  10ED  0AAF               	incf	___llmod@counter,f
  8094  10EE  28FC               	goto	l3850
  8095  10EF                     l3848:
  8096  10EF  3001               	movlw	1
  8097  10F0  00AE               	movwf	??___llmod
  8098  10F1                     u5365:
  8099  10F1  1003               	clrc
  8100  10F2  0DA6               	rlf	___llmod@divisor,f
  8101  10F3  0DA7               	rlf	___llmod@divisor+1,f
  8102  10F4  0DA8               	rlf	___llmod@divisor+2,f
  8103  10F5  0DA9               	rlf	___llmod@divisor+3,f
  8104  10F6  0BAE               	decfsz	??___llmod,f
  8105  10F7  28F1               	goto	u5365
  8106  10F8  3001               	movlw	1
  8107  10F9  00AE               	movwf	??___llmod
  8108  10FA  082E               	movf	??___llmod,w
  8109  10FB  07AF               	addwf	___llmod@counter,f
  8110  10FC                     l3850:
  8111  10FC  1FA9               	btfss	___llmod@divisor+3,7
  8112  10FD  28FF               	goto	u5371
  8113  10FE  2900               	goto	u5370
  8114  10FF                     u5371:
  8115  10FF  28EF               	goto	l3848
  8116  1100                     u5370:
  8117  1100                     l3852:
  8118  1100  0829               	movf	___llmod@divisor+3,w
  8119  1101  022D               	subwf	___llmod@dividend+3,w
  8120  1102  1D03               	skipz
  8121  1103  290E               	goto	u5385
  8122  1104  0828               	movf	___llmod@divisor+2,w
  8123  1105  022C               	subwf	___llmod@dividend+2,w
  8124  1106  1D03               	skipz
  8125  1107  290E               	goto	u5385
  8126  1108  0827               	movf	___llmod@divisor+1,w
  8127  1109  022B               	subwf	___llmod@dividend+1,w
  8128  110A  1D03               	skipz
  8129  110B  290E               	goto	u5385
  8130  110C  0826               	movf	___llmod@divisor,w
  8131  110D  022A               	subwf	___llmod@dividend,w
  8132  110E                     u5385:
  8133  110E  1C03               	skipc
  8134  110F  2911               	goto	u5381
  8135  1110  2912               	goto	u5380
  8136  1111                     u5381:
  8137  1111  2920               	goto	l3856
  8138  1112                     u5380:
  8139  1112                     l3854:
  8140  1112  0826               	movf	___llmod@divisor,w
  8141  1113  02AA               	subwf	___llmod@dividend,f
  8142  1114  0827               	movf	___llmod@divisor+1,w
  8143  1115  1C03               	skipc
  8144  1116  0F27               	incfsz	___llmod@divisor+1,w
  8145  1117  02AB               	subwf	___llmod@dividend+1,f
  8146  1118  0828               	movf	___llmod@divisor+2,w
  8147  1119  1C03               	skipc
  8148  111A  0F28               	incfsz	___llmod@divisor+2,w
  8149  111B  02AC               	subwf	___llmod@dividend+2,f
  8150  111C  0829               	movf	___llmod@divisor+3,w
  8151  111D  1C03               	skipc
  8152  111E  0F29               	incfsz	___llmod@divisor+3,w
  8153  111F  02AD               	subwf	___llmod@dividend+3,f
  8154  1120                     l3856:
  8155  1120  3001               	movlw	1
  8156  1121                     u5395:
  8157  1121  1003               	clrc
  8158  1122  0CA9               	rrf	___llmod@divisor+3,f
  8159  1123  0CA8               	rrf	___llmod@divisor+2,f
  8160  1124  0CA7               	rrf	___llmod@divisor+1,f
  8161  1125  0CA6               	rrf	___llmod@divisor,f
  8162  1126  3EFF               	addlw	-1
  8163  1127  1D03               	skipz
  8164  1128  2921               	goto	u5395
  8165  1129                     l3858:
  8166  1129  3001               	movlw	1
  8167  112A  02AF               	subwf	___llmod@counter,f
  8168  112B  1D03               	btfss	3,2
  8169  112C  292E               	goto	u5401
  8170  112D  292F               	goto	u5400
  8171  112E                     u5401:
  8172  112E  2900               	goto	l3852
  8173  112F                     u5400:
  8174  112F                     l3860:
  8175  112F  082D               	movf	___llmod@dividend+3,w
  8176  1130  00A9               	movwf	?___llmod+3
  8177  1131  082C               	movf	___llmod@dividend+2,w
  8178  1132  00A8               	movwf	?___llmod+2
  8179  1133  082B               	movf	___llmod@dividend+1,w
  8180  1134  00A7               	movwf	?___llmod+1
  8181  1135  082A               	movf	___llmod@dividend,w
  8182  1136  00A6               	movwf	?___llmod
  8183  1137                     l843:
  8184  1137  0008               	return
  8185  1138                     __end_of___llmod:
  8186                           
  8187                           	psect	text40
  8188  11ED                     __ptext40:	
  8189 ;; *************** function ___lldiv *****************
  8190 ;; Defined at:
  8191 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\__lldiv.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  divisor         4    2[COMMON] unsigned long 
  8194 ;;  dividend        4    6[COMMON] unsigned long 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  quotient        4    1[BANK0 ] unsigned long 
  8197 ;;  counter         1    5[BANK0 ] unsigned char 
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  4    2[COMMON] unsigned long 
  8200 ;; Registers used:
  8201 ;;		wreg, status,2, status,0
  8202 ;; Tracked objects:
  8203 ;;		On entry : 0/0
  8204 ;;		On exit  : 0/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8207 ;;      Params:         8       0       0       0       0
  8208 ;;      Locals:         0       5       0       0       0
  8209 ;;      Temps:          0       1       0       0       0
  8210 ;;      Totals:         8       6       0       0       0
  8211 ;;Total ram usage:       14 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; Hardware stack levels required when called:    1
  8214 ;; This function calls:
  8215 ;;		Nothing
  8216 ;; This function is called by:
  8217 ;;		_sprintf
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           
  8222                           ;psect for function ___lldiv
  8223  11ED                     ___lldiv:
  8224  11ED                     l3812:	
  8225                           ;incstack = 0
  8226                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8227                           
  8228  11ED  3000               	movlw	0
  8229  11EE  1283               	bcf	3,5	;RP0=0, select bank0
  8230  11EF  1303               	bcf	3,6	;RP1=0, select bank0
  8231  11F0  00A4               	movwf	___lldiv@quotient+3
  8232  11F1  3000               	movlw	0
  8233  11F2  00A3               	movwf	___lldiv@quotient+2
  8234  11F3  3000               	movlw	0
  8235  11F4  00A2               	movwf	___lldiv@quotient+1
  8236  11F5  3000               	movlw	0
  8237  11F6  00A1               	movwf	___lldiv@quotient
  8238  11F7  0875               	movf	___lldiv@divisor+3,w
  8239  11F8  0474               	iorwf	___lldiv@divisor+2,w
  8240  11F9  0473               	iorwf	___lldiv@divisor+1,w
  8241  11FA  0472               	iorwf	___lldiv@divisor,w
  8242  11FB  1903               	skipnz
  8243  11FC  29FE               	goto	u5271
  8244  11FD  29FF               	goto	u5270
  8245  11FE                     u5271:
  8246  11FE  2A4C               	goto	l3832
  8247  11FF                     u5270:
  8248  11FF                     l3814:
  8249  11FF  01A5               	clrf	___lldiv@counter
  8250  1200  0AA5               	incf	___lldiv@counter,f
  8251  1201  2A0F               	goto	l3818
  8252  1202                     l3816:
  8253  1202  3001               	movlw	1
  8254  1203  00A0               	movwf	??___lldiv
  8255  1204                     u5285:
  8256  1204  1003               	clrc
  8257  1205  0DF2               	rlf	___lldiv@divisor,f
  8258  1206  0DF3               	rlf	___lldiv@divisor+1,f
  8259  1207  0DF4               	rlf	___lldiv@divisor+2,f
  8260  1208  0DF5               	rlf	___lldiv@divisor+3,f
  8261  1209  0BA0               	decfsz	??___lldiv,f
  8262  120A  2A04               	goto	u5285
  8263  120B  3001               	movlw	1
  8264  120C  00A0               	movwf	??___lldiv
  8265  120D  0820               	movf	??___lldiv,w
  8266  120E  07A5               	addwf	___lldiv@counter,f
  8267  120F                     l3818:
  8268  120F  1FF5               	btfss	___lldiv@divisor+3,7
  8269  1210  2A12               	goto	u5291
  8270  1211  2A13               	goto	u5290
  8271  1212                     u5291:
  8272  1212  2A02               	goto	l3816
  8273  1213                     u5290:
  8274  1213                     l3820:
  8275  1213  3001               	movlw	1
  8276  1214  00A0               	movwf	??___lldiv
  8277  1215                     u5305:
  8278  1215  1003               	clrc
  8279  1216  0DA1               	rlf	___lldiv@quotient,f
  8280  1217  0DA2               	rlf	___lldiv@quotient+1,f
  8281  1218  0DA3               	rlf	___lldiv@quotient+2,f
  8282  1219  0DA4               	rlf	___lldiv@quotient+3,f
  8283  121A  0BA0               	decfsz	??___lldiv,f
  8284  121B  2A15               	goto	u5305
  8285  121C                     l3822:
  8286  121C  0875               	movf	___lldiv@divisor+3,w
  8287  121D  0279               	subwf	___lldiv@dividend+3,w
  8288  121E  1D03               	skipz
  8289  121F  2A2A               	goto	u5315
  8290  1220  0874               	movf	___lldiv@divisor+2,w
  8291  1221  0278               	subwf	___lldiv@dividend+2,w
  8292  1222  1D03               	skipz
  8293  1223  2A2A               	goto	u5315
  8294  1224  0873               	movf	___lldiv@divisor+1,w
  8295  1225  0277               	subwf	___lldiv@dividend+1,w
  8296  1226  1D03               	skipz
  8297  1227  2A2A               	goto	u5315
  8298  1228  0872               	movf	___lldiv@divisor,w
  8299  1229  0276               	subwf	___lldiv@dividend,w
  8300  122A                     u5315:
  8301  122A  1C03               	skipc
  8302  122B  2A2D               	goto	u5311
  8303  122C  2A2E               	goto	u5310
  8304  122D                     u5311:
  8305  122D  2A3D               	goto	l3828
  8306  122E                     u5310:
  8307  122E                     l3824:
  8308  122E  0872               	movf	___lldiv@divisor,w
  8309  122F  02F6               	subwf	___lldiv@dividend,f
  8310  1230  0873               	movf	___lldiv@divisor+1,w
  8311  1231  1C03               	skipc
  8312  1232  0F73               	incfsz	___lldiv@divisor+1,w
  8313  1233  02F7               	subwf	___lldiv@dividend+1,f
  8314  1234  0874               	movf	___lldiv@divisor+2,w
  8315  1235  1C03               	skipc
  8316  1236  0F74               	incfsz	___lldiv@divisor+2,w
  8317  1237  02F8               	subwf	___lldiv@dividend+2,f
  8318  1238  0875               	movf	___lldiv@divisor+3,w
  8319  1239  1C03               	skipc
  8320  123A  0F75               	incfsz	___lldiv@divisor+3,w
  8321  123B  02F9               	subwf	___lldiv@dividend+3,f
  8322  123C                     l3826:
  8323  123C  1421               	bsf	___lldiv@quotient,0
  8324  123D                     l3828:
  8325  123D  3001               	movlw	1
  8326  123E                     u5325:
  8327  123E  1003               	clrc
  8328  123F  0CF5               	rrf	___lldiv@divisor+3,f
  8329  1240  0CF4               	rrf	___lldiv@divisor+2,f
  8330  1241  0CF3               	rrf	___lldiv@divisor+1,f
  8331  1242  0CF2               	rrf	___lldiv@divisor,f
  8332  1243  3EFF               	addlw	-1
  8333  1244  1D03               	skipz
  8334  1245  2A3E               	goto	u5325
  8335  1246                     l3830:
  8336  1246  3001               	movlw	1
  8337  1247  02A5               	subwf	___lldiv@counter,f
  8338  1248  1D03               	btfss	3,2
  8339  1249  2A4B               	goto	u5331
  8340  124A  2A4C               	goto	u5330
  8341  124B                     u5331:
  8342  124B  2A13               	goto	l3820
  8343  124C                     u5330:
  8344  124C                     l3832:
  8345  124C  0824               	movf	___lldiv@quotient+3,w
  8346  124D  00F5               	movwf	?___lldiv+3
  8347  124E  0823               	movf	___lldiv@quotient+2,w
  8348  124F  00F4               	movwf	?___lldiv+2
  8349  1250  0822               	movf	___lldiv@quotient+1,w
  8350  1251  00F3               	movwf	?___lldiv+1
  8351  1252  0821               	movf	___lldiv@quotient,w
  8352  1253  00F2               	movwf	?___lldiv
  8353  1254                     l508:
  8354  1254  0008               	return
  8355  1255                     __end_of___lldiv:
  8356                           
  8357                           	psect	text41
  8358  0828                     __ptext41:	
  8359 ;; *************** function ___fttol *****************
  8360 ;; Defined at:
  8361 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fttol.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;  f1              3   37[BANK0 ] float 
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;  lval            4   46[BANK0 ] unsigned long 
  8366 ;;  exp1            1   50[BANK0 ] unsigned char 
  8367 ;;  sign1           1   45[BANK0 ] unsigned char 
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  4   37[BANK0 ] long 
  8370 ;; Registers used:
  8371 ;;		wreg, status,2, status,0
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8377 ;;      Params:         0       4       0       0       0
  8378 ;;      Locals:         0       6       0       0       0
  8379 ;;      Temps:          0       4       0       0       0
  8380 ;;      Totals:         0      14       0       0       0
  8381 ;;Total ram usage:       14 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:    1
  8384 ;; This function calls:
  8385 ;;		Nothing
  8386 ;; This function is called by:
  8387 ;;		_sprintf
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           
  8392                           ;psect for function ___fttol
  8393  0828                     ___fttol:
  8394  0828                     l2810:	
  8395                           ;incstack = 0
  8396                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8397                           
  8398  0828  1283               	bcf	3,5	;RP0=0, select bank0
  8399  0829  1303               	bcf	3,6	;RP1=0, select bank0
  8400  082A  0845               	movf	___fttol@f1,w
  8401  082B  00C9               	movwf	??___fttol
  8402  082C  0846               	movf	___fttol@f1+1,w
  8403  082D  00CA               	movwf	??___fttol+1
  8404  082E  0847               	movf	___fttol@f1+2,w
  8405  082F  00CB               	movwf	??___fttol+2
  8406  0830  1003               	clrc
  8407  0831  0D4A               	rlf	??___fttol+1,w
  8408  0832  0D4B               	rlf	??___fttol+2,w
  8409  0833  00CC               	movwf	??___fttol+3
  8410  0834  084C               	movf	??___fttol+3,w
  8411  0835  00D2               	movwf	___fttol@exp1
  8412  0836  0852               	movf	___fttol@exp1,w
  8413  0837  1D03               	btfss	3,2
  8414  0838  283A               	goto	u3611
  8415  0839  283B               	goto	u3610
  8416  083A                     u3611:
  8417  083A  2844               	goto	l2816
  8418  083B                     u3610:
  8419  083B                     l2812:
  8420  083B  3000               	movlw	0
  8421  083C  00C8               	movwf	?___fttol+3
  8422  083D  3000               	movlw	0
  8423  083E  00C7               	movwf	?___fttol+2
  8424  083F  3000               	movlw	0
  8425  0840  00C6               	movwf	?___fttol+1
  8426  0841  3000               	movlw	0
  8427  0842  00C5               	movwf	?___fttol
  8428  0843  28B3               	goto	l802
  8429  0844                     l2816:
  8430  0844  0845               	movf	___fttol@f1,w
  8431  0845  00C9               	movwf	??___fttol
  8432  0846  0846               	movf	___fttol@f1+1,w
  8433  0847  00CA               	movwf	??___fttol+1
  8434  0848  0847               	movf	___fttol@f1+2,w
  8435  0849  00CB               	movwf	??___fttol+2
  8436  084A  3017               	movlw	23
  8437  084B                     u3625:
  8438  084B  1003               	clrc
  8439  084C  0CCB               	rrf	??___fttol+2,f
  8440  084D  0CCA               	rrf	??___fttol+1,f
  8441  084E  0CC9               	rrf	??___fttol,f
  8442  084F                     u3620:
  8443  084F  3EFF               	addlw	-1
  8444  0850  1D03               	skipz
  8445  0851  284B               	goto	u3625
  8446  0852  0849               	movf	??___fttol,w
  8447  0853  00CC               	movwf	??___fttol+3
  8448  0854  084C               	movf	??___fttol+3,w
  8449  0855  00CD               	movwf	___fttol@sign1
  8450  0856                     l2818:
  8451  0856  17C6               	bsf	___fttol@f1+1,7
  8452  0857                     l2820:
  8453  0857  30FF               	movlw	255
  8454  0858  05C5               	andwf	___fttol@f1,f
  8455  0859  30FF               	movlw	255
  8456  085A  05C6               	andwf	___fttol@f1+1,f
  8457  085B  3000               	movlw	0
  8458  085C  05C7               	andwf	___fttol@f1+2,f
  8459  085D                     l2822:
  8460  085D  0845               	movf	___fttol@f1,w
  8461  085E  00CE               	movwf	___fttol@lval
  8462  085F  0846               	movf	___fttol@f1+1,w
  8463  0860  00CF               	movwf	___fttol@lval+1
  8464  0861  0847               	movf	___fttol@f1+2,w
  8465  0862  00D0               	movwf	___fttol@lval+2
  8466  0863  01D1               	clrf	___fttol@lval+3
  8467  0864                     l2824:
  8468  0864  308E               	movlw	142
  8469  0865  02D2               	subwf	___fttol@exp1,f
  8470  0866                     l2826:
  8471  0866  1FD2               	btfss	___fttol@exp1,7
  8472  0867  2869               	goto	u3631
  8473  0868  286A               	goto	u3630
  8474  0869                     u3631:
  8475  0869  2884               	goto	l2836
  8476  086A                     u3630:
  8477  086A                     l2828:
  8478  086A  0852               	movf	___fttol@exp1,w
  8479  086B  3A80               	xorlw	128
  8480  086C  3E8F               	addlw	143
  8481  086D  1803               	skipnc
  8482  086E  2870               	goto	u3641
  8483  086F  2871               	goto	u3640
  8484  0870                     u3641:
  8485  0870  2872               	goto	l2834
  8486  0871                     u3640:
  8487  0871  283B               	goto	l2812
  8488  0872                     l2834:
  8489  0872  3001               	movlw	1
  8490  0873                     u3655:
  8491  0873  1003               	clrc
  8492  0874  0CD1               	rrf	___fttol@lval+3,f
  8493  0875  0CD0               	rrf	___fttol@lval+2,f
  8494  0876  0CCF               	rrf	___fttol@lval+1,f
  8495  0877  0CCE               	rrf	___fttol@lval,f
  8496  0878  3EFF               	addlw	-1
  8497  0879  1D03               	skipz
  8498  087A  2873               	goto	u3655
  8499  087B  3001               	movlw	1
  8500  087C  00C9               	movwf	??___fttol
  8501  087D  0849               	movf	??___fttol,w
  8502  087E  07D2               	addwf	___fttol@exp1,f
  8503  087F  1D03               	btfss	3,2
  8504  0880  2882               	goto	u3661
  8505  0881  2883               	goto	u3660
  8506  0882                     u3661:
  8507  0882  2872               	goto	l2834
  8508  0883                     u3660:
  8509  0883  289B               	goto	l2844
  8510  0884                     l2836:
  8511  0884  3018               	movlw	24
  8512  0885  0252               	subwf	___fttol@exp1,w
  8513  0886  1C03               	skipc
  8514  0887  2889               	goto	u3671
  8515  0888  288A               	goto	u3670
  8516  0889                     u3671:
  8517  0889  2896               	goto	l809
  8518  088A                     u3670:
  8519  088A  283B               	goto	l2812
  8520  088B                     l2842:
  8521  088B  3001               	movlw	1
  8522  088C  00C9               	movwf	??___fttol
  8523  088D                     u3685:
  8524  088D  1003               	clrc
  8525  088E  0DCE               	rlf	___fttol@lval,f
  8526  088F  0DCF               	rlf	___fttol@lval+1,f
  8527  0890  0DD0               	rlf	___fttol@lval+2,f
  8528  0891  0DD1               	rlf	___fttol@lval+3,f
  8529  0892  0BC9               	decfsz	??___fttol,f
  8530  0893  288D               	goto	u3685
  8531  0894  3001               	movlw	1
  8532  0895  02D2               	subwf	___fttol@exp1,f
  8533  0896                     l809:
  8534  0896  0852               	movf	___fttol@exp1,w
  8535  0897  1D03               	btfss	3,2
  8536  0898  289A               	goto	u3691
  8537  0899  289B               	goto	u3690
  8538  089A                     u3691:
  8539  089A  288B               	goto	l2842
  8540  089B                     u3690:
  8541  089B                     l2844:
  8542  089B  084D               	movf	___fttol@sign1,w
  8543  089C  1903               	btfsc	3,2
  8544  089D  289F               	goto	u3701
  8545  089E  28A0               	goto	u3700
  8546  089F                     u3701:
  8547  089F  28AB               	goto	l2848
  8548  08A0                     u3700:
  8549  08A0                     l2846:
  8550  08A0  09CE               	comf	___fttol@lval,f
  8551  08A1  09CF               	comf	___fttol@lval+1,f
  8552  08A2  09D0               	comf	___fttol@lval+2,f
  8553  08A3  09D1               	comf	___fttol@lval+3,f
  8554  08A4  0ACE               	incf	___fttol@lval,f
  8555  08A5  1903               	skipnz
  8556  08A6  0ACF               	incf	___fttol@lval+1,f
  8557  08A7  1903               	skipnz
  8558  08A8  0AD0               	incf	___fttol@lval+2,f
  8559  08A9  1903               	skipnz
  8560  08AA  0AD1               	incf	___fttol@lval+3,f
  8561  08AB                     l2848:
  8562  08AB  0851               	movf	___fttol@lval+3,w
  8563  08AC  00C8               	movwf	?___fttol+3
  8564  08AD  0850               	movf	___fttol@lval+2,w
  8565  08AE  00C7               	movwf	?___fttol+2
  8566  08AF  084F               	movf	___fttol@lval+1,w
  8567  08B0  00C6               	movwf	?___fttol+1
  8568  08B1  084E               	movf	___fttol@lval,w
  8569  08B2  00C5               	movwf	?___fttol
  8570  08B3                     l802:
  8571  08B3  0008               	return
  8572  08B4                     __end_of___fttol:
  8573                           
  8574                           	psect	text42
  8575  1C95                     __ptext42:	
  8576 ;; *************** function ___ftsub *****************
  8577 ;; Defined at:
  8578 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftsub.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;  f2              3   57[BANK0 ] float 
  8581 ;;  f1              3   60[BANK0 ] float 
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;		None
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  3   57[BANK0 ] float 
  8586 ;; Registers used:
  8587 ;;		wreg, status,2, status,0, pclath, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8593 ;;      Params:         0       6       0       0       0
  8594 ;;      Locals:         0       0       0       0       0
  8595 ;;      Temps:          0       0       0       0       0
  8596 ;;      Totals:         0       6       0       0       0
  8597 ;;Total ram usage:        6 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:    3
  8600 ;; This function calls:
  8601 ;;		___ftadd
  8602 ;; This function is called by:
  8603 ;;		_sprintf
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           
  8608                           ;psect for function ___ftsub
  8609  1C95                     ___ftsub:
  8610  1C95                     l3836:	
  8611                           ;incstack = 0
  8612                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8613                           
  8614  1C95  1283               	bcf	3,5	;RP0=0, select bank0
  8615  1C96  1303               	bcf	3,6	;RP1=0, select bank0
  8616  1C97  085B               	movf	___ftsub@f2+2,w
  8617  1C98  045A               	iorwf	___ftsub@f2+1,w
  8618  1C99  0459               	iorwf	___ftsub@f2,w
  8619  1C9A  1903               	skipnz
  8620  1C9B  2C9D               	goto	u5341
  8621  1C9C  2C9E               	goto	u5340
  8622  1C9D                     u5341:
  8623  1C9D  2CA0               	goto	l3840
  8624  1C9E                     u5340:
  8625  1C9E                     l3838:
  8626  1C9E  3080               	movlw	128
  8627  1C9F  06DB               	xorwf	___ftsub@f2+2,f
  8628  1CA0                     l3840:
  8629  1CA0  085C               	movf	___ftsub@f1,w
  8630  1CA1  00CC               	movwf	___ftadd@f1
  8631  1CA2  085D               	movf	___ftsub@f1+1,w
  8632  1CA3  00CD               	movwf	___ftadd@f1+1
  8633  1CA4  085E               	movf	___ftsub@f1+2,w
  8634  1CA5  00CE               	movwf	___ftadd@f1+2
  8635  1CA6  0859               	movf	___ftsub@f2,w
  8636  1CA7  00CF               	movwf	___ftadd@f2
  8637  1CA8  085A               	movf	___ftsub@f2+1,w
  8638  1CA9  00D0               	movwf	___ftadd@f2+1
  8639  1CAA  085B               	movf	___ftsub@f2+2,w
  8640  1CAB  00D1               	movwf	___ftadd@f2+2
  8641  1CAC  160A  118A  26CA  160A  158A  	fcall	___ftadd
  8642  1CB1  1283               	bcf	3,5	;RP0=0, select bank0
  8643  1CB2  1303               	bcf	3,6	;RP1=0, select bank0
  8644  1CB3  084C               	movf	?___ftadd,w
  8645  1CB4  00D9               	movwf	?___ftsub
  8646  1CB5  084D               	movf	?___ftadd+1,w
  8647  1CB6  00DA               	movwf	?___ftsub+1
  8648  1CB7  084E               	movf	?___ftadd+2,w
  8649  1CB8  00DB               	movwf	?___ftsub+2
  8650  1CB9                     l798:
  8651  1CB9  0008               	return
  8652  1CBA                     __end_of___ftsub:
  8653                           
  8654                           	psect	text43
  8655  16CA                     __ptext43:	
  8656 ;; *************** function ___ftadd *****************
  8657 ;; Defined at:
  8658 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftadd.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;  f1              3   44[BANK0 ] float 
  8661 ;;  f2              3   47[BANK0 ] float 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  exp1            1   56[BANK0 ] unsigned char 
  8664 ;;  exp2            1   55[BANK0 ] unsigned char 
  8665 ;;  sign            1   54[BANK0 ] unsigned char 
  8666 ;; Return value:  Size  Location     Type
  8667 ;;                  3   44[BANK0 ] float 
  8668 ;; Registers used:
  8669 ;;		wreg, status,2, status,0, pclath, cstack
  8670 ;; Tracked objects:
  8671 ;;		On entry : 0/0
  8672 ;;		On exit  : 0/0
  8673 ;;		Unchanged: 0/0
  8674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8675 ;;      Params:         0       6       0       0       0
  8676 ;;      Locals:         0       3       0       0       0
  8677 ;;      Temps:          0       4       0       0       0
  8678 ;;      Totals:         0      13       0       0       0
  8679 ;;Total ram usage:       13 bytes
  8680 ;; Hardware stack levels used:    1
  8681 ;; Hardware stack levels required when called:    2
  8682 ;; This function calls:
  8683 ;;		___ftpack
  8684 ;; This function is called by:
  8685 ;;		_sprintf
  8686 ;;		___ftsub
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           
  8691                           ;psect for function ___ftadd
  8692  16CA                     ___ftadd:
  8693  16CA                     l3532:	
  8694                           ;incstack = 0
  8695                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8696                           
  8697  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  8698  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  8699  16CC  084C               	movf	___ftadd@f1,w
  8700  16CD  00D2               	movwf	??___ftadd
  8701  16CE  084D               	movf	___ftadd@f1+1,w
  8702  16CF  00D3               	movwf	??___ftadd+1
  8703  16D0  084E               	movf	___ftadd@f1+2,w
  8704  16D1  00D4               	movwf	??___ftadd+2
  8705  16D2  1003               	clrc
  8706  16D3  0D53               	rlf	??___ftadd+1,w
  8707  16D4  0D54               	rlf	??___ftadd+2,w
  8708  16D5  00D5               	movwf	??___ftadd+3
  8709  16D6  0855               	movf	??___ftadd+3,w
  8710  16D7  00D8               	movwf	___ftadd@exp1
  8711  16D8  084F               	movf	___ftadd@f2,w
  8712  16D9  00D2               	movwf	??___ftadd
  8713  16DA  0850               	movf	___ftadd@f2+1,w
  8714  16DB  00D3               	movwf	??___ftadd+1
  8715  16DC  0851               	movf	___ftadd@f2+2,w
  8716  16DD  00D4               	movwf	??___ftadd+2
  8717  16DE  1003               	clrc
  8718  16DF  0D53               	rlf	??___ftadd+1,w
  8719  16E0  0D54               	rlf	??___ftadd+2,w
  8720  16E1  00D5               	movwf	??___ftadd+3
  8721  16E2  0855               	movf	??___ftadd+3,w
  8722  16E3  00D7               	movwf	___ftadd@exp2
  8723  16E4  0858               	movf	___ftadd@exp1,w
  8724  16E5  1903               	btfsc	3,2
  8725  16E6  2EE8               	goto	u4621
  8726  16E7  2EE9               	goto	u4620
  8727  16E8                     u4621:
  8728  16E8  2EF9               	goto	l3538
  8729  16E9                     u4620:
  8730  16E9                     l3534:
  8731  16E9  0857               	movf	___ftadd@exp2,w
  8732  16EA  0258               	subwf	___ftadd@exp1,w
  8733  16EB  1803               	skipnc
  8734  16EC  2EEE               	goto	u4631
  8735  16ED  2EEF               	goto	u4630
  8736  16EE                     u4631:
  8737  16EE  2F00               	goto	l3542
  8738  16EF                     u4630:
  8739  16EF                     l3536:
  8740  16EF  0857               	movf	___ftadd@exp2,w
  8741  16F0  00D2               	movwf	??___ftadd
  8742  16F1  0858               	movf	___ftadd@exp1,w
  8743  16F2  02D2               	subwf	??___ftadd,f
  8744  16F3  3019               	movlw	25
  8745  16F4  0252               	subwf	??___ftadd,w
  8746  16F5  1C03               	skipc
  8747  16F6  2EF8               	goto	u4641
  8748  16F7  2EF9               	goto	u4640
  8749  16F8                     u4641:
  8750  16F8  2F00               	goto	l3542
  8751  16F9                     u4640:
  8752  16F9                     l3538:
  8753  16F9  084F               	movf	___ftadd@f2,w
  8754  16FA  00CC               	movwf	?___ftadd
  8755  16FB  0850               	movf	___ftadd@f2+1,w
  8756  16FC  00CD               	movwf	?___ftadd+1
  8757  16FD  0851               	movf	___ftadd@f2+2,w
  8758  16FE  00CE               	movwf	?___ftadd+2
  8759  16FF  2FFF               	goto	l718
  8760  1700                     l3542:
  8761  1700  0857               	movf	___ftadd@exp2,w
  8762  1701  1903               	btfsc	3,2
  8763  1702  2F04               	goto	u4651
  8764  1703  2F05               	goto	u4650
  8765  1704                     u4651:
  8766  1704  2F15               	goto	l721
  8767  1705                     u4650:
  8768  1705                     l3544:
  8769  1705  0858               	movf	___ftadd@exp1,w
  8770  1706  0257               	subwf	___ftadd@exp2,w
  8771  1707  1803               	skipnc
  8772  1708  2F0A               	goto	u4661
  8773  1709  2F0B               	goto	u4660
  8774  170A                     u4661:
  8775  170A  2F16               	goto	l3548
  8776  170B                     u4660:
  8777  170B                     l3546:
  8778  170B  0858               	movf	___ftadd@exp1,w
  8779  170C  00D2               	movwf	??___ftadd
  8780  170D  0857               	movf	___ftadd@exp2,w
  8781  170E  02D2               	subwf	??___ftadd,f
  8782  170F  3019               	movlw	25
  8783  1710  0252               	subwf	??___ftadd,w
  8784  1711  1C03               	skipc
  8785  1712  2F14               	goto	u4671
  8786  1713  2F15               	goto	u4670
  8787  1714                     u4671:
  8788  1714  2F16               	goto	l3548
  8789  1715                     u4670:
  8790  1715                     l721:
  8791  1715  2FFF               	goto	l718
  8792  1716                     l3548:
  8793  1716  3006               	movlw	6
  8794  1717  00D2               	movwf	??___ftadd
  8795  1718  0852               	movf	??___ftadd,w
  8796  1719  00D6               	movwf	___ftadd@sign
  8797  171A                     l3550:
  8798  171A  1FCE               	btfss	___ftadd@f1+2,7
  8799  171B  2F1D               	goto	u4681
  8800  171C  2F1E               	goto	u4680
  8801  171D                     u4681:
  8802  171D  2F1F               	goto	l722
  8803  171E                     u4680:
  8804  171E                     l3552:
  8805  171E  17D6               	bsf	___ftadd@sign,7
  8806  171F                     l722:
  8807  171F  1FD1               	btfss	___ftadd@f2+2,7
  8808  1720  2F22               	goto	u4691
  8809  1721  2F23               	goto	u4690
  8810  1722                     u4691:
  8811  1722  2F24               	goto	l723
  8812  1723                     u4690:
  8813  1723                     l3554:
  8814  1723  1756               	bsf	___ftadd@sign,6
  8815  1724                     l723:
  8816  1724  17CD               	bsf	___ftadd@f1+1,7
  8817  1725                     l3556:
  8818  1725  30FF               	movlw	255
  8819  1726  05CC               	andwf	___ftadd@f1,f
  8820  1727  30FF               	movlw	255
  8821  1728  05CD               	andwf	___ftadd@f1+1,f
  8822  1729  3000               	movlw	0
  8823  172A  05CE               	andwf	___ftadd@f1+2,f
  8824  172B                     l3558:
  8825  172B  17D0               	bsf	___ftadd@f2+1,7
  8826  172C  30FF               	movlw	255
  8827  172D  05CF               	andwf	___ftadd@f2,f
  8828  172E  30FF               	movlw	255
  8829  172F  05D0               	andwf	___ftadd@f2+1,f
  8830  1730  3000               	movlw	0
  8831  1731  05D1               	andwf	___ftadd@f2+2,f
  8832  1732  0857               	movf	___ftadd@exp2,w
  8833  1733  0258               	subwf	___ftadd@exp1,w
  8834  1734  1803               	skipnc
  8835  1735  2F37               	goto	u4701
  8836  1736  2F38               	goto	u4700
  8837  1737                     u4701:
  8838  1737  2F64               	goto	l3570
  8839  1738                     u4700:
  8840  1738                     l3560:
  8841  1738  3001               	movlw	1
  8842  1739                     u4715:
  8843  1739  1003               	clrc
  8844  173A  0DCF               	rlf	___ftadd@f2,f
  8845  173B  0DD0               	rlf	___ftadd@f2+1,f
  8846  173C  0DD1               	rlf	___ftadd@f2+2,f
  8847  173D  3EFF               	addlw	-1
  8848  173E  1D03               	skipz
  8849  173F  2F39               	goto	u4715
  8850  1740  3001               	movlw	1
  8851  1741  02D7               	subwf	___ftadd@exp2,f
  8852  1742                     l3562:
  8853  1742  0857               	movf	___ftadd@exp2,w
  8854  1743  0658               	xorwf	___ftadd@exp1,w
  8855  1744  1903               	skipnz
  8856  1745  2F47               	goto	u4721
  8857  1746  2F48               	goto	u4720
  8858  1747                     u4721:
  8859  1747  2F5D               	goto	l3568
  8860  1748                     u4720:
  8861  1748                     l3564:
  8862  1748  3001               	movlw	1
  8863  1749  02D6               	subwf	___ftadd@sign,f
  8864  174A  0856               	movf	___ftadd@sign,w
  8865  174B  3907               	andlw	7
  8866  174C  1D03               	btfss	3,2
  8867  174D  2F4F               	goto	u4731
  8868  174E  2F50               	goto	u4730
  8869  174F                     u4731:
  8870  174F  2F38               	goto	l3560
  8871  1750                     u4730:
  8872  1750  2F5D               	goto	l3568
  8873  1751                     l3566:
  8874  1751  3001               	movlw	1
  8875  1752                     u4745:
  8876  1752  1003               	clrc
  8877  1753  0CCE               	rrf	___ftadd@f1+2,f
  8878  1754  0CCD               	rrf	___ftadd@f1+1,f
  8879  1755  0CCC               	rrf	___ftadd@f1,f
  8880  1756  3EFF               	addlw	-1
  8881  1757  1D03               	skipz
  8882  1758  2F52               	goto	u4745
  8883  1759  3001               	movlw	1
  8884  175A  00D2               	movwf	??___ftadd
  8885  175B  0852               	movf	??___ftadd,w
  8886  175C  07D8               	addwf	___ftadd@exp1,f
  8887  175D                     l3568:
  8888  175D  0858               	movf	___ftadd@exp1,w
  8889  175E  0657               	xorwf	___ftadd@exp2,w
  8890  175F  1D03               	skipz
  8891  1760  2F62               	goto	u4751
  8892  1761  2F63               	goto	u4750
  8893  1762                     u4751:
  8894  1762  2F51               	goto	l3566
  8895  1763                     u4750:
  8896  1763  2F95               	goto	l732
  8897  1764                     l3570:
  8898  1764  0858               	movf	___ftadd@exp1,w
  8899  1765  0257               	subwf	___ftadd@exp2,w
  8900  1766  1803               	skipnc
  8901  1767  2F69               	goto	u4761
  8902  1768  2F6A               	goto	u4760
  8903  1769                     u4761:
  8904  1769  2F95               	goto	l732
  8905  176A                     u4760:
  8906  176A                     l3572:
  8907  176A  3001               	movlw	1
  8908  176B                     u4775:
  8909  176B  1003               	clrc
  8910  176C  0DCC               	rlf	___ftadd@f1,f
  8911  176D  0DCD               	rlf	___ftadd@f1+1,f
  8912  176E  0DCE               	rlf	___ftadd@f1+2,f
  8913  176F  3EFF               	addlw	-1
  8914  1770  1D03               	skipz
  8915  1771  2F6B               	goto	u4775
  8916  1772  3001               	movlw	1
  8917  1773  02D8               	subwf	___ftadd@exp1,f
  8918  1774                     l3574:
  8919  1774  0857               	movf	___ftadd@exp2,w
  8920  1775  0658               	xorwf	___ftadd@exp1,w
  8921  1776  1903               	skipnz
  8922  1777  2F79               	goto	u4781
  8923  1778  2F7A               	goto	u4780
  8924  1779                     u4781:
  8925  1779  2F8F               	goto	l3580
  8926  177A                     u4780:
  8927  177A                     l3576:
  8928  177A  3001               	movlw	1
  8929  177B  02D6               	subwf	___ftadd@sign,f
  8930  177C  0856               	movf	___ftadd@sign,w
  8931  177D  3907               	andlw	7
  8932  177E  1D03               	btfss	3,2
  8933  177F  2F81               	goto	u4791
  8934  1780  2F82               	goto	u4790
  8935  1781                     u4791:
  8936  1781  2F6A               	goto	l3572
  8937  1782                     u4790:
  8938  1782  2F8F               	goto	l3580
  8939  1783                     l3578:
  8940  1783  3001               	movlw	1
  8941  1784                     u4805:
  8942  1784  1003               	clrc
  8943  1785  0CD1               	rrf	___ftadd@f2+2,f
  8944  1786  0CD0               	rrf	___ftadd@f2+1,f
  8945  1787  0CCF               	rrf	___ftadd@f2,f
  8946  1788  3EFF               	addlw	-1
  8947  1789  1D03               	skipz
  8948  178A  2F84               	goto	u4805
  8949  178B  3001               	movlw	1
  8950  178C  00D2               	movwf	??___ftadd
  8951  178D  0852               	movf	??___ftadd,w
  8952  178E  07D7               	addwf	___ftadd@exp2,f
  8953  178F                     l3580:
  8954  178F  0858               	movf	___ftadd@exp1,w
  8955  1790  0657               	xorwf	___ftadd@exp2,w
  8956  1791  1D03               	skipz
  8957  1792  2F94               	goto	u4811
  8958  1793  2F95               	goto	u4810
  8959  1794                     u4811:
  8960  1794  2F83               	goto	l3578
  8961  1795                     u4810:
  8962  1795                     l732:
  8963  1795  1FD6               	btfss	___ftadd@sign,7
  8964  1796  2F98               	goto	u4821
  8965  1797  2F99               	goto	u4820
  8966  1798                     u4821:
  8967  1798  2FA9               	goto	l3584
  8968  1799                     u4820:
  8969  1799                     l3582:
  8970  1799  30FF               	movlw	255
  8971  179A  06CC               	xorwf	___ftadd@f1,f
  8972  179B  30FF               	movlw	255
  8973  179C  06CD               	xorwf	___ftadd@f1+1,f
  8974  179D  30FF               	movlw	255
  8975  179E  06CE               	xorwf	___ftadd@f1+2,f
  8976  179F  3001               	movlw	1
  8977  17A0  07CC               	addwf	___ftadd@f1,f
  8978  17A1  3000               	movlw	0
  8979  17A2  1803               	skipnc
  8980  17A3  3001               	movlw	1
  8981  17A4  07CD               	addwf	___ftadd@f1+1,f
  8982  17A5  3000               	movlw	0
  8983  17A6  1803               	skipnc
  8984  17A7  3001               	movlw	1
  8985  17A8  07CE               	addwf	___ftadd@f1+2,f
  8986  17A9                     l3584:
  8987  17A9  1F56               	btfss	___ftadd@sign,6
  8988  17AA  2FAC               	goto	u4831
  8989  17AB  2FAD               	goto	u4830
  8990  17AC                     u4831:
  8991  17AC  2FBD               	goto	l3588
  8992  17AD                     u4830:
  8993  17AD                     l3586:
  8994  17AD  30FF               	movlw	255
  8995  17AE  06CF               	xorwf	___ftadd@f2,f
  8996  17AF  30FF               	movlw	255
  8997  17B0  06D0               	xorwf	___ftadd@f2+1,f
  8998  17B1  30FF               	movlw	255
  8999  17B2  06D1               	xorwf	___ftadd@f2+2,f
  9000  17B3  3001               	movlw	1
  9001  17B4  07CF               	addwf	___ftadd@f2,f
  9002  17B5  3000               	movlw	0
  9003  17B6  1803               	skipnc
  9004  17B7  3001               	movlw	1
  9005  17B8  07D0               	addwf	___ftadd@f2+1,f
  9006  17B9  3000               	movlw	0
  9007  17BA  1803               	skipnc
  9008  17BB  3001               	movlw	1
  9009  17BC  07D1               	addwf	___ftadd@f2+2,f
  9010  17BD                     l3588:
  9011  17BD  01D6               	clrf	___ftadd@sign
  9012  17BE                     l3590:
  9013  17BE  084C               	movf	___ftadd@f1,w
  9014  17BF  07CF               	addwf	___ftadd@f2,f
  9015  17C0  084D               	movf	___ftadd@f1+1,w
  9016  17C1  1103               	clrz
  9017  17C2  1803               	skipnc
  9018  17C3  0A4D               	incf	___ftadd@f1+1,w
  9019  17C4  1903               	skipnz
  9020  17C5  2FC7               	goto	u4841
  9021  17C6  07D0               	addwf	___ftadd@f2+1,f
  9022  17C7                     u4841:
  9023  17C7  084E               	movf	___ftadd@f1+2,w
  9024  17C8  1103               	clrz
  9025  17C9  1803               	skipnc
  9026  17CA  0A4E               	incf	___ftadd@f1+2,w
  9027  17CB  1903               	skipnz
  9028  17CC  2FCE               	goto	u4842
  9029  17CD  07D1               	addwf	___ftadd@f2+2,f
  9030  17CE                     u4842:
  9031  17CE                     l3592:
  9032  17CE  1FD1               	btfss	___ftadd@f2+2,7
  9033  17CF  2FD1               	goto	u4851
  9034  17D0  2FD2               	goto	u4850
  9035  17D1                     u4851:
  9036  17D1  2FE4               	goto	l3598
  9037  17D2                     u4850:
  9038  17D2                     l3594:
  9039  17D2  30FF               	movlw	255
  9040  17D3  06CF               	xorwf	___ftadd@f2,f
  9041  17D4  30FF               	movlw	255
  9042  17D5  06D0               	xorwf	___ftadd@f2+1,f
  9043  17D6  30FF               	movlw	255
  9044  17D7  06D1               	xorwf	___ftadd@f2+2,f
  9045  17D8  3001               	movlw	1
  9046  17D9  07CF               	addwf	___ftadd@f2,f
  9047  17DA  3000               	movlw	0
  9048  17DB  1803               	skipnc
  9049  17DC  3001               	movlw	1
  9050  17DD  07D0               	addwf	___ftadd@f2+1,f
  9051  17DE  3000               	movlw	0
  9052  17DF  1803               	skipnc
  9053  17E0  3001               	movlw	1
  9054  17E1  07D1               	addwf	___ftadd@f2+2,f
  9055  17E2                     l3596:
  9056  17E2  01D6               	clrf	___ftadd@sign
  9057  17E3  0AD6               	incf	___ftadd@sign,f
  9058  17E4                     l3598:
  9059  17E4  084F               	movf	___ftadd@f2,w
  9060  17E5  00F2               	movwf	___ftpack@arg
  9061  17E6  0850               	movf	___ftadd@f2+1,w
  9062  17E7  00F3               	movwf	___ftpack@arg+1
  9063  17E8  0851               	movf	___ftadd@f2+2,w
  9064  17E9  00F4               	movwf	___ftpack@arg+2
  9065  17EA  0858               	movf	___ftadd@exp1,w
  9066  17EB  00D2               	movwf	??___ftadd
  9067  17EC  0852               	movf	??___ftadd,w
  9068  17ED  00F5               	movwf	___ftpack@exp
  9069  17EE  0856               	movf	___ftadd@sign,w
  9070  17EF  00D3               	movwf	??___ftadd+1
  9071  17F0  0853               	movf	??___ftadd+1,w
  9072  17F1  00F6               	movwf	___ftpack@sign
  9073  17F2  160A  118A  22BE  160A  118A  	fcall	___ftpack
  9074  17F7  0872               	movf	?___ftpack,w
  9075  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  9076  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  9077  17FA  00CC               	movwf	?___ftadd
  9078  17FB  0873               	movf	?___ftpack+1,w
  9079  17FC  00CD               	movwf	?___ftadd+1
  9080  17FD  0874               	movf	?___ftpack+2,w
  9081  17FE  00CE               	movwf	?___ftadd+2
  9082  17FF                     l718:
  9083  17FF  0008               	return
  9084  1800                     __end_of___ftadd:
  9085                           
  9086                           	psect	text44
  9087  12BE                     __ptext44:	
  9088 ;; *************** function ___ftpack *****************
  9089 ;; Defined at:
  9090 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\float.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;  arg             3    2[COMMON] unsigned um
  9093 ;;  exp             1    5[COMMON] unsigned char 
  9094 ;;  sign            1    6[COMMON] unsigned char 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;		None
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  3    2[COMMON] float 
  9099 ;; Registers used:
  9100 ;;		wreg, status,2, status,0
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9106 ;;      Params:         5       0       0       0       0
  9107 ;;      Locals:         0       0       0       0       0
  9108 ;;      Temps:          3       0       0       0       0
  9109 ;;      Totals:         8       0       0       0       0
  9110 ;;Total ram usage:        8 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    1
  9113 ;; This function calls:
  9114 ;;		Nothing
  9115 ;; This function is called by:
  9116 ;;		___awtoft
  9117 ;;		___ftadd
  9118 ;;		___ftdiv
  9119 ;;		___ftmul
  9120 ;;		___lltoft
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           
  9125                           ;psect for function ___ftpack
  9126  12BE                     ___ftpack:
  9127  12BE                     l3498:	
  9128                           ;incstack = 0
  9129                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9130                           
  9131  12BE  0875               	movf	___ftpack@exp,w
  9132  12BF  1903               	btfsc	3,2
  9133  12C0  2AC2               	goto	u4501
  9134  12C1  2AC3               	goto	u4500
  9135  12C2                     u4501:
  9136  12C2  2ACA               	goto	l3502
  9137  12C3                     u4500:
  9138  12C3                     l3500:
  9139  12C3  0874               	movf	___ftpack@arg+2,w
  9140  12C4  0473               	iorwf	___ftpack@arg+1,w
  9141  12C5  0472               	iorwf	___ftpack@arg,w
  9142  12C6  1D03               	skipz
  9143  12C7  2AC9               	goto	u4511
  9144  12C8  2ACA               	goto	u4510
  9145  12C9                     u4511:
  9146  12C9  2ADD               	goto	l3508
  9147  12CA                     u4510:
  9148  12CA                     l3502:
  9149  12CA  3000               	movlw	0
  9150  12CB  00F2               	movwf	?___ftpack
  9151  12CC  3000               	movlw	0
  9152  12CD  00F3               	movwf	?___ftpack+1
  9153  12CE  3000               	movlw	0
  9154  12CF  00F4               	movwf	?___ftpack+2
  9155  12D0  2B39               	goto	l697
  9156  12D1                     l3506:
  9157  12D1  3001               	movlw	1
  9158  12D2  00F7               	movwf	??___ftpack
  9159  12D3  0877               	movf	??___ftpack,w
  9160  12D4  07F5               	addwf	___ftpack@exp,f
  9161  12D5  3001               	movlw	1
  9162  12D6                     u4525:
  9163  12D6  1003               	clrc
  9164  12D7  0CF4               	rrf	___ftpack@arg+2,f
  9165  12D8  0CF3               	rrf	___ftpack@arg+1,f
  9166  12D9  0CF2               	rrf	___ftpack@arg,f
  9167  12DA  3EFF               	addlw	-1
  9168  12DB  1D03               	skipz
  9169  12DC  2AD6               	goto	u4525
  9170  12DD                     l3508:
  9171  12DD  30FE               	movlw	254
  9172  12DE  0574               	andwf	___ftpack@arg+2,w
  9173  12DF  1D03               	btfss	3,2
  9174  12E0  2AE2               	goto	u4531
  9175  12E1  2AE3               	goto	u4530
  9176  12E2                     u4531:
  9177  12E2  2AD1               	goto	l3506
  9178  12E3                     u4530:
  9179  12E3  2AFA               	goto	l701
  9180  12E4                     l3510:
  9181  12E4  3001               	movlw	1
  9182  12E5  00F7               	movwf	??___ftpack
  9183  12E6  0877               	movf	??___ftpack,w
  9184  12E7  07F5               	addwf	___ftpack@exp,f
  9185  12E8                     l3512:
  9186  12E8  3001               	movlw	1
  9187  12E9  07F2               	addwf	___ftpack@arg,f
  9188  12EA  3000               	movlw	0
  9189  12EB  1803               	skipnc
  9190  12EC  3001               	movlw	1
  9191  12ED  07F3               	addwf	___ftpack@arg+1,f
  9192  12EE  3000               	movlw	0
  9193  12EF  1803               	skipnc
  9194  12F0  3001               	movlw	1
  9195  12F1  07F4               	addwf	___ftpack@arg+2,f
  9196  12F2                     l3514:
  9197  12F2  3001               	movlw	1
  9198  12F3                     u4545:
  9199  12F3  1003               	clrc
  9200  12F4  0CF4               	rrf	___ftpack@arg+2,f
  9201  12F5  0CF3               	rrf	___ftpack@arg+1,f
  9202  12F6  0CF2               	rrf	___ftpack@arg,f
  9203  12F7  3EFF               	addlw	-1
  9204  12F8  1D03               	skipz
  9205  12F9  2AF3               	goto	u4545
  9206  12FA                     l701:
  9207  12FA  30FF               	movlw	255
  9208  12FB  0574               	andwf	___ftpack@arg+2,w
  9209  12FC  1D03               	btfss	3,2
  9210  12FD  2AFF               	goto	u4551
  9211  12FE  2B00               	goto	u4550
  9212  12FF                     u4551:
  9213  12FF  2AE4               	goto	l3510
  9214  1300                     u4550:
  9215  1300  2B0B               	goto	l3518
  9216  1301                     l3516:
  9217  1301  3001               	movlw	1
  9218  1302  02F5               	subwf	___ftpack@exp,f
  9219  1303  3001               	movlw	1
  9220  1304                     u4565:
  9221  1304  1003               	clrc
  9222  1305  0DF2               	rlf	___ftpack@arg,f
  9223  1306  0DF3               	rlf	___ftpack@arg+1,f
  9224  1307  0DF4               	rlf	___ftpack@arg+2,f
  9225  1308  3EFF               	addlw	-1
  9226  1309  1D03               	skipz
  9227  130A  2B04               	goto	u4565
  9228  130B                     l3518:
  9229  130B  1BF3               	btfsc	___ftpack@arg+1,7
  9230  130C  2B0E               	goto	u4571
  9231  130D  2B0F               	goto	u4570
  9232  130E                     u4571:
  9233  130E  2B15               	goto	l708
  9234  130F                     u4570:
  9235  130F                     l3520:
  9236  130F  3002               	movlw	2
  9237  1310  0275               	subwf	___ftpack@exp,w
  9238  1311  1803               	skipnc
  9239  1312  2B14               	goto	u4581
  9240  1313  2B15               	goto	u4580
  9241  1314                     u4581:
  9242  1314  2B01               	goto	l3516
  9243  1315                     u4580:
  9244  1315                     l708:
  9245  1315  1875               	btfsc	___ftpack@exp,0
  9246  1316  2B18               	goto	u4591
  9247  1317  2B19               	goto	u4590
  9248  1318                     u4591:
  9249  1318  2B1F               	goto	l709
  9250  1319                     u4590:
  9251  1319                     l3522:
  9252  1319  30FF               	movlw	255
  9253  131A  05F2               	andwf	___ftpack@arg,f
  9254  131B  307F               	movlw	127
  9255  131C  05F3               	andwf	___ftpack@arg+1,f
  9256  131D  30FF               	movlw	255
  9257  131E  05F4               	andwf	___ftpack@arg+2,f
  9258  131F                     l709:
  9259  131F  1003               	clrc
  9260  1320  0CF5               	rrf	___ftpack@exp,f
  9261  1321                     l3524:
  9262  1321  0875               	movf	___ftpack@exp,w
  9263  1322  00F7               	movwf	??___ftpack
  9264  1323  01F8               	clrf	??___ftpack+1
  9265  1324  01F9               	clrf	??___ftpack+2
  9266  1325  3010               	movlw	16
  9267  1326                     u4605:
  9268  1326  1003               	clrc
  9269  1327  0DF7               	rlf	??___ftpack,f
  9270  1328  0DF8               	rlf	??___ftpack+1,f
  9271  1329  0DF9               	rlf	??___ftpack+2,f
  9272  132A                     u4600:
  9273  132A  3EFF               	addlw	-1
  9274  132B  1D03               	skipz
  9275  132C  2B26               	goto	u4605
  9276  132D  0877               	movf	??___ftpack,w
  9277  132E  04F2               	iorwf	___ftpack@arg,f
  9278  132F  0878               	movf	??___ftpack+1,w
  9279  1330  04F3               	iorwf	___ftpack@arg+1,f
  9280  1331  0879               	movf	??___ftpack+2,w
  9281  1332  04F4               	iorwf	___ftpack@arg+2,f
  9282  1333                     l3526:
  9283  1333  0876               	movf	___ftpack@sign,w
  9284  1334  1903               	btfsc	3,2
  9285  1335  2B37               	goto	u4611
  9286  1336  2B38               	goto	u4610
  9287  1337                     u4611:
  9288  1337  2B39               	goto	l710
  9289  1338                     u4610:
  9290  1338                     l3528:
  9291  1338  17F4               	bsf	___ftpack@arg+2,7
  9292  1339                     l710:
  9293  1339                     l697:
  9294  1339  0008               	return
  9295  133A                     __end_of___ftpack:
  9296                           
  9297                           	psect	text45
  9298  1C0C                     __ptext45:	
  9299 ;; *************** function ___ftneg *****************
  9300 ;; Defined at:
  9301 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftneg.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  f1              3    2[COMMON] float 
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;		None
  9306 ;; Return value:  Size  Location     Type
  9307 ;;                  3    2[COMMON] float 
  9308 ;; Registers used:
  9309 ;;		wreg
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9315 ;;      Params:         3       0       0       0       0
  9316 ;;      Locals:         0       0       0       0       0
  9317 ;;      Temps:          0       0       0       0       0
  9318 ;;      Totals:         3       0       0       0       0
  9319 ;;Total ram usage:        3 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    1
  9322 ;; This function calls:
  9323 ;;		Nothing
  9324 ;; This function is called by:
  9325 ;;		_sprintf
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           
  9330                           ;psect for function ___ftneg
  9331  1C0C                     ___ftneg:
  9332  1C0C                     l2794:	
  9333                           ;incstack = 0
  9334                           ; Regs used in ___ftneg: [wreg]
  9335                           
  9336  1C0C  0874               	movf	___ftneg@f1+2,w
  9337  1C0D  0473               	iorwf	___ftneg@f1+1,w
  9338  1C0E  0472               	iorwf	___ftneg@f1,w
  9339  1C0F  1903               	skipnz
  9340  1C10  2C12               	goto	u3591
  9341  1C11  2C13               	goto	u3590
  9342  1C12                     u3591:
  9343  1C12  2C15               	goto	l2798
  9344  1C13                     u3590:
  9345  1C13                     l2796:
  9346  1C13  3080               	movlw	128
  9347  1C14  06F4               	xorwf	___ftneg@f1+2,f
  9348  1C15                     l2798:
  9349  1C15                     l792:
  9350  1C15  0008               	return
  9351  1C16                     __end_of___ftneg:
  9352                           
  9353                           	psect	text46
  9354  1DDF                     __ptext46:	
  9355 ;; *************** function ___ftge *****************
  9356 ;; Defined at:
  9357 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftge.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;  ff1             3    2[COMMON] float 
  9360 ;;  ff2             3    5[COMMON] float 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg, status,2, status,0
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9372 ;;      Params:         6       0       0       0       0
  9373 ;;      Locals:         0       0       0       0       0
  9374 ;;      Temps:          0       0       0       0       0
  9375 ;;      Totals:         6       0       0       0       0
  9376 ;;Total ram usage:        6 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    1
  9379 ;; This function calls:
  9380 ;;		Nothing
  9381 ;; This function is called by:
  9382 ;;		_sprintf
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           
  9387                           ;psect for function ___ftge
  9388  1DDF                     ___ftge:
  9389  1DDF                     l2774:	
  9390                           ;incstack = 0
  9391                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9392                           
  9393  1DDF  1FF4               	btfss	___ftge@ff1+2,7
  9394  1DE0  2DE2               	goto	u3561
  9395  1DE1  2DE3               	goto	u3560
  9396  1DE2                     u3561:
  9397  1DE2  2DF0               	goto	l2778
  9398  1DE3                     u3560:
  9399  1DE3                     l2776:
  9400  1DE3  0872               	movf	___ftge@ff1,w
  9401  1DE4  3C00               	sublw	0
  9402  1DE5  00F2               	movwf	___ftge@ff1
  9403  1DE6  0873               	movf	___ftge@ff1+1,w
  9404  1DE7  1C03               	skipc
  9405  1DE8  0F73               	incfsz	___ftge@ff1+1,w
  9406  1DE9  3C00               	sublw	0
  9407  1DEA  00F3               	movwf	___ftge@ff1+1
  9408  1DEB  0874               	movf	___ftge@ff1+2,w
  9409  1DEC  1C03               	skipc
  9410  1DED  0F74               	incfsz	___ftge@ff1+2,w
  9411  1DEE  3C80               	sublw	128
  9412  1DEF  00F4               	movwf	___ftge@ff1+2
  9413  1DF0                     l2778:
  9414  1DF0  1FF7               	btfss	___ftge@ff2+2,7
  9415  1DF1  2DF3               	goto	u3571
  9416  1DF2  2DF4               	goto	u3570
  9417  1DF3                     u3571:
  9418  1DF3  2E01               	goto	l2782
  9419  1DF4                     u3570:
  9420  1DF4                     l2780:
  9421  1DF4  0875               	movf	___ftge@ff2,w
  9422  1DF5  3C00               	sublw	0
  9423  1DF6  00F5               	movwf	___ftge@ff2
  9424  1DF7  0876               	movf	___ftge@ff2+1,w
  9425  1DF8  1C03               	skipc
  9426  1DF9  0F76               	incfsz	___ftge@ff2+1,w
  9427  1DFA  3C00               	sublw	0
  9428  1DFB  00F6               	movwf	___ftge@ff2+1
  9429  1DFC  0877               	movf	___ftge@ff2+2,w
  9430  1DFD  1C03               	skipc
  9431  1DFE  0F77               	incfsz	___ftge@ff2+2,w
  9432  1DFF  3C80               	sublw	128
  9433  1E00  00F7               	movwf	___ftge@ff2+2
  9434  1E01                     l2782:
  9435  1E01  3080               	movlw	128
  9436  1E02  06F4               	xorwf	___ftge@ff1+2,f
  9437  1E03                     l2784:
  9438  1E03  3080               	movlw	128
  9439  1E04  06F7               	xorwf	___ftge@ff2+2,f
  9440  1E05                     l2786:
  9441  1E05  0877               	movf	___ftge@ff2+2,w
  9442  1E06  0274               	subwf	___ftge@ff1+2,w
  9443  1E07  1D03               	skipz
  9444  1E08  2E0F               	goto	u3585
  9445  1E09  0876               	movf	___ftge@ff2+1,w
  9446  1E0A  0273               	subwf	___ftge@ff1+1,w
  9447  1E0B  1D03               	skipz
  9448  1E0C  2E0F               	goto	u3585
  9449  1E0D  0875               	movf	___ftge@ff2,w
  9450  1E0E  0272               	subwf	___ftge@ff1,w
  9451  1E0F                     u3585:
  9452  1E0F  1803               	skipnc
  9453  1E10  2E12               	goto	u3581
  9454  1E11  2E13               	goto	u3580
  9455  1E12                     u3581:
  9456  1E12  2E15               	goto	l2790
  9457  1E13                     u3580:
  9458  1E13                     l2788:
  9459  1E13  1003               	clrc
  9460  1E14  2E16               	goto	l775
  9461  1E15                     l2790:
  9462  1E15  1403               	setc
  9463  1E16                     l775:
  9464  1E16  0008               	return
  9465  1E17                     __end_of___ftge:
  9466                           
  9467                           	psect	text47
  9468  1BE5                     __ptext47:	
  9469 ;; *************** function _ISR *****************
  9470 ;; Defined at:
  9471 ;;		line 86 in file "main_maestro.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;		None
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;		None
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  1    wreg      void 
  9478 ;; Registers used:
  9479 ;;		None
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 0/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9485 ;;      Params:         0       0       0       0       0
  9486 ;;      Locals:         0       0       0       0       0
  9487 ;;      Temps:          2       0       0       0       0
  9488 ;;      Totals:         2       0       0       0       0
  9489 ;;Total ram usage:        2 bytes
  9490 ;; Hardware stack levels used:    1
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		Interrupt level 1
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           
  9499                           ;psect for function _ISR
  9500  1BE5                     _ISR:
  9501  1BE5                     i1l101:
  9502  1BE5  0871               	movf	??_ISR+1,w
  9503  1BE6  008A               	movwf	10
  9504  1BE7  0E70               	swapf	??_ISR,w
  9505  1BE8  0083               	movwf	3
  9506  1BE9  0EFE               	swapf	btemp,f
  9507  1BEA  0E7E               	swapf	btemp,w
  9508  1BEB  0009               	retfie
  9509  1BEC                     __end_of_ISR:
  9510  007E                     btemp	set	126	;btemp
  9511  007E                     wtemp0	set	126
  9512                           
  9513                           	psect	intentry
  9514  0004                     __pintentry:	
  9515                           ;incstack = 0
  9516                           ; Regs used in _ISR: []
  9517                           
  9518  0004                     interrupt_function:
  9519  007E                     saved_w	set	btemp
  9520  0004  00FE               	movwf	btemp
  9521  0005  0E03               	swapf	3,w
  9522  0006  00F0               	movwf	??_ISR
  9523  0007  080A               	movf	10,w
  9524  0008  00F1               	movwf	??_ISR+1
  9525  0009  160A  158A  2BE5   	ljmp	_ISR
  9526                           
  9527                           	psect	config
  9528                           
  9529                           ;Config register CONFIG1 @ 0x2007
  9530                           ;	Oscillator Selection bits
  9531                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  9532                           ;	Watchdog Timer Enable bit
  9533                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  9534                           ;	Power-up Timer Enable bit
  9535                           ;	PWRTE = OFF, PWRT disabled
  9536                           ;	RE3/MCLR pin function select bit
  9537                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  9538                           ;	Code Protection bit
  9539                           ;	CP = OFF, Program memory code protection is disabled
  9540                           ;	Data Code Protection bit
  9541                           ;	CPD = OFF, Data memory code protection is disabled
  9542                           ;	Brown Out Reset Selection bits
  9543                           ;	BOREN = OFF, BOR disabled
  9544                           ;	Internal External Switchover bit
  9545                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  9546                           ;	Fail-Safe Clock Monitor Enabled bit
  9547                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  9548                           ;	Low Voltage Programming Enable bit
  9549                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  9550                           ;	In-Circuit Debugger Mode bit
  9551                           ;	DEBUG = 0x1, unprogrammed default
  9552  2007                     	org	8199
  9553  2007  20D6               	dw	8406
  9554                           
  9555                           ;Config register CONFIG2 @ 0x2008
  9556                           ;	Brown-out Reset Selection bit
  9557                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  9558                           ;	Flash Program Memory Self Write Enable bits
  9559                           ;	WRT = OFF, Write protection off
  9560  2008                     	org	8200
  9561  2008  3FFF               	dw	16383
  9562                           
  9563                           	psect	text25_split_1
  9564  0022                     u5620:
  9565  0022                     l3990:
  9566  0022  1683               	bsf	3,5	;RP0=1, select bank1
  9567  0023  1303               	bcf	3,6	;RP1=0, select bank1
  9568  0024  0865               	movf	(sprintf@fval+2)^(0+128),w
  9569  0025  0464               	iorwf	(sprintf@fval+1)^(0+128),w
  9570  0026  0463               	iorwf	sprintf@fval^(0+128),w
  9571  0027  1903               	skipnz
  9572  0028  282A               	goto	u5631
  9573  0029  282B               	goto	u5630
  9574  002A                     u5631:
  9575  002A  28BB               	goto	l4010
  9576  002B                     u5630:
  9577  002B                     l3992:
  9578  002B  0863               	movf	sprintf@fval^(0+128),w
  9579  002C  1283               	bcf	3,5	;RP0=0, select bank0
  9580  002D  1303               	bcf	3,6	;RP1=0, select bank0
  9581  002E  00C5               	movwf	___fttol@f1
  9582  002F  1683               	bsf	3,5	;RP0=1, select bank1
  9583  0030  1303               	bcf	3,6	;RP1=0, select bank1
  9584  0031  0864               	movf	(sprintf@fval+1)^(0+128),w
  9585  0032  1283               	bcf	3,5	;RP0=0, select bank0
  9586  0033  1303               	bcf	3,6	;RP1=0, select bank0
  9587  0034  00C6               	movwf	___fttol@f1+1
  9588  0035  1683               	bsf	3,5	;RP0=1, select bank1
  9589  0036  1303               	bcf	3,6	;RP1=0, select bank1
  9590  0037  0865               	movf	(sprintf@fval+2)^(0+128),w
  9591  0038  1283               	bcf	3,5	;RP0=0, select bank0
  9592  0039  1303               	bcf	3,6	;RP1=0, select bank0
  9593  003A  00C7               	movwf	___fttol@f1+2
  9594  003B  120A  158A  2028  120A  118A  	fcall	___fttol
  9595  0040  1283               	bcf	3,5	;RP0=0, select bank0
  9596  0041  1303               	bcf	3,6	;RP1=0, select bank0
  9597  0042  0848               	movf	?___fttol+3,w
  9598  0043  0447               	iorwf	?___fttol+2,w
  9599  0044  0446               	iorwf	?___fttol+1,w
  9600  0045  0445               	iorwf	?___fttol,w
  9601  0046  1D03               	skipz
  9602  0047  2849               	goto	u5641
  9603  0048  284A               	goto	u5640
  9604  0049                     u5641:
  9605  0049  28BB               	goto	l4010
  9606  004A                     u5640:
  9607  004A                     l3994:
  9608  004A  1683               	bsf	3,5	;RP0=1, select bank1
  9609  004B  1303               	bcf	3,6	;RP1=0, select bank1
  9610  004C  0862               	movf	(sprintf@eexp+1)^(0+128),w
  9611  004D  3A80               	xorlw	128
  9612  004E  00FF               	movwf	btemp+1
  9613  004F  3080               	movlw	128
  9614  0050  027F               	subwf	btemp+1,w
  9615  0051  1D03               	skipz
  9616  0052  2855               	goto	u5655
  9617  0053  3002               	movlw	2
  9618  0054  0261               	subwf	sprintf@eexp^(0+128),w
  9619  0055                     u5655:
  9620  0055  1C03               	skipc
  9621  0056  2858               	goto	u5651
  9622  0057  2859               	goto	u5650
  9623  0058                     u5651:
  9624  0058  28BB               	goto	l4010
  9625  0059                     u5650:
  9626  0059                     l3996:
  9627                           
  9628                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1146:      if(tmp
      +                          val.integ < 4.294967296){
  9629  0059  1683               	bsf	3,5	;RP0=1, select bank1
  9630  005A  1303               	bcf	3,6	;RP1=0, select bank1
  9631  005B  0859               	movf	sprintf@tmpval^(0+128),w
  9632  005C  00F2               	movwf	___ftge@ff1
  9633  005D  085A               	movf	(sprintf@tmpval+1)^(0+128),w
  9634  005E  00F3               	movwf	___ftge@ff1+1
  9635  005F  085B               	movf	(sprintf@tmpval+2)^(0+128),w
  9636  0060  00F4               	movwf	___ftge@ff1+2
  9637  0061  3070               	movlw	112
  9638  0062  00F5               	movwf	___ftge@ff2
  9639  0063  3089               	movlw	137
  9640  0064  00F6               	movwf	___ftge@ff2+1
  9641  0065  3040               	movlw	64
  9642  0066  00F7               	movwf	___ftge@ff2+2
  9643  0067  160A  158A  25DF  120A  118A  	fcall	___ftge
  9644  006C  1803               	btfsc	3,0
  9645  006D  286F               	goto	u5661
  9646  006E  2870               	goto	u5660
  9647  006F                     u5661:
  9648  006F  2879               	goto	l4000
  9649  0070                     u5660:
  9650  0070                     l3998:
  9651                           
  9652                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1147:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-1;
  9653  0070  30F7               	movlw	247
  9654  0071  1683               	bsf	3,5	;RP0=1, select bank1
  9655  0072  1303               	bcf	3,6	;RP1=0, select bank1
  9656  0073  07E1               	addwf	sprintf@eexp^(0+128),f
  9657  0074  1803               	skipnc
  9658  0075  0AE2               	incf	(sprintf@eexp+1)^(0+128),f
  9659  0076  30FF               	movlw	255
  9660  0077  07E2               	addwf	(sprintf@eexp+1)^(0+128),f
  9661                           
  9662                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1148:      }else{
  9663  0078  2881               	goto	l4002
  9664  0079                     l4000:
  9665                           
  9666                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1149:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-2;
  9667  0079  30F8               	movlw	248
  9668  007A  1683               	bsf	3,5	;RP0=1, select bank1
  9669  007B  1303               	bcf	3,6	;RP1=0, select bank1
  9670  007C  07E1               	addwf	sprintf@eexp^(0+128),f
  9671  007D  1803               	skipnc
  9672  007E  0AE2               	incf	(sprintf@eexp+1)^(0+128),f
  9673  007F  30FF               	movlw	255
  9674  0080  07E2               	addwf	(sprintf@eexp+1)^(0+128),f
  9675  0081                     l4002:
  9676                           
  9677                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1151:      tmpval
      +                          .integ = scale(eexp);
  9678  0081  0861               	movf	sprintf@eexp^(0+128),w
  9679  0082  120A  158A  225D  120A  118A  	fcall	_scale
  9680  0087  1283               	bcf	3,5	;RP0=0, select bank0
  9681  0088  1303               	bcf	3,6	;RP1=0, select bank0
  9682  0089  083C               	movf	?_scale,w
  9683  008A  1683               	bsf	3,5	;RP0=1, select bank1
  9684  008B  1303               	bcf	3,6	;RP1=0, select bank1
  9685  008C  00D9               	movwf	sprintf@tmpval^(0+128)
  9686  008D  1283               	bcf	3,5	;RP0=0, select bank0
  9687  008E  1303               	bcf	3,6	;RP1=0, select bank0
  9688  008F  083D               	movf	?_scale+1,w
  9689  0090  1683               	bsf	3,5	;RP0=1, select bank1
  9690  0091  1303               	bcf	3,6	;RP1=0, select bank1
  9691  0092  00DA               	movwf	(sprintf@tmpval+1)^(0+128)
  9692  0093  1283               	bcf	3,5	;RP0=0, select bank0
  9693  0094  1303               	bcf	3,6	;RP1=0, select bank0
  9694  0095  083E               	movf	?_scale+2,w
  9695  0096  1683               	bsf	3,5	;RP0=1, select bank1
  9696  0097  1303               	bcf	3,6	;RP1=0, select bank1
  9697  0098  00DB               	movwf	(sprintf@tmpval+2)^(0+128)
  9698  0099                     l4006:	
  9699                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1152:      val = 
      +                          ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
  9700                           
  9701  0099  0863               	movf	sprintf@fval^(0+128),w
  9702  009A  00F2               	movwf	__tdiv_to_l_@f1
  9703  009B  0864               	movf	(sprintf@fval+1)^(0+128),w
  9704  009C  00F3               	movwf	__tdiv_to_l_@f1+1
  9705  009D  0865               	movf	(sprintf@fval+2)^(0+128),w
  9706  009E  00F4               	movwf	__tdiv_to_l_@f1+2
  9707  009F  0859               	movf	sprintf@tmpval^(0+128),w
  9708  00A0  00F5               	movwf	__tdiv_to_l_@f2
  9709  00A1  085A               	movf	(sprintf@tmpval+1)^(0+128),w
  9710  00A2  00F6               	movwf	__tdiv_to_l_@f2+1
  9711  00A3  085B               	movf	(sprintf@tmpval+2)^(0+128),w
  9712  00A4  00F7               	movwf	__tdiv_to_l_@f2+2
  9713  00A5  160A  118A  233A  120A  118A  	fcall	__tdiv_to_l_
  9714  00AA  0875               	movf	?__tdiv_to_l_+3,w
  9715  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  9716  00AC  1303               	bcf	3,6	;RP1=0, select bank1
  9717  00AD  00E0               	movwf	(sprintf@val+3)^(0+128)
  9718  00AE  0874               	movf	?__tdiv_to_l_+2,w
  9719  00AF  00DF               	movwf	(sprintf@val+2)^(0+128)
  9720  00B0  0873               	movf	?__tdiv_to_l_+1,w
  9721  00B1  00DE               	movwf	(sprintf@val+1)^(0+128)
  9722  00B2  0872               	movf	?__tdiv_to_l_,w
  9723  00B3  00DD               	movwf	sprintf@val^(0+128)
  9724  00B4                     l4008:
  9725                           
  9726                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1155:      fval =
      +                           0.0;
  9727  00B4  3000               	movlw	0
  9728  00B5  00E3               	movwf	sprintf@fval^(0+128)
  9729  00B6  3000               	movlw	0
  9730  00B7  00E4               	movwf	(sprintf@fval+1)^(0+128)
  9731  00B8  3000               	movlw	0
  9732  00B9  00E5               	movwf	(sprintf@fval+2)^(0+128)
  9733                           
  9734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1156:     } else 
      +                          {
  9735  00BA  2938               	goto	l4014
  9736  00BB                     l4010:
  9737                           
  9738                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1157:      val = 
      +                          (unsigned long)fval;
  9739  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  9740  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  9741  00BD  0863               	movf	sprintf@fval^(0+128),w
  9742  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  9743  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  9744  00C0  00C5               	movwf	___fttol@f1
  9745  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  9746  00C2  1303               	bcf	3,6	;RP1=0, select bank1
  9747  00C3  0864               	movf	(sprintf@fval+1)^(0+128),w
  9748  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  9749  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  9750  00C6  00C6               	movwf	___fttol@f1+1
  9751  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  9752  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  9753  00C9  0865               	movf	(sprintf@fval+2)^(0+128),w
  9754  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  9755  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  9756  00CC  00C7               	movwf	___fttol@f1+2
  9757  00CD  120A  158A  2028  120A  118A  	fcall	___fttol
  9758  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  9759  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  9760  00D4  0848               	movf	?___fttol+3,w
  9761  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  9762  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  9763  00D7  00E0               	movwf	(sprintf@val+3)^(0+128)
  9764  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  9765  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  9766  00DA  0847               	movf	?___fttol+2,w
  9767  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  9768  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  9769  00DD  00DF               	movwf	(sprintf@val+2)^(0+128)
  9770  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  9771  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  9772  00E0  0846               	movf	?___fttol+1,w
  9773  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  9774  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  9775  00E3  00DE               	movwf	(sprintf@val+1)^(0+128)
  9776  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  9777  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  9778  00E6  0845               	movf	?___fttol,w
  9779  00E7  1683               	bsf	3,5	;RP0=1, select bank1
  9780  00E8  1303               	bcf	3,6	;RP1=0, select bank1
  9781  00E9  00DD               	movwf	sprintf@val^(0+128)
  9782                           
  9783                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1158:      fval -
      +                          = (double)val;
  9784  00EA  0860               	movf	(sprintf@val+3)^(0+128),w
  9785  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  9786  00EC  1303               	bcf	3,6	;RP1=0, select bank0
  9787  00ED  00A3               	movwf	___lltoft@c+3
  9788  00EE  1683               	bsf	3,5	;RP0=1, select bank1
  9789  00EF  1303               	bcf	3,6	;RP1=0, select bank1
  9790  00F0  085F               	movf	(sprintf@val+2)^(0+128),w
  9791  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  9792  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  9793  00F3  00A2               	movwf	___lltoft@c+2
  9794  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  9795  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  9796  00F6  085E               	movf	(sprintf@val+1)^(0+128),w
  9797  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  9798  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  9799  00F9  00A1               	movwf	___lltoft@c+1
  9800  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  9801  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  9802  00FC  085D               	movf	sprintf@val^(0+128),w
  9803  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  9804  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  9805  00FF  00A0               	movwf	___lltoft@c
  9806  0100  160A  158A  250E  120A  118A  	fcall	___lltoft
  9807  0105  1283               	bcf	3,5	;RP0=0, select bank0
  9808  0106  1303               	bcf	3,6	;RP1=0, select bank0
  9809  0107  0820               	movf	?___lltoft,w
  9810  0108  00D9               	movwf	___ftsub@f2
  9811  0109  0821               	movf	?___lltoft+1,w
  9812  010A  00DA               	movwf	___ftsub@f2+1
  9813  010B  0822               	movf	?___lltoft+2,w
  9814  010C  00DB               	movwf	___ftsub@f2+2
  9815  010D  1683               	bsf	3,5	;RP0=1, select bank1
  9816  010E  1303               	bcf	3,6	;RP1=0, select bank1
  9817  010F  0863               	movf	sprintf@fval^(0+128),w
  9818  0110  1283               	bcf	3,5	;RP0=0, select bank0
  9819  0111  1303               	bcf	3,6	;RP1=0, select bank0
  9820  0112  00DC               	movwf	___ftsub@f1
  9821  0113  1683               	bsf	3,5	;RP0=1, select bank1
  9822  0114  1303               	bcf	3,6	;RP1=0, select bank1
  9823  0115  0864               	movf	(sprintf@fval+1)^(0+128),w
  9824  0116  1283               	bcf	3,5	;RP0=0, select bank0
  9825  0117  1303               	bcf	3,6	;RP1=0, select bank0
  9826  0118  00DD               	movwf	___ftsub@f1+1
  9827  0119  1683               	bsf	3,5	;RP0=1, select bank1
  9828  011A  1303               	bcf	3,6	;RP1=0, select bank1
  9829  011B  0865               	movf	(sprintf@fval+2)^(0+128),w
  9830  011C  1283               	bcf	3,5	;RP0=0, select bank0
  9831  011D  1303               	bcf	3,6	;RP1=0, select bank0
  9832  011E  00DE               	movwf	___ftsub@f1+2
  9833  011F  160A  158A  2495  120A  118A  	fcall	___ftsub
  9834  0124  1283               	bcf	3,5	;RP0=0, select bank0
  9835  0125  1303               	bcf	3,6	;RP1=0, select bank0
  9836  0126  0859               	movf	?___ftsub,w
  9837  0127  1683               	bsf	3,5	;RP0=1, select bank1
  9838  0128  1303               	bcf	3,6	;RP1=0, select bank1
  9839  0129  00E3               	movwf	sprintf@fval^(0+128)
  9840  012A  1283               	bcf	3,5	;RP0=0, select bank0
  9841  012B  1303               	bcf	3,6	;RP1=0, select bank0
  9842  012C  085A               	movf	?___ftsub+1,w
  9843  012D  1683               	bsf	3,5	;RP0=1, select bank1
  9844  012E  1303               	bcf	3,6	;RP1=0, select bank1
  9845  012F  00E4               	movwf	(sprintf@fval+1)^(0+128)
  9846  0130  1283               	bcf	3,5	;RP0=0, select bank0
  9847  0131  1303               	bcf	3,6	;RP1=0, select bank0
  9848  0132  085B               	movf	?___ftsub+2,w
  9849  0133  1683               	bsf	3,5	;RP0=1, select bank1
  9850  0134  1303               	bcf	3,6	;RP1=0, select bank1
  9851  0135  00E5               	movwf	(sprintf@fval+2)^(0+128)
  9852  0136                     l4012:
  9853                           
  9854                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1159:      eexp =
      +                           0;
  9855  0136  01E1               	clrf	sprintf@eexp^(0+128)
  9856  0137  01E2               	clrf	(sprintf@eexp+1)^(0+128)
  9857  0138                     l4014:
  9858                           
  9859                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1162:     for(c =
      +                           1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  9860  0138  01E9               	clrf	sprintf@c^(0+128)
  9861  0139  0AE9               	incf	sprintf@c^(0+128),f
  9862  013A                     l4020:
  9863                           
  9864                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1163:      if(val
      +                           < dpowers[c])
  9865  013A  0869               	movf	sprintf@c^(0+128),w
  9866  013B  1283               	bcf	3,5	;RP0=0, select bank0
  9867  013C  1303               	bcf	3,6	;RP1=0, select bank0
  9868  013D  00E3               	movwf	??_sprintf
  9869  013E  3001               	movlw	1
  9870  013F                     u5675:
  9871  013F  1003               	clrc
  9872  0140  0DE3               	rlf	??_sprintf,f
  9873  0141  3EFF               	addlw	-1
  9874  0142  1D03               	skipz
  9875  0143  293F               	goto	u5675
  9876  0144  1003               	clrc
  9877  0145  0D63               	rlf	??_sprintf,w
  9878  0146  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  9879  0147  0084               	movwf	4
  9880  0148  160A  118A  200A  120A  118A  	fcall	stringdir
  9881  014D  00E4               	movwf	??_sprintf+1
  9882  014E  160A  118A  200A  120A  118A  	fcall	stringdir
  9883  0153  00E5               	movwf	??_sprintf+2
  9884  0154  160A  118A  200A  120A  118A  	fcall	stringdir
  9885  0159  00E6               	movwf	??_sprintf+3
  9886  015A  160A  118A  200A  120A  118A  	fcall	stringdir
  9887  015F  00E7               	movwf	??_sprintf+4
  9888  0160  0867               	movf	??_sprintf+4,w
  9889  0161  1683               	bsf	3,5	;RP0=1, select bank1
  9890  0162  1303               	bcf	3,6	;RP1=0, select bank1
  9891  0163  0260               	subwf	(sprintf@val+3)^(0+128),w
  9892  0164  1D03               	skipz
  9893  0165  297C               	goto	u5685
  9894  0166  1283               	bcf	3,5	;RP0=0, select bank0
  9895  0167  1303               	bcf	3,6	;RP1=0, select bank0
  9896  0168  0866               	movf	??_sprintf+3,w
  9897  0169  1683               	bsf	3,5	;RP0=1, select bank1
  9898  016A  1303               	bcf	3,6	;RP1=0, select bank1
  9899  016B  025F               	subwf	(sprintf@val+2)^(0+128),w
  9900  016C  1D03               	skipz
  9901  016D  297C               	goto	u5685
  9902  016E  1283               	bcf	3,5	;RP0=0, select bank0
  9903  016F  1303               	bcf	3,6	;RP1=0, select bank0
  9904  0170  0865               	movf	??_sprintf+2,w
  9905  0171  1683               	bsf	3,5	;RP0=1, select bank1
  9906  0172  1303               	bcf	3,6	;RP1=0, select bank1
  9907  0173  025E               	subwf	(sprintf@val+1)^(0+128),w
  9908  0174  1D03               	skipz
  9909  0175  297C               	goto	u5685
  9910  0176  1283               	bcf	3,5	;RP0=0, select bank0
  9911  0177  1303               	bcf	3,6	;RP1=0, select bank0
  9912  0178  0864               	movf	??_sprintf+1,w
  9913  0179  1683               	bsf	3,5	;RP0=1, select bank1
  9914  017A  1303               	bcf	3,6	;RP1=0, select bank1
  9915  017B  025D               	subwf	sprintf@val^(0+128),w
  9916  017C                     u5685:
  9917  017C  1803               	skipnc
  9918  017D  297F               	goto	u5681
  9919  017E  2980               	goto	u5680
  9920  017F                     u5681:
  9921  017F  2981               	goto	l4024
  9922  0180                     u5680:
  9923  0180  298F               	goto	l4026
  9924  0181                     l4024:
  9925  0181  3001               	movlw	1
  9926  0182  1283               	bcf	3,5	;RP0=0, select bank0
  9927  0183  1303               	bcf	3,6	;RP1=0, select bank0
  9928  0184  00E3               	movwf	??_sprintf
  9929  0185  0863               	movf	??_sprintf,w
  9930  0186  1683               	bsf	3,5	;RP0=1, select bank1
  9931  0187  1303               	bcf	3,6	;RP1=0, select bank1
  9932  0188  07E9               	addwf	sprintf@c^(0+128),f
  9933  0189  300A               	movlw	10
  9934  018A  0669               	xorwf	sprintf@c^(0+128),w
  9935  018B  1D03               	btfss	3,2
  9936  018C  298E               	goto	u5691
  9937  018D  298F               	goto	u5690
  9938  018E                     u5691:
  9939  018E  293A               	goto	l4020
  9940  018F                     u5690:
  9941  018F                     l4026:
  9942                           
  9943                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1168:     width -
      +                          = prec + c + eexp;
  9944  018F  0869               	movf	sprintf@c^(0+128),w
  9945  0190  0767               	addwf	sprintf@prec^(0+128),w
  9946  0191  1283               	bcf	3,5	;RP0=0, select bank0
  9947  0192  1303               	bcf	3,6	;RP1=0, select bank0
  9948  0193  00E3               	movwf	??_sprintf
  9949  0194  1683               	bsf	3,5	;RP0=1, select bank1
  9950  0195  1303               	bcf	3,6	;RP1=0, select bank1
  9951  0196  0868               	movf	(sprintf@prec+1)^(0+128),w
  9952  0197  1803               	skipnc
  9953  0198  0A68               	incf	(sprintf@prec+1)^(0+128),w
  9954  0199  1283               	bcf	3,5	;RP0=0, select bank0
  9955  019A  1303               	bcf	3,6	;RP1=0, select bank0
  9956  019B  00E4               	movwf	??_sprintf+1
  9957  019C  1683               	bsf	3,5	;RP0=1, select bank1
  9958  019D  1303               	bcf	3,6	;RP1=0, select bank1
  9959  019E  0861               	movf	sprintf@eexp^(0+128),w
  9960  019F  1283               	bcf	3,5	;RP0=0, select bank0
  9961  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  9962  01A1  0763               	addwf	??_sprintf,w
  9963  01A2  00E5               	movwf	??_sprintf+2
  9964  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  9965  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  9966  01A5  0862               	movf	(sprintf@eexp+1)^(0+128),w
  9967  01A6  1803               	skipnc
  9968  01A7  0A62               	incf	(sprintf@eexp+1)^(0+128),w
  9969  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  9970  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  9971  01AA  0764               	addwf	??_sprintf+1,w
  9972  01AB  00E6               	movwf	??_sprintf+3
  9973  01AC  0865               	movf	??_sprintf+2,w
  9974  01AD  1683               	bsf	3,5	;RP0=1, select bank1
  9975  01AE  1303               	bcf	3,6	;RP1=0, select bank1
  9976  01AF  02D7               	subwf	sprintf@width^(0+128),f
  9977  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  9978  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  9979  01B2  0866               	movf	??_sprintf+3,w
  9980  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  9981  01B4  1303               	bcf	3,6	;RP1=0, select bank1
  9982  01B5  1C03               	skipc
  9983  01B6  03D8               	decf	(sprintf@width+1)^(0+128),f
  9984  01B7  02D8               	subwf	(sprintf@width+1)^(0+128),f
  9985                           
  9986                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1169:     if(
  9987  01B8  0867               	movf	sprintf@prec^(0+128),w
  9988  01B9  0468               	iorwf	(sprintf@prec+1)^(0+128),w
  9989  01BA  1903               	btfsc	3,2
  9990  01BB  29BD               	goto	u5701
  9991  01BC  29BE               	goto	u5700
  9992  01BD                     u5701:
  9993  01BD  29C4               	goto	l4030
  9994  01BE                     u5700:
  9995  01BE                     l4028:
  9996                           
  9997                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1174:      width-
      +                          -;
  9998  01BE  30FF               	movlw	255
  9999  01BF  07D7               	addwf	sprintf@width^(0+128),f
 10000  01C0  1803               	skipnc
 10001  01C1  0AD8               	incf	(sprintf@width+1)^(0+128),f
 10002  01C2  30FF               	movlw	255
 10003  01C3  07D8               	addwf	(sprintf@width+1)^(0+128),f
 10004  01C4                     l4030:
 10005                           
 10006                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1175:     if(flag
      +                           & 0x03)
 10007  01C4  3003               	movlw	3
 10008  01C5  0555               	andwf	sprintf@flag^(0+128),w
 10009  01C6  1283               	bcf	3,5	;RP0=0, select bank0
 10010  01C7  1303               	bcf	3,6	;RP1=0, select bank0
 10011  01C8  00E3               	movwf	??_sprintf
 10012  01C9  3000               	movlw	0
 10013  01CA  1683               	bsf	3,5	;RP0=1, select bank1
 10014  01CB  1303               	bcf	3,6	;RP1=0, select bank1
 10015  01CC  0556               	andwf	(sprintf@flag+1)^(0+128),w
 10016  01CD  1283               	bcf	3,5	;RP0=0, select bank0
 10017  01CE  1303               	bcf	3,6	;RP1=0, select bank0
 10018  01CF  00E4               	movwf	??_sprintf+1
 10019  01D0  0863               	movf	??_sprintf,w
 10020  01D1  0464               	iorwf	??_sprintf+1,w
 10021  01D2  1903               	btfsc	3,2
 10022  01D3  29D5               	goto	u5711
 10023  01D4  29D6               	goto	u5710
 10024  01D5                     u5711:
 10025  01D5  29F3               	goto	l4040
 10026  01D6                     u5710:
 10027  01D6                     l4032:
 10028                           
 10029                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1176:      width-
      +                          -;
 10030  01D6  30FF               	movlw	255
 10031  01D7  1683               	bsf	3,5	;RP0=1, select bank1
 10032  01D8  1303               	bcf	3,6	;RP1=0, select bank1
 10033  01D9  07D7               	addwf	sprintf@width^(0+128),f
 10034  01DA  1803               	skipnc
 10035  01DB  0AD8               	incf	(sprintf@width+1)^(0+128),f
 10036  01DC  30FF               	movlw	255
 10037  01DD  07D8               	addwf	(sprintf@width+1)^(0+128),f
 10038  01DE  29F3               	goto	l4040
 10039  01DF                     l4034:
 10040                           
 10041                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1207:       ((*sp
      +                          ++ = (' ')));
 10042  01DF  3020               	movlw	32
 10043  01E0  1283               	bcf	3,5	;RP0=0, select bank0
 10044  01E1  1303               	bcf	3,6	;RP1=0, select bank0
 10045  01E2  00E3               	movwf	??_sprintf
 10046  01E3  1683               	bsf	3,5	;RP0=1, select bank1
 10047  01E4  1303               	bcf	3,6	;RP1=0, select bank1
 10048  01E5  0866               	movf	sprintf@sp^(0+128),w
 10049  01E6  0084               	movwf	4
 10050  01E7  1283               	bcf	3,5	;RP0=0, select bank0
 10051  01E8  1303               	bcf	3,6	;RP1=0, select bank0
 10052  01E9  0863               	movf	??_sprintf,w
 10053  01EA  1383               	bcf	3,7	;select IRP bank0
 10054  01EB  0080               	movwf	0
 10055  01EC                     l4036:
 10056  01EC  3001               	movlw	1
 10057  01ED  00E3               	movwf	??_sprintf
 10058  01EE  0863               	movf	??_sprintf,w
 10059  01EF  1683               	bsf	3,5	;RP0=1, select bank1
 10060  01F0  1303               	bcf	3,6	;RP1=0, select bank1
 10061  01F1  07E6               	addwf	sprintf@sp^(0+128),f
 10062  01F2  29D6               	goto	l4032
 10063  01F3                     l4040:
 10064                           
 10065                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1206:      while(
      +                          width > 0) {
 10066  01F3  1683               	bsf	3,5	;RP0=1, select bank1
 10067  01F4  1303               	bcf	3,6	;RP1=0, select bank1
 10068  01F5  0858               	movf	(sprintf@width+1)^(0+128),w
 10069  01F6  3A80               	xorlw	128
 10070  01F7  00FF               	movwf	btemp+1
 10071  01F8  3080               	movlw	128
 10072  01F9  027F               	subwf	btemp+1,w
 10073  01FA  1D03               	skipz
 10074  01FB  29FE               	goto	u5725
 10075  01FC  3001               	movlw	1
 10076  01FD  0257               	subwf	sprintf@width^(0+128),w
 10077  01FE                     u5725:
 10078  01FE  1803               	skipnc
 10079  01FF  2A01               	goto	u5721
 10080  0200  2A02               	goto	u5720
 10081  0201                     u5721:
 10082  0201  29DF               	goto	l4034
 10083  0202                     u5720:
 10084  0202                     l4042:
 10085                           
 10086                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1214:     if(flag
      +                           & 0x03)
 10087  0202  3003               	movlw	3
 10088  0203  1683               	bsf	3,5	;RP0=1, select bank1
 10089  0204  1303               	bcf	3,6	;RP1=0, select bank1
 10090  0205  0555               	andwf	sprintf@flag^(0+128),w
 10091  0206  1283               	bcf	3,5	;RP0=0, select bank0
 10092  0207  1303               	bcf	3,6	;RP1=0, select bank0
 10093  0208  00E3               	movwf	??_sprintf
 10094  0209  3000               	movlw	0
 10095  020A  1683               	bsf	3,5	;RP0=1, select bank1
 10096  020B  1303               	bcf	3,6	;RP1=0, select bank1
 10097  020C  0556               	andwf	(sprintf@flag+1)^(0+128),w
 10098  020D  1283               	bcf	3,5	;RP0=0, select bank0
 10099  020E  1303               	bcf	3,6	;RP1=0, select bank0
 10100  020F  00E4               	movwf	??_sprintf+1
 10101  0210  0863               	movf	??_sprintf,w
 10102  0211  0464               	iorwf	??_sprintf+1,w
 10103  0212  1903               	btfsc	3,2
 10104  0213  2A15               	goto	u5731
 10105  0214  2A16               	goto	u5730
 10106  0215                     u5731:
 10107  0215  2ABA               	goto	l431
 10108  0216                     u5730:
 10109  0216                     l4044:
 10110                           
 10111                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1216:      ((*sp+
      +                          + = ('-')));
 10112  0216  302D               	movlw	45
 10113  0217  00E3               	movwf	??_sprintf
 10114  0218  1683               	bsf	3,5	;RP0=1, select bank1
 10115  0219  1303               	bcf	3,6	;RP1=0, select bank1
 10116  021A  0866               	movf	sprintf@sp^(0+128),w
 10117  021B  0084               	movwf	4
 10118  021C  1283               	bcf	3,5	;RP0=0, select bank0
 10119  021D  1303               	bcf	3,6	;RP1=0, select bank0
 10120  021E  0863               	movf	??_sprintf,w
 10121  021F  1383               	bcf	3,7	;select IRP bank0
 10122  0220  0080               	movwf	0
 10123  0221                     l4046:
 10124  0221  3001               	movlw	1
 10125  0222  00E3               	movwf	??_sprintf
 10126  0223  0863               	movf	??_sprintf,w
 10127  0224  1683               	bsf	3,5	;RP0=1, select bank1
 10128  0225  1303               	bcf	3,6	;RP1=0, select bank1
 10129  0226  07E6               	addwf	sprintf@sp^(0+128),f
 10130  0227  2ABA               	goto	l431
 10131  0228                     l4048:
 10132                           
 10133                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1226:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1227:      tmpval.vd = 
      +                          val/dpowers[c];
 10134  0228  0869               	movf	sprintf@c^(0+128),w
 10135  0229  1283               	bcf	3,5	;RP0=0, select bank0
 10136  022A  1303               	bcf	3,6	;RP1=0, select bank0
 10137  022B  00E3               	movwf	??_sprintf
 10138  022C  3001               	movlw	1
 10139  022D                     u5745:
 10140  022D  1003               	clrc
 10141  022E  0DE3               	rlf	??_sprintf,f
 10142  022F  3EFF               	addlw	-1
 10143  0230  1D03               	skipz
 10144  0231  2A2D               	goto	u5745
 10145  0232  1003               	clrc
 10146  0233  0D63               	rlf	??_sprintf,w
 10147  0234  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10148  0235  0084               	movwf	4
 10149  0236  160A  118A  200A  120A  118A  	fcall	stringdir
 10150  023B  00F2               	movwf	___lldiv@divisor
 10151  023C  160A  118A  200A  120A  118A  	fcall	stringdir
 10152  0241  00F3               	movwf	___lldiv@divisor+1
 10153  0242  160A  118A  200A  120A  118A  	fcall	stringdir
 10154  0247  00F4               	movwf	___lldiv@divisor+2
 10155  0248  160A  118A  200A  120A  118A  	fcall	stringdir
 10156  024D  00F5               	movwf	___lldiv@divisor+3
 10157  024E  1683               	bsf	3,5	;RP0=1, select bank1
 10158  024F  1303               	bcf	3,6	;RP1=0, select bank1
 10159  0250  0860               	movf	(sprintf@val+3)^(0+128),w
 10160  0251  00F9               	movwf	___lldiv@dividend+3
 10161  0252  085F               	movf	(sprintf@val+2)^(0+128),w
 10162  0253  00F8               	movwf	___lldiv@dividend+2
 10163  0254  085E               	movf	(sprintf@val+1)^(0+128),w
 10164  0255  00F7               	movwf	___lldiv@dividend+1
 10165  0256  085D               	movf	sprintf@val^(0+128),w
 10166  0257  00F6               	movwf	___lldiv@dividend
 10167  0258  160A  118A  21ED  120A  118A  	fcall	___lldiv
 10168  025D  0875               	movf	?___lldiv+3,w
 10169  025E  1683               	bsf	3,5	;RP0=1, select bank1
 10170  025F  1303               	bcf	3,6	;RP1=0, select bank1
 10171  0260  00DC               	movwf	(sprintf@tmpval+3)^(0+128)
 10172  0261  0874               	movf	?___lldiv+2,w
 10173  0262  00DB               	movwf	(sprintf@tmpval+2)^(0+128)
 10174  0263  0873               	movf	?___lldiv+1,w
 10175  0264  00DA               	movwf	(sprintf@tmpval+1)^(0+128)
 10176  0265  0872               	movf	?___lldiv,w
 10177  0266  00D9               	movwf	sprintf@tmpval^(0+128)
 10178  0267                     l4050:
 10179                           
 10180                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1228:      tmpval
      +                          .vd %= 10;
 10181  0267  3000               	movlw	0
 10182  0268  1283               	bcf	3,5	;RP0=0, select bank0
 10183  0269  1303               	bcf	3,6	;RP1=0, select bank0
 10184  026A  00A9               	movwf	___llmod@divisor+3
 10185  026B  3000               	movlw	0
 10186  026C  00A8               	movwf	___llmod@divisor+2
 10187  026D  3000               	movlw	0
 10188  026E  00A7               	movwf	___llmod@divisor+1
 10189  026F  300A               	movlw	10
 10190  0270  00A6               	movwf	___llmod@divisor
 10191  0271  1683               	bsf	3,5	;RP0=1, select bank1
 10192  0272  1303               	bcf	3,6	;RP1=0, select bank1
 10193  0273  085C               	movf	(sprintf@tmpval+3)^(0+128),w
 10194  0274  1283               	bcf	3,5	;RP0=0, select bank0
 10195  0275  1303               	bcf	3,6	;RP1=0, select bank0
 10196  0276  00AD               	movwf	___llmod@dividend+3
 10197  0277  1683               	bsf	3,5	;RP0=1, select bank1
 10198  0278  1303               	bcf	3,6	;RP1=0, select bank1
 10199  0279  085B               	movf	(sprintf@tmpval+2)^(0+128),w
 10200  027A  1283               	bcf	3,5	;RP0=0, select bank0
 10201  027B  1303               	bcf	3,6	;RP1=0, select bank0
 10202  027C  00AC               	movwf	___llmod@dividend+2
 10203  027D  1683               	bsf	3,5	;RP0=1, select bank1
 10204  027E  1303               	bcf	3,6	;RP1=0, select bank1
 10205  027F  085A               	movf	(sprintf@tmpval+1)^(0+128),w
 10206  0280  1283               	bcf	3,5	;RP0=0, select bank0
 10207  0281  1303               	bcf	3,6	;RP1=0, select bank0
 10208  0282  00AB               	movwf	___llmod@dividend+1
 10209  0283  1683               	bsf	3,5	;RP0=1, select bank1
 10210  0284  1303               	bcf	3,6	;RP1=0, select bank1
 10211  0285  0859               	movf	sprintf@tmpval^(0+128),w
 10212  0286  1283               	bcf	3,5	;RP0=0, select bank0
 10213  0287  1303               	bcf	3,6	;RP1=0, select bank0
 10214  0288  00AA               	movwf	___llmod@dividend
 10215  0289  160A  118A  20E2  120A  118A  	fcall	___llmod
 10216  028E  1283               	bcf	3,5	;RP0=0, select bank0
 10217  028F  1303               	bcf	3,6	;RP1=0, select bank0
 10218  0290  0829               	movf	?___llmod+3,w
 10219  0291  1683               	bsf	3,5	;RP0=1, select bank1
 10220  0292  1303               	bcf	3,6	;RP1=0, select bank1
 10221  0293  00DC               	movwf	(sprintf@tmpval+3)^(0+128)
 10222  0294  1283               	bcf	3,5	;RP0=0, select bank0
 10223  0295  1303               	bcf	3,6	;RP1=0, select bank0
 10224  0296  0828               	movf	?___llmod+2,w
 10225  0297  1683               	bsf	3,5	;RP0=1, select bank1
 10226  0298  1303               	bcf	3,6	;RP1=0, select bank1
 10227  0299  00DB               	movwf	(sprintf@tmpval+2)^(0+128)
 10228  029A  1283               	bcf	3,5	;RP0=0, select bank0
 10229  029B  1303               	bcf	3,6	;RP1=0, select bank0
 10230  029C  0827               	movf	?___llmod+1,w
 10231  029D  1683               	bsf	3,5	;RP0=1, select bank1
 10232  029E  1303               	bcf	3,6	;RP1=0, select bank1
 10233  029F  00DA               	movwf	(sprintf@tmpval+1)^(0+128)
 10234  02A0  1283               	bcf	3,5	;RP0=0, select bank0
 10235  02A1  1303               	bcf	3,6	;RP1=0, select bank0
 10236  02A2  0826               	movf	?___llmod,w
 10237  02A3  1683               	bsf	3,5	;RP0=1, select bank1
 10238  02A4  1303               	bcf	3,6	;RP1=0, select bank1
 10239  02A5  00D9               	movwf	sprintf@tmpval^(0+128)
 10240  02A6                     l4052:
 10241                           
 10242                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1229:      ((*sp+
      +                          + = ('0' + tmpval.vd)));
 10243  02A6  0859               	movf	sprintf@tmpval^(0+128),w
 10244  02A7  3E30               	addlw	48
 10245  02A8  1283               	bcf	3,5	;RP0=0, select bank0
 10246  02A9  1303               	bcf	3,6	;RP1=0, select bank0
 10247  02AA  00E3               	movwf	??_sprintf
 10248  02AB  1683               	bsf	3,5	;RP0=1, select bank1
 10249  02AC  1303               	bcf	3,6	;RP1=0, select bank1
 10250  02AD  0866               	movf	sprintf@sp^(0+128),w
 10251  02AE  0084               	movwf	4
 10252  02AF  1283               	bcf	3,5	;RP0=0, select bank0
 10253  02B0  1303               	bcf	3,6	;RP1=0, select bank0
 10254  02B1  0863               	movf	??_sprintf,w
 10255  02B2  1383               	bcf	3,7	;select IRP bank0
 10256  02B3  0080               	movwf	0
 10257  02B4  3001               	movlw	1
 10258  02B5  00E3               	movwf	??_sprintf
 10259  02B6  0863               	movf	??_sprintf,w
 10260  02B7  1683               	bsf	3,5	;RP0=1, select bank1
 10261  02B8  1303               	bcf	3,6	;RP1=0, select bank1
 10262  02B9  07E6               	addwf	sprintf@sp^(0+128),f
 10263  02BA                     l431:	
 10264                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1230:     };C:\Pr
      +                          ogram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1232:    }
 10265                           
 10266                           
 10267                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1222:    while(c-
      +                          -) {
 10268  02BA  3001               	movlw	1
 10269  02BB  1683               	bsf	3,5	;RP0=1, select bank1
 10270  02BC  1303               	bcf	3,6	;RP1=0, select bank1
 10271  02BD  02E9               	subwf	sprintf@c^(0+128),f
 10272  02BE  0A69               	incf	sprintf@c^(0+128),w
 10273  02BF  1D03               	btfss	3,2
 10274  02C0  2AC2               	goto	u5751
 10275  02C1  2AC3               	goto	u5750
 10276  02C2                     u5751:
 10277  02C2  2A28               	goto	l4048
 10278  02C3                     u5750:
 10279  02C3  2ADD               	goto	l4060
 10280  02C4                     l4054:
 10281                           
 10282                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1234:     ((*sp++
      +                           = ('0')));
 10283  02C4  3030               	movlw	48
 10284  02C5  1283               	bcf	3,5	;RP0=0, select bank0
 10285  02C6  1303               	bcf	3,6	;RP1=0, select bank0
 10286  02C7  00E3               	movwf	??_sprintf
 10287  02C8  1683               	bsf	3,5	;RP0=1, select bank1
 10288  02C9  1303               	bcf	3,6	;RP1=0, select bank1
 10289  02CA  0866               	movf	sprintf@sp^(0+128),w
 10290  02CB  0084               	movwf	4
 10291  02CC  1283               	bcf	3,5	;RP0=0, select bank0
 10292  02CD  1303               	bcf	3,6	;RP1=0, select bank0
 10293  02CE  0863               	movf	??_sprintf,w
 10294  02CF  1383               	bcf	3,7	;select IRP bank0
 10295  02D0  0080               	movwf	0
 10296  02D1                     l4056:
 10297  02D1  3001               	movlw	1
 10298  02D2  00E3               	movwf	??_sprintf
 10299  02D3  0863               	movf	??_sprintf,w
 10300  02D4  1683               	bsf	3,5	;RP0=1, select bank1
 10301  02D5  1303               	bcf	3,6	;RP1=0, select bank1
 10302  02D6  07E6               	addwf	sprintf@sp^(0+128),f
 10303  02D7                     l4058:
 10304                           
 10305                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1235:     eexp--;
 10306  02D7  30FF               	movlw	255
 10307  02D8  07E1               	addwf	sprintf@eexp^(0+128),f
 10308  02D9  1803               	skipnc
 10309  02DA  0AE2               	incf	(sprintf@eexp+1)^(0+128),f
 10310  02DB  30FF               	movlw	255
 10311  02DC  07E2               	addwf	(sprintf@eexp+1)^(0+128),f
 10312  02DD                     l4060:
 10313                           
 10314                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1233:    while(ee
      +                          xp > 0) {
 10315  02DD  0862               	movf	(sprintf@eexp+1)^(0+128),w
 10316  02DE  3A80               	xorlw	128
 10317  02DF  00FF               	movwf	btemp+1
 10318  02E0  3080               	movlw	128
 10319  02E1  027F               	subwf	btemp+1,w
 10320  02E2  1D03               	skipz
 10321  02E3  2AE6               	goto	u5765
 10322  02E4  3001               	movlw	1
 10323  02E5  0261               	subwf	sprintf@eexp^(0+128),w
 10324  02E6                     u5765:
 10325  02E6  1803               	skipnc
 10326  02E7  2AE9               	goto	u5761
 10327  02E8  2AEA               	goto	u5760
 10328  02E9                     u5761:
 10329  02E9  2AC4               	goto	l4054
 10330  02EA                     u5760:
 10331  02EA                     l4062:
 10332                           
 10333                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1237:    if(prec 
      +                          > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 10334  02EA  1683               	bsf	3,5	;RP0=1, select bank1
 10335  02EB  1303               	bcf	3,6	;RP1=0, select bank1
 10336  02EC  0868               	movf	(sprintf@prec+1)^(0+128),w
 10337  02ED  3A80               	xorlw	128
 10338  02EE  00FF               	movwf	btemp+1
 10339  02EF  3080               	movlw	128
 10340  02F0  027F               	subwf	btemp+1,w
 10341  02F1  1D03               	skipz
 10342  02F2  2AF5               	goto	u5775
 10343  02F3  3009               	movlw	9
 10344  02F4  0267               	subwf	sprintf@prec^(0+128),w
 10345  02F5                     u5775:
 10346  02F5  1C03               	skipc
 10347  02F6  2AF8               	goto	u5771
 10348  02F7  2AF9               	goto	u5770
 10349  02F8                     u5771:
 10350  02F8  2B02               	goto	l4066
 10351  02F9                     u5770:
 10352  02F9                     l4064:
 10353                           
 10354                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1238:     c = (si
      +                          zeof dpowers/sizeof dpowers[0])-2;
 10355  02F9  3008               	movlw	8
 10356  02FA  1283               	bcf	3,5	;RP0=0, select bank0
 10357  02FB  1303               	bcf	3,6	;RP1=0, select bank0
 10358  02FC  00E3               	movwf	??_sprintf
 10359  02FD  0863               	movf	??_sprintf,w
 10360  02FE  1683               	bsf	3,5	;RP0=1, select bank1
 10361  02FF  1303               	bcf	3,6	;RP1=0, select bank1
 10362  0300  00E9               	movwf	sprintf@c^(0+128)
 10363  0301  2B0C               	goto	l438
 10364  0302                     l4066:
 10365                           
 10366                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1240:     c = (ch
      +                          ar)prec;
 10367  0302  1683               	bsf	3,5	;RP0=1, select bank1
 10368  0303  1303               	bcf	3,6	;RP1=0, select bank1
 10369  0304  0867               	movf	sprintf@prec^(0+128),w
 10370  0305  1283               	bcf	3,5	;RP0=0, select bank0
 10371  0306  1303               	bcf	3,6	;RP1=0, select bank0
 10372  0307  00E3               	movwf	??_sprintf
 10373  0308  0863               	movf	??_sprintf,w
 10374  0309  1683               	bsf	3,5	;RP0=1, select bank1
 10375  030A  1303               	bcf	3,6	;RP1=0, select bank1
 10376  030B  00E9               	movwf	sprintf@c^(0+128)
 10377  030C                     l438:
 10378                           
 10379                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1241:    prec -= 
      +                          (int)c;
 10380  030C  0869               	movf	sprintf@c^(0+128),w
 10381  030D  1283               	bcf	3,5	;RP0=0, select bank0
 10382  030E  1303               	bcf	3,6	;RP1=0, select bank0
 10383  030F  00E3               	movwf	??_sprintf
 10384  0310  01E4               	clrf	??_sprintf+1
 10385  0311  0863               	movf	??_sprintf,w
 10386  0312  1683               	bsf	3,5	;RP0=1, select bank1
 10387  0313  1303               	bcf	3,6	;RP1=0, select bank1
 10388  0314  02E7               	subwf	sprintf@prec^(0+128),f
 10389  0315  1283               	bcf	3,5	;RP0=0, select bank0
 10390  0316  1303               	bcf	3,6	;RP1=0, select bank0
 10391  0317  0864               	movf	??_sprintf+1,w
 10392  0318  1683               	bsf	3,5	;RP0=1, select bank1
 10393  0319  1303               	bcf	3,6	;RP1=0, select bank1
 10394  031A  1C03               	skipc
 10395  031B  03E8               	decf	(sprintf@prec+1)^(0+128),f
 10396  031C  02E8               	subwf	(sprintf@prec+1)^(0+128),f
 10397  031D                     l4068:
 10398                           
 10399                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1245:    if(c)
 10400  031D  0869               	movf	sprintf@c^(0+128),w
 10401  031E  1903               	btfsc	3,2
 10402  031F  2B21               	goto	u5781
 10403  0320  2B22               	goto	u5780
 10404  0321                     u5781:
 10405  0321  2B35               	goto	l4074
 10406  0322                     u5780:
 10407  0322                     l4070:
 10408                           
 10409                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1247:     ((*sp++
      +                           = ('.')));
 10410  0322  302E               	movlw	46
 10411  0323  1283               	bcf	3,5	;RP0=0, select bank0
 10412  0324  1303               	bcf	3,6	;RP1=0, select bank0
 10413  0325  00E3               	movwf	??_sprintf
 10414  0326  1683               	bsf	3,5	;RP0=1, select bank1
 10415  0327  1303               	bcf	3,6	;RP1=0, select bank1
 10416  0328  0866               	movf	sprintf@sp^(0+128),w
 10417  0329  0084               	movwf	4
 10418  032A  1283               	bcf	3,5	;RP0=0, select bank0
 10419  032B  1303               	bcf	3,6	;RP1=0, select bank0
 10420  032C  0863               	movf	??_sprintf,w
 10421  032D  1383               	bcf	3,7	;select IRP bank0
 10422  032E  0080               	movwf	0
 10423  032F                     l4072:
 10424  032F  3001               	movlw	1
 10425  0330  00E3               	movwf	??_sprintf
 10426  0331  0863               	movf	??_sprintf,w
 10427  0332  1683               	bsf	3,5	;RP0=1, select bank1
 10428  0333  1303               	bcf	3,6	;RP1=0, select bank1
 10429  0334  07E6               	addwf	sprintf@sp^(0+128),f
 10430  0335                     l4074:
 10431                           
 10432                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
 10433  0335  0869               	movf	sprintf@c^(0+128),w
 10434  0336  120A  158A  225D  120A  118A  	fcall	_scale
 10435  033B  1283               	bcf	3,5	;RP0=0, select bank0
 10436  033C  1303               	bcf	3,6	;RP1=0, select bank0
 10437  033D  083C               	movf	?_scale,w
 10438  033E  1683               	bsf	3,5	;RP0=1, select bank1
 10439  033F  1303               	bcf	3,6	;RP1=0, select bank1
 10440  0340  00D1               	movwf	_sprintf$1231^(0+128)
 10441  0341  1283               	bcf	3,5	;RP0=0, select bank0
 10442  0342  1303               	bcf	3,6	;RP1=0, select bank0
 10443  0343  083D               	movf	?_scale+1,w
 10444  0344  1683               	bsf	3,5	;RP0=1, select bank1
 10445  0345  1303               	bcf	3,6	;RP1=0, select bank1
 10446  0346  00D2               	movwf	(_sprintf$1231+1)^(0+128)
 10447  0347  1283               	bcf	3,5	;RP0=0, select bank0
 10448  0348  1303               	bcf	3,6	;RP1=0, select bank0
 10449  0349  083E               	movf	?_scale+2,w
 10450  034A  1683               	bsf	3,5	;RP0=1, select bank1
 10451  034B  1303               	bcf	3,6	;RP1=0, select bank1
 10452  034C  00D3               	movwf	(_sprintf$1231+2)^(0+128)
 10453  034D                     l4076:
 10454                           
 10455                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
 10456  034D  0851               	movf	_sprintf$1231^(0+128),w
 10457  034E  1283               	bcf	3,5	;RP0=0, select bank0
 10458  034F  1303               	bcf	3,6	;RP1=0, select bank0
 10459  0350  00AF               	movwf	___ftmul@f2
 10460  0351  1683               	bsf	3,5	;RP0=1, select bank1
 10461  0352  1303               	bcf	3,6	;RP1=0, select bank1
 10462  0353  0852               	movf	(_sprintf$1231+1)^(0+128),w
 10463  0354  1283               	bcf	3,5	;RP0=0, select bank0
 10464  0355  1303               	bcf	3,6	;RP1=0, select bank0
 10465  0356  00B0               	movwf	___ftmul@f2+1
 10466  0357  1683               	bsf	3,5	;RP0=1, select bank1
 10467  0358  1303               	bcf	3,6	;RP1=0, select bank1
 10468  0359  0853               	movf	(_sprintf$1231+2)^(0+128),w
 10469  035A  1283               	bcf	3,5	;RP0=0, select bank0
 10470  035B  1303               	bcf	3,6	;RP1=0, select bank0
 10471  035C  00B1               	movwf	___ftmul@f2+2
 10472  035D  1683               	bsf	3,5	;RP0=1, select bank1
 10473  035E  1303               	bcf	3,6	;RP1=0, select bank1
 10474  035F  0863               	movf	sprintf@fval^(0+128),w
 10475  0360  1283               	bcf	3,5	;RP0=0, select bank0
 10476  0361  1303               	bcf	3,6	;RP1=0, select bank0
 10477  0362  00AC               	movwf	___ftmul@f1
 10478  0363  1683               	bsf	3,5	;RP0=1, select bank1
 10479  0364  1303               	bcf	3,6	;RP1=0, select bank1
 10480  0365  0864               	movf	(sprintf@fval+1)^(0+128),w
 10481  0366  1283               	bcf	3,5	;RP0=0, select bank0
 10482  0367  1303               	bcf	3,6	;RP1=0, select bank0
 10483  0368  00AD               	movwf	___ftmul@f1+1
 10484  0369  1683               	bsf	3,5	;RP0=1, select bank1
 10485  036A  1303               	bcf	3,6	;RP1=0, select bank1
 10486  036B  0865               	movf	(sprintf@fval+2)^(0+128),w
 10487  036C  1283               	bcf	3,5	;RP0=0, select bank0
 10488  036D  1303               	bcf	3,6	;RP1=0, select bank0
 10489  036E  00AE               	movwf	___ftmul@f1+2
 10490  036F  160A  118A  24B9  120A  118A  	fcall	___ftmul
 10491  0374  1283               	bcf	3,5	;RP0=0, select bank0
 10492  0375  1303               	bcf	3,6	;RP1=0, select bank0
 10493  0376  082C               	movf	?___ftmul,w
 10494  0377  00C5               	movwf	___fttol@f1
 10495  0378  082D               	movf	?___ftmul+1,w
 10496  0379  00C6               	movwf	___fttol@f1+1
 10497  037A  082E               	movf	?___ftmul+2,w
 10498  037B  00C7               	movwf	___fttol@f1+2
 10499  037C  120A  158A  2028  120A  118A  	fcall	___fttol
 10500  0381  1283               	bcf	3,5	;RP0=0, select bank0
 10501  0382  1303               	bcf	3,6	;RP1=0, select bank0
 10502  0383  0848               	movf	?___fttol+3,w
 10503  0384  1683               	bsf	3,5	;RP0=1, select bank1
 10504  0385  1303               	bcf	3,6	;RP1=0, select bank1
 10505  0386  00E0               	movwf	(sprintf@val+3)^(0+128)
 10506  0387  1283               	bcf	3,5	;RP0=0, select bank0
 10507  0388  1303               	bcf	3,6	;RP1=0, select bank0
 10508  0389  0847               	movf	?___fttol+2,w
 10509  038A  1683               	bsf	3,5	;RP0=1, select bank1
 10510  038B  1303               	bcf	3,6	;RP1=0, select bank1
 10511  038C  00DF               	movwf	(sprintf@val+2)^(0+128)
 10512  038D  1283               	bcf	3,5	;RP0=0, select bank0
 10513  038E  1303               	bcf	3,6	;RP1=0, select bank0
 10514  038F  0846               	movf	?___fttol+1,w
 10515  0390  1683               	bsf	3,5	;RP0=1, select bank1
 10516  0391  1303               	bcf	3,6	;RP1=0, select bank1
 10517  0392  00DE               	movwf	(sprintf@val+1)^(0+128)
 10518  0393  1283               	bcf	3,5	;RP0=0, select bank0
 10519  0394  1303               	bcf	3,6	;RP1=0, select bank0
 10520  0395  0845               	movf	?___fttol,w
 10521  0396  1683               	bsf	3,5	;RP0=1, select bank1
 10522  0397  1303               	bcf	3,6	;RP1=0, select bank1
 10523  0398  00DD               	movwf	sprintf@val^(0+128)
 10524                           
 10525                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
 10526  0399  2C87               	goto	l4086
 10527  039A                     l4078:
 10528                           
 10529                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1255:     tmpval.
      +                          vd = val/dpowers[c];
 10530  039A  0869               	movf	sprintf@c^(0+128),w
 10531  039B  1283               	bcf	3,5	;RP0=0, select bank0
 10532  039C  1303               	bcf	3,6	;RP1=0, select bank0
 10533  039D  00E3               	movwf	??_sprintf
 10534  039E  3001               	movlw	1
 10535  039F                     u5795:
 10536  039F  1003               	clrc
 10537  03A0  0DE3               	rlf	??_sprintf,f
 10538  03A1  3EFF               	addlw	-1
 10539  03A2  1D03               	skipz
 10540  03A3  2B9F               	goto	u5795
 10541  03A4  1003               	clrc
 10542  03A5  0D63               	rlf	??_sprintf,w
 10543  03A6  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10544  03A7  0084               	movwf	4
 10545  03A8  160A  118A  200A  120A  118A  	fcall	stringdir
 10546  03AD  00F2               	movwf	___lldiv@divisor
 10547  03AE  160A  118A  200A  120A  118A  	fcall	stringdir
 10548  03B3  00F3               	movwf	___lldiv@divisor+1
 10549  03B4  160A  118A  200A  120A  118A  	fcall	stringdir
 10550  03B9  00F4               	movwf	___lldiv@divisor+2
 10551  03BA  160A  118A  200A  120A  118A  	fcall	stringdir
 10552  03BF  00F5               	movwf	___lldiv@divisor+3
 10553  03C0  1683               	bsf	3,5	;RP0=1, select bank1
 10554  03C1  1303               	bcf	3,6	;RP1=0, select bank1
 10555  03C2  0860               	movf	(sprintf@val+3)^(0+128),w
 10556  03C3  00F9               	movwf	___lldiv@dividend+3
 10557  03C4  085F               	movf	(sprintf@val+2)^(0+128),w
 10558  03C5  00F8               	movwf	___lldiv@dividend+2
 10559  03C6  085E               	movf	(sprintf@val+1)^(0+128),w
 10560  03C7  00F7               	movwf	___lldiv@dividend+1
 10561  03C8  085D               	movf	sprintf@val^(0+128),w
 10562  03C9  00F6               	movwf	___lldiv@dividend
 10563  03CA  160A  118A  21ED  120A  118A  	fcall	___lldiv
 10564  03CF  0875               	movf	?___lldiv+3,w
 10565  03D0  1683               	bsf	3,5	;RP0=1, select bank1
 10566  03D1  1303               	bcf	3,6	;RP1=0, select bank1
 10567  03D2  00DC               	movwf	(sprintf@tmpval+3)^(0+128)
 10568  03D3  0874               	movf	?___lldiv+2,w
 10569  03D4  00DB               	movwf	(sprintf@tmpval+2)^(0+128)
 10570  03D5  0873               	movf	?___lldiv+1,w
 10571  03D6  00DA               	movwf	(sprintf@tmpval+1)^(0+128)
 10572  03D7  0872               	movf	?___lldiv,w
 10573  03D8  00D9               	movwf	sprintf@tmpval^(0+128)
 10574  03D9                     l4080:
 10575                           
 10576                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1256:     tmpval.
      +                          vd %= 10;
 10577  03D9  3000               	movlw	0
 10578  03DA  1283               	bcf	3,5	;RP0=0, select bank0
 10579  03DB  1303               	bcf	3,6	;RP1=0, select bank0
 10580  03DC  00A9               	movwf	___llmod@divisor+3
 10581  03DD  3000               	movlw	0
 10582  03DE  00A8               	movwf	___llmod@divisor+2
 10583  03DF  3000               	movlw	0
 10584  03E0  00A7               	movwf	___llmod@divisor+1
 10585  03E1  300A               	movlw	10
 10586  03E2  00A6               	movwf	___llmod@divisor
 10587  03E3  1683               	bsf	3,5	;RP0=1, select bank1
 10588  03E4  1303               	bcf	3,6	;RP1=0, select bank1
 10589  03E5  085C               	movf	(sprintf@tmpval+3)^(0+128),w
 10590  03E6  1283               	bcf	3,5	;RP0=0, select bank0
 10591  03E7  1303               	bcf	3,6	;RP1=0, select bank0
 10592  03E8  00AD               	movwf	___llmod@dividend+3
 10593  03E9  1683               	bsf	3,5	;RP0=1, select bank1
 10594  03EA  1303               	bcf	3,6	;RP1=0, select bank1
 10595  03EB  085B               	movf	(sprintf@tmpval+2)^(0+128),w
 10596  03EC  1283               	bcf	3,5	;RP0=0, select bank0
 10597  03ED  1303               	bcf	3,6	;RP1=0, select bank0
 10598  03EE  00AC               	movwf	___llmod@dividend+2
 10599  03EF  1683               	bsf	3,5	;RP0=1, select bank1
 10600  03F0  1303               	bcf	3,6	;RP1=0, select bank1
 10601  03F1  085A               	movf	(sprintf@tmpval+1)^(0+128),w
 10602  03F2  1283               	bcf	3,5	;RP0=0, select bank0
 10603  03F3  1303               	bcf	3,6	;RP1=0, select bank0
 10604  03F4  00AB               	movwf	___llmod@dividend+1
 10605  03F5  1683               	bsf	3,5	;RP0=1, select bank1
 10606  03F6  1303               	bcf	3,6	;RP1=0, select bank1
 10607  03F7  0859               	movf	sprintf@tmpval^(0+128),w
 10608  03F8  1283               	bcf	3,5	;RP0=0, select bank0
 10609  03F9  1303               	bcf	3,6	;RP1=0, select bank0
 10610  03FA  00AA               	movwf	___llmod@dividend
 10611  03FB  160A  118A  20E2  120A  118A  	fcall	___llmod
 10612  0400  1283               	bcf	3,5	;RP0=0, select bank0
 10613  0401  1303               	bcf	3,6	;RP1=0, select bank0
 10614  0402  0829               	movf	?___llmod+3,w
 10615  0403  1683               	bsf	3,5	;RP0=1, select bank1
 10616  0404  1303               	bcf	3,6	;RP1=0, select bank1
 10617  0405  00DC               	movwf	(sprintf@tmpval+3)^(0+128)
 10618  0406  1283               	bcf	3,5	;RP0=0, select bank0
 10619  0407  1303               	bcf	3,6	;RP1=0, select bank0
 10620  0408  0828               	movf	?___llmod+2,w
 10621  0409  1683               	bsf	3,5	;RP0=1, select bank1
 10622  040A  1303               	bcf	3,6	;RP1=0, select bank1
 10623  040B  00DB               	movwf	(sprintf@tmpval+2)^(0+128)
 10624  040C  1283               	bcf	3,5	;RP0=0, select bank0
 10625  040D  1303               	bcf	3,6	;RP1=0, select bank0
 10626  040E  0827               	movf	?___llmod+1,w
 10627  040F  1683               	bsf	3,5	;RP0=1, select bank1
 10628  0410  1303               	bcf	3,6	;RP1=0, select bank1
 10629  0411  00DA               	movwf	(sprintf@tmpval+1)^(0+128)
 10630  0412  1283               	bcf	3,5	;RP0=0, select bank0
 10631  0413  1303               	bcf	3,6	;RP1=0, select bank0
 10632  0414  0826               	movf	?___llmod,w
 10633  0415  1683               	bsf	3,5	;RP0=1, select bank1
 10634  0416  1303               	bcf	3,6	;RP1=0, select bank1
 10635  0417  00D9               	movwf	sprintf@tmpval^(0+128)
 10636  0418                     l4082:
 10637                           
 10638                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1257:     ((*sp++
      +                           = ('0' + tmpval.vd)));
 10639  0418  0859               	movf	sprintf@tmpval^(0+128),w
 10640  0419  3E30               	addlw	48
 10641  041A  1283               	bcf	3,5	;RP0=0, select bank0
 10642  041B  1303               	bcf	3,6	;RP1=0, select bank0
 10643  041C  00E3               	movwf	??_sprintf
 10644  041D  1683               	bsf	3,5	;RP0=1, select bank1
 10645  041E  1303               	bcf	3,6	;RP1=0, select bank1
 10646  041F  0866               	movf	sprintf@sp^(0+128),w
 10647  0420  0084               	movwf	4
 10648  0421  1283               	bcf	3,5	;RP0=0, select bank0
 10649  0422  1303               	bcf	3,6	;RP1=0, select bank0
 10650  0423  0863               	movf	??_sprintf,w
 10651  0424  1383               	bcf	3,7	;select IRP bank0
 10652  0425  0080               	movwf	0
 10653  0426  3001               	movlw	1
 10654  0427  00E3               	movwf	??_sprintf
 10655  0428  0863               	movf	??_sprintf,w
 10656  0429  1683               	bsf	3,5	;RP0=1, select bank1
 10657  042A  1303               	bcf	3,6	;RP1=0, select bank1
 10658  042B  07E6               	addwf	sprintf@sp^(0+128),f
 10659  042C                     l4084:
 10660                           
 10661                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1258:     val %= 
      +                          dpowers[c];
 10662  042C  0869               	movf	sprintf@c^(0+128),w
 10663  042D  1283               	bcf	3,5	;RP0=0, select bank0
 10664  042E  1303               	bcf	3,6	;RP1=0, select bank0
 10665  042F  00E3               	movwf	??_sprintf
 10666  0430  3001               	movlw	1
 10667  0431                     u5805:
 10668  0431  1003               	clrc
 10669  0432  0DE3               	rlf	??_sprintf,f
 10670  0433  3EFF               	addlw	-1
 10671  0434  1D03               	skipz
 10672  0435  2C31               	goto	u5805
 10673  0436  1003               	clrc
 10674  0437  0D63               	rlf	??_sprintf,w
 10675  0438  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10676  0439  0084               	movwf	4
 10677  043A  160A  118A  200A  120A  118A  	fcall	stringdir
 10678  043F  00A6               	movwf	___llmod@divisor
 10679  0440  160A  118A  200A  120A  118A  	fcall	stringdir
 10680  0445  00A7               	movwf	___llmod@divisor+1
 10681  0446  160A  118A  200A  120A  118A  	fcall	stringdir
 10682  044B  00A8               	movwf	___llmod@divisor+2
 10683  044C  160A  118A  200A  120A  118A  	fcall	stringdir
 10684  0451  00A9               	movwf	___llmod@divisor+3
 10685  0452  1683               	bsf	3,5	;RP0=1, select bank1
 10686  0453  1303               	bcf	3,6	;RP1=0, select bank1
 10687  0454  0860               	movf	(sprintf@val+3)^(0+128),w
 10688  0455  1283               	bcf	3,5	;RP0=0, select bank0
 10689  0456  1303               	bcf	3,6	;RP1=0, select bank0
 10690  0457  00AD               	movwf	___llmod@dividend+3
 10691  0458  1683               	bsf	3,5	;RP0=1, select bank1
 10692  0459  1303               	bcf	3,6	;RP1=0, select bank1
 10693  045A  085F               	movf	(sprintf@val+2)^(0+128),w
 10694  045B  1283               	bcf	3,5	;RP0=0, select bank0
 10695  045C  1303               	bcf	3,6	;RP1=0, select bank0
 10696  045D  00AC               	movwf	___llmod@dividend+2
 10697  045E  1683               	bsf	3,5	;RP0=1, select bank1
 10698  045F  1303               	bcf	3,6	;RP1=0, select bank1
 10699  0460  085E               	movf	(sprintf@val+1)^(0+128),w
 10700  0461  1283               	bcf	3,5	;RP0=0, select bank0
 10701  0462  1303               	bcf	3,6	;RP1=0, select bank0
 10702  0463  00AB               	movwf	___llmod@dividend+1
 10703  0464  1683               	bsf	3,5	;RP0=1, select bank1
 10704  0465  1303               	bcf	3,6	;RP1=0, select bank1
 10705  0466  085D               	movf	sprintf@val^(0+128),w
 10706  0467  1283               	bcf	3,5	;RP0=0, select bank0
 10707  0468  1303               	bcf	3,6	;RP1=0, select bank0
 10708  0469  00AA               	movwf	___llmod@dividend
 10709  046A  160A  118A  20E2  120A  118A  	fcall	___llmod
 10710  046F  1283               	bcf	3,5	;RP0=0, select bank0
 10711  0470  1303               	bcf	3,6	;RP1=0, select bank0
 10712  0471  0829               	movf	?___llmod+3,w
 10713  0472  1683               	bsf	3,5	;RP0=1, select bank1
 10714  0473  1303               	bcf	3,6	;RP1=0, select bank1
 10715  0474  00E0               	movwf	(sprintf@val+3)^(0+128)
 10716  0475  1283               	bcf	3,5	;RP0=0, select bank0
 10717  0476  1303               	bcf	3,6	;RP1=0, select bank0
 10718  0477  0828               	movf	?___llmod+2,w
 10719  0478  1683               	bsf	3,5	;RP0=1, select bank1
 10720  0479  1303               	bcf	3,6	;RP1=0, select bank1
 10721  047A  00DF               	movwf	(sprintf@val+2)^(0+128)
 10722  047B  1283               	bcf	3,5	;RP0=0, select bank0
 10723  047C  1303               	bcf	3,6	;RP1=0, select bank0
 10724  047D  0827               	movf	?___llmod+1,w
 10725  047E  1683               	bsf	3,5	;RP0=1, select bank1
 10726  047F  1303               	bcf	3,6	;RP1=0, select bank1
 10727  0480  00DE               	movwf	(sprintf@val+1)^(0+128)
 10728  0481  1283               	bcf	3,5	;RP0=0, select bank0
 10729  0482  1303               	bcf	3,6	;RP1=0, select bank0
 10730  0483  0826               	movf	?___llmod,w
 10731  0484  1683               	bsf	3,5	;RP0=1, select bank1
 10732  0485  1303               	bcf	3,6	;RP1=0, select bank1
 10733  0486  00DD               	movwf	sprintf@val^(0+128)
 10734  0487                     l4086:
 10735                           
 10736                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
 10737  0487  3001               	movlw	1
 10738  0488  02E9               	subwf	sprintf@c^(0+128),f
 10739  0489  0A69               	incf	sprintf@c^(0+128),w
 10740  048A  1D03               	btfss	3,2
 10741  048B  2C8D               	goto	u5811
 10742  048C  2C8E               	goto	u5810
 10743  048D                     u5811:
 10744  048D  2B9A               	goto	l4078
 10745  048E                     u5810:
 10746  048E  2CA8               	goto	l4094
 10747  048F                     l4088:
 10748                           
 10749                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1262:     ((*sp++
      +                           = ('0')));
 10750  048F  3030               	movlw	48
 10751  0490  1283               	bcf	3,5	;RP0=0, select bank0
 10752  0491  1303               	bcf	3,6	;RP1=0, select bank0
 10753  0492  00E3               	movwf	??_sprintf
 10754  0493  1683               	bsf	3,5	;RP0=1, select bank1
 10755  0494  1303               	bcf	3,6	;RP1=0, select bank1
 10756  0495  0866               	movf	sprintf@sp^(0+128),w
 10757  0496  0084               	movwf	4
 10758  0497  1283               	bcf	3,5	;RP0=0, select bank0
 10759  0498  1303               	bcf	3,6	;RP1=0, select bank0
 10760  0499  0863               	movf	??_sprintf,w
 10761  049A  1383               	bcf	3,7	;select IRP bank0
 10762  049B  0080               	movwf	0
 10763  049C                     l4090:
 10764  049C  3001               	movlw	1
 10765  049D  00E3               	movwf	??_sprintf
 10766  049E  0863               	movf	??_sprintf,w
 10767  049F  1683               	bsf	3,5	;RP0=1, select bank1
 10768  04A0  1303               	bcf	3,6	;RP1=0, select bank1
 10769  04A1  07E6               	addwf	sprintf@sp^(0+128),f
 10770  04A2                     l4092:
 10771                           
 10772                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1263:     prec--;
 10773  04A2  30FF               	movlw	255
 10774  04A3  07E7               	addwf	sprintf@prec^(0+128),f
 10775  04A4  1803               	skipnc
 10776  04A5  0AE8               	incf	(sprintf@prec+1)^(0+128),f
 10777  04A6  30FF               	movlw	255
 10778  04A7  07E8               	addwf	(sprintf@prec+1)^(0+128),f
 10779  04A8                     l4094:
 10780                           
 10781                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1261:    while(pr
      +                          ec) {
 10782  04A8  0867               	movf	sprintf@prec^(0+128),w
 10783  04A9  0468               	iorwf	(sprintf@prec+1)^(0+128),w
 10784  04AA  1D03               	btfss	3,2
 10785  04AB  2CAD               	goto	u5821
 10786  04AC  2CAE               	goto	u5820
 10787  04AD                     u5821:
 10788  04AD  2C8F               	goto	l4088
 10789  04AE                     u5820:
 10790  04AE  2EB8               	goto	l4174
 10791  04AF                     l4096:
 10792                           
 10793                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           long)(*(int *)__va_arg((*(int **)ap), (int)0));
 10794  04AF  1683               	bsf	3,5	;RP0=1, select bank1
 10795  04B0  1303               	bcf	3,6	;RP1=0, select bank1
 10796  04B1  0854               	movf	sprintf@ap^(0+128),w
 10797  04B2  0084               	movwf	4
 10798  04B3  1383               	bcf	3,7	;select IRP bank0
 10799  04B4  0800               	movf	0,w
 10800  04B5  1283               	bcf	3,5	;RP0=0, select bank0
 10801  04B6  1303               	bcf	3,6	;RP1=0, select bank0
 10802  04B7  00E3               	movwf	??_sprintf
 10803  04B8  0A84               	incf	4,f
 10804  04B9  0800               	movf	0,w
 10805  04BA  00E4               	movwf	??_sprintf+1
 10806  04BB  0863               	movf	??_sprintf,w
 10807  04BC  1683               	bsf	3,5	;RP0=1, select bank1
 10808  04BD  1303               	bcf	3,6	;RP1=0, select bank1
 10809  04BE  00DD               	movwf	sprintf@val^(0+128)
 10810  04BF  1283               	bcf	3,5	;RP0=0, select bank0
 10811  04C0  1303               	bcf	3,6	;RP1=0, select bank0
 10812  04C1  0864               	movf	??_sprintf+1,w
 10813  04C2  1683               	bsf	3,5	;RP0=1, select bank1
 10814  04C3  1303               	bcf	3,6	;RP1=0, select bank1
 10815  04C4  00DE               	movwf	(sprintf@val+1)^(0+128)
 10816  04C5  3000               	movlw	0
 10817  04C6  1BDE               	btfsc	(sprintf@val+1)^(0+128),7
 10818  04C7  30FF               	movlw	255
 10819  04C8  00DF               	movwf	(sprintf@val+2)^(0+128)
 10820  04C9  00E0               	movwf	(sprintf@val+3)^(0+128)
 10821  04CA                     l4098:
 10822  04CA  3002               	movlw	2
 10823  04CB  1283               	bcf	3,5	;RP0=0, select bank0
 10824  04CC  1303               	bcf	3,6	;RP1=0, select bank0
 10825  04CD  00E3               	movwf	??_sprintf
 10826  04CE  0863               	movf	??_sprintf,w
 10827  04CF  1683               	bsf	3,5	;RP0=1, select bank1
 10828  04D0  1303               	bcf	3,6	;RP1=0, select bank1
 10829  04D1  07D4               	addwf	sprintf@ap^(0+128),f
 10830  04D2                     l4100:
 10831                           
 10832                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((long
      +                          )val < 0) {
 10833  04D2  1FE0               	btfss	(sprintf@val+3)^(0+128),7
 10834  04D3  2CD5               	goto	u5831
 10835  04D4  2CD6               	goto	u5830
 10836  04D5                     u5831:
 10837  04D5  2CE5               	goto	l4106
 10838  04D6                     u5830:
 10839  04D6                     l4102:
 10840                           
 10841                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
 10842  04D6  3003               	movlw	3
 10843  04D7  04D5               	iorwf	sprintf@flag^(0+128),f
 10844  04D8  3000               	movlw	0
 10845  04D9  04D6               	iorwf	(sprintf@flag+1)^(0+128),f
 10846  04DA                     l4104:
 10847                           
 10848                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
 10849  04DA  09DD               	comf	sprintf@val^(0+128),f
 10850  04DB  09DE               	comf	(sprintf@val+1)^(0+128),f
 10851  04DC  09DF               	comf	(sprintf@val+2)^(0+128),f
 10852  04DD  09E0               	comf	(sprintf@val+3)^(0+128),f
 10853  04DE  0ADD               	incf	sprintf@val^(0+128),f
 10854  04DF  1903               	skipnz
 10855  04E0  0ADE               	incf	(sprintf@val+1)^(0+128),f
 10856  04E1  1903               	skipnz
 10857  04E2  0ADF               	incf	(sprintf@val+2)^(0+128),f
 10858  04E3  1903               	skipnz
 10859  04E4  0AE0               	incf	(sprintf@val+3)^(0+128),f
 10860  04E5                     l4106:
 10861                           
 10862                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
 10863  04E5  0867               	movf	sprintf@prec^(0+128),w
 10864  04E6  0468               	iorwf	(sprintf@prec+1)^(0+128),w
 10865  04E7  1D03               	btfss	3,2
 10866  04E8  2CEA               	goto	u5841
 10867  04E9  2CEB               	goto	u5840
 10868  04EA                     u5841:
 10869  04EA  2CF9               	goto	l4112
 10870  04EB                     u5840:
 10871  04EB                     l4108:
 10872  04EB  0860               	movf	(sprintf@val+3)^(0+128),w
 10873  04EC  045F               	iorwf	(sprintf@val+2)^(0+128),w
 10874  04ED  045E               	iorwf	(sprintf@val+1)^(0+128),w
 10875  04EE  045D               	iorwf	sprintf@val^(0+128),w
 10876  04EF  1D03               	skipz
 10877  04F0  2CF2               	goto	u5851
 10878  04F1  2CF3               	goto	u5850
 10879  04F2                     u5851:
 10880  04F2  2CF9               	goto	l4112
 10881  04F3                     u5850:
 10882  04F3                     l4110:
 10883                           
 10884                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
 10885  04F3  3001               	movlw	1
 10886  04F4  07E7               	addwf	sprintf@prec^(0+128),f
 10887  04F5  1803               	skipnc
 10888  04F6  0AE8               	incf	(sprintf@prec+1)^(0+128),f
 10889  04F7  3000               	movlw	0
 10890  04F8  07E8               	addwf	(sprintf@prec+1)^(0+128),f
 10891  04F9                     l4112:
 10892                           
 10893                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10894  04F9  01E9               	clrf	sprintf@c^(0+128)
 10895  04FA  0AE9               	incf	sprintf@c^(0+128),f
 10896  04FB                     l4118:
 10897                           
 10898                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
 10899  04FB  0869               	movf	sprintf@c^(0+128),w
 10900  04FC  1283               	bcf	3,5	;RP0=0, select bank0
 10901  04FD  1303               	bcf	3,6	;RP1=0, select bank0
 10902  04FE  00E3               	movwf	??_sprintf
 10903  04FF  3001               	movlw	1
 10904  0500                     u5865:
 10905  0500  1003               	clrc
 10906  0501  0DE3               	rlf	??_sprintf,f
 10907  0502  3EFF               	addlw	-1
 10908  0503  1D03               	skipz
 10909  0504  2D00               	goto	u5865
 10910  0505  1003               	clrc
 10911  0506  0D63               	rlf	??_sprintf,w
 10912  0507  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10913  0508  0084               	movwf	4
 10914  0509  160A  118A  200A  120A  118A  	fcall	stringdir
 10915  050E  00E4               	movwf	??_sprintf+1
 10916  050F  160A  118A  200A  120A  118A  	fcall	stringdir
 10917  0514  00E5               	movwf	??_sprintf+2
 10918  0515  160A  118A  200A  120A  118A  	fcall	stringdir
 10919  051A  00E6               	movwf	??_sprintf+3
 10920  051B  160A  118A  200A  120A  118A  	fcall	stringdir
 10921  0520  00E7               	movwf	??_sprintf+4
 10922  0521  0867               	movf	??_sprintf+4,w
 10923  0522  1683               	bsf	3,5	;RP0=1, select bank1
 10924  0523  1303               	bcf	3,6	;RP1=0, select bank1
 10925  0524  0260               	subwf	(sprintf@val+3)^(0+128),w
 10926  0525  1D03               	skipz
 10927  0526  2D3D               	goto	u5875
 10928  0527  1283               	bcf	3,5	;RP0=0, select bank0
 10929  0528  1303               	bcf	3,6	;RP1=0, select bank0
 10930  0529  0866               	movf	??_sprintf+3,w
 10931  052A  1683               	bsf	3,5	;RP0=1, select bank1
 10932  052B  1303               	bcf	3,6	;RP1=0, select bank1
 10933  052C  025F               	subwf	(sprintf@val+2)^(0+128),w
 10934  052D  1D03               	skipz
 10935  052E  2D3D               	goto	u5875
 10936  052F  1283               	bcf	3,5	;RP0=0, select bank0
 10937  0530  1303               	bcf	3,6	;RP1=0, select bank0
 10938  0531  0865               	movf	??_sprintf+2,w
 10939  0532  1683               	bsf	3,5	;RP0=1, select bank1
 10940  0533  1303               	bcf	3,6	;RP1=0, select bank1
 10941  0534  025E               	subwf	(sprintf@val+1)^(0+128),w
 10942  0535  1D03               	skipz
 10943  0536  2D3D               	goto	u5875
 10944  0537  1283               	bcf	3,5	;RP0=0, select bank0
 10945  0538  1303               	bcf	3,6	;RP1=0, select bank0
 10946  0539  0864               	movf	??_sprintf+1,w
 10947  053A  1683               	bsf	3,5	;RP0=1, select bank1
 10948  053B  1303               	bcf	3,6	;RP1=0, select bank1
 10949  053C  025D               	subwf	sprintf@val^(0+128),w
 10950  053D                     u5875:
 10951  053D  1803               	skipnc
 10952  053E  2D40               	goto	u5871
 10953  053F  2D41               	goto	u5870
 10954  0540                     u5871:
 10955  0540  2D42               	goto	l4122
 10956  0541                     u5870:
 10957  0541  2D50               	goto	l4124
 10958  0542                     l4122:
 10959  0542  3001               	movlw	1
 10960  0543  1283               	bcf	3,5	;RP0=0, select bank0
 10961  0544  1303               	bcf	3,6	;RP1=0, select bank0
 10962  0545  00E3               	movwf	??_sprintf
 10963  0546  0863               	movf	??_sprintf,w
 10964  0547  1683               	bsf	3,5	;RP0=1, select bank1
 10965  0548  1303               	bcf	3,6	;RP1=0, select bank1
 10966  0549  07E9               	addwf	sprintf@c^(0+128),f
 10967  054A  300A               	movlw	10
 10968  054B  0669               	xorwf	sprintf@c^(0+128),w
 10969  054C  1D03               	btfss	3,2
 10970  054D  2D4F               	goto	u5881
 10971  054E  2D50               	goto	u5880
 10972  054F                     u5881:
 10973  054F  2CFB               	goto	l4118
 10974  0550                     u5880:
 10975  0550                     l4124:
 10976                           
 10977                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
 10978  0550  0868               	movf	(sprintf@prec+1)^(0+128),w
 10979  0551  3A80               	xorlw	128
 10980  0552  3C80               	sublw	128
 10981  0553  1D03               	skipz
 10982  0554  2D57               	goto	u5895
 10983  0555  0867               	movf	sprintf@prec^(0+128),w
 10984  0556  0269               	subwf	sprintf@c^(0+128),w
 10985  0557                     u5895:
 10986  0557  1803               	skipnc
 10987  0558  2D5A               	goto	u5891
 10988  0559  2D5B               	goto	u5890
 10989  055A                     u5891:
 10990  055A  2D66               	goto	l4128
 10991  055B                     u5890:
 10992  055B                     l4126:
 10993                           
 10994                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1366:    c = (cha
      +                          r)prec;
 10995  055B  1683               	bsf	3,5	;RP0=1, select bank1
 10996  055C  1303               	bcf	3,6	;RP1=0, select bank1
 10997  055D  0867               	movf	sprintf@prec^(0+128),w
 10998  055E  1283               	bcf	3,5	;RP0=0, select bank0
 10999  055F  1303               	bcf	3,6	;RP1=0, select bank0
 11000  0560  00E3               	movwf	??_sprintf
 11001  0561  0863               	movf	??_sprintf,w
 11002  0562  1683               	bsf	3,5	;RP0=1, select bank1
 11003  0563  1303               	bcf	3,6	;RP1=0, select bank1
 11004  0564  00E9               	movwf	sprintf@c^(0+128)
 11005  0565  2D8A               	goto	l4132
 11006  0566                     l4128:
 11007  0566  1683               	bsf	3,5	;RP0=1, select bank1
 11008  0567  1303               	bcf	3,6	;RP1=0, select bank1
 11009  0568  0868               	movf	(sprintf@prec+1)^(0+128),w
 11010  0569  3A80               	xorlw	128
 11011  056A  1283               	bcf	3,5	;RP0=0, select bank0
 11012  056B  1303               	bcf	3,6	;RP1=0, select bank0
 11013  056C  00E3               	movwf	??_sprintf
 11014  056D  3080               	movlw	128
 11015  056E  0263               	subwf	??_sprintf,w
 11016  056F  1D03               	skipz
 11017  0570  2D75               	goto	u5905
 11018  0571  1683               	bsf	3,5	;RP0=1, select bank1
 11019  0572  1303               	bcf	3,6	;RP1=0, select bank1
 11020  0573  0869               	movf	sprintf@c^(0+128),w
 11021  0574  0267               	subwf	sprintf@prec^(0+128),w
 11022  0575                     u5905:
 11023  0575  1803               	skipnc
 11024  0576  2D78               	goto	u5901
 11025  0577  2D79               	goto	u5900
 11026  0578                     u5901:
 11027  0578  2D8A               	goto	l4132
 11028  0579                     u5900:
 11029  0579                     l4130:
 11030                           
 11031                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
 11032  0579  1683               	bsf	3,5	;RP0=1, select bank1
 11033  057A  1303               	bcf	3,6	;RP1=0, select bank1
 11034  057B  0869               	movf	sprintf@c^(0+128),w
 11035  057C  1283               	bcf	3,5	;RP0=0, select bank0
 11036  057D  1303               	bcf	3,6	;RP1=0, select bank0
 11037  057E  00E3               	movwf	??_sprintf
 11038  057F  01E4               	clrf	??_sprintf+1
 11039  0580  0863               	movf	??_sprintf,w
 11040  0581  1683               	bsf	3,5	;RP0=1, select bank1
 11041  0582  1303               	bcf	3,6	;RP1=0, select bank1
 11042  0583  00E7               	movwf	sprintf@prec^(0+128)
 11043  0584  1283               	bcf	3,5	;RP0=0, select bank0
 11044  0585  1303               	bcf	3,6	;RP1=0, select bank0
 11045  0586  0864               	movf	??_sprintf+1,w
 11046  0587  1683               	bsf	3,5	;RP0=1, select bank1
 11047  0588  1303               	bcf	3,6	;RP1=0, select bank1
 11048  0589  00E8               	movwf	(sprintf@prec+1)^(0+128)
 11049  058A                     l4132:
 11050                           
 11051                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
 11052  058A  1683               	bsf	3,5	;RP0=1, select bank1
 11053  058B  1303               	bcf	3,6	;RP1=0, select bank1
 11054  058C  0857               	movf	sprintf@width^(0+128),w
 11055  058D  0458               	iorwf	(sprintf@width+1)^(0+128),w
 11056  058E  1903               	btfsc	3,2
 11057  058F  2D91               	goto	u5911
 11058  0590  2D92               	goto	u5910
 11059  0591                     u5911:
 11060  0591  2DAC               	goto	l4138
 11061  0592                     u5910:
 11062  0592                     l4134:
 11063  0592  3003               	movlw	3
 11064  0593  0555               	andwf	sprintf@flag^(0+128),w
 11065  0594  1283               	bcf	3,5	;RP0=0, select bank0
 11066  0595  1303               	bcf	3,6	;RP1=0, select bank0
 11067  0596  00E3               	movwf	??_sprintf
 11068  0597  3000               	movlw	0
 11069  0598  1683               	bsf	3,5	;RP0=1, select bank1
 11070  0599  1303               	bcf	3,6	;RP1=0, select bank1
 11071  059A  0556               	andwf	(sprintf@flag+1)^(0+128),w
 11072  059B  1283               	bcf	3,5	;RP0=0, select bank0
 11073  059C  1303               	bcf	3,6	;RP1=0, select bank0
 11074  059D  00E4               	movwf	??_sprintf+1
 11075  059E  0863               	movf	??_sprintf,w
 11076  059F  0464               	iorwf	??_sprintf+1,w
 11077  05A0  1903               	btfsc	3,2
 11078  05A1  2DA3               	goto	u5921
 11079  05A2  2DA4               	goto	u5920
 11080  05A3                     u5921:
 11081  05A3  2DAC               	goto	l4138
 11082  05A4                     u5920:
 11083  05A4                     l4136:
 11084                           
 11085                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
 11086  05A4  30FF               	movlw	255
 11087  05A5  1683               	bsf	3,5	;RP0=1, select bank1
 11088  05A6  1303               	bcf	3,6	;RP1=0, select bank1
 11089  05A7  07D7               	addwf	sprintf@width^(0+128),f
 11090  05A8  1803               	skipnc
 11091  05A9  0AD8               	incf	(sprintf@width+1)^(0+128),f
 11092  05AA  30FF               	movlw	255
 11093  05AB  07D8               	addwf	(sprintf@width+1)^(0+128),f
 11094  05AC                     l4138:
 11095                           
 11096                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1374:   if(flag &
      +                           0x4000) {
 11097  05AC  1683               	bsf	3,5	;RP0=1, select bank1
 11098  05AD  1303               	bcf	3,6	;RP1=0, select bank1
 11099  05AE  1F56               	btfss	(sprintf@flag+1)^(0+128),6
 11100  05AF  2DB1               	goto	u5931
 11101  05B0  2DB2               	goto	u5930
 11102  05B1                     u5931:
 11103  05B1  2DD5               	goto	l4146
 11104  05B2                     u5930:
 11105  05B2                     l4140:
 11106                           
 11107                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1375:    if(width
      +                           > prec)
 11108  05B2  0868               	movf	(sprintf@prec+1)^(0+128),w
 11109  05B3  3A80               	xorlw	128
 11110  05B4  1283               	bcf	3,5	;RP0=0, select bank0
 11111  05B5  1303               	bcf	3,6	;RP1=0, select bank0
 11112  05B6  00E3               	movwf	??_sprintf
 11113  05B7  1683               	bsf	3,5	;RP0=1, select bank1
 11114  05B8  1303               	bcf	3,6	;RP1=0, select bank1
 11115  05B9  0858               	movf	(sprintf@width+1)^(0+128),w
 11116  05BA  3A80               	xorlw	128
 11117  05BB  1283               	bcf	3,5	;RP0=0, select bank0
 11118  05BC  1303               	bcf	3,6	;RP1=0, select bank0
 11119  05BD  0263               	subwf	??_sprintf,w
 11120  05BE  1D03               	skipz
 11121  05BF  2DC4               	goto	u5945
 11122  05C0  1683               	bsf	3,5	;RP0=1, select bank1
 11123  05C1  1303               	bcf	3,6	;RP1=0, select bank1
 11124  05C2  0857               	movf	sprintf@width^(0+128),w
 11125  05C3  0267               	subwf	sprintf@prec^(0+128),w
 11126  05C4                     u5945:
 11127  05C4  1803               	skipnc
 11128  05C5  2DC7               	goto	u5941
 11129  05C6  2DC8               	goto	u5940
 11130  05C7                     u5941:
 11131  05C7  2DD1               	goto	l4144
 11132  05C8                     u5940:
 11133  05C8                     l4142:
 11134                           
 11135                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1376:     width -
      +                          = prec;
 11136  05C8  1683               	bsf	3,5	;RP0=1, select bank1
 11137  05C9  1303               	bcf	3,6	;RP1=0, select bank1
 11138  05CA  0867               	movf	sprintf@prec^(0+128),w
 11139  05CB  02D7               	subwf	sprintf@width^(0+128),f
 11140  05CC  0868               	movf	(sprintf@prec+1)^(0+128),w
 11141  05CD  1C03               	skipc
 11142  05CE  03D8               	decf	(sprintf@width+1)^(0+128),f
 11143  05CF  02D8               	subwf	(sprintf@width+1)^(0+128),f
 11144  05D0  2DD5               	goto	l4146
 11145  05D1                     l4144:
 11146                           
 11147                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1378:     width =
      +                           0;
 11148  05D1  1683               	bsf	3,5	;RP0=1, select bank1
 11149  05D2  1303               	bcf	3,6	;RP1=0, select bank1
 11150  05D3  01D7               	clrf	sprintf@width^(0+128)
 11151  05D4  01D8               	clrf	(sprintf@width+1)^(0+128)
 11152  05D5                     l4146:
 11153                           
 11154                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
 11155  05D5  0858               	movf	(sprintf@width+1)^(0+128),w
 11156  05D6  3A80               	xorlw	128
 11157  05D7  3C80               	sublw	128
 11158  05D8  1D03               	skipz
 11159  05D9  2DDC               	goto	u5955
 11160  05DA  0857               	movf	sprintf@width^(0+128),w
 11161  05DB  0269               	subwf	sprintf@c^(0+128),w
 11162  05DC                     u5955:
 11163  05DC  1803               	skipnc
 11164  05DD  2DDF               	goto	u5951
 11165  05DE  2DE0               	goto	u5950
 11166  05DF                     u5951:
 11167  05DF  2DF4               	goto	l4150
 11168  05E0                     u5950:
 11169  05E0                     l4148:
 11170                           
 11171                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
 11172  05E0  1683               	bsf	3,5	;RP0=1, select bank1
 11173  05E1  1303               	bcf	3,6	;RP1=0, select bank1
 11174  05E2  0869               	movf	sprintf@c^(0+128),w
 11175  05E3  1283               	bcf	3,5	;RP0=0, select bank0
 11176  05E4  1303               	bcf	3,6	;RP1=0, select bank0
 11177  05E5  00E3               	movwf	??_sprintf
 11178  05E6  01E4               	clrf	??_sprintf+1
 11179  05E7  0863               	movf	??_sprintf,w
 11180  05E8  1683               	bsf	3,5	;RP0=1, select bank1
 11181  05E9  1303               	bcf	3,6	;RP1=0, select bank1
 11182  05EA  02D7               	subwf	sprintf@width^(0+128),f
 11183  05EB  1283               	bcf	3,5	;RP0=0, select bank0
 11184  05EC  1303               	bcf	3,6	;RP1=0, select bank0
 11185  05ED  0864               	movf	??_sprintf+1,w
 11186  05EE  1683               	bsf	3,5	;RP0=1, select bank1
 11187  05EF  1303               	bcf	3,6	;RP1=0, select bank1
 11188  05F0  1C03               	skipc
 11189  05F1  03D8               	decf	(sprintf@width+1)^(0+128),f
 11190  05F2  02D8               	subwf	(sprintf@width+1)^(0+128),f
 11191  05F3  2DF8               	goto	l4152
 11192  05F4                     l4150:
 11193                           
 11194                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
 11195  05F4  1683               	bsf	3,5	;RP0=1, select bank1
 11196  05F5  1303               	bcf	3,6	;RP1=0, select bank1
 11197  05F6  01D7               	clrf	sprintf@width^(0+128)
 11198  05F7  01D8               	clrf	(sprintf@width+1)^(0+128)
 11199  05F8                     l4152:
 11200                           
 11201                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
 11202  05F8  0857               	movf	sprintf@width^(0+128),w
 11203  05F9  0458               	iorwf	(sprintf@width+1)^(0+128),w
 11204  05FA  1903               	btfsc	3,2
 11205  05FB  2DFD               	goto	u5961
 11206  05FC  2DFE               	goto	u5960
 11207  05FD                     u5961:
 11208  05FD  2E1D               	goto	l4160
 11209  05FE                     u5960:
 11210  05FE                     l4154:
 11211                           
 11212                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
 11213  05FE  3020               	movlw	32
 11214  05FF  1283               	bcf	3,5	;RP0=0, select bank0
 11215  0600  1303               	bcf	3,6	;RP1=0, select bank0
 11216  0601  00E3               	movwf	??_sprintf
 11217  0602  1683               	bsf	3,5	;RP0=1, select bank1
 11218  0603  1303               	bcf	3,6	;RP1=0, select bank1
 11219  0604  0866               	movf	sprintf@sp^(0+128),w
 11220  0605  0084               	movwf	4
 11221  0606  1283               	bcf	3,5	;RP0=0, select bank0
 11222  0607  1303               	bcf	3,6	;RP1=0, select bank0
 11223  0608  0863               	movf	??_sprintf,w
 11224  0609  1383               	bcf	3,7	;select IRP bank0
 11225  060A  0080               	movwf	0
 11226  060B                     l4156:
 11227  060B  3001               	movlw	1
 11228  060C  00E3               	movwf	??_sprintf
 11229  060D  0863               	movf	??_sprintf,w
 11230  060E  1683               	bsf	3,5	;RP0=1, select bank1
 11231  060F  1303               	bcf	3,6	;RP1=0, select bank1
 11232  0610  07E6               	addwf	sprintf@sp^(0+128),f
 11233  0611                     l4158:
 11234  0611  30FF               	movlw	255
 11235  0612  07D7               	addwf	sprintf@width^(0+128),f
 11236  0613  1803               	skipnc
 11237  0614  0AD8               	incf	(sprintf@width+1)^(0+128),f
 11238  0615  30FF               	movlw	255
 11239  0616  07D8               	addwf	(sprintf@width+1)^(0+128),f
 11240  0617  0857               	movf	sprintf@width^(0+128),w
 11241  0618  0458               	iorwf	(sprintf@width+1)^(0+128),w
 11242  0619  1D03               	btfss	3,2
 11243  061A  2E1C               	goto	u5971
 11244  061B  2E1D               	goto	u5970
 11245  061C                     u5971:
 11246  061C  2DFE               	goto	l4154
 11247  061D                     u5970:
 11248  061D                     l4160:
 11249                           
 11250                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
 11251  061D  3003               	movlw	3
 11252  061E  0555               	andwf	sprintf@flag^(0+128),w
 11253  061F  1283               	bcf	3,5	;RP0=0, select bank0
 11254  0620  1303               	bcf	3,6	;RP1=0, select bank0
 11255  0621  00E3               	movwf	??_sprintf
 11256  0622  3000               	movlw	0
 11257  0623  1683               	bsf	3,5	;RP0=1, select bank1
 11258  0624  1303               	bcf	3,6	;RP1=0, select bank1
 11259  0625  0556               	andwf	(sprintf@flag+1)^(0+128),w
 11260  0626  1283               	bcf	3,5	;RP0=0, select bank0
 11261  0627  1303               	bcf	3,6	;RP1=0, select bank0
 11262  0628  00E4               	movwf	??_sprintf+1
 11263  0629  0863               	movf	??_sprintf,w
 11264  062A  0464               	iorwf	??_sprintf+1,w
 11265  062B  1903               	btfsc	3,2
 11266  062C  2E2E               	goto	u5981
 11267  062D  2E2F               	goto	u5980
 11268  062E                     u5981:
 11269  062E  2EA8               	goto	l4172
 11270  062F                     u5980:
 11271  062F                     l4162:
 11272                           
 11273                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
 11274  062F  302D               	movlw	45
 11275  0630  00E3               	movwf	??_sprintf
 11276  0631  1683               	bsf	3,5	;RP0=1, select bank1
 11277  0632  1303               	bcf	3,6	;RP1=0, select bank1
 11278  0633  0866               	movf	sprintf@sp^(0+128),w
 11279  0634  0084               	movwf	4
 11280  0635  1283               	bcf	3,5	;RP0=0, select bank0
 11281  0636  1303               	bcf	3,6	;RP1=0, select bank0
 11282  0637  0863               	movf	??_sprintf,w
 11283  0638  1383               	bcf	3,7	;select IRP bank0
 11284  0639  0080               	movwf	0
 11285  063A                     l4164:
 11286  063A  3001               	movlw	1
 11287  063B  00E3               	movwf	??_sprintf
 11288  063C  0863               	movf	??_sprintf,w
 11289  063D  1683               	bsf	3,5	;RP0=1, select bank1
 11290  063E  1303               	bcf	3,6	;RP1=0, select bank1
 11291  063F  07E6               	addwf	sprintf@sp^(0+128),f
 11292  0640  2EA8               	goto	l4172
 11293  0641                     l4166:
 11294                           
 11295                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned int)prec]) % 10 + '0';
 11296  0641  3000               	movlw	0
 11297  0642  1283               	bcf	3,5	;RP0=0, select bank0
 11298  0643  1303               	bcf	3,6	;RP1=0, select bank0
 11299  0644  00A9               	movwf	___llmod@divisor+3
 11300  0645  3000               	movlw	0
 11301  0646  00A8               	movwf	___llmod@divisor+2
 11302  0647  3000               	movlw	0
 11303  0648  00A7               	movwf	___llmod@divisor+1
 11304  0649  300A               	movlw	10
 11305  064A  00A6               	movwf	___llmod@divisor
 11306  064B  1683               	bsf	3,5	;RP0=1, select bank1
 11307  064C  1303               	bcf	3,6	;RP1=0, select bank1
 11308  064D  0867               	movf	sprintf@prec^(0+128),w
 11309  064E  1283               	bcf	3,5	;RP0=0, select bank0
 11310  064F  1303               	bcf	3,6	;RP1=0, select bank0
 11311  0650  00E3               	movwf	??_sprintf
 11312  0651  3001               	movlw	1
 11313  0652                     u5995:
 11314  0652  1003               	clrc
 11315  0653  0DE3               	rlf	??_sprintf,f
 11316  0654  3EFF               	addlw	-1
 11317  0655  1D03               	skipz
 11318  0656  2E52               	goto	u5995
 11319  0657  1003               	clrc
 11320  0658  0D63               	rlf	??_sprintf,w
 11321  0659  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 11322  065A  0084               	movwf	4
 11323  065B  160A  118A  200A  120A  118A  	fcall	stringdir
 11324  0660  00F2               	movwf	___lldiv@divisor
 11325  0661  160A  118A  200A  120A  118A  	fcall	stringdir
 11326  0666  00F3               	movwf	___lldiv@divisor+1
 11327  0667  160A  118A  200A  120A  118A  	fcall	stringdir
 11328  066C  00F4               	movwf	___lldiv@divisor+2
 11329  066D  160A  118A  200A  120A  118A  	fcall	stringdir
 11330  0672  00F5               	movwf	___lldiv@divisor+3
 11331  0673  1683               	bsf	3,5	;RP0=1, select bank1
 11332  0674  1303               	bcf	3,6	;RP1=0, select bank1
 11333  0675  0860               	movf	(sprintf@val+3)^(0+128),w
 11334  0676  00F9               	movwf	___lldiv@dividend+3
 11335  0677  085F               	movf	(sprintf@val+2)^(0+128),w
 11336  0678  00F8               	movwf	___lldiv@dividend+2
 11337  0679  085E               	movf	(sprintf@val+1)^(0+128),w
 11338  067A  00F7               	movwf	___lldiv@dividend+1
 11339  067B  085D               	movf	sprintf@val^(0+128),w
 11340  067C  00F6               	movwf	___lldiv@dividend
 11341  067D  160A  118A  21ED  120A  118A  	fcall	___lldiv
 11342  0682  0875               	movf	?___lldiv+3,w
 11343  0683  1283               	bcf	3,5	;RP0=0, select bank0
 11344  0684  1303               	bcf	3,6	;RP1=0, select bank0
 11345  0685  00AD               	movwf	___llmod@dividend+3
 11346  0686  0874               	movf	?___lldiv+2,w
 11347  0687  00AC               	movwf	___llmod@dividend+2
 11348  0688  0873               	movf	?___lldiv+1,w
 11349  0689  00AB               	movwf	___llmod@dividend+1
 11350  068A  0872               	movf	?___lldiv,w
 11351  068B  00AA               	movwf	___llmod@dividend
 11352  068C  160A  118A  20E2  120A  118A  	fcall	___llmod
 11353  0691  1283               	bcf	3,5	;RP0=0, select bank0
 11354  0692  1303               	bcf	3,6	;RP1=0, select bank0
 11355  0693  0826               	movf	?___llmod,w
 11356  0694  3E30               	addlw	48
 11357  0695  00E4               	movwf	??_sprintf+1
 11358  0696  0864               	movf	??_sprintf+1,w
 11359  0697  1683               	bsf	3,5	;RP0=1, select bank1
 11360  0698  1303               	bcf	3,6	;RP1=0, select bank1
 11361  0699  00E9               	movwf	sprintf@c^(0+128)
 11362  069A                     l4168:
 11363                           
 11364                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
 11365  069A  0869               	movf	sprintf@c^(0+128),w
 11366  069B  1283               	bcf	3,5	;RP0=0, select bank0
 11367  069C  1303               	bcf	3,6	;RP1=0, select bank0
 11368  069D  00E3               	movwf	??_sprintf
 11369  069E  1683               	bsf	3,5	;RP0=1, select bank1
 11370  069F  1303               	bcf	3,6	;RP1=0, select bank1
 11371  06A0  0866               	movf	sprintf@sp^(0+128),w
 11372  06A1  0084               	movwf	4
 11373  06A2  1283               	bcf	3,5	;RP0=0, select bank0
 11374  06A3  1303               	bcf	3,6	;RP1=0, select bank0
 11375  06A4  0863               	movf	??_sprintf,w
 11376  06A5  1383               	bcf	3,7	;select IRP bank0
 11377  06A6  0080               	movwf	0
 11378  06A7  2E3A               	goto	l4164
 11379  06A8                     l4172:
 11380                           
 11381                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
 11382  06A8  30FF               	movlw	255
 11383  06A9  1683               	bsf	3,5	;RP0=1, select bank1
 11384  06AA  1303               	bcf	3,6	;RP1=0, select bank1
 11385  06AB  07E7               	addwf	sprintf@prec^(0+128),f
 11386  06AC  1803               	skipnc
 11387  06AD  0AE8               	incf	(sprintf@prec+1)^(0+128),f
 11388  06AE  30FF               	movlw	255
 11389  06AF  07E8               	addwf	(sprintf@prec+1)^(0+128),f
 11390  06B0  0A67               	incf	sprintf@prec^(0+128),w
 11391  06B1  1D03               	skipz
 11392  06B2  2EB7               	goto	u6001
 11393  06B3  0A68               	incf	(sprintf@prec+1)^(0+128),w
 11394  06B4  1D03               	btfss	3,2
 11395  06B5  2EB7               	goto	u6001
 11396  06B6  2EB8               	goto	u6000
 11397  06B7                     u6001:
 11398  06B7  2E41               	goto	l4166
 11399  06B8                     u6000:
 11400  06B8                     l4174:
 11401                           
 11402                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
 11403  06B8  3001               	movlw	1
 11404  06B9  1283               	bcf	3,5	;RP0=0, select bank0
 11405  06BA  07DF               	addwf	sprintf@f,f
 11406  06BB  30FF               	movlw	-1
 11407  06BC  075F               	addwf	sprintf@f,w
 11408  06BD  0084               	movwf	4
 11409  06BE  160A  118A  200A  120A  118A  	fcall	stringdir
 11410  06C3  00E3               	movwf	??_sprintf
 11411  06C4  0863               	movf	??_sprintf,w
 11412  06C5  1683               	bsf	3,5	;RP0=1, select bank1
 11413  06C6  1303               	bcf	3,6	;RP1=0, select bank1
 11414  06C7  00E9               	movwf	sprintf@c^(0+128)
 11415  06C8  0869               	movf	sprintf@c^(0+128),w
 11416  06C9  1D03               	btfss	3,2
 11417  06CA  2ECC               	goto	u6011
 11418  06CB  2ECF               	goto	u6010
 11419  06CC                     u6011:
 11420  06CC  120A  158A  2D26   	goto	l3896
 11421  06CF                     u6010:
 11422  06CF                     l4176:
 11423                           
 11424                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
 11425  06CF  1683               	bsf	3,5	;RP0=1, select bank1
 11426  06D0  1303               	bcf	3,6	;RP1=0, select bank1
 11427  06D1  0866               	movf	sprintf@sp^(0+128),w
 11428  06D2  0084               	movwf	4
 11429  06D3  1383               	bcf	3,7	;select IRP bank0
 11430  06D4  0180               	clrf	0
 11431  06D5                     l468:
 11432  06D5  0008               	return
 11433  06D6                     __end_of_sprintf:

Data Sizes:
    Strings     68
    Constant    118
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     78      80
    BANK1            80     25      74
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_10(CODE[5]), STR_9(CODE[7]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data_TEMP(BANK1[8]), data_ADC(BANK1[8]), data_cont(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> STR_7(CODE[6]), data_TEMP(BANK1[8]), STR_6(CODE[9]), STR_5(CODE[4]), 
		 -> data_ADC(BANK1[8]), STR_4(CODE[8]), STR_3(CODE[4]), data_cont(BANK1[8]), 
		 -> STR_2(CODE[9]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_11(CODE[2]), data_TEMP(BANK1[8]), data_ADC(BANK1[8]), data_cont(BANK1[8]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _main->___awdiv
    _setup->_spiInit
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _SPI_TEMP->_spiWrite
    _SPI_CONT->_spiWrite
    _SPI_ADC->_spiWrite
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___awdiv
    _sprintf->___lldiv
    _scale->___awdiv
    ___awdiv->___awmod
    ___lwdiv->___lwmod
    ___ftmul->___awdiv
    ___ftmul->___ftpack
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftadd->___ftpack

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    ___ftdiv->___ftmul
    _Show_val_LCD->_Lcd_Write_String
    _ADC_to_string->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _ADC_to_string->_sprintf

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   57204
                                             76 BANK0      2     2      0
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _SPI_ADC
                           _SPI_CONT
                           _SPI_TEMP
                       _Show_val_LCD
                        _Write_USART
                 _Write_USART_String
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2948
                                             28 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             6     3      3    2596
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   4     2      2     589
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         1     1      0    1096
                                              2 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     517
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     579
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _SPI_TEMP                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_CONT                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_ADC                                              3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0   40851
                                             73 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             40    36      4   40851
                                             63 BANK0     10     6      4
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     6      3    8105
                                             28 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     932
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4    1148
                                              9 COMMON     1     1      0
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              16    13      3    6854
                                             28 BANK0     16    13      3
                             ___bmul
                            ___ftmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     477
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     631
                                              8 COMMON     1     1      0
                                              0 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    4836
                                             12 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     560
                                              8 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     584
                                              2 COMMON     6     0      6
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1488
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2565
                                              0 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     752
                                              6 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     631
                                              2 COMMON     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     411
                                             37 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4109
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3883
                                             44 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2398
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     560
                                              2 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___lwdiv
               ___lwmod (ARG)
             ___lwmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SPI_ADC
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_CONT
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_TEMP
     _spiRead
       _spiReceiveWait
     _spiWrite
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Write_USART
   _Write_USART_String
     _Write_USART
   ___awdiv
     ___awmod (ARG)
     ___wmul (ARG)
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
     ___ftpack (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
       ___wmul (ARG)
     ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___bmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
     ___ftpack (ARG)
     ___lwdiv (ARG)
       ___lwmod (ARG)
     ___lwmod (ARG)
   ___wmul
   _setup
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A6       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     19      4A       7       92.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A6      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 17:45:09 2021

                           pc 0002                ___bmul@product 002A                   _SSPSTATbits 0094  
                ___awdiv@sign 0025                            fsr 0004           ___wmul@multiplicand 0074  
                ___ftadd@exp1 0058                  ___ftadd@exp2 0057          __size_of_Write_USART 000C  
                ___ftadd@sign 0056                           l112 1E8D                           l121 1DDE  
                         l115 1F63                           l124 1D74                           l212 1BE4  
                         l140 11B7                           l221 1C21                           l141 11BD  
                         l133 1193                           l118 1FFF                           l142 11C3  
                         l134 11EB                           l127 1DA8                           l143 11EC  
                         l135 1199                           l136 119F                           l209 1BFA  
                         l137 11A5                           l162 1C70                           l218 1C17  
                         l138 11AB                           l250 10E1                           l171 1C94  
                         l227 1D0D                           l139 11B1                           l156 1FAE  
                         l180 1F19                           l165 1C2E                           l253 1BEC  
                         l174 1C56                           l431 02BA                           l159 1BD8  
                         l256 1BF2                           l249 10DC                           l267 1C0B  
                         l259 1BDE                           l508 1254                           l701 12FA  
                         l710 1339                           l438 030C                           l472 080F  
                         l376 0D17                           l721 1715                           l369 0A5C  
                         l722 171F                           l802 08B3                           l474 0827  
                         l723 1724                           l708 1315                           l732 1795  
                         l468 06D5                           l709 131F                           l718 17FF  
                         l398 0E0A                           l655 12BD                           l809 0896  
                         l681 1679                           l761 13B9                           l682 168C  
                         l498 07FF                           l914 1ED3                           l674 1CE2  
                         l843 1137                           l851 1D40                           l924 1E50  
                         l668 1190                           l757 13F6                           l781 159D  
                         l749 14B8                           l678 16C9                           l758 1368  
                         l934 1C40                           l775 1E16                           l792 1C15  
                         l768 13E9                           l697 1339                           l689 16BC  
                         l798 1CB9                           _RC0 0038                           _RC1 0039  
                         _RC2 003A                           _ISR 1BE5                           fsr0 0004  
                         indf 0000                  ___awmod@sign 0078   __size_of_Write_USART_String 002B  
                        ?_ISR 0070                  ___ftdiv@cntr 0046                  ___ftdiv@sign 004B  
                        l2300 1270                          l2310 1286                          l2302 1272  
                        l2320 12A9                          l2312 128A                          l2304 1278  
                        l4000 0079                          l2314 129B                          l2306 127B  
                        l2322 12AF                          l2330 1138                          l4002 0081  
                        l4010 00BB                          l2324 12B4                          l2316 12A1  
                        l2308 1282                          l2340 1148                          l2332 1139  
                        l4100 04D2                          l4020 013A                          l4012 0136  
                        l3300 1D4D                          l2326 12B9                          l2318 12A2  
                        l2350 1161                          l2342 114D                          l2334 113D  
                        l4110 04F3                          l4102 04D6                          l4030 01C4  
                        l4014 0138                          l4006 0099                          l3302 1D53  
                        l3310 1D81                          l2280 07F7                          l2272 07EC  
                        l2520 1E27                          l2352 1165                          l2344 1153  
                        l2360 1182                          l2336 1142                          l4112 04F9  
                        l4104 04DA                          l4032 01D6                          l4040 01F3  
                        l4024 0181                          l4008 00B4                          l3224 1BDA  
                        l3304 1D64                          l3312 1D87                          l4200 1FAF  
                        l3320 1CE5                          l3240 1E5E                          l3232 1E51  
                        l2282 07FE                          l2274 07ED                          l2530 1E46  
                        l2522 1E2B                          l2514 1E17                          l2290 125C  
                        l2362 1187                          l2354 116F                          l2346 1156  
                        l2338 1144                          l4130 0579                          l4122 0542  
                        l4106 04E5                          l4050 0267                          l4042 0202  
                        l4034 01DF                          l4026 018F                          l3226 1C03  
                        l3314 1D98                          l3306 1D75                          l4210 1FF6  
                        l4202 1FB7                          l3322 1CF6                          l3250 1E65  
                        l3242 1E5F                          l3234 1E57                          l3500 12C3  
                        l2700 1616                          l2276 07F1                          l2524 1E2F  
                        l2516 1E1D                          l2532 1E4C                          l2620 1C30  
                        l2292 1261                          l2364 118C                          l2356 1175  
                        l2348 115D                          l4140 05B2                          l4132 058A  
                        l4124 0550                          l4108 04EB                          l4060 02DD  
                        l4052 02A6                          l4044 0216                          l4036 01EC  
                        l4028 01BE                          l3228 1C08                          l3308 1D78  
                        l4204 1FC0                          l3324 1CFA                          l4220 1CC8  
                        l4212 1CBA                          l3260 1E6E                          l3252 1E66  
                        l3244 1E60                          l3236 1E5A                          l4300 079E  
                        l3510 12E4                          l3502 12CA                          l2710 1656  
                        l2702 1618                          l2278 07F5                          l2526 1E39  
                        l2518 1E20                          l2622 1C31                          l2294 1263  
                        l2286 1255                          l2358 117C                          l4150 05F4  
                        l4142 05C8                          l4134 0592                          l4126 055B  
                        l4118 04FB                          l4070 0322                          l4062 02EA  
                        l4054 02C4                          l4046 0221                          l4206 1FD5  
                        l3318 1CE3                          l4214 1CBD                          l4230 1411  
                        l3270 1E7F                          l3262 1E71                          l3254 1E67  
                        l3246 1E61                          l3238 1E5B                          l4310 07CB  
                        l4302 07A7                          l3520 130F                          l3512 12E8  
                        l2712 1678                          l2704 161D                          l2528 1E3F  
                        l2624 1C37                          l2296 1267                          l2288 1258  
                        l4160 061D                          l4152 05F8                          l4144 05D1  
                        l4136 05A4                          l4128 0566                          l4080 03D9  
                        l4072 032F                          l4064 02F9                          l4056 02D1  
                        l4048 0228                          l4208 1FE1                          l4216 1CC1  
                        l4240 1434                          l4232 1422                          l4224 13F7  
                        l3272 1E84                          l3264 1E74                          l3256 1E68  
                        l3248 1E64                          l4312 07D4                          l4304 07B0  
                        l3522 1319                          l3514 12F2                          l3506 12D1  
                        l2810 0828                          l2730 16B1                          l2722 1698  
                        l2714 1686                          l2706 1621                          l3610 14E4  
                        l3602 14B9                          l2626 1C3D                          l2298 126C  
                        l4162 062F                          l4154 05FE                          l4146 05D5  
                        l4138 05AC                          l4090 049C                          l4082 0418  
                        l4074 0335                          l4066 0302                          l4058 02D7  
                        l3530 1BD4                          l3290 1DB5                          l4218 1CC6  
                        l4250 146E                          l4242 1446                          l4226 140A  
                        l3266 1E77                          l3258 1E6B                          l4314 07DA  
                        l4306 07B9                          l3524 1321                          l3516 1301  
                        l3508 12DD                          l3532 16CA                          l2820 0857  
                        l2812 083B                          l2740 0809                          l2732 16C1  
                        l2716 1690                          l2724 16AA                          l2708 162A  
                        l3620 151A                          l3604 14CC                          l3700 08BD  
                        l2628 1C3F                          l4164 063A                          l4172 06A8  
                        l4156 060B                          l4148 05E0                          l4092 04A2  
                        l4084 042C                          l4076 034D                          l4068 031D  
                        l2556 1BEC                          l3292 1DBB                          l4260 1497  
                        l4252 1476                          l4244 1458                          l4236 1429  
                        l3268 1E7A                          l4316 07E0                          l4308 07C2  
                        l3526 1333                          l3518 130B                          l3550 171A  
                        l3542 1700                          l3534 16E9                          l2822 085D  
                        l2742 0816                          l3630 153E                          l3622 1520  
                        l3614 14EB                          l3710 09A0                          l3702 0980  
                        l4166 0641                          l4158 0611                          l4094 04A8  
                        l4078 039A                          l4086 0487                          l4174 06B8  
                        l4190 1F73                          l3294 1DCE                          l3286 1DA9  
                        l2902 1C17                          l4262 149D                          l4254 1484  
                        l4246 145C                          l4238 142F                          l2910 11C9  
                        l4270 06DE                          l3528 1338                          l3560 1738  
                        l3552 171E                          l3544 1705                          l3536 16EF  
                        l2824 0864                          l2816 0844                          l2744 081D  
                        l2736 0803                          l3800 13D7                          l3640 155C  
                        l3632 1546                          l3624 1526                          l3616 1518  
                        l3608 14D3                          l3712 0A0F                          l3720 0A60  
                        l4168 069A                          l4088 048F                          l4096 04AF  
                        l4176 06CF                          l4192 1F82                          l3296 1D41  
                        l3288 1DAC                          l2904 1C1D                          l4256 148E  
                        l4248 1463                          l2920 1BF3                          l4280 06FA  
                        l4272 06DF                          l3562 1742                          l3570 1764  
                        l3554 1723                          l3546 170B                          l3538 16F9  
                        l2842 088B                          l2834 0872                          l2826 0866  
                        l2818 0856                          l2746 0823                          l2738 0805  
                        l2690 15C1                          l3642 156C                          l3634 154E  
                        l3626 152A                          l3618 1519                          l3722 0A64  
                        l4098 04CA                          l4194 1F88                          l4186 1F64  
                        l3298 1D44                          l4258 148F                          l2906 1192  
                        l2930 10DB                          l2922 10CD                          l4290 0751  
                        l4282 06FF                          l4274 06E4                          l4266 06D6  
                        l2780 1DF4                          l3580 178F                          l3572 176A  
                        l3564 1748                          l3556 1725                          l3548 1716  
                        l2844 089B                          l2828 086A                          l2836 0884  
                        l3820 1213                          l3812 11ED                          l2684 159E  
                        l3644 1574                          l3636 1554                          l3628 152E  
                        l3660 1EA2                          l3652 1E8E                          l3716 0A29  
                        l3708 099A                          l3732 0B2B                          l3724 0A66  
                        l3900 0D39                          l4196 1C22                          l4188 1F6A  
                        l2916 1BDF                          l4372 11D1                          l2924 10D4  
                        l4292 077E                          l4284 0704                          l4276 06E9  
                        l4268 06DB                          l2790 1E15                          l2782 1E01  
                        l2774 1DDF                          l3590 17BE                          l3582 1799  
                        l3574 1774                          l3566 1751                          l3558 172B  
                        l2846 08A0                          l3830 1246                          l3822 121C  
                        l3814 11FF                          l2686 15B8                          l3806 13DE  
                        l3646 157C                          l3638 1558                          l3670 1EC2  
                        l3662 1EA6                          l3654 1E92                          l3750 0C84  
                        l3734 0B32                          l3726 0A6D                          l3742 0BBF  
                        l4374 0E26                          l3910 0D6F                          l3902 0D40  
                        l4198 1F1A                          l2918 1BE2                          l2926 10D6  
                        l4294 0783                          l4286 0709                          l4278 06F1  
                        l2784 1E03                          l2776 1DE3                          l3592 17CE  
                        l3584 17A9                          l3576 177A                          l3568 175D  
                        l3840 1CA0                          l2848 08AB                          l3824 122E  
                        l3816 1202                          l3832 124C                          l2696 15DA  
                        l3808 13EE                          l3760 133A                          l3648 1582  
                        l3672 1EC9                          l3664 1EAA                          l3656 1E98  
                        l3752 0C8B                          l3744 0BC6                          l3920 0DB1  
                        l3912 0D8A                          l3904 0D44                          l3680 1C5B  
                        l2928 10D8                          l4296 078C                          l4288 070D  
                        l2786 1E05                          l2778 1DF0                          l2794 1C0C  
                        l3498 12BE                          l3594 17D2                          l3586 17AD  
                        l3578 1783                          l3826 123C                          l3818 120F  
                        l3850 10FC                          l2698 160E                          l3762 134D  
                        l3666 1EBB                          l3658 1E9B                          l3674 1ECF  
                        l3738 0B9E                          l3930 0DF2                          l3922 0DB7  
                        l3914 0D90                          l3906 0D56                          l3682 1C61  
                        l3690 1C45                          l4298 0795                          l2788 1E13  
                        l2796 1C13                          l3596 17E2                          l3588 17BD  
                        l3836 1C95                          l3828 123D                          l3852 1100  
                        l3860 112F                          l3844 10E2                          l3780 1389  
                        l3772 1369                          l3668 1EC1                          l3756 0CF7  
                        l3940 0E34                          l3924 0DBC                          l3932 0E04  
                        l3908 0D5A                          l3916 0DA0                          l3684 1C64  
                        l3692 1C4B                          l2798 1C15                          l3598 17E4  
                        l3838 1C9E                          l3854 1112                          l3846 10EC  
                        l3870 1D28                          l3790 13B3                          l3782 1392  
                        l3774 136F                          l3766 1356                          l3950 0E67  
                        l3942 0E4A                          l3934 0E08                          l3926 0DD1  
                        l3918 0DAE                          l3686 1C6D                          l3678 1C58  
                        l3694 1C4E                          l3856 1120                          l3848 10EF  
                        l3864 1D0E                          l3792 13BD                          l3784 13A0  
                        l3776 137E                          l3960 0EA0                          l3952 0E7C  
                        l3944 0E50                          l3928 0DEC                          l3880 1C83  
                        l3696 1C53                          l3688 1C42                          l3858 1129  
                        l3866 1D15                          l3786 13AA                          l3778 1380  
                        l3698 08B7                          l3970 0F0D                          l3962 0ECD  
                        l3954 0E91                          l3946 0E54                          l3938 0E0E  
                        l3882 1C89                          l3874 1C72                          l3890 1EF5  
                        l3868 1D22                          l3788 13AB                          l3980 0F83  
                        l3972 0F13                          l3964 0ED3                          l3956 0E95  
                        l3948 0E5F                          l3884 1C8E                          l3876 1C77  
                        l3892 1EFD                          l3798 13C5                          l3990 0022  
                        l3982 0F9A                          l3974 0F2C                          l3966 0EE6  
                        l3958 0E99                          l3894 0D1B                          l3878 1C7C  
                        l3886 1ED4                          l3992 002B                          l3976 0F65  
                        l3968 0F09                          l3984 0FA2                          l3896 0D26  
                        l3888 1ED9                          l3994 004A                          l3986 0FB1  
                        l3978 0F7A                          l3898 0D2C                          l3996 0059  
                        l3988 0FEA                          l3998 0070                          STR_1 1086  
                        STR_2 10A0                          STR_3 10AD                          STR_4 10A9  
                        STR_5 10AD                          STR_6 1097                          STR_7 10B8  
                        STR_8 10C3                          STR_9 10B1                          u3100 1BF2  
                        u3101 1BF1                          u3040 1E1D                          u2400 125C  
                        u3041 1E1C                          u2401 125B                          u2410 1267  
                        u2411 1266                          u3060 1E2F                          u2420 1278  
                        u2500 113D                          u3061 1E2E                          u2421 1277  
                        u2501 113C                          u3070 1E39                          u2510 1148  
                        u3071 1E38                          u3055 1E21                          u2511 1147  
                        u5000 1E98                          u2440 128A                          u2520 1153  
                        u5001 1E97                          u2441 1289                          u2521 1152  
                        u3410 16A9                          u3330 15B8                          u3090 1E4C  
                        u3411 16A8                          u3331 15B7                          u3091 1E4B  
                        u3075 1E35                          u2435 127C                          u3420 16B0  
                        u3340 15D9                          u2380 07F1                          u5020 1EAA  
                        u3180 1C37                          u2460 129B                          u2540 1165  
                        u5100 0A6D                          u3421 16AF                          u3405 1699  
                        u3341 15D8                          u2381 07F0                          u5021 1EA9  
                        u3085 1E40                          u3181 1C36                          u2461 129A  
                        u2541 1164                          u5101 0A6C                          u2390 07FE  
                        u3190 1C3D                          u2550 116F                          u5110 0B32  
                        u2391 07FD                          u5015 1E9C                          u3191 1C3C  
                        u2455 128B                          u2551 116E                          u2535 1157  
                        u5111 0B31                          u3440 16C1                          u3360 1656  
                        u5200 13BD                          u5040 1EBB                          u2480 12AF  
                        u5120 0BC6                          u6000 06B8                          u4400 1D0D  
                        u3441 16C0                          u3361 1655                          u5201 13BC  
                        u5041 1EBA                          u2481 12AE                          u2465 1297  
                        u5121 0BC5                          u6001 06B7                          u4401 1D0C  
                        u3610 083B                          u3450 0809                          u3370 168C  
                        u5210 13C4                          u2490 12B4                          u2570 1182  
                        u5130 0C8B                          u6010 06CF                          u3611 083A  
                        u3451 0808                          u3435 16B3                          u3371 168B  
                        u3355 1623                          u5211 13C3                          u5035 1EAB  
                        u2491 12B3                          u2475 12A3                          u2571 1181  
                        u2555 116B                          u5131 0C8A                          u6011 06CC  
                        u4500 12C3                          u3700 08A0                          u3620 084F  
                        u3380 1690                          u5140 134D                          u5060 1ECF  
                        u2580 1187                          u6020 1CC1                          u6100 149D  
                        u4501 12C2                          u3701 089F                          u3381 168F  
                        u3365 1652                          u5141 134C                          u5061 1ECE  
                        u5045 1EB7                          u2581 1186                          u2565 1176  
                        u6021 1CC0                          u6101 149C                          u4510 12CA  
                        u3630 086A                          u5310 122E                          u3390 1697  
                        u5230 13D6                          u5150 1367                          u5070 08BD  
                        u6030 140A                          u4511 12C9                          u3631 0869  
                        u5311 122D                          u3391 1696                          u5231 13D5  
                        u5151 1366                          u5055 1EC3                          u5071 08BC  
                        u6031 1409                          u3560 1DE3                          u4600 132A  
                        u3640 0871                          u5400 112F                          u3480 0823  
                        u5240 13DD                          u5080 09A0                          u6040 1422  
                        u3561 1DE2                          u3641 0870                          u3625 084B  
                        u5305 1215                          u5401 112E                          u3481 0822  
                        u3465 0810                          u5241 13DC                          u5225 13C6  
                        u5081 099F                          u6041 1421                          u3570 1DF4  
                        u4610 1338                          u4530 12E3                          u5330 124C  
                        u5170 13A0                          u5090 0A64                          u6050 143F  
                        u3571 1DF3                          u4611 1337                          u4531 12E2  
                        u5331 124B                          u5315 122A                          u3475 0817  
                        u5171 139F                          u5091 0A63                          u3580 1E13  
                        u4700 1738                          u4620 16E9                          u5340 1C9E  
                        u3660 0883                          u5420 1D28                          u5260 13EE  
                        u5500 0DA0                          u6060 1451                          u3581 1E12  
                        u4605 1326                          u4525 12D6                          u4701 1737  
                        u4621 16E8                          u5341 1C9D                          u3661 0882  
                        u5325 123E                          u5421 1D27                          u5261 13ED  
                        u5165 138B                          u5501 0D9F                          u6117 1C50  
                        u3590 1C13                          u4550 1300                          u4630 16EF  
                        u3670 088A                          u5270 11FF                          u5350 10EC  
                        u5190 13B9                          u5510 0DAE                          u5430 1C77  
                        u3591 1C12                          u4551 12FF                          u4631 16EE  
                        u3671 0889                          u3655 0873                          u5271 11FE  
                        u5351 10EB                          u5415 1D16                          u5255 13E0  
                        u5191 13B8                          u5175 139C                          u5511 0DAD  
                        u6207 1D6D                          u6127 1D7C                          u5431 1C76  
                        u6055 143B                          u4720 1748                          u4640 16F9  
                        u5600 0F9A                          u5520 0E03                          u5440 1C89  
                        u3840 1C1D                          u6080 1484                          u3585 1E0F  
                        u4545 12F3                          u4721 1747                          u4641 16F8  
                        u5185 13AC                          u5601 0F99                          u5521 0E02  
                        u6217 1F6E                          u6137 1D93                          u5441 1C88  
                        u3841 1C1C                          u6081 1483                          u6065 144D  
                        u4570 130F                          u4810 1795                          u4730 1750  
                        u4650 1705                          u3690 089B                          u5290 1213  
                        u5370 1100                          u5610 0FB1                          u5530 0E4A  
                        u5450 1EE3                          u3850 10D4                          u4571 130E  
                        u4811 1794                          u4731 174F                          u4715 1739  
                        u4651 1704                          u3691 089A                          u5291 1212  
                        u5371 10FF                          u5611 0FB0                          u5531 0E47  
                        u6227 1F7D                          u6147 1DA1                          u6075 146F  
                        u3851 10D3                          u4580 1315                          u4820 1799  
                        u4660 170B                          u5380 1112                          u4900 152E  
                        u5700 01BE                          u5620 0022                          u5540 0E50  
                        u5460 1F07                          _RCIF 0065                          u4581 1314  
                        u4565 1304                          u4821 1798                          u4805 1784  
                        u4661 170A                          u3685 088D                          u5285 1204  
                        u5381 1111                          u5365 10F1                          u4901 152D  
                        u5701 01BD                          u5621 0FFA                          u5541 0E4F  
                        u6237 1F8C                          u6157 1DB0                          u6085 1480  
                        u4590 1319                          u4830 17AD                          u4750 1763  
                        u4670 1715                          u5710 01D6                          u5630 002B  
                        u5550 0E7C                          u5470 1F19                          u4591 1318  
                        u4831 17AC                          u4751 1762                          u4671 1714  
                        u4911 1537                          u5711 01D5                          u5631 002A  
                        u5615 0FAD                          u5551 0E7B                          u6247 1C68  
                        u6167 1DC9                          u5471 1F18                          u6095 1490  
                        u4760 176A                          u4680 171E                          u4912 153E  
                        u5720 0202                          u5640 004A                          u5560 0EA0  
                        u5480 0D2C                          u4841 17C7                          u4761 1769  
                        u4745 1752                          u4681 171D                          u5385 110E  
                        u5721 0201                          u5641 0049                          u5625 0FF5  
                        u5561 0E9F                          u5481 0D2B                          u6177 1DD7  
                        u4850 17D2                          u4842 17CE                          u4690 1723  
                        u5810 048E                          u5730 0216                          u5650 0059  
                        u5570 0EB6                          u5490 0D56                          u4851 17D1  
                        u4691 1722                          u5395 1121                          u5811 048D  
                        u5731 0215                          u5651 0058                          u5491 0D55  
                        u6187 1D48                          u4780 177A                          u4940 1554  
                        u4860 14CC                          u5900 0579                          u5820 04AE  
                        u5660 0070                          u5580 0F0D                          u4781 1779  
                        u4941 1553                          u4925 153F                          u4861 14CB  
                        u5901 0578                          u5821 04AD                          u5805 0431  
                        u5725 01FE                          u5661 006F                          u5581 0F0C  
                        u6197 1D5F                          u4790 1782                          u4950 155C  
                        u4870 14E4                          u5910 0592                          u5830 04D6  
                        u5750 02C3                          u5590 0F7A                          u4791 1781  
                        u4775 176B                          u4951 155B                          u4935 1547  
                        u4871 14E3                          u5911 0591                          u5831 04D5  
                        u5751 02C2                          u5655 0055                          u5591 0F79  
                        u5575 0EB1                          u4880 14FB                          u5920 05A4  
                        u5840 04EB                          u5760 02EA                          u5680 0180  
                        u4961 1565                          u5921 05A3                          u5905 0575  
                        u5841 04EA                          u5761 02E9                          u5745 022D  
                        u5681 017F                          u4962 156C                          u4890 150D  
                        u5930 05B2                          u5850 04F3                          u5770 02F9  
                        u5690 018F                          u5931 05B1                          u5851 04F2  
                        u5771 02F8                          u5691 018E                          u5675 013F  
                        u5940 05C8                          u5780 0322                          u4885 14F7  
                        u5941 05C7                          u5781 0321                          u5765 02E6  
                        u5685 017C                          u4990 1582                          u5950 05E0  
                        u5870 0541                          u4991 1581                          u4975 156D  
                        u4895 1509                          u5951 05DF                          u5871 0540  
                        u5775 02F5                          u5960 05FE                          u5880 0550  
                        u4985 1575                          u5961 05FD                          u5945 05C4  
                        u5881 054F                          u5865 0500                          u5970 061D  
                        u5890 055B                          u5971 061C                          u5955 05DC  
                        u5891 055A                          u5875 053D                          u5795 039F  
                        u5980 062F                          u5981 062E                          u5895 0557  
                        u5995 0652                          _TRMT 04C1             ?_Lcd_Write_String 0075  
             __end_of_SPI_ADC 1D75                          _cont 006E                          _main 06D6  
                ___ftpack@arg 0072                  ___ftpack@exp 0075                          btemp 007E  
                        start 000C            ??_Lcd_Write_String 0077                  _sprintf$1231 00D1  
             __end_of_Lcd_Cmd 1C71             ___bmul@multiplier 002B                  ___ftmul@cntr 003A  
                ___ftmul@sign 003B                         ??_ISR 0070                  ___fttol@exp1 0052  
                ___fttol@lval 004E                         ?_main 0070               __end_of___awdiv 12BE  
             __end_of___ftadd 1800                         STR_10 10BE                         STR_11 10C8  
             __end_of___awmod 1191               __end_of___ftdiv 14B9               __end_of___ftneg 1C16  
                       _ANSEL 0188               __end_of___lldiv 1255               __end_of___ftmul 159E  
             ___awdiv@divisor 0020               __end_of___llmod 1138               __end_of___ftsub 1CBA  
             __end_of___fttol 08B4               __end_of___lwdiv 1ED4                         i1l101 1BE5  
             __end_of___lwmod 1E51               ___awdiv@counter 0024                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
     __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085                         _TRISB 0086  
                       _TRISD 0088                         _TRISE 0089                         _TXREG 0019  
                ___lltoft@exp 0025                 ___awtoft@sign 0025               __end_of_dpowers 1086  
             __end_of_initOsc 11ED              __end_of_SPI_CONT 1DDF                         _scale 0A5D  
             __end_of_isdigit 1C41              __end_of_SPI_TEMP 1DA9                 ___ftpack@sign 0076  
                       _setup 1E51                         pclath 000A               __end_of_spiInit 10E2  
             __end_of_spiRead 1C0C                         status 0003                         wtemp0 007E  
             __end_of_sprintf 06D6                   ?_USART_Init 0070              __end_of_Lcd_Init 1FAF  
            __end_of_Lcd_Port 1BD9               __initialization 000F                  __end_of_main 07E9  
                      ??_main 006C                 ___fttol@sign1 004D            __size_of_Lcd_Clear 000D  
        __size_of__tdiv_to_l_ 00BD                     ??_SPI_ADC 0073              ___llmod@dividend 002A  
                      ?_scale 003C                   initOsc@IRCF 0074              ___awdiv@dividend 0022  
         _USART_Init_BaudRate 1BDF                        ?_setup 0070              __end_of___awtoft 1CE3  
            __end_of___ftpack 133A                        _ANSELH 0189              __end_of___lltoft 1D41  
                   ??_Lcd_Cmd 0073                        _SPBRGH 009A       __size_of_Lcd_Write_Char 0016  
                      _TRISC0 0438                        _TRISC1 0439                        _TRISC2 043A  
                      _TRISC3 043B                        _TRISC5 043D                        _SSPCON 0014  
                      _SSPBUF 0013              __end_of__powers_ 1037                        ___bmul 07E9  
                      ___ftge 1DDF                        ___wmul 0803                     ??___awdiv 0079  
                   ??___ftadd 0052                     ??___awmod 0076          ?_USART_Init_BaudRate 0070  
                   ??___ftdiv 0042                     ??___ftneg 0075                     ??___lldiv 0020  
                   ??___ftmul 0032                     ??___llmod 002E                     ??___ftsub 007A  
                   ??___fttol 0049                     ??___lwdiv 0078                     ??___lwmod 0076  
                      _fround 08B4              ___awdiv@quotient 0026               ___awmod@divisor 0072  
             ___awmod@counter 0077         ___ftmul@f3_as_product 0037                     ??_initOsc 0072  
                   ??_isdigit 0072                        saved_w 007E              __end_of_spiWrite 1BDF  
                   ??_spiInit 0075                     ??_spiRead 0072           __size_of_USART_Init 0008  
                   ??_sprintf 0063               Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076  
     __end_of__initialization 001E                    ___ftadd@f1 004C                    ___ftadd@f2 004F  
                  ___ftge@ff1 0072                    ___ftge@ff2 0075             __end_of_Lcd_Clear 1C2F  
                  ___ftdiv@f1 003F                    ___ftdiv@f2 003C                    ___ftdiv@f3 0047  
                  ___ftneg@f1 0072                    ___awtoft@c 0020           ___bmul@multiplicand 0028  
                  ___ftmul@f1 002C                    ___ftmul@f2 002F                    ___ftsub@f1 005C  
                  ___ftsub@f2 0059                    ___fttol@f1 0045                __pcstackCOMMON 0070  
       ??_USART_Init_BaudRate 0072                    ___lltoft@c 0020                 __end_of_scale 0D18  
                   ?_SPI_CONT 0070                 __end_of_setup 1E8E                     ?_SPI_TEMP 0070  
              _Lcd_Set_Cursor 1C71                    __div_to_l_ 159E                     ?_Lcd_Init 0070  
                   ?_Lcd_Port 0070               __div_to_l_@exp1 002D               __div_to_l_@cntr 002C  
                     ??_scale 003F               __div_to_l_@quot 0028                  sprintf@width 00D7  
                     ??_setup 0076                  Write_USART@a 0072                    __pbssBANK0 006E  
                  __pbssBANK1 00A0                    _data_total 00A0                 __div_to_l_@f1 0072  
               __div_to_l_@f2 0075                    __pmaintext 06D6                       ?___bmul 0028  
                     ?___ftge 0072                       ?___wmul 0072                 ??_Write_USART 0072  
                  __pintentry 0004       __size_of_spiReceiveWait 0007                    ??_SPI_CONT 0073  
                  ??_SPI_TEMP 0073                       ?_fround 003C     __size_of_Lcd_Write_String 0046  
                   ?___awtoft 0020                     ?___ftpack 0072        __end_of_Lcd_Set_Cursor 1C95  
                   ?___lltoft 0020        __size_of_ADC_to_string 004A    __end_of_Write_USART_String 1D0E  
                  ??_Lcd_Init 0076                    ??_Lcd_Port 0072                       _SPI_ADC 1D41  
                     _SSPSTAT 0094                    __stringtab 1000                _Lcd_Write_Char 1C41  
                     _Lcd_Cmd 1C57                  ??_USART_Init 0072             __end_of__npowers_ 105E  
                  _scale$1230 0041                     _ADC_val_M 00B4                     ?_spiWrite 0070  
             __size_of___bmul 0017                 ?_Show_val_LCD 0070               __size_of___ftge 0038  
                     ___awdiv 1255                       ___ftadd 16CA                       ___awmod 1138  
                     ___ftdiv 13F7                       ___ftneg 1C0C                       ___lldiv 11ED  
             __size_of___wmul 0025                       ___ftmul 14B9                       ___llmod 10E2  
                     ___ftsub 1C95                       ___fttol 0828                       ___lwdiv 1E8E  
                     ___lwmod 1E17                    ??___awtoft 0023                    ??___ftpack 0077  
             __size_of_fround 01A9               ?_Lcd_Set_Cursor 0076                    ??___lltoft 0024  
                     __ptext1 1E51                       __ptext2 10CC                       __ptext3 1191  
                     __ptext4 1BDF                       __ptext5 1BF3                       __ptext6 13F7  
                     __ptext7 1CBA                       __ptext8 1CE3                       __ptext9 1C16  
                __size_of_ISR 0007                   ?__div_to_l_ 0072                       _dpowers 105E  
                     _initOsc 1191           __end_of_Write_USART 1C22                       _isdigit 1C2F  
                     _val_ADC 007B              ___awmod@dividend 0074                       _spiInit 10CC  
                     _spiRead 1C03            __end_of_USART_Init 1BFB                       _sprintf 0D18  
                     clrloop0 1BFC        __end_of_Lcd_Write_Char 1C57          end_of_initialization 001E  
               _ADC_to_string 1F1A               ___lldiv@divisor 0072               ___lldiv@counter 0025  
              ??_Show_val_LCD 0022                     _RCSTAbits 0018                    ??_spiWrite 0072  
                     psplit$0 24003D                     Lcd_Port@a 0072                __tdiv_to_l_@f1 0072  
              __tdiv_to_l_@f2 0075                 ??__tdiv_to_l_ 0020                     _PORTCbits 0007  
                   _PORTEbits 0009                   spiWrite@dat 0072               ?_Lcd_Write_Char 0070  
           Lcd_Write_String@a 0075             Lcd_Write_String@i 0020                ?_ADC_to_string 0070  
                 ___ftdiv@exp 004A                     _TXSTAbits 0098           __size_of__div_to_l_ 012C  
                 ___ftmul@exp 0036                     _Lcd_Clear 1C22                _spiReceiveWait 1BEC  
              __end_of___bmul 0800                __end_of___ftge 1E17                   _Write_USART 1C16  
              __end_of___wmul 0828              _Lcd_Write_String 1ED4                __end_of_fround 0A5D  
           __size_of_SPI_CONT 0036             __size_of_SPI_TEMP 0034           start_initialization 000F  
                 __end_of_ISR 1BEC           __end_of__tdiv_to_l_ 13F7             __size_of_Lcd_Init 004B  
                _hola_esclavo 006F             __size_of_Lcd_Port 0006               ___llmod@divisor 0026  
 __end_of_USART_Init_BaudRate 1BE5               ___llmod@counter 002F        __end_of_spiReceiveWait 1BF3  
                  ?_Lcd_Clear 0070                      ??___bmul 0029                      ??___ftge 0078  
                    ??___wmul 0076               Lcd_Write_Char@a 0074                      ??_fround 003F  
               sprintf@tmpval 00D9                    fround@prec 004B             __size_of___awtoft 0029  
           __size_of___ftpack 007C             __size_of___lltoft 0033                   __pbssCOMMON 007A  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00D1  
                _isdigit$1025 0072                      ?_SPI_ADC 0070          __end_of_Show_val_LCD 2000  
             ??_ADC_to_string 0069                      ?_Lcd_Cmd 0070                   sprintf@flag 00D5  
                 sprintf@eexp 00E1                   sprintf@fval 00E3                     _data_TEMP 00B9  
          _Write_USART_String 1CE3                   sprintf@prec 00E7                     _data_cont 00C9  
            ___lwdiv@dividend 0022               ?_spiReceiveWait 0070              ??_Lcd_Set_Cursor 0077  
         ?_Write_USART_String 0073                      ?___awdiv 0020                      ?___ftadd 004C  
                    ?___awmod 0072                      ?___ftdiv 003C                      ?___ftneg 0072  
                    ?___lldiv 0072                      ?___ftmul 002C                      ?___llmod 0026  
                    ?___ftsub 0059                     __npowers_ 1037                      ?___fttol 0045  
                    ?___lwdiv 0020                      ?___lwmod 0072             __size_of_spiWrite 0006  
                   __pstrings 1000                   __tdiv_to_l_ 133A                  ??__div_to_l_ 0020  
                    ?_initOsc 0070                      ?_isdigit 0070                      ?_spiInit 0072  
                    ?_spiRead 0070          ??_Write_USART_String 0075              ___lwdiv@quotient 0025  
                  pnum$text25 0024                      ?_sprintf 005F                __size_of_scale 02BB  
              __size_of_setup 003D                 _mv_temp_val_M 00B7          spiInit@sTransmitEdge 0074  
           interrupt_function 0004                ___wmul@product 0076                     clear_ram0 1BFB  
                    _PIE1bits 008C            spiInit@sDataSample 0072                      Lcd_Cmd@a 0075  
          __end_of__div_to_l_ 16CA                   ??_Lcd_Clear 0076                      _SPI_CONT 1DA9  
                    _SPI_TEMP 1D75                   __stringbase 100F             ___wmul@multiplier 0072  
            ??_Lcd_Write_Char 0073                      _Lcd_Init 1F64                      _Lcd_Port 1BD3  
            __size_of_SPI_ADC 0034      __end_of_Lcd_Write_String 1F1A              __size_of_Lcd_Cmd 001A  
                ?_Write_USART 0070              __size_of___awdiv 0069              __size_of___ftadd 0136  
            __size_of___awmod 0059              __size_of___ftdiv 00C2              __size_of___ftneg 000A  
            __size_of___lldiv 0068              __size_of___ftmul 00E5              __size_of___llmod 0056  
            __size_of___ftsub 0025              __size_of___fttol 008C              __size_of___lwdiv 0046  
            __size_of___lwmod 003A                      ___awtoft 1CBA                      ___ftpack 12BE  
                 _fround$1228 0048                   _fround$1229 0045            __end_of__stringtab 1010  
                    ___lltoft 1D0E         __size_of_Show_val_LCD 0051                      _data_ADC 00C1  
                  sprintf@val 00DD              __size_of_initOsc 005C              __size_of_isdigit 0012  
             ___lwdiv@divisor 0020               ___lwdiv@counter 0024                      __ptext10 1FAF  
                    __ptext11 1ED4                      __ptext20 1F64                      __ptext12 1C41  
                    __ptext21 1C22                      __ptext13 1C71                      __ptext30 08B4  
                    __ptext22 1C57                      __ptext14 1D75                      __ptext31 1E17  
                    __ptext23 1BD3                      __ptext15 1DA9                      __ptext40 11ED  
                    __ptext32 1E8E                      __ptext24 1F1A                      __ptext16 1D41  
                    __ptext41 0828                      __ptext33 14B9                      __ptext25 0D18  
                    __ptext17 1BD9                      __ptext42 1C95                      __ptext34 07E9  
                    __ptext26 0A5D                      __ptext18 1C03                      __ptext43 16CA  
                    __ptext35 133A                      __ptext27 1138                      __ptext19 1BEC  
                    __ptext44 12BE                      __ptext36 159E                      __ptext28 1255  
                    __ptext45 1C0C                      __ptext37 0803                      __ptext29 1C2F  
                    __ptext46 1DDF                      __ptext38 1D0E                      __ptext47 1BE5  
                    __ptext39 10E2              __size_of_spiInit 0016              __size_of_spiRead 0009  
                    __powers_ 1010              __size_of_sprintf F9BE                 __size_of_main 0113  
                    _val_TEMP 007A                      _spiWrite 1BD9                  _Show_val_LCD 1FAF  
                spiInit@sType 0075             spiInit@sClockIdle 0073            pnum$text25_split_1 003D  
                  _INTCONbits 000B           Write_USART_String@a 0073           Write_USART_String@i 0076  
                    isdigit@c 0073                      scale@scl 0044                      intlevel1 0000  
                   sprintf@ap 00D4              __tdiv_to_l_@exp1 0029              __tdiv_to_l_@cntr 0028  
                   sprintf@sp 00E6              __tdiv_to_l_@quot 0024              ___lwmod@dividend 0074  
            ___lldiv@dividend 0076              ??_spiReceiveWait 0072                     stringcode 100A  
                  _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006            Lcd_Set_Cursor@temp 0079  
                ?__tdiv_to_l_ 0072                      sprintf@c 00E9                      sprintf@f 005F  
            ___lldiv@quotient 0021               ___lwmod@divisor 0072               ___lwmod@counter 0077  
                    stringdir 100A                      stringtab 1000         __end_of_ADC_to_string 1F64  
                  _USART_Init 1BF3  
