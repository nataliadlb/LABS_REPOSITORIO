

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Feb 18 21:07:07 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0017                     	;# 
   328  0018                     	;# 
   329  0019                     	;# 
   330  001A                     	;# 
   331  001B                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  001D                     	;# 
   335  001E                     	;# 
   336  001F                     	;# 
   337  0081                     	;# 
   338  0085                     	;# 
   339  0086                     	;# 
   340  0087                     	;# 
   341  0088                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  000E                     	;# 
   396  000F                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0014                     	;# 
   402  0015                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  001D                     	;# 
   413  001E                     	;# 
   414  001F                     	;# 
   415  0081                     	;# 
   416  0085                     	;# 
   417  0086                     	;# 
   418  0087                     	;# 
   419  0088                     	;# 
   420  0089                     	;# 
   421  008C                     	;# 
   422  008D                     	;# 
   423  008E                     	;# 
   424  008F                     	;# 
   425  0090                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0093                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0094                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0098                     	;# 
   436  0099                     	;# 
   437  009A                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  009F                     	;# 
   443  0105                     	;# 
   444  0107                     	;# 
   445  0108                     	;# 
   446  0109                     	;# 
   447  010C                     	;# 
   448  010C                     	;# 
   449  010D                     	;# 
   450  010E                     	;# 
   451  010F                     	;# 
   452  0185                     	;# 
   453  0187                     	;# 
   454  0188                     	;# 
   455  0189                     	;# 
   456  018C                     	;# 
   457  018D                     	;# 
   458  0000                     	;# 
   459  0001                     	;# 
   460  0002                     	;# 
   461  0003                     	;# 
   462  0004                     	;# 
   463  0005                     	;# 
   464  0006                     	;# 
   465  0007                     	;# 
   466  0008                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000D                     	;# 
   472  000E                     	;# 
   473  000E                     	;# 
   474  000F                     	;# 
   475  0010                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0014                     	;# 
   480  0015                     	;# 
   481  0015                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001B                     	;# 
   489  001C                     	;# 
   490  001D                     	;# 
   491  001E                     	;# 
   492  001F                     	;# 
   493  0081                     	;# 
   494  0085                     	;# 
   495  0086                     	;# 
   496  0087                     	;# 
   497  0088                     	;# 
   498  0089                     	;# 
   499  008C                     	;# 
   500  008D                     	;# 
   501  008E                     	;# 
   502  008F                     	;# 
   503  0090                     	;# 
   504  0091                     	;# 
   505  0092                     	;# 
   506  0093                     	;# 
   507  0093                     	;# 
   508  0093                     	;# 
   509  0094                     	;# 
   510  0095                     	;# 
   511  0096                     	;# 
   512  0097                     	;# 
   513  0098                     	;# 
   514  0099                     	;# 
   515  009A                     	;# 
   516  009B                     	;# 
   517  009C                     	;# 
   518  009D                     	;# 
   519  009E                     	;# 
   520  009F                     	;# 
   521  0105                     	;# 
   522  0107                     	;# 
   523  0108                     	;# 
   524  0109                     	;# 
   525  010C                     	;# 
   526  010C                     	;# 
   527  010D                     	;# 
   528  010E                     	;# 
   529  010F                     	;# 
   530  0185                     	;# 
   531  0187                     	;# 
   532  0188                     	;# 
   533  0189                     	;# 
   534  018C                     	;# 
   535  018D                     	;# 
   536  0013                     _SSPBUF	set	19
   537  0014                     _SSPCON	set	20
   538  001A                     _RCREG	set	26
   539  0019                     _TXREG	set	25
   540  000B                     _INTCONbits	set	11
   541  0018                     _RCSTAbits	set	24
   542  0009                     _PORTEbits	set	9
   543  0009                     _PORTE	set	9
   544  0008                     _PORTD	set	8
   545  0007                     _PORTC	set	7
   546  0005                     _PORTA	set	5
   547  0006                     _PORTB	set	6
   548  0007                     _PORTCbits	set	7
   549  0065                     _RCIF	set	101
   550  0094                     _SSPSTATbits	set	148
   551  0094                     _SSPSTAT	set	148
   552  008C                     _PIE1bits	set	140
   553  0099                     _SPBRG	set	153
   554  009A                     _SPBRGH	set	154
   555  0098                     _TXSTAbits	set	152
   556  008F                     _OSCCONbits	set	143
   557  0089                     _TRISE	set	137
   558  0087                     _TRISCbits	set	135
   559  0086                     _TRISB	set	134
   560  0085                     _TRISAbits	set	133
   561  0085                     _TRISA	set	133
   562  0088                     _TRISD	set	136
   563  043B                     _TRISC3	set	1083
   564  043D                     _TRISC5	set	1085
   565  04C1                     _TRMT	set	1217
   566  0189                     _ANSELH	set	393
   567  0188                     _ANSEL	set	392
   568                           
   569                           	psect	strings
   570  015B                     __pstrings:
   571  015B                     stringtab:
   572  015B                     __stringtab:
   573  015B                     stringcode:	
   574                           ;	String table - string pointers are 1 byte each
   575                           
   576  015B                     stringdir:
   577  015B  3001               	movlw	high stringdir
   578  015C  008A               	movwf	10
   579  015D  0804               	movf	4,w
   580  015E  0A84               	incf	4,f
   581  015F  0782               	addwf	2,f
   582  0160                     __stringbase:
   583  0160  3400               	retlw	0
   584  0161                     __end_of__stringtab:
   585  0161                     STR_2:
   586  0161  3453               	retlw	83	;'S'
   587  0162  3431               	retlw	49	;'1'
   588  0163  343A               	retlw	58	;':'
   589  0164  3420               	retlw	32	;' '
   590  0165  3420               	retlw	32	;' '
   591  0166  3420               	retlw	32	;' '
   592  0167  3453               	retlw	83	;'S'
   593  0168  3432               	retlw	50	;'2'
   594  0169  343A               	retlw	58	;':'
   595  016A  3420               	retlw	32	;' '
   596  016B  3420               	retlw	32	;' '
   597  016C  3420               	retlw	32	;' '
   598  016D  3453               	retlw	83	;'S'
   599  016E  3433               	retlw	51	;'3'
   600  016F  343A               	retlw	58	;':'
   601  0170  3400               	retlw	0
   602  0171                     STR_1:
   603  0171  3453               	retlw	83	;'S'
   604  0172  3431               	retlw	49	;'1'
   605  0173  3420               	retlw	32	;' '
   606  0174  3420               	retlw	32	;' '
   607  0175  3420               	retlw	32	;' '
   608  0176  3453               	retlw	83	;'S'
   609  0177  3432               	retlw	50	;'2'
   610  0178  3420               	retlw	32	;' '
   611  0179  3420               	retlw	32	;' '
   612  017A  3420               	retlw	32	;' '
   613  017B  3453               	retlw	83	;'S'
   614  017C  3433               	retlw	51	;'3'
   615  017D  3420               	retlw	32	;' '
   616  017E  340A               	retlw	10
   617  017F  3400               	retlw	0
   618                           
   619                           	psect	cinit
   620  000F                     start_initialization:	
   621                           ; #config settings
   622                           
   623  000F                     __initialization:
   624                           
   625                           ; Clear objects allocated to BANK0
   626  000F  1383               	bcf	3,7	;select IRP bank0
   627  0010  3020               	movlw	low __pbssBANK0
   628  0011  0084               	movwf	4
   629  0012  3034               	movlw	low (__pbssBANK0+20)
   630  0013  120A  118A  2269  120A  118A  	fcall	clear_ram0
   631  0018                     end_of_initialization:	
   632                           ;End of C runtime variable initialization code
   633                           
   634  0018                     __end_of__initialization:
   635  0018  0183               	clrf	3
   636  0019  120A  118A  281C   	ljmp	_main	;jump to C main() function
   637                           
   638                           	psect	bssBANK0
   639  0020                     __pbssBANK0:
   640  0020                     _data_total:
   641  0020                     	ds	20
   642                           
   643                           	psect	clrtext
   644  0269                     clear_ram0:	
   645                           ;	Called with FSR containing the base address, and
   646                           ;	W with the last address+1
   647                           
   648  0269  0064               	clrwdt	;clear the watchdog before getting into this loop
   649  026A                     clrloop0:
   650  026A  0180               	clrf	0	;clear RAM location pointed to by FSR
   651  026B  0A84               	incf	4,f	;increment pointer
   652  026C  0604               	xorwf	4,w	;XOR with final address
   653  026D  1903               	btfsc	3,2	;have we reached the end yet?
   654  026E  3400               	retlw	0	;all done for this memory range, return
   655  026F  0604               	xorwf	4,w	;XOR again to restore value
   656  0270  2A6A               	goto	clrloop0	;do the next byte
   657                           
   658                           	psect	cstackCOMMON
   659  0070                     __pcstackCOMMON:
   660  0070                     ?_setup:
   661  0070                     ?_Lcd_Init:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_Lcd_Clear:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ?_spiRead:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_Write_USART_String:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0070                     ?_Show_val_LCD:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0070                     ?_initOsc:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0070                     ?_USART_Init_BaudRate:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0070                     ?_USART_Init:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0070                     ?_USART_INTERRUPT:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0070                     ?_Lcd_Write_String:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0070                     ?_Lcd_Port:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0070                     ?_Lcd_Cmd:	
   695                           ; 1 bytes @ 0x0
   696                           
   697  0070                     ?_ISR:	
   698                           ; 1 bytes @ 0x0
   699                           
   700  0070                     ??_ISR:	
   701                           ; 1 bytes @ 0x0
   702                           
   703  0070                     ?_main:	
   704                           ; 1 bytes @ 0x0
   705                           
   706  0070                     ?_Lcd_Write_Char:	
   707                           ; 1 bytes @ 0x0
   708                           
   709  0070                     ?_Write_USART:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_spiReceiveWait:	
   713                           ; 1 bytes @ 0x0
   714                           
   715                           
   716                           ; 1 bytes @ 0x0
   717  0070                     	ds	2
   718  0072                     ??_spiRead:
   719  0072                     ??_initOsc:	
   720                           ; 1 bytes @ 0x2
   721                           
   722  0072                     ??_USART_Init_BaudRate:	
   723                           ; 1 bytes @ 0x2
   724                           
   725  0072                     ??_USART_Init:	
   726                           ; 1 bytes @ 0x2
   727                           
   728  0072                     ??_USART_INTERRUPT:	
   729                           ; 1 bytes @ 0x2
   730                           
   731  0072                     ?_spiInit:	
   732                           ; 1 bytes @ 0x2
   733                           
   734  0072                     ??_Lcd_Port:	
   735                           ; 1 bytes @ 0x2
   736                           
   737  0072                     ??_Write_USART:	
   738                           ; 1 bytes @ 0x2
   739                           
   740  0072                     ??_spiReceiveWait:	
   741                           ; 1 bytes @ 0x2
   742                           
   743  0072                     Lcd_Port@a:	
   744                           ; 1 bytes @ 0x2
   745                           
   746  0072                     Write_USART@a:	
   747                           ; 1 bytes @ 0x2
   748                           
   749  0072                     spiInit@sDataSample:	
   750                           ; 1 bytes @ 0x2
   751                           
   752                           
   753                           ; 1 bytes @ 0x2
   754  0072                     	ds	1
   755  0073                     ??_Write_USART_String:
   756  0073                     ??_Lcd_Cmd:	
   757                           ; 1 bytes @ 0x3
   758                           
   759  0073                     ??_Lcd_Write_Char:	
   760                           ; 1 bytes @ 0x3
   761                           
   762  0073                     spiInit@sClockIdle:	
   763                           ; 1 bytes @ 0x3
   764                           
   765                           
   766                           ; 1 bytes @ 0x3
   767  0073                     	ds	1
   768  0074                     initOsc@IRCF:
   769  0074                     Lcd_Write_Char@a:	
   770                           ; 1 bytes @ 0x4
   771                           
   772  0074                     Write_USART_String@a:	
   773                           ; 1 bytes @ 0x4
   774                           
   775  0074                     spiInit@sTransmitEdge:	
   776                           ; 1 bytes @ 0x4
   777                           
   778                           
   779                           ; 1 bytes @ 0x4
   780  0074                     	ds	1
   781  0075                     ??_spiInit:
   782  0075                     ??_Lcd_Write_String:	
   783                           ; 1 bytes @ 0x5
   784                           
   785  0075                     Lcd_Cmd@a:	
   786                           ; 1 bytes @ 0x5
   787                           
   788  0075                     Write_USART_String@i:	
   789                           ; 1 bytes @ 0x5
   790                           
   791  0075                     spiInit@sType:	
   792                           ; 1 bytes @ 0x5
   793                           
   794  0075                     Lcd_Write_String@i:	
   795                           ; 1 bytes @ 0x5
   796                           
   797                           
   798                           ; 2 bytes @ 0x5
   799  0075                     	ds	1
   800  0076                     ??_setup:
   801  0076                     ??_Lcd_Init:	
   802                           ; 1 bytes @ 0x6
   803                           
   804  0076                     ??_Lcd_Clear:	
   805                           ; 1 bytes @ 0x6
   806                           
   807  0076                     ?_Lcd_Set_Cursor:	
   808                           ; 1 bytes @ 0x6
   809                           
   810  0076                     Lcd_Set_Cursor@b:	
   811                           ; 1 bytes @ 0x6
   812                           
   813                           
   814                           ; 1 bytes @ 0x6
   815  0076                     	ds	1
   816  0077                     ??_Lcd_Set_Cursor:
   817  0077                     Lcd_Write_String@a:	
   818                           ; 1 bytes @ 0x7
   819                           
   820                           
   821                           ; 1 bytes @ 0x7
   822  0077                     	ds	1
   823  0078                     Lcd_Set_Cursor@a:
   824                           
   825                           ; 1 bytes @ 0x8
   826  0078                     	ds	1
   827  0079                     Lcd_Set_Cursor@temp:
   828                           
   829                           ; 1 bytes @ 0x9
   830  0079                     	ds	1
   831  007A                     ??_Show_val_LCD:
   832                           
   833                           ; 1 bytes @ 0xA
   834  007A                     	ds	1
   835                           
   836                           	psect	cstackBANK0
   837  0034                     __pcstackBANK0:
   838  0034                     ??_main:
   839                           
   840                           ; 1 bytes @ 0x0
   841  0034                     	ds	3
   842                           
   843                           	psect	maintext
   844  001C                     __pmaintext:	
   845 ;;
   846 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   847 ;;
   848 ;; *************** function _main *****************
   849 ;; Defined at:
   850 ;;		line 83 in file "main_maestro.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : B00/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   864 ;;      Params:         0       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0
   866 ;;      Temps:          0       3       0       0       0
   867 ;;      Totals:         0       3       0       0       0
   868 ;;Total ram usage:        3 bytes
   869 ;; Hardware stack levels required when called:    5
   870 ;; This function calls:
   871 ;;		_Lcd_Clear
   872 ;;		_Lcd_Init
   873 ;;		_Show_val_LCD
   874 ;;		_Write_USART_String
   875 ;;		_setup
   876 ;;		_spiRead
   877 ;; This function is called by:
   878 ;;		Startup code after reset
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function _main
   884  001C                     _main:
   885  001C                     l1052:	
   886                           ;incstack = 0
   887                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   888                           
   889                           
   890                           ;main_maestro.c: 84:     setup();
   891  001C  120A  118A  2122  120A  118A  	fcall	_setup
   892  0021                     l1054:
   893                           
   894                           ;main_maestro.c: 85:     TRISD = 0x00;
   895  0021  1683               	bsf	3,5	;RP0=1, select bank1
   896  0022  1303               	bcf	3,6	;RP1=0, select bank1
   897  0023  0188               	clrf	8	;volatile
   898  0024                     l1056:
   899                           
   900                           ;main_maestro.c: 86:     Lcd_Init();
   901  0024  120A  118A  20D7  120A  118A  	fcall	_Lcd_Init
   902  0029                     l1058:
   903                           
   904                           ;main_maestro.c: 87:     Lcd_Clear();
   905  0029  120A  118A  2247  120A  118A  	fcall	_Lcd_Clear
   906  002E                     l1060:
   907                           
   908                           ;main_maestro.c: 94:         PORTCbits.RC1 = 0;
   909  002E  1283               	bcf	3,5	;RP0=0, select bank0
   910  002F  1303               	bcf	3,6	;RP1=0, select bank0
   911  0030  1087               	bcf	7,1	;volatile
   912  0031                     l1062:
   913                           
   914                           ;main_maestro.c: 95:        _delay((unsigned long)((1)*(8000000/4000.0)));
   915  0031  3003               	movlw	3
   916  0032  1283               	bcf	3,5	;RP0=0, select bank0
   917  0033  1303               	bcf	3,6	;RP1=0, select bank0
   918  0034  00B5               	movwf	??_main+1
   919  0035  3097               	movlw	151
   920  0036  00B4               	movwf	??_main
   921  0037                     u147:
   922  0037  0BB4               	decfsz	??_main,f
   923  0038  2837               	goto	u147
   924  0039  0BB5               	decfsz	??_main+1,f
   925  003A  2837               	goto	u147
   926  003B                     l1064:
   927                           
   928                           ;main_maestro.c: 98:        PORTB = spiRead();
   929  003B  120A  118A  2260  120A  118A  	fcall	_spiRead
   930  0040  1283               	bcf	3,5	;RP0=0, select bank0
   931  0041  1303               	bcf	3,6	;RP1=0, select bank0
   932  0042  0086               	movwf	6	;volatile
   933  0043                     l1066:
   934                           
   935                           ;main_maestro.c: 100:        _delay((unsigned long)((1)*(8000000/4000.0)));
   936  0043  3003               	movlw	3
   937  0044  1283               	bcf	3,5	;RP0=0, select bank0
   938  0045  1303               	bcf	3,6	;RP1=0, select bank0
   939  0046  00B5               	movwf	??_main+1
   940  0047  3097               	movlw	151
   941  0048  00B4               	movwf	??_main
   942  0049                     u157:
   943  0049  0BB4               	decfsz	??_main,f
   944  004A  2849               	goto	u157
   945  004B  0BB5               	decfsz	??_main+1,f
   946  004C  2849               	goto	u157
   947  004D                     l1068:
   948                           
   949                           ;main_maestro.c: 101:        PORTCbits.RC1 = 1;
   950  004D  1283               	bcf	3,5	;RP0=0, select bank0
   951  004E  1303               	bcf	3,6	;RP1=0, select bank0
   952  004F  1487               	bsf	7,1	;volatile
   953  0050                     l1070:
   954                           
   955                           ;main_maestro.c: 103:        _delay((unsigned long)((250)*(8000000/4000.0)));
   956  0050  3003               	movlw	3
   957  0051  1283               	bcf	3,5	;RP0=0, select bank0
   958  0052  1303               	bcf	3,6	;RP1=0, select bank0
   959  0053  00B6               	movwf	??_main+2
   960  0054  308A               	movlw	138
   961  0055  00B5               	movwf	??_main+1
   962  0056  3055               	movlw	85
   963  0057  00B4               	movwf	??_main
   964  0058                     u167:
   965  0058  0BB4               	decfsz	??_main,f
   966  0059  2858               	goto	u167
   967  005A  0BB5               	decfsz	??_main+1,f
   968  005B  2858               	goto	u167
   969  005C  0BB6               	decfsz	??_main+2,f
   970  005D  2858               	goto	u167
   971  005E                     l1072:
   972                           
   973                           ;main_maestro.c: 107:          Write_USART_String("S1   S2   S3 \n");
   974  005E  3011               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   975  005F  120A  118A  21C9  120A  118A  	fcall	_Write_USART_String
   976  0064                     l1074:
   977                           
   978                           ;main_maestro.c: 114:         Show_val_LCD();
   979  0064  120A  118A  221B  120A  118A  	fcall	_Show_val_LCD
   980  0069                     l1076:
   981                           
   982                           ;main_maestro.c: 115:         _delay((unsigned long)((500)*(8000000/4000.0)));
   983  0069  3006               	movlw	6
   984  006A  1283               	bcf	3,5	;RP0=0, select bank0
   985  006B  1303               	bcf	3,6	;RP1=0, select bank0
   986  006C  00B6               	movwf	??_main+2
   987  006D  3013               	movlw	19
   988  006E  00B5               	movwf	??_main+1
   989  006F  30AD               	movlw	173
   990  0070  00B4               	movwf	??_main
   991  0071                     u177:
   992  0071  0BB4               	decfsz	??_main,f
   993  0072  2871               	goto	u177
   994  0073  0BB5               	decfsz	??_main+1,f
   995  0074  2871               	goto	u177
   996  0075  0BB6               	decfsz	??_main+2,f
   997  0076  2871               	goto	u177
   998  0077  282E               	goto	l1060
   999  0078  120A  118A  280C   	ljmp	start
  1000  007B                     __end_of_main:
  1001                           
  1002                           	psect	text1
  1003  0260                     __ptext1:	
  1004 ;; *************** function _spiRead *****************
  1005 ;; Defined at:
  1006 ;;		line 49 in file "SPI.c"
  1007 ;; Parameters:    Size  Location     Type
  1008 ;;		None
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;		None
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      unsigned char 
  1013 ;; Registers used:
  1014 ;;		wreg, status,2, status,0, pclath, cstack
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1020 ;;      Params:         0       0       0       0       0
  1021 ;;      Locals:         0       0       0       0       0
  1022 ;;      Temps:          0       0       0       0       0
  1023 ;;      Totals:         0       0       0       0       0
  1024 ;;Total ram usage:        0 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    2
  1027 ;; This function calls:
  1028 ;;		_spiReceiveWait
  1029 ;; This function is called by:
  1030 ;;		_main
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034                           
  1035                           ;psect for function _spiRead
  1036  0260                     _spiRead:
  1037  0260                     l882:	
  1038                           ;incstack = 0
  1039                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1040                           
  1041                           
  1042                           ;SPI.c: 51:     spiReceiveWait();
  1043  0260  120A  118A  2279  120A  118A  	fcall	_spiReceiveWait
  1044  0265                     l884:
  1045                           
  1046                           ;SPI.c: 52:     return(SSPBUF);
  1047  0265  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0266  1303               	bcf	3,6	;RP1=0, select bank0
  1049  0267  0813               	movf	19,w	;volatile
  1050  0268                     l217:
  1051  0268  0008               	return
  1052  0269                     __end_of_spiRead:
  1053                           
  1054                           	psect	text2
  1055  0279                     __ptext2:	
  1056 ;; *************** function _spiReceiveWait *****************
  1057 ;; Defined at:
  1058 ;;		line 31 in file "SPI.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;		None
  1061 ;; Auto vars:     Size  Location     Type
  1062 ;;		None
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		None
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1072 ;;      Params:         0       0       0       0       0
  1073 ;;      Locals:         0       0       0       0       0
  1074 ;;      Temps:          0       0       0       0       0
  1075 ;;      Totals:         0       0       0       0       0
  1076 ;;Total ram usage:        0 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    1
  1079 ;; This function calls:
  1080 ;;		Nothing
  1081 ;; This function is called by:
  1082 ;;		_spiRead
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           
  1087                           ;psect for function _spiReceiveWait
  1088  0279                     _spiReceiveWait:
  1089  0279                     l824:	
  1090                           ;incstack = 0
  1091                           ; Regs used in _spiReceiveWait: []
  1092                           
  1093  0279                     l203:	
  1094                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  1095                           
  1096  0279  1683               	bsf	3,5	;RP0=1, select bank1
  1097  027A  1303               	bcf	3,6	;RP1=0, select bank1
  1098  027B  1C14               	btfss	20,0	;volatile
  1099  027C  2A7E               	goto	u61
  1100  027D  2A7F               	goto	u60
  1101  027E                     u61:
  1102  027E  2A79               	goto	l203
  1103  027F                     u60:
  1104  027F                     l206:
  1105  027F  0008               	return
  1106  0280                     __end_of_spiReceiveWait:
  1107                           
  1108                           	psect	text3
  1109  0122                     __ptext3:	
  1110 ;; *************** function _setup *****************
  1111 ;; Defined at:
  1112 ;;		line 125 in file "main_maestro.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;		None
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1126 ;;      Params:         0       0       0       0       0
  1127 ;;      Locals:         0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0
  1129 ;;      Totals:         0       0       0       0       0
  1130 ;;Total ram usage:        0 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    2
  1133 ;; This function calls:
  1134 ;;		_USART_INTERRUPT
  1135 ;;		_USART_Init
  1136 ;;		_USART_Init_BaudRate
  1137 ;;		_initOsc
  1138 ;;		_spiInit
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _setup
  1146  0122                     _setup:
  1147  0122                     l994:	
  1148                           ;incstack = 0
  1149                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1150                           
  1151                           
  1152                           ;main_maestro.c: 126:     initOsc(7);
  1153  0122  3007               	movlw	7
  1154  0123  120A  118A  207B  120A  118A  	fcall	_initOsc
  1155  0128                     l996:
  1156                           
  1157                           ;main_maestro.c: 127:     ANSEL = 0;
  1158  0128  1683               	bsf	3,5	;RP0=1, select bank3
  1159  0129  1703               	bsf	3,6	;RP1=1, select bank3
  1160  012A  0188               	clrf	8	;volatile
  1161  012B                     l998:
  1162                           
  1163                           ;main_maestro.c: 128:     ANSELH = 0;
  1164  012B  0189               	clrf	9	;volatile
  1165  012C                     l1000:
  1166                           
  1167                           ;main_maestro.c: 129:     TRISA = 0;
  1168  012C  1683               	bsf	3,5	;RP0=1, select bank1
  1169  012D  1303               	bcf	3,6	;RP1=0, select bank1
  1170  012E  0185               	clrf	5	;volatile
  1171  012F                     l1002:
  1172                           
  1173                           ;main_maestro.c: 130:     TRISAbits.TRISA5 = 1;
  1174  012F  1685               	bsf	5,5	;volatile
  1175  0130                     l1004:
  1176                           
  1177                           ;main_maestro.c: 131:     TRISB = 0;
  1178  0130  0186               	clrf	6	;volatile
  1179  0131                     l1006:
  1180                           
  1181                           ;main_maestro.c: 132:     TRISCbits.TRISC6 = 0;
  1182  0131  1307               	bcf	7,6	;volatile
  1183  0132                     l1008:
  1184                           
  1185                           ;main_maestro.c: 133:     TRISCbits.TRISC7 = 1;
  1186  0132  1787               	bsf	7,7	;volatile
  1187  0133                     l1010:
  1188                           
  1189                           ;main_maestro.c: 134:     TRISCbits.TRISC5 = 0;
  1190  0133  1287               	bcf	7,5	;volatile
  1191  0134                     l1012:
  1192                           
  1193                           ;main_maestro.c: 135:     TRISCbits.TRISC3 = 0;
  1194  0134  1187               	bcf	7,3	;volatile
  1195  0135                     l1014:
  1196                           
  1197                           ;main_maestro.c: 136:     TRISCbits.TRISC2 = 0;
  1198  0135  1107               	bcf	7,2	;volatile
  1199  0136                     l1016:
  1200                           
  1201                           ;main_maestro.c: 137:     TRISD = 0;
  1202  0136  0188               	clrf	8	;volatile
  1203  0137                     l1018:
  1204                           
  1205                           ;main_maestro.c: 138:     TRISE = 0;
  1206  0137  0189               	clrf	9	;volatile
  1207  0138                     l1020:
  1208                           
  1209                           ;main_maestro.c: 139:     PORTA = 0;
  1210  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1211  0139  1303               	bcf	3,6	;RP1=0, select bank0
  1212  013A  0185               	clrf	5	;volatile
  1213  013B                     l1022:
  1214                           
  1215                           ;main_maestro.c: 140:     PORTB = 0;
  1216  013B  0186               	clrf	6	;volatile
  1217  013C                     l1024:
  1218                           
  1219                           ;main_maestro.c: 141:     PORTC = 0;
  1220  013C  0187               	clrf	7	;volatile
  1221  013D                     l1026:
  1222                           
  1223                           ;main_maestro.c: 142:     PORTD = 0;
  1224  013D  0188               	clrf	8	;volatile
  1225  013E                     l1028:
  1226                           
  1227                           ;main_maestro.c: 143:     PORTE = 0;
  1228  013E  0189               	clrf	9	;volatile
  1229  013F                     l1030:
  1230                           
  1231                           ;main_maestro.c: 144:     USART_Init_BaudRate();
  1232  013F  120A  118A  2287  120A  118A  	fcall	_USART_Init_BaudRate
  1233  0144                     l1032:
  1234                           
  1235                           ;main_maestro.c: 145:     USART_Init();
  1236  0144  120A  118A  2271  120A  118A  	fcall	_USART_Init
  1237  0149                     l1034:
  1238                           
  1239                           ;main_maestro.c: 146:     USART_INTERRUPT();
  1240  0149  120A  118A  228D  120A  118A  	fcall	_USART_INTERRUPT
  1241  014E                     l1036:
  1242                           
  1243                           ;main_maestro.c: 150:     PORTCbits.RC1 = 0;
  1244  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1245  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1246  0150  1087               	bcf	7,1	;volatile
  1247  0151                     l1038:
  1248                           
  1249                           ;main_maestro.c: 152:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1250  0151  01F2               	clrf	spiInit@sDataSample
  1251  0152  01F3               	clrf	spiInit@sClockIdle
  1252  0153  01F4               	clrf	spiInit@sTransmitEdge
  1253  0154  3020               	movlw	32
  1254  0155  120A  118A  2205  120A  118A  	fcall	_spiInit
  1255  015A                     l74:
  1256  015A  0008               	return
  1257  015B                     __end_of_setup:
  1258                           
  1259                           	psect	text4
  1260  0205                     __ptext4:	
  1261 ;; *************** function _spiInit *****************
  1262 ;; Defined at:
  1263 ;;		line 14 in file "SPI.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  sType           1    wreg     enum E1264
  1266 ;;  sDataSample     1    2[COMMON] enum E1272
  1267 ;;  sClockIdle      1    3[COMMON] enum E1276
  1268 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  sType           1    5[COMMON] enum E1264
  1271 ;; Return value:  Size  Location     Type
  1272 ;;                  1    wreg      void 
  1273 ;; Registers used:
  1274 ;;		wreg, status,2, status,0
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/0
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1280 ;;      Params:         3       0       0       0       0
  1281 ;;      Locals:         1       0       0       0       0
  1282 ;;      Temps:          0       0       0       0       0
  1283 ;;      Totals:         4       0       0       0       0
  1284 ;;Total ram usage:        4 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    1
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_setup
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           
  1295                           ;psect for function _spiInit
  1296  0205                     _spiInit:
  1297                           
  1298                           ;incstack = 0
  1299                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1300                           ;spiInit@sType stored from wreg
  1301  0205  00F5               	movwf	spiInit@sType
  1302  0206                     l964:
  1303                           
  1304                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1305  0206  1683               	bsf	3,5	;RP0=1, select bank1
  1306  0207  1303               	bcf	3,6	;RP1=0, select bank1
  1307  0208  1287               	bcf	7,5	;volatile
  1308                           
  1309                           ;SPI.c: 17:     if(sType & 0b00000100)
  1310  0209  1D75               	btfss	spiInit@sType,2
  1311  020A  2A0C               	goto	u91
  1312  020B  2A0D               	goto	u90
  1313  020C                     u91:
  1314  020C  2A11               	goto	l970
  1315  020D                     u90:
  1316  020D                     l966:
  1317                           
  1318                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1319  020D  0874               	movf	spiInit@sTransmitEdge,w
  1320  020E  0094               	movwf	20	;volatile
  1321  020F                     l968:
  1322                           
  1323                           ;SPI.c: 20:         TRISC3 = 1;
  1324  020F  1587               	bsf	7,3	;volatile
  1325                           
  1326                           ;SPI.c: 21:     }
  1327  0210  2A15               	goto	l199
  1328  0211                     l970:
  1329                           
  1330                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1331  0211  0872               	movf	spiInit@sDataSample,w
  1332  0212  0474               	iorwf	spiInit@sTransmitEdge,w
  1333  0213  0094               	movwf	20	;volatile
  1334  0214                     l972:
  1335                           
  1336                           ;SPI.c: 25:         TRISC3 = 0;
  1337  0214  1187               	bcf	7,3	;volatile
  1338  0215                     l199:	
  1339                           ;SPI.c: 26:     }
  1340                           
  1341                           
  1342                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1343  0215  0875               	movf	spiInit@sType,w
  1344  0216  0473               	iorwf	spiInit@sClockIdle,w
  1345  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0219  0094               	movwf	20	;volatile
  1348  021A                     l200:
  1349  021A  0008               	return
  1350  021B                     __end_of_spiInit:
  1351                           
  1352                           	psect	text5
  1353  007B                     __ptext5:	
  1354 ;; *************** function _initOsc *****************
  1355 ;; Defined at:
  1356 ;;		line 3 in file "Oscilador.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;  IRCF            1    wreg     unsigned char 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  IRCF            1    4[COMMON] unsigned char 
  1361 ;; Return value:  Size  Location     Type
  1362 ;;                  1    wreg      void 
  1363 ;; Registers used:
  1364 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1370 ;;      Params:         0       0       0       0       0
  1371 ;;      Locals:         1       0       0       0       0
  1372 ;;      Temps:          2       0       0       0       0
  1373 ;;      Totals:         3       0       0       0       0
  1374 ;;Total ram usage:        3 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    1
  1377 ;; This function calls:
  1378 ;;		Nothing
  1379 ;; This function is called by:
  1380 ;;		_setup
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           
  1385                           ;psect for function _initOsc
  1386  007B                     _initOsc:
  1387                           
  1388                           ;incstack = 0
  1389                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1390                           ;initOsc@IRCF stored from wreg
  1391  007B  00F4               	movwf	initOsc@IRCF
  1392  007C                     l772:
  1393                           
  1394                           ;Oscilador.c: 5:     switch(IRCF){
  1395  007C  28B3               	goto	l776
  1396  007D                     l83:	
  1397                           ;Oscilador.c: 6:         case 0:
  1398                           
  1399                           
  1400                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1401  007D  1683               	bsf	3,5	;RP0=1, select bank1
  1402  007E  1303               	bcf	3,6	;RP1=0, select bank1
  1403  007F  130F               	bcf	15,6	;volatile
  1404                           
  1405                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1406  0080  128F               	bcf	15,5	;volatile
  1407                           
  1408                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1409  0081  120F               	bcf	15,4	;volatile
  1410                           
  1411                           ;Oscilador.c: 10:             break;
  1412  0082  28D5               	goto	l84
  1413  0083                     l85:	
  1414                           ;Oscilador.c: 11:          case 1:
  1415                           
  1416                           
  1417                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1418  0083  1683               	bsf	3,5	;RP0=1, select bank1
  1419  0084  1303               	bcf	3,6	;RP1=0, select bank1
  1420  0085  130F               	bcf	15,6	;volatile
  1421                           
  1422                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1423  0086  128F               	bcf	15,5	;volatile
  1424                           
  1425                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1426  0087  160F               	bsf	15,4	;volatile
  1427                           
  1428                           ;Oscilador.c: 15:             break;
  1429  0088  28D5               	goto	l84
  1430  0089                     l86:	
  1431                           ;Oscilador.c: 16:         case 2:
  1432                           
  1433                           
  1434                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1435  0089  1683               	bsf	3,5	;RP0=1, select bank1
  1436  008A  1303               	bcf	3,6	;RP1=0, select bank1
  1437  008B  130F               	bcf	15,6	;volatile
  1438                           
  1439                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1440  008C  168F               	bsf	15,5	;volatile
  1441                           
  1442                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1443  008D  120F               	bcf	15,4	;volatile
  1444                           
  1445                           ;Oscilador.c: 20:             break;
  1446  008E  28D5               	goto	l84
  1447  008F                     l87:	
  1448                           ;Oscilador.c: 21:         case 3:
  1449                           
  1450                           
  1451                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1452  008F  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0090  1303               	bcf	3,6	;RP1=0, select bank1
  1454  0091  130F               	bcf	15,6	;volatile
  1455                           
  1456                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1457  0092  168F               	bsf	15,5	;volatile
  1458                           
  1459                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1460  0093  160F               	bsf	15,4	;volatile
  1461                           
  1462                           ;Oscilador.c: 25:             break;
  1463  0094  28D5               	goto	l84
  1464  0095                     l88:	
  1465                           ;Oscilador.c: 26:         case 4:
  1466                           
  1467                           
  1468                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1469  0095  1683               	bsf	3,5	;RP0=1, select bank1
  1470  0096  1303               	bcf	3,6	;RP1=0, select bank1
  1471  0097  170F               	bsf	15,6	;volatile
  1472                           
  1473                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1474  0098  128F               	bcf	15,5	;volatile
  1475                           
  1476                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1477  0099  120F               	bcf	15,4	;volatile
  1478                           
  1479                           ;Oscilador.c: 30:             break;
  1480  009A  28D5               	goto	l84
  1481  009B                     l89:	
  1482                           ;Oscilador.c: 31:         case 5:
  1483                           
  1484                           
  1485                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1486  009B  1683               	bsf	3,5	;RP0=1, select bank1
  1487  009C  1303               	bcf	3,6	;RP1=0, select bank1
  1488  009D  170F               	bsf	15,6	;volatile
  1489                           
  1490                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1491  009E  128F               	bcf	15,5	;volatile
  1492                           
  1493                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1494  009F  160F               	bsf	15,4	;volatile
  1495                           
  1496                           ;Oscilador.c: 35:             break;
  1497  00A0  28D5               	goto	l84
  1498  00A1                     l90:	
  1499                           ;Oscilador.c: 36:         case 6:
  1500                           
  1501                           
  1502                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1503  00A1  1683               	bsf	3,5	;RP0=1, select bank1
  1504  00A2  1303               	bcf	3,6	;RP1=0, select bank1
  1505  00A3  170F               	bsf	15,6	;volatile
  1506                           
  1507                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1508  00A4  168F               	bsf	15,5	;volatile
  1509                           
  1510                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1511  00A5  120F               	bcf	15,4	;volatile
  1512                           
  1513                           ;Oscilador.c: 40:             break;
  1514  00A6  28D5               	goto	l84
  1515  00A7                     l91:	
  1516                           ;Oscilador.c: 41:         case 7:
  1517                           
  1518                           
  1519                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1520  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  1521  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  1522  00A9  170F               	bsf	15,6	;volatile
  1523                           
  1524                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1525  00AA  168F               	bsf	15,5	;volatile
  1526                           
  1527                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1528  00AB  160F               	bsf	15,4	;volatile
  1529                           
  1530                           ;Oscilador.c: 45:             break;
  1531  00AC  28D5               	goto	l84
  1532  00AD                     l92:	
  1533                           ;Oscilador.c: 46:         default:
  1534                           
  1535                           
  1536                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1537  00AD  1683               	bsf	3,5	;RP0=1, select bank1
  1538  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  1539  00AF  170F               	bsf	15,6	;volatile
  1540                           
  1541                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1542  00B0  168F               	bsf	15,5	;volatile
  1543                           
  1544                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1545  00B1  120F               	bcf	15,4	;volatile
  1546                           
  1547                           ;Oscilador.c: 50:             break;
  1548  00B2  28D5               	goto	l84
  1549  00B3                     l776:
  1550  00B3  0874               	movf	initOsc@IRCF,w
  1551  00B4  00F2               	movwf	??_initOsc
  1552  00B5  01F3               	clrf	??_initOsc+1
  1553                           
  1554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1555                           ; Switch size 1, requested type "simple"
  1556                           ; Number of cases is 1, Range of values is 0 to 0
  1557                           ; switch strategies available:
  1558                           ; Name         Instructions Cycles
  1559                           ; simple_byte            4     3 (average)
  1560                           ; direct_byte           11     8 (fixed)
  1561                           ; jumptable            260     6 (fixed)
  1562                           ;	Chosen strategy is simple_byte
  1563  00B6  0873               	movf	??_initOsc+1,w
  1564  00B7  3A00               	xorlw	0	; case 0
  1565  00B8  1903               	skipnz
  1566  00B9  28BB               	goto	l1098
  1567  00BA  28AD               	goto	l92
  1568  00BB                     l1098:
  1569                           
  1570                           ; Switch size 1, requested type "simple"
  1571                           ; Number of cases is 8, Range of values is 0 to 7
  1572                           ; switch strategies available:
  1573                           ; Name         Instructions Cycles
  1574                           ; simple_byte           25    13 (average)
  1575                           ; direct_byte           32     8 (fixed)
  1576                           ; jumptable            260     6 (fixed)
  1577                           ;	Chosen strategy is simple_byte
  1578  00BB  0872               	movf	??_initOsc,w
  1579  00BC  3A00               	xorlw	0	; case 0
  1580  00BD  1903               	skipnz
  1581  00BE  287D               	goto	l83
  1582  00BF  3A01               	xorlw	1	; case 1
  1583  00C0  1903               	skipnz
  1584  00C1  2883               	goto	l85
  1585  00C2  3A03               	xorlw	3	; case 2
  1586  00C3  1903               	skipnz
  1587  00C4  2889               	goto	l86
  1588  00C5  3A01               	xorlw	1	; case 3
  1589  00C6  1903               	skipnz
  1590  00C7  288F               	goto	l87
  1591  00C8  3A07               	xorlw	7	; case 4
  1592  00C9  1903               	skipnz
  1593  00CA  2895               	goto	l88
  1594  00CB  3A01               	xorlw	1	; case 5
  1595  00CC  1903               	skipnz
  1596  00CD  289B               	goto	l89
  1597  00CE  3A03               	xorlw	3	; case 6
  1598  00CF  1903               	skipnz
  1599  00D0  28A1               	goto	l90
  1600  00D1  3A01               	xorlw	1	; case 7
  1601  00D2  1903               	skipnz
  1602  00D3  28A7               	goto	l91
  1603  00D4  28AD               	goto	l92
  1604  00D5                     l84:
  1605                           
  1606                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1607  00D5  140F               	bsf	15,0	;volatile
  1608  00D6                     l93:
  1609  00D6  0008               	return
  1610  00D7                     __end_of_initOsc:
  1611                           
  1612                           	psect	text6
  1613  0287                     __ptext6:	
  1614 ;; *************** function _USART_Init_BaudRate *****************
  1615 ;; Defined at:
  1616 ;;		line 19 in file "USART.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, status,2
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1630 ;;      Params:         0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0
  1633 ;;      Totals:         0       0       0       0       0
  1634 ;;Total ram usage:        0 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    1
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_setup
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           
  1645                           ;psect for function _USART_Init_BaudRate
  1646  0287                     _USART_Init_BaudRate:
  1647  0287                     l782:	
  1648                           ;incstack = 0
  1649                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1650                           
  1651                           
  1652                           ;USART.c: 20:     SPBRGH = 0;
  1653  0287  1683               	bsf	3,5	;RP0=1, select bank1
  1654  0288  1303               	bcf	3,6	;RP1=0, select bank1
  1655  0289  019A               	clrf	26	;volatile
  1656  028A                     l784:
  1657                           
  1658                           ;USART.c: 21:     SPBRG = 12;
  1659  028A  300C               	movlw	12
  1660  028B  0099               	movwf	25	;volatile
  1661  028C                     l162:
  1662  028C  0008               	return
  1663  028D                     __end_of_USART_Init_BaudRate:
  1664                           
  1665                           	psect	text7
  1666  0271                     __ptext7:	
  1667 ;; *************** function _USART_Init *****************
  1668 ;; Defined at:
  1669 ;;		line 8 in file "USART.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		None
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1683 ;;      Params:         0       0       0       0       0
  1684 ;;      Locals:         0       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0
  1686 ;;      Totals:         0       0       0       0       0
  1687 ;;Total ram usage:        0 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    1
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_setup
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           
  1698                           ;psect for function _USART_Init
  1699  0271                     _USART_Init:
  1700  0271                     l786:	
  1701                           ;incstack = 0
  1702                           ; Regs used in _USART_Init: []
  1703                           
  1704                           
  1705                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1706  0271  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0272  1303               	bcf	3,6	;RP1=0, select bank0
  1708  0273  1798               	bsf	24,7	;volatile
  1709                           
  1710                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1711  0274  1683               	bsf	3,5	;RP0=1, select bank1
  1712  0275  1303               	bcf	3,6	;RP1=0, select bank1
  1713  0276  1218               	bcf	24,4	;volatile
  1714                           
  1715                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1716  0277  1698               	bsf	24,5	;volatile
  1717  0278                     l159:
  1718  0278  0008               	return
  1719  0279                     __end_of_USART_Init:
  1720                           
  1721                           	psect	text8
  1722  028D                     __ptext8:	
  1723 ;; *************** function _USART_INTERRUPT *****************
  1724 ;; Defined at:
  1725 ;;		line 24 in file "USART.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;		None
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		None
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       0       0       0       0
  1740 ;;      Locals:         0       0       0       0       0
  1741 ;;      Temps:          0       0       0       0       0
  1742 ;;      Totals:         0       0       0       0       0
  1743 ;;Total ram usage:        0 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    1
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_setup
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _USART_INTERRUPT
  1755  028D                     _USART_INTERRUPT:
  1756  028D                     l788:	
  1757                           ;incstack = 0
  1758                           ; Regs used in _USART_INTERRUPT: []
  1759                           
  1760                           
  1761                           ;USART.c: 25:     INTCONbits.GIE = 1;
  1762  028D  178B               	bsf	11,7	;volatile
  1763                           
  1764                           ;USART.c: 26:     INTCONbits.PEIE = 1;
  1765  028E  170B               	bsf	11,6	;volatile
  1766                           
  1767                           ;USART.c: 27:     PIE1bits.RCIE = 1;
  1768  028F  1683               	bsf	3,5	;RP0=1, select bank1
  1769  0290  1303               	bcf	3,6	;RP1=0, select bank1
  1770  0291  168C               	bsf	12,5	;volatile
  1771  0292                     l165:
  1772  0292  0008               	return
  1773  0293                     __end_of_USART_INTERRUPT:
  1774                           
  1775                           	psect	text9
  1776  01C9                     __ptext9:	
  1777 ;; *************** function _Write_USART_String *****************
  1778 ;; Defined at:
  1779 ;;		line 37 in file "USART.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  a               1    wreg     PTR unsigned char 
  1782 ;;		 -> STR_1(15), 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;  a               1    4[COMMON] PTR unsigned char 
  1785 ;;		 -> STR_1(15), 
  1786 ;;  i               1    5[COMMON] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1796 ;;      Params:         0       0       0       0       0
  1797 ;;      Locals:         2       0       0       0       0
  1798 ;;      Temps:          1       0       0       0       0
  1799 ;;      Totals:         3       0       0       0       0
  1800 ;;Total ram usage:        3 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    2
  1803 ;; This function calls:
  1804 ;;		_Write_USART
  1805 ;; This function is called by:
  1806 ;;		_main
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           
  1811                           ;psect for function _Write_USART_String
  1812  01C9                     _Write_USART_String:
  1813                           
  1814                           ;incstack = 0
  1815                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1816                           ;Write_USART_String@a stored from wreg
  1817  01C9  00F4               	movwf	Write_USART_String@a
  1818  01CA                     l1040:
  1819                           
  1820                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  1821  01CA  01F5               	clrf	Write_USART_String@i
  1822  01CB  29DD               	goto	l1046
  1823  01CC                     l1042:
  1824                           
  1825                           ;USART.c: 40:         Write_USART(a[i]);
  1826  01CC  0875               	movf	Write_USART_String@i,w
  1827  01CD  0774               	addwf	Write_USART_String@a,w
  1828  01CE  0084               	movwf	4
  1829  01CF  120A  118A  215B  120A  118A  	fcall	stringdir
  1830  01D4  120A  118A  2254  120A  118A  	fcall	_Write_USART
  1831  01D9                     l1044:
  1832                           
  1833                           ;USART.c: 41:     }
  1834  01D9  3001               	movlw	1
  1835  01DA  00F3               	movwf	??_Write_USART_String
  1836  01DB  0873               	movf	??_Write_USART_String,w
  1837  01DC  07F5               	addwf	Write_USART_String@i,f
  1838  01DD                     l1046:
  1839  01DD  0875               	movf	Write_USART_String@i,w
  1840  01DE  0774               	addwf	Write_USART_String@a,w
  1841  01DF  0084               	movwf	4
  1842  01E0  120A  118A  215B  120A  118A  	fcall	stringdir
  1843  01E5  3A00               	xorlw	0
  1844  01E6  1D03               	skipz
  1845  01E7  29E9               	goto	u131
  1846  01E8  29EA               	goto	u130
  1847  01E9                     u131:
  1848  01E9  29CC               	goto	l1042
  1849  01EA                     u130:
  1850  01EA                     l177:
  1851  01EA  0008               	return
  1852  01EB                     __end_of_Write_USART_String:
  1853                           
  1854                           	psect	text10
  1855  0254                     __ptext10:	
  1856 ;; *************** function _Write_USART *****************
  1857 ;; Defined at:
  1858 ;;		line 33 in file "USART.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;  a               1    wreg     unsigned char 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  a               1    2[COMMON] unsigned char 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      void 
  1865 ;; Registers used:
  1866 ;;		wreg
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1872 ;;      Params:         0       0       0       0       0
  1873 ;;      Locals:         1       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0
  1875 ;;      Totals:         1       0       0       0       0
  1876 ;;Total ram usage:        1 bytes
  1877 ;; Hardware stack levels used:    1
  1878 ;; Hardware stack levels required when called:    1
  1879 ;; This function calls:
  1880 ;;		Nothing
  1881 ;; This function is called by:
  1882 ;;		_Write_USART_String
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           
  1887                           ;psect for function _Write_USART
  1888  0254                     _Write_USART:
  1889                           
  1890                           ;incstack = 0
  1891                           ; Regs used in _Write_USART: [wreg]
  1892                           ;Write_USART@a stored from wreg
  1893  0254  00F2               	movwf	Write_USART@a
  1894  0255                     l820:
  1895  0255                     l168:	
  1896                           ;USART.c: 34:     while(!TRMT);
  1897                           
  1898  0255  1683               	bsf	3,5	;RP0=1, select bank1
  1899  0256  1303               	bcf	3,6	;RP1=0, select bank1
  1900  0257  1C98               	btfss	24,1	;volatile
  1901  0258  2A5A               	goto	u51
  1902  0259  2A5B               	goto	u50
  1903  025A                     u51:
  1904  025A  2A55               	goto	l168
  1905  025B                     u50:
  1906  025B                     l822:
  1907                           
  1908                           ;USART.c: 35:     TXREG=a;
  1909  025B  0872               	movf	Write_USART@a,w
  1910  025C  1283               	bcf	3,5	;RP0=0, select bank0
  1911  025D  1303               	bcf	3,6	;RP1=0, select bank0
  1912  025E  0099               	movwf	25	;volatile
  1913  025F                     l171:
  1914  025F  0008               	return
  1915  0260                     __end_of_Write_USART:
  1916                           
  1917                           	psect	text11
  1918  021B                     __ptext11:	
  1919 ;; *************** function _Show_val_LCD *****************
  1920 ;; Defined at:
  1921 ;;		line 167 in file "main_maestro.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         0       0       0       0       0
  1936 ;;      Locals:         0       0       0       0       0
  1937 ;;      Temps:          1       0       0       0       0
  1938 ;;      Totals:         1       0       0       0       0
  1939 ;;Total ram usage:        1 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    4
  1942 ;; This function calls:
  1943 ;;		_Lcd_Clear
  1944 ;;		_Lcd_Set_Cursor
  1945 ;;		_Lcd_Write_String
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           
  1952                           ;psect for function _Show_val_LCD
  1953  021B                     _Show_val_LCD:
  1954  021B                     l1048:	
  1955                           ;incstack = 0
  1956                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1957                           
  1958                           
  1959                           ;main_maestro.c: 169:     Lcd_Clear();
  1960  021B  120A  118A  2247  120A  118A  	fcall	_Lcd_Clear
  1961                           
  1962                           ;main_maestro.c: 170:     Lcd_Set_Cursor(1,2);
  1963  0220  3002               	movlw	2
  1964  0221  00FA               	movwf	??_Show_val_LCD
  1965  0222  087A               	movf	??_Show_val_LCD,w
  1966  0223  00F6               	movwf	Lcd_Set_Cursor@b
  1967  0224  3001               	movlw	1
  1968  0225  120A  118A  21A5  120A  118A  	fcall	_Lcd_Set_Cursor
  1969  022A                     l1050:
  1970                           
  1971                           ;main_maestro.c: 171:     Lcd_Write_String("S1:   S2:   S3:");
  1972  022A  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1973  022B  120A  118A  2180  120A  118A  	fcall	_Lcd_Write_String
  1974  0230                     l77:
  1975  0230  0008               	return
  1976  0231                     __end_of_Show_val_LCD:
  1977                           
  1978                           	psect	text12
  1979  0180                     __ptext12:	
  1980 ;; *************** function _Lcd_Write_String *****************
  1981 ;; Defined at:
  1982 ;;		line 70 in file "LCD.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;  a               1    wreg     PTR unsigned char 
  1985 ;;		 -> STR_2(16), 
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  a               1    7[COMMON] PTR unsigned char 
  1988 ;;		 -> STR_2(16), 
  1989 ;;  i               2    5[COMMON] int 
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      void 
  1992 ;; Registers used:
  1993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1999 ;;      Params:         0       0       0       0       0
  2000 ;;      Locals:         3       0       0       0       0
  2001 ;;      Temps:          0       0       0       0       0
  2002 ;;      Totals:         3       0       0       0       0
  2003 ;;Total ram usage:        3 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    3
  2006 ;; This function calls:
  2007 ;;		_Lcd_Write_Char
  2008 ;; This function is called by:
  2009 ;;		_Show_val_LCD
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           
  2014                           ;psect for function _Lcd_Write_String
  2015  0180                     _Lcd_Write_String:
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2019                           ;Lcd_Write_String@a stored from wreg
  2020  0180  00F7               	movwf	Lcd_Write_String@a
  2021  0181                     l986:
  2022                           
  2023                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2024  0181  01F5               	clrf	Lcd_Write_String@i
  2025  0182  01F6               	clrf	Lcd_Write_String@i+1
  2026  0183  2997               	goto	l992
  2027  0184                     l988:
  2028                           
  2029                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2030  0184  0875               	movf	Lcd_Write_String@i,w
  2031  0185  0777               	addwf	Lcd_Write_String@a,w
  2032  0186  0084               	movwf	4
  2033  0187  120A  118A  215B  120A  118A  	fcall	stringdir
  2034  018C  120A  118A  2231  120A  118A  	fcall	_Lcd_Write_Char
  2035  0191                     l990:
  2036  0191  3001               	movlw	1
  2037  0192  07F5               	addwf	Lcd_Write_String@i,f
  2038  0193  1803               	skipnc
  2039  0194  0AF6               	incf	Lcd_Write_String@i+1,f
  2040  0195  3000               	movlw	0
  2041  0196  07F6               	addwf	Lcd_Write_String@i+1,f
  2042  0197                     l992:
  2043  0197  0875               	movf	Lcd_Write_String@i,w
  2044  0198  0777               	addwf	Lcd_Write_String@a,w
  2045  0199  0084               	movwf	4
  2046  019A  120A  118A  215B  120A  118A  	fcall	stringdir
  2047  019F  3A00               	xorlw	0
  2048  01A0  1D03               	skipz
  2049  01A1  29A3               	goto	u121
  2050  01A2  29A4               	goto	u120
  2051  01A3                     u121:
  2052  01A3  2984               	goto	l988
  2053  01A4                     u120:
  2054  01A4                     l130:
  2055  01A4  0008               	return
  2056  01A5                     __end_of_Lcd_Write_String:
  2057                           
  2058                           	psect	text13
  2059  0231                     __ptext13:	
  2060 ;; *************** function _Lcd_Write_Char *****************
  2061 ;; Defined at:
  2062 ;;		line 61 in file "LCD.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  a               1    wreg     unsigned char 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  a               1    4[COMMON] unsigned char 
  2067 ;; Return value:  Size  Location     Type
  2068 ;;                  1    wreg      void 
  2069 ;; Registers used:
  2070 ;;		wreg, status,2, status,0, pclath, cstack
  2071 ;; Tracked objects:
  2072 ;;		On entry : 0/0
  2073 ;;		On exit  : 0/0
  2074 ;;		Unchanged: 0/0
  2075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2076 ;;      Params:         0       0       0       0       0
  2077 ;;      Locals:         1       0       0       0       0
  2078 ;;      Temps:          1       0       0       0       0
  2079 ;;      Totals:         2       0       0       0       0
  2080 ;;Total ram usage:        2 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    2
  2083 ;; This function calls:
  2084 ;;		_Lcd_Port
  2085 ;; This function is called by:
  2086 ;;		_Lcd_Write_String
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           
  2091                           ;psect for function _Lcd_Write_Char
  2092  0231                     _Lcd_Write_Char:
  2093                           
  2094                           ;incstack = 0
  2095                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2096                           ;Lcd_Write_Char@a stored from wreg
  2097  0231  00F4               	movwf	Lcd_Write_Char@a
  2098  0232                     l760:
  2099                           
  2100                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2101  0232  1283               	bcf	3,5	;RP0=0, select bank0
  2102  0233  1303               	bcf	3,6	;RP1=0, select bank0
  2103  0234  1409               	bsf	9,0	;volatile
  2104  0235                     l762:
  2105                           
  2106                           ;LCD.c: 63:    Lcd_Port(a);
  2107  0235  0874               	movf	Lcd_Write_Char@a,w
  2108  0236  120A  118A  2293  120A  118A  	fcall	_Lcd_Port
  2109  023B                     l764:
  2110                           
  2111                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2112  023B  1283               	bcf	3,5	;RP0=0, select bank0
  2113  023C  1303               	bcf	3,6	;RP1=0, select bank0
  2114  023D  1509               	bsf	9,2	;volatile
  2115  023E                     l766:
  2116                           
  2117                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2118  023E  301A               	movlw	26
  2119  023F  00F3               	movwf	??_Lcd_Write_Char
  2120  0240                     u187:
  2121  0240  0BF3               	decfsz	??_Lcd_Write_Char,f
  2122  0241  2A40               	goto	u187
  2123  0242  0000               	nop
  2124  0243                     l768:
  2125                           
  2126                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2127  0243  1283               	bcf	3,5	;RP0=0, select bank0
  2128  0244  1303               	bcf	3,6	;RP1=0, select bank0
  2129  0245  1109               	bcf	9,2	;volatile
  2130  0246                     l124:
  2131  0246  0008               	return
  2132  0247                     __end_of_Lcd_Write_Char:
  2133                           
  2134                           	psect	text14
  2135  01A5                     __ptext14:	
  2136 ;; *************** function _Lcd_Set_Cursor *****************
  2137 ;; Defined at:
  2138 ;;		line 48 in file "LCD.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  a               1    wreg     unsigned char 
  2141 ;;  b               1    6[COMMON] unsigned char 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  a               1    8[COMMON] unsigned char 
  2144 ;;  temp            1    9[COMMON] unsigned char 
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0, pclath, cstack
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2154 ;;      Params:         1       0       0       0       0
  2155 ;;      Locals:         2       0       0       0       0
  2156 ;;      Temps:          1       0       0       0       0
  2157 ;;      Totals:         4       0       0       0       0
  2158 ;;Total ram usage:        4 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    3
  2161 ;; This function calls:
  2162 ;;		_Lcd_Cmd
  2163 ;; This function is called by:
  2164 ;;		_Show_val_LCD
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           
  2168                           
  2169                           ;psect for function _Lcd_Set_Cursor
  2170  01A5                     _Lcd_Set_Cursor:
  2171                           
  2172                           ;incstack = 0
  2173                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2174                           ;Lcd_Set_Cursor@a stored from wreg
  2175  01A5  00F8               	movwf	Lcd_Set_Cursor@a
  2176  01A6                     l974:
  2177                           
  2178                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2179  01A6  0378               	decf	Lcd_Set_Cursor@a,w
  2180  01A7  1D03               	btfss	3,2
  2181  01A8  29AA               	goto	u101
  2182  01A9  29AB               	goto	u100
  2183  01AA                     u101:
  2184  01AA  29B7               	goto	l980
  2185  01AB                     u100:
  2186  01AB                     l976:
  2187                           
  2188                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2189  01AB  0876               	movf	Lcd_Set_Cursor@b,w
  2190  01AC  3E7F               	addlw	127
  2191  01AD  00F7               	movwf	??_Lcd_Set_Cursor
  2192  01AE  0877               	movf	??_Lcd_Set_Cursor,w
  2193  01AF  00F9               	movwf	Lcd_Set_Cursor@temp
  2194  01B0                     l978:
  2195                           
  2196                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2197  01B0  0879               	movf	Lcd_Set_Cursor@temp,w
  2198  01B1  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2199                           
  2200                           ;LCD.c: 53:  }
  2201  01B6  29C8               	goto	l121
  2202  01B7                     l980:
  2203  01B7  3002               	movlw	2
  2204  01B8  0678               	xorwf	Lcd_Set_Cursor@a,w
  2205  01B9  1D03               	btfss	3,2
  2206  01BA  29BC               	goto	u111
  2207  01BB  29BD               	goto	u110
  2208  01BC                     u111:
  2209  01BC  29C8               	goto	l121
  2210  01BD                     u110:
  2211  01BD                     l982:
  2212                           
  2213                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2214  01BD  0876               	movf	Lcd_Set_Cursor@b,w
  2215  01BE  3EBF               	addlw	191
  2216  01BF  00F7               	movwf	??_Lcd_Set_Cursor
  2217  01C0  0877               	movf	??_Lcd_Set_Cursor,w
  2218  01C1  00F9               	movwf	Lcd_Set_Cursor@temp
  2219  01C2                     l984:
  2220                           
  2221                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2222  01C2  0879               	movf	Lcd_Set_Cursor@temp,w
  2223  01C3  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2224  01C8                     l121:
  2225  01C8  0008               	return
  2226  01C9                     __end_of_Lcd_Set_Cursor:
  2227                           
  2228                           	psect	text15
  2229  0247                     __ptext15:	
  2230 ;; *************** function _Lcd_Clear *****************
  2231 ;; Defined at:
  2232 ;;		line 42 in file "LCD.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0, pclath, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2246 ;;      Params:         0       0       0       0       0
  2247 ;;      Locals:         0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0
  2249 ;;      Totals:         0       0       0       0       0
  2250 ;;Total ram usage:        0 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    3
  2253 ;; This function calls:
  2254 ;;		_Lcd_Cmd
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;;		_Show_val_LCD
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           
  2262                           ;psect for function _Lcd_Clear
  2263  0247                     _Lcd_Clear:
  2264  0247                     l770:	
  2265                           ;incstack = 0
  2266                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2267                           
  2268                           
  2269                           ;LCD.c: 43:  Lcd_Cmd(0);
  2270  0247  3000               	movlw	0
  2271  0248  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2272                           
  2273                           ;LCD.c: 44:  Lcd_Cmd(1);
  2274  024D  3001               	movlw	1
  2275  024E  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2276  0253                     l115:
  2277  0253  0008               	return
  2278  0254                     __end_of_Lcd_Clear:
  2279                           
  2280                           	psect	text16
  2281  00D7                     __ptext16:	
  2282 ;; *************** function _Lcd_Init *****************
  2283 ;; Defined at:
  2284 ;;		line 14 in file "LCD.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, status,2, status,0, pclath, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2298 ;;      Params:         0       0       0       0       0
  2299 ;;      Locals:         0       0       0       0       0
  2300 ;;      Temps:          2       0       0       0       0
  2301 ;;      Totals:         2       0       0       0       0
  2302 ;;Total ram usage:        2 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    3
  2305 ;; This function calls:
  2306 ;;		_Lcd_Cmd
  2307 ;;		_Lcd_Port
  2308 ;; This function is called by:
  2309 ;;		_main
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           
  2314                           ;psect for function _Lcd_Init
  2315  00D7                     _Lcd_Init:
  2316  00D7                     l872:	
  2317                           ;incstack = 0
  2318                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2319                           
  2320                           
  2321                           ;LCD.c: 15:   Lcd_Port(0x00);
  2322  00D7  3000               	movlw	0
  2323  00D8  120A  118A  2293  120A  118A  	fcall	_Lcd_Port
  2324  00DD                     l874:
  2325                           
  2326                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  2327  00DD  3034               	movlw	52
  2328  00DE  00F7               	movwf	??_Lcd_Init+1
  2329  00DF  30F1               	movlw	241
  2330  00E0  00F6               	movwf	??_Lcd_Init
  2331  00E1                     u197:
  2332  00E1  0BF6               	decfsz	??_Lcd_Init,f
  2333  00E2  28E1               	goto	u197
  2334  00E3  0BF7               	decfsz	??_Lcd_Init+1,f
  2335  00E4  28E1               	goto	u197
  2336  00E5  28E6               	nop2
  2337  00E6                     l876:
  2338                           
  2339                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  2340  00E6  3030               	movlw	48
  2341  00E7  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2342                           
  2343                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2344  00EC  300D               	movlw	13
  2345  00ED  00F7               	movwf	??_Lcd_Init+1
  2346  00EE  30FB               	movlw	251
  2347  00EF  00F6               	movwf	??_Lcd_Init
  2348  00F0                     u207:
  2349  00F0  0BF6               	decfsz	??_Lcd_Init,f
  2350  00F1  28F0               	goto	u207
  2351  00F2  0BF7               	decfsz	??_Lcd_Init+1,f
  2352  00F3  28F0               	goto	u207
  2353  00F4  28F5               	nop2
  2354  00F5                     l878:
  2355                           
  2356                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  2357  00F5  3030               	movlw	48
  2358  00F6  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2359  00FB                     l880:
  2360                           
  2361                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  2362  00FB  301D               	movlw	29
  2363  00FC  00F7               	movwf	??_Lcd_Init+1
  2364  00FD  3091               	movlw	145
  2365  00FE  00F6               	movwf	??_Lcd_Init
  2366  00FF                     u217:
  2367  00FF  0BF6               	decfsz	??_Lcd_Init,f
  2368  0100  28FF               	goto	u217
  2369  0101  0BF7               	decfsz	??_Lcd_Init+1,f
  2370  0102  28FF               	goto	u217
  2371                           
  2372                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  2373  0103  3030               	movlw	48
  2374  0104  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2375                           
  2376                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  2377  0109  3038               	movlw	56
  2378  010A  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2379                           
  2380                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  2381  010F  300C               	movlw	12
  2382  0110  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2383                           
  2384                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  2385  0115  3001               	movlw	1
  2386  0116  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2387                           
  2388                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  2389  011B  3006               	movlw	6
  2390  011C  120A  118A  21EB  120A  118A  	fcall	_Lcd_Cmd
  2391  0121                     l106:
  2392  0121  0008               	return
  2393  0122                     __end_of_Lcd_Init:
  2394                           
  2395                           	psect	text17
  2396  01EB                     __ptext17:	
  2397 ;; *************** function _Lcd_Cmd *****************
  2398 ;; Defined at:
  2399 ;;		line 33 in file "LCD.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  a               1    wreg     unsigned char 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  a               1    5[COMMON] unsigned char 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2, status,0, pclath, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2413 ;;      Params:         0       0       0       0       0
  2414 ;;      Locals:         1       0       0       0       0
  2415 ;;      Temps:          2       0       0       0       0
  2416 ;;      Totals:         3       0       0       0       0
  2417 ;;Total ram usage:        3 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    2
  2420 ;; This function calls:
  2421 ;;		_Lcd_Port
  2422 ;; This function is called by:
  2423 ;;		_Lcd_Init
  2424 ;;		_Lcd_Clear
  2425 ;;		_Lcd_Set_Cursor
  2426 ;;		_Lcd_Shift_Right
  2427 ;;		_Lcd_Shift_Left
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function _Lcd_Cmd
  2433  01EB                     _Lcd_Cmd:
  2434                           
  2435                           ;incstack = 0
  2436                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2437                           ;Lcd_Cmd@a stored from wreg
  2438  01EB  00F5               	movwf	Lcd_Cmd@a
  2439  01EC                     l750:
  2440                           
  2441                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  2442  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  2443  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  2444  01EE  1009               	bcf	9,0	;volatile
  2445  01EF                     l752:
  2446                           
  2447                           ;LCD.c: 35:  Lcd_Port(a);
  2448  01EF  0875               	movf	Lcd_Cmd@a,w
  2449  01F0  120A  118A  2293  120A  118A  	fcall	_Lcd_Port
  2450  01F5                     l754:
  2451                           
  2452                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  2453  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  2454  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  2455  01F7  1509               	bsf	9,2	;volatile
  2456  01F8                     l756:
  2457                           
  2458                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2459  01F8  300B               	movlw	11
  2460  01F9  00F4               	movwf	??_Lcd_Cmd+1
  2461  01FA  3062               	movlw	98
  2462  01FB  00F3               	movwf	??_Lcd_Cmd
  2463  01FC                     u227:
  2464  01FC  0BF3               	decfsz	??_Lcd_Cmd,f
  2465  01FD  29FC               	goto	u227
  2466  01FE  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2467  01FF  29FC               	goto	u227
  2468  0200  0000               	nop
  2469  0201                     l758:
  2470                           
  2471                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  2472  0201  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0202  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0203  1109               	bcf	9,2	;volatile
  2475  0204                     l112:
  2476  0204  0008               	return
  2477  0205                     __end_of_Lcd_Cmd:
  2478                           
  2479                           	psect	text18
  2480  0293                     __ptext18:	
  2481 ;; *************** function _Lcd_Port *****************
  2482 ;; Defined at:
  2483 ;;		line 29 in file "LCD.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;  a               1    wreg     unsigned char 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;  a               1    2[COMMON] unsigned char 
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  1    wreg      void 
  2490 ;; Registers used:
  2491 ;;		wreg
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2497 ;;      Params:         0       0       0       0       0
  2498 ;;      Locals:         1       0       0       0       0
  2499 ;;      Temps:          0       0       0       0       0
  2500 ;;      Totals:         1       0       0       0       0
  2501 ;;Total ram usage:        1 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    1
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_Lcd_Init
  2508 ;;		_Lcd_Cmd
  2509 ;;		_Lcd_Write_Char
  2510 ;; This function uses a non-reentrant model
  2511 ;;
  2512                           
  2513                           
  2514                           ;psect for function _Lcd_Port
  2515  0293                     _Lcd_Port:
  2516                           
  2517                           ;incstack = 0
  2518                           ; Regs used in _Lcd_Port: [wreg]
  2519                           ;Lcd_Port@a stored from wreg
  2520  0293  00F2               	movwf	Lcd_Port@a
  2521  0294                     l748:
  2522                           
  2523                           ;LCD.c: 30:     PORTD = a;
  2524  0294  0872               	movf	Lcd_Port@a,w
  2525  0295  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0296  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0297  0088               	movwf	8	;volatile
  2528  0298                     l109:
  2529  0298  0008               	return
  2530  0299                     __end_of_Lcd_Port:
  2531                           
  2532                           	psect	text19
  2533  0280                     __ptext19:	
  2534 ;; *************** function _ISR *****************
  2535 ;; Defined at:
  2536 ;;		line 76 in file "main_maestro.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		None
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2550 ;;      Params:         0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0
  2552 ;;      Temps:          2       0       0       0       0
  2553 ;;      Totals:         2       0       0       0       0
  2554 ;;Total ram usage:        2 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		Interrupt level 1
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           
  2564                           ;psect for function _ISR
  2565  0280                     _ISR:
  2566  0280                     i1l63:
  2567  0280  0871               	movf	??_ISR+1,w
  2568  0281  008A               	movwf	10
  2569  0282  0E70               	swapf	??_ISR,w
  2570  0283  0083               	movwf	3
  2571  0284  0EFE               	swapf	btemp,f
  2572  0285  0E7E               	swapf	btemp,w
  2573  0286  0009               	retfie
  2574  0287                     __end_of_ISR:
  2575  007E                     btemp	set	126	;btemp
  2576  007E                     wtemp0	set	126
  2577                           
  2578                           	psect	intentry
  2579  0004                     __pintentry:	
  2580                           ;incstack = 0
  2581                           ; Regs used in _ISR: []
  2582                           
  2583  0004                     interrupt_function:
  2584  007E                     saved_w	set	btemp
  2585  0004  00FE               	movwf	btemp
  2586  0005  0E03               	swapf	3,w
  2587  0006  00F0               	movwf	??_ISR
  2588  0007  080A               	movf	10,w
  2589  0008  00F1               	movwf	??_ISR+1
  2590  0009  120A  118A  2A80   	ljmp	_ISR
  2591                           
  2592                           	psect	config
  2593                           
  2594                           ;Config register CONFIG1 @ 0x2007
  2595                           ;	Oscillator Selection bits
  2596                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  2597                           ;	Watchdog Timer Enable bit
  2598                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2599                           ;	Power-up Timer Enable bit
  2600                           ;	PWRTE = OFF, PWRT disabled
  2601                           ;	RE3/MCLR pin function select bit
  2602                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2603                           ;	Code Protection bit
  2604                           ;	CP = OFF, Program memory code protection is disabled
  2605                           ;	Data Code Protection bit
  2606                           ;	CPD = OFF, Data memory code protection is disabled
  2607                           ;	Brown Out Reset Selection bits
  2608                           ;	BOREN = OFF, BOR disabled
  2609                           ;	Internal External Switchover bit
  2610                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2611                           ;	Fail-Safe Clock Monitor Enabled bit
  2612                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2613                           ;	Low Voltage Programming Enable bit
  2614                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2615                           ;	In-Circuit Debugger Mode bit
  2616                           ;	DEBUG = 0x1, unprogrammed default
  2617  2007                     	org	8199
  2618  2007  20D6               	dw	8406
  2619                           
  2620                           ;Config register CONFIG2 @ 0x2008
  2621                           ;	Brown-out Reset Selection bit
  2622                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2623                           ;	Flash Program Memory Self Write Enable bits
  2624                           ;	WRT = OFF, Write protection off
  2625  2008                     	org	8200
  2626  2008  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      3      23
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Write_USART_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> STR_2(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Show_val_LCD
    _setup->_spiInit
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     907
                                              0 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                       _Show_val_LCD
                 _Write_USART_String
                              _setup
                            _spiRead
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     306
                    _USART_INTERRUPT
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      15
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_INTERRUPT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   3     3      0     132
                                              3 COMMON     3     3      0
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         1     1      0     394
                                             10 COMMON     1     1      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     3     3      0     147
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      30
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     217
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      30
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      45
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      30
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Show_val_LCD
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Write_USART_String
     _Write_USART
   _setup
     _USART_INTERRUPT
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit
   _spiRead
     _spiReceiveWait

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      22       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3      17       5       28.7%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      22      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Feb 18 21:07:07 2021

                           pc 0002                   _SSPSTATbits 0094                            l90 00A1  
                          l74 015A                            l91 00A7                            l83 007D  
                          l92 00AD                            l84 00D5                            l77 0230  
                          l93 00D6                            l85 0083                            l86 0089  
                          l87 008F                            l88 0095                            l89 009B  
                          u50 025B                            u51 025A                            u60 027F  
                          u61 027E                            u90 020D                            u91 020C  
                          fsr 0004          __size_of_Write_USART 000C              ?_USART_INTERRUPT 0070  
                         l112 0204                           l200 021A                           l121 01C8  
                         l106 0121                           l130 01A4                           l115 0253  
                         l203 0279                           l124 0246                           l109 0298  
                         l206 027F                           l217 0268                           l162 028C  
                         l171 025F                           l165 0292                           l159 0278  
                         l168 0255                           l177 01EA                           l199 0215  
                         l820 0255                           l750 01EC                           l822 025B  
                         l752 01EF                           l760 0232                           l824 0279  
                         l754 01F5                           l770 0247                           l762 0235  
                         l748 0294                           l756 01F8                           l764 023B  
                         l772 007C                           l758 0201                           l766 023E  
                         l782 0287                           l880 00FB                           l872 00D7  
                         l768 0243                           l784 028A                           l776 00B3  
                         l874 00DD                           l786 0271                           l970 0211  
                         l882 0260                           l876 00E6                           l980 01B7  
                         l788 028D                           l972 0214                           l964 0206  
                         l884 0265                           l878 00F5                           l982 01BD  
                         l974 01A6                           l990 0191                           l966 020D  
                         l984 01C2                           l976 01AB                           l992 0197  
                         l968 020F                           l978 01B0                           l986 0181  
                         l994 0122                           l988 0184                           l996 0128  
                         l998 012B                           u100 01AB                           u101 01AA  
                         u110 01BD                           u111 01BC                           u120 01A4  
                         u121 01A3                           u130 01EA                           u131 01E9  
                         u207 00F0                           u217 00FF                           u227 01FC  
                         u147 0037                           u157 0049                           u167 0058  
                         u177 0071                           u187 0240                           _ISR 0280  
                         u197 00E1                           fsr0 0004                           indf 0000  
 __size_of_Write_USART_String 0022                          ?_ISR 0070                          l1000 012C  
                        l1010 0133                          l1002 012F                          l1020 0138  
                        l1012 0134                          l1004 0130                          l1030 013F  
                        l1022 013B                          l1014 0135                          l1006 0131  
                        l1040 01CA                          l1032 0144                          l1024 013C  
                        l1016 0136                          l1008 0132                          l1050 022A  
                        l1042 01CC                          l1034 0149                          l1026 013D  
                        l1018 0137                          l1044 01D9                          l1036 014E  
                        l1028 013E                          l1060 002E                          l1052 001C  
                        l1046 01DD                          l1038 0151                          l1070 0050  
                        l1062 0031                          l1054 0021                          l1048 021B  
                        l1072 005E                          l1064 003B                          l1056 0024  
                        l1074 0064                          l1066 0043                          l1058 0029  
                        l1076 0069                          l1068 004D                          l1098 00BB  
                        STR_1 0171                          STR_2 0161                          _RCIF 0065  
                        i1l63 0280                          _TRMT 04C1             ?_Lcd_Write_String 0070  
                        _main 001C                          btemp 007E                          start 000C  
          ??_Lcd_Write_String 0075               __end_of_Lcd_Cmd 0205                         ??_ISR 0070  
                       ?_main 0070                         _ANSEL 0188                         _RCREG 001A  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
     __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085                         _TRISB 0086  
                       _TRISD 0088                         _TRISE 0089                         _TXREG 0019  
             __end_of_initOsc 00D7                         _setup 0122                         pclath 000A  
             __end_of_spiInit 021B               __end_of_spiRead 0269                         status 0003  
                       wtemp0 007E                   ?_USART_Init 0070              __end_of_Lcd_Init 0122  
            __end_of_Lcd_Port 0299               __initialization 000F                  __end_of_main 007B  
                      ??_main 0034            __size_of_Lcd_Clear 000D                   initOsc@IRCF 0074  
         _USART_Init_BaudRate 0287                        ?_setup 0070                        _ANSELH 0189  
                   ??_Lcd_Cmd 0073                        _SPBRGH 009A       __size_of_Lcd_Write_Char 0016  
                      _TRISC3 043B                        _TRISC5 043D                        _SSPCON 0014  
                      _SSPBUF 0013          ?_USART_Init_BaudRate 0070                     ??_initOsc 0072  
                      saved_w 007E                     ??_spiInit 0075                     ??_spiRead 0072  
         __size_of_USART_Init 0008               Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076  
     __end_of__initialization 0018             __end_of_Lcd_Clear 0254                __pcstackCOMMON 0070  
       ??_USART_Init_BaudRate 0072                 __end_of_setup 015B                _Lcd_Set_Cursor 01A5  
                   ?_Lcd_Init 0070                     ?_Lcd_Port 0070                       ??_setup 0076  
                Write_USART@a 0072                    __pbssBANK0 0020                    _data_total 0020  
                  __pmaintext 001C                 ??_Write_USART 0072                    __pintentry 0004  
     __size_of_spiReceiveWait 0007     __size_of_Lcd_Write_String 0025        __end_of_Lcd_Set_Cursor 01C9  
  __end_of_Write_USART_String 01EB                    ??_Lcd_Init 0076                    ??_Lcd_Port 0072  
    __size_of_USART_INTERRUPT 0006                       _SSPSTAT 0094                    __stringtab 015B  
              _Lcd_Write_Char 0231                       _Lcd_Cmd 01EB                  ??_USART_Init 0072  
               ?_Show_val_LCD 0070               ?_Lcd_Set_Cursor 0076                       __ptext1 0260  
                     __ptext2 0279                       __ptext3 0122                       __ptext4 0205  
                     __ptext5 007B                       __ptext6 0287                       __ptext7 0271  
                     __ptext8 028D                       __ptext9 01C9                  __size_of_ISR 0007  
                     _initOsc 007B           __end_of_Write_USART 0260                       _spiInit 0205  
                     _spiRead 0260            __end_of_USART_Init 0279                       clrloop0 026A  
      __end_of_Lcd_Write_Char 0247          end_of_initialization 0018                ??_Show_val_LCD 007A  
                   _RCSTAbits 0018                     Lcd_Port@a 0072                     _PORTCbits 0007  
                   _PORTEbits 0009                     _TRISAbits 0085                     _TRISCbits 0087  
             ?_Lcd_Write_Char 0070             Lcd_Write_String@a 0077             Lcd_Write_String@i 0075  
                   _TXSTAbits 0098             ??_USART_INTERRUPT 0072                     _Lcd_Clear 0247  
              _spiReceiveWait 0279                   _Write_USART 0254              _Lcd_Write_String 0180  
         start_initialization 000F                   __end_of_ISR 0287             __size_of_Lcd_Init 004B  
           __size_of_Lcd_Port 0006   __end_of_USART_Init_BaudRate 028D        __end_of_spiReceiveWait 0280  
                  ?_Lcd_Clear 0070               Lcd_Write_Char@a 0074                     ___latbits 0002  
               __pcstackBANK0 0034          __end_of_Show_val_LCD 0231                      ?_Lcd_Cmd 0070  
          _Write_USART_String 01C9               ?_spiReceiveWait 0070              ??_Lcd_Set_Cursor 0077  
         ?_Write_USART_String 0070                     __pstrings 015B                      ?_initOsc 0070  
                    ?_spiInit 0072                      ?_spiRead 0070          ??_Write_USART_String 0073  
              __size_of_setup 0039          spiInit@sTransmitEdge 0074             interrupt_function 0004  
                   clear_ram0 0269                      _PIE1bits 008C            spiInit@sDataSample 0072  
                    Lcd_Cmd@a 0075                   ??_Lcd_Clear 0076                   __stringbase 0160  
            ??_Lcd_Write_Char 0073               _USART_INTERRUPT 028D                      _Lcd_Init 00D7  
                    _Lcd_Port 0293      __end_of_Lcd_Write_String 01A5              __size_of_Lcd_Cmd 001A  
                ?_Write_USART 0070            __end_of__stringtab 0161         __size_of_Show_val_LCD 0016  
            __size_of_initOsc 005C                      __ptext10 0254                      __ptext11 021B  
                    __ptext12 0180                      __ptext13 0231                      __ptext14 01A5  
                    __ptext15 0247                      __ptext16 00D7                      __ptext17 01EB  
                    __ptext18 0293                      __ptext19 0280              __size_of_spiInit 0016  
            __size_of_spiRead 0009                 __size_of_main 005F                  _Show_val_LCD 021B  
                spiInit@sType 0075             spiInit@sClockIdle 0073       __end_of_USART_INTERRUPT 0293  
                  _INTCONbits 000B           Write_USART_String@a 0074           Write_USART_String@i 0075  
                    intlevel1 0000              ??_spiReceiveWait 0072                     stringcode 015B  
                  _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006            Lcd_Set_Cursor@temp 0079  
                    stringdir 015B                      stringtab 015B                    _USART_Init 0271  
