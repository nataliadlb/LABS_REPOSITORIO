

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 08:14:41 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=3
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.20
    38                           ; Generated 12/02/2020 GMT
    39                           ; 
    40                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  000E                     	;# 
    87  000F                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0014                     	;# 
    93  0015                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001D                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  0081                     	;# 
   107  0085                     	;# 
   108  0086                     	;# 
   109  0087                     	;# 
   110  0088                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  008F                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  0105                     	;# 
   213  0107                     	;# 
   214  0108                     	;# 
   215  0109                     	;# 
   216  010C                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0185                     	;# 
   222  0187                     	;# 
   223  0188                     	;# 
   224  0189                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  000E                     	;# 
   243  000F                     	;# 
   244  0010                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0014                     	;# 
   249  0015                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0017                     	;# 
   253  0018                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001D                     	;# 
   260  001E                     	;# 
   261  001F                     	;# 
   262  0081                     	;# 
   263  0085                     	;# 
   264  0086                     	;# 
   265  0087                     	;# 
   266  0088                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305  0000                     	;# 
   306  0001                     	;# 
   307  0002                     	;# 
   308  0003                     	;# 
   309  0004                     	;# 
   310  0005                     	;# 
   311  0006                     	;# 
   312  0007                     	;# 
   313  0008                     	;# 
   314  0009                     	;# 
   315  000A                     	;# 
   316  000B                     	;# 
   317  000C                     	;# 
   318  000D                     	;# 
   319  000E                     	;# 
   320  000E                     	;# 
   321  000F                     	;# 
   322  0010                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0014                     	;# 
   327  0015                     	;# 
   328  0015                     	;# 
   329  0016                     	;# 
   330  0017                     	;# 
   331  0018                     	;# 
   332  0019                     	;# 
   333  001A                     	;# 
   334  001B                     	;# 
   335  001B                     	;# 
   336  001C                     	;# 
   337  001D                     	;# 
   338  001E                     	;# 
   339  001F                     	;# 
   340  0081                     	;# 
   341  0085                     	;# 
   342  0086                     	;# 
   343  0087                     	;# 
   344  0088                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  000E                     	;# 
   399  000F                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0013                     	;# 
   404  0014                     	;# 
   405  0015                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  001D                     	;# 
   416  001E                     	;# 
   417  001F                     	;# 
   418  0081                     	;# 
   419  0085                     	;# 
   420  0086                     	;# 
   421  0087                     	;# 
   422  0088                     	;# 
   423  0089                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  008F                     	;# 
   428  0090                     	;# 
   429  0091                     	;# 
   430  0092                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0093                     	;# 
   434  0094                     	;# 
   435  0095                     	;# 
   436  0096                     	;# 
   437  0097                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009A                     	;# 
   441  009B                     	;# 
   442  009C                     	;# 
   443  009D                     	;# 
   444  009E                     	;# 
   445  009F                     	;# 
   446  0105                     	;# 
   447  0107                     	;# 
   448  0108                     	;# 
   449  0109                     	;# 
   450  010C                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  010F                     	;# 
   455  0185                     	;# 
   456  0187                     	;# 
   457  0188                     	;# 
   458  0189                     	;# 
   459  018C                     	;# 
   460  018D                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  0008                     	;# 
   470  0009                     	;# 
   471  000A                     	;# 
   472  000B                     	;# 
   473  000C                     	;# 
   474  000D                     	;# 
   475  000E                     	;# 
   476  000E                     	;# 
   477  000F                     	;# 
   478  0010                     	;# 
   479  0011                     	;# 
   480  0012                     	;# 
   481  0013                     	;# 
   482  0014                     	;# 
   483  0015                     	;# 
   484  0015                     	;# 
   485  0016                     	;# 
   486  0017                     	;# 
   487  0018                     	;# 
   488  0019                     	;# 
   489  001A                     	;# 
   490  001B                     	;# 
   491  001B                     	;# 
   492  001C                     	;# 
   493  001D                     	;# 
   494  001E                     	;# 
   495  001F                     	;# 
   496  0081                     	;# 
   497  0085                     	;# 
   498  0086                     	;# 
   499  0087                     	;# 
   500  0088                     	;# 
   501  0089                     	;# 
   502  008C                     	;# 
   503  008D                     	;# 
   504  008E                     	;# 
   505  008F                     	;# 
   506  0090                     	;# 
   507  0091                     	;# 
   508  0092                     	;# 
   509  0093                     	;# 
   510  0093                     	;# 
   511  0093                     	;# 
   512  0094                     	;# 
   513  0095                     	;# 
   514  0096                     	;# 
   515  0097                     	;# 
   516  0098                     	;# 
   517  0099                     	;# 
   518  009A                     	;# 
   519  009B                     	;# 
   520  009C                     	;# 
   521  009D                     	;# 
   522  009E                     	;# 
   523  009F                     	;# 
   524  0105                     	;# 
   525  0107                     	;# 
   526  0108                     	;# 
   527  0109                     	;# 
   528  010C                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  010F                     	;# 
   533  0185                     	;# 
   534  0187                     	;# 
   535  0188                     	;# 
   536  0189                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539                           
   540                           	psect	strings
   541  0363                     __pstrings:
   542  0363                     stringtab:
   543  0363                     __stringtab:
   544                           
   545                           ;	String table - string pointers are 1 byte each
   546  0363  1BFF               	btfsc	btemp+1,7
   547  0364  2B6D               	ljmp	stringcode
   548  0365  1383               	bcf	3,7
   549  0366  187F               	btfsc	btemp+1,0
   550  0367  1783               	bsf	3,7
   551  0368  0800               	movf	0,w
   552  0369  0A84               	incf	4,f
   553  036A  1903               	skipnz
   554  036B  0AFF               	incf	btemp+1,f
   555  036C  0008               	return
   556  036D                     stringcode:
   557  036D                     stringdir:
   558  036D  3003               	movlw	high stringdir
   559  036E  008A               	movwf	10
   560  036F  0804               	movf	4,w
   561  0370  0A84               	incf	4,f
   562  0371  0782               	addwf	2,f
   563  0372                     __stringbase:
   564  0372  3400               	retlw	0
   565  0373                     __end_of__stringtab:
   566  0373                     _dpowers:
   567  0373  3401               	retlw	1
   568  0374  3400               	retlw	0
   569  0375  340A               	retlw	10
   570  0376  3400               	retlw	0
   571  0377  3464               	retlw	100
   572  0378  3400               	retlw	0
   573  0379  34E8               	retlw	232
   574  037A  3403               	retlw	3
   575  037B  3410               	retlw	16
   576  037C  3427               	retlw	39
   577  037D                     __end_of_dpowers:
   578  0013                     _SSPBUF	set	19
   579  0014                     _SSPCON	set	20
   580  001A                     _RCREG	set	26
   581  0019                     _TXREG	set	25
   582  000B                     _INTCONbits	set	11
   583  0018                     _RCSTAbits	set	24
   584  0009                     _PORTEbits	set	9
   585  0007                     _PORTCbits	set	7
   586  0009                     _PORTE	set	9
   587  0008                     _PORTD	set	8
   588  0007                     _PORTC	set	7
   589  0005                     _PORTA	set	5
   590  0006                     _PORTB	set	6
   591  0065                     _RCIF	set	101
   592  003A                     _RC2	set	58
   593  0094                     _SSPSTATbits	set	148
   594  0094                     _SSPSTAT	set	148
   595  008C                     _PIE1bits	set	140
   596  0099                     _SPBRG	set	153
   597  009A                     _SPBRGH	set	154
   598  0098                     _TXSTAbits	set	152
   599  008F                     _OSCCONbits	set	143
   600  0089                     _TRISE	set	137
   601  0088                     _TRISD	set	136
   602  0086                     _TRISB	set	134
   603  0085                     _TRISA	set	133
   604  043B                     _TRISC3	set	1083
   605  043D                     _TRISC5	set	1085
   606  04C1                     _TRMT	set	1217
   607  043A                     _TRISC2	set	1082
   608  0189                     _ANSELH	set	393
   609  0188                     _ANSEL	set	392
   610  037D                     STR_1:
   611  037D  3453               	retlw	83	;'S'
   612  037E  3431               	retlw	49	;'1'
   613  037F  343A               	retlw	58	;':'
   614  0380  3420               	retlw	32	;' '
   615  0381  3420               	retlw	32	;' '
   616  0382  3420               	retlw	32	;' '
   617  0383  3453               	retlw	83	;'S'
   618  0384  3432               	retlw	50	;'2'
   619  0385  343A               	retlw	58	;':'
   620  0386  3420               	retlw	32	;' '
   621  0387  3420               	retlw	32	;' '
   622  0388  3420               	retlw	32	;' '
   623  0389  3453               	retlw	83	;'S'
   624  038A  3433               	retlw	51	;'3'
   625  038B  343A               	retlw	58	;':'
   626  038C  3400               	retlw	0
   627  038D                     STR_2:
   628  038D  3425               	retlw	37	;'%'
   629  038E  342E               	retlw	46	;'.'
   630  038F  3433               	retlw	51	;'3'
   631  0390  3469               	retlw	105	;'i'
   632  0391  3400               	retlw	0
   633                           
   634                           	psect	cinit
   635  000F                     start_initialization:	
   636                           ; #config settings
   637                           
   638  000F                     __initialization:
   639                           
   640                           ; Clear objects allocated to COMMON
   641  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   642  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   643                           
   644                           ; Clear objects allocated to BANK0
   645  0011  1383               	bcf	3,7	;select IRP bank0
   646  0012  3020               	movlw	low __pbssBANK0
   647  0013  0084               	movwf	4
   648  0014  303C               	movlw	low (__pbssBANK0+28)
   649  0015  120A  118A  248A  120A  118A  	fcall	clear_ram0
   650  001A                     end_of_initialization:	
   651                           ;End of C runtime variable initialization code
   652                           
   653  001A                     __end_of__initialization:
   654  001A  0183               	clrf	3
   655  001B  120A  118A  2983   	ljmp	_main	;jump to C main() function
   656                           
   657                           	psect	bssCOMMON
   658  007A                     __pbssCOMMON:
   659  007A                     _cont:
   660  007A                     	ds	1
   661  007B                     _hola_esclavo:
   662  007B                     	ds	1
   663                           
   664                           	psect	bssBANK0
   665  0020                     __pbssBANK0:
   666  0020                     _data_total:
   667  0020                     	ds	20
   668  0034                     _data:
   669  0034                     	ds	8
   670                           
   671                           	psect	clrtext
   672  048A                     clear_ram0:	
   673                           ;	Called with FSR containing the base address, and
   674                           ;	W with the last address+1
   675                           
   676  048A  0064               	clrwdt	;clear the watchdog before getting into this loop
   677  048B                     clrloop0:
   678  048B  0180               	clrf	0	;clear RAM location pointed to by FSR
   679  048C  0A84               	incf	4,f	;increment pointer
   680  048D  0604               	xorwf	4,w	;XOR with final address
   681  048E  1903               	btfsc	3,2	;have we reached the end yet?
   682  048F  3400               	retlw	0	;all done for this memory range, return
   683  0490  0604               	xorwf	4,w	;XOR again to restore value
   684  0491  2C8B               	goto	clrloop0	;do the next byte
   685                           
   686                           	psect	cstackCOMMON
   687  0070                     __pcstackCOMMON:
   688  0070                     ?_isdigit:
   689  0070                     ?_setup:	
   690                           ; 1 bit 
   691                           
   692  0070                     ?_Lcd_Init:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_Lcd_Clear:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_spiWrite:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?_spiRead:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_ADC_to_string:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_Show_val_LCD:	
   708                           ; 1 bytes @ 0x0
   709                           
   710  0070                     ?_initOsc:	
   711                           ; 1 bytes @ 0x0
   712                           
   713  0070                     ?_Lcd_Port:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ?_Lcd_Cmd:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ?_ISR:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ??_ISR:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     ?_main:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_Lcd_Write_Char:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ?_spiReceiveWait:	
   732                           ; 1 bytes @ 0x0
   733                           
   734                           
   735                           ; 1 bytes @ 0x0
   736  0070                     	ds	2
   737  0072                     ??_spiWrite:
   738  0072                     ??_spiRead:	
   739                           ; 1 bytes @ 0x2
   740                           
   741  0072                     ??_initOsc:	
   742                           ; 1 bytes @ 0x2
   743                           
   744  0072                     ?_spiInit:	
   745                           ; 1 bytes @ 0x2
   746                           
   747  0072                     ??_Lcd_Port:	
   748                           ; 1 bytes @ 0x2
   749                           
   750  0072                     ??_isdigit:	
   751                           ; 1 bytes @ 0x2
   752                           
   753  0072                     ??_spiReceiveWait:	
   754                           ; 1 bytes @ 0x2
   755                           
   756  0072                     ?___bmul:	
   757                           ; 1 bytes @ 0x2
   758                           
   759  0072                     ?___lwdiv:	
   760                           ; 1 bytes @ 0x2
   761                           
   762  0072                     Lcd_Port@a:	
   763                           ; 2 bytes @ 0x2
   764                           
   765  0072                     spiInit@sDataSample:	
   766                           ; 1 bytes @ 0x2
   767                           
   768  0072                     spiWrite@dat:	
   769                           ; 1 bytes @ 0x2
   770                           
   771  0072                     ___bmul@multiplicand:	
   772                           ; 1 bytes @ 0x2
   773                           
   774  0072                     _isdigit$938:	
   775                           ; 1 bytes @ 0x2
   776                           
   777  0072                     ___lwdiv@divisor:	
   778                           ; 1 bytes @ 0x2
   779                           
   780                           
   781                           ; 2 bytes @ 0x2
   782  0072                     	ds	1
   783  0073                     ??_Lcd_Cmd:
   784  0073                     ??_Lcd_Write_Char:	
   785                           ; 1 bytes @ 0x3
   786                           
   787  0073                     ??___bmul:	
   788                           ; 1 bytes @ 0x3
   789                           
   790  0073                     spiInit@sClockIdle:	
   791                           ; 1 bytes @ 0x3
   792                           
   793  0073                     isdigit@c:	
   794                           ; 1 bytes @ 0x3
   795                           
   796                           
   797                           ; 1 bytes @ 0x3
   798  0073                     	ds	1
   799  0074                     initOsc@IRCF:
   800  0074                     Lcd_Write_Char@a:	
   801                           ; 1 bytes @ 0x4
   802                           
   803  0074                     spiInit@sTransmitEdge:	
   804                           ; 1 bytes @ 0x4
   805                           
   806  0074                     ___bmul@product:	
   807                           ; 1 bytes @ 0x4
   808                           
   809  0074                     ___lwdiv@dividend:	
   810                           ; 1 bytes @ 0x4
   811                           
   812                           
   813                           ; 2 bytes @ 0x4
   814  0074                     	ds	1
   815  0075                     ?_Lcd_Write_String:
   816  0075                     ??_spiInit:	
   817                           ; 1 bytes @ 0x5
   818                           
   819  0075                     Lcd_Cmd@a:	
   820                           ; 1 bytes @ 0x5
   821                           
   822  0075                     spiInit@sType:	
   823                           ; 1 bytes @ 0x5
   824                           
   825  0075                     ___bmul@multiplier:	
   826                           ; 1 bytes @ 0x5
   827                           
   828  0075                     Lcd_Write_String@a:	
   829                           ; 1 bytes @ 0x5
   830                           
   831                           
   832                           ; 2 bytes @ 0x5
   833  0075                     	ds	1
   834  0076                     ??_setup:
   835  0076                     ??_Lcd_Init:	
   836                           ; 1 bytes @ 0x6
   837                           
   838  0076                     ??_Lcd_Clear:	
   839                           ; 1 bytes @ 0x6
   840                           
   841  0076                     ?_Lcd_Set_Cursor:	
   842                           ; 1 bytes @ 0x6
   843                           
   844  0076                     ??___lwdiv:	
   845                           ; 1 bytes @ 0x6
   846                           
   847  0076                     Lcd_Set_Cursor@b:	
   848                           ; 1 bytes @ 0x6
   849                           
   850                           
   851                           ; 1 bytes @ 0x6
   852  0076                     	ds	1
   853  0077                     ??_Lcd_Set_Cursor:
   854  0077                     ??_Lcd_Write_String:	
   855                           ; 1 bytes @ 0x7
   856                           
   857  0077                     ___lwdiv@quotient:	
   858                           ; 1 bytes @ 0x7
   859                           
   860                           
   861                           ; 2 bytes @ 0x7
   862  0077                     	ds	1
   863  0078                     Lcd_Set_Cursor@a:
   864                           
   865                           ; 1 bytes @ 0x8
   866  0078                     	ds	1
   867  0079                     Lcd_Set_Cursor@temp:
   868  0079                     ___lwdiv@counter:	
   869                           ; 1 bytes @ 0x9
   870                           
   871                           
   872                           ; 1 bytes @ 0x9
   873  0079                     	ds	1
   874                           
   875                           	psect	cstackBANK0
   876  003C                     __pcstackBANK0:
   877  003C                     ?___lwmod:
   878  003C                     Lcd_Write_String@i:	
   879                           ; 2 bytes @ 0x0
   880                           
   881  003C                     ___lwmod@divisor:	
   882                           ; 2 bytes @ 0x0
   883                           
   884                           
   885                           ; 2 bytes @ 0x0
   886  003C                     	ds	2
   887  003E                     ??_Show_val_LCD:
   888  003E                     ___lwmod@dividend:	
   889                           ; 1 bytes @ 0x2
   890                           
   891                           
   892                           ; 2 bytes @ 0x2
   893  003E                     	ds	2
   894  0040                     ??___lwmod:
   895                           
   896                           ; 1 bytes @ 0x4
   897  0040                     	ds	1
   898  0041                     ___lwmod@counter:
   899                           
   900                           ; 1 bytes @ 0x5
   901  0041                     	ds	1
   902  0042                     ?_sprintf:
   903  0042                     sprintf@f:	
   904                           ; 2 bytes @ 0x6
   905                           
   906                           
   907                           ; 1 bytes @ 0x6
   908  0042                     	ds	3
   909  0045                     ??_sprintf:
   910                           
   911                           ; 1 bytes @ 0x9
   912  0045                     	ds	3
   913  0048                     sprintf@ap:
   914                           
   915                           ; 1 bytes @ 0xC
   916  0048                     	ds	1
   917  0049                     sprintf@flag:
   918                           
   919                           ; 1 bytes @ 0xD
   920  0049                     	ds	1
   921  004A                     sprintf@sp:
   922                           
   923                           ; 1 bytes @ 0xE
   924  004A                     	ds	1
   925  004B                     sprintf@val:
   926                           
   927                           ; 2 bytes @ 0xF
   928  004B                     	ds	2
   929  004D                     sprintf@prec:
   930                           
   931                           ; 1 bytes @ 0x11
   932  004D                     	ds	1
   933  004E                     sprintf@c:
   934                           
   935                           ; 1 bytes @ 0x12
   936  004E                     	ds	1
   937  004F                     ??_ADC_to_string:
   938                           
   939                           ; 1 bytes @ 0x13
   940  004F                     	ds	3
   941  0052                     ??_main:
   942                           
   943                           ; 1 bytes @ 0x16
   944  0052                     	ds	3
   945                           
   946                           	psect	maintext
   947  0183                     __pmaintext:	
   948 ;;
   949 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   950 ;;
   951 ;; *************** function _main *****************
   952 ;; Defined at:
   953 ;;		line 85 in file "main_maestro.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;		None
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : B00/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   967 ;;      Params:         0       0       0       0       0
   968 ;;      Locals:         0       0       0       0       0
   969 ;;      Temps:          0       3       0       0       0
   970 ;;      Totals:         0       3       0       0       0
   971 ;;Total ram usage:        3 bytes
   972 ;; Hardware stack levels required when called:    5
   973 ;; This function calls:
   974 ;;		_ADC_to_string
   975 ;;		_Lcd_Clear
   976 ;;		_Lcd_Init
   977 ;;		_Lcd_Set_Cursor
   978 ;;		_Lcd_Write_String
   979 ;;		_Show_val_LCD
   980 ;;		_setup
   981 ;;		_spiRead
   982 ;;		_spiWrite
   983 ;; This function is called by:
   984 ;;		Startup code after reset
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           
   989                           ;psect for function _main
   990  0183                     _main:
   991  0183                     l1715:	
   992                           ;incstack = 0
   993                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   994                           
   995                           
   996                           ;main_maestro.c: 86:     setup();
   997  0183  120A  118A  2392  120A  118A  	fcall	_setup
   998  0188                     l1717:
   999                           
  1000                           ;main_maestro.c: 87:     PORTB = 0;
  1001  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1002  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1003  018A  0186               	clrf	6	;volatile
  1004  018B                     l1719:
  1005                           
  1006                           ;main_maestro.c: 88:     cont = 0;
  1007  018B  01FA               	clrf	_cont
  1008  018C                     l1721:
  1009                           
  1010                           ;main_maestro.c: 90:     Lcd_Init();
  1011  018C  120A  118A  2252  120A  118A  	fcall	_Lcd_Init
  1012  0191                     l1723:
  1013                           
  1014                           ;main_maestro.c: 91:     Lcd_Clear();
  1015  0191  120A  118A  2474  120A  118A  	fcall	_Lcd_Clear
  1016  0196                     l1725:
  1017                           
  1018                           ;main_maestro.c: 92:     Lcd_Set_Cursor(1,2);
  1019  0196  3002               	movlw	2
  1020  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0199  00D2               	movwf	??_main
  1023  019A  0852               	movf	??_main,w
  1024  019B  00F6               	movwf	Lcd_Set_Cursor@b
  1025  019C  3001               	movlw	1
  1026  019D  120A  118A  23B9  120A  118A  	fcall	_Lcd_Set_Cursor
  1027  01A2                     l1727:
  1028                           
  1029                           ;main_maestro.c: 93:     Lcd_Write_String("S1:   S2:   S3:");
  1030  01A2  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1031  01A3  00F5               	movwf	Lcd_Write_String@a
  1032  01A4  3080               	movlw	128
  1033  01A5  00F6               	movwf	Lcd_Write_String@a+1
  1034  01A6  120A  118A  229D  120A  118A  	fcall	_Lcd_Write_String
  1035  01AB                     l1729:
  1036                           
  1037                           ;main_maestro.c: 100:         RC2 = 0;
  1038  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1039  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1040  01AD  1107               	bcf	7,2	;volatile
  1041  01AE                     l1731:
  1042                           
  1043                           ;main_maestro.c: 101:        _delay((unsigned long)((1)*(8000000/4000.0)));
  1044  01AE  3003               	movlw	3
  1045  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1046  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1047  01B1  00D3               	movwf	??_main+1
  1048  01B2  3097               	movlw	151
  1049  01B3  00D2               	movwf	??_main
  1050  01B4                     u1017:
  1051  01B4  0BD2               	decfsz	??_main,f
  1052  01B5  29B4               	goto	u1017
  1053  01B6  0BD3               	decfsz	??_main+1,f
  1054  01B7  29B4               	goto	u1017
  1055  01B8                     l1733:
  1056                           
  1057                           ;main_maestro.c: 103:        spiWrite(hola_esclavo);
  1058  01B8  3000               	movlw	0
  1059  01B9  120A  118A  24A0  120A  118A  	fcall	_spiWrite
  1060  01BE                     l1735:
  1061                           
  1062                           ;main_maestro.c: 104:        cont = spiRead();
  1063  01BE  120A  118A  2481  120A  118A  	fcall	_spiRead
  1064  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1065  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1066  01C5  00D2               	movwf	??_main
  1067  01C6  0852               	movf	??_main,w
  1068  01C7  00FA               	movwf	_cont
  1069  01C8                     l1737:
  1070                           
  1071                           ;main_maestro.c: 106:        _delay((unsigned long)((1)*(8000000/4000.0)));
  1072  01C8  3003               	movlw	3
  1073  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1074  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1075  01CB  00D3               	movwf	??_main+1
  1076  01CC  3097               	movlw	151
  1077  01CD  00D2               	movwf	??_main
  1078  01CE                     u1027:
  1079  01CE  0BD2               	decfsz	??_main,f
  1080  01CF  29CE               	goto	u1027
  1081  01D0  0BD3               	decfsz	??_main+1,f
  1082  01D1  29CE               	goto	u1027
  1083  01D2                     l1739:
  1084                           
  1085                           ;main_maestro.c: 107:        RC2 = 1;
  1086  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1087  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1088  01D4  1507               	bsf	7,2	;volatile
  1089  01D5                     l1741:
  1090                           
  1091                           ;main_maestro.c: 109:        _delay((unsigned long)((100)*(8000000/4000.0)));
  1092  01D5  3002               	movlw	2
  1093  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1094  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1095  01D8  00D4               	movwf	??_main+2
  1096  01D9  3004               	movlw	4
  1097  01DA  00D3               	movwf	??_main+1
  1098  01DB  30B9               	movlw	185
  1099  01DC  00D2               	movwf	??_main
  1100  01DD                     u1037:
  1101  01DD  0BD2               	decfsz	??_main,f
  1102  01DE  29DD               	goto	u1037
  1103  01DF  0BD3               	decfsz	??_main+1,f
  1104  01E0  29DD               	goto	u1037
  1105  01E1  0BD4               	decfsz	??_main+2,f
  1106  01E2  29DD               	goto	u1037
  1107  01E3  29E4               	nop2
  1108  01E4                     l1743:
  1109                           
  1110                           ;main_maestro.c: 112:        PORTB = cont;
  1111  01E4  087A               	movf	_cont,w
  1112  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1113  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1114  01E7  0086               	movwf	6	;volatile
  1115  01E8                     l1745:
  1116                           
  1117                           ;main_maestro.c: 113:        ADC_to_string();
  1118  01E8  120A  118A  244E  120A  118A  	fcall	_ADC_to_string
  1119  01ED                     l1747:
  1120                           
  1121                           ;main_maestro.c: 119:         Show_val_LCD();
  1122  01ED  120A  118A  240D  120A  118A  	fcall	_Show_val_LCD
  1123  01F2  29AB               	goto	l1729
  1124  01F3  120A  118A  280C   	ljmp	start
  1125  01F6                     __end_of_main:
  1126                           
  1127                           	psect	text1
  1128  04A0                     __ptext1:	
  1129 ;; *************** function _spiWrite *****************
  1130 ;; Defined at:
  1131 ;;		line 36 in file "SPI.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  dat             1    wreg     unsigned char 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  dat             1    2[COMMON] unsigned char 
  1136 ;; Return value:  Size  Location     Type
  1137 ;;                  1    wreg      void 
  1138 ;; Registers used:
  1139 ;;		wreg
  1140 ;; Tracked objects:
  1141 ;;		On entry : 0/0
  1142 ;;		On exit  : 0/0
  1143 ;;		Unchanged: 0/0
  1144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1145 ;;      Params:         0       0       0       0       0
  1146 ;;      Locals:         1       0       0       0       0
  1147 ;;      Temps:          0       0       0       0       0
  1148 ;;      Totals:         1       0       0       0       0
  1149 ;;Total ram usage:        1 bytes
  1150 ;; Hardware stack levels used:    1
  1151 ;; Hardware stack levels required when called:    1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           
  1160                           ;psect for function _spiWrite
  1161  04A0                     _spiWrite:
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _spiWrite: [wreg]
  1165                           ;spiWrite@dat stored from wreg
  1166  04A0  00F2               	movwf	spiWrite@dat
  1167  04A1                     l1067:
  1168                           
  1169                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  1170  04A1  0872               	movf	spiWrite@dat,w
  1171  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  1172  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  1173  04A4  0093               	movwf	19	;volatile
  1174  04A5                     l216:
  1175  04A5  0008               	return
  1176  04A6                     __end_of_spiWrite:
  1177                           
  1178                           	psect	text2
  1179  0481                     __ptext2:	
  1180 ;; *************** function _spiRead *****************
  1181 ;; Defined at:
  1182 ;;		line 49 in file "SPI.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;		None
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;		None
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      unsigned char 
  1189 ;; Registers used:
  1190 ;;		wreg, status,2, status,0, pclath, cstack
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1196 ;;      Params:         0       0       0       0       0
  1197 ;;      Locals:         0       0       0       0       0
  1198 ;;      Temps:          0       0       0       0       0
  1199 ;;      Totals:         0       0       0       0       0
  1200 ;;Total ram usage:        0 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    2
  1203 ;; This function calls:
  1204 ;;		_spiReceiveWait
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           
  1211                           ;psect for function _spiRead
  1212  0481                     _spiRead:
  1213  0481                     l1069:	
  1214                           ;incstack = 0
  1215                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1216                           
  1217                           
  1218                           ;SPI.c: 51:     spiReceiveWait();
  1219  0481  120A  118A  2492  120A  118A  	fcall	_spiReceiveWait
  1220  0486                     l1071:
  1221                           
  1222                           ;SPI.c: 52:     return(SSPBUF);
  1223  0486  1283               	bcf	3,5	;RP0=0, select bank0
  1224  0487  1303               	bcf	3,6	;RP1=0, select bank0
  1225  0488  0813               	movf	19,w	;volatile
  1226  0489                     l224:
  1227  0489  0008               	return
  1228  048A                     __end_of_spiRead:
  1229                           
  1230                           	psect	text3
  1231  0492                     __ptext3:	
  1232 ;; *************** function _spiReceiveWait *****************
  1233 ;; Defined at:
  1234 ;;		line 31 in file "SPI.c"
  1235 ;; Parameters:    Size  Location     Type
  1236 ;;		None
  1237 ;; Auto vars:     Size  Location     Type
  1238 ;;		None
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		None
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1248 ;;      Params:         0       0       0       0       0
  1249 ;;      Locals:         0       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0
  1251 ;;      Totals:         0       0       0       0       0
  1252 ;;Total ram usage:        0 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    1
  1255 ;; This function calls:
  1256 ;;		Nothing
  1257 ;; This function is called by:
  1258 ;;		_spiRead
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           
  1263                           ;psect for function _spiReceiveWait
  1264  0492                     _spiReceiveWait:
  1265  0492                     l1023:	
  1266                           ;incstack = 0
  1267                           ; Regs used in _spiReceiveWait: []
  1268                           
  1269  0492                     l210:	
  1270                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  1271                           
  1272  0492  1683               	bsf	3,5	;RP0=1, select bank1
  1273  0493  1303               	bcf	3,6	;RP1=0, select bank1
  1274  0494  1C14               	btfss	20,0	;volatile
  1275  0495  2C97               	goto	u371
  1276  0496  2C98               	goto	u370
  1277  0497                     u371:
  1278  0497  2C92               	goto	l210
  1279  0498                     u370:
  1280  0498                     l213:
  1281  0498  0008               	return
  1282  0499                     __end_of_spiReceiveWait:
  1283                           
  1284                           	psect	text4
  1285  0392                     __ptext4:	
  1286 ;; *************** function _setup *****************
  1287 ;; Defined at:
  1288 ;;		line 129 in file "main_maestro.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;		None
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;		None
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1302 ;;      Params:         0       0       0       0       0
  1303 ;;      Locals:         0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0
  1305 ;;      Totals:         0       0       0       0       0
  1306 ;;Total ram usage:        0 bytes
  1307 ;; Hardware stack levels used:    1
  1308 ;; Hardware stack levels required when called:    2
  1309 ;; This function calls:
  1310 ;;		_initOsc
  1311 ;;		_spiInit
  1312 ;; This function is called by:
  1313 ;;		_main
  1314 ;; This function uses a non-reentrant model
  1315 ;;
  1316                           
  1317                           
  1318                           ;psect for function _setup
  1319  0392                     _setup:
  1320  0392                     l1407:	
  1321                           ;incstack = 0
  1322                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1323                           
  1324                           
  1325                           ;main_maestro.c: 130:     initOsc(7);
  1326  0392  3007               	movlw	7
  1327  0393  120A  118A  21F6  120A  118A  	fcall	_initOsc
  1328  0398                     l1409:
  1329                           
  1330                           ;main_maestro.c: 131:     ANSEL = 0;
  1331  0398  1683               	bsf	3,5	;RP0=1, select bank3
  1332  0399  1703               	bsf	3,6	;RP1=1, select bank3
  1333  039A  0188               	clrf	8	;volatile
  1334  039B                     l1411:
  1335                           
  1336                           ;main_maestro.c: 132:     ANSELH = 0;
  1337  039B  0189               	clrf	9	;volatile
  1338  039C                     l1413:
  1339                           
  1340                           ;main_maestro.c: 134:     TRISA = 0;
  1341  039C  1683               	bsf	3,5	;RP0=1, select bank1
  1342  039D  1303               	bcf	3,6	;RP1=0, select bank1
  1343  039E  0185               	clrf	5	;volatile
  1344  039F                     l1415:
  1345                           
  1346                           ;main_maestro.c: 135:     TRISB = 0;
  1347  039F  0186               	clrf	6	;volatile
  1348  03A0                     l1417:
  1349                           
  1350                           ;main_maestro.c: 139:     TRISD = 0;
  1351  03A0  0188               	clrf	8	;volatile
  1352  03A1                     l1419:
  1353                           
  1354                           ;main_maestro.c: 140:     TRISE = 0;
  1355  03A1  0189               	clrf	9	;volatile
  1356  03A2                     l1421:
  1357                           
  1358                           ;main_maestro.c: 142:     PORTA = 0;
  1359  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  1360  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  1361  03A4  0185               	clrf	5	;volatile
  1362  03A5                     l1423:
  1363                           
  1364                           ;main_maestro.c: 143:     PORTB = 0;
  1365  03A5  0186               	clrf	6	;volatile
  1366  03A6                     l1425:
  1367                           
  1368                           ;main_maestro.c: 144:     PORTC = 0;
  1369  03A6  0187               	clrf	7	;volatile
  1370  03A7                     l1427:
  1371                           
  1372                           ;main_maestro.c: 145:     PORTD = 0;
  1373  03A7  0188               	clrf	8	;volatile
  1374  03A8                     l1429:
  1375                           
  1376                           ;main_maestro.c: 146:     PORTE = 0;
  1377  03A8  0189               	clrf	9	;volatile
  1378  03A9                     l1431:
  1379                           
  1380                           ;main_maestro.c: 150:     TRISC2 = 0;
  1381  03A9  1683               	bsf	3,5	;RP0=1, select bank1
  1382  03AA  1303               	bcf	3,6	;RP1=0, select bank1
  1383  03AB  1107               	bcf	7,2	;volatile
  1384  03AC                     l1433:
  1385                           
  1386                           ;main_maestro.c: 151:     PORTCbits.RC2 = 1;
  1387  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  1388  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  1389  03AE  1507               	bsf	7,2	;volatile
  1390  03AF                     l1435:
  1391                           
  1392                           ;main_maestro.c: 159:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1393  03AF  01F2               	clrf	spiInit@sDataSample
  1394  03B0  01F3               	clrf	spiInit@sClockIdle
  1395  03B1  01F4               	clrf	spiInit@sTransmitEdge
  1396  03B2  3020               	movlw	32
  1397  03B3  120A  118A  23F7  120A  118A  	fcall	_spiInit
  1398  03B8                     l78:
  1399  03B8  0008               	return
  1400  03B9                     __end_of_setup:
  1401                           
  1402                           	psect	text5
  1403  03F7                     __ptext5:	
  1404 ;; *************** function _spiInit *****************
  1405 ;; Defined at:
  1406 ;;		line 14 in file "SPI.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  sType           1    wreg     enum E1264
  1409 ;;  sDataSample     1    2[COMMON] enum E1272
  1410 ;;  sClockIdle      1    3[COMMON] enum E1276
  1411 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  sType           1    5[COMMON] enum E1264
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg, status,2, status,0
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1423 ;;      Params:         3       0       0       0       0
  1424 ;;      Locals:         1       0       0       0       0
  1425 ;;      Temps:          0       0       0       0       0
  1426 ;;      Totals:         4       0       0       0       0
  1427 ;;Total ram usage:        4 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    1
  1430 ;; This function calls:
  1431 ;;		Nothing
  1432 ;; This function is called by:
  1433 ;;		_setup
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           
  1438                           ;psect for function _spiInit
  1439  03F7                     _spiInit:
  1440                           
  1441                           ;incstack = 0
  1442                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1443                           ;spiInit@sType stored from wreg
  1444  03F7  00F5               	movwf	spiInit@sType
  1445  03F8                     l1307:
  1446                           
  1447                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1448  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  1449  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  1450  03FA  1287               	bcf	7,5	;volatile
  1451                           
  1452                           ;SPI.c: 17:     if(sType & 0b00000100)
  1453  03FB  1D75               	btfss	spiInit@sType,2
  1454  03FC  2BFE               	goto	u631
  1455  03FD  2BFF               	goto	u630
  1456  03FE                     u631:
  1457  03FE  2C03               	goto	l1313
  1458  03FF                     u630:
  1459  03FF                     l1309:
  1460                           
  1461                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1462  03FF  0874               	movf	spiInit@sTransmitEdge,w
  1463  0400  0094               	movwf	20	;volatile
  1464  0401                     l1311:
  1465                           
  1466                           ;SPI.c: 20:         TRISC3 = 1;
  1467  0401  1587               	bsf	7,3	;volatile
  1468                           
  1469                           ;SPI.c: 21:     }
  1470  0402  2C07               	goto	l206
  1471  0403                     l1313:
  1472                           
  1473                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1474  0403  0872               	movf	spiInit@sDataSample,w
  1475  0404  0474               	iorwf	spiInit@sTransmitEdge,w
  1476  0405  0094               	movwf	20	;volatile
  1477  0406                     l1315:
  1478                           
  1479                           ;SPI.c: 25:         TRISC3 = 0;
  1480  0406  1187               	bcf	7,3	;volatile
  1481  0407                     l206:	
  1482                           ;SPI.c: 26:     }
  1483                           
  1484                           
  1485                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1486  0407  0875               	movf	spiInit@sType,w
  1487  0408  0473               	iorwf	spiInit@sClockIdle,w
  1488  0409  1283               	bcf	3,5	;RP0=0, select bank0
  1489  040A  1303               	bcf	3,6	;RP1=0, select bank0
  1490  040B  0094               	movwf	20	;volatile
  1491  040C                     l207:
  1492  040C  0008               	return
  1493  040D                     __end_of_spiInit:
  1494                           
  1495                           	psect	text6
  1496  01F6                     __ptext6:	
  1497 ;; *************** function _initOsc *****************
  1498 ;; Defined at:
  1499 ;;		line 3 in file "Oscilador.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  IRCF            1    wreg     unsigned char 
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;  IRCF            1    4[COMMON] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1513 ;;      Params:         0       0       0       0       0
  1514 ;;      Locals:         1       0       0       0       0
  1515 ;;      Temps:          2       0       0       0       0
  1516 ;;      Totals:         3       0       0       0       0
  1517 ;;Total ram usage:        3 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    1
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_setup
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           
  1528                           ;psect for function _initOsc
  1529  01F6                     _initOsc:
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1533                           ;initOsc@IRCF stored from wreg
  1534  01F6  00F4               	movwf	initOsc@IRCF
  1535  01F7                     l915:
  1536                           
  1537                           ;Oscilador.c: 5:     switch(IRCF){
  1538  01F7  2A2E               	goto	l919
  1539  01F8                     l90:	
  1540                           ;Oscilador.c: 6:         case 0:
  1541                           
  1542                           
  1543                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1544  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  1545  01F9  1303               	bcf	3,6	;RP1=0, select bank1
  1546  01FA  130F               	bcf	15,6	;volatile
  1547                           
  1548                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1549  01FB  128F               	bcf	15,5	;volatile
  1550                           
  1551                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1552  01FC  120F               	bcf	15,4	;volatile
  1553                           
  1554                           ;Oscilador.c: 10:             break;
  1555  01FD  2A50               	goto	l91
  1556  01FE                     l92:	
  1557                           ;Oscilador.c: 11:          case 1:
  1558                           
  1559                           
  1560                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1561  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  1562  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  1563  0200  130F               	bcf	15,6	;volatile
  1564                           
  1565                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1566  0201  128F               	bcf	15,5	;volatile
  1567                           
  1568                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1569  0202  160F               	bsf	15,4	;volatile
  1570                           
  1571                           ;Oscilador.c: 15:             break;
  1572  0203  2A50               	goto	l91
  1573  0204                     l93:	
  1574                           ;Oscilador.c: 16:         case 2:
  1575                           
  1576                           
  1577                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1578  0204  1683               	bsf	3,5	;RP0=1, select bank1
  1579  0205  1303               	bcf	3,6	;RP1=0, select bank1
  1580  0206  130F               	bcf	15,6	;volatile
  1581                           
  1582                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1583  0207  168F               	bsf	15,5	;volatile
  1584                           
  1585                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1586  0208  120F               	bcf	15,4	;volatile
  1587                           
  1588                           ;Oscilador.c: 20:             break;
  1589  0209  2A50               	goto	l91
  1590  020A                     l94:	
  1591                           ;Oscilador.c: 21:         case 3:
  1592                           
  1593                           
  1594                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1595  020A  1683               	bsf	3,5	;RP0=1, select bank1
  1596  020B  1303               	bcf	3,6	;RP1=0, select bank1
  1597  020C  130F               	bcf	15,6	;volatile
  1598                           
  1599                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1600  020D  168F               	bsf	15,5	;volatile
  1601                           
  1602                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1603  020E  160F               	bsf	15,4	;volatile
  1604                           
  1605                           ;Oscilador.c: 25:             break;
  1606  020F  2A50               	goto	l91
  1607  0210                     l95:	
  1608                           ;Oscilador.c: 26:         case 4:
  1609                           
  1610                           
  1611                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1612  0210  1683               	bsf	3,5	;RP0=1, select bank1
  1613  0211  1303               	bcf	3,6	;RP1=0, select bank1
  1614  0212  170F               	bsf	15,6	;volatile
  1615                           
  1616                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1617  0213  128F               	bcf	15,5	;volatile
  1618                           
  1619                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1620  0214  120F               	bcf	15,4	;volatile
  1621                           
  1622                           ;Oscilador.c: 30:             break;
  1623  0215  2A50               	goto	l91
  1624  0216                     l96:	
  1625                           ;Oscilador.c: 31:         case 5:
  1626                           
  1627                           
  1628                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1629  0216  1683               	bsf	3,5	;RP0=1, select bank1
  1630  0217  1303               	bcf	3,6	;RP1=0, select bank1
  1631  0218  170F               	bsf	15,6	;volatile
  1632                           
  1633                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1634  0219  128F               	bcf	15,5	;volatile
  1635                           
  1636                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1637  021A  160F               	bsf	15,4	;volatile
  1638                           
  1639                           ;Oscilador.c: 35:             break;
  1640  021B  2A50               	goto	l91
  1641  021C                     l97:	
  1642                           ;Oscilador.c: 36:         case 6:
  1643                           
  1644                           
  1645                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1646  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1647  021D  1303               	bcf	3,6	;RP1=0, select bank1
  1648  021E  170F               	bsf	15,6	;volatile
  1649                           
  1650                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1651  021F  168F               	bsf	15,5	;volatile
  1652                           
  1653                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1654  0220  120F               	bcf	15,4	;volatile
  1655                           
  1656                           ;Oscilador.c: 40:             break;
  1657  0221  2A50               	goto	l91
  1658  0222                     l98:	
  1659                           ;Oscilador.c: 41:         case 7:
  1660                           
  1661                           
  1662                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1663  0222  1683               	bsf	3,5	;RP0=1, select bank1
  1664  0223  1303               	bcf	3,6	;RP1=0, select bank1
  1665  0224  170F               	bsf	15,6	;volatile
  1666                           
  1667                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1668  0225  168F               	bsf	15,5	;volatile
  1669                           
  1670                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1671  0226  160F               	bsf	15,4	;volatile
  1672                           
  1673                           ;Oscilador.c: 45:             break;
  1674  0227  2A50               	goto	l91
  1675  0228                     l99:	
  1676                           ;Oscilador.c: 46:         default:
  1677                           
  1678                           
  1679                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1680  0228  1683               	bsf	3,5	;RP0=1, select bank1
  1681  0229  1303               	bcf	3,6	;RP1=0, select bank1
  1682  022A  170F               	bsf	15,6	;volatile
  1683                           
  1684                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1685  022B  168F               	bsf	15,5	;volatile
  1686                           
  1687                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1688  022C  120F               	bcf	15,4	;volatile
  1689                           
  1690                           ;Oscilador.c: 50:             break;
  1691  022D  2A50               	goto	l91
  1692  022E                     l919:
  1693  022E  0874               	movf	initOsc@IRCF,w
  1694  022F  00F2               	movwf	??_initOsc
  1695  0230  01F3               	clrf	??_initOsc+1
  1696                           
  1697                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1698                           ; Switch size 1, requested type "simple"
  1699                           ; Number of cases is 1, Range of values is 0 to 0
  1700                           ; switch strategies available:
  1701                           ; Name         Instructions Cycles
  1702                           ; simple_byte            4     3 (average)
  1703                           ; direct_byte           11     8 (fixed)
  1704                           ; jumptable            260     6 (fixed)
  1705                           ;	Chosen strategy is simple_byte
  1706  0231  0873               	movf	??_initOsc+1,w
  1707  0232  3A00               	xorlw	0	; case 0
  1708  0233  1903               	skipnz
  1709  0234  2A36               	goto	l1803
  1710  0235  2A28               	goto	l99
  1711  0236                     l1803:
  1712                           
  1713                           ; Switch size 1, requested type "simple"
  1714                           ; Number of cases is 8, Range of values is 0 to 7
  1715                           ; switch strategies available:
  1716                           ; Name         Instructions Cycles
  1717                           ; simple_byte           25    13 (average)
  1718                           ; direct_byte           32     8 (fixed)
  1719                           ; jumptable            260     6 (fixed)
  1720                           ;	Chosen strategy is simple_byte
  1721  0236  0872               	movf	??_initOsc,w
  1722  0237  3A00               	xorlw	0	; case 0
  1723  0238  1903               	skipnz
  1724  0239  29F8               	goto	l90
  1725  023A  3A01               	xorlw	1	; case 1
  1726  023B  1903               	skipnz
  1727  023C  29FE               	goto	l92
  1728  023D  3A03               	xorlw	3	; case 2
  1729  023E  1903               	skipnz
  1730  023F  2A04               	goto	l93
  1731  0240  3A01               	xorlw	1	; case 3
  1732  0241  1903               	skipnz
  1733  0242  2A0A               	goto	l94
  1734  0243  3A07               	xorlw	7	; case 4
  1735  0244  1903               	skipnz
  1736  0245  2A10               	goto	l95
  1737  0246  3A01               	xorlw	1	; case 5
  1738  0247  1903               	skipnz
  1739  0248  2A16               	goto	l96
  1740  0249  3A03               	xorlw	3	; case 6
  1741  024A  1903               	skipnz
  1742  024B  2A1C               	goto	l97
  1743  024C  3A01               	xorlw	1	; case 7
  1744  024D  1903               	skipnz
  1745  024E  2A22               	goto	l98
  1746  024F  2A28               	goto	l99
  1747  0250                     l91:
  1748                           
  1749                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1750  0250  140F               	bsf	15,0	;volatile
  1751  0251                     l100:
  1752  0251  0008               	return
  1753  0252                     __end_of_initOsc:
  1754                           
  1755                           	psect	text7
  1756  040D                     __ptext7:	
  1757 ;; *************** function _Show_val_LCD *****************
  1758 ;; Defined at:
  1759 ;;		line 176 in file "main_maestro.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1773 ;;      Params:         0       0       0       0       0
  1774 ;;      Locals:         0       0       0       0       0
  1775 ;;      Temps:          0       1       0       0       0
  1776 ;;      Totals:         0       1       0       0       0
  1777 ;;Total ram usage:        1 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    4
  1780 ;; This function calls:
  1781 ;;		_Lcd_Set_Cursor
  1782 ;;		_Lcd_Write_String
  1783 ;; This function is called by:
  1784 ;;		_main
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           
  1789                           ;psect for function _Show_val_LCD
  1790  040D                     _Show_val_LCD:
  1791  040D                     l1711:	
  1792                           ;incstack = 0
  1793                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1794                           
  1795                           
  1796                           ;main_maestro.c: 179:     Lcd_Set_Cursor(2,2);
  1797  040D  3002               	movlw	2
  1798  040E  1283               	bcf	3,5	;RP0=0, select bank0
  1799  040F  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0410  00BE               	movwf	??_Show_val_LCD
  1801  0411  083E               	movf	??_Show_val_LCD,w
  1802  0412  00F6               	movwf	Lcd_Set_Cursor@b
  1803  0413  3002               	movlw	2
  1804  0414  120A  118A  23B9  120A  118A  	fcall	_Lcd_Set_Cursor
  1805  0419                     l1713:
  1806                           
  1807                           ;main_maestro.c: 180:     Lcd_Write_String(data);
  1808  0419  3034               	movlw	(low (_data| 0))& (0+255)
  1809  041A  00F5               	movwf	Lcd_Write_String@a
  1810  041B  3000               	movlw	0
  1811  041C  00F6               	movwf	Lcd_Write_String@a+1
  1812  041D  120A  118A  229D  120A  118A  	fcall	_Lcd_Write_String
  1813  0422                     l84:
  1814  0422  0008               	return
  1815  0423                     __end_of_Show_val_LCD:
  1816                           
  1817                           	psect	text8
  1818  029D                     __ptext8:	
  1819 ;; *************** function _Lcd_Write_String *****************
  1820 ;; Defined at:
  1821 ;;		line 70 in file "LCD.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;  a               2    5[COMMON] PTR unsigned char 
  1824 ;;		 -> data(8), STR_1(16), 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  i               2    0[BANK0 ] int 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1836 ;;      Params:         2       0       0       0       0
  1837 ;;      Locals:         0       2       0       0       0
  1838 ;;      Temps:          3       0       0       0       0
  1839 ;;      Totals:         5       2       0       0       0
  1840 ;;Total ram usage:        7 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    3
  1843 ;; This function calls:
  1844 ;;		_Lcd_Write_Char
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;;		_Show_val_LCD
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           
  1852                           ;psect for function _Lcd_Write_String
  1853  029D                     _Lcd_Write_String:
  1854  029D                     l1599:	
  1855                           ;incstack = 0
  1856                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1857                           
  1858                           
  1859                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  1860  029D  1283               	bcf	3,5	;RP0=0, select bank0
  1861  029E  1303               	bcf	3,6	;RP1=0, select bank0
  1862  029F  01BC               	clrf	Lcd_Write_String@i
  1863  02A0  01BD               	clrf	Lcd_Write_String@i+1
  1864  02A1  2AC6               	goto	l1605
  1865  02A2                     l1601:
  1866                           
  1867                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  1868  02A2  083C               	movf	Lcd_Write_String@i,w
  1869  02A3  0775               	addwf	Lcd_Write_String@a,w
  1870  02A4  00F8               	movwf	??_Lcd_Write_String+1
  1871  02A5  0876               	movf	Lcd_Write_String@a+1,w
  1872  02A6  00F7               	movwf	??_Lcd_Write_String
  1873  02A7  1803               	skipnc
  1874  02A8  0AF7               	incf	??_Lcd_Write_String,f
  1875  02A9  1FBC               	btfss	Lcd_Write_String@i,7
  1876  02AA  2AAC               	goto	u850
  1877  02AB  03F7               	decf	??_Lcd_Write_String,f
  1878  02AC                     u850:
  1879  02AC  0877               	movf	??_Lcd_Write_String,w
  1880  02AD  00F9               	movwf	??_Lcd_Write_String+2
  1881  02AE  0879               	movf	??_Lcd_Write_String+2,w
  1882  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1883  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1884  02B1  00FF               	movwf	btemp+1
  1885  02B2  0878               	movf	??_Lcd_Write_String+1,w
  1886  02B3  0084               	movwf	4
  1887  02B4  120A  118A  2363  120A  118A  	fcall	stringtab
  1888  02B9  120A  118A  2423  120A  118A  	fcall	_Lcd_Write_Char
  1889  02BE                     l1603:
  1890  02BE  3001               	movlw	1
  1891  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  1892  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  1893  02C1  07BC               	addwf	Lcd_Write_String@i,f
  1894  02C2  1803               	skipnc
  1895  02C3  0ABD               	incf	Lcd_Write_String@i+1,f
  1896  02C4  3000               	movlw	0
  1897  02C5  07BD               	addwf	Lcd_Write_String@i+1,f
  1898  02C6                     l1605:
  1899  02C6  083C               	movf	Lcd_Write_String@i,w
  1900  02C7  0775               	addwf	Lcd_Write_String@a,w
  1901  02C8  00F8               	movwf	??_Lcd_Write_String+1
  1902  02C9  0876               	movf	Lcd_Write_String@a+1,w
  1903  02CA  00F7               	movwf	??_Lcd_Write_String
  1904  02CB  1803               	skipnc
  1905  02CC  0AF7               	incf	??_Lcd_Write_String,f
  1906  02CD  1FBC               	btfss	Lcd_Write_String@i,7
  1907  02CE  2AD0               	goto	u860
  1908  02CF  03F7               	decf	??_Lcd_Write_String,f
  1909  02D0                     u860:
  1910  02D0  0877               	movf	??_Lcd_Write_String,w
  1911  02D1  00F9               	movwf	??_Lcd_Write_String+2
  1912  02D2  0879               	movf	??_Lcd_Write_String+2,w
  1913  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1914  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1915  02D5  00FF               	movwf	btemp+1
  1916  02D6  0878               	movf	??_Lcd_Write_String+1,w
  1917  02D7  0084               	movwf	4
  1918  02D8  120A  118A  2363  120A  118A  	fcall	stringtab
  1919  02DD  3A00               	xorlw	0
  1920  02DE  1D03               	skipz
  1921  02DF  2AE1               	goto	u871
  1922  02E0  2AE2               	goto	u870
  1923  02E1                     u871:
  1924  02E1  2AA2               	goto	l1601
  1925  02E2                     u870:
  1926  02E2                     l137:
  1927  02E2  0008               	return
  1928  02E3                     __end_of_Lcd_Write_String:
  1929                           
  1930                           	psect	text9
  1931  0423                     __ptext9:	
  1932 ;; *************** function _Lcd_Write_Char *****************
  1933 ;; Defined at:
  1934 ;;		line 61 in file "LCD.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  a               1    wreg     unsigned char 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  a               1    4[COMMON] unsigned char 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, pclath, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1948 ;;      Params:         0       0       0       0       0
  1949 ;;      Locals:         1       0       0       0       0
  1950 ;;      Temps:          1       0       0       0       0
  1951 ;;      Totals:         2       0       0       0       0
  1952 ;;Total ram usage:        2 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    2
  1955 ;; This function calls:
  1956 ;;		_Lcd_Port
  1957 ;; This function is called by:
  1958 ;;		_Lcd_Write_String
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           
  1963                           ;psect for function _Lcd_Write_Char
  1964  0423                     _Lcd_Write_Char:
  1965                           
  1966                           ;incstack = 0
  1967                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1968                           ;Lcd_Write_Char@a stored from wreg
  1969  0423  00F4               	movwf	Lcd_Write_Char@a
  1970  0424                     l1555:
  1971                           
  1972                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  1973  0424  1283               	bcf	3,5	;RP0=0, select bank0
  1974  0425  1303               	bcf	3,6	;RP1=0, select bank0
  1975  0426  1409               	bsf	9,0	;volatile
  1976  0427                     l1557:
  1977                           
  1978                           ;LCD.c: 63:    Lcd_Port(a);
  1979  0427  0874               	movf	Lcd_Write_Char@a,w
  1980  0428  120A  118A  24A6  120A  118A  	fcall	_Lcd_Port
  1981  042D                     l1559:
  1982                           
  1983                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  1984  042D  1283               	bcf	3,5	;RP0=0, select bank0
  1985  042E  1303               	bcf	3,6	;RP1=0, select bank0
  1986  042F  1509               	bsf	9,2	;volatile
  1987  0430                     l1561:
  1988                           
  1989                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1990  0430  301A               	movlw	26
  1991  0431  00F3               	movwf	??_Lcd_Write_Char
  1992  0432                     u1047:
  1993  0432  0BF3               	decfsz	??_Lcd_Write_Char,f
  1994  0433  2C32               	goto	u1047
  1995  0434  0000               	nop
  1996  0435                     l1563:
  1997                           
  1998                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  1999  0435  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0436  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0437  1109               	bcf	9,2	;volatile
  2002  0438                     l131:
  2003  0438  0008               	return
  2004  0439                     __end_of_Lcd_Write_Char:
  2005                           
  2006                           	psect	text10
  2007  03B9                     __ptext10:	
  2008 ;; *************** function _Lcd_Set_Cursor *****************
  2009 ;; Defined at:
  2010 ;;		line 48 in file "LCD.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  a               1    wreg     unsigned char 
  2013 ;;  b               1    6[COMMON] unsigned char 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  a               1    8[COMMON] unsigned char 
  2016 ;;  temp            1    9[COMMON] unsigned char 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2, status,0, pclath, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         1       0       0       0       0
  2027 ;;      Locals:         2       0       0       0       0
  2028 ;;      Temps:          1       0       0       0       0
  2029 ;;      Totals:         4       0       0       0       0
  2030 ;;Total ram usage:        4 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    3
  2033 ;; This function calls:
  2034 ;;		_Lcd_Cmd
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;;		_Show_val_LCD
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           
  2042                           ;psect for function _Lcd_Set_Cursor
  2043  03B9                     _Lcd_Set_Cursor:
  2044                           
  2045                           ;incstack = 0
  2046                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2047                           ;Lcd_Set_Cursor@a stored from wreg
  2048  03B9  00F8               	movwf	Lcd_Set_Cursor@a
  2049  03BA                     l1587:
  2050                           
  2051                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2052  03BA  0378               	decf	Lcd_Set_Cursor@a,w
  2053  03BB  1D03               	btfss	3,2
  2054  03BC  2BBE               	goto	u831
  2055  03BD  2BBF               	goto	u830
  2056  03BE                     u831:
  2057  03BE  2BCB               	goto	l1593
  2058  03BF                     u830:
  2059  03BF                     l1589:
  2060                           
  2061                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2062  03BF  0876               	movf	Lcd_Set_Cursor@b,w
  2063  03C0  3E7F               	addlw	127
  2064  03C1  00F7               	movwf	??_Lcd_Set_Cursor
  2065  03C2  0877               	movf	??_Lcd_Set_Cursor,w
  2066  03C3  00F9               	movwf	Lcd_Set_Cursor@temp
  2067  03C4                     l1591:
  2068                           
  2069                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2070  03C4  0879               	movf	Lcd_Set_Cursor@temp,w
  2071  03C5  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2072                           
  2073                           ;LCD.c: 53:  }
  2074  03CA  2BDC               	goto	l128
  2075  03CB                     l1593:
  2076  03CB  3002               	movlw	2
  2077  03CC  0678               	xorwf	Lcd_Set_Cursor@a,w
  2078  03CD  1D03               	btfss	3,2
  2079  03CE  2BD0               	goto	u841
  2080  03CF  2BD1               	goto	u840
  2081  03D0                     u841:
  2082  03D0  2BDC               	goto	l128
  2083  03D1                     u840:
  2084  03D1                     l1595:
  2085                           
  2086                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2087  03D1  0876               	movf	Lcd_Set_Cursor@b,w
  2088  03D2  3EBF               	addlw	191
  2089  03D3  00F7               	movwf	??_Lcd_Set_Cursor
  2090  03D4  0877               	movf	??_Lcd_Set_Cursor,w
  2091  03D5  00F9               	movwf	Lcd_Set_Cursor@temp
  2092  03D6                     l1597:
  2093                           
  2094                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2095  03D6  0879               	movf	Lcd_Set_Cursor@temp,w
  2096  03D7  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2097  03DC                     l128:
  2098  03DC  0008               	return
  2099  03DD                     __end_of_Lcd_Set_Cursor:
  2100                           
  2101                           	psect	text11
  2102  0252                     __ptext11:	
  2103 ;; *************** function _Lcd_Init *****************
  2104 ;; Defined at:
  2105 ;;		line 14 in file "LCD.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0, pclath, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2119 ;;      Params:         0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0
  2121 ;;      Temps:          2       0       0       0       0
  2122 ;;      Totals:         2       0       0       0       0
  2123 ;;Total ram usage:        2 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    3
  2126 ;; This function calls:
  2127 ;;		_Lcd_Cmd
  2128 ;;		_Lcd_Port
  2129 ;; This function is called by:
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           
  2135                           ;psect for function _Lcd_Init
  2136  0252                     _Lcd_Init:
  2137  0252                     l1697:	
  2138                           ;incstack = 0
  2139                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2140                           
  2141                           
  2142                           ;LCD.c: 15:   Lcd_Port(0x00);
  2143  0252  3000               	movlw	0
  2144  0253  120A  118A  24A6  120A  118A  	fcall	_Lcd_Port
  2145  0258                     l1699:
  2146                           
  2147                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  2148  0258  3034               	movlw	52
  2149  0259  00F7               	movwf	??_Lcd_Init+1
  2150  025A  30F1               	movlw	241
  2151  025B  00F6               	movwf	??_Lcd_Init
  2152  025C                     u1057:
  2153  025C  0BF6               	decfsz	??_Lcd_Init,f
  2154  025D  2A5C               	goto	u1057
  2155  025E  0BF7               	decfsz	??_Lcd_Init+1,f
  2156  025F  2A5C               	goto	u1057
  2157  0260  2A61               	nop2
  2158  0261                     l1701:
  2159                           
  2160                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  2161  0261  3030               	movlw	48
  2162  0262  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2163                           
  2164                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2165  0267  300D               	movlw	13
  2166  0268  00F7               	movwf	??_Lcd_Init+1
  2167  0269  30FB               	movlw	251
  2168  026A  00F6               	movwf	??_Lcd_Init
  2169  026B                     u1067:
  2170  026B  0BF6               	decfsz	??_Lcd_Init,f
  2171  026C  2A6B               	goto	u1067
  2172  026D  0BF7               	decfsz	??_Lcd_Init+1,f
  2173  026E  2A6B               	goto	u1067
  2174  026F  2A70               	nop2
  2175  0270                     l1703:
  2176                           
  2177                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  2178  0270  3030               	movlw	48
  2179  0271  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2180  0276                     l1705:
  2181                           
  2182                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  2183  0276  301D               	movlw	29
  2184  0277  00F7               	movwf	??_Lcd_Init+1
  2185  0278  3091               	movlw	145
  2186  0279  00F6               	movwf	??_Lcd_Init
  2187  027A                     u1077:
  2188  027A  0BF6               	decfsz	??_Lcd_Init,f
  2189  027B  2A7A               	goto	u1077
  2190  027C  0BF7               	decfsz	??_Lcd_Init+1,f
  2191  027D  2A7A               	goto	u1077
  2192                           
  2193                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  2194  027E  3030               	movlw	48
  2195  027F  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2196                           
  2197                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  2198  0284  3038               	movlw	56
  2199  0285  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2200                           
  2201                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  2202  028A  300C               	movlw	12
  2203  028B  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2204                           
  2205                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  2206  0290  3001               	movlw	1
  2207  0291  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2208                           
  2209                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  2210  0296  3006               	movlw	6
  2211  0297  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2212  029C                     l113:
  2213  029C  0008               	return
  2214  029D                     __end_of_Lcd_Init:
  2215                           
  2216                           	psect	text12
  2217  0474                     __ptext12:	
  2218 ;; *************** function _Lcd_Clear *****************
  2219 ;; Defined at:
  2220 ;;		line 42 in file "LCD.c"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;		None
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;		None
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  1    wreg      void 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0, pclath, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       0       0       0       0
  2235 ;;      Locals:         0       0       0       0       0
  2236 ;;      Temps:          0       0       0       0       0
  2237 ;;      Totals:         0       0       0       0       0
  2238 ;;Total ram usage:        0 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    3
  2241 ;; This function calls:
  2242 ;;		_Lcd_Cmd
  2243 ;; This function is called by:
  2244 ;;		_main
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           
  2249                           ;psect for function _Lcd_Clear
  2250  0474                     _Lcd_Clear:
  2251  0474                     l1707:	
  2252                           ;incstack = 0
  2253                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2254                           
  2255                           
  2256                           ;LCD.c: 43:  Lcd_Cmd(0);
  2257  0474  3000               	movlw	0
  2258  0475  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2259                           
  2260                           ;LCD.c: 44:  Lcd_Cmd(1);
  2261  047A  3001               	movlw	1
  2262  047B  120A  118A  23DD  120A  118A  	fcall	_Lcd_Cmd
  2263  0480                     l122:
  2264  0480  0008               	return
  2265  0481                     __end_of_Lcd_Clear:
  2266                           
  2267                           	psect	text13
  2268  03DD                     __ptext13:	
  2269 ;; *************** function _Lcd_Cmd *****************
  2270 ;; Defined at:
  2271 ;;		line 33 in file "LCD.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  a               1    wreg     unsigned char 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  a               1    5[COMMON] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      void 
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0, pclath, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2285 ;;      Params:         0       0       0       0       0
  2286 ;;      Locals:         1       0       0       0       0
  2287 ;;      Temps:          2       0       0       0       0
  2288 ;;      Totals:         3       0       0       0       0
  2289 ;;Total ram usage:        3 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    2
  2292 ;; This function calls:
  2293 ;;		_Lcd_Port
  2294 ;; This function is called by:
  2295 ;;		_Lcd_Init
  2296 ;;		_Lcd_Clear
  2297 ;;		_Lcd_Set_Cursor
  2298 ;;		_Lcd_Shift_Right
  2299 ;;		_Lcd_Shift_Left
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           
  2304                           ;psect for function _Lcd_Cmd
  2305  03DD                     _Lcd_Cmd:
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2309                           ;Lcd_Cmd@a stored from wreg
  2310  03DD  00F5               	movwf	Lcd_Cmd@a
  2311  03DE                     l1545:
  2312                           
  2313                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  2314  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2315  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2316  03E0  1009               	bcf	9,0	;volatile
  2317  03E1                     l1547:
  2318                           
  2319                           ;LCD.c: 35:  Lcd_Port(a);
  2320  03E1  0875               	movf	Lcd_Cmd@a,w
  2321  03E2  120A  118A  24A6  120A  118A  	fcall	_Lcd_Port
  2322  03E7                     l1549:
  2323                           
  2324                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  2325  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2326  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2327  03E9  1509               	bsf	9,2	;volatile
  2328  03EA                     l1551:
  2329                           
  2330                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2331  03EA  300B               	movlw	11
  2332  03EB  00F4               	movwf	??_Lcd_Cmd+1
  2333  03EC  3062               	movlw	98
  2334  03ED  00F3               	movwf	??_Lcd_Cmd
  2335  03EE                     u1087:
  2336  03EE  0BF3               	decfsz	??_Lcd_Cmd,f
  2337  03EF  2BEE               	goto	u1087
  2338  03F0  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2339  03F1  2BEE               	goto	u1087
  2340  03F2  0000               	nop
  2341  03F3                     l1553:
  2342                           
  2343                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  2344  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2345  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2346  03F5  1109               	bcf	9,2	;volatile
  2347  03F6                     l119:
  2348  03F6  0008               	return
  2349  03F7                     __end_of_Lcd_Cmd:
  2350                           
  2351                           	psect	text14
  2352  04A6                     __ptext14:	
  2353 ;; *************** function _Lcd_Port *****************
  2354 ;; Defined at:
  2355 ;;		line 29 in file "LCD.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  a               1    wreg     unsigned char 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  a               1    2[COMMON] unsigned char 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  1    wreg      void 
  2362 ;; Registers used:
  2363 ;;		wreg
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/0
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2369 ;;      Params:         0       0       0       0       0
  2370 ;;      Locals:         1       0       0       0       0
  2371 ;;      Temps:          0       0       0       0       0
  2372 ;;      Totals:         1       0       0       0       0
  2373 ;;Total ram usage:        1 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    1
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		_Lcd_Init
  2380 ;;		_Lcd_Cmd
  2381 ;;		_Lcd_Write_Char
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           
  2386                           ;psect for function _Lcd_Port
  2387  04A6                     _Lcd_Port:
  2388                           
  2389                           ;incstack = 0
  2390                           ; Regs used in _Lcd_Port: [wreg]
  2391                           ;Lcd_Port@a stored from wreg
  2392  04A6  00F2               	movwf	Lcd_Port@a
  2393  04A7                     l1543:
  2394                           
  2395                           ;LCD.c: 30:     PORTD = a;
  2396  04A7  0872               	movf	Lcd_Port@a,w
  2397  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2398  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2399  04AA  0088               	movwf	8	;volatile
  2400  04AB                     l116:
  2401  04AB  0008               	return
  2402  04AC                     __end_of_Lcd_Port:
  2403                           
  2404                           	psect	text15
  2405  044E                     __ptext15:	
  2406 ;; *************** function _ADC_to_string *****************
  2407 ;; Defined at:
  2408 ;;		line 170 in file "main_maestro.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;		None
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2422 ;;      Params:         0       0       0       0       0
  2423 ;;      Locals:         0       0       0       0       0
  2424 ;;      Temps:          0       3       0       0       0
  2425 ;;      Totals:         0       3       0       0       0
  2426 ;;Total ram usage:        3 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    3
  2429 ;; This function calls:
  2430 ;;		_sprintf
  2431 ;; This function is called by:
  2432 ;;		_main
  2433 ;; This function uses a non-reentrant model
  2434 ;;
  2435                           
  2436                           
  2437                           ;psect for function _ADC_to_string
  2438  044E                     _ADC_to_string:
  2439  044E                     l1709:	
  2440                           ;incstack = 0
  2441                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2442                           
  2443                           
  2444                           ;main_maestro.c: 172:     sprintf(data, "%.3i", cont);
  2445  044E  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2446  044F  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0450  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0451  00CF               	movwf	??_ADC_to_string
  2449  0452  084F               	movf	??_ADC_to_string,w
  2450  0453  00C2               	movwf	sprintf@f
  2451  0454  087A               	movf	_cont,w
  2452  0455  00D0               	movwf	??_ADC_to_string+1
  2453  0456  01D1               	clrf	??_ADC_to_string+2
  2454  0457  0850               	movf	??_ADC_to_string+1,w
  2455  0458  00C3               	movwf	?_sprintf+1
  2456  0459  0851               	movf	??_ADC_to_string+2,w
  2457  045A  00C4               	movwf	?_sprintf+2
  2458  045B  3034               	movlw	(low (_data| 0))& (0+255)
  2459  045C  120A  118A  201E  120A  118A  	fcall	_sprintf
  2460  0461                     l81:
  2461  0461  0008               	return
  2462  0462                     __end_of_ADC_to_string:
  2463                           
  2464                           	psect	text16
  2465  001E                     __ptext16:	
  2466 ;; *************** function _sprintf *****************
  2467 ;; Defined at:
  2468 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  sp              1    wreg     PTR unsigned char 
  2471 ;;		 -> data(8), 
  2472 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  2473 ;;		 -> STR_2(5), 
  2474 ;; Auto vars:     Size  Location     Type
  2475 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  2476 ;;		 -> data(8), 
  2477 ;;  tmpval          4    0        struct .
  2478 ;;  val             2   15[BANK0 ] unsigned int 
  2479 ;;  cp              2    0        PTR const unsigned char 
  2480 ;;  len             2    0        unsigned int 
  2481 ;;  c               1   18[BANK0 ] unsigned char 
  2482 ;;  prec            1   17[BANK0 ] char 
  2483 ;;  flag            1   13[BANK0 ] unsigned char 
  2484 ;;  ap              1   12[BANK0 ] PTR void [1]
  2485 ;;		 -> ?_sprintf(2), 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  2    6[BANK0 ] int 
  2488 ;; Registers used:
  2489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2495 ;;      Params:         0       3       0       0       0
  2496 ;;      Locals:         0       7       0       0       0
  2497 ;;      Temps:          0       3       0       0       0
  2498 ;;      Totals:         0      13       0       0       0
  2499 ;;Total ram usage:       13 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    2
  2502 ;; This function calls:
  2503 ;;		___bmul
  2504 ;;		___lwdiv
  2505 ;;		___lwmod
  2506 ;;		_isdigit
  2507 ;; This function is called by:
  2508 ;;		_ADC_to_string
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _sprintf
  2514  001E                     _sprintf:
  2515                           
  2516                           ;incstack = 0
  2517                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2518                           ;sprintf@sp stored from wreg
  2519  001E  1283               	bcf	3,5	;RP0=0, select bank0
  2520  001F  1303               	bcf	3,6	;RP1=0, select bank0
  2521  0020  00CA               	movwf	sprintf@sp
  2522  0021                     l1607:
  2523                           
  2524                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2525  0021  3043               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2526  0022  00C5               	movwf	??_sprintf
  2527  0023  0845               	movf	??_sprintf,w
  2528  0024  00C8               	movwf	sprintf@ap
  2529                           
  2530                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2531  0025  296C               	goto	l1685
  2532  0026                     l1609:
  2533                           
  2534                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2535  0026  3025               	movlw	37
  2536  0027  064E               	xorwf	sprintf@c,w
  2537  0028  1903               	btfsc	3,2
  2538  0029  282B               	goto	u881
  2539  002A  282C               	goto	u880
  2540  002B                     u881:
  2541  002B  2838               	goto	l1615
  2542  002C                     u880:
  2543  002C                     l1611:
  2544                           
  2545                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2546  002C  084E               	movf	sprintf@c,w
  2547  002D  00C5               	movwf	??_sprintf
  2548  002E  084A               	movf	sprintf@sp,w
  2549  002F  0084               	movwf	4
  2550  0030  0845               	movf	??_sprintf,w
  2551  0031  1383               	bcf	3,7	;select IRP bank0
  2552  0032  0080               	movwf	0
  2553  0033                     l1613:
  2554  0033  3001               	movlw	1
  2555  0034  00C5               	movwf	??_sprintf
  2556  0035  0845               	movf	??_sprintf,w
  2557  0036  07CA               	addwf	sprintf@sp,f
  2558                           
  2559                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  2560  0037  296C               	goto	l1685
  2561  0038                     l1615:
  2562                           
  2563                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2564  0038  01C9               	clrf	sprintf@flag
  2565  0039                     l1617:
  2566                           
  2567                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  2568  0039  0842               	movf	sprintf@f,w
  2569  003A  0084               	movwf	4
  2570  003B  120A  118A  236D  120A  118A  	fcall	stringdir
  2571  0040  3A2E               	xorlw	46
  2572  0041  1D03               	skipz
  2573  0042  2844               	goto	u891
  2574  0043  2845               	goto	u890
  2575  0044                     u891:
  2576  0044  287C               	goto	l1631
  2577  0045                     u890:
  2578  0045                     l1619:
  2579                           
  2580                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  2581  0045  3001               	movlw	1
  2582  0046  00C5               	movwf	??_sprintf
  2583  0047  0845               	movf	??_sprintf,w
  2584  0048  07C2               	addwf	sprintf@f,f
  2585  0049                     l1621:
  2586                           
  2587                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  2588  0049  01CD               	clrf	sprintf@prec
  2589                           
  2590                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  2591  004A  286B               	goto	l1629
  2592  004B                     l1623:
  2593                           
  2594                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  2595  004B  1283               	bcf	3,5	;RP0=0, select bank0
  2596  004C  1303               	bcf	3,6	;RP1=0, select bank0
  2597  004D  084D               	movf	sprintf@prec,w
  2598  004E  00C5               	movwf	??_sprintf
  2599  004F  0845               	movf	??_sprintf,w
  2600  0050  00F2               	movwf	___bmul@multiplicand
  2601  0051  300A               	movlw	10
  2602  0052  120A  118A  2439  120A  118A  	fcall	___bmul
  2603  0057  1283               	bcf	3,5	;RP0=0, select bank0
  2604  0058  1303               	bcf	3,6	;RP1=0, select bank0
  2605  0059  00C6               	movwf	??_sprintf+1
  2606  005A  0846               	movf	??_sprintf+1,w
  2607  005B  00CD               	movwf	sprintf@prec
  2608  005C                     l1625:
  2609                           
  2610                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  2611  005C  0842               	movf	sprintf@f,w
  2612  005D  0084               	movwf	4
  2613  005E  120A  118A  236D  120A  118A  	fcall	stringdir
  2614  0063  3ED0               	addlw	-48
  2615  0064  00C5               	movwf	??_sprintf
  2616  0065  0845               	movf	??_sprintf,w
  2617  0066  07CD               	addwf	sprintf@prec,f
  2618  0067                     l1627:
  2619  0067  3001               	movlw	1
  2620  0068  00C5               	movwf	??_sprintf
  2621  0069  0845               	movf	??_sprintf,w
  2622  006A  07C2               	addwf	sprintf@f,f
  2623  006B                     l1629:
  2624                           
  2625                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  2626  006B  0842               	movf	sprintf@f,w
  2627  006C  0084               	movwf	4
  2628  006D  120A  118A  236D  120A  118A  	fcall	stringdir
  2629  0072  120A  118A  2462  120A  118A  	fcall	_isdigit
  2630  0077  1803               	btfsc	3,0
  2631  0078  287A               	goto	u901
  2632  0079  287B               	goto	u900
  2633  007A                     u901:
  2634  007A  284B               	goto	l1623
  2635  007B                     u900:
  2636  007B  287D               	goto	l1635
  2637  007C                     l1631:
  2638                           
  2639                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  2640  007C  01CD               	clrf	sprintf@prec
  2641  007D                     l1635:
  2642  007D  3001               	movlw	1
  2643  007E  1283               	bcf	3,5	;RP0=0, select bank0
  2644  007F  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0080  07C2               	addwf	sprintf@f,f
  2646  0081  30FF               	movlw	-1
  2647  0082  0742               	addwf	sprintf@f,w
  2648  0083  0084               	movwf	4
  2649  0084  120A  118A  236D  120A  118A  	fcall	stringdir
  2650  0089  00CE               	movwf	sprintf@c
  2651  008A  00C5               	movwf	??_sprintf
  2652  008B  01C6               	clrf	??_sprintf+1
  2653                           
  2654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2655                           ; Switch size 1, requested type "simple"
  2656                           ; Number of cases is 1, Range of values is 0 to 0
  2657                           ; switch strategies available:
  2658                           ; Name         Instructions Cycles
  2659                           ; simple_byte            4     3 (average)
  2660                           ; direct_byte           11     8 (fixed)
  2661                           ; jumptable            260     6 (fixed)
  2662                           ;	Chosen strategy is simple_byte
  2663  008C  0846               	movf	??_sprintf+1,w
  2664  008D  3A00               	xorlw	0	; case 0
  2665  008E  1903               	skipnz
  2666  008F  2891               	goto	l1805
  2667  0090  296C               	goto	l1685
  2668  0091                     l1805:
  2669                           
  2670                           ; Switch size 1, requested type "simple"
  2671                           ; Number of cases is 3, Range of values is 0 to 105
  2672                           ; switch strategies available:
  2673                           ; Name         Instructions Cycles
  2674                           ; simple_byte           10     6 (average)
  2675                           ; jumptable            260     6 (fixed)
  2676                           ;	Chosen strategy is simple_byte
  2677  0091  0845               	movf	??_sprintf,w
  2678  0092  3A00               	xorlw	0	; case 0
  2679  0093  1903               	skipnz
  2680  0094  297E               	goto	l1687
  2681  0095  3A64               	xorlw	100	; case 100
  2682  0096  1903               	skipnz
  2683  0097  289C               	goto	l1637
  2684  0098  3A0D               	xorlw	13	; case 105
  2685  0099  1903               	skipnz
  2686  009A  289C               	goto	l1637
  2687  009B  296C               	goto	l1685
  2688  009C                     l1637:
  2689                           
  2690                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2691  009C  0848               	movf	sprintf@ap,w
  2692  009D  0084               	movwf	4
  2693  009E  1383               	bcf	3,7	;select IRP bank0
  2694  009F  0800               	movf	0,w
  2695  00A0  00CB               	movwf	sprintf@val
  2696  00A1  0A84               	incf	4,f
  2697  00A2  0800               	movf	0,w
  2698  00A3  00CC               	movwf	sprintf@val+1
  2699  00A4                     l1639:
  2700  00A4  3002               	movlw	2
  2701  00A5  00C5               	movwf	??_sprintf
  2702  00A6  0845               	movf	??_sprintf,w
  2703  00A7  07C8               	addwf	sprintf@ap,f
  2704  00A8                     l1641:
  2705                           
  2706                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2707  00A8  1FCC               	btfss	sprintf@val+1,7
  2708  00A9  28AB               	goto	u911
  2709  00AA  28AC               	goto	u910
  2710  00AB                     u911:
  2711  00AB  28B5               	goto	l1647
  2712  00AC                     u910:
  2713  00AC                     l1643:
  2714                           
  2715                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2716  00AC  3003               	movlw	3
  2717  00AD  00C5               	movwf	??_sprintf
  2718  00AE  0845               	movf	??_sprintf,w
  2719  00AF  04C9               	iorwf	sprintf@flag,f
  2720  00B0                     l1645:
  2721                           
  2722                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2723  00B0  09CB               	comf	sprintf@val,f
  2724  00B1  09CC               	comf	sprintf@val+1,f
  2725  00B2  0ACB               	incf	sprintf@val,f
  2726  00B3  1903               	skipnz
  2727  00B4  0ACC               	incf	sprintf@val+1,f
  2728  00B5                     l1647:
  2729                           
  2730                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  2731  00B5  084D               	movf	sprintf@prec,w
  2732  00B6  1D03               	btfss	3,2
  2733  00B7  28B9               	goto	u921
  2734  00B8  28BA               	goto	u920
  2735  00B9                     u921:
  2736  00B9  28C4               	goto	l1653
  2737  00BA                     u920:
  2738  00BA                     l1649:
  2739  00BA  084B               	movf	sprintf@val,w
  2740  00BB  044C               	iorwf	sprintf@val+1,w
  2741  00BC  1D03               	btfss	3,2
  2742  00BD  28BF               	goto	u931
  2743  00BE  28C0               	goto	u930
  2744  00BF                     u931:
  2745  00BF  28C4               	goto	l1653
  2746  00C0                     u930:
  2747  00C0                     l1651:
  2748                           
  2749                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  2750  00C0  3001               	movlw	1
  2751  00C1  00C5               	movwf	??_sprintf
  2752  00C2  0845               	movf	??_sprintf,w
  2753  00C3  07CD               	addwf	sprintf@prec,f
  2754  00C4                     l1653:
  2755                           
  2756                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2757  00C4  01CE               	clrf	sprintf@c
  2758  00C5  0ACE               	incf	sprintf@c,f
  2759  00C6                     l1657:
  2760                           
  2761                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2762  00C6  084E               	movf	sprintf@c,w
  2763  00C7  00C5               	movwf	??_sprintf
  2764  00C8  0745               	addwf	??_sprintf,w
  2765  00C9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2766  00CA  0084               	movwf	4
  2767  00CB  120A  118A  236D  120A  118A  	fcall	stringdir
  2768  00D0  00C6               	movwf	??_sprintf+1
  2769  00D1  120A  118A  236D  120A  118A  	fcall	stringdir
  2770  00D6  00C7               	movwf	??_sprintf+2
  2771  00D7  0847               	movf	??_sprintf+2,w
  2772  00D8  024C               	subwf	sprintf@val+1,w
  2773  00D9  1D03               	skipz
  2774  00DA  28DD               	goto	u945
  2775  00DB  0846               	movf	??_sprintf+1,w
  2776  00DC  024B               	subwf	sprintf@val,w
  2777  00DD                     u945:
  2778  00DD  1803               	skipnc
  2779  00DE  28E0               	goto	u941
  2780  00DF  28E1               	goto	u940
  2781  00E0                     u941:
  2782  00E0  28E2               	goto	l1661
  2783  00E1                     u940:
  2784  00E1  28EC               	goto	l1663
  2785  00E2                     l1661:
  2786  00E2  3001               	movlw	1
  2787  00E3  00C5               	movwf	??_sprintf
  2788  00E4  0845               	movf	??_sprintf,w
  2789  00E5  07CE               	addwf	sprintf@c,f
  2790  00E6  3005               	movlw	5
  2791  00E7  064E               	xorwf	sprintf@c,w
  2792  00E8  1D03               	btfss	3,2
  2793  00E9  28EB               	goto	u951
  2794  00EA  28EC               	goto	u950
  2795  00EB                     u951:
  2796  00EB  28C6               	goto	l1657
  2797  00EC                     u950:
  2798  00EC                     l1663:
  2799                           
  2800                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  2801  00EC  084D               	movf	sprintf@prec,w
  2802  00ED  00C5               	movwf	??_sprintf
  2803  00EE  01C6               	clrf	??_sprintf+1
  2804  00EF  1BC5               	btfsc	??_sprintf,7
  2805  00F0  03C6               	decf	??_sprintf+1,f
  2806  00F1  0846               	movf	??_sprintf+1,w
  2807  00F2  3A80               	xorlw	128
  2808  00F3  3C80               	sublw	128
  2809  00F4  1D03               	skipz
  2810  00F5  28F8               	goto	u965
  2811  00F6  0845               	movf	??_sprintf,w
  2812  00F7  024E               	subwf	sprintf@c,w
  2813  00F8                     u965:
  2814  00F8  1803               	skipnc
  2815  00F9  28FB               	goto	u961
  2816  00FA  28FC               	goto	u960
  2817  00FB                     u961:
  2818  00FB  28FD               	goto	l1667
  2819  00FC                     u960:
  2820  00FC                     l1665:
  2821  00FC  2917               	goto	l1671
  2822  00FD                     l1667:
  2823  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  2824  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  2825  00FF  084D               	movf	sprintf@prec,w
  2826  0100  00C5               	movwf	??_sprintf
  2827  0101  01C6               	clrf	??_sprintf+1
  2828  0102  1BC5               	btfsc	??_sprintf,7
  2829  0103  03C6               	decf	??_sprintf+1,f
  2830  0104  0846               	movf	??_sprintf+1,w
  2831  0105  3A80               	xorlw	128
  2832  0106  00C7               	movwf	??_sprintf+2
  2833  0107  3080               	movlw	128
  2834  0108  0247               	subwf	??_sprintf+2,w
  2835  0109  1D03               	skipz
  2836  010A  290D               	goto	u975
  2837  010B  084E               	movf	sprintf@c,w
  2838  010C  0245               	subwf	??_sprintf,w
  2839  010D                     u975:
  2840  010D  1803               	skipnc
  2841  010E  2910               	goto	u971
  2842  010F  2911               	goto	u970
  2843  0110                     u971:
  2844  0110  2917               	goto	l1671
  2845  0111                     u970:
  2846  0111                     l1669:
  2847                           
  2848                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
  2849  0111  1283               	bcf	3,5	;RP0=0, select bank0
  2850  0112  1303               	bcf	3,6	;RP1=0, select bank0
  2851  0113  084E               	movf	sprintf@c,w
  2852  0114  00C5               	movwf	??_sprintf
  2853  0115  0845               	movf	??_sprintf,w
  2854  0116  00CD               	movwf	sprintf@prec
  2855  0117                     l1671:
  2856                           
  2857                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2858  0117  1283               	bcf	3,5	;RP0=0, select bank0
  2859  0118  1303               	bcf	3,6	;RP1=0, select bank0
  2860  0119  0849               	movf	sprintf@flag,w
  2861  011A  3903               	andlw	3
  2862  011B  1903               	btfsc	3,2
  2863  011C  291E               	goto	u981
  2864  011D  291F               	goto	u980
  2865  011E                     u981:
  2866  011E  2963               	goto	l1683
  2867  011F                     u980:
  2868  011F                     l1673:
  2869                           
  2870                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2871  011F  302D               	movlw	45
  2872  0120  00C5               	movwf	??_sprintf
  2873  0121  084A               	movf	sprintf@sp,w
  2874  0122  0084               	movwf	4
  2875  0123  0845               	movf	??_sprintf,w
  2876  0124  1383               	bcf	3,7	;select IRP bank0
  2877  0125  0080               	movwf	0
  2878  0126                     l1675:
  2879  0126  3001               	movlw	1
  2880  0127  00C5               	movwf	??_sprintf
  2881  0128  0845               	movf	??_sprintf,w
  2882  0129  07CA               	addwf	sprintf@sp,f
  2883  012A  2963               	goto	l1683
  2884  012B                     l1677:
  2885                           
  2886                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2887  012B  300A               	movlw	10
  2888  012C  00BC               	movwf	___lwmod@divisor
  2889  012D  3000               	movlw	0
  2890  012E  00BD               	movwf	___lwmod@divisor+1
  2891  012F  084D               	movf	sprintf@prec,w
  2892  0130  00C5               	movwf	??_sprintf
  2893  0131  0745               	addwf	??_sprintf,w
  2894  0132  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2895  0133  0084               	movwf	4
  2896  0134  120A  118A  236D  120A  118A  	fcall	stringdir
  2897  0139  00F2               	movwf	___lwdiv@divisor
  2898  013A  120A  118A  236D  120A  118A  	fcall	stringdir
  2899  013F  00F3               	movwf	___lwdiv@divisor+1
  2900  0140  084C               	movf	sprintf@val+1,w
  2901  0141  00F5               	movwf	___lwdiv@dividend+1
  2902  0142  084B               	movf	sprintf@val,w
  2903  0143  00F4               	movwf	___lwdiv@dividend
  2904  0144  120A  118A  22E3  120A  118A  	fcall	___lwdiv
  2905  0149  0873               	movf	?___lwdiv+1,w
  2906  014A  1283               	bcf	3,5	;RP0=0, select bank0
  2907  014B  1303               	bcf	3,6	;RP1=0, select bank0
  2908  014C  00BF               	movwf	___lwmod@dividend+1
  2909  014D  0872               	movf	?___lwdiv,w
  2910  014E  00BE               	movwf	___lwmod@dividend
  2911  014F  120A  118A  2327  120A  118A  	fcall	___lwmod
  2912  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2913  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2914  0156  083C               	movf	?___lwmod,w
  2915  0157  3E30               	addlw	48
  2916  0158  00C6               	movwf	??_sprintf+1
  2917  0159  0846               	movf	??_sprintf+1,w
  2918  015A  00CE               	movwf	sprintf@c
  2919  015B                     l1679:
  2920                           
  2921                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2922  015B  084E               	movf	sprintf@c,w
  2923  015C  00C5               	movwf	??_sprintf
  2924  015D  084A               	movf	sprintf@sp,w
  2925  015E  0084               	movwf	4
  2926  015F  0845               	movf	??_sprintf,w
  2927  0160  1383               	bcf	3,7	;select IRP bank0
  2928  0161  0080               	movwf	0
  2929  0162  2926               	goto	l1675
  2930  0163                     l1683:
  2931                           
  2932                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2933  0163  30FF               	movlw	255
  2934  0164  00C5               	movwf	??_sprintf
  2935  0165  0845               	movf	??_sprintf,w
  2936  0166  07CD               	addwf	sprintf@prec,f
  2937  0167  0A4D               	incf	sprintf@prec,w
  2938  0168  1D03               	btfss	3,2
  2939  0169  296B               	goto	u991
  2940  016A  296C               	goto	u990
  2941  016B                     u991:
  2942  016B  292B               	goto	l1677
  2943  016C                     u990:
  2944  016C                     l1685:
  2945                           
  2946                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2947  016C  3001               	movlw	1
  2948  016D  07C2               	addwf	sprintf@f,f
  2949  016E  30FF               	movlw	-1
  2950  016F  0742               	addwf	sprintf@f,w
  2951  0170  0084               	movwf	4
  2952  0171  120A  118A  236D  120A  118A  	fcall	stringdir
  2953  0176  00C5               	movwf	??_sprintf
  2954  0177  0845               	movf	??_sprintf,w
  2955  0178  00CE               	movwf	sprintf@c
  2956  0179  084E               	movf	sprintf@c,w
  2957  017A  1D03               	btfss	3,2
  2958  017B  297D               	goto	u1001
  2959  017C  297E               	goto	u1000
  2960  017D                     u1001:
  2961  017D  2826               	goto	l1609
  2962  017E                     u1000:
  2963  017E                     l1687:
  2964                           
  2965                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2966  017E  084A               	movf	sprintf@sp,w
  2967  017F  0084               	movwf	4
  2968  0180  1383               	bcf	3,7	;select IRP bank0
  2969  0181  0180               	clrf	0
  2970  0182                     l345:
  2971  0182  0008               	return
  2972  0183                     __end_of_sprintf:
  2973                           
  2974                           	psect	text17
  2975  0462                     __ptext17:	
  2976 ;; *************** function _isdigit *****************
  2977 ;; Defined at:
  2978 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  c               1    wreg     unsigned char 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  c               1    3[COMMON] unsigned char 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;		None               void
  2985 ;; Registers used:
  2986 ;;		wreg, status,2, status,0
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2992 ;;      Params:         0       0       0       0       0
  2993 ;;      Locals:         2       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0
  2995 ;;      Totals:         2       0       0       0       0
  2996 ;;Total ram usage:        2 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    1
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_sprintf
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           
  3007                           ;psect for function _isdigit
  3008  0462                     _isdigit:
  3009                           
  3010                           ;incstack = 0
  3011                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3012                           ;isdigit@c stored from wreg
  3013  0462  00F3               	movwf	isdigit@c
  3014  0463                     l1213:
  3015  0463  01F2               	clrf	_isdigit$938
  3016  0464                     l1215:
  3017  0464  303A               	movlw	58
  3018  0465  0273               	subwf	isdigit@c,w
  3019  0466  1803               	skipnc
  3020  0467  2C69               	goto	u411
  3021  0468  2C6A               	goto	u410
  3022  0469                     u411:
  3023  0469  2C72               	goto	l1221
  3024  046A                     u410:
  3025  046A                     l1217:
  3026  046A  3030               	movlw	48
  3027  046B  0273               	subwf	isdigit@c,w
  3028  046C  1C03               	skipc
  3029  046D  2C6F               	goto	u421
  3030  046E  2C70               	goto	u420
  3031  046F                     u421:
  3032  046F  2C72               	goto	l1221
  3033  0470                     u420:
  3034  0470                     l1219:
  3035  0470  01F2               	clrf	_isdigit$938
  3036  0471  0AF2               	incf	_isdigit$938,f
  3037  0472                     l1221:
  3038  0472  0C72               	rrf	_isdigit$938,w
  3039  0473                     l777:
  3040  0473  0008               	return
  3041  0474                     __end_of_isdigit:
  3042                           
  3043                           	psect	text18
  3044  0327                     __ptext18:	
  3045 ;; *************** function ___lwmod *****************
  3046 ;; Defined at:
  3047 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  divisor         2    0[BANK0 ] unsigned int 
  3050 ;;  dividend        2    2[BANK0 ] unsigned int 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  counter         1    5[BANK0 ] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  2    0[BANK0 ] unsigned int 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3062 ;;      Params:         0       4       0       0       0
  3063 ;;      Locals:         0       1       0       0       0
  3064 ;;      Temps:          0       1       0       0       0
  3065 ;;      Totals:         0       6       0       0       0
  3066 ;;Total ram usage:        6 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    1
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_sprintf
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function ___lwmod
  3078  0327                     ___lwmod:
  3079  0327                     l1565:	
  3080                           ;incstack = 0
  3081                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3082                           
  3083  0327  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0328  1303               	bcf	3,6	;RP1=0, select bank0
  3085  0329  083C               	movf	___lwmod@divisor,w
  3086  032A  043D               	iorwf	___lwmod@divisor+1,w
  3087  032B  1903               	btfsc	3,2
  3088  032C  2B2E               	goto	u771
  3089  032D  2B2F               	goto	u770
  3090  032E                     u771:
  3091  032E  2B5E               	goto	l1583
  3092  032F                     u770:
  3093  032F                     l1567:
  3094  032F  01C1               	clrf	___lwmod@counter
  3095  0330  0AC1               	incf	___lwmod@counter,f
  3096  0331  2B3D               	goto	l1573
  3097  0332                     l1569:
  3098  0332  3001               	movlw	1
  3099  0333                     u785:
  3100  0333  1003               	clrc
  3101  0334  0DBC               	rlf	___lwmod@divisor,f
  3102  0335  0DBD               	rlf	___lwmod@divisor+1,f
  3103  0336  3EFF               	addlw	-1
  3104  0337  1D03               	skipz
  3105  0338  2B33               	goto	u785
  3106  0339                     l1571:
  3107  0339  3001               	movlw	1
  3108  033A  00C0               	movwf	??___lwmod
  3109  033B  0840               	movf	??___lwmod,w
  3110  033C  07C1               	addwf	___lwmod@counter,f
  3111  033D                     l1573:
  3112  033D  1FBD               	btfss	___lwmod@divisor+1,7
  3113  033E  2B40               	goto	u791
  3114  033F  2B41               	goto	u790
  3115  0340                     u791:
  3116  0340  2B32               	goto	l1569
  3117  0341                     u790:
  3118  0341                     l1575:
  3119  0341  083D               	movf	___lwmod@divisor+1,w
  3120  0342  023F               	subwf	___lwmod@dividend+1,w
  3121  0343  1D03               	skipz
  3122  0344  2B47               	goto	u805
  3123  0345  083C               	movf	___lwmod@divisor,w
  3124  0346  023E               	subwf	___lwmod@dividend,w
  3125  0347                     u805:
  3126  0347  1C03               	skipc
  3127  0348  2B4A               	goto	u801
  3128  0349  2B4B               	goto	u800
  3129  034A                     u801:
  3130  034A  2B51               	goto	l1579
  3131  034B                     u800:
  3132  034B                     l1577:
  3133  034B  083C               	movf	___lwmod@divisor,w
  3134  034C  02BE               	subwf	___lwmod@dividend,f
  3135  034D  083D               	movf	___lwmod@divisor+1,w
  3136  034E  1C03               	skipc
  3137  034F  03BF               	decf	___lwmod@dividend+1,f
  3138  0350  02BF               	subwf	___lwmod@dividend+1,f
  3139  0351                     l1579:
  3140  0351  3001               	movlw	1
  3141  0352                     u815:
  3142  0352  1003               	clrc
  3143  0353  0CBD               	rrf	___lwmod@divisor+1,f
  3144  0354  0CBC               	rrf	___lwmod@divisor,f
  3145  0355  3EFF               	addlw	-1
  3146  0356  1D03               	skipz
  3147  0357  2B52               	goto	u815
  3148  0358                     l1581:
  3149  0358  3001               	movlw	1
  3150  0359  02C1               	subwf	___lwmod@counter,f
  3151  035A  1D03               	btfss	3,2
  3152  035B  2B5D               	goto	u821
  3153  035C  2B5E               	goto	u820
  3154  035D                     u821:
  3155  035D  2B41               	goto	l1575
  3156  035E                     u820:
  3157  035E                     l1583:
  3158  035E  083F               	movf	___lwmod@dividend+1,w
  3159  035F  00BD               	movwf	?___lwmod+1
  3160  0360  083E               	movf	___lwmod@dividend,w
  3161  0361  00BC               	movwf	?___lwmod
  3162  0362                     l767:
  3163  0362  0008               	return
  3164  0363                     __end_of___lwmod:
  3165                           
  3166                           	psect	text19
  3167  02E3                     __ptext19:	
  3168 ;; *************** function ___lwdiv *****************
  3169 ;; Defined at:
  3170 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  divisor         2    2[COMMON] unsigned int 
  3173 ;;  dividend        2    4[COMMON] unsigned int 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  quotient        2    7[COMMON] unsigned int 
  3176 ;;  counter         1    9[COMMON] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  2    2[COMMON] unsigned int 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3186 ;;      Params:         4       0       0       0       0
  3187 ;;      Locals:         3       0       0       0       0
  3188 ;;      Temps:          1       0       0       0       0
  3189 ;;      Totals:         8       0       0       0       0
  3190 ;;Total ram usage:        8 bytes
  3191 ;; Hardware stack levels used:    1
  3192 ;; Hardware stack levels required when called:    1
  3193 ;; This function calls:
  3194 ;;		Nothing
  3195 ;; This function is called by:
  3196 ;;		_sprintf
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200                           
  3201                           ;psect for function ___lwdiv
  3202  02E3                     ___lwdiv:
  3203  02E3                     l1239:	
  3204                           ;incstack = 0
  3205                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3206                           
  3207  02E3  01F7               	clrf	___lwdiv@quotient
  3208  02E4  01F8               	clrf	___lwdiv@quotient+1
  3209  02E5                     l1241:
  3210  02E5  0872               	movf	___lwdiv@divisor,w
  3211  02E6  0473               	iorwf	___lwdiv@divisor+1,w
  3212  02E7  1903               	btfsc	3,2
  3213  02E8  2AEA               	goto	u451
  3214  02E9  2AEB               	goto	u450
  3215  02EA                     u451:
  3216  02EA  2B22               	goto	l1261
  3217  02EB                     u450:
  3218  02EB                     l1243:
  3219  02EB  01F9               	clrf	___lwdiv@counter
  3220  02EC  0AF9               	incf	___lwdiv@counter,f
  3221  02ED  2AF9               	goto	l1249
  3222  02EE                     l1245:
  3223  02EE  3001               	movlw	1
  3224  02EF                     u465:
  3225  02EF  1003               	clrc
  3226  02F0  0DF2               	rlf	___lwdiv@divisor,f
  3227  02F1  0DF3               	rlf	___lwdiv@divisor+1,f
  3228  02F2  3EFF               	addlw	-1
  3229  02F3  1D03               	skipz
  3230  02F4  2AEF               	goto	u465
  3231  02F5                     l1247:
  3232  02F5  3001               	movlw	1
  3233  02F6  00F6               	movwf	??___lwdiv
  3234  02F7  0876               	movf	??___lwdiv,w
  3235  02F8  07F9               	addwf	___lwdiv@counter,f
  3236  02F9                     l1249:
  3237  02F9  1FF3               	btfss	___lwdiv@divisor+1,7
  3238  02FA  2AFC               	goto	u471
  3239  02FB  2AFD               	goto	u470
  3240  02FC                     u471:
  3241  02FC  2AEE               	goto	l1245
  3242  02FD                     u470:
  3243  02FD                     l1251:
  3244  02FD  3001               	movlw	1
  3245  02FE                     u485:
  3246  02FE  1003               	clrc
  3247  02FF  0DF7               	rlf	___lwdiv@quotient,f
  3248  0300  0DF8               	rlf	___lwdiv@quotient+1,f
  3249  0301  3EFF               	addlw	-1
  3250  0302  1D03               	skipz
  3251  0303  2AFE               	goto	u485
  3252  0304  0873               	movf	___lwdiv@divisor+1,w
  3253  0305  0275               	subwf	___lwdiv@dividend+1,w
  3254  0306  1D03               	skipz
  3255  0307  2B0A               	goto	u495
  3256  0308  0872               	movf	___lwdiv@divisor,w
  3257  0309  0274               	subwf	___lwdiv@dividend,w
  3258  030A                     u495:
  3259  030A  1C03               	skipc
  3260  030B  2B0D               	goto	u491
  3261  030C  2B0E               	goto	u490
  3262  030D                     u491:
  3263  030D  2B15               	goto	l1257
  3264  030E                     u490:
  3265  030E                     l1253:
  3266  030E  0872               	movf	___lwdiv@divisor,w
  3267  030F  02F4               	subwf	___lwdiv@dividend,f
  3268  0310  0873               	movf	___lwdiv@divisor+1,w
  3269  0311  1C03               	skipc
  3270  0312  03F5               	decf	___lwdiv@dividend+1,f
  3271  0313  02F5               	subwf	___lwdiv@dividend+1,f
  3272  0314                     l1255:
  3273  0314  1477               	bsf	___lwdiv@quotient,0
  3274  0315                     l1257:
  3275  0315  3001               	movlw	1
  3276  0316                     u505:
  3277  0316  1003               	clrc
  3278  0317  0CF3               	rrf	___lwdiv@divisor+1,f
  3279  0318  0CF2               	rrf	___lwdiv@divisor,f
  3280  0319  3EFF               	addlw	-1
  3281  031A  1D03               	skipz
  3282  031B  2B16               	goto	u505
  3283  031C                     l1259:
  3284  031C  3001               	movlw	1
  3285  031D  02F9               	subwf	___lwdiv@counter,f
  3286  031E  1D03               	btfss	3,2
  3287  031F  2B21               	goto	u511
  3288  0320  2B22               	goto	u510
  3289  0321                     u511:
  3290  0321  2AFD               	goto	l1251
  3291  0322                     u510:
  3292  0322                     l1261:
  3293  0322  0878               	movf	___lwdiv@quotient+1,w
  3294  0323  00F3               	movwf	?___lwdiv+1
  3295  0324  0877               	movf	___lwdiv@quotient,w
  3296  0325  00F2               	movwf	?___lwdiv
  3297  0326                     l757:
  3298  0326  0008               	return
  3299  0327                     __end_of___lwdiv:
  3300                           
  3301                           	psect	text20
  3302  0439                     __ptext20:	
  3303 ;; *************** function ___bmul *****************
  3304 ;; Defined at:
  3305 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  multiplier      1    wreg     unsigned char 
  3308 ;;  multiplicand    1    2[COMMON] unsigned char 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  multiplier      1    5[COMMON] unsigned char 
  3311 ;;  product         1    4[COMMON] unsigned char 
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  1    wreg      unsigned char 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3321 ;;      Params:         1       0       0       0       0
  3322 ;;      Locals:         2       0       0       0       0
  3323 ;;      Temps:          1       0       0       0       0
  3324 ;;      Totals:         4       0       0       0       0
  3325 ;;Total ram usage:        4 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; Hardware stack levels required when called:    1
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_sprintf
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function ___bmul
  3337  0439                     ___bmul:
  3338                           
  3339                           ;incstack = 0
  3340                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3341                           ;___bmul@multiplier stored from wreg
  3342  0439  00F5               	movwf	___bmul@multiplier
  3343  043A                     l1225:
  3344  043A  01F4               	clrf	___bmul@product
  3345  043B                     l1227:
  3346  043B  1C75               	btfss	___bmul@multiplier,0
  3347  043C  2C3E               	goto	u431
  3348  043D  2C3F               	goto	u430
  3349  043E                     u431:
  3350  043E  2C43               	goto	l1231
  3351  043F                     u430:
  3352  043F                     l1229:
  3353  043F  0872               	movf	___bmul@multiplicand,w
  3354  0440  00F3               	movwf	??___bmul
  3355  0441  0873               	movf	??___bmul,w
  3356  0442  07F4               	addwf	___bmul@product,f
  3357  0443                     l1231:
  3358  0443  1003               	clrc
  3359  0444  0DF2               	rlf	___bmul@multiplicand,f
  3360  0445                     l1233:
  3361  0445  1003               	clrc
  3362  0446  0CF5               	rrf	___bmul@multiplier,f
  3363  0447  0875               	movf	___bmul@multiplier,w
  3364  0448  1D03               	btfss	3,2
  3365  0449  2C4B               	goto	u441
  3366  044A  2C4C               	goto	u440
  3367  044B                     u441:
  3368  044B  2C3B               	goto	l1227
  3369  044C                     u440:
  3370  044C                     l1235:
  3371  044C  0874               	movf	___bmul@product,w
  3372  044D                     l375:
  3373  044D  0008               	return
  3374  044E                     __end_of___bmul:
  3375                           
  3376                           	psect	text21
  3377  0499                     __ptext21:	
  3378 ;; *************** function _ISR *****************
  3379 ;; Defined at:
  3380 ;;		line 78 in file "main_maestro.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		None
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3394 ;;      Params:         0       0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0
  3396 ;;      Temps:          2       0       0       0       0
  3397 ;;      Totals:         2       0       0       0       0
  3398 ;;Total ram usage:        2 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		Interrupt level 1
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function _ISR
  3409  0499                     _ISR:
  3410  0499                     i1l67:
  3411  0499  0871               	movf	??_ISR+1,w
  3412  049A  008A               	movwf	10
  3413  049B  0E70               	swapf	??_ISR,w
  3414  049C  0083               	movwf	3
  3415  049D  0EFE               	swapf	btemp,f
  3416  049E  0E7E               	swapf	btemp,w
  3417  049F  0009               	retfie
  3418  04A0                     __end_of_ISR:
  3419  007E                     btemp	set	126	;btemp
  3420  007E                     wtemp0	set	126
  3421                           
  3422                           	psect	intentry
  3423  0004                     __pintentry:	
  3424                           ;incstack = 0
  3425                           ; Regs used in _ISR: []
  3426                           
  3427  0004                     interrupt_function:
  3428  007E                     saved_w	set	btemp
  3429  0004  00FE               	movwf	btemp
  3430  0005  0E03               	swapf	3,w
  3431  0006  00F0               	movwf	??_ISR
  3432  0007  080A               	movf	10,w
  3433  0008  00F1               	movwf	??_ISR+1
  3434  0009  120A  118A  2C99   	ljmp	_ISR
  3435                           
  3436                           	psect	config
  3437                           
  3438                           ;Config register CONFIG1 @ 0x2007
  3439                           ;	Oscillator Selection bits
  3440                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  3441                           ;	Watchdog Timer Enable bit
  3442                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3443                           ;	Power-up Timer Enable bit
  3444                           ;	PWRTE = OFF, PWRT disabled
  3445                           ;	RE3/MCLR pin function select bit
  3446                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3447                           ;	Code Protection bit
  3448                           ;	CP = OFF, Program memory code protection is disabled
  3449                           ;	Data Code Protection bit
  3450                           ;	CPD = OFF, Data memory code protection is disabled
  3451                           ;	Brown Out Reset Selection bits
  3452                           ;	BOREN = OFF, BOR disabled
  3453                           ;	Internal External Switchover bit
  3454                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3455                           ;	Fail-Safe Clock Monitor Enabled bit
  3456                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3457                           ;	Low Voltage Programming Enable bit
  3458                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3459                           ;	In-Circuit Debugger Mode bit
  3460                           ;	DEBUG = 0x1, unprogrammed default
  3461  2007                     	org	8199
  3462  2007  20D6               	dw	8406
  3463                           
  3464                           ;Config register CONFIG2 @ 0x2008
  3465                           ;	Brown-out Reset Selection bit
  3466                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3467                           ;	Flash Program Memory Self Write Enable bits
  3468                           ;	WRT = OFF, Write protection off
  3469  2008                     	org	8200
  3470  2008  3FFF               	dw	16383

Data Sizes:
    Strings     21
    Constant    10
    Data        0
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     25      53
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> data(BANK0[8]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _ADC_to_string->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3887
                                             22 BANK0      3     3      0
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _Show_val_LCD
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     306
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      15
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         1     1      0     706
                                              2 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     322
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     384
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0    1999
                                             19 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1999
                                              6 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     145
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _isdigit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _setup
     _initOsc
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      41       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      35       5       66.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      41      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 08:14:41 2021

                        pc 0002             ___bmul@product 0074                _SSPSTATbits 0094  
                       l81 0461                         l90 01F8                         l91 0250  
                       l84 0422                         l92 01FE                         l93 0204  
                       l94 020A                         l78 03B8                         l95 0210  
                       l96 0216                         l97 021C                         l98 0222  
                       l99 0228                         fsr 0004                        l100 0251  
                      l113 029C                        l122 0480                        l210 0492  
                      l131 0438                        l116 04AB                        l213 0498  
                      l206 0407                        l119 03F6                        l207 040C  
                      l128 03DC                        l224 0489                        l216 04A5  
                      l137 02E2                        l345 0182                        l375 044D  
                      l915 01F7                        l757 0326                        l767 0362  
                      l919 022E                        l777 0473                        _RC2 003A  
                      u410 046A                        u411 0469                        u420 0470  
                      u421 046F                        u430 043F                        u510 0322  
                      u431 043E                        u511 0321                        u440 044C  
                      u441 044B                        u505 0316                        u450 02EB  
                      u370 0498                        u451 02EA                        u371 0497  
                      _ISR 0499                        u470 02FD                        u630 03FF  
                      u471 02FC                        u631 03FE                        u800 034B  
                      u465 02EF                        u801 034A                        u490 030E  
                      u491 030D                        u820 035E                        u900 007B  
                      u485 02FE                        u821 035D                        u805 0347  
                      u901 007A                        u910 00AC                        u830 03BF  
                      u495 030A                        u815 0352                        u911 00AB  
                      u831 03BE                        u920 00BA                        u840 03D1  
                      u921 00B9                        u841 03D0                        u770 032F  
                      u930 00C0                        u850 02AC                        u771 032E  
                      u931 00BF                        u940 00E1                        u860 02D0  
                      u941 00E0                        u790 0341                        u950 00EC  
                      u870 02E2                        u791 0340                        u951 00EB  
                      u871 02E1                        u960 00FC                        u880 002C  
                      u785 0333                        u961 00FB                        u945 00DD  
                      u881 002B                        u970 0111                        u890 0045  
                      u971 0110                        u891 0044                        u980 011F  
                      u981 011E                        u965 00F8                        u990 016C  
                      u991 016B                        u975 010D                        fsr0 0004  
                      indf 0000                       ?_ISR 0070                       l1023 0492  
                     l1221 0472                       l1213 0463                       l1231 0443  
                     l1215 0464                       l1311 0401                       l1071 0486  
                     l1233 0445                       l1225 043A                       l1241 02E5  
                     l1217 046A                       l1313 0403                       l1235 044C  
                     l1227 043B                       l1251 02FD                       l1243 02EB  
                     l1219 0470                       l1315 0406                       l1307 03F8  
                     l1411 039B                       l1067 04A1                       l1229 043F  
                     l1253 030E                       l1245 02EE                       l1261 0322  
                     l1309 03FF                       l1421 03A2                       l1413 039C  
                     l1069 0481                       l1255 0314                       l1247 02F5  
                     l1239 02E3                       l1431 03A9                       l1423 03A5  
                     l1415 039F                       l1407 0392                       l1257 0315  
                     l1249 02F9                       l1601 02A2                       l1433 03AC  
                     l1425 03A6                       l1417 03A0                       l1409 0398  
                     l1259 031C                       l1611 002C                       l1603 02BE  
                     l1435 03AF                       l1427 03A7                       l1419 03A1  
                     l1621 0049                       l1613 0033                       l1701 0261  
                     l1605 02C6                       l1429 03A8                       l1623 004B  
                     l1631 007C                       l1615 0038                       l1607 0021  
                     l1543 04A7                       l1551 03EA                       l1703 0270  
                     l1711 040D                       l1641 00A8                       l1625 005C  
                     l1617 0039                       l1609 0026                       l1553 03F3  
                     l1545 03DE                       l1705 0276                       l1561 0430  
                     l1713 0419                       l1721 018C                       l1571 0339  
                     l1651 00C0                       l1643 00AC                       l1635 007D  
                     l1627 0067                       l1619 0045                       l1547 03E1  
                     l1707 0474                       l1563 0435                       l1555 0424  
                     l1803 0236                       l1731 01AE                       l1723 0191  
                     l1715 0183                       l1581 0358                       l1573 033D  
                     l1565 0327                       l1661 00E2                       l1653 00C4  
                     l1645 00B0                       l1637 009C                       l1805 0091  
                     l1629 006B                       l1709 044E                       l1549 03E7  
                     l1557 0427                       l1741 01D5                       l1733 01B8  
                     l1725 0196                       l1717 0188                       l1575 0341  
                     l1567 032F                       l1583 035E                       l1671 0117  
                     l1663 00EC                       l1647 00B5                       l1639 00A4  
                     l1591 03C4                       l1559 042D                       l1743 01E4  
                     l1735 01BE                       l1727 01A2                       l1719 018B  
                     l1577 034B                       l1569 0332                       l1673 011F  
                     l1665 00FC                       l1657 00C6                       l1649 00BA  
                     l1593 03CB                       l1745 01E8                       l1737 01C8  
                     l1729 01AB                       l1579 0351                       l1675 0126  
                     l1683 0163                       l1667 00FD                       l1595 03D1  
                     l1587 03BA                       l1747 01ED                       l1739 01D2  
                     l1677 012B                       l1669 0111                       l1685 016C  
                     l1597 03D6                       l1589 03BF                       l1679 015B  
                     l1687 017E                       l1599 029D                       l1697 0252  
                     l1699 0258                       STR_1 037D                       STR_2 038D  
                     u1000 017E                       u1001 017D                       u1017 01B4  
                     u1027 01CE                       u1037 01DD                       u1047 0432  
                     u1057 025C                       u1067 026B                       u1077 027A  
                     u1087 03EE                       _RCIF 0065                       i1l67 0499  
                     _TRMT 04C1                       _data 0034          ?_Lcd_Write_String 0075  
                     _cont 007A                       _main 0183                       btemp 007E  
                     start 000C         ??_Lcd_Write_String 0077            __end_of_Lcd_Cmd 03F7  
        ___bmul@multiplier 0075                      ??_ISR 0070                      ?_main 0070  
                    _ANSEL 0188            __end_of___lwdiv 0327            __end_of___lwmod 0363  
                    _RCREG 001A                      _SPBRG 0099                      _PORTA 0005  
                    _PORTB 0006                      _PORTC 0007                      _PORTD 0008  
                    _PORTE 0009    __size_of_Lcd_Set_Cursor 0024                      _TRISA 0085  
                    _TRISB 0086                      _TRISD 0088                      _TRISE 0089  
                    _TXREG 0019            __end_of_dpowers 037D            __end_of_initOsc 0252  
          __end_of_isdigit 0474                      _setup 0392                      pclath 000A  
          __end_of_spiInit 040D            __end_of_spiRead 048A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0183           __end_of_Lcd_Init 029D  
         __end_of_Lcd_Port 04AC            __initialization 000F               __end_of_main 01F6  
                   ??_main 0052         __size_of_Lcd_Clear 000D                initOsc@IRCF 0074  
                   ?_setup 0070                     _ANSELH 0189                  ??_Lcd_Cmd 0073  
                   _SPBRGH 009A    __size_of_Lcd_Write_Char 0016                     _TRISC2 043A  
                   _TRISC3 043B                     _TRISC5 043D                     _SSPCON 0014  
                   _SSPBUF 0013                     ___bmul 0439                  ??___lwdiv 0076  
                ??___lwmod 0040                  ??_initOsc 0072                  ??_isdigit 0072  
                   saved_w 007E           __end_of_spiWrite 04A6                  ??_spiInit 0075  
                ??_spiRead 0072                  ??_sprintf 0045            Lcd_Set_Cursor@a 0078  
          Lcd_Set_Cursor@b 0076    __end_of__initialization 001A          __end_of_Lcd_Clear 0481  
      ___bmul@multiplicand 0072             __pcstackCOMMON 0070              __end_of_setup 03B9  
           _Lcd_Set_Cursor 03B9                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                  ??_setup 0076                 __pbssBANK0 0020                 _data_total 0020  
               __pmaintext 0183                    ?___bmul 0072                 __pintentry 0004  
  __size_of_spiReceiveWait 0007  __size_of_Lcd_Write_String 0046     __end_of_Lcd_Set_Cursor 03DD  
   __size_of_ADC_to_string 0014                 ??_Lcd_Init 0076                 ??_Lcd_Port 0072  
                  _SSPSTAT 0094                 __stringtab 0363             _Lcd_Write_Char 0423  
                  _Lcd_Cmd 03DD                  ?_spiWrite 0070            __size_of___bmul 0015  
            ?_Show_val_LCD 0070                    ___lwdiv 02E3                    ___lwmod 0327  
          ?_Lcd_Set_Cursor 0076                    __ptext1 04A0                    __ptext2 0481  
                  __ptext3 0492                    __ptext4 0392                    __ptext5 03F7  
                  __ptext6 01F6                    __ptext7 040D                    __ptext8 029D  
                  __ptext9 0423               __size_of_ISR 0007                    _dpowers 0373  
                  _initOsc 01F6                    _isdigit 0462                    _spiInit 03F7  
                  _spiRead 0481                    _sprintf 001E                    clrloop0 048B  
   __end_of_Lcd_Write_Char 0439       end_of_initialization 001A              _ADC_to_string 044E  
           ??_Show_val_LCD 003E                  _RCSTAbits 0018                 ??_spiWrite 0072  
                Lcd_Port@a 0072                  _PORTCbits 0007                  _PORTEbits 0009  
              spiWrite@dat 0072            ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075  
        Lcd_Write_String@i 003C             ?_ADC_to_string 0070                  _TXSTAbits 0098  
                _Lcd_Clear 0474             _spiReceiveWait 0492             __end_of___bmul 044E  
         _Lcd_Write_String 029D        start_initialization 000F                __end_of_ISR 04A0  
        __size_of_Lcd_Init 004B               _hola_esclavo 007B          __size_of_Lcd_Port 0006  
   __end_of_spiReceiveWait 0499                 ?_Lcd_Clear 0070                   ??___bmul 0073  
          Lcd_Write_Char@a 0074                __pbssCOMMON 007A                  ___latbits 0002  
            __pcstackBANK0 003C       __end_of_Show_val_LCD 0423            ??_ADC_to_string 004F  
                 ?_Lcd_Cmd 0070                sprintf@flag 0049                sprintf@prec 004D  
         ___lwdiv@dividend 0074            ?_spiReceiveWait 0070           ??_Lcd_Set_Cursor 0077  
                 ?___lwdiv 0072                   ?___lwmod 003C          __size_of_spiWrite 0006  
                __pstrings 0363                   ?_initOsc 0070                   ?_isdigit 0070  
                 ?_spiInit 0072                   ?_spiRead 0070           ___lwdiv@quotient 0077  
                 ?_sprintf 0042             __size_of_setup 0027       spiInit@sTransmitEdge 0074  
        interrupt_function 0004                  clear_ram0 048A                   _PIE1bits 008C  
       spiInit@sDataSample 0072                   Lcd_Cmd@a 0075                ??_Lcd_Clear 0076  
              __stringbase 0372           ??_Lcd_Write_Char 0073                   _Lcd_Init 0252  
                 _Lcd_Port 04A6   __end_of_Lcd_Write_String 02E3           __size_of_Lcd_Cmd 001A  
         __size_of___lwdiv 0044           __size_of___lwmod 003C         __end_of__stringtab 0373  
              _isdigit$938 0072      __size_of_Show_val_LCD 0016                 sprintf@val 004B  
         __size_of_initOsc 005C           __size_of_isdigit 0012            ___lwdiv@divisor 0072  
          ___lwdiv@counter 0079                   __ptext10 03B9                   __ptext11 0252  
                 __ptext20 0439                   __ptext12 0474                   __ptext21 0499  
                 __ptext13 03DD                   __ptext14 04A6                   __ptext15 044E  
                 __ptext16 001E                   __ptext17 0462                   __ptext18 0327  
                 __ptext19 02E3           __size_of_spiInit 0016           __size_of_spiRead 0009  
         __size_of_sprintf 0165              __size_of_main 0073                   _spiWrite 04A0  
             _Show_val_LCD 040D               spiInit@sType 0075          spiInit@sClockIdle 0073  
               _INTCONbits 000B                   isdigit@c 0073                   intlevel1 0000  
                sprintf@ap 0048                  sprintf@sp 004A           ___lwmod@dividend 003E  
         ??_spiReceiveWait 0072                  stringcode 036D                 _OSCCONbits 008F  
       Lcd_Set_Cursor@temp 0079                   sprintf@c 004E                   sprintf@f 0042  
          ___lwmod@divisor 003C            ___lwmod@counter 0041                   stringdir 036D  
                 stringtab 0363      __end_of_ADC_to_string 0462  
