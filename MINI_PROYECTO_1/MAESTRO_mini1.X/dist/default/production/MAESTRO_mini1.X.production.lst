

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 17:57:46 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2,group=3
    45                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    65                           	psect	text27_split_1,local,class=CODE,merge=1,delta=2
    66                           	dabs	1,0x7E,2
    67  0000                     
    68                           ; Version 2.20
    69                           ; Generated 12/02/2020 GMT
    70                           ; 
    71                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC16F887 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  0007                     	;# 
   110  0008                     	;# 
   111  0009                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  0088                     	;# 
   142  0089                     	;# 
   143  008C                     	;# 
   144  008D                     	;# 
   145  008E                     	;# 
   146  008F                     	;# 
   147  0090                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0093                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0095                     	;# 
   155  0096                     	;# 
   156  0097                     	;# 
   157  0098                     	;# 
   158  0099                     	;# 
   159  009A                     	;# 
   160  009B                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  0105                     	;# 
   166  0107                     	;# 
   167  0108                     	;# 
   168  0109                     	;# 
   169  010C                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  0185                     	;# 
   175  0187                     	;# 
   176  0188                     	;# 
   177  0189                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0008                     	;# 
   189  0009                     	;# 
   190  000A                     	;# 
   191  000B                     	;# 
   192  000C                     	;# 
   193  000D                     	;# 
   194  000E                     	;# 
   195  000E                     	;# 
   196  000F                     	;# 
   197  0010                     	;# 
   198  0011                     	;# 
   199  0012                     	;# 
   200  0013                     	;# 
   201  0014                     	;# 
   202  0015                     	;# 
   203  0015                     	;# 
   204  0016                     	;# 
   205  0017                     	;# 
   206  0018                     	;# 
   207  0019                     	;# 
   208  001A                     	;# 
   209  001B                     	;# 
   210  001B                     	;# 
   211  001C                     	;# 
   212  001D                     	;# 
   213  001E                     	;# 
   214  001F                     	;# 
   215  0081                     	;# 
   216  0085                     	;# 
   217  0086                     	;# 
   218  0087                     	;# 
   219  0088                     	;# 
   220  0089                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  008F                     	;# 
   225  0090                     	;# 
   226  0091                     	;# 
   227  0092                     	;# 
   228  0093                     	;# 
   229  0093                     	;# 
   230  0093                     	;# 
   231  0094                     	;# 
   232  0095                     	;# 
   233  0096                     	;# 
   234  0097                     	;# 
   235  0098                     	;# 
   236  0099                     	;# 
   237  009A                     	;# 
   238  009B                     	;# 
   239  009C                     	;# 
   240  009D                     	;# 
   241  009E                     	;# 
   242  009F                     	;# 
   243  0105                     	;# 
   244  0107                     	;# 
   245  0108                     	;# 
   246  0109                     	;# 
   247  010C                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  010F                     	;# 
   252  0185                     	;# 
   253  0187                     	;# 
   254  0188                     	;# 
   255  0189                     	;# 
   256  018C                     	;# 
   257  018D                     	;# 
   258  0000                     	;# 
   259  0001                     	;# 
   260  0002                     	;# 
   261  0003                     	;# 
   262  0004                     	;# 
   263  0005                     	;# 
   264  0006                     	;# 
   265  0007                     	;# 
   266  0008                     	;# 
   267  0009                     	;# 
   268  000A                     	;# 
   269  000B                     	;# 
   270  000C                     	;# 
   271  000D                     	;# 
   272  000E                     	;# 
   273  000E                     	;# 
   274  000F                     	;# 
   275  0010                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0014                     	;# 
   280  0015                     	;# 
   281  0015                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001B                     	;# 
   289  001C                     	;# 
   290  001D                     	;# 
   291  001E                     	;# 
   292  001F                     	;# 
   293  0081                     	;# 
   294  0085                     	;# 
   295  0086                     	;# 
   296  0087                     	;# 
   297  0088                     	;# 
   298  0089                     	;# 
   299  008C                     	;# 
   300  008D                     	;# 
   301  008E                     	;# 
   302  008F                     	;# 
   303  0090                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0093                     	;# 
   307  0093                     	;# 
   308  0093                     	;# 
   309  0094                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0098                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  009F                     	;# 
   321  0105                     	;# 
   322  0107                     	;# 
   323  0108                     	;# 
   324  0109                     	;# 
   325  010C                     	;# 
   326  010C                     	;# 
   327  010D                     	;# 
   328  010E                     	;# 
   329  010F                     	;# 
   330  0185                     	;# 
   331  0187                     	;# 
   332  0188                     	;# 
   333  0189                     	;# 
   334  018C                     	;# 
   335  018D                     	;# 
   336  0000                     	;# 
   337  0001                     	;# 
   338  0002                     	;# 
   339  0003                     	;# 
   340  0004                     	;# 
   341  0005                     	;# 
   342  0006                     	;# 
   343  0007                     	;# 
   344  0008                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000D                     	;# 
   350  000E                     	;# 
   351  000E                     	;# 
   352  000F                     	;# 
   353  0010                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0014                     	;# 
   358  0015                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  001D                     	;# 
   369  001E                     	;# 
   370  001F                     	;# 
   371  0081                     	;# 
   372  0085                     	;# 
   373  0086                     	;# 
   374  0087                     	;# 
   375  0088                     	;# 
   376  0089                     	;# 
   377  008C                     	;# 
   378  008D                     	;# 
   379  008E                     	;# 
   380  008F                     	;# 
   381  0090                     	;# 
   382  0091                     	;# 
   383  0092                     	;# 
   384  0093                     	;# 
   385  0093                     	;# 
   386  0093                     	;# 
   387  0094                     	;# 
   388  0095                     	;# 
   389  0096                     	;# 
   390  0097                     	;# 
   391  0098                     	;# 
   392  0099                     	;# 
   393  009A                     	;# 
   394  009B                     	;# 
   395  009C                     	;# 
   396  009D                     	;# 
   397  009E                     	;# 
   398  009F                     	;# 
   399  0105                     	;# 
   400  0107                     	;# 
   401  0108                     	;# 
   402  0109                     	;# 
   403  010C                     	;# 
   404  010C                     	;# 
   405  010D                     	;# 
   406  010E                     	;# 
   407  010F                     	;# 
   408  0185                     	;# 
   409  0187                     	;# 
   410  0188                     	;# 
   411  0189                     	;# 
   412  018C                     	;# 
   413  018D                     	;# 
   414  0000                     	;# 
   415  0001                     	;# 
   416  0002                     	;# 
   417  0003                     	;# 
   418  0004                     	;# 
   419  0005                     	;# 
   420  0006                     	;# 
   421  0007                     	;# 
   422  0008                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000D                     	;# 
   428  000E                     	;# 
   429  000E                     	;# 
   430  000F                     	;# 
   431  0010                     	;# 
   432  0011                     	;# 
   433  0012                     	;# 
   434  0013                     	;# 
   435  0014                     	;# 
   436  0015                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  001D                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  0081                     	;# 
   450  0085                     	;# 
   451  0086                     	;# 
   452  0087                     	;# 
   453  0088                     	;# 
   454  0089                     	;# 
   455  008C                     	;# 
   456  008D                     	;# 
   457  008E                     	;# 
   458  008F                     	;# 
   459  0090                     	;# 
   460  0091                     	;# 
   461  0092                     	;# 
   462  0093                     	;# 
   463  0093                     	;# 
   464  0093                     	;# 
   465  0094                     	;# 
   466  0095                     	;# 
   467  0096                     	;# 
   468  0097                     	;# 
   469  0098                     	;# 
   470  0099                     	;# 
   471  009A                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  009F                     	;# 
   477  0105                     	;# 
   478  0107                     	;# 
   479  0108                     	;# 
   480  0109                     	;# 
   481  010C                     	;# 
   482  010C                     	;# 
   483  010D                     	;# 
   484  010E                     	;# 
   485  010F                     	;# 
   486  0185                     	;# 
   487  0187                     	;# 
   488  0188                     	;# 
   489  0189                     	;# 
   490  018C                     	;# 
   491  018D                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  000E                     	;# 
   508  000F                     	;# 
   509  0010                     	;# 
   510  0011                     	;# 
   511  0012                     	;# 
   512  0013                     	;# 
   513  0014                     	;# 
   514  0015                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  001D                     	;# 
   525  001E                     	;# 
   526  001F                     	;# 
   527  0081                     	;# 
   528  0085                     	;# 
   529  0086                     	;# 
   530  0087                     	;# 
   531  0088                     	;# 
   532  0089                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  008F                     	;# 
   537  0090                     	;# 
   538  0091                     	;# 
   539  0092                     	;# 
   540  0093                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0094                     	;# 
   544  0095                     	;# 
   545  0096                     	;# 
   546  0097                     	;# 
   547  0098                     	;# 
   548  0099                     	;# 
   549  009A                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  0105                     	;# 
   556  0107                     	;# 
   557  0108                     	;# 
   558  0109                     	;# 
   559  010C                     	;# 
   560  010C                     	;# 
   561  010D                     	;# 
   562  010E                     	;# 
   563  010F                     	;# 
   564  0185                     	;# 
   565  0187                     	;# 
   566  0188                     	;# 
   567  0189                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570                           
   571                           	psect	strings
   572  1000                     __pstrings:
   573  1000                     stringtab:
   574  1000                     __stringtab:
   575                           
   576                           ;	String table - string pointers are 1 byte each
   577  1000  1BFF               	btfsc	btemp+1,7
   578  1001  280A               	ljmp	stringcode
   579  1002  1383               	bcf	3,7
   580  1003  187F               	btfsc	btemp+1,0
   581  1004  1783               	bsf	3,7
   582  1005  0800               	movf	0,w
   583  1006  0A84               	incf	4,f
   584  1007  1903               	skipnz
   585  1008  0AFF               	incf	btemp+1,f
   586  1009  0008               	return
   587  100A                     stringcode:
   588  100A                     stringdir:
   589  100A  3010               	movlw	high stringdir
   590  100B  008A               	movwf	10
   591  100C  0804               	movf	4,w
   592  100D  0A84               	incf	4,f
   593  100E  0782               	addwf	2,f
   594  100F                     __stringbase:
   595  100F  3400               	retlw	0
   596  1010                     __end_of__stringtab:
   597  1010                     __powers_:
   598  1010  3400               	retlw	0
   599  1011  3480               	retlw	128
   600  1012  343F               	retlw	63
   601  1013  3400               	retlw	0
   602  1014  3420               	retlw	32
   603  1015  3441               	retlw	65
   604  1016  3400               	retlw	0
   605  1017  34C8               	retlw	200
   606  1018  3442               	retlw	66
   607  1019  3400               	retlw	0
   608  101A  347A               	retlw	122
   609  101B  3444               	retlw	68
   610  101C  3440               	retlw	64
   611  101D  341C               	retlw	28
   612  101E  3446               	retlw	70
   613  101F  3450               	retlw	80
   614  1020  34C3               	retlw	195
   615  1021  3447               	retlw	71
   616  1022  3424               	retlw	36
   617  1023  3474               	retlw	116
   618  1024  3449               	retlw	73
   619  1025  3497               	retlw	151
   620  1026  3418               	retlw	24
   621  1027  344B               	retlw	75
   622  1028  34BC               	retlw	188
   623  1029  34BE               	retlw	190
   624  102A  344C               	retlw	76
   625  102B  346B               	retlw	107
   626  102C  346E               	retlw	110
   627  102D  344E               	retlw	78
   628  102E  3403               	retlw	3
   629  102F  3415               	retlw	21
   630  1030  3450               	retlw	80
   631  1031  3479               	retlw	121
   632  1032  34AD               	retlw	173
   633  1033  3460               	retlw	96
   634  1034  34F3               	retlw	243
   635  1035  3449               	retlw	73
   636  1036  3471               	retlw	113
   637  1037                     __end_of__powers_:
   638  1037                     __npowers_:
   639  1037  3400               	retlw	0
   640  1038  3480               	retlw	128
   641  1039  343F               	retlw	63
   642  103A  34CD               	retlw	205
   643  103B  34CC               	retlw	204
   644  103C  343D               	retlw	61
   645  103D  34D7               	retlw	215
   646  103E  3423               	retlw	35
   647  103F  343C               	retlw	60
   648  1040  3412               	retlw	18
   649  1041  3483               	retlw	131
   650  1042  343A               	retlw	58
   651  1043  34B7               	retlw	183
   652  1044  34D1               	retlw	209
   653  1045  3438               	retlw	56
   654  1046  34C6               	retlw	198
   655  1047  3427               	retlw	39
   656  1048  3437               	retlw	55
   657  1049  3438               	retlw	56
   658  104A  3486               	retlw	134
   659  104B  3435               	retlw	53
   660  104C  34C0               	retlw	192
   661  104D  34D6               	retlw	214
   662  104E  3433               	retlw	51
   663  104F  34CC               	retlw	204
   664  1050  342B               	retlw	43
   665  1051  3432               	retlw	50
   666  1052  3470               	retlw	112
   667  1053  3489               	retlw	137
   668  1054  3430               	retlw	48
   669  1055  34E7               	retlw	231
   670  1056  34DB               	retlw	219
   671  1057  342E               	retlw	46
   672  1058  34E5               	retlw	229
   673  1059  343C               	retlw	60
   674  105A  341E               	retlw	30
   675  105B  3442               	retlw	66
   676  105C  34A2               	retlw	162
   677  105D  340D               	retlw	13
   678  105E                     __end_of__npowers_:
   679  105E                     _dpowers:
   680  105E  3401               	retlw	1
   681  105F  3400               	retlw	0
   682  1060  3400               	retlw	0
   683  1061  3400               	retlw	0
   684  1062  340A               	retlw	10
   685  1063  3400               	retlw	0
   686  1064  3400               	retlw	0
   687  1065  3400               	retlw	0
   688  1066  3464               	retlw	100
   689  1067  3400               	retlw	0
   690  1068  3400               	retlw	0
   691  1069  3400               	retlw	0
   692  106A  34E8               	retlw	232
   693  106B  3403               	retlw	3
   694  106C  3400               	retlw	0
   695  106D  3400               	retlw	0
   696  106E  3410               	retlw	16
   697  106F  3427               	retlw	39
   698  1070  3400               	retlw	0
   699  1071  3400               	retlw	0
   700  1072  34A0               	retlw	160
   701  1073  3486               	retlw	134
   702  1074  3401               	retlw	1
   703  1075  3400               	retlw	0
   704  1076  3440               	retlw	64
   705  1077  3442               	retlw	66
   706  1078  340F               	retlw	15
   707  1079  3400               	retlw	0
   708  107A  3480               	retlw	128
   709  107B  3496               	retlw	150
   710  107C  3498               	retlw	152
   711  107D  3400               	retlw	0
   712  107E  3400               	retlw	0
   713  107F  34E1               	retlw	225
   714  1080  34F5               	retlw	245
   715  1081  3405               	retlw	5
   716  1082  3400               	retlw	0
   717  1083  34CA               	retlw	202
   718  1084  349A               	retlw	154
   719  1085  343B               	retlw	59
   720  1086                     __end_of_dpowers:
   721  0013                     _SSPBUF	set	19
   722  0014                     _SSPCON	set	20
   723  001A                     _RCREG	set	26
   724  0019                     _TXREG	set	25
   725  000B                     _INTCONbits	set	11
   726  0018                     _RCSTAbits	set	24
   727  0009                     _PORTEbits	set	9
   728  0007                     _PORTCbits	set	7
   729  0009                     _PORTE	set	9
   730  0008                     _PORTD	set	8
   731  0007                     _PORTC	set	7
   732  0005                     _PORTA	set	5
   733  0006                     _PORTB	set	6
   734  0065                     _RCIF	set	101
   735  0039                     _RC1	set	57
   736  0038                     _RC0	set	56
   737  003A                     _RC2	set	58
   738  0094                     _SSPSTATbits	set	148
   739  0094                     _SSPSTAT	set	148
   740  008C                     _PIE1bits	set	140
   741  0099                     _SPBRG	set	153
   742  009A                     _SPBRGH	set	154
   743  0098                     _TXSTAbits	set	152
   744  008F                     _OSCCONbits	set	143
   745  0089                     _TRISE	set	137
   746  0088                     _TRISD	set	136
   747  0086                     _TRISB	set	134
   748  0085                     _TRISA	set	133
   749  043B                     _TRISC3	set	1083
   750  043D                     _TRISC5	set	1085
   751  04C1                     _TRMT	set	1217
   752  043A                     _TRISC2	set	1082
   753  0439                     _TRISC1	set	1081
   754  0438                     _TRISC0	set	1080
   755  0189                     _ANSELH	set	393
   756  0188                     _ANSEL	set	392
   757  1086                     STR_1:
   758  1086  3443               	retlw	67	;'C'
   759  1087  344F               	retlw	79	;'O'
   760  1088  344E               	retlw	78	;'N'
   761  1089  3454               	retlw	84	;'T'
   762  108A  3420               	retlw	32	;' '
   763  108B  3420               	retlw	32	;' '
   764  108C  3420               	retlw	32	;' '
   765  108D  3441               	retlw	65	;'A'
   766  108E  3444               	retlw	68	;'D'
   767  108F  3443               	retlw	67	;'C'
   768  1090  3420               	retlw	32	;' '
   769  1091  3420               	retlw	32	;' '
   770  1092  3420               	retlw	32	;' '
   771  1093  3454               	retlw	84	;'T'
   772  1094  3445               	retlw	69	;'E'
   773  1095  344D               	retlw	77	;'M'
   774  1096  3450               	retlw	80	;'P'
   775  1097  3400               	retlw	0
   776  1098                     STR_10:
   777  1098  3454               	retlw	84	;'T'
   778  1099  3445               	retlw	69	;'E'
   779  109A  344D               	retlw	77	;'M'
   780  109B  3450               	retlw	80	;'P'
   781  109C  343A               	retlw	58	;':'
   782  109D  3420               	retlw	32	;' '
   783  109E  3420               	retlw	32	;' '
   784  109F  340A               	retlw	10
   785  10A0  3400               	retlw	0
   786  10A1                     STR_6:
   787  10A1  3443               	retlw	67	;'C'
   788  10A2  344F               	retlw	79	;'O'
   789  10A3  344E               	retlw	78	;'N'
   790  10A4  3454               	retlw	84	;'T'
   791  10A5  343A               	retlw	58	;':'
   792  10A6  3420               	retlw	32	;' '
   793  10A7  3420               	retlw	32	;' '
   794  10A8  340A               	retlw	10
   795  10A9  3400               	retlw	0
   796  10AA                     STR_8:
   797  10AA  3441               	retlw	65	;'A'
   798  10AB  3444               	retlw	68	;'D'
   799  10AC  3443               	retlw	67	;'C'
   800  10AD  343A               	retlw	58	;':'
   801  10AE  3420               	retlw	32	;' '
   802  10AF  3420               	retlw	32	;' '
   803  10B0  340A               	retlw	10
   804  10B1  3400               	retlw	0
   805  10B2                     STR_3:
   806  10B2  3425               	retlw	37	;'%'
   807  10B3  3431               	retlw	49	;'1'
   808  10B4  342E               	retlw	46	;'.'
   809  10B5  3432               	retlw	50	;'2'
   810  10B6  3466               	retlw	102	;'f'
   811  10B7  3456               	retlw	86	;'V'
   812  10B8  3400               	retlw	0
   813  10B9                     STR_11:
   814  10B9  34B0               	retlw	-80
   815  10BA  3443               	retlw	67	;'C'
   816  10BB  3420               	retlw	32	;' '
   817  10BC  3420               	retlw	32	;' '
   818  10BD  340A               	retlw	10
   819  10BE  3400               	retlw	0
   820  10BF                     STR_4:
   821  10BF  3425               	retlw	37	;'%'
   822  10C0  342E               	retlw	46	;'.'
   823  10C1  3432               	retlw	50	;'2'
   824  10C2  3469               	retlw	105	;'i'
   825  10C3  3400               	retlw	0
   826  10C4                     STR_2:
   827  10C4  3425               	retlw	37	;'%'
   828  10C5  342E               	retlw	46	;'.'
   829  10C6  3433               	retlw	51	;'3'
   830  10C7  3469               	retlw	105	;'i'
   831  10C8  3400               	retlw	0
   832  10C9                     STR_5:
   833  10C9  3443               	retlw	67	;'C'
   834  10CA  3400               	retlw	0
   835  10AE                     
   836                           	psect	cinit
   837  000F                     start_initialization:	
   838                           ; #config settings
   839                           
   840  000F                     __initialization:
   841                           
   842                           ; Clear objects allocated to COMMON
   843  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   844  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   845                           
   846                           ; Clear objects allocated to BANK0
   847  0011  1283               	bcf	3,5	;RP0=0, select bank0
   848  0012  1303               	bcf	3,6	;RP1=0, select bank0
   849  0013  01EC               	clrf	__pbssBANK0& (0+127)
   850  0014  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   851  0015  01EE               	clrf	(__pbssBANK0+2)& (0+127)
   852  0016  01EF               	clrf	(__pbssBANK0+3)& (0+127)
   853                           
   854                           ; Clear objects allocated to BANK1
   855  0017  1383               	bcf	3,7	;select IRP bank0
   856  0018  30A0               	movlw	low __pbssBANK1
   857  0019  0084               	movwf	4
   858  001A  30CF               	movlw	low (__pbssBANK1+47)
   859  001B  160A  158A  23F8  120A  118A  	fcall	clear_ram0
   860  0020                     end_of_initialization:	
   861                           ;End of C runtime variable initialization code
   862                           
   863  0020                     __end_of__initialization:
   864  0020  0183               	clrf	3
   865  0021  160A  158A  2F64   	ljmp	_main	;jump to C main() function
   866                           
   867                           	psect	bssCOMMON
   868  007A                     __pbssCOMMON:
   869  007A                     _val_TEMP:
   870  007A                     	ds	1
   871  007B                     _val_ADC:
   872  007B                     	ds	1
   873                           
   874                           	psect	bssBANK0
   875  006C                     __pbssBANK0:
   876  006C                     _mv_temp_val_M:
   877  006C                     	ds	2
   878  006E                     _cont:
   879  006E                     	ds	1
   880  006F                     _hola_esclavo:
   881  006F                     	ds	1
   882                           
   883                           	psect	bssBANK1
   884  00A0                     __pbssBANK1:
   885  00A0                     _data_total:
   886  00A0                     	ds	20
   887  00B4                     _ADC_val_M:
   888  00B4                     	ds	3
   889  00B7                     _data_TEMP:
   890  00B7                     	ds	8
   891  00BF                     _data_ADC:
   892  00BF                     	ds	8
   893  00C7                     _data_cont:
   894  00C7                     	ds	8
   895                           
   896                           	psect	clrtext
   897  1BF8                     clear_ram0:	
   898                           ;	Called with FSR containing the base address, and
   899                           ;	W with the last address+1
   900                           
   901  1BF8  0064               	clrwdt	;clear the watchdog before getting into this loop
   902  1BF9                     clrloop0:
   903  1BF9  0180               	clrf	0	;clear RAM location pointed to by FSR
   904  1BFA  0A84               	incf	4,f	;increment pointer
   905  1BFB  0604               	xorwf	4,w	;XOR with final address
   906  1BFC  1903               	btfsc	3,2	;have we reached the end yet?
   907  1BFD  3400               	retlw	0	;all done for this memory range, return
   908  1BFE  0604               	xorwf	4,w	;XOR again to restore value
   909  1BFF  2BF9               	goto	clrloop0	;do the next byte
   910                           
   911                           	psect	cstackBANK1
   912  00CF                     __pcstackBANK1:
   913  00CF                     _sprintf$1241:
   914                           
   915                           ; 3 bytes @ 0x0
   916  00CF                     	ds	3
   917  00D2                     sprintf@ap:
   918                           
   919                           ; 1 bytes @ 0x3
   920  00D2                     	ds	1
   921  00D3                     sprintf@flag:
   922                           
   923                           ; 2 bytes @ 0x4
   924  00D3                     	ds	2
   925  00D5                     sprintf@width:
   926                           
   927                           ; 2 bytes @ 0x6
   928  00D5                     	ds	2
   929  00D7                     sprintf@tmpval:
   930                           
   931                           ; 4 bytes @ 0x8
   932  00D7                     	ds	4
   933  00DB                     sprintf@val:
   934                           
   935                           ; 4 bytes @ 0xC
   936  00DB                     	ds	4
   937  00DF                     sprintf@eexp:
   938                           
   939                           ; 2 bytes @ 0x10
   940  00DF                     	ds	2
   941  00E1                     sprintf@fval:
   942                           
   943                           ; 3 bytes @ 0x12
   944  00E1                     	ds	3
   945  00E4                     sprintf@sp:
   946                           
   947                           ; 1 bytes @ 0x15
   948  00E4                     	ds	1
   949  00E5                     sprintf@prec:
   950                           
   951                           ; 2 bytes @ 0x16
   952  00E5                     	ds	2
   953  00E7                     sprintf@c:
   954                           
   955                           ; 1 bytes @ 0x18
   956  00E7                     	ds	1
   957                           
   958                           	psect	cstackCOMMON
   959  0070                     __pcstackCOMMON:
   960  0070                     ?_isdigit:
   961  0070                     ?_setup:	
   962                           ; 1 bit 
   963                           
   964  0070                     ?_Lcd_Init:	
   965                           ; 1 bytes @ 0x0
   966                           
   967  0070                     ?_Lcd_Clear:	
   968                           ; 1 bytes @ 0x0
   969                           
   970  0070                     ?_SPI_CONT:	
   971                           ; 1 bytes @ 0x0
   972                           
   973  0070                     ?_SPI_ADC:	
   974                           ; 1 bytes @ 0x0
   975                           
   976  0070                     ?_SPI_TEMP:	
   977                           ; 1 bytes @ 0x0
   978                           
   979  0070                     ?_Mapeo_M:	
   980                           ; 1 bytes @ 0x0
   981                           
   982  0070                     ?_ADC_to_string:	
   983                           ; 1 bytes @ 0x0
   984                           
   985  0070                     ?_Show_val_VT:	
   986                           ; 1 bytes @ 0x0
   987                           
   988  0070                     ?_Show_val_LCD:	
   989                           ; 1 bytes @ 0x0
   990                           
   991  0070                     ?_Write_USART:	
   992                           ; 1 bytes @ 0x0
   993                           
   994  0070                     ?_spiWrite:	
   995                           ; 1 bytes @ 0x0
   996                           
   997  0070                     ?_spiRead:	
   998                           ; 1 bytes @ 0x0
   999                           
  1000  0070                     ?_initOsc:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  0070                     ?_USART_Init_BaudRate:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  0070                     ?_USART_Init:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  0070                     ?_Lcd_Port:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  0070                     ?_Lcd_Cmd:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  0070                     ?_ISR:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018  0070                     ??_ISR:	
  1019                           ; 1 bytes @ 0x0
  1020                           
  1021  0070                     ?_main:	
  1022                           ; 1 bytes @ 0x0
  1023                           
  1024  0070                     ?_Lcd_Write_Char:	
  1025                           ; 1 bytes @ 0x0
  1026                           
  1027  0070                     ?_spiReceiveWait:	
  1028                           ; 1 bytes @ 0x0
  1029                           
  1030                           
  1031                           ; 1 bytes @ 0x0
  1032  0070                     	ds	2
  1033  0072                     ?___ftge:
  1034  0072                     ??_Write_USART:	
  1035                           ; 1 bit 
  1036                           
  1037  0072                     ??_spiWrite:	
  1038                           ; 1 bytes @ 0x2
  1039                           
  1040  0072                     ??_spiRead:	
  1041                           ; 1 bytes @ 0x2
  1042                           
  1043  0072                     ??_initOsc:	
  1044                           ; 1 bytes @ 0x2
  1045                           
  1046  0072                     ??_USART_Init_BaudRate:	
  1047                           ; 1 bytes @ 0x2
  1048                           
  1049  0072                     ??_USART_Init:	
  1050                           ; 1 bytes @ 0x2
  1051                           
  1052  0072                     ?_spiInit:	
  1053                           ; 1 bytes @ 0x2
  1054                           
  1055  0072                     ??_Lcd_Port:	
  1056                           ; 1 bytes @ 0x2
  1057                           
  1058  0072                     ??_isdigit:	
  1059                           ; 1 bytes @ 0x2
  1060                           
  1061  0072                     ??_spiReceiveWait:	
  1062                           ; 1 bytes @ 0x2
  1063                           
  1064  0072                     ?___wmul:	
  1065                           ; 1 bytes @ 0x2
  1066                           
  1067  0072                     ?___awmod:	
  1068                           ; 2 bytes @ 0x2
  1069                           
  1070  0072                     ?___lwmod:	
  1071                           ; 2 bytes @ 0x2
  1072                           
  1073  0072                     ?___ftpack:	
  1074                           ; 2 bytes @ 0x2
  1075                           
  1076  0072                     ?___ftneg:	
  1077                           ; 3 bytes @ 0x2
  1078                           
  1079  0072                     ?__tdiv_to_l_:	
  1080                           ; 3 bytes @ 0x2
  1081                           
  1082  0072                     ?__div_to_l_:	
  1083                           ; 4 bytes @ 0x2
  1084                           
  1085  0072                     ?___lldiv:	
  1086                           ; 4 bytes @ 0x2
  1087                           
  1088  0072                     Lcd_Port@a:	
  1089                           ; 4 bytes @ 0x2
  1090                           
  1091  0072                     Write_USART@a:	
  1092                           ; 1 bytes @ 0x2
  1093                           
  1094  0072                     spiInit@sDataSample:	
  1095                           ; 1 bytes @ 0x2
  1096                           
  1097  0072                     spiWrite@dat:	
  1098                           ; 1 bytes @ 0x2
  1099                           
  1100  0072                     _isdigit$1035:	
  1101                           ; 1 bytes @ 0x2
  1102                           
  1103  0072                     ___wmul@multiplier:	
  1104                           ; 1 bytes @ 0x2
  1105                           
  1106  0072                     ___awmod@divisor:	
  1107                           ; 2 bytes @ 0x2
  1108                           
  1109  0072                     ___lwmod@divisor:	
  1110                           ; 2 bytes @ 0x2
  1111                           
  1112  0072                     __div_to_l_@f1:	
  1113                           ; 2 bytes @ 0x2
  1114                           
  1115  0072                     ___ftpack@arg:	
  1116                           ; 3 bytes @ 0x2
  1117                           
  1118  0072                     __tdiv_to_l_@f1:	
  1119                           ; 3 bytes @ 0x2
  1120                           
  1121  0072                     ___ftge@ff1:	
  1122                           ; 3 bytes @ 0x2
  1123                           
  1124  0072                     ___ftneg@f1:	
  1125                           ; 3 bytes @ 0x2
  1126                           
  1127  0072                     ___lldiv@divisor:	
  1128                           ; 3 bytes @ 0x2
  1129                           
  1130                           
  1131                           ; 4 bytes @ 0x2
  1132  0072                     	ds	1
  1133  0073                     ??_SPI_CONT:
  1134  0073                     ??_SPI_ADC:	
  1135                           ; 1 bytes @ 0x3
  1136                           
  1137  0073                     ??_SPI_TEMP:	
  1138                           ; 1 bytes @ 0x3
  1139                           
  1140  0073                     ?_Write_USART_String:	
  1141                           ; 1 bytes @ 0x3
  1142                           
  1143  0073                     ??_Lcd_Cmd:	
  1144                           ; 1 bytes @ 0x3
  1145                           
  1146  0073                     ??_Lcd_Write_Char:	
  1147                           ; 1 bytes @ 0x3
  1148                           
  1149  0073                     spiInit@sClockIdle:	
  1150                           ; 1 bytes @ 0x3
  1151                           
  1152  0073                     isdigit@c:	
  1153                           ; 1 bytes @ 0x3
  1154                           
  1155  0073                     Write_USART_String@a:	
  1156                           ; 1 bytes @ 0x3
  1157                           
  1158                           
  1159                           ; 2 bytes @ 0x3
  1160  0073                     	ds	1
  1161  0074                     initOsc@IRCF:
  1162  0074                     Lcd_Write_Char@a:	
  1163                           ; 1 bytes @ 0x4
  1164                           
  1165  0074                     spiInit@sTransmitEdge:	
  1166                           ; 1 bytes @ 0x4
  1167                           
  1168  0074                     ___wmul@multiplicand:	
  1169                           ; 1 bytes @ 0x4
  1170                           
  1171  0074                     ___awmod@dividend:	
  1172                           ; 2 bytes @ 0x4
  1173                           
  1174  0074                     ___lwmod@dividend:	
  1175                           ; 2 bytes @ 0x4
  1176                           
  1177                           
  1178                           ; 2 bytes @ 0x4
  1179  0074                     	ds	1
  1180  0075                     ?_Lcd_Write_String:
  1181  0075                     ??_Write_USART_String:	
  1182                           ; 1 bytes @ 0x5
  1183                           
  1184  0075                     ??_spiInit:	
  1185                           ; 1 bytes @ 0x5
  1186                           
  1187  0075                     ??___ftneg:	
  1188                           ; 1 bytes @ 0x5
  1189                           
  1190  0075                     Lcd_Cmd@a:	
  1191                           ; 1 bytes @ 0x5
  1192                           
  1193  0075                     spiInit@sType:	
  1194                           ; 1 bytes @ 0x5
  1195                           
  1196  0075                     ___ftpack@exp:	
  1197                           ; 1 bytes @ 0x5
  1198                           
  1199  0075                     Lcd_Write_String@a:	
  1200                           ; 1 bytes @ 0x5
  1201                           
  1202  0075                     __div_to_l_@f2:	
  1203                           ; 2 bytes @ 0x5
  1204                           
  1205  0075                     __tdiv_to_l_@f2:	
  1206                           ; 3 bytes @ 0x5
  1207                           
  1208  0075                     ___ftge@ff2:	
  1209                           ; 3 bytes @ 0x5
  1210                           
  1211                           
  1212                           ; 3 bytes @ 0x5
  1213  0075                     	ds	1
  1214  0076                     ??_setup:
  1215  0076                     ??_Lcd_Init:	
  1216                           ; 1 bytes @ 0x6
  1217                           
  1218  0076                     ??_Lcd_Clear:	
  1219                           ; 1 bytes @ 0x6
  1220                           
  1221  0076                     ?_Lcd_Set_Cursor:	
  1222                           ; 1 bytes @ 0x6
  1223                           
  1224  0076                     ??___wmul:	
  1225                           ; 1 bytes @ 0x6
  1226                           
  1227  0076                     ??___awmod:	
  1228                           ; 1 bytes @ 0x6
  1229                           
  1230  0076                     ??___lwmod:	
  1231                           ; 1 bytes @ 0x6
  1232                           
  1233  0076                     Lcd_Set_Cursor@b:	
  1234                           ; 1 bytes @ 0x6
  1235                           
  1236  0076                     Write_USART_String@i:	
  1237                           ; 1 bytes @ 0x6
  1238                           
  1239  0076                     ___ftpack@sign:	
  1240                           ; 1 bytes @ 0x6
  1241                           
  1242  0076                     ___wmul@product:	
  1243                           ; 1 bytes @ 0x6
  1244                           
  1245  0076                     ___lldiv@dividend:	
  1246                           ; 2 bytes @ 0x6
  1247                           
  1248                           
  1249                           ; 4 bytes @ 0x6
  1250  0076                     	ds	1
  1251  0077                     ??_Lcd_Set_Cursor:
  1252  0077                     ??_Lcd_Write_String:	
  1253                           ; 1 bytes @ 0x7
  1254                           
  1255  0077                     ??_Show_val_VT:	
  1256                           ; 1 bytes @ 0x7
  1257                           
  1258  0077                     ??___ftpack:	
  1259                           ; 1 bytes @ 0x7
  1260                           
  1261  0077                     ___awmod@counter:	
  1262                           ; 1 bytes @ 0x7
  1263                           
  1264  0077                     ___lwmod@counter:	
  1265                           ; 1 bytes @ 0x7
  1266                           
  1267                           
  1268                           ; 1 bytes @ 0x7
  1269  0077                     	ds	1
  1270  0078                     ??___ftge:
  1271  0078                     ??___lwdiv:	
  1272                           ; 1 bytes @ 0x8
  1273                           
  1274  0078                     Lcd_Set_Cursor@a:	
  1275                           ; 1 bytes @ 0x8
  1276                           
  1277  0078                     ___awmod@sign:	
  1278                           ; 1 bytes @ 0x8
  1279                           
  1280                           
  1281                           ; 1 bytes @ 0x8
  1282  0078                     	ds	1
  1283  0079                     ??___awdiv:
  1284  0079                     Lcd_Set_Cursor@temp:	
  1285                           ; 1 bytes @ 0x9
  1286                           
  1287                           
  1288                           ; 1 bytes @ 0x9
  1289  0079                     	ds	1
  1290  007A                     ??_main:
  1291  007A                     ??___ftsub:	
  1292                           ; 1 bytes @ 0xA
  1293                           
  1294                           
  1295                           	psect	cstackBANK0
  1296  0020                     __pcstackBANK0:	
  1297                           ; 1 bytes @ 0xA
  1298                           
  1299  0020                     ??__tdiv_to_l_:
  1300  0020                     ??__div_to_l_:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0020                     ??___lldiv:	
  1304                           ; 1 bytes @ 0x0
  1305                           
  1306  0020                     ?___awdiv:	
  1307                           ; 1 bytes @ 0x0
  1308                           
  1309  0020                     ?___lwdiv:	
  1310                           ; 2 bytes @ 0x0
  1311                           
  1312  0020                     ?___awtoft:	
  1313                           ; 2 bytes @ 0x0
  1314                           
  1315  0020                     ?___lltoft:	
  1316                           ; 3 bytes @ 0x0
  1317                           
  1318  0020                     Lcd_Write_String@i:	
  1319                           ; 3 bytes @ 0x0
  1320                           
  1321  0020                     ___awdiv@divisor:	
  1322                           ; 2 bytes @ 0x0
  1323                           
  1324  0020                     ___awtoft@c:	
  1325                           ; 2 bytes @ 0x0
  1326                           
  1327  0020                     ___lwdiv@divisor:	
  1328                           ; 2 bytes @ 0x0
  1329                           
  1330  0020                     ___lltoft@c:	
  1331                           ; 2 bytes @ 0x0
  1332                           
  1333                           
  1334                           ; 4 bytes @ 0x0
  1335  0020                     	ds	1
  1336  0021                     ___lldiv@quotient:
  1337                           
  1338                           ; 4 bytes @ 0x1
  1339  0021                     	ds	1
  1340  0022                     ??_Show_val_LCD:
  1341  0022                     ___awdiv@dividend:	
  1342                           ; 1 bytes @ 0x2
  1343                           
  1344  0022                     ___lwdiv@dividend:	
  1345                           ; 2 bytes @ 0x2
  1346                           
  1347                           
  1348                           ; 2 bytes @ 0x2
  1349  0022                     	ds	1
  1350  0023                     ??___awtoft:
  1351                           
  1352                           ; 1 bytes @ 0x3
  1353  0023                     	ds	1
  1354  0024                     ??___lltoft:
  1355  0024                     ___awdiv@counter:	
  1356                           ; 1 bytes @ 0x4
  1357                           
  1358  0024                     ___lwdiv@counter:	
  1359                           ; 1 bytes @ 0x4
  1360                           
  1361  0024                     __tdiv_to_l_@quot:	
  1362                           ; 1 bytes @ 0x4
  1363                           
  1364                           
  1365                           ; 4 bytes @ 0x4
  1366  0024                     	ds	1
  1367  0025                     ___lldiv@counter:
  1368  0025                     ___awdiv@sign:	
  1369                           ; 1 bytes @ 0x5
  1370                           
  1371  0025                     ___awtoft@sign:	
  1372                           ; 1 bytes @ 0x5
  1373                           
  1374  0025                     ___lltoft@exp:	
  1375                           ; 1 bytes @ 0x5
  1376                           
  1377  0025                     ___lwdiv@quotient:	
  1378                           ; 1 bytes @ 0x5
  1379                           
  1380                           
  1381                           ; 2 bytes @ 0x5
  1382  0025                     	ds	1
  1383  0026                     ?___llmod:
  1384  0026                     ___awdiv@quotient:	
  1385                           ; 4 bytes @ 0x6
  1386                           
  1387  0026                     ___llmod@divisor:	
  1388                           ; 2 bytes @ 0x6
  1389                           
  1390                           
  1391                           ; 4 bytes @ 0x6
  1392  0026                     	ds	2
  1393  0028                     ?___bmul:
  1394  0028                     ___bmul@multiplicand:	
  1395                           ; 1 bytes @ 0x8
  1396                           
  1397  0028                     __tdiv_to_l_@cntr:	
  1398                           ; 1 bytes @ 0x8
  1399                           
  1400  0028                     __div_to_l_@quot:	
  1401                           ; 1 bytes @ 0x8
  1402                           
  1403                           
  1404                           ; 4 bytes @ 0x8
  1405  0028                     	ds	1
  1406  0029                     ??___bmul:
  1407  0029                     __tdiv_to_l_@exp1:	
  1408                           ; 1 bytes @ 0x9
  1409                           
  1410                           
  1411                           ; 1 bytes @ 0x9
  1412  0029                     	ds	1
  1413  002A                     ___bmul@product:
  1414  002A                     ___llmod@dividend:	
  1415                           ; 1 bytes @ 0xA
  1416                           
  1417                           
  1418                           ; 4 bytes @ 0xA
  1419  002A                     	ds	1
  1420  002B                     ___bmul@multiplier:
  1421                           
  1422                           ; 1 bytes @ 0xB
  1423  002B                     	ds	1
  1424  002C                     ?___ftmul:
  1425  002C                     __div_to_l_@cntr:	
  1426                           ; 3 bytes @ 0xC
  1427                           
  1428  002C                     ___ftmul@f1:	
  1429                           ; 1 bytes @ 0xC
  1430                           
  1431                           
  1432                           ; 3 bytes @ 0xC
  1433  002C                     	ds	1
  1434  002D                     __div_to_l_@exp1:
  1435                           
  1436                           ; 1 bytes @ 0xD
  1437  002D                     	ds	1
  1438  002E                     ??___llmod:
  1439                           
  1440                           ; 1 bytes @ 0xE
  1441  002E                     	ds	1
  1442  002F                     ___llmod@counter:
  1443  002F                     ___ftmul@f2:	
  1444                           ; 1 bytes @ 0xF
  1445                           
  1446                           
  1447                           ; 3 bytes @ 0xF
  1448  002F                     	ds	3
  1449  0032                     ??___ftmul:
  1450                           
  1451                           ; 1 bytes @ 0x12
  1452  0032                     	ds	4
  1453  0036                     ___ftmul@exp:
  1454                           
  1455                           ; 1 bytes @ 0x16
  1456  0036                     	ds	1
  1457  0037                     ___ftmul@f3_as_product:
  1458                           
  1459                           ; 3 bytes @ 0x17
  1460  0037                     	ds	3
  1461  003A                     ___ftmul@cntr:
  1462                           
  1463                           ; 1 bytes @ 0x1A
  1464  003A                     	ds	1
  1465  003B                     ___ftmul@sign:
  1466                           
  1467                           ; 1 bytes @ 0x1B
  1468  003B                     	ds	1
  1469  003C                     ?_fround:
  1470  003C                     ?_scale:	
  1471                           ; 3 bytes @ 0x1C
  1472                           
  1473  003C                     ?___ftdiv:	
  1474                           ; 3 bytes @ 0x1C
  1475                           
  1476  003C                     ___ftdiv@f2:	
  1477                           ; 3 bytes @ 0x1C
  1478                           
  1479                           
  1480                           ; 3 bytes @ 0x1C
  1481  003C                     	ds	3
  1482  003F                     ??_fround:
  1483  003F                     ??_scale:	
  1484                           ; 1 bytes @ 0x1F
  1485                           
  1486  003F                     ___ftdiv@f1:	
  1487                           ; 1 bytes @ 0x1F
  1488                           
  1489                           
  1490                           ; 3 bytes @ 0x1F
  1491  003F                     	ds	2
  1492  0041                     _scale$1240:
  1493                           
  1494                           ; 3 bytes @ 0x21
  1495  0041                     	ds	1
  1496  0042                     ??___ftdiv:
  1497                           
  1498                           ; 1 bytes @ 0x22
  1499  0042                     	ds	2
  1500  0044                     scale@scl:
  1501                           
  1502                           ; 1 bytes @ 0x24
  1503  0044                     	ds	1
  1504  0045                     ?___fttol:
  1505  0045                     ___fttol@f1:	
  1506                           ; 4 bytes @ 0x25
  1507                           
  1508  0045                     _fround$1239:	
  1509                           ; 3 bytes @ 0x25
  1510                           
  1511                           
  1512                           ; 3 bytes @ 0x25
  1513  0045                     	ds	1
  1514  0046                     ___ftdiv@cntr:
  1515                           
  1516                           ; 1 bytes @ 0x26
  1517  0046                     	ds	1
  1518  0047                     ___ftdiv@f3:
  1519                           
  1520                           ; 3 bytes @ 0x27
  1521  0047                     	ds	1
  1522  0048                     _fround$1238:
  1523                           
  1524                           ; 3 bytes @ 0x28
  1525  0048                     	ds	1
  1526  0049                     ??___fttol:
  1527                           
  1528                           ; 1 bytes @ 0x29
  1529  0049                     	ds	1
  1530  004A                     ___ftdiv@exp:
  1531                           
  1532                           ; 1 bytes @ 0x2A
  1533  004A                     	ds	1
  1534  004B                     fround@prec:
  1535  004B                     ___ftdiv@sign:	
  1536                           ; 1 bytes @ 0x2B
  1537                           
  1538                           
  1539                           ; 1 bytes @ 0x2B
  1540  004B                     	ds	1
  1541  004C                     ??_Mapeo_M:
  1542  004C                     ?___ftadd:	
  1543                           ; 1 bytes @ 0x2C
  1544                           
  1545  004C                     ___ftadd@f1:	
  1546                           ; 3 bytes @ 0x2C
  1547                           
  1548                           
  1549                           ; 3 bytes @ 0x2C
  1550  004C                     	ds	1
  1551  004D                     ___fttol@sign1:
  1552                           
  1553                           ; 1 bytes @ 0x2D
  1554  004D                     	ds	1
  1555  004E                     ___fttol@lval:
  1556                           
  1557                           ; 4 bytes @ 0x2E
  1558  004E                     	ds	1
  1559  004F                     ___ftadd@f2:
  1560                           
  1561                           ; 3 bytes @ 0x2F
  1562  004F                     	ds	3
  1563  0052                     ??___ftadd:
  1564  0052                     ___fttol@exp1:	
  1565                           ; 1 bytes @ 0x32
  1566                           
  1567                           
  1568                           ; 1 bytes @ 0x32
  1569  0052                     	ds	4
  1570  0056                     ___ftadd@sign:
  1571                           
  1572                           ; 1 bytes @ 0x36
  1573  0056                     	ds	1
  1574  0057                     ___ftadd@exp2:
  1575                           
  1576                           ; 1 bytes @ 0x37
  1577  0057                     	ds	1
  1578  0058                     ___ftadd@exp1:
  1579                           
  1580                           ; 1 bytes @ 0x38
  1581  0058                     	ds	1
  1582  0059                     ?___ftsub:
  1583  0059                     ___ftsub@f2:	
  1584                           ; 3 bytes @ 0x39
  1585                           
  1586                           
  1587                           ; 3 bytes @ 0x39
  1588  0059                     	ds	3
  1589  005C                     ___ftsub@f1:
  1590                           
  1591                           ; 3 bytes @ 0x3C
  1592  005C                     	ds	3
  1593  005F                     ?_sprintf:
  1594  005F                     sprintf@f:	
  1595                           ; 2 bytes @ 0x3F
  1596                           
  1597                           
  1598                           ; 1 bytes @ 0x3F
  1599  005F                     	ds	4
  1600  0063                     ??_sprintf:
  1601                           
  1602                           ; 1 bytes @ 0x43
  1603  0063                     	ds	6
  1604  0069                     ??_ADC_to_string:
  1605                           
  1606                           ; 1 bytes @ 0x49
  1607  0069                     	ds	3
  1608                           
  1609                           	psect	maintext
  1610  1F64                     __pmaintext:	
  1611 ;;
  1612 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1613 ;;
  1614 ;; *************** function _main *****************
  1615 ;; Defined at:
  1616 ;;		line 95 in file "main_maestro.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : B00/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1630 ;;      Params:         0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0
  1633 ;;      Totals:         0       0       0       0       0
  1634 ;;Total ram usage:        0 bytes
  1635 ;; Hardware stack levels required when called:    6
  1636 ;; This function calls:
  1637 ;;		_ADC_to_string
  1638 ;;		_Lcd_Clear
  1639 ;;		_Lcd_Init
  1640 ;;		_Lcd_Set_Cursor
  1641 ;;		_Lcd_Write_String
  1642 ;;		_Mapeo_M
  1643 ;;		_SPI_ADC
  1644 ;;		_SPI_CONT
  1645 ;;		_SPI_TEMP
  1646 ;;		_Show_val_LCD
  1647 ;;		_Show_val_VT
  1648 ;;		_setup
  1649 ;; This function is called by:
  1650 ;;		Startup code after reset
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           
  1655                           ;psect for function _main
  1656  1F64                     _main:
  1657  1F64                     l4246:	
  1658                           ;incstack = 0
  1659                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1660                           
  1661                           
  1662                           ;main_maestro.c: 96:     setup();
  1663  1F64  160A  158A  2650  160A  158A  	fcall	_setup
  1664  1F69                     l4248:
  1665                           
  1666                           ;main_maestro.c: 97:     PORTB = 0;
  1667  1F69  1283               	bcf	3,5	;RP0=0, select bank0
  1668  1F6A  1303               	bcf	3,6	;RP1=0, select bank0
  1669  1F6B  0186               	clrf	6	;volatile
  1670  1F6C                     l4250:
  1671                           
  1672                           ;main_maestro.c: 98:     cont = 0;
  1673  1F6C  01EE               	clrf	_cont
  1674  1F6D                     l4252:
  1675                           
  1676                           ;main_maestro.c: 100:     Lcd_Init();
  1677  1F6D  160A  158A  2719  160A  158A  	fcall	_Lcd_Init
  1678  1F72                     l4254:
  1679                           
  1680                           ;main_maestro.c: 101:     Lcd_Clear();
  1681  1F72  160A  158A  241F  160A  158A  	fcall	_Lcd_Clear
  1682  1F77                     l4256:
  1683                           
  1684                           ;main_maestro.c: 102:     Lcd_Set_Cursor(1,1);
  1685  1F77  01F6               	clrf	Lcd_Set_Cursor@b
  1686  1F78  0AF6               	incf	Lcd_Set_Cursor@b,f
  1687  1F79  3001               	movlw	1
  1688  1F7A  160A  158A  249B  160A  158A  	fcall	_Lcd_Set_Cursor
  1689  1F7F                     l4258:
  1690                           
  1691                           ;main_maestro.c: 103:     Lcd_Write_String("CONT   ADC   TEMP");
  1692  1F7F  3077               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1693  1F80  00F5               	movwf	Lcd_Write_String@a
  1694  1F81  3080               	movlw	128
  1695  1F82  00F6               	movwf	Lcd_Write_String@a+1
  1696  1F83  160A  158A  26D3  160A  158A  	fcall	_Lcd_Write_String
  1697  1F88                     l4260:
  1698                           
  1699                           ;main_maestro.c: 110:         SPI_CONT();
  1700  1F88  160A  158A  25A8  160A  158A  	fcall	_SPI_CONT
  1701  1F8D                     l4262:
  1702                           
  1703                           ;main_maestro.c: 111:         SPI_ADC();
  1704  1F8D  160A  158A  2540  160A  158A  	fcall	_SPI_ADC
  1705  1F92                     l4264:
  1706                           
  1707                           ;main_maestro.c: 112:         SPI_TEMP();
  1708  1F92  160A  158A  2574  160A  158A  	fcall	_SPI_TEMP
  1709  1F97                     l4266:
  1710                           
  1711                           ;main_maestro.c: 113:         Mapeo_M();
  1712  1F97  160A  118A  2335  160A  158A  	fcall	_Mapeo_M
  1713  1F9C                     l4268:
  1714                           
  1715                           ;main_maestro.c: 114:         ADC_to_string();
  1716  1F9C  120A  118A  27BD  160A  158A  	fcall	_ADC_to_string
  1717  1FA1                     l4270:
  1718                           
  1719                           ;main_maestro.c: 115:         Show_val_VT();
  1720  1FA1  160A  118A  2206  160A  158A  	fcall	_Show_val_VT
  1721  1FA6                     l4272:
  1722                           
  1723                           ;main_maestro.c: 116:         Show_val_LCD();
  1724  1FA6  160A  158A  27AF  160A  158A  	fcall	_Show_val_LCD
  1725  1FAB  2F88               	goto	l4260
  1726  1FAC  120A  118A  280C   	ljmp	start
  1727  1FAF                     __end_of_main:
  1728                           
  1729                           	psect	text1
  1730  1E50                     __ptext1:	
  1731 ;; *************** function _setup *****************
  1732 ;; Defined at:
  1733 ;;		line 207 in file "main_maestro.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1747 ;;      Params:         0       0       0       0       0
  1748 ;;      Locals:         0       0       0       0       0
  1749 ;;      Temps:          0       0       0       0       0
  1750 ;;      Totals:         0       0       0       0       0
  1751 ;;Total ram usage:        0 bytes
  1752 ;; Hardware stack levels used:    1
  1753 ;; Hardware stack levels required when called:    2
  1754 ;; This function calls:
  1755 ;;		_USART_Init
  1756 ;;		_USART_Init_BaudRate
  1757 ;;		_initOsc
  1758 ;;		_spiInit
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           
  1765                           ;psect for function _setup
  1766  1E50                     _setup:
  1767  1E50                     l3288:	
  1768                           ;incstack = 0
  1769                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1770                           
  1771                           
  1772                           ;main_maestro.c: 208:     initOsc(0b00000111);
  1773  1E50  3007               	movlw	7
  1774  1E51  160A  118A  21AA  160A  158A  	fcall	_initOsc
  1775  1E56                     l3290:
  1776                           
  1777                           ;main_maestro.c: 209:     ANSEL = 0;
  1778  1E56  1683               	bsf	3,5	;RP0=1, select bank3
  1779  1E57  1703               	bsf	3,6	;RP1=1, select bank3
  1780  1E58  0188               	clrf	8	;volatile
  1781  1E59                     l3292:
  1782                           
  1783                           ;main_maestro.c: 210:     ANSELH = 0;
  1784  1E59  0189               	clrf	9	;volatile
  1785  1E5A                     l3294:
  1786                           
  1787                           ;main_maestro.c: 212:     TRISA = 0;
  1788  1E5A  1683               	bsf	3,5	;RP0=1, select bank1
  1789  1E5B  1303               	bcf	3,6	;RP1=0, select bank1
  1790  1E5C  0185               	clrf	5	;volatile
  1791  1E5D                     l3296:
  1792                           
  1793                           ;main_maestro.c: 213:     TRISB = 0;
  1794  1E5D  0186               	clrf	6	;volatile
  1795  1E5E                     l3298:
  1796                           
  1797                           ;main_maestro.c: 217:     TRISD = 0;
  1798  1E5E  0188               	clrf	8	;volatile
  1799  1E5F                     l3300:
  1800                           
  1801                           ;main_maestro.c: 218:     TRISE = 0;
  1802  1E5F  0189               	clrf	9	;volatile
  1803  1E60                     l3302:
  1804                           
  1805                           ;main_maestro.c: 220:     PORTA = 0;
  1806  1E60  1283               	bcf	3,5	;RP0=0, select bank0
  1807  1E61  1303               	bcf	3,6	;RP1=0, select bank0
  1808  1E62  0185               	clrf	5	;volatile
  1809  1E63                     l3304:
  1810                           
  1811                           ;main_maestro.c: 221:     PORTB = 0;
  1812  1E63  0186               	clrf	6	;volatile
  1813  1E64                     l3306:
  1814                           
  1815                           ;main_maestro.c: 222:     PORTC = 0;
  1816  1E64  0187               	clrf	7	;volatile
  1817  1E65                     l3308:
  1818                           
  1819                           ;main_maestro.c: 223:     PORTD = 0;
  1820  1E65  0188               	clrf	8	;volatile
  1821  1E66                     l3310:
  1822                           
  1823                           ;main_maestro.c: 224:     PORTE = 0;
  1824  1E66  0189               	clrf	9	;volatile
  1825  1E67                     l3312:
  1826                           
  1827                           ;main_maestro.c: 227:     TRISC0 = 0;
  1828  1E67  1683               	bsf	3,5	;RP0=1, select bank1
  1829  1E68  1303               	bcf	3,6	;RP1=0, select bank1
  1830  1E69  1007               	bcf	7,0	;volatile
  1831  1E6A                     l3314:
  1832                           
  1833                           ;main_maestro.c: 228:     PORTCbits.RC0 = 1;
  1834  1E6A  1283               	bcf	3,5	;RP0=0, select bank0
  1835  1E6B  1303               	bcf	3,6	;RP1=0, select bank0
  1836  1E6C  1407               	bsf	7,0	;volatile
  1837  1E6D                     l3316:
  1838                           
  1839                           ;main_maestro.c: 229:     TRISC1 = 0;
  1840  1E6D  1683               	bsf	3,5	;RP0=1, select bank1
  1841  1E6E  1303               	bcf	3,6	;RP1=0, select bank1
  1842  1E6F  1087               	bcf	7,1	;volatile
  1843  1E70                     l3318:
  1844                           
  1845                           ;main_maestro.c: 230:     PORTCbits.RC1 = 1;
  1846  1E70  1283               	bcf	3,5	;RP0=0, select bank0
  1847  1E71  1303               	bcf	3,6	;RP1=0, select bank0
  1848  1E72  1487               	bsf	7,1	;volatile
  1849  1E73                     l3320:
  1850                           
  1851                           ;main_maestro.c: 231:     TRISC2 = 0;
  1852  1E73  1683               	bsf	3,5	;RP0=1, select bank1
  1853  1E74  1303               	bcf	3,6	;RP1=0, select bank1
  1854  1E75  1107               	bcf	7,2	;volatile
  1855  1E76                     l3322:
  1856                           
  1857                           ;main_maestro.c: 232:     PORTCbits.RC2 = 1;
  1858  1E76  1283               	bcf	3,5	;RP0=0, select bank0
  1859  1E77  1303               	bcf	3,6	;RP1=0, select bank0
  1860  1E78  1507               	bsf	7,2	;volatile
  1861  1E79                     l3324:
  1862                           
  1863                           ;main_maestro.c: 235:     USART_Init_BaudRate();
  1864  1E79  160A  158A  23DC  160A  158A  	fcall	_USART_Init_BaudRate
  1865  1E7E                     l3326:
  1866                           
  1867                           ;main_maestro.c: 236:     USART_Init();
  1868  1E7E  160A  158A  23F0  160A  158A  	fcall	_USART_Init
  1869  1E83                     l3328:
  1870                           
  1871                           ;main_maestro.c: 238:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1872  1E83  01F2               	clrf	spiInit@sDataSample
  1873  1E84  01F3               	clrf	spiInit@sClockIdle
  1874  1E85  01F4               	clrf	spiInit@sTransmitEdge
  1875  1E86  3020               	movlw	32
  1876  1E87  160A  158A  2454  160A  158A  	fcall	_spiInit
  1877  1E8C                     l137:
  1878  1E8C  0008               	return
  1879  1E8D                     __end_of_setup:
  1880                           
  1881                           	psect	text2
  1882  1C54                     __ptext2:	
  1883 ;; *************** function _spiInit *****************
  1884 ;; Defined at:
  1885 ;;		line 14 in file "SPI.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  sType           1    wreg     enum E1264
  1888 ;;  sDataSample     1    2[COMMON] enum E1272
  1889 ;;  sClockIdle      1    3[COMMON] enum E1276
  1890 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  sType           1    5[COMMON] enum E1264
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, status,2, status,0
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1902 ;;      Params:         3       0       0       0       0
  1903 ;;      Locals:         1       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0
  1905 ;;      Totals:         4       0       0       0       0
  1906 ;;Total ram usage:        4 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    1
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_setup
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           
  1917                           ;psect for function _spiInit
  1918  1C54                     _spiInit:
  1919                           
  1920                           ;incstack = 0
  1921                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1922                           ;spiInit@sType stored from wreg
  1923  1C54  00F5               	movwf	spiInit@sType
  1924  1C55                     l3224:
  1925                           
  1926                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1927  1C55  1683               	bsf	3,5	;RP0=1, select bank1
  1928  1C56  1303               	bcf	3,6	;RP1=0, select bank1
  1929  1C57  1287               	bcf	7,5	;volatile
  1930                           
  1931                           ;SPI.c: 17:     if(sType & 0b00000100)
  1932  1C58  1D75               	btfss	spiInit@sType,2
  1933  1C59  2C5B               	goto	u4401
  1934  1C5A  2C5C               	goto	u4400
  1935  1C5B                     u4401:
  1936  1C5B  2C60               	goto	l3230
  1937  1C5C                     u4400:
  1938  1C5C                     l3226:
  1939                           
  1940                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1941  1C5C  0874               	movf	spiInit@sTransmitEdge,w
  1942  1C5D  0094               	movwf	20	;volatile
  1943  1C5E                     l3228:
  1944                           
  1945                           ;SPI.c: 20:         TRISC3 = 1;
  1946  1C5E  1587               	bsf	7,3	;volatile
  1947                           
  1948                           ;SPI.c: 21:     }
  1949  1C5F  2C64               	goto	l259
  1950  1C60                     l3230:
  1951                           
  1952                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1953  1C60  0872               	movf	spiInit@sDataSample,w
  1954  1C61  0474               	iorwf	spiInit@sTransmitEdge,w
  1955  1C62  0094               	movwf	20	;volatile
  1956  1C63                     l3232:
  1957                           
  1958                           ;SPI.c: 25:         TRISC3 = 0;
  1959  1C63  1187               	bcf	7,3	;volatile
  1960  1C64                     l259:	
  1961                           ;SPI.c: 26:     }
  1962                           
  1963                           
  1964                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1965  1C64  0875               	movf	spiInit@sType,w
  1966  1C65  0473               	iorwf	spiInit@sClockIdle,w
  1967  1C66  1283               	bcf	3,5	;RP0=0, select bank0
  1968  1C67  1303               	bcf	3,6	;RP1=0, select bank0
  1969  1C68  0094               	movwf	20	;volatile
  1970  1C69                     l260:
  1971  1C69  0008               	return
  1972  1C6A                     __end_of_spiInit:
  1973                           
  1974                           	psect	text3
  1975  11AA                     __ptext3:	
  1976 ;; *************** function _initOsc *****************
  1977 ;; Defined at:
  1978 ;;		line 3 in file "Oscilador.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  IRCF            1    wreg     unsigned char 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  IRCF            1    4[COMMON] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1992 ;;      Params:         0       0       0       0       0
  1993 ;;      Locals:         1       0       0       0       0
  1994 ;;      Temps:          2       0       0       0       0
  1995 ;;      Totals:         3       0       0       0       0
  1996 ;;Total ram usage:        3 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    1
  1999 ;; This function calls:
  2000 ;;		Nothing
  2001 ;; This function is called by:
  2002 ;;		_setup
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           
  2007                           ;psect for function _initOsc
  2008  11AA                     _initOsc:
  2009                           
  2010                           ;incstack = 0
  2011                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  2012                           ;initOsc@IRCF stored from wreg
  2013  11AA  00F4               	movwf	initOsc@IRCF
  2014  11AB                     l3208:
  2015                           
  2016                           ;Oscilador.c: 5:     switch(IRCF){
  2017  11AB  29E2               	goto	l3212
  2018  11AC                     l143:	
  2019                           ;Oscilador.c: 6:         case 0:
  2020                           
  2021                           
  2022                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  2023  11AC  1683               	bsf	3,5	;RP0=1, select bank1
  2024  11AD  1303               	bcf	3,6	;RP1=0, select bank1
  2025  11AE  130F               	bcf	15,6	;volatile
  2026                           
  2027                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  2028  11AF  128F               	bcf	15,5	;volatile
  2029                           
  2030                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  2031  11B0  120F               	bcf	15,4	;volatile
  2032                           
  2033                           ;Oscilador.c: 10:             break;
  2034  11B1  2A04               	goto	l144
  2035  11B2                     l145:	
  2036                           ;Oscilador.c: 11:          case 1:
  2037                           
  2038                           
  2039                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  2040  11B2  1683               	bsf	3,5	;RP0=1, select bank1
  2041  11B3  1303               	bcf	3,6	;RP1=0, select bank1
  2042  11B4  130F               	bcf	15,6	;volatile
  2043                           
  2044                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  2045  11B5  128F               	bcf	15,5	;volatile
  2046                           
  2047                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  2048  11B6  160F               	bsf	15,4	;volatile
  2049                           
  2050                           ;Oscilador.c: 15:             break;
  2051  11B7  2A04               	goto	l144
  2052  11B8                     l146:	
  2053                           ;Oscilador.c: 16:         case 2:
  2054                           
  2055                           
  2056                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  2057  11B8  1683               	bsf	3,5	;RP0=1, select bank1
  2058  11B9  1303               	bcf	3,6	;RP1=0, select bank1
  2059  11BA  130F               	bcf	15,6	;volatile
  2060                           
  2061                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  2062  11BB  168F               	bsf	15,5	;volatile
  2063                           
  2064                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  2065  11BC  120F               	bcf	15,4	;volatile
  2066                           
  2067                           ;Oscilador.c: 20:             break;
  2068  11BD  2A04               	goto	l144
  2069  11BE                     l147:	
  2070                           ;Oscilador.c: 21:         case 3:
  2071                           
  2072                           
  2073                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  2074  11BE  1683               	bsf	3,5	;RP0=1, select bank1
  2075  11BF  1303               	bcf	3,6	;RP1=0, select bank1
  2076  11C0  130F               	bcf	15,6	;volatile
  2077                           
  2078                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  2079  11C1  168F               	bsf	15,5	;volatile
  2080                           
  2081                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  2082  11C2  160F               	bsf	15,4	;volatile
  2083                           
  2084                           ;Oscilador.c: 25:             break;
  2085  11C3  2A04               	goto	l144
  2086  11C4                     l148:	
  2087                           ;Oscilador.c: 26:         case 4:
  2088                           
  2089                           
  2090                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  2091  11C4  1683               	bsf	3,5	;RP0=1, select bank1
  2092  11C5  1303               	bcf	3,6	;RP1=0, select bank1
  2093  11C6  170F               	bsf	15,6	;volatile
  2094                           
  2095                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  2096  11C7  128F               	bcf	15,5	;volatile
  2097                           
  2098                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  2099  11C8  120F               	bcf	15,4	;volatile
  2100                           
  2101                           ;Oscilador.c: 30:             break;
  2102  11C9  2A04               	goto	l144
  2103  11CA                     l149:	
  2104                           ;Oscilador.c: 31:         case 5:
  2105                           
  2106                           
  2107                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  2108  11CA  1683               	bsf	3,5	;RP0=1, select bank1
  2109  11CB  1303               	bcf	3,6	;RP1=0, select bank1
  2110  11CC  170F               	bsf	15,6	;volatile
  2111                           
  2112                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  2113  11CD  128F               	bcf	15,5	;volatile
  2114                           
  2115                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  2116  11CE  160F               	bsf	15,4	;volatile
  2117                           
  2118                           ;Oscilador.c: 35:             break;
  2119  11CF  2A04               	goto	l144
  2120  11D0                     l150:	
  2121                           ;Oscilador.c: 36:         case 6:
  2122                           
  2123                           
  2124                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  2125  11D0  1683               	bsf	3,5	;RP0=1, select bank1
  2126  11D1  1303               	bcf	3,6	;RP1=0, select bank1
  2127  11D2  170F               	bsf	15,6	;volatile
  2128                           
  2129                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  2130  11D3  168F               	bsf	15,5	;volatile
  2131                           
  2132                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  2133  11D4  120F               	bcf	15,4	;volatile
  2134                           
  2135                           ;Oscilador.c: 40:             break;
  2136  11D5  2A04               	goto	l144
  2137  11D6                     l151:	
  2138                           ;Oscilador.c: 41:         case 7:
  2139                           
  2140                           
  2141                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  2142  11D6  1683               	bsf	3,5	;RP0=1, select bank1
  2143  11D7  1303               	bcf	3,6	;RP1=0, select bank1
  2144  11D8  170F               	bsf	15,6	;volatile
  2145                           
  2146                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  2147  11D9  168F               	bsf	15,5	;volatile
  2148                           
  2149                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  2150  11DA  160F               	bsf	15,4	;volatile
  2151                           
  2152                           ;Oscilador.c: 45:             break;
  2153  11DB  2A04               	goto	l144
  2154  11DC                     l152:	
  2155                           ;Oscilador.c: 46:         default:
  2156                           
  2157                           
  2158                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  2159  11DC  1683               	bsf	3,5	;RP0=1, select bank1
  2160  11DD  1303               	bcf	3,6	;RP1=0, select bank1
  2161  11DE  170F               	bsf	15,6	;volatile
  2162                           
  2163                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  2164  11DF  168F               	bsf	15,5	;volatile
  2165                           
  2166                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  2167  11E0  120F               	bcf	15,4	;volatile
  2168                           
  2169                           ;Oscilador.c: 50:             break;
  2170  11E1  2A04               	goto	l144
  2171  11E2                     l3212:
  2172  11E2  0874               	movf	initOsc@IRCF,w
  2173  11E3  00F2               	movwf	??_initOsc
  2174  11E4  01F3               	clrf	??_initOsc+1
  2175                           
  2176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2177                           ; Switch size 1, requested type "simple"
  2178                           ; Number of cases is 1, Range of values is 0 to 0
  2179                           ; switch strategies available:
  2180                           ; Name         Instructions Cycles
  2181                           ; simple_byte            4     3 (average)
  2182                           ; direct_byte           11     8 (fixed)
  2183                           ; jumptable            260     6 (fixed)
  2184                           ;	Chosen strategy is simple_byte
  2185  11E5  0873               	movf	??_initOsc+1,w
  2186  11E6  3A00               	xorlw	0	; case 0
  2187  11E7  1903               	skipnz
  2188  11E8  29EA               	goto	l4328
  2189  11E9  29DC               	goto	l152
  2190  11EA                     l4328:
  2191                           
  2192                           ; Switch size 1, requested type "simple"
  2193                           ; Number of cases is 8, Range of values is 0 to 7
  2194                           ; switch strategies available:
  2195                           ; Name         Instructions Cycles
  2196                           ; simple_byte           25    13 (average)
  2197                           ; direct_byte           32     8 (fixed)
  2198                           ; jumptable            260     6 (fixed)
  2199                           ;	Chosen strategy is simple_byte
  2200  11EA  0872               	movf	??_initOsc,w
  2201  11EB  3A00               	xorlw	0	; case 0
  2202  11EC  1903               	skipnz
  2203  11ED  29AC               	goto	l143
  2204  11EE  3A01               	xorlw	1	; case 1
  2205  11EF  1903               	skipnz
  2206  11F0  29B2               	goto	l145
  2207  11F1  3A03               	xorlw	3	; case 2
  2208  11F2  1903               	skipnz
  2209  11F3  29B8               	goto	l146
  2210  11F4  3A01               	xorlw	1	; case 3
  2211  11F5  1903               	skipnz
  2212  11F6  29BE               	goto	l147
  2213  11F7  3A07               	xorlw	7	; case 4
  2214  11F8  1903               	skipnz
  2215  11F9  29C4               	goto	l148
  2216  11FA  3A01               	xorlw	1	; case 5
  2217  11FB  1903               	skipnz
  2218  11FC  29CA               	goto	l149
  2219  11FD  3A03               	xorlw	3	; case 6
  2220  11FE  1903               	skipnz
  2221  11FF  29D0               	goto	l150
  2222  1200  3A01               	xorlw	1	; case 7
  2223  1201  1903               	skipnz
  2224  1202  29D6               	goto	l151
  2225  1203  29DC               	goto	l152
  2226  1204                     l144:
  2227                           
  2228                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  2229  1204  140F               	bsf	15,0	;volatile
  2230  1205                     l153:
  2231  1205  0008               	return
  2232  1206                     __end_of_initOsc:
  2233                           
  2234                           	psect	text4
  2235  1BDC                     __ptext4:	
  2236 ;; *************** function _USART_Init_BaudRate *****************
  2237 ;; Defined at:
  2238 ;;		line 19 in file "USART.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;		None
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;		None
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2252 ;;      Params:         0       0       0       0       0
  2253 ;;      Locals:         0       0       0       0       0
  2254 ;;      Temps:          0       0       0       0       0
  2255 ;;      Totals:         0       0       0       0       0
  2256 ;;Total ram usage:        0 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    1
  2259 ;; This function calls:
  2260 ;;		Nothing
  2261 ;; This function is called by:
  2262 ;;		_setup
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           
  2267                           ;psect for function _USART_Init_BaudRate
  2268  1BDC                     _USART_Init_BaudRate:
  2269  1BDC                     l3218:	
  2270                           ;incstack = 0
  2271                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  2272                           
  2273                           
  2274                           ;USART.c: 20:     SPBRGH = 0;
  2275  1BDC  1683               	bsf	3,5	;RP0=1, select bank1
  2276  1BDD  1303               	bcf	3,6	;RP1=0, select bank1
  2277  1BDE  019A               	clrf	26	;volatile
  2278  1BDF                     l3220:
  2279                           
  2280                           ;USART.c: 21:     SPBRG = 12;
  2281  1BDF  300C               	movlw	12
  2282  1BE0  0099               	movwf	25	;volatile
  2283  1BE1                     l222:
  2284  1BE1  0008               	return
  2285  1BE2                     __end_of_USART_Init_BaudRate:
  2286                           
  2287                           	psect	text5
  2288  1BF0                     __ptext5:	
  2289 ;; *************** function _USART_Init *****************
  2290 ;; Defined at:
  2291 ;;		line 8 in file "USART.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;		None
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		None
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2305 ;;      Params:         0       0       0       0       0
  2306 ;;      Locals:         0       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0
  2308 ;;      Totals:         0       0       0       0       0
  2309 ;;Total ram usage:        0 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    1
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_setup
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function _USART_Init
  2321  1BF0                     _USART_Init:
  2322  1BF0                     l3222:	
  2323                           ;incstack = 0
  2324                           ; Regs used in _USART_Init: []
  2325                           
  2326                           
  2327                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  2328  1BF0  1283               	bcf	3,5	;RP0=0, select bank0
  2329  1BF1  1303               	bcf	3,6	;RP1=0, select bank0
  2330  1BF2  1798               	bsf	24,7	;volatile
  2331                           
  2332                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  2333  1BF3  1683               	bsf	3,5	;RP0=1, select bank1
  2334  1BF4  1303               	bcf	3,6	;RP1=0, select bank1
  2335  1BF5  1218               	bcf	24,4	;volatile
  2336                           
  2337                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  2338  1BF6  1698               	bsf	24,5	;volatile
  2339  1BF7                     l219:
  2340  1BF7  0008               	return
  2341  1BF8                     __end_of_USART_Init:
  2342                           
  2343                           	psect	text6
  2344  1206                     __ptext6:	
  2345 ;; *************** function _Show_val_VT *****************
  2346 ;; Defined at:
  2347 ;;		line 148 in file "main_maestro.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2361 ;;      Params:         0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0
  2364 ;;      Totals:         0       0       0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    3
  2368 ;; This function calls:
  2369 ;;		_Write_USART
  2370 ;;		_Write_USART_String
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           
  2377                           ;psect for function _Show_val_VT
  2378  1206                     _Show_val_VT:
  2379  1206                     l3376:	
  2380                           ;incstack = 0
  2381                           ; Regs used in _Show_val_VT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2382                           
  2383                           
  2384                           ;main_maestro.c: 149:     Write_USART_String("CONT:  \n");
  2385  1206  3092               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  2386  1207  00F3               	movwf	Write_USART_String@a
  2387  1208  3080               	movlw	128
  2388  1209  00F4               	movwf	Write_USART_String@a+1
  2389  120A  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2390                           
  2391                           ;main_maestro.c: 150:     Write_USART_String(data_cont);
  2392  120F  30C7               	movlw	(low (_data_cont| 0))& (0+255)
  2393  1210  00F3               	movwf	Write_USART_String@a
  2394  1211  3000               	movlw	0
  2395  1212  00F4               	movwf	Write_USART_String@a+1
  2396  1213  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2397                           
  2398                           ;main_maestro.c: 151:     Write_USART_String("  \n");
  2399  1218  309F               	movlw	(low (((STR_8+4)-__stringbase)| (0+32768)))& (0+255)
  2400  1219  00F3               	movwf	Write_USART_String@a
  2401  121A  3080               	movlw	128
  2402  121B  00F4               	movwf	Write_USART_String@a+1
  2403  121C  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2404                           
  2405                           ;main_maestro.c: 152:     Write_USART_String("ADC:  \n");
  2406  1221  309B               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2407  1222  00F3               	movwf	Write_USART_String@a
  2408  1223  3080               	movlw	128
  2409  1224  00F4               	movwf	Write_USART_String@a+1
  2410  1225  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2411                           
  2412                           ;main_maestro.c: 153:     Write_USART_String(data_ADC);
  2413  122A  30BF               	movlw	(low (_data_ADC| 0))& (0+255)
  2414  122B  00F3               	movwf	Write_USART_String@a
  2415  122C  3000               	movlw	0
  2416  122D  00F4               	movwf	Write_USART_String@a+1
  2417  122E  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2418                           
  2419                           ;main_maestro.c: 154:     Write_USART_String("  \n");
  2420  1233  309F               	movlw	(low (((STR_8+4)-__stringbase)| (0+32768)))& (0+255)
  2421  1234  00F3               	movwf	Write_USART_String@a
  2422  1235  3080               	movlw	128
  2423  1236  00F4               	movwf	Write_USART_String@a+1
  2424  1237  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2425                           
  2426                           ;main_maestro.c: 155:     Write_USART_String("TEMP:  \n");
  2427  123C  3089               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  2428  123D  00F3               	movwf	Write_USART_String@a
  2429  123E  3080               	movlw	128
  2430  123F  00F4               	movwf	Write_USART_String@a+1
  2431  1240  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2432                           
  2433                           ;main_maestro.c: 156:     Write_USART_String(data_TEMP);
  2434  1245  30B7               	movlw	(low (_data_TEMP| 0))& (0+255)
  2435  1246  00F3               	movwf	Write_USART_String@a
  2436  1247  3000               	movlw	0
  2437  1248  00F4               	movwf	Write_USART_String@a+1
  2438  1249  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2439                           
  2440                           ;main_maestro.c: 157:     Write_USART_String("°C  \n");
  2441  124E  30AA               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  2442  124F  00F3               	movwf	Write_USART_String@a
  2443  1250  3080               	movlw	128
  2444  1251  00F4               	movwf	Write_USART_String@a+1
  2445  1252  160A  118A  20D0  160A  118A  	fcall	_Write_USART_String
  2446  1257                     l3378:
  2447                           
  2448                           ;main_maestro.c: 158:     Write_USART(13);
  2449  1257  300D               	movlw	13
  2450  1258  160A  158A  2413  160A  118A  	fcall	_Write_USART
  2451  125D                     l3380:
  2452                           
  2453                           ;main_maestro.c: 159:     Write_USART(10);
  2454  125D  300A               	movlw	10
  2455  125E  160A  158A  2413  160A  118A  	fcall	_Write_USART
  2456  1263                     l125:
  2457  1263  0008               	return
  2458  1264                     __end_of_Show_val_VT:
  2459                           
  2460                           	psect	text7
  2461  10D0                     __ptext7:	
  2462 ;; *************** function _Write_USART_String *****************
  2463 ;; Defined at:
  2464 ;;		line 37 in file "USART.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  a               2    3[COMMON] PTR unsigned char 
  2467 ;;		 -> STR_11(6), STR_10(9), STR_9(4), STR_8(8), 
  2468 ;;		 -> STR_7(4), STR_6(9), data_TEMP(8), data_ADC(8), 
  2469 ;;		 -> data_cont(8), 
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;  i               1    6[COMMON] unsigned char 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2481 ;;      Params:         2       0       0       0       0
  2482 ;;      Locals:         1       0       0       0       0
  2483 ;;      Temps:          1       0       0       0       0
  2484 ;;      Totals:         4       0       0       0       0
  2485 ;;Total ram usage:        4 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    2
  2488 ;; This function calls:
  2489 ;;		_Write_USART
  2490 ;; This function is called by:
  2491 ;;		_Show_val_VT
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           
  2496                           ;psect for function _Write_USART_String
  2497  10D0                     _Write_USART_String:
  2498  10D0                     l3192:	
  2499                           ;incstack = 0
  2500                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2501                           
  2502                           
  2503                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  2504  10D0  01F6               	clrf	Write_USART_String@i
  2505  10D1  28E7               	goto	l3198
  2506  10D2                     l3194:
  2507                           
  2508                           ;USART.c: 40:         Write_USART(a[i]);
  2509  10D2  0876               	movf	Write_USART_String@i,w
  2510  10D3  0773               	addwf	Write_USART_String@a,w
  2511  10D4  0084               	movwf	4
  2512  10D5  0874               	movf	Write_USART_String@a+1,w
  2513  10D6  1803               	skipnc
  2514  10D7  0A74               	incf	Write_USART_String@a+1,w
  2515  10D8  00FF               	movwf	btemp+1
  2516  10D9  160A  118A  2000  160A  118A  	fcall	stringtab
  2517  10DE  160A  158A  2413  160A  118A  	fcall	_Write_USART
  2518  10E3                     l3196:
  2519                           
  2520                           ;USART.c: 41:     }
  2521  10E3  3001               	movlw	1
  2522  10E4  00F5               	movwf	??_Write_USART_String
  2523  10E5  0875               	movf	??_Write_USART_String,w
  2524  10E6  07F6               	addwf	Write_USART_String@i,f
  2525  10E7                     l3198:
  2526  10E7  0876               	movf	Write_USART_String@i,w
  2527  10E8  0773               	addwf	Write_USART_String@a,w
  2528  10E9  0084               	movwf	4
  2529  10EA  0874               	movf	Write_USART_String@a+1,w
  2530  10EB  1803               	skipnc
  2531  10EC  0A74               	incf	Write_USART_String@a+1,w
  2532  10ED  1283               	bcf	3,5	;RP0=0, select bank0
  2533  10EE  1303               	bcf	3,6	;RP1=0, select bank0
  2534  10EF  00FF               	movwf	btemp+1
  2535  10F0  160A  118A  2000  160A  118A  	fcall	stringtab
  2536  10F5  3A00               	xorlw	0
  2537  10F6  1D03               	skipz
  2538  10F7  28F9               	goto	u4391
  2539  10F8  28FA               	goto	u4390
  2540  10F9                     u4391:
  2541  10F9  28D2               	goto	l3194
  2542  10FA                     u4390:
  2543  10FA                     l237:
  2544  10FA  0008               	return
  2545  10FB                     __end_of_Write_USART_String:
  2546                           
  2547                           	psect	text8
  2548  1C13                     __ptext8:	
  2549 ;; *************** function _Write_USART *****************
  2550 ;; Defined at:
  2551 ;;		line 33 in file "USART.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  a               1    wreg     unsigned char 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  a               1    2[COMMON] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2565 ;;      Params:         0       0       0       0       0
  2566 ;;      Locals:         1       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0
  2568 ;;      Totals:         1       0       0       0       0
  2569 ;;Total ram usage:        1 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    1
  2572 ;; This function calls:
  2573 ;;		Nothing
  2574 ;; This function is called by:
  2575 ;;		_Show_val_VT
  2576 ;;		_Write_USART_String
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           
  2581                           ;psect for function _Write_USART
  2582  1C13                     _Write_USART:
  2583                           
  2584                           ;incstack = 0
  2585                           ; Regs used in _Write_USART: [wreg]
  2586                           ;Write_USART@a stored from wreg
  2587  1C13  00F2               	movwf	Write_USART@a
  2588  1C14                     l2530:
  2589  1C14                     l228:	
  2590                           ;USART.c: 34:     while(!TRMT);
  2591                           
  2592  1C14  1683               	bsf	3,5	;RP0=1, select bank1
  2593  1C15  1303               	bcf	3,6	;RP1=0, select bank1
  2594  1C16  1C98               	btfss	24,1	;volatile
  2595  1C17  2C19               	goto	u3101
  2596  1C18  2C1A               	goto	u3100
  2597  1C19                     u3101:
  2598  1C19  2C14               	goto	l228
  2599  1C1A                     u3100:
  2600  1C1A                     l2532:
  2601                           
  2602                           ;USART.c: 35:     TXREG=a;
  2603  1C1A  0872               	movf	Write_USART@a,w
  2604  1C1B  1283               	bcf	3,5	;RP0=0, select bank0
  2605  1C1C  1303               	bcf	3,6	;RP1=0, select bank0
  2606  1C1D  0099               	movwf	25	;volatile
  2607  1C1E                     l231:
  2608  1C1E  0008               	return
  2609  1C1F                     __end_of_Write_USART:
  2610                           
  2611                           	psect	text9
  2612  1FAF                     __ptext9:	
  2613 ;; *************** function _Show_val_LCD *****************
  2614 ;; Defined at:
  2615 ;;		line 137 in file "main_maestro.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2629 ;;      Params:         0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0
  2631 ;;      Temps:          0       1       0       0       0
  2632 ;;      Totals:         0       1       0       0       0
  2633 ;;Total ram usage:        1 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    4
  2636 ;; This function calls:
  2637 ;;		_Lcd_Set_Cursor
  2638 ;;		_Lcd_Write_String
  2639 ;; This function is called by:
  2640 ;;		_main
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           
  2645                           ;psect for function _Show_val_LCD
  2646  1FAF                     _Show_val_LCD:
  2647  1FAF                     l4234:	
  2648                           ;incstack = 0
  2649                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2650                           
  2651                           
  2652                           ;main_maestro.c: 138:     Lcd_Set_Cursor(2,1);
  2653  1FAF  01F6               	clrf	Lcd_Set_Cursor@b
  2654  1FB0  0AF6               	incf	Lcd_Set_Cursor@b,f
  2655  1FB1  3002               	movlw	2
  2656  1FB2  160A  158A  249B  160A  158A  	fcall	_Lcd_Set_Cursor
  2657  1FB7                     l4236:
  2658                           
  2659                           ;main_maestro.c: 139:     Lcd_Write_String(data_cont);
  2660  1FB7  30C7               	movlw	(low (_data_cont| 0))& (0+255)
  2661  1FB8  00F5               	movwf	Lcd_Write_String@a
  2662  1FB9  3000               	movlw	0
  2663  1FBA  00F6               	movwf	Lcd_Write_String@a+1
  2664  1FBB  160A  158A  26D3  160A  158A  	fcall	_Lcd_Write_String
  2665  1FC0                     l4238:
  2666                           
  2667                           ;main_maestro.c: 140:     Lcd_Set_Cursor(2,7);
  2668  1FC0  3007               	movlw	7
  2669  1FC1  1283               	bcf	3,5	;RP0=0, select bank0
  2670  1FC2  1303               	bcf	3,6	;RP1=0, select bank0
  2671  1FC3  00A2               	movwf	??_Show_val_LCD
  2672  1FC4  0822               	movf	??_Show_val_LCD,w
  2673  1FC5  00F6               	movwf	Lcd_Set_Cursor@b
  2674  1FC6  3002               	movlw	2
  2675  1FC7  160A  158A  249B  160A  158A  	fcall	_Lcd_Set_Cursor
  2676                           
  2677                           ;main_maestro.c: 141:     Lcd_Write_String(data_ADC);
  2678  1FCC  30BF               	movlw	(low (_data_ADC| 0))& (0+255)
  2679  1FCD  00F5               	movwf	Lcd_Write_String@a
  2680  1FCE  3000               	movlw	0
  2681  1FCF  00F6               	movwf	Lcd_Write_String@a+1
  2682  1FD0  160A  158A  26D3  160A  158A  	fcall	_Lcd_Write_String
  2683  1FD5                     l4240:
  2684                           
  2685                           ;main_maestro.c: 142:     Lcd_Set_Cursor(2,16);
  2686  1FD5  3010               	movlw	16
  2687  1FD6  1283               	bcf	3,5	;RP0=0, select bank0
  2688  1FD7  1303               	bcf	3,6	;RP1=0, select bank0
  2689  1FD8  00A2               	movwf	??_Show_val_LCD
  2690  1FD9  0822               	movf	??_Show_val_LCD,w
  2691  1FDA  00F6               	movwf	Lcd_Set_Cursor@b
  2692  1FDB  3002               	movlw	2
  2693  1FDC  160A  158A  249B  160A  158A  	fcall	_Lcd_Set_Cursor
  2694  1FE1                     l4242:
  2695                           
  2696                           ;main_maestro.c: 143:     Lcd_Write_String("C");
  2697  1FE1  30BA               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  2698  1FE2  00F5               	movwf	Lcd_Write_String@a
  2699  1FE3  3080               	movlw	128
  2700  1FE4  00F6               	movwf	Lcd_Write_String@a+1
  2701  1FE5  160A  158A  26D3  160A  158A  	fcall	_Lcd_Write_String
  2702                           
  2703                           ;main_maestro.c: 144:     Lcd_Set_Cursor(2,14);
  2704  1FEA  300E               	movlw	14
  2705  1FEB  1283               	bcf	3,5	;RP0=0, select bank0
  2706  1FEC  1303               	bcf	3,6	;RP1=0, select bank0
  2707  1FED  00A2               	movwf	??_Show_val_LCD
  2708  1FEE  0822               	movf	??_Show_val_LCD,w
  2709  1FEF  00F6               	movwf	Lcd_Set_Cursor@b
  2710  1FF0  3002               	movlw	2
  2711  1FF1  160A  158A  249B  160A  158A  	fcall	_Lcd_Set_Cursor
  2712  1FF6                     l4244:
  2713                           
  2714                           ;main_maestro.c: 145:     Lcd_Write_String(data_TEMP);
  2715  1FF6  30B7               	movlw	(low (_data_TEMP| 0))& (0+255)
  2716  1FF7  00F5               	movwf	Lcd_Write_String@a
  2717  1FF8  3000               	movlw	0
  2718  1FF9  00F6               	movwf	Lcd_Write_String@a+1
  2719  1FFA  160A  158A  26D3  160A  158A  	fcall	_Lcd_Write_String
  2720  1FFF                     l122:
  2721  1FFF  0008               	return
  2722  2000                     __end_of_Show_val_LCD:
  2723                           
  2724                           	psect	text10
  2725  1ED3                     __ptext10:	
  2726 ;; *************** function _Lcd_Write_String *****************
  2727 ;; Defined at:
  2728 ;;		line 70 in file "LCD.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  a               2    5[COMMON] PTR unsigned char 
  2731 ;;		 -> STR_5(2), data_TEMP(8), data_ADC(8), data_cont(8), 
  2732 ;;		 -> STR_1(18), 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  i               2    0[BANK0 ] int 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2744 ;;      Params:         2       0       0       0       0
  2745 ;;      Locals:         0       2       0       0       0
  2746 ;;      Temps:          3       0       0       0       0
  2747 ;;      Totals:         5       2       0       0       0
  2748 ;;Total ram usage:        7 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    3
  2751 ;; This function calls:
  2752 ;;		_Lcd_Write_Char
  2753 ;; This function is called by:
  2754 ;;		_main
  2755 ;;		_Show_val_LCD
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           
  2760                           ;psect for function _Lcd_Write_String
  2761  1ED3                     _Lcd_Write_String:
  2762  1ED3                     l3864:	
  2763                           ;incstack = 0
  2764                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2765                           
  2766                           
  2767                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2768  1ED3  1283               	bcf	3,5	;RP0=0, select bank0
  2769  1ED4  1303               	bcf	3,6	;RP1=0, select bank0
  2770  1ED5  01A0               	clrf	Lcd_Write_String@i
  2771  1ED6  01A1               	clrf	Lcd_Write_String@i+1
  2772  1ED7  2EFC               	goto	l3870
  2773  1ED8                     l3866:
  2774                           
  2775                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2776  1ED8  0820               	movf	Lcd_Write_String@i,w
  2777  1ED9  0775               	addwf	Lcd_Write_String@a,w
  2778  1EDA  00F8               	movwf	??_Lcd_Write_String+1
  2779  1EDB  0876               	movf	Lcd_Write_String@a+1,w
  2780  1EDC  00F7               	movwf	??_Lcd_Write_String
  2781  1EDD  1803               	skipnc
  2782  1EDE  0AF7               	incf	??_Lcd_Write_String,f
  2783  1EDF  1FA0               	btfss	Lcd_Write_String@i,7
  2784  1EE0  2EE2               	goto	u5450
  2785  1EE1  03F7               	decf	??_Lcd_Write_String,f
  2786  1EE2                     u5450:
  2787  1EE2  0877               	movf	??_Lcd_Write_String,w
  2788  1EE3  00F9               	movwf	??_Lcd_Write_String+2
  2789  1EE4  0879               	movf	??_Lcd_Write_String+2,w
  2790  1EE5  1283               	bcf	3,5	;RP0=0, select bank0
  2791  1EE6  1303               	bcf	3,6	;RP1=0, select bank0
  2792  1EE7  00FF               	movwf	btemp+1
  2793  1EE8  0878               	movf	??_Lcd_Write_String+1,w
  2794  1EE9  0084               	movwf	4
  2795  1EEA  160A  118A  2000  160A  158A  	fcall	stringtab
  2796  1EEF  160A  158A  243E  160A  158A  	fcall	_Lcd_Write_Char
  2797  1EF4                     l3868:
  2798  1EF4  3001               	movlw	1
  2799  1EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2800  1EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2801  1EF7  07A0               	addwf	Lcd_Write_String@i,f
  2802  1EF8  1803               	skipnc
  2803  1EF9  0AA1               	incf	Lcd_Write_String@i+1,f
  2804  1EFA  3000               	movlw	0
  2805  1EFB  07A1               	addwf	Lcd_Write_String@i+1,f
  2806  1EFC                     l3870:
  2807  1EFC  0820               	movf	Lcd_Write_String@i,w
  2808  1EFD  0775               	addwf	Lcd_Write_String@a,w
  2809  1EFE  00F8               	movwf	??_Lcd_Write_String+1
  2810  1EFF  0876               	movf	Lcd_Write_String@a+1,w
  2811  1F00  00F7               	movwf	??_Lcd_Write_String
  2812  1F01  1803               	skipnc
  2813  1F02  0AF7               	incf	??_Lcd_Write_String,f
  2814  1F03  1FA0               	btfss	Lcd_Write_String@i,7
  2815  1F04  2F06               	goto	u5460
  2816  1F05  03F7               	decf	??_Lcd_Write_String,f
  2817  1F06                     u5460:
  2818  1F06  0877               	movf	??_Lcd_Write_String,w
  2819  1F07  00F9               	movwf	??_Lcd_Write_String+2
  2820  1F08  0879               	movf	??_Lcd_Write_String+2,w
  2821  1F09  1283               	bcf	3,5	;RP0=0, select bank0
  2822  1F0A  1303               	bcf	3,6	;RP1=0, select bank0
  2823  1F0B  00FF               	movwf	btemp+1
  2824  1F0C  0878               	movf	??_Lcd_Write_String+1,w
  2825  1F0D  0084               	movwf	4
  2826  1F0E  160A  118A  2000  160A  158A  	fcall	stringtab
  2827  1F13  3A00               	xorlw	0
  2828  1F14  1D03               	skipz
  2829  1F15  2F17               	goto	u5471
  2830  1F16  2F18               	goto	u5470
  2831  1F17                     u5471:
  2832  1F17  2ED8               	goto	l3866
  2833  1F18                     u5470:
  2834  1F18                     l190:
  2835  1F18  0008               	return
  2836  1F19                     __end_of_Lcd_Write_String:
  2837                           
  2838                           	psect	text11
  2839  1C3E                     __ptext11:	
  2840 ;; *************** function _Lcd_Write_Char *****************
  2841 ;; Defined at:
  2842 ;;		line 61 in file "LCD.c"
  2843 ;; Parameters:    Size  Location     Type
  2844 ;;  a               1    wreg     unsigned char 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  a               1    4[COMMON] unsigned char 
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  1    wreg      void 
  2849 ;; Registers used:
  2850 ;;		wreg, status,2, status,0, pclath, cstack
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2856 ;;      Params:         0       0       0       0       0
  2857 ;;      Locals:         1       0       0       0       0
  2858 ;;      Temps:          1       0       0       0       0
  2859 ;;      Totals:         2       0       0       0       0
  2860 ;;Total ram usage:        2 bytes
  2861 ;; Hardware stack levels used:    1
  2862 ;; Hardware stack levels required when called:    2
  2863 ;; This function calls:
  2864 ;;		_Lcd_Port
  2865 ;; This function is called by:
  2866 ;;		_Lcd_Write_String
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           
  2871                           ;psect for function _Lcd_Write_Char
  2872  1C3E                     _Lcd_Write_Char:
  2873                           
  2874                           ;incstack = 0
  2875                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2876                           ;Lcd_Write_Char@a stored from wreg
  2877  1C3E  00F4               	movwf	Lcd_Write_Char@a
  2878  1C3F                     l3666:
  2879                           
  2880                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2881  1C3F  1283               	bcf	3,5	;RP0=0, select bank0
  2882  1C40  1303               	bcf	3,6	;RP1=0, select bank0
  2883  1C41  1409               	bsf	9,0	;volatile
  2884  1C42                     l3668:
  2885                           
  2886                           ;LCD.c: 63:    Lcd_Port(a);
  2887  1C42  0874               	movf	Lcd_Write_Char@a,w
  2888  1C43  160A  158A  23D0  160A  158A  	fcall	_Lcd_Port
  2889  1C48                     l3670:
  2890                           
  2891                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2892  1C48  1283               	bcf	3,5	;RP0=0, select bank0
  2893  1C49  1303               	bcf	3,6	;RP1=0, select bank0
  2894  1C4A  1509               	bsf	9,2	;volatile
  2895  1C4B                     l3672:
  2896                           
  2897                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2898  1C4B  301A               	movlw	26
  2899  1C4C  00F3               	movwf	??_Lcd_Write_Char
  2900  1C4D                     u6117:
  2901  1C4D  0BF3               	decfsz	??_Lcd_Write_Char,f
  2902  1C4E  2C4D               	goto	u6117
  2903  1C4F  0000               	nop
  2904  1C50                     l3674:
  2905                           
  2906                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2907  1C50  1283               	bcf	3,5	;RP0=0, select bank0
  2908  1C51  1303               	bcf	3,6	;RP1=0, select bank0
  2909  1C52  1109               	bcf	9,2	;volatile
  2910  1C53                     l184:
  2911  1C53  0008               	return
  2912  1C54                     __end_of_Lcd_Write_Char:
  2913                           
  2914                           	psect	text12
  2915  1C9B                     __ptext12:	
  2916 ;; *************** function _Lcd_Set_Cursor *****************
  2917 ;; Defined at:
  2918 ;;		line 48 in file "LCD.c"
  2919 ;; Parameters:    Size  Location     Type
  2920 ;;  a               1    wreg     unsigned char 
  2921 ;;  b               1    6[COMMON] unsigned char 
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;  a               1    8[COMMON] unsigned char 
  2924 ;;  temp            1    9[COMMON] unsigned char 
  2925 ;; Return value:  Size  Location     Type
  2926 ;;                  1    wreg      void 
  2927 ;; Registers used:
  2928 ;;		wreg, status,2, status,0, pclath, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2934 ;;      Params:         1       0       0       0       0
  2935 ;;      Locals:         2       0       0       0       0
  2936 ;;      Temps:          1       0       0       0       0
  2937 ;;      Totals:         4       0       0       0       0
  2938 ;;Total ram usage:        4 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:    3
  2941 ;; This function calls:
  2942 ;;		_Lcd_Cmd
  2943 ;; This function is called by:
  2944 ;;		_main
  2945 ;;		_Show_val_LCD
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           
  2950                           ;psect for function _Lcd_Set_Cursor
  2951  1C9B                     _Lcd_Set_Cursor:
  2952                           
  2953                           ;incstack = 0
  2954                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2955                           ;Lcd_Set_Cursor@a stored from wreg
  2956  1C9B  00F8               	movwf	Lcd_Set_Cursor@a
  2957  1C9C                     l3852:
  2958                           
  2959                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2960  1C9C  0378               	decf	Lcd_Set_Cursor@a,w
  2961  1C9D  1D03               	btfss	3,2
  2962  1C9E  2CA0               	goto	u5431
  2963  1C9F  2CA1               	goto	u5430
  2964  1CA0                     u5431:
  2965  1CA0  2CAD               	goto	l3858
  2966  1CA1                     u5430:
  2967  1CA1                     l3854:
  2968                           
  2969                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2970  1CA1  0876               	movf	Lcd_Set_Cursor@b,w
  2971  1CA2  3E7F               	addlw	127
  2972  1CA3  00F7               	movwf	??_Lcd_Set_Cursor
  2973  1CA4  0877               	movf	??_Lcd_Set_Cursor,w
  2974  1CA5  00F9               	movwf	Lcd_Set_Cursor@temp
  2975  1CA6                     l3856:
  2976                           
  2977                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2978  1CA6  0879               	movf	Lcd_Set_Cursor@temp,w
  2979  1CA7  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  2980                           
  2981                           ;LCD.c: 53:  }
  2982  1CAC  2CBE               	goto	l181
  2983  1CAD                     l3858:
  2984  1CAD  3002               	movlw	2
  2985  1CAE  0678               	xorwf	Lcd_Set_Cursor@a,w
  2986  1CAF  1D03               	btfss	3,2
  2987  1CB0  2CB2               	goto	u5441
  2988  1CB1  2CB3               	goto	u5440
  2989  1CB2                     u5441:
  2990  1CB2  2CBE               	goto	l181
  2991  1CB3                     u5440:
  2992  1CB3                     l3860:
  2993                           
  2994                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2995  1CB3  0876               	movf	Lcd_Set_Cursor@b,w
  2996  1CB4  3EBF               	addlw	191
  2997  1CB5  00F7               	movwf	??_Lcd_Set_Cursor
  2998  1CB6  0877               	movf	??_Lcd_Set_Cursor,w
  2999  1CB7  00F9               	movwf	Lcd_Set_Cursor@temp
  3000  1CB8                     l3862:
  3001                           
  3002                           ;LCD.c: 56:   Lcd_Cmd(temp);
  3003  1CB8  0879               	movf	Lcd_Set_Cursor@temp,w
  3004  1CB9  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  3005  1CBE                     l181:
  3006  1CBE  0008               	return
  3007  1CBF                     __end_of_Lcd_Set_Cursor:
  3008                           
  3009                           	psect	text13
  3010  1D74                     __ptext13:	
  3011 ;; *************** function _SPI_TEMP *****************
  3012 ;; Defined at:
  3013 ;;		line 189 in file "main_maestro.c"
  3014 ;; Parameters:    Size  Location     Type
  3015 ;;		None
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;		None
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      void 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0, pclath, cstack
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3027 ;;      Params:         0       0       0       0       0
  3028 ;;      Locals:         0       0       0       0       0
  3029 ;;      Temps:          3       0       0       0       0
  3030 ;;      Totals:         3       0       0       0       0
  3031 ;;Total ram usage:        3 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    3
  3034 ;; This function calls:
  3035 ;;		_spiRead
  3036 ;;		_spiWrite
  3037 ;; This function is called by:
  3038 ;;		_main
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           
  3043                           ;psect for function _SPI_TEMP
  3044  1D74                     _SPI_TEMP:
  3045  1D74                     l3362:	
  3046                           ;incstack = 0
  3047                           ; Regs used in _SPI_TEMP: [wreg+status,2+status,0+pclath+cstack]
  3048                           
  3049                           
  3050                           ;main_maestro.c: 190:     RC1 = 0;
  3051  1D74  1283               	bcf	3,5	;RP0=0, select bank0
  3052  1D75  1303               	bcf	3,6	;RP1=0, select bank0
  3053  1D76  1087               	bcf	7,1	;volatile
  3054  1D77                     l3364:
  3055                           
  3056                           ;main_maestro.c: 191:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3057  1D77  3003               	movlw	3
  3058  1D78  00F4               	movwf	??_SPI_TEMP+1
  3059  1D79  3097               	movlw	151
  3060  1D7A  00F3               	movwf	??_SPI_TEMP
  3061  1D7B                     u6127:
  3062  1D7B  0BF3               	decfsz	??_SPI_TEMP,f
  3063  1D7C  2D7B               	goto	u6127
  3064  1D7D  0BF4               	decfsz	??_SPI_TEMP+1,f
  3065  1D7E  2D7B               	goto	u6127
  3066  1D7F  2D80               	nop2
  3067  1D80                     l3366:
  3068                           
  3069                           ;main_maestro.c: 193:    spiWrite(hola_esclavo);
  3070  1D80  3000               	movlw	0
  3071  1D81  160A  158A  23D6  160A  158A  	fcall	_spiWrite
  3072  1D86                     l3368:
  3073                           
  3074                           ;main_maestro.c: 194:    val_TEMP = spiRead();
  3075  1D86  160A  158A  2400  160A  158A  	fcall	_spiRead
  3076  1D8B  00F3               	movwf	??_SPI_TEMP
  3077  1D8C  0873               	movf	??_SPI_TEMP,w
  3078  1D8D  00FA               	movwf	_val_TEMP
  3079                           
  3080                           ;main_maestro.c: 196:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3081  1D8E  3003               	movlw	3
  3082  1D8F  00F4               	movwf	??_SPI_TEMP+1
  3083  1D90  3097               	movlw	151
  3084  1D91  00F3               	movwf	??_SPI_TEMP
  3085  1D92                     u6137:
  3086  1D92  0BF3               	decfsz	??_SPI_TEMP,f
  3087  1D93  2D92               	goto	u6137
  3088  1D94  0BF4               	decfsz	??_SPI_TEMP+1,f
  3089  1D95  2D92               	goto	u6137
  3090  1D96  2D97               	nop2
  3091  1D97                     l3370:
  3092                           
  3093                           ;main_maestro.c: 197:    RC1 = 1;
  3094  1D97  1283               	bcf	3,5	;RP0=0, select bank0
  3095  1D98  1303               	bcf	3,6	;RP1=0, select bank0
  3096  1D99  1487               	bsf	7,1	;volatile
  3097                           
  3098                           ;main_maestro.c: 199:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3099  1D9A  3002               	movlw	2
  3100  1D9B  00F5               	movwf	??_SPI_TEMP+2
  3101  1D9C  3004               	movlw	4
  3102  1D9D  00F4               	movwf	??_SPI_TEMP+1
  3103  1D9E  30BA               	movlw	186
  3104  1D9F  00F3               	movwf	??_SPI_TEMP
  3105  1DA0                     u6147:
  3106  1DA0  0BF3               	decfsz	??_SPI_TEMP,f
  3107  1DA1  2DA0               	goto	u6147
  3108  1DA2  0BF4               	decfsz	??_SPI_TEMP+1,f
  3109  1DA3  2DA0               	goto	u6147
  3110  1DA4  0BF5               	decfsz	??_SPI_TEMP+2,f
  3111  1DA5  2DA0               	goto	u6147
  3112  1DA6  0000               	nop
  3113  1DA7                     l134:
  3114  1DA7  0008               	return
  3115  1DA8                     __end_of_SPI_TEMP:
  3116                           
  3117                           	psect	text14
  3118  1DA8                     __ptext14:	
  3119 ;; *************** function _SPI_CONT *****************
  3120 ;; Defined at:
  3121 ;;		line 164 in file "main_maestro.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, pclath, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3135 ;;      Params:         0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0
  3137 ;;      Temps:          3       0       0       0       0
  3138 ;;      Totals:         3       0       0       0       0
  3139 ;;Total ram usage:        3 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    3
  3142 ;; This function calls:
  3143 ;;		_spiRead
  3144 ;;		_spiWrite
  3145 ;; This function is called by:
  3146 ;;		_main
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           
  3151                           ;psect for function _SPI_CONT
  3152  1DA8                     _SPI_CONT:
  3153  1DA8                     l3342:	
  3154                           ;incstack = 0
  3155                           ; Regs used in _SPI_CONT: [wreg+status,2+status,0+pclath+cstack]
  3156                           
  3157                           
  3158                           ;main_maestro.c: 165:     RC2 = 0;
  3159  1DA8  1283               	bcf	3,5	;RP0=0, select bank0
  3160  1DA9  1303               	bcf	3,6	;RP1=0, select bank0
  3161  1DAA  1107               	bcf	7,2	;volatile
  3162  1DAB                     l3344:
  3163                           
  3164                           ;main_maestro.c: 166:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3165  1DAB  3003               	movlw	3
  3166  1DAC  00F4               	movwf	??_SPI_CONT+1
  3167  1DAD  3097               	movlw	151
  3168  1DAE  00F3               	movwf	??_SPI_CONT
  3169  1DAF                     u6157:
  3170  1DAF  0BF3               	decfsz	??_SPI_CONT,f
  3171  1DB0  2DAF               	goto	u6157
  3172  1DB1  0BF4               	decfsz	??_SPI_CONT+1,f
  3173  1DB2  2DAF               	goto	u6157
  3174  1DB3  2DB4               	nop2
  3175  1DB4                     l3346:
  3176                           
  3177                           ;main_maestro.c: 168:    spiWrite(hola_esclavo);
  3178  1DB4  3000               	movlw	0
  3179  1DB5  160A  158A  23D6  160A  158A  	fcall	_spiWrite
  3180  1DBA                     l3348:
  3181                           
  3182                           ;main_maestro.c: 169:    cont = spiRead();
  3183  1DBA  160A  158A  2400  160A  158A  	fcall	_spiRead
  3184  1DBF  00F3               	movwf	??_SPI_CONT
  3185  1DC0  0873               	movf	??_SPI_CONT,w
  3186  1DC1  1283               	bcf	3,5	;RP0=0, select bank0
  3187  1DC2  1303               	bcf	3,6	;RP1=0, select bank0
  3188  1DC3  00EE               	movwf	_cont
  3189                           
  3190                           ;main_maestro.c: 171:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3191  1DC4  3003               	movlw	3
  3192  1DC5  00F4               	movwf	??_SPI_CONT+1
  3193  1DC6  3097               	movlw	151
  3194  1DC7  00F3               	movwf	??_SPI_CONT
  3195  1DC8                     u6167:
  3196  1DC8  0BF3               	decfsz	??_SPI_CONT,f
  3197  1DC9  2DC8               	goto	u6167
  3198  1DCA  0BF4               	decfsz	??_SPI_CONT+1,f
  3199  1DCB  2DC8               	goto	u6167
  3200  1DCC  2DCD               	nop2
  3201  1DCD                     l3350:
  3202                           
  3203                           ;main_maestro.c: 172:    RC2 = 1;
  3204  1DCD  1283               	bcf	3,5	;RP0=0, select bank0
  3205  1DCE  1303               	bcf	3,6	;RP1=0, select bank0
  3206  1DCF  1507               	bsf	7,2	;volatile
  3207                           
  3208                           ;main_maestro.c: 174:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3209  1DD0  3002               	movlw	2
  3210  1DD1  00F5               	movwf	??_SPI_CONT+2
  3211  1DD2  3004               	movlw	4
  3212  1DD3  00F4               	movwf	??_SPI_CONT+1
  3213  1DD4  30BA               	movlw	186
  3214  1DD5  00F3               	movwf	??_SPI_CONT
  3215  1DD6                     u6177:
  3216  1DD6  0BF3               	decfsz	??_SPI_CONT,f
  3217  1DD7  2DD6               	goto	u6177
  3218  1DD8  0BF4               	decfsz	??_SPI_CONT+1,f
  3219  1DD9  2DD6               	goto	u6177
  3220  1DDA  0BF5               	decfsz	??_SPI_CONT+2,f
  3221  1DDB  2DD6               	goto	u6177
  3222  1DDC  0000               	nop
  3223  1DDD                     l128:
  3224  1DDD  0008               	return
  3225  1DDE                     __end_of_SPI_CONT:
  3226                           
  3227                           	psect	text15
  3228  1D40                     __ptext15:	
  3229 ;; *************** function _SPI_ADC *****************
  3230 ;; Defined at:
  3231 ;;		line 177 in file "main_maestro.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;		None
  3234 ;; Auto vars:     Size  Location     Type
  3235 ;;		None
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      void 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0, pclath, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3245 ;;      Params:         0       0       0       0       0
  3246 ;;      Locals:         0       0       0       0       0
  3247 ;;      Temps:          3       0       0       0       0
  3248 ;;      Totals:         3       0       0       0       0
  3249 ;;Total ram usage:        3 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; Hardware stack levels required when called:    3
  3252 ;; This function calls:
  3253 ;;		_spiRead
  3254 ;;		_spiWrite
  3255 ;; This function is called by:
  3256 ;;		_main
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           
  3261                           ;psect for function _SPI_ADC
  3262  1D40                     _SPI_ADC:
  3263  1D40                     l3352:	
  3264                           ;incstack = 0
  3265                           ; Regs used in _SPI_ADC: [wreg+status,2+status,0+pclath+cstack]
  3266                           
  3267                           
  3268                           ;main_maestro.c: 178:     RC0 = 0;
  3269  1D40  1283               	bcf	3,5	;RP0=0, select bank0
  3270  1D41  1303               	bcf	3,6	;RP1=0, select bank0
  3271  1D42  1007               	bcf	7,0	;volatile
  3272  1D43                     l3354:
  3273                           
  3274                           ;main_maestro.c: 179:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3275  1D43  3003               	movlw	3
  3276  1D44  00F4               	movwf	??_SPI_ADC+1
  3277  1D45  3097               	movlw	151
  3278  1D46  00F3               	movwf	??_SPI_ADC
  3279  1D47                     u6187:
  3280  1D47  0BF3               	decfsz	??_SPI_ADC,f
  3281  1D48  2D47               	goto	u6187
  3282  1D49  0BF4               	decfsz	??_SPI_ADC+1,f
  3283  1D4A  2D47               	goto	u6187
  3284  1D4B  2D4C               	nop2
  3285  1D4C                     l3356:
  3286                           
  3287                           ;main_maestro.c: 181:    spiWrite(hola_esclavo);
  3288  1D4C  3000               	movlw	0
  3289  1D4D  160A  158A  23D6  160A  158A  	fcall	_spiWrite
  3290  1D52                     l3358:
  3291                           
  3292                           ;main_maestro.c: 182:    val_ADC = spiRead();
  3293  1D52  160A  158A  2400  160A  158A  	fcall	_spiRead
  3294  1D57  00F3               	movwf	??_SPI_ADC
  3295  1D58  0873               	movf	??_SPI_ADC,w
  3296  1D59  00FB               	movwf	_val_ADC
  3297                           
  3298                           ;main_maestro.c: 184:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3299  1D5A  3003               	movlw	3
  3300  1D5B  00F4               	movwf	??_SPI_ADC+1
  3301  1D5C  3097               	movlw	151
  3302  1D5D  00F3               	movwf	??_SPI_ADC
  3303  1D5E                     u6197:
  3304  1D5E  0BF3               	decfsz	??_SPI_ADC,f
  3305  1D5F  2D5E               	goto	u6197
  3306  1D60  0BF4               	decfsz	??_SPI_ADC+1,f
  3307  1D61  2D5E               	goto	u6197
  3308  1D62  2D63               	nop2
  3309  1D63                     l3360:
  3310                           
  3311                           ;main_maestro.c: 185:    RC0 = 1;
  3312  1D63  1283               	bcf	3,5	;RP0=0, select bank0
  3313  1D64  1303               	bcf	3,6	;RP1=0, select bank0
  3314  1D65  1407               	bsf	7,0	;volatile
  3315                           
  3316                           ;main_maestro.c: 187:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3317  1D66  3002               	movlw	2
  3318  1D67  00F5               	movwf	??_SPI_ADC+2
  3319  1D68  3004               	movlw	4
  3320  1D69  00F4               	movwf	??_SPI_ADC+1
  3321  1D6A  30BA               	movlw	186
  3322  1D6B  00F3               	movwf	??_SPI_ADC
  3323  1D6C                     u6207:
  3324  1D6C  0BF3               	decfsz	??_SPI_ADC,f
  3325  1D6D  2D6C               	goto	u6207
  3326  1D6E  0BF4               	decfsz	??_SPI_ADC+1,f
  3327  1D6F  2D6C               	goto	u6207
  3328  1D70  0BF5               	decfsz	??_SPI_ADC+2,f
  3329  1D71  2D6C               	goto	u6207
  3330  1D72  0000               	nop
  3331  1D73                     l131:
  3332  1D73  0008               	return
  3333  1D74                     __end_of_SPI_ADC:
  3334                           
  3335                           	psect	text16
  3336  1BD6                     __ptext16:	
  3337 ;; *************** function _spiWrite *****************
  3338 ;; Defined at:
  3339 ;;		line 36 in file "SPI.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  dat             1    wreg     unsigned char 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  dat             1    2[COMMON] unsigned char 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3353 ;;      Params:         0       0       0       0       0
  3354 ;;      Locals:         1       0       0       0       0
  3355 ;;      Temps:          0       0       0       0       0
  3356 ;;      Totals:         1       0       0       0       0
  3357 ;;Total ram usage:        1 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    1
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_SPI_CONT
  3364 ;;		_SPI_ADC
  3365 ;;		_SPI_TEMP
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _spiWrite
  3371  1BD6                     _spiWrite:
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _spiWrite: [wreg]
  3375                           ;spiWrite@dat stored from wreg
  3376  1BD6  00F2               	movwf	spiWrite@dat
  3377  1BD7                     l3200:
  3378                           
  3379                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  3380  1BD7  0872               	movf	spiWrite@dat,w
  3381  1BD8  1283               	bcf	3,5	;RP0=0, select bank0
  3382  1BD9  1303               	bcf	3,6	;RP1=0, select bank0
  3383  1BDA  0093               	movwf	19	;volatile
  3384  1BDB                     l269:
  3385  1BDB  0008               	return
  3386  1BDC                     __end_of_spiWrite:
  3387                           
  3388                           	psect	text17
  3389  1C00                     __ptext17:	
  3390 ;; *************** function _spiRead *****************
  3391 ;; Defined at:
  3392 ;;		line 49 in file "SPI.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      unsigned char 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0, pclath, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3406 ;;      Params:         0       0       0       0       0
  3407 ;;      Locals:         0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0
  3409 ;;      Totals:         0       0       0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    2
  3413 ;; This function calls:
  3414 ;;		_spiReceiveWait
  3415 ;; This function is called by:
  3416 ;;		_SPI_CONT
  3417 ;;		_SPI_ADC
  3418 ;;		_SPI_TEMP
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _spiRead
  3424  1C00                     _spiRead:
  3425  1C00                     l3202:	
  3426                           ;incstack = 0
  3427                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  3428                           
  3429                           
  3430                           ;SPI.c: 51:     spiReceiveWait();
  3431  1C00  160A  158A  23E9  160A  158A  	fcall	_spiReceiveWait
  3432  1C05                     l3204:
  3433                           
  3434                           ;SPI.c: 52:     return(SSPBUF);
  3435  1C05  1283               	bcf	3,5	;RP0=0, select bank0
  3436  1C06  1303               	bcf	3,6	;RP1=0, select bank0
  3437  1C07  0813               	movf	19,w	;volatile
  3438  1C08                     l277:
  3439  1C08  0008               	return
  3440  1C09                     __end_of_spiRead:
  3441                           
  3442                           	psect	text18
  3443  1BE9                     __ptext18:	
  3444 ;; *************** function _spiReceiveWait *****************
  3445 ;; Defined at:
  3446 ;;		line 31 in file "SPI.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		None
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3460 ;;      Params:         0       0       0       0       0
  3461 ;;      Locals:         0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0
  3463 ;;      Totals:         0       0       0       0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    1
  3467 ;; This function calls:
  3468 ;;		Nothing
  3469 ;; This function is called by:
  3470 ;;		_spiRead
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           
  3475                           ;psect for function _spiReceiveWait
  3476  1BE9                     _spiReceiveWait:
  3477  1BE9                     l2554:	
  3478                           ;incstack = 0
  3479                           ; Regs used in _spiReceiveWait: []
  3480                           
  3481  1BE9                     l263:	
  3482                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  3483                           
  3484  1BE9  1683               	bsf	3,5	;RP0=1, select bank1
  3485  1BEA  1303               	bcf	3,6	;RP1=0, select bank1
  3486  1BEB  1C14               	btfss	20,0	;volatile
  3487  1BEC  2BEE               	goto	u3111
  3488  1BED  2BEF               	goto	u3110
  3489  1BEE                     u3111:
  3490  1BEE  2BE9               	goto	l263
  3491  1BEF                     u3110:
  3492  1BEF                     l266:
  3493  1BEF  0008               	return
  3494  1BF0                     __end_of_spiReceiveWait:
  3495                           
  3496                           	psect	text19
  3497  1335                     __ptext19:	
  3498 ;; *************** function _Mapeo_M *****************
  3499 ;; Defined at:
  3500 ;;		line 132 in file "main_maestro.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;		None
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, status,0, pclath, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3514 ;;      Params:         0       0       0       0       0
  3515 ;;      Locals:         0       0       0       0       0
  3516 ;;      Temps:          0       2       0       0       0
  3517 ;;      Totals:         0       2       0       0       0
  3518 ;;Total ram usage:        2 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    3
  3521 ;; This function calls:
  3522 ;;		___awdiv
  3523 ;;		___awtoft
  3524 ;;		___ftdiv
  3525 ;;		___ftmul
  3526 ;;		___wmul
  3527 ;; This function is called by:
  3528 ;;		_main
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           
  3533                           ;psect for function _Mapeo_M
  3534  1335                     _Mapeo_M:
  3535  1335                     l4230:	
  3536                           ;incstack = 0
  3537                           ; Regs used in _Mapeo_M: [wreg+status,2+status,0+pclath+cstack]
  3538                           
  3539                           
  3540                           ;main_maestro.c: 133:     ADC_val_M = ((val_ADC * 5.0) / 255);
  3541  1335  3000               	movlw	0
  3542  1336  1283               	bcf	3,5	;RP0=0, select bank0
  3543  1337  1303               	bcf	3,6	;RP1=0, select bank0
  3544  1338  00BC               	movwf	___ftdiv@f2
  3545  1339  307F               	movlw	127
  3546  133A  00BD               	movwf	___ftdiv@f2+1
  3547  133B  3043               	movlw	67
  3548  133C  00BE               	movwf	___ftdiv@f2+2
  3549  133D  3000               	movlw	0
  3550  133E  00AC               	movwf	___ftmul@f1
  3551  133F  30A0               	movlw	160
  3552  1340  00AD               	movwf	___ftmul@f1+1
  3553  1341  3040               	movlw	64
  3554  1342  00AE               	movwf	___ftmul@f1+2
  3555  1343  087B               	movf	_val_ADC,w
  3556  1344  00CC               	movwf	??_Mapeo_M
  3557  1345  01CD               	clrf	??_Mapeo_M+1
  3558  1346  084C               	movf	??_Mapeo_M,w
  3559  1347  00A0               	movwf	___awtoft@c
  3560  1348  084D               	movf	??_Mapeo_M+1,w
  3561  1349  00A1               	movwf	___awtoft@c+1
  3562  134A  160A  158A  24E4  160A  118A  	fcall	___awtoft
  3563  134F  1283               	bcf	3,5	;RP0=0, select bank0
  3564  1350  1303               	bcf	3,6	;RP1=0, select bank0
  3565  1351  0820               	movf	?___awtoft,w
  3566  1352  00AF               	movwf	___ftmul@f2
  3567  1353  0821               	movf	?___awtoft+1,w
  3568  1354  00B0               	movwf	___ftmul@f2+1
  3569  1355  0822               	movf	?___awtoft+2,w
  3570  1356  00B1               	movwf	___ftmul@f2+2
  3571  1357  120A  118A  26D8  160A  118A  	fcall	___ftmul
  3572  135C  1283               	bcf	3,5	;RP0=0, select bank0
  3573  135D  1303               	bcf	3,6	;RP1=0, select bank0
  3574  135E  082C               	movf	?___ftmul,w
  3575  135F  00BF               	movwf	___ftdiv@f1
  3576  1360  082D               	movf	?___ftmul+1,w
  3577  1361  00C0               	movwf	___ftdiv@f1+1
  3578  1362  082E               	movf	?___ftmul+2,w
  3579  1363  00C1               	movwf	___ftdiv@f1+2
  3580  1364  160A  118A  24DC  160A  118A  	fcall	___ftdiv
  3581  1369  1283               	bcf	3,5	;RP0=0, select bank0
  3582  136A  1303               	bcf	3,6	;RP1=0, select bank0
  3583  136B  083C               	movf	?___ftdiv,w
  3584  136C  1683               	bsf	3,5	;RP0=1, select bank1
  3585  136D  1303               	bcf	3,6	;RP1=0, select bank1
  3586  136E  00B4               	movwf	_ADC_val_M^(0+128)
  3587  136F  1283               	bcf	3,5	;RP0=0, select bank0
  3588  1370  1303               	bcf	3,6	;RP1=0, select bank0
  3589  1371  083D               	movf	?___ftdiv+1,w
  3590  1372  1683               	bsf	3,5	;RP0=1, select bank1
  3591  1373  1303               	bcf	3,6	;RP1=0, select bank1
  3592  1374  00B5               	movwf	(_ADC_val_M+1)^(0+128)
  3593  1375  1283               	bcf	3,5	;RP0=0, select bank0
  3594  1376  1303               	bcf	3,6	;RP1=0, select bank0
  3595  1377  083E               	movf	?___ftdiv+2,w
  3596  1378  1683               	bsf	3,5	;RP0=1, select bank1
  3597  1379  1303               	bcf	3,6	;RP1=0, select bank1
  3598  137A  00B6               	movwf	(_ADC_val_M+2)^(0+128)
  3599                           
  3600                           ;main_maestro.c: 134:     mv_temp_val_M = ((val_TEMP * 150) / 255);
  3601  137B  30FF               	movlw	255
  3602  137C  1283               	bcf	3,5	;RP0=0, select bank0
  3603  137D  1303               	bcf	3,6	;RP1=0, select bank0
  3604  137E  00A0               	movwf	___awdiv@divisor
  3605  137F  3000               	movlw	0
  3606  1380  00A1               	movwf	___awdiv@divisor+1
  3607  1381  087A               	movf	_val_TEMP,w
  3608  1382  00CC               	movwf	??_Mapeo_M
  3609  1383  01CD               	clrf	??_Mapeo_M+1
  3610  1384  084C               	movf	??_Mapeo_M,w
  3611  1385  00F2               	movwf	___wmul@multiplier
  3612  1386  084D               	movf	??_Mapeo_M+1,w
  3613  1387  00F3               	movwf	___wmul@multiplier+1
  3614  1388  3096               	movlw	150
  3615  1389  00F4               	movwf	___wmul@multiplicand
  3616  138A  3000               	movlw	0
  3617  138B  00F5               	movwf	___wmul@multiplicand+1
  3618  138C  120A  158A  2003  160A  118A  	fcall	___wmul
  3619  1391  0873               	movf	?___wmul+1,w
  3620  1392  1283               	bcf	3,5	;RP0=0, select bank0
  3621  1393  1303               	bcf	3,6	;RP1=0, select bank0
  3622  1394  00A3               	movwf	___awdiv@dividend+1
  3623  1395  0872               	movf	?___wmul,w
  3624  1396  00A2               	movwf	___awdiv@dividend
  3625  1397  160A  118A  22CC  160A  118A  	fcall	___awdiv
  3626  139C  1283               	bcf	3,5	;RP0=0, select bank0
  3627  139D  1303               	bcf	3,6	;RP1=0, select bank0
  3628  139E  0821               	movf	?___awdiv+1,w
  3629  139F  00ED               	movwf	_mv_temp_val_M+1
  3630  13A0  0820               	movf	?___awdiv,w
  3631  13A1  00EC               	movwf	_mv_temp_val_M
  3632  13A2                     l119:
  3633  13A2  0008               	return
  3634  13A3                     __end_of_Mapeo_M:
  3635                           
  3636                           	psect	text20
  3637  14DC                     __ptext20:	
  3638 ;; *************** function ___ftdiv *****************
  3639 ;; Defined at:
  3640 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftdiv.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  f2              3   28[BANK0 ] float 
  3643 ;;  f1              3   31[BANK0 ] float 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  f3              3   39[BANK0 ] float 
  3646 ;;  sign            1   43[BANK0 ] unsigned char 
  3647 ;;  exp             1   42[BANK0 ] unsigned char 
  3648 ;;  cntr            1   38[BANK0 ] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  3   28[BANK0 ] float 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, pclath, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3658 ;;      Params:         0       6       0       0       0
  3659 ;;      Locals:         0       6       0       0       0
  3660 ;;      Temps:          0       4       0       0       0
  3661 ;;      Totals:         0      16       0       0       0
  3662 ;;Total ram usage:       16 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    2
  3665 ;; This function calls:
  3666 ;;		___ftpack
  3667 ;; This function is called by:
  3668 ;;		_Mapeo_M
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           
  3673                           ;psect for function ___ftdiv
  3674  14DC                     ___ftdiv:
  3675  14DC                     l4176:	
  3676                           ;incstack = 0
  3677                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3678                           
  3679  14DC  1283               	bcf	3,5	;RP0=0, select bank0
  3680  14DD  1303               	bcf	3,6	;RP1=0, select bank0
  3681  14DE  083F               	movf	___ftdiv@f1,w
  3682  14DF  00C2               	movwf	??___ftdiv
  3683  14E0  0840               	movf	___ftdiv@f1+1,w
  3684  14E1  00C3               	movwf	??___ftdiv+1
  3685  14E2  0841               	movf	___ftdiv@f1+2,w
  3686  14E3  00C4               	movwf	??___ftdiv+2
  3687  14E4  1003               	clrc
  3688  14E5  0D43               	rlf	??___ftdiv+1,w
  3689  14E6  0D44               	rlf	??___ftdiv+2,w
  3690  14E7  00C5               	movwf	??___ftdiv+3
  3691  14E8  0845               	movf	??___ftdiv+3,w
  3692  14E9  00CA               	movwf	___ftdiv@exp
  3693  14EA  084A               	movf	___ftdiv@exp,w
  3694  14EB  1D03               	btfss	3,2
  3695  14EC  2CEE               	goto	u6031
  3696  14ED  2CEF               	goto	u6030
  3697  14EE                     u6031:
  3698  14EE  2CF6               	goto	l4182
  3699  14EF                     u6030:
  3700  14EF                     l4178:
  3701  14EF  3000               	movlw	0
  3702  14F0  00BC               	movwf	?___ftdiv
  3703  14F1  3000               	movlw	0
  3704  14F2  00BD               	movwf	?___ftdiv+1
  3705  14F3  3000               	movlw	0
  3706  14F4  00BE               	movwf	?___ftdiv+2
  3707  14F5  2D9D               	goto	l759
  3708  14F6                     l4182:
  3709  14F6  083C               	movf	___ftdiv@f2,w
  3710  14F7  00C2               	movwf	??___ftdiv
  3711  14F8  083D               	movf	___ftdiv@f2+1,w
  3712  14F9  00C3               	movwf	??___ftdiv+1
  3713  14FA  083E               	movf	___ftdiv@f2+2,w
  3714  14FB  00C4               	movwf	??___ftdiv+2
  3715  14FC  1003               	clrc
  3716  14FD  0D43               	rlf	??___ftdiv+1,w
  3717  14FE  0D44               	rlf	??___ftdiv+2,w
  3718  14FF  00C5               	movwf	??___ftdiv+3
  3719  1500  0845               	movf	??___ftdiv+3,w
  3720  1501  00CB               	movwf	___ftdiv@sign
  3721  1502  084B               	movf	___ftdiv@sign,w
  3722  1503  1D03               	btfss	3,2
  3723  1504  2D06               	goto	u6041
  3724  1505  2D07               	goto	u6040
  3725  1506                     u6041:
  3726  1506  2D0E               	goto	l4188
  3727  1507                     u6040:
  3728  1507                     l4184:
  3729  1507  3000               	movlw	0
  3730  1508  00BC               	movwf	?___ftdiv
  3731  1509  3000               	movlw	0
  3732  150A  00BD               	movwf	?___ftdiv+1
  3733  150B  3000               	movlw	0
  3734  150C  00BE               	movwf	?___ftdiv+2
  3735  150D  2D9D               	goto	l759
  3736  150E                     l4188:
  3737  150E  3000               	movlw	0
  3738  150F  00C7               	movwf	___ftdiv@f3
  3739  1510  3000               	movlw	0
  3740  1511  00C8               	movwf	___ftdiv@f3+1
  3741  1512  3000               	movlw	0
  3742  1513  00C9               	movwf	___ftdiv@f3+2
  3743  1514                     l4190:
  3744  1514  3089               	movlw	137
  3745  1515  074B               	addwf	___ftdiv@sign,w
  3746  1516  00C2               	movwf	??___ftdiv
  3747  1517  0842               	movf	??___ftdiv,w
  3748  1518  02CA               	subwf	___ftdiv@exp,f
  3749  1519                     l4192:
  3750  1519  083F               	movf	___ftdiv@f1,w
  3751  151A  00C2               	movwf	??___ftdiv
  3752  151B  0840               	movf	___ftdiv@f1+1,w
  3753  151C  00C3               	movwf	??___ftdiv+1
  3754  151D  0841               	movf	___ftdiv@f1+2,w
  3755  151E  00C4               	movwf	??___ftdiv+2
  3756  151F  3010               	movlw	16
  3757  1520                     u6055:
  3758  1520  1003               	clrc
  3759  1521  0CC4               	rrf	??___ftdiv+2,f
  3760  1522  0CC3               	rrf	??___ftdiv+1,f
  3761  1523  0CC2               	rrf	??___ftdiv,f
  3762  1524                     u6050:
  3763  1524  3EFF               	addlw	-1
  3764  1525  1D03               	skipz
  3765  1526  2D20               	goto	u6055
  3766  1527  0842               	movf	??___ftdiv,w
  3767  1528  00C5               	movwf	??___ftdiv+3
  3768  1529  0845               	movf	??___ftdiv+3,w
  3769  152A  00CB               	movwf	___ftdiv@sign
  3770  152B                     l4194:
  3771  152B  083C               	movf	___ftdiv@f2,w
  3772  152C  00C2               	movwf	??___ftdiv
  3773  152D  083D               	movf	___ftdiv@f2+1,w
  3774  152E  00C3               	movwf	??___ftdiv+1
  3775  152F  083E               	movf	___ftdiv@f2+2,w
  3776  1530  00C4               	movwf	??___ftdiv+2
  3777  1531  3010               	movlw	16
  3778  1532                     u6065:
  3779  1532  1003               	clrc
  3780  1533  0CC4               	rrf	??___ftdiv+2,f
  3781  1534  0CC3               	rrf	??___ftdiv+1,f
  3782  1535  0CC2               	rrf	??___ftdiv,f
  3783  1536                     u6060:
  3784  1536  3EFF               	addlw	-1
  3785  1537  1D03               	skipz
  3786  1538  2D32               	goto	u6065
  3787  1539  0842               	movf	??___ftdiv,w
  3788  153A  00C5               	movwf	??___ftdiv+3
  3789  153B  0845               	movf	??___ftdiv+3,w
  3790  153C  06CB               	xorwf	___ftdiv@sign,f
  3791  153D                     l4196:
  3792  153D  3080               	movlw	128
  3793  153E  00C2               	movwf	??___ftdiv
  3794  153F  0842               	movf	??___ftdiv,w
  3795  1540  05CB               	andwf	___ftdiv@sign,f
  3796  1541                     l4198:
  3797  1541  17C0               	bsf	___ftdiv@f1+1,7
  3798  1542  30FF               	movlw	255
  3799  1543  05BF               	andwf	___ftdiv@f1,f
  3800  1544  30FF               	movlw	255
  3801  1545  05C0               	andwf	___ftdiv@f1+1,f
  3802  1546  3000               	movlw	0
  3803  1547  05C1               	andwf	___ftdiv@f1+2,f
  3804  1548                     l4200:
  3805  1548  17BD               	bsf	___ftdiv@f2+1,7
  3806  1549  30FF               	movlw	255
  3807  154A  05BC               	andwf	___ftdiv@f2,f
  3808  154B  30FF               	movlw	255
  3809  154C  05BD               	andwf	___ftdiv@f2+1,f
  3810  154D  3000               	movlw	0
  3811  154E  05BE               	andwf	___ftdiv@f2+2,f
  3812  154F  3018               	movlw	24
  3813  1550  00C2               	movwf	??___ftdiv
  3814  1551  0842               	movf	??___ftdiv,w
  3815  1552  00C6               	movwf	___ftdiv@cntr
  3816  1553                     l4202:
  3817  1553  3001               	movlw	1
  3818  1554                     u6075:
  3819  1554  1003               	clrc
  3820  1555  0DC7               	rlf	___ftdiv@f3,f
  3821  1556  0DC8               	rlf	___ftdiv@f3+1,f
  3822  1557  0DC9               	rlf	___ftdiv@f3+2,f
  3823  1558  3EFF               	addlw	-1
  3824  1559  1D03               	skipz
  3825  155A  2D54               	goto	u6075
  3826  155B                     l4204:
  3827  155B  083E               	movf	___ftdiv@f2+2,w
  3828  155C  0241               	subwf	___ftdiv@f1+2,w
  3829  155D  1D03               	skipz
  3830  155E  2D65               	goto	u6085
  3831  155F  083D               	movf	___ftdiv@f2+1,w
  3832  1560  0240               	subwf	___ftdiv@f1+1,w
  3833  1561  1D03               	skipz
  3834  1562  2D65               	goto	u6085
  3835  1563  083C               	movf	___ftdiv@f2,w
  3836  1564  023F               	subwf	___ftdiv@f1,w
  3837  1565                     u6085:
  3838  1565  1C03               	skipc
  3839  1566  2D68               	goto	u6081
  3840  1567  2D69               	goto	u6080
  3841  1568                     u6081:
  3842  1568  2D74               	goto	l4210
  3843  1569                     u6080:
  3844  1569                     l4206:
  3845  1569  083C               	movf	___ftdiv@f2,w
  3846  156A  02BF               	subwf	___ftdiv@f1,f
  3847  156B  083D               	movf	___ftdiv@f2+1,w
  3848  156C  1C03               	skipc
  3849  156D  0F3D               	incfsz	___ftdiv@f2+1,w
  3850  156E  02C0               	subwf	___ftdiv@f1+1,f
  3851  156F  083E               	movf	___ftdiv@f2+2,w
  3852  1570  1C03               	skipc
  3853  1571  0A3E               	incf	___ftdiv@f2+2,w
  3854  1572  02C1               	subwf	___ftdiv@f1+2,f
  3855  1573                     l4208:
  3856  1573  1447               	bsf	___ftdiv@f3,0
  3857  1574                     l4210:
  3858  1574  3001               	movlw	1
  3859  1575                     u6095:
  3860  1575  1003               	clrc
  3861  1576  0DBF               	rlf	___ftdiv@f1,f
  3862  1577  0DC0               	rlf	___ftdiv@f1+1,f
  3863  1578  0DC1               	rlf	___ftdiv@f1+2,f
  3864  1579  3EFF               	addlw	-1
  3865  157A  1D03               	skipz
  3866  157B  2D75               	goto	u6095
  3867  157C                     l4212:
  3868  157C  3001               	movlw	1
  3869  157D  02C6               	subwf	___ftdiv@cntr,f
  3870  157E  1D03               	btfss	3,2
  3871  157F  2D81               	goto	u6101
  3872  1580  2D82               	goto	u6100
  3873  1581                     u6101:
  3874  1581  2D53               	goto	l4202
  3875  1582                     u6100:
  3876  1582                     l4214:
  3877  1582  0847               	movf	___ftdiv@f3,w
  3878  1583  00F2               	movwf	___ftpack@arg
  3879  1584  0848               	movf	___ftdiv@f3+1,w
  3880  1585  00F3               	movwf	___ftpack@arg+1
  3881  1586  0849               	movf	___ftdiv@f3+2,w
  3882  1587  00F4               	movwf	___ftpack@arg+2
  3883  1588  084A               	movf	___ftdiv@exp,w
  3884  1589  00C2               	movwf	??___ftdiv
  3885  158A  0842               	movf	??___ftdiv,w
  3886  158B  00F5               	movwf	___ftpack@exp
  3887  158C  084B               	movf	___ftdiv@sign,w
  3888  158D  00C3               	movwf	??___ftdiv+1
  3889  158E  0843               	movf	??___ftdiv+1,w
  3890  158F  00F6               	movwf	___ftpack@sign
  3891  1590  160A  118A  23A3  160A  118A  	fcall	___ftpack
  3892  1595  0872               	movf	?___ftpack,w
  3893  1596  1283               	bcf	3,5	;RP0=0, select bank0
  3894  1597  1303               	bcf	3,6	;RP1=0, select bank0
  3895  1598  00BC               	movwf	?___ftdiv
  3896  1599  0873               	movf	?___ftpack+1,w
  3897  159A  00BD               	movwf	?___ftdiv+1
  3898  159B  0874               	movf	?___ftpack+2,w
  3899  159C  00BE               	movwf	?___ftdiv+2
  3900  159D                     l759:
  3901  159D  0008               	return
  3902  159E                     __end_of___ftdiv:
  3903                           
  3904                           	psect	text21
  3905  1CE4                     __ptext21:	
  3906 ;; *************** function ___awtoft *****************
  3907 ;; Defined at:
  3908 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awtoft.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  c               2    0[BANK0 ] int 
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;  sign            1    5[BANK0 ] unsigned char 
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  3    0[BANK0 ] float 
  3915 ;; Registers used:
  3916 ;;		wreg, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : 0/0
  3919 ;;		On exit  : 0/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3922 ;;      Params:         0       3       0       0       0
  3923 ;;      Locals:         0       1       0       0       0
  3924 ;;      Temps:          0       2       0       0       0
  3925 ;;      Totals:         0       6       0       0       0
  3926 ;;Total ram usage:        6 bytes
  3927 ;; Hardware stack levels used:    1
  3928 ;; Hardware stack levels required when called:    2
  3929 ;; This function calls:
  3930 ;;		___ftpack
  3931 ;; This function is called by:
  3932 ;;		_Mapeo_M
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           
  3937                           ;psect for function ___awtoft
  3938  1CE4                     ___awtoft:
  3939  1CE4                     l4164:	
  3940                           ;incstack = 0
  3941                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  3942                           
  3943  1CE4  1283               	bcf	3,5	;RP0=0, select bank0
  3944  1CE5  1303               	bcf	3,6	;RP1=0, select bank0
  3945  1CE6  01A5               	clrf	___awtoft@sign
  3946  1CE7                     l4166:
  3947  1CE7  1FA1               	btfss	___awtoft@c+1,7
  3948  1CE8  2CEA               	goto	u6021
  3949  1CE9  2CEB               	goto	u6020
  3950  1CEA                     u6021:
  3951  1CEA  2CF2               	goto	l4172
  3952  1CEB                     u6020:
  3953  1CEB                     l4168:
  3954  1CEB  09A0               	comf	___awtoft@c,f
  3955  1CEC  09A1               	comf	___awtoft@c+1,f
  3956  1CED  0AA0               	incf	___awtoft@c,f
  3957  1CEE  1903               	skipnz
  3958  1CEF  0AA1               	incf	___awtoft@c+1,f
  3959  1CF0                     l4170:
  3960  1CF0  01A5               	clrf	___awtoft@sign
  3961  1CF1  0AA5               	incf	___awtoft@sign,f
  3962  1CF2                     l4172:
  3963  1CF2  0820               	movf	___awtoft@c,w
  3964  1CF3  00F2               	movwf	___ftpack@arg
  3965  1CF4  0821               	movf	___awtoft@c+1,w
  3966  1CF5  00F3               	movwf	___ftpack@arg+1
  3967  1CF6  01F4               	clrf	___ftpack@arg+2
  3968  1CF7  308E               	movlw	142
  3969  1CF8  00A3               	movwf	??___awtoft
  3970  1CF9  0823               	movf	??___awtoft,w
  3971  1CFA  00F5               	movwf	___ftpack@exp
  3972  1CFB  0825               	movf	___awtoft@sign,w
  3973  1CFC  00A4               	movwf	??___awtoft+1
  3974  1CFD  0824               	movf	??___awtoft+1,w
  3975  1CFE  00F6               	movwf	___ftpack@sign
  3976  1CFF  160A  118A  23A3  160A  158A  	fcall	___ftpack
  3977  1D04  0872               	movf	?___ftpack,w
  3978  1D05  1283               	bcf	3,5	;RP0=0, select bank0
  3979  1D06  1303               	bcf	3,6	;RP1=0, select bank0
  3980  1D07  00A0               	movwf	?___awtoft
  3981  1D08  0873               	movf	?___ftpack+1,w
  3982  1D09  00A1               	movwf	?___awtoft+1
  3983  1D0A  0874               	movf	?___ftpack+2,w
  3984  1D0B  00A2               	movwf	?___awtoft+2
  3985  1D0C                     l684:
  3986  1D0C  0008               	return
  3987  1D0D                     __end_of___awtoft:
  3988                           
  3989                           	psect	text22
  3990  1F19                     __ptext22:	
  3991 ;; *************** function _Lcd_Init *****************
  3992 ;; Defined at:
  3993 ;;		line 14 in file "LCD.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;                  1    wreg      void 
  4000 ;; Registers used:
  4001 ;;		wreg, status,2, status,0, pclath, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4007 ;;      Params:         0       0       0       0       0
  4008 ;;      Locals:         0       0       0       0       0
  4009 ;;      Temps:          2       0       0       0       0
  4010 ;;      Totals:         2       0       0       0       0
  4011 ;;Total ram usage:        2 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    3
  4014 ;; This function calls:
  4015 ;;		_Lcd_Cmd
  4016 ;;		_Lcd_Port
  4017 ;; This function is called by:
  4018 ;;		_main
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function _Lcd_Init
  4024  1F19                     _Lcd_Init:
  4025  1F19                     l4218:	
  4026                           ;incstack = 0
  4027                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4028                           
  4029                           
  4030                           ;LCD.c: 15:   Lcd_Port(0x00);
  4031  1F19  3000               	movlw	0
  4032  1F1A  160A  158A  23D0  160A  158A  	fcall	_Lcd_Port
  4033  1F1F                     l4220:
  4034                           
  4035                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  4036  1F1F  3034               	movlw	52
  4037  1F20  00F7               	movwf	??_Lcd_Init+1
  4038  1F21  30F1               	movlw	241
  4039  1F22  00F6               	movwf	??_Lcd_Init
  4040  1F23                     u6217:
  4041  1F23  0BF6               	decfsz	??_Lcd_Init,f
  4042  1F24  2F23               	goto	u6217
  4043  1F25  0BF7               	decfsz	??_Lcd_Init+1,f
  4044  1F26  2F23               	goto	u6217
  4045  1F27  2F28               	nop2
  4046  1F28                     l4222:
  4047                           
  4048                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  4049  1F28  3030               	movlw	48
  4050  1F29  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4051                           
  4052                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  4053  1F2E  300D               	movlw	13
  4054  1F2F  00F7               	movwf	??_Lcd_Init+1
  4055  1F30  30FB               	movlw	251
  4056  1F31  00F6               	movwf	??_Lcd_Init
  4057  1F32                     u6227:
  4058  1F32  0BF6               	decfsz	??_Lcd_Init,f
  4059  1F33  2F32               	goto	u6227
  4060  1F34  0BF7               	decfsz	??_Lcd_Init+1,f
  4061  1F35  2F32               	goto	u6227
  4062  1F36  2F37               	nop2
  4063  1F37                     l4224:
  4064                           
  4065                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  4066  1F37  3030               	movlw	48
  4067  1F38  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4068  1F3D                     l4226:
  4069                           
  4070                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  4071  1F3D  301D               	movlw	29
  4072  1F3E  00F7               	movwf	??_Lcd_Init+1
  4073  1F3F  3091               	movlw	145
  4074  1F40  00F6               	movwf	??_Lcd_Init
  4075  1F41                     u6237:
  4076  1F41  0BF6               	decfsz	??_Lcd_Init,f
  4077  1F42  2F41               	goto	u6237
  4078  1F43  0BF7               	decfsz	??_Lcd_Init+1,f
  4079  1F44  2F41               	goto	u6237
  4080                           
  4081                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  4082  1F45  3030               	movlw	48
  4083  1F46  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4084                           
  4085                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  4086  1F4B  3038               	movlw	56
  4087  1F4C  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4088                           
  4089                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  4090  1F51  300C               	movlw	12
  4091  1F52  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4092                           
  4093                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  4094  1F57  3001               	movlw	1
  4095  1F58  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4096                           
  4097                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  4098  1F5D  3006               	movlw	6
  4099  1F5E  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4100  1F63                     l166:
  4101  1F63  0008               	return
  4102  1F64                     __end_of_Lcd_Init:
  4103                           
  4104                           	psect	text23
  4105  1C1F                     __ptext23:	
  4106 ;; *************** function _Lcd_Clear *****************
  4107 ;; Defined at:
  4108 ;;		line 42 in file "LCD.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0, pclath, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4122 ;;      Params:         0       0       0       0       0
  4123 ;;      Locals:         0       0       0       0       0
  4124 ;;      Temps:          0       0       0       0       0
  4125 ;;      Totals:         0       0       0       0       0
  4126 ;;Total ram usage:        0 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    3
  4129 ;; This function calls:
  4130 ;;		_Lcd_Cmd
  4131 ;; This function is called by:
  4132 ;;		_main
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           
  4137                           ;psect for function _Lcd_Clear
  4138  1C1F                     _Lcd_Clear:
  4139  1C1F                     l4228:	
  4140                           ;incstack = 0
  4141                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4142                           
  4143                           
  4144                           ;LCD.c: 43:  Lcd_Cmd(0);
  4145  1C1F  3000               	movlw	0
  4146  1C20  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4147                           
  4148                           ;LCD.c: 44:  Lcd_Cmd(1);
  4149  1C25  3001               	movlw	1
  4150  1C26  160A  158A  2481  160A  158A  	fcall	_Lcd_Cmd
  4151  1C2B                     l175:
  4152  1C2B  0008               	return
  4153  1C2C                     __end_of_Lcd_Clear:
  4154                           
  4155                           	psect	text24
  4156  1C81                     __ptext24:	
  4157 ;; *************** function _Lcd_Cmd *****************
  4158 ;; Defined at:
  4159 ;;		line 33 in file "LCD.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  a               1    wreg     unsigned char 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  a               1    5[COMMON] unsigned char 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      void 
  4166 ;; Registers used:
  4167 ;;		wreg, status,2, status,0, pclath, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4173 ;;      Params:         0       0       0       0       0
  4174 ;;      Locals:         1       0       0       0       0
  4175 ;;      Temps:          2       0       0       0       0
  4176 ;;      Totals:         3       0       0       0       0
  4177 ;;Total ram usage:        3 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    2
  4180 ;; This function calls:
  4181 ;;		_Lcd_Port
  4182 ;; This function is called by:
  4183 ;;		_Lcd_Init
  4184 ;;		_Lcd_Clear
  4185 ;;		_Lcd_Set_Cursor
  4186 ;;		_Lcd_Shift_Right
  4187 ;;		_Lcd_Shift_Left
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           
  4192                           ;psect for function _Lcd_Cmd
  4193  1C81                     _Lcd_Cmd:
  4194                           
  4195                           ;incstack = 0
  4196                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4197                           ;Lcd_Cmd@a stored from wreg
  4198  1C81  00F5               	movwf	Lcd_Cmd@a
  4199  1C82                     l3656:
  4200                           
  4201                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  4202  1C82  1283               	bcf	3,5	;RP0=0, select bank0
  4203  1C83  1303               	bcf	3,6	;RP1=0, select bank0
  4204  1C84  1009               	bcf	9,0	;volatile
  4205  1C85                     l3658:
  4206                           
  4207                           ;LCD.c: 35:  Lcd_Port(a);
  4208  1C85  0875               	movf	Lcd_Cmd@a,w
  4209  1C86  160A  158A  23D0  160A  158A  	fcall	_Lcd_Port
  4210  1C8B                     l3660:
  4211                           
  4212                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  4213  1C8B  1283               	bcf	3,5	;RP0=0, select bank0
  4214  1C8C  1303               	bcf	3,6	;RP1=0, select bank0
  4215  1C8D  1509               	bsf	9,2	;volatile
  4216  1C8E                     l3662:
  4217                           
  4218                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  4219  1C8E  300B               	movlw	11
  4220  1C8F  00F4               	movwf	??_Lcd_Cmd+1
  4221  1C90  3062               	movlw	98
  4222  1C91  00F3               	movwf	??_Lcd_Cmd
  4223  1C92                     u6247:
  4224  1C92  0BF3               	decfsz	??_Lcd_Cmd,f
  4225  1C93  2C92               	goto	u6247
  4226  1C94  0BF4               	decfsz	??_Lcd_Cmd+1,f
  4227  1C95  2C92               	goto	u6247
  4228  1C96  0000               	nop
  4229  1C97                     l3664:
  4230                           
  4231                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  4232  1C97  1283               	bcf	3,5	;RP0=0, select bank0
  4233  1C98  1303               	bcf	3,6	;RP1=0, select bank0
  4234  1C99  1109               	bcf	9,2	;volatile
  4235  1C9A                     l172:
  4236  1C9A  0008               	return
  4237  1C9B                     __end_of_Lcd_Cmd:
  4238                           
  4239                           	psect	text25
  4240  1BD0                     __ptext25:	
  4241 ;; *************** function _Lcd_Port *****************
  4242 ;; Defined at:
  4243 ;;		line 29 in file "LCD.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;  a               1    wreg     unsigned char 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  a               1    2[COMMON] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		wreg
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4257 ;;      Params:         0       0       0       0       0
  4258 ;;      Locals:         1       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0
  4260 ;;      Totals:         1       0       0       0       0
  4261 ;;Total ram usage:        1 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    1
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_Lcd_Init
  4268 ;;		_Lcd_Cmd
  4269 ;;		_Lcd_Write_Char
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _Lcd_Port
  4275  1BD0                     _Lcd_Port:
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _Lcd_Port: [wreg]
  4279                           ;Lcd_Port@a stored from wreg
  4280  1BD0  00F2               	movwf	Lcd_Port@a
  4281  1BD1                     l3508:
  4282                           
  4283                           ;LCD.c: 30:     PORTD = a;
  4284  1BD1  0872               	movf	Lcd_Port@a,w
  4285  1BD2  1283               	bcf	3,5	;RP0=0, select bank0
  4286  1BD3  1303               	bcf	3,6	;RP1=0, select bank0
  4287  1BD4  0088               	movwf	8	;volatile
  4288  1BD5                     l169:
  4289  1BD5  0008               	return
  4290  1BD6                     __end_of_Lcd_Port:
  4291                           
  4292                           	psect	text26
  4293  07BD                     __ptext26:	
  4294 ;; *************** function _ADC_to_string *****************
  4295 ;; Defined at:
  4296 ;;		line 126 in file "main_maestro.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;		None
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;		None
  4301 ;; Return value:  Size  Location     Type
  4302 ;;                  1    wreg      void 
  4303 ;; Registers used:
  4304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4310 ;;      Params:         0       0       0       0       0
  4311 ;;      Locals:         0       0       0       0       0
  4312 ;;      Temps:          0       3       0       0       0
  4313 ;;      Totals:         0       3       0       0       0
  4314 ;;Total ram usage:        3 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    5
  4317 ;; This function calls:
  4318 ;;		_sprintf
  4319 ;; This function is called by:
  4320 ;;		_main
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _ADC_to_string
  4326  07BD                     _ADC_to_string:
  4327  07BD                     l4232:	
  4328                           ;incstack = 0
  4329                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4330                           
  4331                           
  4332                           ;main_maestro.c: 127:     sprintf(data_cont, "%.3i", cont);
  4333  07BD  30B5               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4334  07BE  1283               	bcf	3,5	;RP0=0, select bank0
  4335  07BF  1303               	bcf	3,6	;RP1=0, select bank0
  4336  07C0  00E9               	movwf	??_ADC_to_string
  4337  07C1  0869               	movf	??_ADC_to_string,w
  4338  07C2  00DF               	movwf	sprintf@f
  4339  07C3  086E               	movf	_cont,w
  4340  07C4  00EA               	movwf	??_ADC_to_string+1
  4341  07C5  01EB               	clrf	??_ADC_to_string+2
  4342  07C6  086A               	movf	??_ADC_to_string+1,w
  4343  07C7  00E0               	movwf	?_sprintf+1
  4344  07C8  086B               	movf	??_ADC_to_string+2,w
  4345  07C9  00E1               	movwf	?_sprintf+2
  4346  07CA  30C7               	movlw	(low (_data_cont| 0))& (0+255)
  4347  07CB  120A  158A  2518  120A  118A  	fcall	_sprintf
  4348                           
  4349                           ;main_maestro.c: 128:     sprintf(data_ADC, "%1.2fV", ADC_val_M);
  4350  07D0  30A3               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  4351  07D1  1283               	bcf	3,5	;RP0=0, select bank0
  4352  07D2  1303               	bcf	3,6	;RP1=0, select bank0
  4353  07D3  00E9               	movwf	??_ADC_to_string
  4354  07D4  0869               	movf	??_ADC_to_string,w
  4355  07D5  00DF               	movwf	sprintf@f
  4356  07D6  1683               	bsf	3,5	;RP0=1, select bank1
  4357  07D7  1303               	bcf	3,6	;RP1=0, select bank1
  4358  07D8  0834               	movf	_ADC_val_M^(0+128),w
  4359  07D9  1283               	bcf	3,5	;RP0=0, select bank0
  4360  07DA  1303               	bcf	3,6	;RP1=0, select bank0
  4361  07DB  00E0               	movwf	?_sprintf+1
  4362  07DC  1683               	bsf	3,5	;RP0=1, select bank1
  4363  07DD  1303               	bcf	3,6	;RP1=0, select bank1
  4364  07DE  0835               	movf	(_ADC_val_M+1)^(0+128),w
  4365  07DF  1283               	bcf	3,5	;RP0=0, select bank0
  4366  07E0  1303               	bcf	3,6	;RP1=0, select bank0
  4367  07E1  00E1               	movwf	?_sprintf+2
  4368  07E2  1683               	bsf	3,5	;RP0=1, select bank1
  4369  07E3  1303               	bcf	3,6	;RP1=0, select bank1
  4370  07E4  0836               	movf	(_ADC_val_M+2)^(0+128),w
  4371  07E5  1283               	bcf	3,5	;RP0=0, select bank0
  4372  07E6  1303               	bcf	3,6	;RP1=0, select bank0
  4373  07E7  00E2               	movwf	?_sprintf+3
  4374  07E8  30BF               	movlw	(low (_data_ADC| 0))& (0+255)
  4375  07E9  120A  158A  2518  120A  118A  	fcall	_sprintf
  4376                           
  4377                           ;main_maestro.c: 129:     sprintf(data_TEMP, "%.2i", mv_temp_val_M);
  4378  07EE  30B0               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  4379  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  4380  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  4381  07F1  00E9               	movwf	??_ADC_to_string
  4382  07F2  0869               	movf	??_ADC_to_string,w
  4383  07F3  00DF               	movwf	sprintf@f
  4384  07F4  086D               	movf	_mv_temp_val_M+1,w
  4385  07F5  00E1               	movwf	?_sprintf+2
  4386  07F6  086C               	movf	_mv_temp_val_M,w
  4387  07F7  00E0               	movwf	?_sprintf+1
  4388  07F8  30B7               	movlw	(low (_data_TEMP| 0))& (0+255)
  4389  07F9  120A  158A  2518  120A  118A  	fcall	_sprintf
  4390  07FE                     l116:
  4391  07FE  0008               	return
  4392  07FF                     __end_of_ADC_to_string:
  4393                           
  4394                           	psect	text27
  4395  0D18                     __ptext27:	
  4396 ;; *************** function _sprintf *****************
  4397 ;; Defined at:
  4398 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  sp              1    wreg     PTR unsigned char 
  4401 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  4402 ;;  f               1   63[BANK0 ] PTR const unsigned char 
  4403 ;;		 -> STR_4(5), STR_3(7), STR_2(5), 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  4406 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  4407 ;;  val             4   12[BANK1 ] unsigned long 
  4408 ;;  tmpval          4    8[BANK1 ] struct .
  4409 ;;  fval            3   18[BANK1 ] struct .
  4410 ;;  prec            2   22[BANK1 ] int 
  4411 ;;  eexp            2   16[BANK1 ] int 
  4412 ;;  width           2    6[BANK1 ] int 
  4413 ;;  flag            2    4[BANK1 ] unsigned short 
  4414 ;;  cp              2    0        PTR const unsigned char 
  4415 ;;  len             2    0        unsigned int 
  4416 ;;  c               1   24[BANK1 ] unsigned char 
  4417 ;;  ap              1    3[BANK1 ] PTR void [1]
  4418 ;;		 -> ?_sprintf(2), 
  4419 ;;  d               1    0        unsigned char 
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  2   63[BANK0 ] int 
  4422 ;; Registers used:
  4423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4429 ;;      Params:         0       4       0       0       0
  4430 ;;      Locals:         0       0      25       0       0
  4431 ;;      Temps:          0       6       0       0       0
  4432 ;;      Totals:         0      10      25       0       0
  4433 ;;Total ram usage:       35 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    4
  4436 ;; This function calls:
  4437 ;;		___awdiv
  4438 ;;		___ftadd
  4439 ;;		___ftge
  4440 ;;		___ftmul
  4441 ;;		___ftneg
  4442 ;;		___ftsub
  4443 ;;		___fttol
  4444 ;;		___lldiv
  4445 ;;		___llmod
  4446 ;;		___lltoft
  4447 ;;		___wmul
  4448 ;;		__div_to_l_
  4449 ;;		__tdiv_to_l_
  4450 ;;		_fround
  4451 ;;		_isdigit
  4452 ;;		_scale
  4453 ;; This function is called by:
  4454 ;;		_ADC_to_string
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           
  4459                           ;psect for function _sprintf
  4460  0D18                     _sprintf:
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4464                           ;sprintf@sp stored from wreg
  4465  0D18  1683               	bsf	3,5	;RP0=1, select bank1
  4466  0D19  1303               	bcf	3,6	;RP1=0, select bank1
  4467  0D1A  00E4               	movwf	sprintf@sp^(0+128)
  4468  0D1B                     l3872:
  4469                           
  4470                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 517:  
      +                          int prec;
  4471  0D1B  3060               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  4472  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  4473  0D1D  1303               	bcf	3,6	;RP1=0, select bank0
  4474  0D1E  00E3               	movwf	??_sprintf
  4475  0D1F  0863               	movf	??_sprintf,w
  4476  0D20  1683               	bsf	3,5	;RP0=1, select bank1
  4477  0D21  1303               	bcf	3,6	;RP1=0, select bank1
  4478  0D22  00D2               	movwf	sprintf@ap^(0+128)
  4479  0D23                     L1:
  4480                           
  4481                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4482  0D23  120A  118A  2EBA   	goto	l4152
  4483  0D26                     l3874:
  4484                           
  4485                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4486  0D26  3025               	movlw	37
  4487  0D27  0667               	xorwf	sprintf@c^(0+128),w
  4488  0D28  1903               	btfsc	3,2
  4489  0D29  2D2B               	goto	u5481
  4490  0D2A  2D2C               	goto	u5480
  4491  0D2B                     u5481:
  4492  0D2B  2D40               	goto	l3880
  4493  0D2C                     u5480:
  4494  0D2C                     l3876:
  4495                           
  4496                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4497  0D2C  0867               	movf	sprintf@c^(0+128),w
  4498  0D2D  1283               	bcf	3,5	;RP0=0, select bank0
  4499  0D2E  1303               	bcf	3,6	;RP1=0, select bank0
  4500  0D2F  00E3               	movwf	??_sprintf
  4501  0D30  1683               	bsf	3,5	;RP0=1, select bank1
  4502  0D31  1303               	bcf	3,6	;RP1=0, select bank1
  4503  0D32  0864               	movf	sprintf@sp^(0+128),w
  4504  0D33  0084               	movwf	4
  4505  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  4506  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  4507  0D36  0863               	movf	??_sprintf,w
  4508  0D37  1383               	bcf	3,7	;select IRP bank0
  4509  0D38  0080               	movwf	0
  4510  0D39                     l3878:
  4511  0D39  3001               	movlw	1
  4512  0D3A  00E3               	movwf	??_sprintf
  4513  0D3B  0863               	movf	??_sprintf,w
  4514  0D3C  1683               	bsf	3,5	;RP0=1, select bank1
  4515  0D3D  1303               	bcf	3,6	;RP1=0, select bank1
  4516  0D3E  07E4               	addwf	sprintf@sp^(0+128),f
  4517                           
  4518                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  4519  0D3F  2D23               	goto	L1
  4520  0D40                     l3880:
  4521                           
  4522                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  4523  0D40  01D5               	clrf	sprintf@width^(0+128)
  4524  0D41  01D6               	clrf	(sprintf@width+1)^(0+128)
  4525                           
  4526                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4527  0D42  01D3               	clrf	sprintf@flag^(0+128)
  4528  0D43  01D4               	clrf	(sprintf@flag+1)^(0+128)
  4529  0D44                     l3882:
  4530                           
  4531                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  4532  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  4533  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  4534  0D46  085F               	movf	sprintf@f,w
  4535  0D47  0084               	movwf	4
  4536  0D48  160A  118A  200A  120A  158A  	fcall	stringdir
  4537  0D4D  160A  158A  242C  120A  158A  	fcall	_isdigit
  4538  0D52  1C03               	btfss	3,0
  4539  0D53  2D55               	goto	u5491
  4540  0D54  2D56               	goto	u5490
  4541  0D55                     u5491:
  4542  0D55  2DA0               	goto	l3894
  4543  0D56                     u5490:
  4544  0D56                     l3884:
  4545                           
  4546                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  4547  0D56  1683               	bsf	3,5	;RP0=1, select bank1
  4548  0D57  1303               	bcf	3,6	;RP1=0, select bank1
  4549  0D58  01D5               	clrf	sprintf@width^(0+128)
  4550  0D59  01D6               	clrf	(sprintf@width+1)^(0+128)
  4551  0D5A                     l3886:
  4552                           
  4553                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  4554  0D5A  300A               	movlw	10
  4555  0D5B  00F2               	movwf	___wmul@multiplier
  4556  0D5C  3000               	movlw	0
  4557  0D5D  00F3               	movwf	___wmul@multiplier+1
  4558  0D5E  1683               	bsf	3,5	;RP0=1, select bank1
  4559  0D5F  1303               	bcf	3,6	;RP1=0, select bank1
  4560  0D60  0856               	movf	(sprintf@width+1)^(0+128),w
  4561  0D61  00F5               	movwf	___wmul@multiplicand+1
  4562  0D62  0855               	movf	sprintf@width^(0+128),w
  4563  0D63  00F4               	movwf	___wmul@multiplicand
  4564  0D64  120A  158A  2003  120A  158A  	fcall	___wmul
  4565  0D69  0873               	movf	?___wmul+1,w
  4566  0D6A  1683               	bsf	3,5	;RP0=1, select bank1
  4567  0D6B  1303               	bcf	3,6	;RP1=0, select bank1
  4568  0D6C  00D6               	movwf	(sprintf@width+1)^(0+128)
  4569  0D6D  0872               	movf	?___wmul,w
  4570  0D6E  00D5               	movwf	sprintf@width^(0+128)
  4571  0D6F                     l3888:
  4572                           
  4573                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  4574  0D6F  1283               	bcf	3,5	;RP0=0, select bank0
  4575  0D70  1303               	bcf	3,6	;RP1=0, select bank0
  4576  0D71  085F               	movf	sprintf@f,w
  4577  0D72  0084               	movwf	4
  4578  0D73  160A  118A  200A  120A  158A  	fcall	stringdir
  4579  0D78  3ED0               	addlw	208
  4580  0D79  00E3               	movwf	??_sprintf
  4581  0D7A  30FF               	movlw	255
  4582  0D7B  1803               	skipnc
  4583  0D7C  3000               	movlw	0
  4584  0D7D  00E4               	movwf	??_sprintf+1
  4585  0D7E  0863               	movf	??_sprintf,w
  4586  0D7F  1683               	bsf	3,5	;RP0=1, select bank1
  4587  0D80  1303               	bcf	3,6	;RP1=0, select bank1
  4588  0D81  07D5               	addwf	sprintf@width^(0+128),f
  4589  0D82  1803               	skipnc
  4590  0D83  0AD6               	incf	(sprintf@width+1)^(0+128),f
  4591  0D84  1283               	bcf	3,5	;RP0=0, select bank0
  4592  0D85  1303               	bcf	3,6	;RP1=0, select bank0
  4593  0D86  0864               	movf	??_sprintf+1,w
  4594  0D87  1683               	bsf	3,5	;RP0=1, select bank1
  4595  0D88  1303               	bcf	3,6	;RP1=0, select bank1
  4596  0D89  07D6               	addwf	(sprintf@width+1)^(0+128),f
  4597  0D8A                     l3890:
  4598  0D8A  3001               	movlw	1
  4599  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  4600  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  4601  0D8D  00E3               	movwf	??_sprintf
  4602  0D8E  0863               	movf	??_sprintf,w
  4603  0D8F  07DF               	addwf	sprintf@f,f
  4604  0D90                     l3892:
  4605                           
  4606                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  4607  0D90  085F               	movf	sprintf@f,w
  4608  0D91  0084               	movwf	4
  4609  0D92  160A  118A  200A  120A  158A  	fcall	stringdir
  4610  0D97  160A  158A  242C  120A  158A  	fcall	_isdigit
  4611  0D9C  1803               	btfsc	3,0
  4612  0D9D  2D9F               	goto	u5501
  4613  0D9E  2DA0               	goto	u5500
  4614  0D9F                     u5501:
  4615  0D9F  2D5A               	goto	l3886
  4616  0DA0                     u5500:
  4617  0DA0                     l3894:
  4618                           
  4619                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  4620  0DA0  1283               	bcf	3,5	;RP0=0, select bank0
  4621  0DA1  1303               	bcf	3,6	;RP1=0, select bank0
  4622  0DA2  085F               	movf	sprintf@f,w
  4623  0DA3  0084               	movwf	4
  4624  0DA4  160A  118A  200A  120A  158A  	fcall	stringdir
  4625  0DA9  3A2E               	xorlw	46
  4626  0DAA  1D03               	skipz
  4627  0DAB  2DAD               	goto	u5511
  4628  0DAC  2DAE               	goto	u5510
  4629  0DAD                     u5511:
  4630  0DAD  2E04               	goto	l3910
  4631  0DAE                     u5510:
  4632  0DAE                     l3896:
  4633                           
  4634                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 629:    flag |= 0
      +                          x4000;
  4635  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
  4636  0DAF  1303               	bcf	3,6	;RP1=0, select bank1
  4637  0DB0  1754               	bsf	(sprintf@flag^(0+128)+1),6
  4638  0DB1                     l3898:
  4639                           
  4640                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  4641  0DB1  3001               	movlw	1
  4642  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  4643  0DB3  1303               	bcf	3,6	;RP1=0, select bank0
  4644  0DB4  00E3               	movwf	??_sprintf
  4645  0DB5  0863               	movf	??_sprintf,w
  4646  0DB6  07DF               	addwf	sprintf@f,f
  4647  0DB7                     l3900:
  4648                           
  4649                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  4650  0DB7  1683               	bsf	3,5	;RP0=1, select bank1
  4651  0DB8  1303               	bcf	3,6	;RP1=0, select bank1
  4652  0DB9  01E5               	clrf	sprintf@prec^(0+128)
  4653  0DBA  01E6               	clrf	(sprintf@prec+1)^(0+128)
  4654                           
  4655                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  4656  0DBB  2DF2               	goto	l3908
  4657  0DBC                     l3902:
  4658                           
  4659                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  4660  0DBC  300A               	movlw	10
  4661  0DBD  00F2               	movwf	___wmul@multiplier
  4662  0DBE  3000               	movlw	0
  4663  0DBF  00F3               	movwf	___wmul@multiplier+1
  4664  0DC0  1683               	bsf	3,5	;RP0=1, select bank1
  4665  0DC1  1303               	bcf	3,6	;RP1=0, select bank1
  4666  0DC2  0866               	movf	(sprintf@prec+1)^(0+128),w
  4667  0DC3  00F5               	movwf	___wmul@multiplicand+1
  4668  0DC4  0865               	movf	sprintf@prec^(0+128),w
  4669  0DC5  00F4               	movwf	___wmul@multiplicand
  4670  0DC6  120A  158A  2003  120A  158A  	fcall	___wmul
  4671  0DCB  0873               	movf	?___wmul+1,w
  4672  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
  4673  0DCD  1303               	bcf	3,6	;RP1=0, select bank1
  4674  0DCE  00E6               	movwf	(sprintf@prec+1)^(0+128)
  4675  0DCF  0872               	movf	?___wmul,w
  4676  0DD0  00E5               	movwf	sprintf@prec^(0+128)
  4677  0DD1                     l3904:
  4678                           
  4679                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  4680  0DD1  1283               	bcf	3,5	;RP0=0, select bank0
  4681  0DD2  1303               	bcf	3,6	;RP1=0, select bank0
  4682  0DD3  085F               	movf	sprintf@f,w
  4683  0DD4  0084               	movwf	4
  4684  0DD5  160A  118A  200A  120A  158A  	fcall	stringdir
  4685  0DDA  3ED0               	addlw	208
  4686  0DDB  00E3               	movwf	??_sprintf
  4687  0DDC  30FF               	movlw	255
  4688  0DDD  1803               	skipnc
  4689  0DDE  3000               	movlw	0
  4690  0DDF  00E4               	movwf	??_sprintf+1
  4691  0DE0  0863               	movf	??_sprintf,w
  4692  0DE1  1683               	bsf	3,5	;RP0=1, select bank1
  4693  0DE2  1303               	bcf	3,6	;RP1=0, select bank1
  4694  0DE3  07E5               	addwf	sprintf@prec^(0+128),f
  4695  0DE4  1803               	skipnc
  4696  0DE5  0AE6               	incf	(sprintf@prec+1)^(0+128),f
  4697  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  4698  0DE7  1303               	bcf	3,6	;RP1=0, select bank0
  4699  0DE8  0864               	movf	??_sprintf+1,w
  4700  0DE9  1683               	bsf	3,5	;RP0=1, select bank1
  4701  0DEA  1303               	bcf	3,6	;RP1=0, select bank1
  4702  0DEB  07E6               	addwf	(sprintf@prec+1)^(0+128),f
  4703  0DEC                     l3906:
  4704  0DEC  3001               	movlw	1
  4705  0DED  1283               	bcf	3,5	;RP0=0, select bank0
  4706  0DEE  1303               	bcf	3,6	;RP1=0, select bank0
  4707  0DEF  00E3               	movwf	??_sprintf
  4708  0DF0  0863               	movf	??_sprintf,w
  4709  0DF1  07DF               	addwf	sprintf@f,f
  4710  0DF2                     l3908:
  4711                           
  4712                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  4713  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  4714  0DF3  085F               	movf	sprintf@f,w
  4715  0DF4  0084               	movwf	4
  4716  0DF5  160A  118A  200A  120A  158A  	fcall	stringdir
  4717  0DFA  160A  158A  242C  120A  158A  	fcall	_isdigit
  4718  0DFF  1803               	btfsc	3,0
  4719  0E00  2E02               	goto	u5521
  4720  0E01  2E03               	goto	u5520
  4721  0E02                     u5521:
  4722  0E02  2DBC               	goto	l3902
  4723  0E03                     u5520:
  4724  0E03  2E0E               	goto	l3916
  4725  0E04                     l3910:
  4726                           
  4727                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  4728  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  4729  0E05  1303               	bcf	3,6	;RP1=0, select bank1
  4730  0E06  01E5               	clrf	sprintf@prec^(0+128)
  4731  0E07  01E6               	clrf	(sprintf@prec+1)^(0+128)
  4732  0E08                     l3912:
  4733                           
  4734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 654:    flag |= 0
      +                          x1000;
  4735  0E08  1654               	bsf	(sprintf@flag^(0+128)+1),4
  4736  0E09  2E0E               	goto	l3916
  4737  0E0A                     l408:	
  4738                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 688:   case 'f':
  4739                           
  4740                           
  4741                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 689:    flag |= 0
      +                          x400;
  4742  0E0A  1683               	bsf	3,5	;RP0=1, select bank1
  4743  0E0B  1303               	bcf	3,6	;RP1=0, select bank1
  4744  0E0C  1554               	bsf	(sprintf@flag^(0+128)+1),2
  4745                           
  4746                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 690:    break;
  4747  0E0D  2E34               	goto	l3918
  4748  0E0E                     l3916:
  4749  0E0E  3001               	movlw	1
  4750  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  4751  0E10  1303               	bcf	3,6	;RP1=0, select bank0
  4752  0E11  07DF               	addwf	sprintf@f,f
  4753  0E12  30FF               	movlw	-1
  4754  0E13  075F               	addwf	sprintf@f,w
  4755  0E14  0084               	movwf	4
  4756  0E15  160A  118A  200A  120A  158A  	fcall	stringdir
  4757  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  4758  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  4759  0E1C  00E7               	movwf	sprintf@c^(0+128)
  4760  0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  4761  0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  4762  0E1F  00E3               	movwf	??_sprintf
  4763  0E20  01E4               	clrf	??_sprintf+1
  4764                           
  4765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4766                           ; Switch size 1, requested type "simple"
  4767                           ; Number of cases is 1, Range of values is 0 to 0
  4768                           ; switch strategies available:
  4769                           ; Name         Instructions Cycles
  4770                           ; simple_byte            4     3 (average)
  4771                           ; direct_byte           11     8 (fixed)
  4772                           ; jumptable            260     6 (fixed)
  4773                           ;	Chosen strategy is simple_byte
  4774  0E21  0864               	movf	??_sprintf+1,w
  4775  0E22  3A00               	xorlw	0	; case 0
  4776  0E23  1903               	skipnz
  4777  0E24  2E26               	goto	l4330
  4778  0E25  2D23               	goto	L1
  4779  0E26                     l4330:
  4780                           
  4781                           ; Switch size 1, requested type "simple"
  4782                           ; Number of cases is 4, Range of values is 0 to 105
  4783                           ; switch strategies available:
  4784                           ; Name         Instructions Cycles
  4785                           ; simple_byte           13     7 (average)
  4786                           ; jumptable            260     6 (fixed)
  4787                           ;	Chosen strategy is simple_byte
  4788  0E26  0863               	movf	??_sprintf,w
  4789  0E27  3A00               	xorlw	0	; case 0
  4790  0E28  1903               	skipnz
  4791  0E29  2FFD               	goto	L3
  4792  0E2A  3A64               	xorlw	100	; case 100
  4793  0E2B  1903               	skipnz
  4794  0E2C  2E34               	goto	l3918
  4795  0E2D  3A02               	xorlw	2	; case 102
  4796  0E2E  1903               	skipnz
  4797  0E2F  2E0A               	goto	l408
  4798  0E30  3A0F               	xorlw	15	; case 105
  4799  0E31  1903               	skipnz
  4800  0E32  2E34               	goto	l3918
  4801  0E33  2D23               	goto	L1
  4802  0E34                     l3918:
  4803                           
  4804                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 851:   if(flag & 
      +                          (0x700)) {
  4805  0E34  3000               	movlw	0
  4806  0E35  1683               	bsf	3,5	;RP0=1, select bank1
  4807  0E36  1303               	bcf	3,6	;RP1=0, select bank1
  4808  0E37  0553               	andwf	sprintf@flag^(0+128),w
  4809  0E38  1283               	bcf	3,5	;RP0=0, select bank0
  4810  0E39  1303               	bcf	3,6	;RP1=0, select bank0
  4811  0E3A  00E3               	movwf	??_sprintf
  4812  0E3B  3007               	movlw	7
  4813  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  4814  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  4815  0E3E  0554               	andwf	(sprintf@flag+1)^(0+128),w
  4816  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  4817  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  4818  0E41  00E4               	movwf	??_sprintf+1
  4819  0E42  0863               	movf	??_sprintf,w
  4820  0E43  0464               	iorwf	??_sprintf+1,w
  4821  0E44  1903               	btfsc	3,2
  4822  0E45  2E47               	goto	u5531
  4823  0E46  2E4A               	goto	u5530
  4824  0E47                     u5531:
  4825  0E47  120A  118A  2CB1   	goto	l4074
  4826  0E4A                     u5530:
  4827  0E4A                     l3920:
  4828                           
  4829                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 853:    if(flag &
      +                           0x1000)
  4830  0E4A  1683               	bsf	3,5	;RP0=1, select bank1
  4831  0E4B  1303               	bcf	3,6	;RP1=0, select bank1
  4832  0E4C  1E54               	btfss	(sprintf@flag+1)^(0+128),4
  4833  0E4D  2E4F               	goto	u5541
  4834  0E4E  2E50               	goto	u5540
  4835  0E4F                     u5541:
  4836  0E4F  2E54               	goto	l3924
  4837  0E50                     u5540:
  4838  0E50                     l3922:
  4839                           
  4840                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 855:     prec = 6
      +                          ;
  4841  0E50  3006               	movlw	6
  4842  0E51  00E5               	movwf	sprintf@prec^(0+128)
  4843  0E52  3000               	movlw	0
  4844  0E53  00E6               	movwf	(sprintf@prec^(0+128)+1)
  4845  0E54                     l3924:
  4846                           
  4847                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 856:    fval = (*
      +                          (double *)__va_arg((*(double **)ap), (double)0));
  4848  0E54  0852               	movf	sprintf@ap^(0+128),w
  4849  0E55  0084               	movwf	4
  4850  0E56  1383               	bcf	3,7	;select IRP bank0
  4851  0E57  0800               	movf	0,w
  4852  0E58  00E1               	movwf	sprintf@fval^(0+128)
  4853  0E59  0A84               	incf	4,f
  4854  0E5A  0800               	movf	0,w
  4855  0E5B  00E2               	movwf	(sprintf@fval+1)^(0+128)
  4856  0E5C  0A84               	incf	4,f
  4857  0E5D  0800               	movf	0,w
  4858  0E5E  00E3               	movwf	(sprintf@fval+2)^(0+128)
  4859  0E5F                     l3926:
  4860  0E5F  3003               	movlw	3
  4861  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0E62  00E3               	movwf	??_sprintf
  4864  0E63  0863               	movf	??_sprintf,w
  4865  0E64  1683               	bsf	3,5	;RP0=1, select bank1
  4866  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  4867  0E66  07D2               	addwf	sprintf@ap^(0+128),f
  4868  0E67                     l3928:
  4869                           
  4870                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 857:    if(fval <
      +                           0.0) {
  4871  0E67  0861               	movf	sprintf@fval^(0+128),w
  4872  0E68  00F2               	movwf	___ftge@ff1
  4873  0E69  0862               	movf	(sprintf@fval+1)^(0+128),w
  4874  0E6A  00F3               	movwf	___ftge@ff1+1
  4875  0E6B  0863               	movf	(sprintf@fval+2)^(0+128),w
  4876  0E6C  00F4               	movwf	___ftge@ff1+2
  4877  0E6D  3000               	movlw	0
  4878  0E6E  00F5               	movwf	___ftge@ff2
  4879  0E6F  3000               	movlw	0
  4880  0E70  00F6               	movwf	___ftge@ff2+1
  4881  0E71  3000               	movlw	0
  4882  0E72  00F7               	movwf	___ftge@ff2+2
  4883  0E73  160A  158A  25DE  120A  158A  	fcall	___ftge
  4884  0E78  1803               	btfsc	3,0
  4885  0E79  2E7B               	goto	u5551
  4886  0E7A  2E7C               	goto	u5550
  4887  0E7B                     u5551:
  4888  0E7B  2E95               	goto	l3934
  4889  0E7C                     u5550:
  4890  0E7C                     l3930:
  4891                           
  4892                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 858:     fval = -
      +                          fval;
  4893  0E7C  1683               	bsf	3,5	;RP0=1, select bank1
  4894  0E7D  1303               	bcf	3,6	;RP1=0, select bank1
  4895  0E7E  0861               	movf	sprintf@fval^(0+128),w
  4896  0E7F  00F2               	movwf	___ftneg@f1
  4897  0E80  0862               	movf	(sprintf@fval+1)^(0+128),w
  4898  0E81  00F3               	movwf	___ftneg@f1+1
  4899  0E82  0863               	movf	(sprintf@fval+2)^(0+128),w
  4900  0E83  00F4               	movwf	___ftneg@f1+2
  4901  0E84  160A  158A  2409  120A  158A  	fcall	___ftneg
  4902  0E89  0872               	movf	?___ftneg,w
  4903  0E8A  1683               	bsf	3,5	;RP0=1, select bank1
  4904  0E8B  1303               	bcf	3,6	;RP1=0, select bank1
  4905  0E8C  00E1               	movwf	sprintf@fval^(0+128)
  4906  0E8D  0873               	movf	?___ftneg+1,w
  4907  0E8E  00E2               	movwf	(sprintf@fval+1)^(0+128)
  4908  0E8F  0874               	movf	?___ftneg+2,w
  4909  0E90  00E3               	movwf	(sprintf@fval+2)^(0+128)
  4910  0E91                     l3932:
  4911                           
  4912                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 859:     flag |= 
      +                          0x03;
  4913  0E91  3003               	movlw	3
  4914  0E92  04D3               	iorwf	sprintf@flag^(0+128),f
  4915  0E93  3000               	movlw	0
  4916  0E94  04D4               	iorwf	(sprintf@flag+1)^(0+128),f
  4917  0E95                     l3934:
  4918                           
  4919                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 861:    eexp = 0;
  4920  0E95  1683               	bsf	3,5	;RP0=1, select bank1
  4921  0E96  1303               	bcf	3,6	;RP1=0, select bank1
  4922  0E97  01DF               	clrf	sprintf@eexp^(0+128)
  4923  0E98  01E0               	clrf	(sprintf@eexp+1)^(0+128)
  4924  0E99                     l3936:
  4925                           
  4926                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 862:    if( fval!
      +                          =0) {
  4927  0E99  0863               	movf	(sprintf@fval+2)^(0+128),w
  4928  0E9A  0462               	iorwf	(sprintf@fval+1)^(0+128),w
  4929  0E9B  0461               	iorwf	sprintf@fval^(0+128),w
  4930  0E9C  1903               	skipnz
  4931  0E9D  2E9F               	goto	u5561
  4932  0E9E  2EA0               	goto	u5560
  4933  0E9F                     u5561:
  4934  0E9F  2FA2               	goto	l3962
  4935  0EA0                     u5560:
  4936  0EA0                     l3938:
  4937                           
  4938                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 863:     (void)(*
      +                          (&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  4939  0EA0  30E1               	movlw	low (sprintf@fval| 0)
  4940  0EA1  0084               	movwf	4
  4941  0EA2  1383               	bcf	3,7	;select IRP bank1
  4942  0EA3  0800               	movf	0,w
  4943  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  4944  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  4945  0EA6  00E3               	movwf	??_sprintf
  4946  0EA7  0A84               	incf	4,f
  4947  0EA8  0800               	movf	0,w
  4948  0EA9  00E4               	movwf	??_sprintf+1
  4949  0EAA  0A84               	incf	4,f
  4950  0EAB  0800               	movf	0,w
  4951  0EAC  00E5               	movwf	??_sprintf+2
  4952  0EAD  0A84               	incf	4,f
  4953  0EAE  0800               	movf	0,w
  4954  0EAF  00E6               	movwf	??_sprintf+3
  4955  0EB0  300F               	movlw	15
  4956  0EB1                     u5575:
  4957  0EB1  1003               	clrc
  4958  0EB2  0CE6               	rrf	??_sprintf+3,f
  4959  0EB3  0CE5               	rrf	??_sprintf+2,f
  4960  0EB4  0CE4               	rrf	??_sprintf+1,f
  4961  0EB5  0CE3               	rrf	??_sprintf,f
  4962  0EB6                     u5570:
  4963  0EB6  3EFF               	addlw	-1
  4964  0EB7  1D03               	skipz
  4965  0EB8  2EB1               	goto	u5575
  4966  0EB9  30FF               	movlw	255
  4967  0EBA  0563               	andwf	??_sprintf,w
  4968  0EBB  00E7               	movwf	??_sprintf+4
  4969  0EBC  3000               	movlw	0
  4970  0EBD  0564               	andwf	??_sprintf+1,w
  4971  0EBE  00E8               	movwf	??_sprintf+5
  4972  0EBF  0867               	movf	??_sprintf+4,w
  4973  0EC0  3E82               	addlw	130
  4974  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  4975  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  4976  0EC3  00DF               	movwf	sprintf@eexp^(0+128)
  4977  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  4978  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  4979  0EC6  0868               	movf	??_sprintf+5,w
  4980  0EC7  1803               	skipnc
  4981  0EC8  3E01               	addlw	1
  4982  0EC9  3EFF               	addlw	255
  4983  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  4984  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  4985  0ECC  00E0               	movwf	(sprintf@eexp+1)^(0+128)
  4986  0ECD                     l3940:
  4987                           
  4988                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 864:     eexp--;
  4989  0ECD  30FF               	movlw	255
  4990  0ECE  07DF               	addwf	sprintf@eexp^(0+128),f
  4991  0ECF  1803               	skipnc
  4992  0ED0  0AE0               	incf	(sprintf@eexp+1)^(0+128),f
  4993  0ED1  30FF               	movlw	255
  4994  0ED2  07E0               	addwf	(sprintf@eexp+1)^(0+128),f
  4995  0ED3                     l3942:
  4996                           
  4997                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 865:     eexp *= 
      +                          3;
  4998  0ED3  3003               	movlw	3
  4999  0ED4  00F2               	movwf	___wmul@multiplier
  5000  0ED5  3000               	movlw	0
  5001  0ED6  00F3               	movwf	___wmul@multiplier+1
  5002  0ED7  0860               	movf	(sprintf@eexp+1)^(0+128),w
  5003  0ED8  00F5               	movwf	___wmul@multiplicand+1
  5004  0ED9  085F               	movf	sprintf@eexp^(0+128),w
  5005  0EDA  00F4               	movwf	___wmul@multiplicand
  5006  0EDB  120A  158A  2003  120A  158A  	fcall	___wmul
  5007  0EE0  0873               	movf	?___wmul+1,w
  5008  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  5009  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  5010  0EE3  00E0               	movwf	(sprintf@eexp+1)^(0+128)
  5011  0EE4  0872               	movf	?___wmul,w
  5012  0EE5  00DF               	movwf	sprintf@eexp^(0+128)
  5013  0EE6                     l3944:
  5014                           
  5015                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 866:     eexp /= 
      +                          10;
  5016  0EE6  300A               	movlw	10
  5017  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  5018  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  5019  0EE9  00A0               	movwf	___awdiv@divisor
  5020  0EEA  3000               	movlw	0
  5021  0EEB  00A1               	movwf	___awdiv@divisor+1
  5022  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  5023  0EED  1303               	bcf	3,6	;RP1=0, select bank1
  5024  0EEE  0860               	movf	(sprintf@eexp+1)^(0+128),w
  5025  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  5026  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  5027  0EF1  00A3               	movwf	___awdiv@dividend+1
  5028  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
  5029  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
  5030  0EF4  085F               	movf	sprintf@eexp^(0+128),w
  5031  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  5032  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  5033  0EF7  00A2               	movwf	___awdiv@dividend
  5034  0EF8  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5035  0EFD  1283               	bcf	3,5	;RP0=0, select bank0
  5036  0EFE  1303               	bcf	3,6	;RP1=0, select bank0
  5037  0EFF  0821               	movf	?___awdiv+1,w
  5038  0F00  1683               	bsf	3,5	;RP0=1, select bank1
  5039  0F01  1303               	bcf	3,6	;RP1=0, select bank1
  5040  0F02  00E0               	movwf	(sprintf@eexp+1)^(0+128)
  5041  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  5042  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  5043  0F05  0820               	movf	?___awdiv,w
  5044  0F06  1683               	bsf	3,5	;RP0=1, select bank1
  5045  0F07  1303               	bcf	3,6	;RP1=0, select bank1
  5046  0F08  00DF               	movwf	sprintf@eexp^(0+128)
  5047  0F09                     l3946:
  5048                           
  5049                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 867:     if(eexp 
      +                          < 0)
  5050  0F09  1FE0               	btfss	(sprintf@eexp+1)^(0+128),7
  5051  0F0A  2F0C               	goto	u5581
  5052  0F0B  2F0D               	goto	u5580
  5053  0F0C                     u5581:
  5054  0F0C  2F13               	goto	l3950
  5055  0F0D                     u5580:
  5056  0F0D                     l3948:
  5057                           
  5058                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 868:      eexp--;
  5059  0F0D  30FF               	movlw	255
  5060  0F0E  07DF               	addwf	sprintf@eexp^(0+128),f
  5061  0F0F  1803               	skipnc
  5062  0F10  0AE0               	incf	(sprintf@eexp+1)^(0+128),f
  5063  0F11  30FF               	movlw	255
  5064  0F12  07E0               	addwf	(sprintf@eexp+1)^(0+128),f
  5065  0F13                     l3950:
  5066                           
  5067                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 872:     tmpval.i
      +                          nteg = scale(-eexp);
  5068  0F13  035F               	decf	sprintf@eexp^(0+128),w
  5069  0F14  3AFF               	xorlw	255
  5070  0F15  120A  158A  225D  120A  158A  	fcall	_scale
  5071  0F1A  1283               	bcf	3,5	;RP0=0, select bank0
  5072  0F1B  1303               	bcf	3,6	;RP1=0, select bank0
  5073  0F1C  083C               	movf	?_scale,w
  5074  0F1D  1683               	bsf	3,5	;RP0=1, select bank1
  5075  0F1E  1303               	bcf	3,6	;RP1=0, select bank1
  5076  0F1F  00D7               	movwf	sprintf@tmpval^(0+128)
  5077  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  5078  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  5079  0F22  083D               	movf	?_scale+1,w
  5080  0F23  1683               	bsf	3,5	;RP0=1, select bank1
  5081  0F24  1303               	bcf	3,6	;RP1=0, select bank1
  5082  0F25  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  5083  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  5084  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  5085  0F28  083E               	movf	?_scale+2,w
  5086  0F29  1683               	bsf	3,5	;RP0=1, select bank1
  5087  0F2A  1303               	bcf	3,6	;RP1=0, select bank1
  5088  0F2B  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  5089  0F2C                     l3952:
  5090                           
  5091                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 873:     tmpval.i
      +                          nteg *= fval;
  5092  0F2C  0861               	movf	sprintf@fval^(0+128),w
  5093  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  5094  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  5095  0F2F  00AC               	movwf	___ftmul@f1
  5096  0F30  1683               	bsf	3,5	;RP0=1, select bank1
  5097  0F31  1303               	bcf	3,6	;RP1=0, select bank1
  5098  0F32  0862               	movf	(sprintf@fval+1)^(0+128),w
  5099  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  5100  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  5101  0F35  00AD               	movwf	___ftmul@f1+1
  5102  0F36  1683               	bsf	3,5	;RP0=1, select bank1
  5103  0F37  1303               	bcf	3,6	;RP1=0, select bank1
  5104  0F38  0863               	movf	(sprintf@fval+2)^(0+128),w
  5105  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  5106  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  5107  0F3B  00AE               	movwf	___ftmul@f1+2
  5108  0F3C  1683               	bsf	3,5	;RP0=1, select bank1
  5109  0F3D  1303               	bcf	3,6	;RP1=0, select bank1
  5110  0F3E  0857               	movf	sprintf@tmpval^(0+128),w
  5111  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  5112  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  5113  0F41  00AF               	movwf	___ftmul@f2
  5114  0F42  1683               	bsf	3,5	;RP0=1, select bank1
  5115  0F43  1303               	bcf	3,6	;RP1=0, select bank1
  5116  0F44  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  5117  0F45  1283               	bcf	3,5	;RP0=0, select bank0
  5118  0F46  1303               	bcf	3,6	;RP1=0, select bank0
  5119  0F47  00B0               	movwf	___ftmul@f2+1
  5120  0F48  1683               	bsf	3,5	;RP0=1, select bank1
  5121  0F49  1303               	bcf	3,6	;RP1=0, select bank1
  5122  0F4A  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  5123  0F4B  1283               	bcf	3,5	;RP0=0, select bank0
  5124  0F4C  1303               	bcf	3,6	;RP1=0, select bank0
  5125  0F4D  00B1               	movwf	___ftmul@f2+2
  5126  0F4E  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5127  0F53  1283               	bcf	3,5	;RP0=0, select bank0
  5128  0F54  1303               	bcf	3,6	;RP1=0, select bank0
  5129  0F55  082C               	movf	?___ftmul,w
  5130  0F56  1683               	bsf	3,5	;RP0=1, select bank1
  5131  0F57  1303               	bcf	3,6	;RP1=0, select bank1
  5132  0F58  00D7               	movwf	sprintf@tmpval^(0+128)
  5133  0F59  1283               	bcf	3,5	;RP0=0, select bank0
  5134  0F5A  1303               	bcf	3,6	;RP1=0, select bank0
  5135  0F5B  082D               	movf	?___ftmul+1,w
  5136  0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  5137  0F5D  1303               	bcf	3,6	;RP1=0, select bank1
  5138  0F5E  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  5139  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  5140  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  5141  0F61  082E               	movf	?___ftmul+2,w
  5142  0F62  1683               	bsf	3,5	;RP0=1, select bank1
  5143  0F63  1303               	bcf	3,6	;RP1=0, select bank1
  5144  0F64  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  5145  0F65                     l3954:
  5146                           
  5147                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 874:     if(tmpva
      +                          l.integ < 1.0)
  5148  0F65  0857               	movf	sprintf@tmpval^(0+128),w
  5149  0F66  00F2               	movwf	___ftge@ff1
  5150  0F67  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  5151  0F68  00F3               	movwf	___ftge@ff1+1
  5152  0F69  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  5153  0F6A  00F4               	movwf	___ftge@ff1+2
  5154  0F6B  3000               	movlw	0
  5155  0F6C  00F5               	movwf	___ftge@ff2
  5156  0F6D  3080               	movlw	128
  5157  0F6E  00F6               	movwf	___ftge@ff2+1
  5158  0F6F  303F               	movlw	63
  5159  0F70  00F7               	movwf	___ftge@ff2+2
  5160  0F71  160A  158A  25DE  120A  158A  	fcall	___ftge
  5161  0F76  1803               	btfsc	3,0
  5162  0F77  2F79               	goto	u5591
  5163  0F78  2F7A               	goto	u5590
  5164  0F79                     u5591:
  5165  0F79  2F83               	goto	l3958
  5166  0F7A                     u5590:
  5167  0F7A                     l3956:
  5168                           
  5169                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 875:      eexp--;
  5170  0F7A  30FF               	movlw	255
  5171  0F7B  1683               	bsf	3,5	;RP0=1, select bank1
  5172  0F7C  1303               	bcf	3,6	;RP1=0, select bank1
  5173  0F7D  07DF               	addwf	sprintf@eexp^(0+128),f
  5174  0F7E  1803               	skipnc
  5175  0F7F  0AE0               	incf	(sprintf@eexp+1)^(0+128),f
  5176  0F80  30FF               	movlw	255
  5177  0F81  07E0               	addwf	(sprintf@eexp+1)^(0+128),f
  5178  0F82  2FA2               	goto	l3962
  5179  0F83                     l3958:
  5180  0F83  1683               	bsf	3,5	;RP0=1, select bank1
  5181  0F84  1303               	bcf	3,6	;RP1=0, select bank1
  5182  0F85  0857               	movf	sprintf@tmpval^(0+128),w
  5183  0F86  00F2               	movwf	___ftge@ff1
  5184  0F87  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  5185  0F88  00F3               	movwf	___ftge@ff1+1
  5186  0F89  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  5187  0F8A  00F4               	movwf	___ftge@ff1+2
  5188  0F8B  3000               	movlw	0
  5189  0F8C  00F5               	movwf	___ftge@ff2
  5190  0F8D  3020               	movlw	32
  5191  0F8E  00F6               	movwf	___ftge@ff2+1
  5192  0F8F  3041               	movlw	65
  5193  0F90  00F7               	movwf	___ftge@ff2+2
  5194  0F91  160A  158A  25DE  120A  158A  	fcall	___ftge
  5195  0F96  1C03               	btfss	3,0
  5196  0F97  2F99               	goto	u5601
  5197  0F98  2F9A               	goto	u5600
  5198  0F99                     u5601:
  5199  0F99  2FA2               	goto	l3962
  5200  0F9A                     u5600:
  5201  0F9A                     l3960:
  5202                           
  5203                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 877:      eexp++;
  5204  0F9A  3001               	movlw	1
  5205  0F9B  1683               	bsf	3,5	;RP0=1, select bank1
  5206  0F9C  1303               	bcf	3,6	;RP1=0, select bank1
  5207  0F9D  07DF               	addwf	sprintf@eexp^(0+128),f
  5208  0F9E  1803               	skipnc
  5209  0F9F  0AE0               	incf	(sprintf@eexp+1)^(0+128),f
  5210  0FA0  3000               	movlw	0
  5211  0FA1  07E0               	addwf	(sprintf@eexp+1)^(0+128),f
  5212  0FA2                     l3962:
  5213                           
  5214                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1138:      if(pre
      +                          c <= 12)
  5215  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  5216  0FA3  1303               	bcf	3,6	;RP1=0, select bank1
  5217  0FA4  0866               	movf	(sprintf@prec+1)^(0+128),w
  5218  0FA5  3A80               	xorlw	128
  5219  0FA6  00FF               	movwf	btemp+1
  5220  0FA7  3080               	movlw	128
  5221  0FA8  027F               	subwf	btemp+1,w
  5222  0FA9  1D03               	skipz
  5223  0FAA  2FAD               	goto	u5615
  5224  0FAB  300D               	movlw	13
  5225  0FAC  0265               	subwf	sprintf@prec^(0+128),w
  5226  0FAD                     u5615:
  5227  0FAD  1803               	skipnc
  5228  0FAE  2FB0               	goto	u5611
  5229  0FAF  2FB1               	goto	u5610
  5230  0FB0                     u5611:
  5231  0FB0  2FEA               	goto	l3966
  5232  0FB1                     u5610:
  5233  0FB1                     l3964:
  5234                           
  5235                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1139:       fval 
      +                          += fround((unsigned int)prec);
  5236  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  5237  0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  5238  0FB3  0865               	movf	sprintf@prec^(0+128),w
  5239  0FB4  120A  158A  20B4  120A  158A  	fcall	_fround
  5240  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  5241  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  5242  0FBB  083C               	movf	?_fround,w
  5243  0FBC  00CC               	movwf	___ftadd@f1
  5244  0FBD  083D               	movf	?_fround+1,w
  5245  0FBE  00CD               	movwf	___ftadd@f1+1
  5246  0FBF  083E               	movf	?_fround+2,w
  5247  0FC0  00CE               	movwf	___ftadd@f1+2
  5248  0FC1  1683               	bsf	3,5	;RP0=1, select bank1
  5249  0FC2  1303               	bcf	3,6	;RP1=0, select bank1
  5250  0FC3  0861               	movf	sprintf@fval^(0+128),w
  5251  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  5252  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  5253  0FC6  00CF               	movwf	___ftadd@f2
  5254  0FC7  1683               	bsf	3,5	;RP0=1, select bank1
  5255  0FC8  1303               	bcf	3,6	;RP1=0, select bank1
  5256  0FC9  0862               	movf	(sprintf@fval+1)^(0+128),w
  5257  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  5258  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  5259  0FCC  00D0               	movwf	___ftadd@f2+1
  5260  0FCD  1683               	bsf	3,5	;RP0=1, select bank1
  5261  0FCE  1303               	bcf	3,6	;RP1=0, select bank1
  5262  0FCF  0863               	movf	(sprintf@fval+2)^(0+128),w
  5263  0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  5264  0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  5265  0FD2  00D1               	movwf	___ftadd@f2+2
  5266  0FD3  160A  118A  26CA  120A  158A  	fcall	___ftadd
  5267  0FD8  1283               	bcf	3,5	;RP0=0, select bank0
  5268  0FD9  1303               	bcf	3,6	;RP1=0, select bank0
  5269  0FDA  084C               	movf	?___ftadd,w
  5270  0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  5271  0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  5272  0FDD  00E1               	movwf	sprintf@fval^(0+128)
  5273  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5274  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  5275  0FE0  084D               	movf	?___ftadd+1,w
  5276  0FE1  1683               	bsf	3,5	;RP0=1, select bank1
  5277  0FE2  1303               	bcf	3,6	;RP1=0, select bank1
  5278  0FE3  00E2               	movwf	(sprintf@fval+1)^(0+128)
  5279  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  5280  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  5281  0FE6  084E               	movf	?___ftadd+2,w
  5282  0FE7  1683               	bsf	3,5	;RP0=1, select bank1
  5283  0FE8  1303               	bcf	3,6	;RP1=0, select bank1
  5284  0FE9  00E3               	movwf	(sprintf@fval+2)^(0+128)
  5285  0FEA                     l3966:
  5286                           
  5287                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1142:     if((eex
      +                          p > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  5288  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  5289  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  5290  0FEC  0860               	movf	(sprintf@eexp+1)^(0+128),w
  5291  0FED  3A80               	xorlw	128
  5292  0FEE  00FF               	movwf	btemp+1
  5293  0FEF  3080               	movlw	128
  5294  0FF0  027F               	subwf	btemp+1,w
  5295  0FF1  1D03               	skipz
  5296  0FF2  2FF5               	goto	u5625
  5297  0FF3  300A               	movlw	10
  5298  0FF4  025F               	subwf	sprintf@eexp^(0+128),w
  5299  0FF5                     u5625:
  5300  0FF5  1803               	skipnc
  5301  0FF6  2FFA               	goto	u5621
  5302  0FF7  120A  118A  2824   	goto	u5620
  5303  0FFA                     u5621:
  5304  0FFA  120A  118A  285B   	goto	l3974
  5305  0FFD                     L3:
  5306  0FFD                     L2:
  5307  0FFD  120A  118A  2ED1   	ljmp	l4154
  5308                           
  5309                           	psect	text28
  5310  0A5D                     __ptext28:	
  5311 ;; *************** function _scale *****************
  5312 ;; Defined at:
  5313 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;  scl             1    wreg     char 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  scl             1   36[BANK0 ] char 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  3   28[BANK0 ] char 
  5320 ;; Registers used:
  5321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5327 ;;      Params:         0       3       0       0       0
  5328 ;;      Locals:         0       4       0       0       0
  5329 ;;      Temps:          0       2       0       0       0
  5330 ;;      Totals:         0       9       0       0       0
  5331 ;;Total ram usage:        9 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    3
  5334 ;; This function calls:
  5335 ;;		___awdiv
  5336 ;;		___awmod
  5337 ;;		___bmul
  5338 ;;		___ftmul
  5339 ;; This function is called by:
  5340 ;;		_sprintf
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           
  5345                           ;psect for function _scale
  5346  0A5D                     _scale:
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5350                           ;scale@scl stored from wreg
  5351  0A5D  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0A5E  1303               	bcf	3,6	;RP1=0, select bank0
  5353  0A5F  00C4               	movwf	scale@scl
  5354  0A60                     l3698:
  5355                           
  5356                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 433: scale(signed
      +                           char scl);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 434: {;
      +                          C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 436:  if(scl < 0) 
      +                          {
  5357  0A60  1FC4               	btfss	scale@scl,7
  5358  0A61  2A63               	goto	u5091
  5359  0A62  2A64               	goto	u5090
  5360  0A63                     u5091:
  5361  0A63  2BBF               	goto	l3720
  5362  0A64                     u5090:
  5363  0A64                     l3700:
  5364                           
  5365                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 437:   scl = -scl
      +                          ;
  5366  0A64  09C4               	comf	scale@scl,f
  5367  0A65  0AC4               	incf	scale@scl,f
  5368  0A66                     l3702:
  5369                           
  5370                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 438:   if(scl>=11
      +                          0)
  5371  0A66  0844               	movf	scale@scl,w
  5372  0A67  3A80               	xorlw	128
  5373  0A68  3E12               	addlw	-238
  5374  0A69  1C03               	skipc
  5375  0A6A  2A6C               	goto	u5101
  5376  0A6B  2A6D               	goto	u5100
  5377  0A6C                     u5101:
  5378  0A6C  2B2B               	goto	l3710
  5379  0A6D                     u5100:
  5380  0A6D                     l3704:
  5381                           
  5382                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  5383  0A6D  3003               	movlw	3
  5384  0A6E  00BF               	movwf	??_scale
  5385  0A6F  083F               	movf	??_scale,w
  5386  0A70  00A8               	movwf	___bmul@multiplicand
  5387  0A71  0844               	movf	scale@scl,w
  5388  0A72  00F4               	movwf	___awmod@dividend
  5389  0A73  01F5               	clrf	___awmod@dividend+1
  5390  0A74  1BF4               	btfsc	___awmod@dividend,7
  5391  0A75  03F5               	decf	___awmod@dividend+1,f
  5392  0A76  3064               	movlw	100
  5393  0A77  00F2               	movwf	___awmod@divisor
  5394  0A78  3000               	movlw	0
  5395  0A79  00F3               	movwf	___awmod@divisor+1
  5396  0A7A  160A  118A  2151  120A  158A  	fcall	___awmod
  5397  0A7F  0873               	movf	?___awmod+1,w
  5398  0A80  1283               	bcf	3,5	;RP0=0, select bank0
  5399  0A81  1303               	bcf	3,6	;RP1=0, select bank0
  5400  0A82  00A3               	movwf	___awdiv@dividend+1
  5401  0A83  0872               	movf	?___awmod,w
  5402  0A84  00A2               	movwf	___awdiv@dividend
  5403  0A85  300A               	movlw	10
  5404  0A86  00A0               	movwf	___awdiv@divisor
  5405  0A87  3000               	movlw	0
  5406  0A88  00A1               	movwf	___awdiv@divisor+1
  5407  0A89  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5408  0A8E  1283               	bcf	3,5	;RP0=0, select bank0
  5409  0A8F  1303               	bcf	3,6	;RP1=0, select bank0
  5410  0A90  0820               	movf	?___awdiv,w
  5411  0A91  160A  158A  246A  120A  158A  	fcall	___bmul
  5412  0A96  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  5413  0A97  0084               	movwf	4
  5414  0A98  160A  118A  200A  120A  158A  	fcall	stringdir
  5415  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  5416  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  5417  0A9F  00AC               	movwf	___ftmul@f1
  5418  0AA0  160A  118A  200A  120A  158A  	fcall	stringdir
  5419  0AA5  00AD               	movwf	___ftmul@f1+1
  5420  0AA6  160A  118A  200A  120A  158A  	fcall	stringdir
  5421  0AAB  00AE               	movwf	___ftmul@f1+2
  5422  0AAC  3003               	movlw	3
  5423  0AAD  00C0               	movwf	??_scale+1
  5424  0AAE  0840               	movf	??_scale+1,w
  5425  0AAF  00A8               	movwf	___bmul@multiplicand
  5426  0AB0  0844               	movf	scale@scl,w
  5427  0AB1  00A2               	movwf	___awdiv@dividend
  5428  0AB2  01A3               	clrf	___awdiv@dividend+1
  5429  0AB3  1BA2               	btfsc	___awdiv@dividend,7
  5430  0AB4  03A3               	decf	___awdiv@dividend+1,f
  5431  0AB5  3064               	movlw	100
  5432  0AB6  00A0               	movwf	___awdiv@divisor
  5433  0AB7  3000               	movlw	0
  5434  0AB8  00A1               	movwf	___awdiv@divisor+1
  5435  0AB9  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5436  0ABE  1283               	bcf	3,5	;RP0=0, select bank0
  5437  0ABF  1303               	bcf	3,6	;RP1=0, select bank0
  5438  0AC0  0820               	movf	?___awdiv,w
  5439  0AC1  160A  158A  246A  120A  158A  	fcall	___bmul
  5440  0AC6  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  5441  0AC7  0084               	movwf	4
  5442  0AC8  160A  118A  200A  120A  158A  	fcall	stringdir
  5443  0ACD  1283               	bcf	3,5	;RP0=0, select bank0
  5444  0ACE  1303               	bcf	3,6	;RP1=0, select bank0
  5445  0ACF  00AF               	movwf	___ftmul@f2
  5446  0AD0  160A  118A  200A  120A  158A  	fcall	stringdir
  5447  0AD5  00B0               	movwf	___ftmul@f2+1
  5448  0AD6  160A  118A  200A  120A  158A  	fcall	stringdir
  5449  0ADB  00B1               	movwf	___ftmul@f2+2
  5450  0ADC  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5451  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  5452  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  5453  0AE3  082C               	movf	?___ftmul,w
  5454  0AE4  00C1               	movwf	_scale$1240
  5455  0AE5  082D               	movf	?___ftmul+1,w
  5456  0AE6  00C2               	movwf	_scale$1240+1
  5457  0AE7  082E               	movf	?___ftmul+2,w
  5458  0AE8  00C3               	movwf	_scale$1240+2
  5459                           
  5460                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 439:    return _n
      +                          powers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char)((scl%100)/10+9)] * _npo
      +                          wers_[(unsigned char)(scl%10)];
  5461  0AE9  3003               	movlw	3
  5462  0AEA  00BF               	movwf	??_scale
  5463  0AEB  083F               	movf	??_scale,w
  5464  0AEC  00A8               	movwf	___bmul@multiplicand
  5465  0AED  0844               	movf	scale@scl,w
  5466  0AEE  00F4               	movwf	___awmod@dividend
  5467  0AEF  01F5               	clrf	___awmod@dividend+1
  5468  0AF0  1BF4               	btfsc	___awmod@dividend,7
  5469  0AF1  03F5               	decf	___awmod@dividend+1,f
  5470  0AF2  300A               	movlw	10
  5471  0AF3  00F2               	movwf	___awmod@divisor
  5472  0AF4  3000               	movlw	0
  5473  0AF5  00F3               	movwf	___awmod@divisor+1
  5474  0AF6  160A  118A  2151  120A  158A  	fcall	___awmod
  5475  0AFB  0872               	movf	?___awmod,w
  5476  0AFC  160A  158A  246A  120A  158A  	fcall	___bmul
  5477  0B01  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5478  0B02  0084               	movwf	4
  5479  0B03  160A  118A  200A  120A  158A  	fcall	stringdir
  5480  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  5481  0B09  1303               	bcf	3,6	;RP1=0, select bank0
  5482  0B0A  00AC               	movwf	___ftmul@f1
  5483  0B0B  160A  118A  200A  120A  158A  	fcall	stringdir
  5484  0B10  00AD               	movwf	___ftmul@f1+1
  5485  0B11  160A  118A  200A  120A  158A  	fcall	stringdir
  5486  0B16  00AE               	movwf	___ftmul@f1+2
  5487  0B17  0841               	movf	_scale$1240,w
  5488  0B18  00AF               	movwf	___ftmul@f2
  5489  0B19  0842               	movf	_scale$1240+1,w
  5490  0B1A  00B0               	movwf	___ftmul@f2+1
  5491  0B1B  0843               	movf	_scale$1240+2,w
  5492  0B1C  00B1               	movwf	___ftmul@f2+2
  5493  0B1D  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5494  0B22  1283               	bcf	3,5	;RP0=0, select bank0
  5495  0B23  1303               	bcf	3,6	;RP1=0, select bank0
  5496  0B24  082C               	movf	?___ftmul,w
  5497  0B25  00BC               	movwf	?_scale
  5498  0B26  082D               	movf	?___ftmul+1,w
  5499  0B27  00BD               	movwf	?_scale+1
  5500  0B28  082E               	movf	?___ftmul+2,w
  5501  0B29  00BE               	movwf	?_scale+2
  5502  0B2A  2D17               	goto	l386
  5503  0B2B                     l3710:
  5504  0B2B  0844               	movf	scale@scl,w
  5505  0B2C  3A80               	xorlw	128
  5506  0B2D  3E75               	addlw	-139
  5507  0B2E  1C03               	skipc
  5508  0B2F  2B31               	goto	u5111
  5509  0B30  2B32               	goto	u5110
  5510  0B31                     u5111:
  5511  0B31  2B9E               	goto	l3716
  5512  0B32                     u5110:
  5513  0B32                     l3712:
  5514                           
  5515                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 441:    return _n
      +                          powers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(scl%10)];
  5516  0B32  3003               	movlw	3
  5517  0B33  00BF               	movwf	??_scale
  5518  0B34  083F               	movf	??_scale,w
  5519  0B35  00A8               	movwf	___bmul@multiplicand
  5520  0B36  0844               	movf	scale@scl,w
  5521  0B37  00F4               	movwf	___awmod@dividend
  5522  0B38  01F5               	clrf	___awmod@dividend+1
  5523  0B39  1BF4               	btfsc	___awmod@dividend,7
  5524  0B3A  03F5               	decf	___awmod@dividend+1,f
  5525  0B3B  300A               	movlw	10
  5526  0B3C  00F2               	movwf	___awmod@divisor
  5527  0B3D  3000               	movlw	0
  5528  0B3E  00F3               	movwf	___awmod@divisor+1
  5529  0B3F  160A  118A  2151  120A  158A  	fcall	___awmod
  5530  0B44  0872               	movf	?___awmod,w
  5531  0B45  160A  158A  246A  120A  158A  	fcall	___bmul
  5532  0B4A  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5533  0B4B  0084               	movwf	4
  5534  0B4C  160A  118A  200A  120A  158A  	fcall	stringdir
  5535  0B51  1283               	bcf	3,5	;RP0=0, select bank0
  5536  0B52  1303               	bcf	3,6	;RP1=0, select bank0
  5537  0B53  00AC               	movwf	___ftmul@f1
  5538  0B54  160A  118A  200A  120A  158A  	fcall	stringdir
  5539  0B59  00AD               	movwf	___ftmul@f1+1
  5540  0B5A  160A  118A  200A  120A  158A  	fcall	stringdir
  5541  0B5F  00AE               	movwf	___ftmul@f1+2
  5542  0B60  3003               	movlw	3
  5543  0B61  00C0               	movwf	??_scale+1
  5544  0B62  0840               	movf	??_scale+1,w
  5545  0B63  00A8               	movwf	___bmul@multiplicand
  5546  0B64  0844               	movf	scale@scl,w
  5547  0B65  00A2               	movwf	___awdiv@dividend
  5548  0B66  01A3               	clrf	___awdiv@dividend+1
  5549  0B67  1BA2               	btfsc	___awdiv@dividend,7
  5550  0B68  03A3               	decf	___awdiv@dividend+1,f
  5551  0B69  300A               	movlw	10
  5552  0B6A  00A0               	movwf	___awdiv@divisor
  5553  0B6B  3000               	movlw	0
  5554  0B6C  00A1               	movwf	___awdiv@divisor+1
  5555  0B6D  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5556  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  5558  0B74  0820               	movf	?___awdiv,w
  5559  0B75  160A  158A  246A  120A  158A  	fcall	___bmul
  5560  0B7A  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  5561  0B7B  0084               	movwf	4
  5562  0B7C  160A  118A  200A  120A  158A  	fcall	stringdir
  5563  0B81  1283               	bcf	3,5	;RP0=0, select bank0
  5564  0B82  1303               	bcf	3,6	;RP1=0, select bank0
  5565  0B83  00AF               	movwf	___ftmul@f2
  5566  0B84  160A  118A  200A  120A  158A  	fcall	stringdir
  5567  0B89  00B0               	movwf	___ftmul@f2+1
  5568  0B8A  160A  118A  200A  120A  158A  	fcall	stringdir
  5569  0B8F  00B1               	movwf	___ftmul@f2+2
  5570  0B90  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5571  0B95  1283               	bcf	3,5	;RP0=0, select bank0
  5572  0B96  1303               	bcf	3,6	;RP1=0, select bank0
  5573  0B97  082C               	movf	?___ftmul,w
  5574  0B98  00BC               	movwf	?_scale
  5575  0B99  082D               	movf	?___ftmul+1,w
  5576  0B9A  00BD               	movwf	?_scale+1
  5577  0B9B  082E               	movf	?___ftmul+2,w
  5578  0B9C  00BE               	movwf	?_scale+2
  5579  0B9D  2D17               	goto	l386
  5580  0B9E                     l3716:
  5581                           
  5582                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 442:   return _np
      +                          owers_[(unsigned char)scl];
  5583  0B9E  3003               	movlw	3
  5584  0B9F  00BF               	movwf	??_scale
  5585  0BA0  083F               	movf	??_scale,w
  5586  0BA1  00A8               	movwf	___bmul@multiplicand
  5587  0BA2  0844               	movf	scale@scl,w
  5588  0BA3  160A  158A  246A  120A  158A  	fcall	___bmul
  5589  0BA8  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  5590  0BA9  0084               	movwf	4
  5591  0BAA  160A  118A  200A  120A  158A  	fcall	stringdir
  5592  0BAF  1283               	bcf	3,5	;RP0=0, select bank0
  5593  0BB0  1303               	bcf	3,6	;RP1=0, select bank0
  5594  0BB1  00BC               	movwf	?_scale
  5595  0BB2  160A  118A  200A  120A  158A  	fcall	stringdir
  5596  0BB7  00BD               	movwf	?_scale+1
  5597  0BB8  160A  118A  200A  120A  158A  	fcall	stringdir
  5598  0BBD  00BE               	movwf	?_scale+2
  5599  0BBE  2D17               	goto	l386
  5600  0BBF                     l3720:
  5601                           
  5602                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 444:  if(scl>=110
      +                          )
  5603  0BBF  0844               	movf	scale@scl,w
  5604  0BC0  3A80               	xorlw	128
  5605  0BC1  3E12               	addlw	-238
  5606  0BC2  1C03               	skipc
  5607  0BC3  2BC5               	goto	u5121
  5608  0BC4  2BC6               	goto	u5120
  5609  0BC5                     u5121:
  5610  0BC5  2C84               	goto	l3728
  5611  0BC6                     u5120:
  5612  0BC6                     l3722:
  5613                           
  5614                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5615  0BC6  3003               	movlw	3
  5616  0BC7  00BF               	movwf	??_scale
  5617  0BC8  083F               	movf	??_scale,w
  5618  0BC9  00A8               	movwf	___bmul@multiplicand
  5619  0BCA  0844               	movf	scale@scl,w
  5620  0BCB  00F4               	movwf	___awmod@dividend
  5621  0BCC  01F5               	clrf	___awmod@dividend+1
  5622  0BCD  1BF4               	btfsc	___awmod@dividend,7
  5623  0BCE  03F5               	decf	___awmod@dividend+1,f
  5624  0BCF  3064               	movlw	100
  5625  0BD0  00F2               	movwf	___awmod@divisor
  5626  0BD1  3000               	movlw	0
  5627  0BD2  00F3               	movwf	___awmod@divisor+1
  5628  0BD3  160A  118A  2151  120A  158A  	fcall	___awmod
  5629  0BD8  0873               	movf	?___awmod+1,w
  5630  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  5631  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  5632  0BDB  00A3               	movwf	___awdiv@dividend+1
  5633  0BDC  0872               	movf	?___awmod,w
  5634  0BDD  00A2               	movwf	___awdiv@dividend
  5635  0BDE  300A               	movlw	10
  5636  0BDF  00A0               	movwf	___awdiv@divisor
  5637  0BE0  3000               	movlw	0
  5638  0BE1  00A1               	movwf	___awdiv@divisor+1
  5639  0BE2  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5640  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  5641  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  5642  0BE9  0820               	movf	?___awdiv,w
  5643  0BEA  160A  158A  246A  120A  158A  	fcall	___bmul
  5644  0BEF  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  5645  0BF0  0084               	movwf	4
  5646  0BF1  160A  118A  200A  120A  158A  	fcall	stringdir
  5647  0BF6  1283               	bcf	3,5	;RP0=0, select bank0
  5648  0BF7  1303               	bcf	3,6	;RP1=0, select bank0
  5649  0BF8  00AC               	movwf	___ftmul@f1
  5650  0BF9  160A  118A  200A  120A  158A  	fcall	stringdir
  5651  0BFE  00AD               	movwf	___ftmul@f1+1
  5652  0BFF  160A  118A  200A  120A  158A  	fcall	stringdir
  5653  0C04  00AE               	movwf	___ftmul@f1+2
  5654  0C05  3003               	movlw	3
  5655  0C06  00C0               	movwf	??_scale+1
  5656  0C07  0840               	movf	??_scale+1,w
  5657  0C08  00A8               	movwf	___bmul@multiplicand
  5658  0C09  0844               	movf	scale@scl,w
  5659  0C0A  00A2               	movwf	___awdiv@dividend
  5660  0C0B  01A3               	clrf	___awdiv@dividend+1
  5661  0C0C  1BA2               	btfsc	___awdiv@dividend,7
  5662  0C0D  03A3               	decf	___awdiv@dividend+1,f
  5663  0C0E  3064               	movlw	100
  5664  0C0F  00A0               	movwf	___awdiv@divisor
  5665  0C10  3000               	movlw	0
  5666  0C11  00A1               	movwf	___awdiv@divisor+1
  5667  0C12  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5668  0C17  1283               	bcf	3,5	;RP0=0, select bank0
  5669  0C18  1303               	bcf	3,6	;RP1=0, select bank0
  5670  0C19  0820               	movf	?___awdiv,w
  5671  0C1A  160A  158A  246A  120A  158A  	fcall	___bmul
  5672  0C1F  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  5673  0C20  0084               	movwf	4
  5674  0C21  160A  118A  200A  120A  158A  	fcall	stringdir
  5675  0C26  1283               	bcf	3,5	;RP0=0, select bank0
  5676  0C27  1303               	bcf	3,6	;RP1=0, select bank0
  5677  0C28  00AF               	movwf	___ftmul@f2
  5678  0C29  160A  118A  200A  120A  158A  	fcall	stringdir
  5679  0C2E  00B0               	movwf	___ftmul@f2+1
  5680  0C2F  160A  118A  200A  120A  158A  	fcall	stringdir
  5681  0C34  00B1               	movwf	___ftmul@f2+2
  5682  0C35  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5683  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  5684  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  5685  0C3C  082C               	movf	?___ftmul,w
  5686  0C3D  00C1               	movwf	_scale$1240
  5687  0C3E  082D               	movf	?___ftmul+1,w
  5688  0C3F  00C2               	movwf	_scale$1240+1
  5689  0C40  082E               	movf	?___ftmul+2,w
  5690  0C41  00C3               	movwf	_scale$1240+2
  5691                           
  5692                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 445:   return _po
      +                          wers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)((scl%100)/10+9)] * _powers
      +                          _[(unsigned char)(scl%10)];
  5693  0C42  3003               	movlw	3
  5694  0C43  00BF               	movwf	??_scale
  5695  0C44  083F               	movf	??_scale,w
  5696  0C45  00A8               	movwf	___bmul@multiplicand
  5697  0C46  0844               	movf	scale@scl,w
  5698  0C47  00F4               	movwf	___awmod@dividend
  5699  0C48  01F5               	clrf	___awmod@dividend+1
  5700  0C49  1BF4               	btfsc	___awmod@dividend,7
  5701  0C4A  03F5               	decf	___awmod@dividend+1,f
  5702  0C4B  300A               	movlw	10
  5703  0C4C  00F2               	movwf	___awmod@divisor
  5704  0C4D  3000               	movlw	0
  5705  0C4E  00F3               	movwf	___awmod@divisor+1
  5706  0C4F  160A  118A  2151  120A  158A  	fcall	___awmod
  5707  0C54  0872               	movf	?___awmod,w
  5708  0C55  160A  158A  246A  120A  158A  	fcall	___bmul
  5709  0C5A  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5710  0C5B  0084               	movwf	4
  5711  0C5C  160A  118A  200A  120A  158A  	fcall	stringdir
  5712  0C61  1283               	bcf	3,5	;RP0=0, select bank0
  5713  0C62  1303               	bcf	3,6	;RP1=0, select bank0
  5714  0C63  00AC               	movwf	___ftmul@f1
  5715  0C64  160A  118A  200A  120A  158A  	fcall	stringdir
  5716  0C69  00AD               	movwf	___ftmul@f1+1
  5717  0C6A  160A  118A  200A  120A  158A  	fcall	stringdir
  5718  0C6F  00AE               	movwf	___ftmul@f1+2
  5719  0C70  0841               	movf	_scale$1240,w
  5720  0C71  00AF               	movwf	___ftmul@f2
  5721  0C72  0842               	movf	_scale$1240+1,w
  5722  0C73  00B0               	movwf	___ftmul@f2+1
  5723  0C74  0843               	movf	_scale$1240+2,w
  5724  0C75  00B1               	movwf	___ftmul@f2+2
  5725  0C76  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5726  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  5727  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  5728  0C7D  082C               	movf	?___ftmul,w
  5729  0C7E  00BC               	movwf	?_scale
  5730  0C7F  082D               	movf	?___ftmul+1,w
  5731  0C80  00BD               	movwf	?_scale+1
  5732  0C81  082E               	movf	?___ftmul+2,w
  5733  0C82  00BE               	movwf	?_scale+2
  5734  0C83  2D17               	goto	l386
  5735  0C84                     l3728:
  5736  0C84  0844               	movf	scale@scl,w
  5737  0C85  3A80               	xorlw	128
  5738  0C86  3E75               	addlw	-139
  5739  0C87  1C03               	skipc
  5740  0C88  2C8A               	goto	u5131
  5741  0C89  2C8B               	goto	u5130
  5742  0C8A                     u5131:
  5743  0C8A  2CF7               	goto	l3734
  5744  0C8B                     u5130:
  5745  0C8B                     l3730:
  5746                           
  5747                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 447:   return _po
      +                          wers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(scl%10)];
  5748  0C8B  3003               	movlw	3
  5749  0C8C  00BF               	movwf	??_scale
  5750  0C8D  083F               	movf	??_scale,w
  5751  0C8E  00A8               	movwf	___bmul@multiplicand
  5752  0C8F  0844               	movf	scale@scl,w
  5753  0C90  00F4               	movwf	___awmod@dividend
  5754  0C91  01F5               	clrf	___awmod@dividend+1
  5755  0C92  1BF4               	btfsc	___awmod@dividend,7
  5756  0C93  03F5               	decf	___awmod@dividend+1,f
  5757  0C94  300A               	movlw	10
  5758  0C95  00F2               	movwf	___awmod@divisor
  5759  0C96  3000               	movlw	0
  5760  0C97  00F3               	movwf	___awmod@divisor+1
  5761  0C98  160A  118A  2151  120A  158A  	fcall	___awmod
  5762  0C9D  0872               	movf	?___awmod,w
  5763  0C9E  160A  158A  246A  120A  158A  	fcall	___bmul
  5764  0CA3  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5765  0CA4  0084               	movwf	4
  5766  0CA5  160A  118A  200A  120A  158A  	fcall	stringdir
  5767  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  5768  0CAB  1303               	bcf	3,6	;RP1=0, select bank0
  5769  0CAC  00AC               	movwf	___ftmul@f1
  5770  0CAD  160A  118A  200A  120A  158A  	fcall	stringdir
  5771  0CB2  00AD               	movwf	___ftmul@f1+1
  5772  0CB3  160A  118A  200A  120A  158A  	fcall	stringdir
  5773  0CB8  00AE               	movwf	___ftmul@f1+2
  5774  0CB9  3003               	movlw	3
  5775  0CBA  00C0               	movwf	??_scale+1
  5776  0CBB  0840               	movf	??_scale+1,w
  5777  0CBC  00A8               	movwf	___bmul@multiplicand
  5778  0CBD  0844               	movf	scale@scl,w
  5779  0CBE  00A2               	movwf	___awdiv@dividend
  5780  0CBF  01A3               	clrf	___awdiv@dividend+1
  5781  0CC0  1BA2               	btfsc	___awdiv@dividend,7
  5782  0CC1  03A3               	decf	___awdiv@dividend+1,f
  5783  0CC2  300A               	movlw	10
  5784  0CC3  00A0               	movwf	___awdiv@divisor
  5785  0CC4  3000               	movlw	0
  5786  0CC5  00A1               	movwf	___awdiv@divisor+1
  5787  0CC6  160A  118A  22CC  120A  158A  	fcall	___awdiv
  5788  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  5789  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  5790  0CCD  0820               	movf	?___awdiv,w
  5791  0CCE  160A  158A  246A  120A  158A  	fcall	___bmul
  5792  0CD3  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  5793  0CD4  0084               	movwf	4
  5794  0CD5  160A  118A  200A  120A  158A  	fcall	stringdir
  5795  0CDA  1283               	bcf	3,5	;RP0=0, select bank0
  5796  0CDB  1303               	bcf	3,6	;RP1=0, select bank0
  5797  0CDC  00AF               	movwf	___ftmul@f2
  5798  0CDD  160A  118A  200A  120A  158A  	fcall	stringdir
  5799  0CE2  00B0               	movwf	___ftmul@f2+1
  5800  0CE3  160A  118A  200A  120A  158A  	fcall	stringdir
  5801  0CE8  00B1               	movwf	___ftmul@f2+2
  5802  0CE9  120A  118A  26D8  120A  158A  	fcall	___ftmul
  5803  0CEE  1283               	bcf	3,5	;RP0=0, select bank0
  5804  0CEF  1303               	bcf	3,6	;RP1=0, select bank0
  5805  0CF0  082C               	movf	?___ftmul,w
  5806  0CF1  00BC               	movwf	?_scale
  5807  0CF2  082D               	movf	?___ftmul+1,w
  5808  0CF3  00BD               	movwf	?_scale+1
  5809  0CF4  082E               	movf	?___ftmul+2,w
  5810  0CF5  00BE               	movwf	?_scale+2
  5811  0CF6  2D17               	goto	l386
  5812  0CF7                     l3734:
  5813                           
  5814                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 448:  return _pow
      +                          ers_[(unsigned char)scl];
  5815  0CF7  3003               	movlw	3
  5816  0CF8  00BF               	movwf	??_scale
  5817  0CF9  083F               	movf	??_scale,w
  5818  0CFA  00A8               	movwf	___bmul@multiplicand
  5819  0CFB  0844               	movf	scale@scl,w
  5820  0CFC  160A  158A  246A  120A  158A  	fcall	___bmul
  5821  0D01  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  5822  0D02  0084               	movwf	4
  5823  0D03  160A  118A  200A  120A  158A  	fcall	stringdir
  5824  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  5825  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  5826  0D0A  00BC               	movwf	?_scale
  5827  0D0B  160A  118A  200A  120A  158A  	fcall	stringdir
  5828  0D10  00BD               	movwf	?_scale+1
  5829  0D11  160A  118A  200A  120A  158A  	fcall	stringdir
  5830  0D16  00BE               	movwf	?_scale+2
  5831  0D17                     l386:
  5832  0D17  0008               	return
  5833  0D18                     __end_of_scale:
  5834                           
  5835                           	psect	text29
  5836  1151                     __ptext29:	
  5837 ;; *************** function ___awmod *****************
  5838 ;; Defined at:
  5839 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awmod.c"
  5840 ;; Parameters:    Size  Location     Type
  5841 ;;  divisor         2    2[COMMON] int 
  5842 ;;  dividend        2    4[COMMON] int 
  5843 ;; Auto vars:     Size  Location     Type
  5844 ;;  sign            1    8[COMMON] unsigned char 
  5845 ;;  counter         1    7[COMMON] unsigned char 
  5846 ;; Return value:  Size  Location     Type
  5847 ;;                  2    2[COMMON] int 
  5848 ;; Registers used:
  5849 ;;		wreg, status,2, status,0
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5855 ;;      Params:         4       0       0       0       0
  5856 ;;      Locals:         2       0       0       0       0
  5857 ;;      Temps:          1       0       0       0       0
  5858 ;;      Totals:         7       0       0       0       0
  5859 ;;Total ram usage:        7 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    1
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_scale
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           
  5870                           ;psect for function ___awmod
  5871  1151                     ___awmod:
  5872  1151                     l2324:	
  5873                           ;incstack = 0
  5874                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5875                           
  5876  1151  01F8               	clrf	___awmod@sign
  5877  1152                     l2326:
  5878  1152  1FF5               	btfss	___awmod@dividend+1,7
  5879  1153  2955               	goto	u2501
  5880  1154  2956               	goto	u2500
  5881  1155                     u2501:
  5882  1155  295D               	goto	l2332
  5883  1156                     u2500:
  5884  1156                     l2328:
  5885  1156  09F4               	comf	___awmod@dividend,f
  5886  1157  09F5               	comf	___awmod@dividend+1,f
  5887  1158  0AF4               	incf	___awmod@dividend,f
  5888  1159  1903               	skipnz
  5889  115A  0AF5               	incf	___awmod@dividend+1,f
  5890  115B                     l2330:
  5891  115B  01F8               	clrf	___awmod@sign
  5892  115C  0AF8               	incf	___awmod@sign,f
  5893  115D                     l2332:
  5894  115D  1FF3               	btfss	___awmod@divisor+1,7
  5895  115E  2960               	goto	u2511
  5896  115F  2961               	goto	u2510
  5897  1160                     u2511:
  5898  1160  2966               	goto	l2336
  5899  1161                     u2510:
  5900  1161                     l2334:
  5901  1161  09F2               	comf	___awmod@divisor,f
  5902  1162  09F3               	comf	___awmod@divisor+1,f
  5903  1163  0AF2               	incf	___awmod@divisor,f
  5904  1164  1903               	skipnz
  5905  1165  0AF3               	incf	___awmod@divisor+1,f
  5906  1166                     l2336:
  5907  1166  0872               	movf	___awmod@divisor,w
  5908  1167  0473               	iorwf	___awmod@divisor+1,w
  5909  1168  1903               	btfsc	3,2
  5910  1169  296B               	goto	u2521
  5911  116A  296C               	goto	u2520
  5912  116B                     u2521:
  5913  116B  299B               	goto	l2354
  5914  116C                     u2520:
  5915  116C                     l2338:
  5916  116C  01F7               	clrf	___awmod@counter
  5917  116D  0AF7               	incf	___awmod@counter,f
  5918  116E  297A               	goto	l2344
  5919  116F                     l2340:
  5920  116F  3001               	movlw	1
  5921  1170                     u2535:
  5922  1170  1003               	clrc
  5923  1171  0DF2               	rlf	___awmod@divisor,f
  5924  1172  0DF3               	rlf	___awmod@divisor+1,f
  5925  1173  3EFF               	addlw	-1
  5926  1174  1D03               	skipz
  5927  1175  2970               	goto	u2535
  5928  1176                     l2342:
  5929  1176  3001               	movlw	1
  5930  1177  00F6               	movwf	??___awmod
  5931  1178  0876               	movf	??___awmod,w
  5932  1179  07F7               	addwf	___awmod@counter,f
  5933  117A                     l2344:
  5934  117A  1FF3               	btfss	___awmod@divisor+1,7
  5935  117B  297D               	goto	u2541
  5936  117C  297E               	goto	u2540
  5937  117D                     u2541:
  5938  117D  296F               	goto	l2340
  5939  117E                     u2540:
  5940  117E                     l2346:
  5941  117E  0873               	movf	___awmod@divisor+1,w
  5942  117F  0275               	subwf	___awmod@dividend+1,w
  5943  1180  1D03               	skipz
  5944  1181  2984               	goto	u2555
  5945  1182  0872               	movf	___awmod@divisor,w
  5946  1183  0274               	subwf	___awmod@dividend,w
  5947  1184                     u2555:
  5948  1184  1C03               	skipc
  5949  1185  2987               	goto	u2551
  5950  1186  2988               	goto	u2550
  5951  1187                     u2551:
  5952  1187  298E               	goto	l2350
  5953  1188                     u2550:
  5954  1188                     l2348:
  5955  1188  0872               	movf	___awmod@divisor,w
  5956  1189  02F4               	subwf	___awmod@dividend,f
  5957  118A  0873               	movf	___awmod@divisor+1,w
  5958  118B  1C03               	skipc
  5959  118C  03F5               	decf	___awmod@dividend+1,f
  5960  118D  02F5               	subwf	___awmod@dividend+1,f
  5961  118E                     l2350:
  5962  118E  3001               	movlw	1
  5963  118F                     u2565:
  5964  118F  1003               	clrc
  5965  1190  0CF3               	rrf	___awmod@divisor+1,f
  5966  1191  0CF2               	rrf	___awmod@divisor,f
  5967  1192  3EFF               	addlw	-1
  5968  1193  1D03               	skipz
  5969  1194  298F               	goto	u2565
  5970  1195                     l2352:
  5971  1195  3001               	movlw	1
  5972  1196  02F7               	subwf	___awmod@counter,f
  5973  1197  1D03               	btfss	3,2
  5974  1198  299A               	goto	u2571
  5975  1199  299B               	goto	u2570
  5976  119A                     u2571:
  5977  119A  297E               	goto	l2346
  5978  119B                     u2570:
  5979  119B                     l2354:
  5980  119B  0878               	movf	___awmod@sign,w
  5981  119C  1903               	btfsc	3,2
  5982  119D  299F               	goto	u2581
  5983  119E  29A0               	goto	u2580
  5984  119F                     u2581:
  5985  119F  29A5               	goto	l2358
  5986  11A0                     u2580:
  5987  11A0                     l2356:
  5988  11A0  09F4               	comf	___awmod@dividend,f
  5989  11A1  09F5               	comf	___awmod@dividend+1,f
  5990  11A2  0AF4               	incf	___awmod@dividend,f
  5991  11A3  1903               	skipnz
  5992  11A4  0AF5               	incf	___awmod@dividend+1,f
  5993  11A5                     l2358:
  5994  11A5  0875               	movf	___awmod@dividend+1,w
  5995  11A6  00F3               	movwf	?___awmod+1
  5996  11A7  0874               	movf	___awmod@dividend,w
  5997  11A8  00F2               	movwf	?___awmod
  5998  11A9                     l678:
  5999  11A9  0008               	return
  6000  11AA                     __end_of___awmod:
  6001                           
  6002                           	psect	text30
  6003  12CC                     __ptext30:	
  6004 ;; *************** function ___awdiv *****************
  6005 ;; Defined at:
  6006 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  divisor         2    0[BANK0 ] int 
  6009 ;;  dividend        2    2[BANK0 ] int 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  quotient        2    6[BANK0 ] int 
  6012 ;;  sign            1    5[BANK0 ] unsigned char 
  6013 ;;  counter         1    4[BANK0 ] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  2    0[BANK0 ] int 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6023 ;;      Params:         0       4       0       0       0
  6024 ;;      Locals:         0       4       0       0       0
  6025 ;;      Temps:          1       0       0       0       0
  6026 ;;      Totals:         1       8       0       0       0
  6027 ;;Total ram usage:        9 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    1
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_Mapeo_M
  6034 ;;		_scale
  6035 ;;		_sprintf
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function ___awdiv
  6041  12CC                     ___awdiv:
  6042  12CC                     l2280:	
  6043                           ;incstack = 0
  6044                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6045                           
  6046  12CC  1283               	bcf	3,5	;RP0=0, select bank0
  6047  12CD  1303               	bcf	3,6	;RP1=0, select bank0
  6048  12CE  01A5               	clrf	___awdiv@sign
  6049  12CF                     l2282:
  6050  12CF  1FA1               	btfss	___awdiv@divisor+1,7
  6051  12D0  2AD2               	goto	u2401
  6052  12D1  2AD3               	goto	u2400
  6053  12D2                     u2401:
  6054  12D2  2ADA               	goto	l2288
  6055  12D3                     u2400:
  6056  12D3                     l2284:
  6057  12D3  09A0               	comf	___awdiv@divisor,f
  6058  12D4  09A1               	comf	___awdiv@divisor+1,f
  6059  12D5  0AA0               	incf	___awdiv@divisor,f
  6060  12D6  1903               	skipnz
  6061  12D7  0AA1               	incf	___awdiv@divisor+1,f
  6062  12D8                     l2286:
  6063  12D8  01A5               	clrf	___awdiv@sign
  6064  12D9  0AA5               	incf	___awdiv@sign,f
  6065  12DA                     l2288:
  6066  12DA  1FA3               	btfss	___awdiv@dividend+1,7
  6067  12DB  2ADD               	goto	u2411
  6068  12DC  2ADE               	goto	u2410
  6069  12DD                     u2411:
  6070  12DD  2AE7               	goto	l2294
  6071  12DE                     u2410:
  6072  12DE                     l2290:
  6073  12DE  09A2               	comf	___awdiv@dividend,f
  6074  12DF  09A3               	comf	___awdiv@dividend+1,f
  6075  12E0  0AA2               	incf	___awdiv@dividend,f
  6076  12E1  1903               	skipnz
  6077  12E2  0AA3               	incf	___awdiv@dividend+1,f
  6078  12E3                     l2292:
  6079  12E3  3001               	movlw	1
  6080  12E4  00F9               	movwf	??___awdiv
  6081  12E5  0879               	movf	??___awdiv,w
  6082  12E6  06A5               	xorwf	___awdiv@sign,f
  6083  12E7                     l2294:
  6084  12E7  01A6               	clrf	___awdiv@quotient
  6085  12E8  01A7               	clrf	___awdiv@quotient+1
  6086  12E9                     l2296:
  6087  12E9  0820               	movf	___awdiv@divisor,w
  6088  12EA  0421               	iorwf	___awdiv@divisor+1,w
  6089  12EB  1903               	btfsc	3,2
  6090  12EC  2AEE               	goto	u2421
  6091  12ED  2AEF               	goto	u2420
  6092  12EE                     u2421:
  6093  12EE  2B26               	goto	l2316
  6094  12EF                     u2420:
  6095  12EF                     l2298:
  6096  12EF  01A4               	clrf	___awdiv@counter
  6097  12F0  0AA4               	incf	___awdiv@counter,f
  6098  12F1  2AFD               	goto	l2304
  6099  12F2                     l2300:
  6100  12F2  3001               	movlw	1
  6101  12F3                     u2435:
  6102  12F3  1003               	clrc
  6103  12F4  0DA0               	rlf	___awdiv@divisor,f
  6104  12F5  0DA1               	rlf	___awdiv@divisor+1,f
  6105  12F6  3EFF               	addlw	-1
  6106  12F7  1D03               	skipz
  6107  12F8  2AF3               	goto	u2435
  6108  12F9                     l2302:
  6109  12F9  3001               	movlw	1
  6110  12FA  00F9               	movwf	??___awdiv
  6111  12FB  0879               	movf	??___awdiv,w
  6112  12FC  07A4               	addwf	___awdiv@counter,f
  6113  12FD                     l2304:
  6114  12FD  1FA1               	btfss	___awdiv@divisor+1,7
  6115  12FE  2B00               	goto	u2441
  6116  12FF  2B01               	goto	u2440
  6117  1300                     u2441:
  6118  1300  2AF2               	goto	l2300
  6119  1301                     u2440:
  6120  1301                     l2306:
  6121  1301  3001               	movlw	1
  6122  1302                     u2455:
  6123  1302  1003               	clrc
  6124  1303  0DA6               	rlf	___awdiv@quotient,f
  6125  1304  0DA7               	rlf	___awdiv@quotient+1,f
  6126  1305  3EFF               	addlw	-1
  6127  1306  1D03               	skipz
  6128  1307  2B02               	goto	u2455
  6129  1308  0821               	movf	___awdiv@divisor+1,w
  6130  1309  0223               	subwf	___awdiv@dividend+1,w
  6131  130A  1D03               	skipz
  6132  130B  2B0E               	goto	u2465
  6133  130C  0820               	movf	___awdiv@divisor,w
  6134  130D  0222               	subwf	___awdiv@dividend,w
  6135  130E                     u2465:
  6136  130E  1C03               	skipc
  6137  130F  2B11               	goto	u2461
  6138  1310  2B12               	goto	u2460
  6139  1311                     u2461:
  6140  1311  2B19               	goto	l2312
  6141  1312                     u2460:
  6142  1312                     l2308:
  6143  1312  0820               	movf	___awdiv@divisor,w
  6144  1313  02A2               	subwf	___awdiv@dividend,f
  6145  1314  0821               	movf	___awdiv@divisor+1,w
  6146  1315  1C03               	skipc
  6147  1316  03A3               	decf	___awdiv@dividend+1,f
  6148  1317  02A3               	subwf	___awdiv@dividend+1,f
  6149  1318                     l2310:
  6150  1318  1426               	bsf	___awdiv@quotient,0
  6151  1319                     l2312:
  6152  1319  3001               	movlw	1
  6153  131A                     u2475:
  6154  131A  1003               	clrc
  6155  131B  0CA1               	rrf	___awdiv@divisor+1,f
  6156  131C  0CA0               	rrf	___awdiv@divisor,f
  6157  131D  3EFF               	addlw	-1
  6158  131E  1D03               	skipz
  6159  131F  2B1A               	goto	u2475
  6160  1320                     l2314:
  6161  1320  3001               	movlw	1
  6162  1321  02A4               	subwf	___awdiv@counter,f
  6163  1322  1D03               	btfss	3,2
  6164  1323  2B25               	goto	u2481
  6165  1324  2B26               	goto	u2480
  6166  1325                     u2481:
  6167  1325  2B01               	goto	l2306
  6168  1326                     u2480:
  6169  1326                     l2316:
  6170  1326  0825               	movf	___awdiv@sign,w
  6171  1327  1903               	btfsc	3,2
  6172  1328  2B2A               	goto	u2491
  6173  1329  2B2B               	goto	u2490
  6174  132A                     u2491:
  6175  132A  2B30               	goto	l2320
  6176  132B                     u2490:
  6177  132B                     l2318:
  6178  132B  09A6               	comf	___awdiv@quotient,f
  6179  132C  09A7               	comf	___awdiv@quotient+1,f
  6180  132D  0AA6               	incf	___awdiv@quotient,f
  6181  132E  1903               	skipnz
  6182  132F  0AA7               	incf	___awdiv@quotient+1,f
  6183  1330                     l2320:
  6184  1330  0827               	movf	___awdiv@quotient+1,w
  6185  1331  00A1               	movwf	?___awdiv+1
  6186  1332  0826               	movf	___awdiv@quotient,w
  6187  1333  00A0               	movwf	?___awdiv
  6188  1334                     l665:
  6189  1334  0008               	return
  6190  1335                     __end_of___awdiv:
  6191                           
  6192                           	psect	text31
  6193  1C2C                     __ptext31:	
  6194 ;; *************** function _isdigit *****************
  6195 ;; Defined at:
  6196 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  c               1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  c               1    3[COMMON] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;		None               void
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6210 ;;      Params:         0       0       0       0       0
  6211 ;;      Locals:         2       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0
  6213 ;;      Totals:         2       0       0       0       0
  6214 ;;Total ram usage:        2 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    1
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_sprintf
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function _isdigit
  6226  1C2C                     _isdigit:
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6230                           ;isdigit@c stored from wreg
  6231  1C2C  00F3               	movwf	isdigit@c
  6232  1C2D                     l2618:
  6233  1C2D  01F2               	clrf	_isdigit$1035
  6234  1C2E                     l2620:
  6235  1C2E  303A               	movlw	58
  6236  1C2F  0273               	subwf	isdigit@c,w
  6237  1C30  1803               	skipnc
  6238  1C31  2C33               	goto	u3191
  6239  1C32  2C34               	goto	u3190
  6240  1C33                     u3191:
  6241  1C33  2C3C               	goto	l2626
  6242  1C34                     u3190:
  6243  1C34                     l2622:
  6244  1C34  3030               	movlw	48
  6245  1C35  0273               	subwf	isdigit@c,w
  6246  1C36  1C03               	skipc
  6247  1C37  2C39               	goto	u3201
  6248  1C38  2C3A               	goto	u3200
  6249  1C39                     u3201:
  6250  1C39  2C3C               	goto	l2626
  6251  1C3A                     u3200:
  6252  1C3A                     l2624:
  6253  1C3A  01F2               	clrf	_isdigit$1035
  6254  1C3B  0AF2               	incf	_isdigit$1035,f
  6255  1C3C                     l2626:
  6256  1C3C  0C72               	rrf	_isdigit$1035,w
  6257  1C3D                     l944:
  6258  1C3D  0008               	return
  6259  1C3E                     __end_of_isdigit:
  6260                           
  6261                           	psect	text32
  6262  08B4                     __ptext32:	
  6263 ;; *************** function _fround *****************
  6264 ;; Defined at:
  6265 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  prec            1    wreg     unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  prec            1   43[BANK0 ] unsigned char 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  3   28[BANK0 ] unsigned char 
  6272 ;; Registers used:
  6273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6279 ;;      Params:         0       3       0       0       0
  6280 ;;      Locals:         0       7       0       0       0
  6281 ;;      Temps:          0       6       0       0       0
  6282 ;;      Totals:         0      16       0       0       0
  6283 ;;Total ram usage:       16 bytes
  6284 ;; Hardware stack levels used:    1
  6285 ;; Hardware stack levels required when called:    3
  6286 ;; This function calls:
  6287 ;;		___bmul
  6288 ;;		___ftmul
  6289 ;;		___lwdiv
  6290 ;;		___lwmod
  6291 ;; This function is called by:
  6292 ;;		_sprintf
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           
  6297                           ;psect for function _fround
  6298  08B4                     _fround:
  6299                           
  6300                           ;incstack = 0
  6301                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6302                           ;fround@prec stored from wreg
  6303  08B4  1283               	bcf	3,5	;RP0=0, select bank0
  6304  08B5  1303               	bcf	3,6	;RP1=0, select bank0
  6305  08B6  00CB               	movwf	fround@prec
  6306  08B7                     l3676:
  6307                           
  6308                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 417: fround(unsig
      +                          ned char prec);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 418
      +                          : {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 421:  if(prec>
      +                          =110)
  6309  08B7  306E               	movlw	110
  6310  08B8  024B               	subwf	fround@prec,w
  6311  08B9  1C03               	skipc
  6312  08BA  28BC               	goto	u5071
  6313  08BB  28BD               	goto	u5070
  6314  08BC                     u5071:
  6315  08BC  299A               	goto	l3686
  6316  08BD                     u5070:
  6317  08BD                     l3678:
  6318                           
  6319                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6320  08BD  3003               	movlw	3
  6321  08BE  00BF               	movwf	??_fround
  6322  08BF  083F               	movf	??_fround,w
  6323  08C0  00A8               	movwf	___bmul@multiplicand
  6324  08C1  084B               	movf	fround@prec,w
  6325  08C2  00C0               	movwf	??_fround+1
  6326  08C3  01C1               	clrf	??_fround+2
  6327  08C4  0840               	movf	??_fround+1,w
  6328  08C5  00F4               	movwf	___lwmod@dividend
  6329  08C6  0841               	movf	??_fround+2,w
  6330  08C7  00F5               	movwf	___lwmod@dividend+1
  6331  08C8  3064               	movlw	100
  6332  08C9  00F2               	movwf	___lwmod@divisor
  6333  08CA  3000               	movlw	0
  6334  08CB  00F3               	movwf	___lwmod@divisor+1
  6335  08CC  160A  158A  2616  120A  158A  	fcall	___lwmod
  6336  08D1  0873               	movf	?___lwmod+1,w
  6337  08D2  1283               	bcf	3,5	;RP0=0, select bank0
  6338  08D3  1303               	bcf	3,6	;RP1=0, select bank0
  6339  08D4  00A3               	movwf	___lwdiv@dividend+1
  6340  08D5  0872               	movf	?___lwmod,w
  6341  08D6  00A2               	movwf	___lwdiv@dividend
  6342  08D7  300A               	movlw	10
  6343  08D8  00A0               	movwf	___lwdiv@divisor
  6344  08D9  3000               	movlw	0
  6345  08DA  00A1               	movwf	___lwdiv@divisor+1
  6346  08DB  160A  158A  268D  120A  158A  	fcall	___lwdiv
  6347  08E0  1283               	bcf	3,5	;RP0=0, select bank0
  6348  08E1  1303               	bcf	3,6	;RP1=0, select bank0
  6349  08E2  0820               	movf	?___lwdiv,w
  6350  08E3  160A  158A  246A  120A  158A  	fcall	___bmul
  6351  08E8  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  6352  08E9  0084               	movwf	4
  6353  08EA  160A  118A  200A  120A  158A  	fcall	stringdir
  6354  08EF  1283               	bcf	3,5	;RP0=0, select bank0
  6355  08F0  1303               	bcf	3,6	;RP1=0, select bank0
  6356  08F1  00AC               	movwf	___ftmul@f1
  6357  08F2  160A  118A  200A  120A  158A  	fcall	stringdir
  6358  08F7  00AD               	movwf	___ftmul@f1+1
  6359  08F8  160A  118A  200A  120A  158A  	fcall	stringdir
  6360  08FD  00AE               	movwf	___ftmul@f1+2
  6361  08FE  3003               	movlw	3
  6362  08FF  00C2               	movwf	??_fround+3
  6363  0900  0842               	movf	??_fround+3,w
  6364  0901  00A8               	movwf	___bmul@multiplicand
  6365  0902  084B               	movf	fround@prec,w
  6366  0903  00C3               	movwf	??_fround+4
  6367  0904  01C4               	clrf	??_fround+5
  6368  0905  0843               	movf	??_fround+4,w
  6369  0906  00A2               	movwf	___lwdiv@dividend
  6370  0907  0844               	movf	??_fround+5,w
  6371  0908  00A3               	movwf	___lwdiv@dividend+1
  6372  0909  3064               	movlw	100
  6373  090A  00A0               	movwf	___lwdiv@divisor
  6374  090B  3000               	movlw	0
  6375  090C  00A1               	movwf	___lwdiv@divisor+1
  6376  090D  160A  158A  268D  120A  158A  	fcall	___lwdiv
  6377  0912  1283               	bcf	3,5	;RP0=0, select bank0
  6378  0913  1303               	bcf	3,6	;RP1=0, select bank0
  6379  0914  0820               	movf	?___lwdiv,w
  6380  0915  160A  158A  246A  120A  158A  	fcall	___bmul
  6381  091A  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  6382  091B  0084               	movwf	4
  6383  091C  160A  118A  200A  120A  158A  	fcall	stringdir
  6384  0921  1283               	bcf	3,5	;RP0=0, select bank0
  6385  0922  1303               	bcf	3,6	;RP1=0, select bank0
  6386  0923  00AF               	movwf	___ftmul@f2
  6387  0924  160A  118A  200A  120A  158A  	fcall	stringdir
  6388  0929  00B0               	movwf	___ftmul@f2+1
  6389  092A  160A  118A  200A  120A  158A  	fcall	stringdir
  6390  092F  00B1               	movwf	___ftmul@f2+2
  6391  0930  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6392  0935  1283               	bcf	3,5	;RP0=0, select bank0
  6393  0936  1303               	bcf	3,6	;RP1=0, select bank0
  6394  0937  082C               	movf	?___ftmul,w
  6395  0938  00C8               	movwf	_fround$1238
  6396  0939  082D               	movf	?___ftmul+1,w
  6397  093A  00C9               	movwf	_fround$1238+1
  6398  093B  082E               	movf	?___ftmul+2,w
  6399  093C  00CA               	movwf	_fround$1238+2
  6400                           
  6401                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6402  093D  3003               	movlw	3
  6403  093E  00BF               	movwf	??_fround
  6404  093F  083F               	movf	??_fround,w
  6405  0940  00A8               	movwf	___bmul@multiplicand
  6406  0941  084B               	movf	fround@prec,w
  6407  0942  00C0               	movwf	??_fround+1
  6408  0943  01C1               	clrf	??_fround+2
  6409  0944  0840               	movf	??_fround+1,w
  6410  0945  00F4               	movwf	___lwmod@dividend
  6411  0946  0841               	movf	??_fround+2,w
  6412  0947  00F5               	movwf	___lwmod@dividend+1
  6413  0948  300A               	movlw	10
  6414  0949  00F2               	movwf	___lwmod@divisor
  6415  094A  3000               	movlw	0
  6416  094B  00F3               	movwf	___lwmod@divisor+1
  6417  094C  160A  158A  2616  120A  158A  	fcall	___lwmod
  6418  0951  0872               	movf	?___lwmod,w
  6419  0952  160A  158A  246A  120A  158A  	fcall	___bmul
  6420  0957  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6421  0958  0084               	movwf	4
  6422  0959  160A  118A  200A  120A  158A  	fcall	stringdir
  6423  095E  1283               	bcf	3,5	;RP0=0, select bank0
  6424  095F  1303               	bcf	3,6	;RP1=0, select bank0
  6425  0960  00AC               	movwf	___ftmul@f1
  6426  0961  160A  118A  200A  120A  158A  	fcall	stringdir
  6427  0966  00AD               	movwf	___ftmul@f1+1
  6428  0967  160A  118A  200A  120A  158A  	fcall	stringdir
  6429  096C  00AE               	movwf	___ftmul@f1+2
  6430  096D  0848               	movf	_fround$1238,w
  6431  096E  00AF               	movwf	___ftmul@f2
  6432  096F  0849               	movf	_fround$1238+1,w
  6433  0970  00B0               	movwf	___ftmul@f2+1
  6434  0971  084A               	movf	_fround$1238+2,w
  6435  0972  00B1               	movwf	___ftmul@f2+2
  6436  0973  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6437  0978  1283               	bcf	3,5	;RP0=0, select bank0
  6438  0979  1303               	bcf	3,6	;RP1=0, select bank0
  6439  097A  082C               	movf	?___ftmul,w
  6440  097B  00C5               	movwf	_fround$1239
  6441  097C  082D               	movf	?___ftmul+1,w
  6442  097D  00C6               	movwf	_fround$1239+1
  6443  097E  082E               	movf	?___ftmul+2,w
  6444  097F  00C7               	movwf	_fround$1239+2
  6445  0980                     l3680:
  6446                           
  6447                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 422:   return 0.5
      +                           * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * _npowers_[prec%10U];
  6448  0980  3000               	movlw	0
  6449  0981  00AC               	movwf	___ftmul@f1
  6450  0982  3000               	movlw	0
  6451  0983  00AD               	movwf	___ftmul@f1+1
  6452  0984  303F               	movlw	63
  6453  0985  00AE               	movwf	___ftmul@f1+2
  6454  0986  0845               	movf	_fround$1239,w
  6455  0987  00AF               	movwf	___ftmul@f2
  6456  0988  0846               	movf	_fround$1239+1,w
  6457  0989  00B0               	movwf	___ftmul@f2+1
  6458  098A  0847               	movf	_fround$1239+2,w
  6459  098B  00B1               	movwf	___ftmul@f2+2
  6460  098C  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6461  0991  1283               	bcf	3,5	;RP0=0, select bank0
  6462  0992  1303               	bcf	3,6	;RP1=0, select bank0
  6463  0993  082C               	movf	?___ftmul,w
  6464  0994  00BC               	movwf	?_fround
  6465  0995  082D               	movf	?___ftmul+1,w
  6466  0996  00BD               	movwf	?_fround+1
  6467  0997  082E               	movf	?___ftmul+2,w
  6468  0998  00BE               	movwf	?_fround+2
  6469  0999  2A5C               	goto	l379
  6470  099A                     l3686:
  6471  099A  300B               	movlw	11
  6472  099B  024B               	subwf	fround@prec,w
  6473  099C  1C03               	skipc
  6474  099D  299F               	goto	u5081
  6475  099E  29A0               	goto	u5080
  6476  099F                     u5081:
  6477  099F  2A29               	goto	l3694
  6478  09A0                     u5080:
  6479  09A0                     l3688:
  6480                           
  6481                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6482  09A0  3003               	movlw	3
  6483  09A1  00BF               	movwf	??_fround
  6484  09A2  083F               	movf	??_fround,w
  6485  09A3  00A8               	movwf	___bmul@multiplicand
  6486  09A4  084B               	movf	fround@prec,w
  6487  09A5  00C0               	movwf	??_fround+1
  6488  09A6  01C1               	clrf	??_fround+2
  6489  09A7  0840               	movf	??_fround+1,w
  6490  09A8  00F4               	movwf	___lwmod@dividend
  6491  09A9  0841               	movf	??_fround+2,w
  6492  09AA  00F5               	movwf	___lwmod@dividend+1
  6493  09AB  300A               	movlw	10
  6494  09AC  00F2               	movwf	___lwmod@divisor
  6495  09AD  3000               	movlw	0
  6496  09AE  00F3               	movwf	___lwmod@divisor+1
  6497  09AF  160A  158A  2616  120A  158A  	fcall	___lwmod
  6498  09B4  0872               	movf	?___lwmod,w
  6499  09B5  160A  158A  246A  120A  158A  	fcall	___bmul
  6500  09BA  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6501  09BB  0084               	movwf	4
  6502  09BC  160A  118A  200A  120A  158A  	fcall	stringdir
  6503  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  6504  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  6505  09C3  00AC               	movwf	___ftmul@f1
  6506  09C4  160A  118A  200A  120A  158A  	fcall	stringdir
  6507  09C9  00AD               	movwf	___ftmul@f1+1
  6508  09CA  160A  118A  200A  120A  158A  	fcall	stringdir
  6509  09CF  00AE               	movwf	___ftmul@f1+2
  6510  09D0  3003               	movlw	3
  6511  09D1  00C2               	movwf	??_fround+3
  6512  09D2  0842               	movf	??_fround+3,w
  6513  09D3  00A8               	movwf	___bmul@multiplicand
  6514  09D4  084B               	movf	fround@prec,w
  6515  09D5  00C3               	movwf	??_fround+4
  6516  09D6  01C4               	clrf	??_fround+5
  6517  09D7  0843               	movf	??_fround+4,w
  6518  09D8  00A2               	movwf	___lwdiv@dividend
  6519  09D9  0844               	movf	??_fround+5,w
  6520  09DA  00A3               	movwf	___lwdiv@dividend+1
  6521  09DB  300A               	movlw	10
  6522  09DC  00A0               	movwf	___lwdiv@divisor
  6523  09DD  3000               	movlw	0
  6524  09DE  00A1               	movwf	___lwdiv@divisor+1
  6525  09DF  160A  158A  268D  120A  158A  	fcall	___lwdiv
  6526  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  6527  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  6528  09E6  0820               	movf	?___lwdiv,w
  6529  09E7  160A  158A  246A  120A  158A  	fcall	___bmul
  6530  09EC  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  6531  09ED  0084               	movwf	4
  6532  09EE  160A  118A  200A  120A  158A  	fcall	stringdir
  6533  09F3  1283               	bcf	3,5	;RP0=0, select bank0
  6534  09F4  1303               	bcf	3,6	;RP1=0, select bank0
  6535  09F5  00AF               	movwf	___ftmul@f2
  6536  09F6  160A  118A  200A  120A  158A  	fcall	stringdir
  6537  09FB  00B0               	movwf	___ftmul@f2+1
  6538  09FC  160A  118A  200A  120A  158A  	fcall	stringdir
  6539  0A01  00B1               	movwf	___ftmul@f2+2
  6540  0A02  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6541  0A07  1283               	bcf	3,5	;RP0=0, select bank0
  6542  0A08  1303               	bcf	3,6	;RP1=0, select bank0
  6543  0A09  082C               	movf	?___ftmul,w
  6544  0A0A  00C8               	movwf	_fround$1238
  6545  0A0B  082D               	movf	?___ftmul+1,w
  6546  0A0C  00C9               	movwf	_fround$1238+1
  6547  0A0D  082E               	movf	?___ftmul+2,w
  6548  0A0E  00CA               	movwf	_fround$1238+2
  6549  0A0F                     l3690:
  6550                           
  6551                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 424:   return 0.5
      +                           * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  6552  0A0F  3000               	movlw	0
  6553  0A10  00AC               	movwf	___ftmul@f1
  6554  0A11  3000               	movlw	0
  6555  0A12  00AD               	movwf	___ftmul@f1+1
  6556  0A13  303F               	movlw	63
  6557  0A14  00AE               	movwf	___ftmul@f1+2
  6558  0A15  0848               	movf	_fround$1238,w
  6559  0A16  00AF               	movwf	___ftmul@f2
  6560  0A17  0849               	movf	_fround$1238+1,w
  6561  0A18  00B0               	movwf	___ftmul@f2+1
  6562  0A19  084A               	movf	_fround$1238+2,w
  6563  0A1A  00B1               	movwf	___ftmul@f2+2
  6564  0A1B  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6565  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  6566  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  6567  0A22  082C               	movf	?___ftmul,w
  6568  0A23  00BC               	movwf	?_fround
  6569  0A24  082D               	movf	?___ftmul+1,w
  6570  0A25  00BD               	movwf	?_fround+1
  6571  0A26  082E               	movf	?___ftmul+2,w
  6572  0A27  00BE               	movwf	?_fround+2
  6573  0A28  2A5C               	goto	l379
  6574  0A29                     l3694:
  6575                           
  6576                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 425:  return 0.5 
      +                          * _npowers_[prec];
  6577  0A29  3000               	movlw	0
  6578  0A2A  00AC               	movwf	___ftmul@f1
  6579  0A2B  3000               	movlw	0
  6580  0A2C  00AD               	movwf	___ftmul@f1+1
  6581  0A2D  303F               	movlw	63
  6582  0A2E  00AE               	movwf	___ftmul@f1+2
  6583  0A2F  3003               	movlw	3
  6584  0A30  00BF               	movwf	??_fround
  6585  0A31  083F               	movf	??_fround,w
  6586  0A32  00A8               	movwf	___bmul@multiplicand
  6587  0A33  084B               	movf	fround@prec,w
  6588  0A34  160A  158A  246A  120A  158A  	fcall	___bmul
  6589  0A39  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  6590  0A3A  0084               	movwf	4
  6591  0A3B  160A  118A  200A  120A  158A  	fcall	stringdir
  6592  0A40  1283               	bcf	3,5	;RP0=0, select bank0
  6593  0A41  1303               	bcf	3,6	;RP1=0, select bank0
  6594  0A42  00AF               	movwf	___ftmul@f2
  6595  0A43  160A  118A  200A  120A  158A  	fcall	stringdir
  6596  0A48  00B0               	movwf	___ftmul@f2+1
  6597  0A49  160A  118A  200A  120A  158A  	fcall	stringdir
  6598  0A4E  00B1               	movwf	___ftmul@f2+2
  6599  0A4F  120A  118A  26D8  120A  158A  	fcall	___ftmul
  6600  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  6601  0A55  1303               	bcf	3,6	;RP1=0, select bank0
  6602  0A56  082C               	movf	?___ftmul,w
  6603  0A57  00BC               	movwf	?_fround
  6604  0A58  082D               	movf	?___ftmul+1,w
  6605  0A59  00BD               	movwf	?_fround+1
  6606  0A5A  082E               	movf	?___ftmul+2,w
  6607  0A5B  00BE               	movwf	?_fround+2
  6608  0A5C                     l379:
  6609  0A5C  0008               	return
  6610  0A5D                     __end_of_fround:
  6611                           
  6612                           	psect	text33
  6613  1E16                     __ptext33:	
  6614 ;; *************** function ___lwmod *****************
  6615 ;; Defined at:
  6616 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;  divisor         2    2[COMMON] unsigned int 
  6619 ;;  dividend        2    4[COMMON] unsigned int 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;  counter         1    7[COMMON] unsigned char 
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  2    2[COMMON] unsigned int 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2, status,0
  6626 ;; Tracked objects:
  6627 ;;		On entry : 0/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6631 ;;      Params:         4       0       0       0       0
  6632 ;;      Locals:         1       0       0       0       0
  6633 ;;      Temps:          1       0       0       0       0
  6634 ;;      Totals:         6       0       0       0       0
  6635 ;;Total ram usage:        6 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    1
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_fround
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           
  6646                           ;psect for function ___lwmod
  6647  1E16                     ___lwmod:
  6648  1E16                     l2508:	
  6649                           ;incstack = 0
  6650                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6651                           
  6652  1E16  0872               	movf	___lwmod@divisor,w
  6653  1E17  0473               	iorwf	___lwmod@divisor+1,w
  6654  1E18  1903               	btfsc	3,2
  6655  1E19  2E1B               	goto	u3041
  6656  1E1A  2E1C               	goto	u3040
  6657  1E1B                     u3041:
  6658  1E1B  2E4B               	goto	l2526
  6659  1E1C                     u3040:
  6660  1E1C                     l2510:
  6661  1E1C  01F7               	clrf	___lwmod@counter
  6662  1E1D  0AF7               	incf	___lwmod@counter,f
  6663  1E1E  2E2A               	goto	l2516
  6664  1E1F                     l2512:
  6665  1E1F  3001               	movlw	1
  6666  1E20                     u3055:
  6667  1E20  1003               	clrc
  6668  1E21  0DF2               	rlf	___lwmod@divisor,f
  6669  1E22  0DF3               	rlf	___lwmod@divisor+1,f
  6670  1E23  3EFF               	addlw	-1
  6671  1E24  1D03               	skipz
  6672  1E25  2E20               	goto	u3055
  6673  1E26                     l2514:
  6674  1E26  3001               	movlw	1
  6675  1E27  00F6               	movwf	??___lwmod
  6676  1E28  0876               	movf	??___lwmod,w
  6677  1E29  07F7               	addwf	___lwmod@counter,f
  6678  1E2A                     l2516:
  6679  1E2A  1FF3               	btfss	___lwmod@divisor+1,7
  6680  1E2B  2E2D               	goto	u3061
  6681  1E2C  2E2E               	goto	u3060
  6682  1E2D                     u3061:
  6683  1E2D  2E1F               	goto	l2512
  6684  1E2E                     u3060:
  6685  1E2E                     l2518:
  6686  1E2E  0873               	movf	___lwmod@divisor+1,w
  6687  1E2F  0275               	subwf	___lwmod@dividend+1,w
  6688  1E30  1D03               	skipz
  6689  1E31  2E34               	goto	u3075
  6690  1E32  0872               	movf	___lwmod@divisor,w
  6691  1E33  0274               	subwf	___lwmod@dividend,w
  6692  1E34                     u3075:
  6693  1E34  1C03               	skipc
  6694  1E35  2E37               	goto	u3071
  6695  1E36  2E38               	goto	u3070
  6696  1E37                     u3071:
  6697  1E37  2E3E               	goto	l2522
  6698  1E38                     u3070:
  6699  1E38                     l2520:
  6700  1E38  0872               	movf	___lwmod@divisor,w
  6701  1E39  02F4               	subwf	___lwmod@dividend,f
  6702  1E3A  0873               	movf	___lwmod@divisor+1,w
  6703  1E3B  1C03               	skipc
  6704  1E3C  03F5               	decf	___lwmod@dividend+1,f
  6705  1E3D  02F5               	subwf	___lwmod@dividend+1,f
  6706  1E3E                     l2522:
  6707  1E3E  3001               	movlw	1
  6708  1E3F                     u3085:
  6709  1E3F  1003               	clrc
  6710  1E40  0CF3               	rrf	___lwmod@divisor+1,f
  6711  1E41  0CF2               	rrf	___lwmod@divisor,f
  6712  1E42  3EFF               	addlw	-1
  6713  1E43  1D03               	skipz
  6714  1E44  2E3F               	goto	u3085
  6715  1E45                     l2524:
  6716  1E45  3001               	movlw	1
  6717  1E46  02F7               	subwf	___lwmod@counter,f
  6718  1E47  1D03               	btfss	3,2
  6719  1E48  2E4A               	goto	u3091
  6720  1E49  2E4B               	goto	u3090
  6721  1E4A                     u3091:
  6722  1E4A  2E2E               	goto	l2518
  6723  1E4B                     u3090:
  6724  1E4B                     l2526:
  6725  1E4B  0875               	movf	___lwmod@dividend+1,w
  6726  1E4C  00F3               	movwf	?___lwmod+1
  6727  1E4D  0874               	movf	___lwmod@dividend,w
  6728  1E4E  00F2               	movwf	?___lwmod
  6729  1E4F                     l934:
  6730  1E4F  0008               	return
  6731  1E50                     __end_of___lwmod:
  6732                           
  6733                           	psect	text34
  6734  1E8D                     __ptext34:	
  6735 ;; *************** function ___lwdiv *****************
  6736 ;; Defined at:
  6737 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  divisor         2    0[BANK0 ] unsigned int 
  6740 ;;  dividend        2    2[BANK0 ] unsigned int 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  quotient        2    5[BANK0 ] unsigned int 
  6743 ;;  counter         1    4[BANK0 ] unsigned char 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  2    0[BANK0 ] unsigned int 
  6746 ;; Registers used:
  6747 ;;		wreg, status,2, status,0
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6753 ;;      Params:         0       4       0       0       0
  6754 ;;      Locals:         0       3       0       0       0
  6755 ;;      Temps:          1       0       0       0       0
  6756 ;;      Totals:         1       7       0       0       0
  6757 ;;Total ram usage:        8 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; Hardware stack levels required when called:    1
  6760 ;; This function calls:
  6761 ;;		Nothing
  6762 ;; This function is called by:
  6763 ;;		_fround
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           
  6768                           ;psect for function ___lwdiv
  6769  1E8D                     ___lwdiv:
  6770  1E8D                     l3630:	
  6771                           ;incstack = 0
  6772                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6773                           
  6774  1E8D  1283               	bcf	3,5	;RP0=0, select bank0
  6775  1E8E  1303               	bcf	3,6	;RP1=0, select bank0
  6776  1E8F  01A5               	clrf	___lwdiv@quotient
  6777  1E90  01A6               	clrf	___lwdiv@quotient+1
  6778  1E91                     l3632:
  6779  1E91  0820               	movf	___lwdiv@divisor,w
  6780  1E92  0421               	iorwf	___lwdiv@divisor+1,w
  6781  1E93  1903               	btfsc	3,2
  6782  1E94  2E96               	goto	u5001
  6783  1E95  2E97               	goto	u5000
  6784  1E96                     u5001:
  6785  1E96  2ECE               	goto	l3652
  6786  1E97                     u5000:
  6787  1E97                     l3634:
  6788  1E97  01A4               	clrf	___lwdiv@counter
  6789  1E98  0AA4               	incf	___lwdiv@counter,f
  6790  1E99  2EA5               	goto	l3640
  6791  1E9A                     l3636:
  6792  1E9A  3001               	movlw	1
  6793  1E9B                     u5015:
  6794  1E9B  1003               	clrc
  6795  1E9C  0DA0               	rlf	___lwdiv@divisor,f
  6796  1E9D  0DA1               	rlf	___lwdiv@divisor+1,f
  6797  1E9E  3EFF               	addlw	-1
  6798  1E9F  1D03               	skipz
  6799  1EA0  2E9B               	goto	u5015
  6800  1EA1                     l3638:
  6801  1EA1  3001               	movlw	1
  6802  1EA2  00F8               	movwf	??___lwdiv
  6803  1EA3  0878               	movf	??___lwdiv,w
  6804  1EA4  07A4               	addwf	___lwdiv@counter,f
  6805  1EA5                     l3640:
  6806  1EA5  1FA1               	btfss	___lwdiv@divisor+1,7
  6807  1EA6  2EA8               	goto	u5021
  6808  1EA7  2EA9               	goto	u5020
  6809  1EA8                     u5021:
  6810  1EA8  2E9A               	goto	l3636
  6811  1EA9                     u5020:
  6812  1EA9                     l3642:
  6813  1EA9  3001               	movlw	1
  6814  1EAA                     u5035:
  6815  1EAA  1003               	clrc
  6816  1EAB  0DA5               	rlf	___lwdiv@quotient,f
  6817  1EAC  0DA6               	rlf	___lwdiv@quotient+1,f
  6818  1EAD  3EFF               	addlw	-1
  6819  1EAE  1D03               	skipz
  6820  1EAF  2EAA               	goto	u5035
  6821  1EB0  0821               	movf	___lwdiv@divisor+1,w
  6822  1EB1  0223               	subwf	___lwdiv@dividend+1,w
  6823  1EB2  1D03               	skipz
  6824  1EB3  2EB6               	goto	u5045
  6825  1EB4  0820               	movf	___lwdiv@divisor,w
  6826  1EB5  0222               	subwf	___lwdiv@dividend,w
  6827  1EB6                     u5045:
  6828  1EB6  1C03               	skipc
  6829  1EB7  2EB9               	goto	u5041
  6830  1EB8  2EBA               	goto	u5040
  6831  1EB9                     u5041:
  6832  1EB9  2EC1               	goto	l3648
  6833  1EBA                     u5040:
  6834  1EBA                     l3644:
  6835  1EBA  0820               	movf	___lwdiv@divisor,w
  6836  1EBB  02A2               	subwf	___lwdiv@dividend,f
  6837  1EBC  0821               	movf	___lwdiv@divisor+1,w
  6838  1EBD  1C03               	skipc
  6839  1EBE  03A3               	decf	___lwdiv@dividend+1,f
  6840  1EBF  02A3               	subwf	___lwdiv@dividend+1,f
  6841  1EC0                     l3646:
  6842  1EC0  1425               	bsf	___lwdiv@quotient,0
  6843  1EC1                     l3648:
  6844  1EC1  3001               	movlw	1
  6845  1EC2                     u5055:
  6846  1EC2  1003               	clrc
  6847  1EC3  0CA1               	rrf	___lwdiv@divisor+1,f
  6848  1EC4  0CA0               	rrf	___lwdiv@divisor,f
  6849  1EC5  3EFF               	addlw	-1
  6850  1EC6  1D03               	skipz
  6851  1EC7  2EC2               	goto	u5055
  6852  1EC8                     l3650:
  6853  1EC8  3001               	movlw	1
  6854  1EC9  02A4               	subwf	___lwdiv@counter,f
  6855  1ECA  1D03               	btfss	3,2
  6856  1ECB  2ECD               	goto	u5061
  6857  1ECC  2ECE               	goto	u5060
  6858  1ECD                     u5061:
  6859  1ECD  2EA9               	goto	l3642
  6860  1ECE                     u5060:
  6861  1ECE                     l3652:
  6862  1ECE  0826               	movf	___lwdiv@quotient+1,w
  6863  1ECF  00A1               	movwf	?___lwdiv+1
  6864  1ED0  0825               	movf	___lwdiv@quotient,w
  6865  1ED1  00A0               	movwf	?___lwdiv
  6866  1ED2                     l924:
  6867  1ED2  0008               	return
  6868  1ED3                     __end_of___lwdiv:
  6869                           
  6870                           	psect	text35
  6871  06D8                     __ptext35:	
  6872 ;; *************** function ___ftmul *****************
  6873 ;; Defined at:
  6874 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftmul.c"
  6875 ;; Parameters:    Size  Location     Type
  6876 ;;  f1              3   12[BANK0 ] float 
  6877 ;;  f2              3   15[BANK0 ] float 
  6878 ;; Auto vars:     Size  Location     Type
  6879 ;;  f3_as_produc    3   23[BANK0 ] unsigned um
  6880 ;;  sign            1   27[BANK0 ] unsigned char 
  6881 ;;  cntr            1   26[BANK0 ] unsigned char 
  6882 ;;  exp             1   22[BANK0 ] unsigned char 
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  3   12[BANK0 ] float 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, pclath, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6892 ;;      Params:         0       6       0       0       0
  6893 ;;      Locals:         0       6       0       0       0
  6894 ;;      Temps:          0       4       0       0       0
  6895 ;;      Totals:         0      16       0       0       0
  6896 ;;Total ram usage:       16 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    2
  6899 ;; This function calls:
  6900 ;;		___ftpack
  6901 ;; This function is called by:
  6902 ;;		_Mapeo_M
  6903 ;;		_fround
  6904 ;;		_scale
  6905 ;;		_sprintf
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           
  6910                           ;psect for function ___ftmul
  6911  06D8                     ___ftmul:
  6912  06D8                     l3580:	
  6913                           ;incstack = 0
  6914                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6915                           
  6916  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  6917  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  6918  06DA  082C               	movf	___ftmul@f1,w
  6919  06DB  00B2               	movwf	??___ftmul
  6920  06DC  082D               	movf	___ftmul@f1+1,w
  6921  06DD  00B3               	movwf	??___ftmul+1
  6922  06DE  082E               	movf	___ftmul@f1+2,w
  6923  06DF  00B4               	movwf	??___ftmul+2
  6924  06E0  1003               	clrc
  6925  06E1  0D33               	rlf	??___ftmul+1,w
  6926  06E2  0D34               	rlf	??___ftmul+2,w
  6927  06E3  00B5               	movwf	??___ftmul+3
  6928  06E4  0835               	movf	??___ftmul+3,w
  6929  06E5  00B6               	movwf	___ftmul@exp
  6930  06E6  0836               	movf	___ftmul@exp,w
  6931  06E7  1D03               	btfss	3,2
  6932  06E8  2EEA               	goto	u4861
  6933  06E9  2EEB               	goto	u4860
  6934  06EA                     u4861:
  6935  06EA  2EF2               	goto	l3586
  6936  06EB                     u4860:
  6937  06EB                     l3582:
  6938  06EB  3000               	movlw	0
  6939  06EC  00AC               	movwf	?___ftmul
  6940  06ED  3000               	movlw	0
  6941  06EE  00AD               	movwf	?___ftmul+1
  6942  06EF  3000               	movlw	0
  6943  06F0  00AE               	movwf	?___ftmul+2
  6944  06F1  2FBC               	goto	l791
  6945  06F2                     l3586:
  6946  06F2  082F               	movf	___ftmul@f2,w
  6947  06F3  00B2               	movwf	??___ftmul
  6948  06F4  0830               	movf	___ftmul@f2+1,w
  6949  06F5  00B3               	movwf	??___ftmul+1
  6950  06F6  0831               	movf	___ftmul@f2+2,w
  6951  06F7  00B4               	movwf	??___ftmul+2
  6952  06F8  1003               	clrc
  6953  06F9  0D33               	rlf	??___ftmul+1,w
  6954  06FA  0D34               	rlf	??___ftmul+2,w
  6955  06FB  00B5               	movwf	??___ftmul+3
  6956  06FC  0835               	movf	??___ftmul+3,w
  6957  06FD  00BB               	movwf	___ftmul@sign
  6958  06FE  083B               	movf	___ftmul@sign,w
  6959  06FF  1D03               	btfss	3,2
  6960  0700  2F02               	goto	u4871
  6961  0701  2F03               	goto	u4870
  6962  0702                     u4871:
  6963  0702  2F0A               	goto	l3592
  6964  0703                     u4870:
  6965  0703                     l3588:
  6966  0703  3000               	movlw	0
  6967  0704  00AC               	movwf	?___ftmul
  6968  0705  3000               	movlw	0
  6969  0706  00AD               	movwf	?___ftmul+1
  6970  0707  3000               	movlw	0
  6971  0708  00AE               	movwf	?___ftmul+2
  6972  0709  2FBC               	goto	l791
  6973  070A                     l3592:
  6974  070A  083B               	movf	___ftmul@sign,w
  6975  070B  3E7B               	addlw	123
  6976  070C  00B2               	movwf	??___ftmul
  6977  070D  0832               	movf	??___ftmul,w
  6978  070E  07B6               	addwf	___ftmul@exp,f
  6979  070F  082C               	movf	___ftmul@f1,w
  6980  0710  00B2               	movwf	??___ftmul
  6981  0711  082D               	movf	___ftmul@f1+1,w
  6982  0712  00B3               	movwf	??___ftmul+1
  6983  0713  082E               	movf	___ftmul@f1+2,w
  6984  0714  00B4               	movwf	??___ftmul+2
  6985  0715  3010               	movlw	16
  6986  0716                     u4885:
  6987  0716  1003               	clrc
  6988  0717  0CB4               	rrf	??___ftmul+2,f
  6989  0718  0CB3               	rrf	??___ftmul+1,f
  6990  0719  0CB2               	rrf	??___ftmul,f
  6991  071A                     u4880:
  6992  071A  3EFF               	addlw	-1
  6993  071B  1D03               	skipz
  6994  071C  2F16               	goto	u4885
  6995  071D  0832               	movf	??___ftmul,w
  6996  071E  00B5               	movwf	??___ftmul+3
  6997  071F  0835               	movf	??___ftmul+3,w
  6998  0720  00BB               	movwf	___ftmul@sign
  6999  0721  082F               	movf	___ftmul@f2,w
  7000  0722  00B2               	movwf	??___ftmul
  7001  0723  0830               	movf	___ftmul@f2+1,w
  7002  0724  00B3               	movwf	??___ftmul+1
  7003  0725  0831               	movf	___ftmul@f2+2,w
  7004  0726  00B4               	movwf	??___ftmul+2
  7005  0727  3010               	movlw	16
  7006  0728                     u4895:
  7007  0728  1003               	clrc
  7008  0729  0CB4               	rrf	??___ftmul+2,f
  7009  072A  0CB3               	rrf	??___ftmul+1,f
  7010  072B  0CB2               	rrf	??___ftmul,f
  7011  072C                     u4890:
  7012  072C  3EFF               	addlw	-1
  7013  072D  1D03               	skipz
  7014  072E  2F28               	goto	u4895
  7015  072F  0832               	movf	??___ftmul,w
  7016  0730  00B5               	movwf	??___ftmul+3
  7017  0731  0835               	movf	??___ftmul+3,w
  7018  0732  06BB               	xorwf	___ftmul@sign,f
  7019  0733  3080               	movlw	128
  7020  0734  00B2               	movwf	??___ftmul
  7021  0735  0832               	movf	??___ftmul,w
  7022  0736  05BB               	andwf	___ftmul@sign,f
  7023  0737                     l3594:
  7024  0737  17AD               	bsf	___ftmul@f1+1,7
  7025  0738                     l3596:
  7026  0738  17B0               	bsf	___ftmul@f2+1,7
  7027  0739                     l3598:
  7028  0739  30FF               	movlw	255
  7029  073A  05AF               	andwf	___ftmul@f2,f
  7030  073B  30FF               	movlw	255
  7031  073C  05B0               	andwf	___ftmul@f2+1,f
  7032  073D  3000               	movlw	0
  7033  073E  05B1               	andwf	___ftmul@f2+2,f
  7034  073F                     l3600:
  7035  073F  3000               	movlw	0
  7036  0740  00B7               	movwf	___ftmul@f3_as_product
  7037  0741  3000               	movlw	0
  7038  0742  00B8               	movwf	___ftmul@f3_as_product+1
  7039  0743  3000               	movlw	0
  7040  0744  00B9               	movwf	___ftmul@f3_as_product+2
  7041  0745                     l3602:
  7042  0745  3007               	movlw	7
  7043  0746  00B2               	movwf	??___ftmul
  7044  0747  0832               	movf	??___ftmul,w
  7045  0748  00BA               	movwf	___ftmul@cntr
  7046  0749                     l3604:
  7047  0749  1C2C               	btfss	___ftmul@f1,0
  7048  074A  2F4C               	goto	u4901
  7049  074B  2F4D               	goto	u4900
  7050  074C                     u4901:
  7051  074C  2F5D               	goto	l3608
  7052  074D                     u4900:
  7053  074D                     l3606:
  7054  074D  082F               	movf	___ftmul@f2,w
  7055  074E  07B7               	addwf	___ftmul@f3_as_product,f
  7056  074F  0830               	movf	___ftmul@f2+1,w
  7057  0750  1103               	clrz
  7058  0751  1803               	skipnc
  7059  0752  0A30               	incf	___ftmul@f2+1,w
  7060  0753  1903               	skipnz
  7061  0754  2F56               	goto	u4911
  7062  0755  07B8               	addwf	___ftmul@f3_as_product+1,f
  7063  0756                     u4911:
  7064  0756  0831               	movf	___ftmul@f2+2,w
  7065  0757  1103               	clrz
  7066  0758  1803               	skipnc
  7067  0759  0A31               	incf	___ftmul@f2+2,w
  7068  075A  1903               	skipnz
  7069  075B  2F5D               	goto	u4912
  7070  075C  07B9               	addwf	___ftmul@f3_as_product+2,f
  7071  075D                     u4912:
  7072  075D                     l3608:
  7073  075D  3001               	movlw	1
  7074  075E                     u4925:
  7075  075E  1003               	clrc
  7076  075F  0CAE               	rrf	___ftmul@f1+2,f
  7077  0760  0CAD               	rrf	___ftmul@f1+1,f
  7078  0761  0CAC               	rrf	___ftmul@f1,f
  7079  0762  3EFF               	addlw	-1
  7080  0763  1D03               	skipz
  7081  0764  2F5E               	goto	u4925
  7082  0765                     l3610:
  7083  0765  3001               	movlw	1
  7084  0766                     u4935:
  7085  0766  1003               	clrc
  7086  0767  0DAF               	rlf	___ftmul@f2,f
  7087  0768  0DB0               	rlf	___ftmul@f2+1,f
  7088  0769  0DB1               	rlf	___ftmul@f2+2,f
  7089  076A  3EFF               	addlw	-1
  7090  076B  1D03               	skipz
  7091  076C  2F66               	goto	u4935
  7092  076D                     l3612:
  7093  076D  3001               	movlw	1
  7094  076E  02BA               	subwf	___ftmul@cntr,f
  7095  076F  1D03               	btfss	3,2
  7096  0770  2F72               	goto	u4941
  7097  0771  2F73               	goto	u4940
  7098  0772                     u4941:
  7099  0772  2F49               	goto	l3604
  7100  0773                     u4940:
  7101  0773                     l3614:
  7102  0773  3009               	movlw	9
  7103  0774  00B2               	movwf	??___ftmul
  7104  0775  0832               	movf	??___ftmul,w
  7105  0776  00BA               	movwf	___ftmul@cntr
  7106  0777                     l3616:
  7107  0777  1C2C               	btfss	___ftmul@f1,0
  7108  0778  2F7A               	goto	u4951
  7109  0779  2F7B               	goto	u4950
  7110  077A                     u4951:
  7111  077A  2F8B               	goto	l3620
  7112  077B                     u4950:
  7113  077B                     l3618:
  7114  077B  082F               	movf	___ftmul@f2,w
  7115  077C  07B7               	addwf	___ftmul@f3_as_product,f
  7116  077D  0830               	movf	___ftmul@f2+1,w
  7117  077E  1103               	clrz
  7118  077F  1803               	skipnc
  7119  0780  0A30               	incf	___ftmul@f2+1,w
  7120  0781  1903               	skipnz
  7121  0782  2F84               	goto	u4961
  7122  0783  07B8               	addwf	___ftmul@f3_as_product+1,f
  7123  0784                     u4961:
  7124  0784  0831               	movf	___ftmul@f2+2,w
  7125  0785  1103               	clrz
  7126  0786  1803               	skipnc
  7127  0787  0A31               	incf	___ftmul@f2+2,w
  7128  0788  1903               	skipnz
  7129  0789  2F8B               	goto	u4962
  7130  078A  07B9               	addwf	___ftmul@f3_as_product+2,f
  7131  078B                     u4962:
  7132  078B                     l3620:
  7133  078B  3001               	movlw	1
  7134  078C                     u4975:
  7135  078C  1003               	clrc
  7136  078D  0CAE               	rrf	___ftmul@f1+2,f
  7137  078E  0CAD               	rrf	___ftmul@f1+1,f
  7138  078F  0CAC               	rrf	___ftmul@f1,f
  7139  0790  3EFF               	addlw	-1
  7140  0791  1D03               	skipz
  7141  0792  2F8C               	goto	u4975
  7142  0793                     l3622:
  7143  0793  3001               	movlw	1
  7144  0794                     u4985:
  7145  0794  1003               	clrc
  7146  0795  0CB9               	rrf	___ftmul@f3_as_product+2,f
  7147  0796  0CB8               	rrf	___ftmul@f3_as_product+1,f
  7148  0797  0CB7               	rrf	___ftmul@f3_as_product,f
  7149  0798  3EFF               	addlw	-1
  7150  0799  1D03               	skipz
  7151  079A  2F94               	goto	u4985
  7152  079B                     l3624:
  7153  079B  3001               	movlw	1
  7154  079C  02BA               	subwf	___ftmul@cntr,f
  7155  079D  1D03               	btfss	3,2
  7156  079E  2FA0               	goto	u4991
  7157  079F  2FA1               	goto	u4990
  7158  07A0                     u4991:
  7159  07A0  2F77               	goto	l3616
  7160  07A1                     u4990:
  7161  07A1                     l3626:
  7162  07A1  0837               	movf	___ftmul@f3_as_product,w
  7163  07A2  00F2               	movwf	___ftpack@arg
  7164  07A3  0838               	movf	___ftmul@f3_as_product+1,w
  7165  07A4  00F3               	movwf	___ftpack@arg+1
  7166  07A5  0839               	movf	___ftmul@f3_as_product+2,w
  7167  07A6  00F4               	movwf	___ftpack@arg+2
  7168  07A7  0836               	movf	___ftmul@exp,w
  7169  07A8  00B2               	movwf	??___ftmul
  7170  07A9  0832               	movf	??___ftmul,w
  7171  07AA  00F5               	movwf	___ftpack@exp
  7172  07AB  083B               	movf	___ftmul@sign,w
  7173  07AC  00B3               	movwf	??___ftmul+1
  7174  07AD  0833               	movf	??___ftmul+1,w
  7175  07AE  00F6               	movwf	___ftpack@sign
  7176  07AF  160A  118A  23A3  120A  118A  	fcall	___ftpack
  7177  07B4  0872               	movf	?___ftpack,w
  7178  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  7179  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  7180  07B7  00AC               	movwf	?___ftmul
  7181  07B8  0873               	movf	?___ftpack+1,w
  7182  07B9  00AD               	movwf	?___ftmul+1
  7183  07BA  0874               	movf	?___ftpack+2,w
  7184  07BB  00AE               	movwf	?___ftmul+2
  7185  07BC                     l791:
  7186  07BC  0008               	return
  7187  07BD                     __end_of___ftmul:
  7188                           
  7189                           	psect	text36
  7190  1C6A                     __ptext36:	
  7191 ;; *************** function ___bmul *****************
  7192 ;; Defined at:
  7193 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;  multiplier      1    wreg     unsigned char 
  7196 ;;  multiplicand    1    8[BANK0 ] unsigned char 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  multiplier      1   11[BANK0 ] unsigned char 
  7199 ;;  product         1   10[BANK0 ] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      unsigned char 
  7202 ;; Registers used:
  7203 ;;		wreg, status,2, status,0
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7209 ;;      Params:         0       1       0       0       0
  7210 ;;      Locals:         0       2       0       0       0
  7211 ;;      Temps:          0       1       0       0       0
  7212 ;;      Totals:         0       4       0       0       0
  7213 ;;Total ram usage:        4 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    1
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_fround
  7220 ;;		_scale
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           
  7225                           ;psect for function ___bmul
  7226  1C6A                     ___bmul:
  7227                           
  7228                           ;incstack = 0
  7229                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7230                           ;___bmul@multiplier stored from wreg
  7231  1C6A  1283               	bcf	3,5	;RP0=0, select bank0
  7232  1C6B  1303               	bcf	3,6	;RP1=0, select bank0
  7233  1C6C  00AB               	movwf	___bmul@multiplier
  7234  1C6D                     l2266:
  7235  1C6D  01AA               	clrf	___bmul@product
  7236  1C6E                     l2268:
  7237  1C6E  1C2B               	btfss	___bmul@multiplier,0
  7238  1C6F  2C71               	goto	u2381
  7239  1C70  2C72               	goto	u2380
  7240  1C71                     u2381:
  7241  1C71  2C76               	goto	l2272
  7242  1C72                     u2380:
  7243  1C72                     l2270:
  7244  1C72  0828               	movf	___bmul@multiplicand,w
  7245  1C73  00A9               	movwf	??___bmul
  7246  1C74  0829               	movf	??___bmul,w
  7247  1C75  07AA               	addwf	___bmul@product,f
  7248  1C76                     l2272:
  7249  1C76  1003               	clrc
  7250  1C77  0DA8               	rlf	___bmul@multiplicand,f
  7251  1C78                     l2274:
  7252  1C78  1003               	clrc
  7253  1C79  0CAB               	rrf	___bmul@multiplier,f
  7254  1C7A  082B               	movf	___bmul@multiplier,w
  7255  1C7B  1D03               	btfss	3,2
  7256  1C7C  2C7E               	goto	u2391
  7257  1C7D  2C7F               	goto	u2390
  7258  1C7E                     u2391:
  7259  1C7E  2C6E               	goto	l2268
  7260  1C7F                     u2390:
  7261  1C7F                     l2276:
  7262  1C7F  082A               	movf	___bmul@product,w
  7263  1C80                     l508:
  7264  1C80  0008               	return
  7265  1C81                     __end_of___bmul:
  7266                           
  7267                           	psect	text37
  7268  141F                     __ptext37:	
  7269 ;; *************** function __tdiv_to_l_ *****************
  7270 ;; Defined at:
  7271 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftdivl.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  f1              3    2[COMMON] float 
  7274 ;;  f2              3    5[COMMON] float 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  quot            4    4[BANK0 ] unsigned long 
  7277 ;;  exp1            1    9[BANK0 ] unsigned char 
  7278 ;;  cntr            1    8[BANK0 ] unsigned char 
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  4    2[COMMON] unsigned long 
  7281 ;; Registers used:
  7282 ;;		wreg, status,2, status,0
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7288 ;;      Params:         6       0       0       0       0
  7289 ;;      Locals:         0       6       0       0       0
  7290 ;;      Temps:          0       4       0       0       0
  7291 ;;      Totals:         6      10       0       0       0
  7292 ;;Total ram usage:       16 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    1
  7295 ;; This function calls:
  7296 ;;		Nothing
  7297 ;; This function is called by:
  7298 ;;		_sprintf
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           
  7303                           ;psect for function __tdiv_to_l_
  7304  141F                     __tdiv_to_l_:
  7305  141F                     l3738:	
  7306                           ;incstack = 0
  7307                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  7308                           
  7309  141F  0872               	movf	__tdiv_to_l_@f1,w
  7310  1420  1283               	bcf	3,5	;RP0=0, select bank0
  7311  1421  1303               	bcf	3,6	;RP1=0, select bank0
  7312  1422  00A0               	movwf	??__tdiv_to_l_
  7313  1423  0873               	movf	__tdiv_to_l_@f1+1,w
  7314  1424  00A1               	movwf	??__tdiv_to_l_+1
  7315  1425  0874               	movf	__tdiv_to_l_@f1+2,w
  7316  1426  00A2               	movwf	??__tdiv_to_l_+2
  7317  1427  1003               	clrc
  7318  1428  0D21               	rlf	??__tdiv_to_l_+1,w
  7319  1429  0D22               	rlf	??__tdiv_to_l_+2,w
  7320  142A  00A3               	movwf	??__tdiv_to_l_+3
  7321  142B  0823               	movf	??__tdiv_to_l_+3,w
  7322  142C  00A9               	movwf	__tdiv_to_l_@exp1
  7323  142D  0829               	movf	__tdiv_to_l_@exp1,w
  7324  142E  1D03               	btfss	3,2
  7325  142F  2C31               	goto	u5141
  7326  1430  2C32               	goto	u5140
  7327  1431                     u5141:
  7328  1431  2C3B               	goto	l3744
  7329  1432                     u5140:
  7330  1432                     l3740:
  7331  1432  3000               	movlw	0
  7332  1433  00F5               	movwf	?__tdiv_to_l_+3
  7333  1434  3000               	movlw	0
  7334  1435  00F4               	movwf	?__tdiv_to_l_+2
  7335  1436  3000               	movlw	0
  7336  1437  00F3               	movwf	?__tdiv_to_l_+1
  7337  1438  3000               	movlw	0
  7338  1439  00F2               	movwf	?__tdiv_to_l_
  7339  143A  2CDB               	goto	l767
  7340  143B                     l3744:
  7341  143B  0875               	movf	__tdiv_to_l_@f2,w
  7342  143C  00A0               	movwf	??__tdiv_to_l_
  7343  143D  0876               	movf	__tdiv_to_l_@f2+1,w
  7344  143E  00A1               	movwf	??__tdiv_to_l_+1
  7345  143F  0877               	movf	__tdiv_to_l_@f2+2,w
  7346  1440  00A2               	movwf	??__tdiv_to_l_+2
  7347  1441  1003               	clrc
  7348  1442  0D21               	rlf	??__tdiv_to_l_+1,w
  7349  1443  0D22               	rlf	??__tdiv_to_l_+2,w
  7350  1444  00A3               	movwf	??__tdiv_to_l_+3
  7351  1445  0823               	movf	??__tdiv_to_l_+3,w
  7352  1446  00A8               	movwf	__tdiv_to_l_@cntr
  7353  1447  0828               	movf	__tdiv_to_l_@cntr,w
  7354  1448  1D03               	btfss	3,2
  7355  1449  2C4B               	goto	u5151
  7356  144A  2C4C               	goto	u5150
  7357  144B                     u5151:
  7358  144B  2C4D               	goto	l768
  7359  144C                     u5150:
  7360  144C  2C32               	goto	l3740
  7361  144D                     l768:
  7362  144D  17F3               	bsf	__tdiv_to_l_@f1+1,7
  7363  144E                     l3750:
  7364  144E  30FF               	movlw	255
  7365  144F  05F2               	andwf	__tdiv_to_l_@f1,f
  7366  1450  30FF               	movlw	255
  7367  1451  05F3               	andwf	__tdiv_to_l_@f1+1,f
  7368  1452  3000               	movlw	0
  7369  1453  05F4               	andwf	__tdiv_to_l_@f1+2,f
  7370  1454                     l3752:
  7371  1454  17F6               	bsf	__tdiv_to_l_@f2+1,7
  7372  1455  30FF               	movlw	255
  7373  1456  05F5               	andwf	__tdiv_to_l_@f2,f
  7374  1457  30FF               	movlw	255
  7375  1458  05F6               	andwf	__tdiv_to_l_@f2+1,f
  7376  1459  3000               	movlw	0
  7377  145A  05F7               	andwf	__tdiv_to_l_@f2+2,f
  7378  145B  3000               	movlw	0
  7379  145C  00A7               	movwf	__tdiv_to_l_@quot+3
  7380  145D  3000               	movlw	0
  7381  145E  00A6               	movwf	__tdiv_to_l_@quot+2
  7382  145F  3000               	movlw	0
  7383  1460  00A5               	movwf	__tdiv_to_l_@quot+1
  7384  1461  3000               	movlw	0
  7385  1462  00A4               	movwf	__tdiv_to_l_@quot
  7386  1463                     l3754:
  7387  1463  307F               	movlw	127
  7388  1464  02A9               	subwf	__tdiv_to_l_@exp1,f
  7389  1465                     l3756:
  7390  1465  3098               	movlw	152
  7391  1466  0728               	addwf	__tdiv_to_l_@cntr,w
  7392  1467  00A0               	movwf	??__tdiv_to_l_
  7393  1468  0820               	movf	??__tdiv_to_l_,w
  7394  1469  02A9               	subwf	__tdiv_to_l_@exp1,f
  7395  146A  3018               	movlw	24
  7396  146B  00A0               	movwf	??__tdiv_to_l_
  7397  146C  0820               	movf	??__tdiv_to_l_,w
  7398  146D  00A8               	movwf	__tdiv_to_l_@cntr
  7399  146E                     l3758:
  7400  146E  3001               	movlw	1
  7401  146F  00A0               	movwf	??__tdiv_to_l_
  7402  1470                     u5165:
  7403  1470  1003               	clrc
  7404  1471  0DA4               	rlf	__tdiv_to_l_@quot,f
  7405  1472  0DA5               	rlf	__tdiv_to_l_@quot+1,f
  7406  1473  0DA6               	rlf	__tdiv_to_l_@quot+2,f
  7407  1474  0DA7               	rlf	__tdiv_to_l_@quot+3,f
  7408  1475  0BA0               	decfsz	??__tdiv_to_l_,f
  7409  1476  2C70               	goto	u5165
  7410  1477                     l3760:
  7411  1477  0877               	movf	__tdiv_to_l_@f2+2,w
  7412  1478  0274               	subwf	__tdiv_to_l_@f1+2,w
  7413  1479  1D03               	skipz
  7414  147A  2C81               	goto	u5175
  7415  147B  0876               	movf	__tdiv_to_l_@f2+1,w
  7416  147C  0273               	subwf	__tdiv_to_l_@f1+1,w
  7417  147D  1D03               	skipz
  7418  147E  2C81               	goto	u5175
  7419  147F  0875               	movf	__tdiv_to_l_@f2,w
  7420  1480  0272               	subwf	__tdiv_to_l_@f1,w
  7421  1481                     u5175:
  7422  1481  1C03               	skipc
  7423  1482  2C84               	goto	u5171
  7424  1483  2C85               	goto	u5170
  7425  1484                     u5171:
  7426  1484  2C90               	goto	l3766
  7427  1485                     u5170:
  7428  1485                     l3762:
  7429  1485  0875               	movf	__tdiv_to_l_@f2,w
  7430  1486  02F2               	subwf	__tdiv_to_l_@f1,f
  7431  1487  0876               	movf	__tdiv_to_l_@f2+1,w
  7432  1488  1C03               	skipc
  7433  1489  0F76               	incfsz	__tdiv_to_l_@f2+1,w
  7434  148A  02F3               	subwf	__tdiv_to_l_@f1+1,f
  7435  148B  0877               	movf	__tdiv_to_l_@f2+2,w
  7436  148C  1C03               	skipc
  7437  148D  0A77               	incf	__tdiv_to_l_@f2+2,w
  7438  148E  02F4               	subwf	__tdiv_to_l_@f1+2,f
  7439  148F                     l3764:
  7440  148F  1424               	bsf	__tdiv_to_l_@quot,0
  7441  1490                     l3766:
  7442  1490  3001               	movlw	1
  7443  1491                     u5185:
  7444  1491  1003               	clrc
  7445  1492  0DF2               	rlf	__tdiv_to_l_@f1,f
  7446  1493  0DF3               	rlf	__tdiv_to_l_@f1+1,f
  7447  1494  0DF4               	rlf	__tdiv_to_l_@f1+2,f
  7448  1495  3EFF               	addlw	-1
  7449  1496  1D03               	skipz
  7450  1497  2C91               	goto	u5185
  7451  1498                     l3768:
  7452  1498  3001               	movlw	1
  7453  1499  02A8               	subwf	__tdiv_to_l_@cntr,f
  7454  149A  1D03               	btfss	3,2
  7455  149B  2C9D               	goto	u5191
  7456  149C  2C9E               	goto	u5190
  7457  149D                     u5191:
  7458  149D  2C6E               	goto	l3758
  7459  149E                     u5190:
  7460  149E                     l771:
  7461  149E  1FA9               	btfss	__tdiv_to_l_@exp1,7
  7462  149F  2CA1               	goto	u5201
  7463  14A0  2CA2               	goto	u5200
  7464  14A1                     u5201:
  7465  14A1  2CBC               	goto	l3778
  7466  14A2                     u5200:
  7467  14A2                     l3770:
  7468  14A2  0829               	movf	__tdiv_to_l_@exp1,w
  7469  14A3  3A80               	xorlw	128
  7470  14A4  3E97               	addlw	151
  7471  14A5  1803               	skipnc
  7472  14A6  2CA8               	goto	u5211
  7473  14A7  2CA9               	goto	u5210
  7474  14A8                     u5211:
  7475  14A8  2CAA               	goto	l3776
  7476  14A9                     u5210:
  7477  14A9  2C32               	goto	l3740
  7478  14AA                     l3776:
  7479  14AA  3001               	movlw	1
  7480  14AB                     u5225:
  7481  14AB  1003               	clrc
  7482  14AC  0CA7               	rrf	__tdiv_to_l_@quot+3,f
  7483  14AD  0CA6               	rrf	__tdiv_to_l_@quot+2,f
  7484  14AE  0CA5               	rrf	__tdiv_to_l_@quot+1,f
  7485  14AF  0CA4               	rrf	__tdiv_to_l_@quot,f
  7486  14B0  3EFF               	addlw	-1
  7487  14B1  1D03               	skipz
  7488  14B2  2CAB               	goto	u5225
  7489  14B3  3001               	movlw	1
  7490  14B4  00A0               	movwf	??__tdiv_to_l_
  7491  14B5  0820               	movf	??__tdiv_to_l_,w
  7492  14B6  07A9               	addwf	__tdiv_to_l_@exp1,f
  7493  14B7  1D03               	btfss	3,2
  7494  14B8  2CBA               	goto	u5231
  7495  14B9  2CBB               	goto	u5230
  7496  14BA                     u5231:
  7497  14BA  2CAA               	goto	l3776
  7498  14BB                     u5230:
  7499  14BB  2CD3               	goto	l3786
  7500  14BC                     l3778:
  7501  14BC  3018               	movlw	24
  7502  14BD  0229               	subwf	__tdiv_to_l_@exp1,w
  7503  14BE  1C03               	skipc
  7504  14BF  2CC1               	goto	u5241
  7505  14C0  2CC2               	goto	u5240
  7506  14C1                     u5241:
  7507  14C1  2CCE               	goto	l778
  7508  14C2                     u5240:
  7509  14C2  2C32               	goto	l3740
  7510  14C3                     l3784:
  7511  14C3  3001               	movlw	1
  7512  14C4  00A0               	movwf	??__tdiv_to_l_
  7513  14C5                     u5255:
  7514  14C5  1003               	clrc
  7515  14C6  0DA4               	rlf	__tdiv_to_l_@quot,f
  7516  14C7  0DA5               	rlf	__tdiv_to_l_@quot+1,f
  7517  14C8  0DA6               	rlf	__tdiv_to_l_@quot+2,f
  7518  14C9  0DA7               	rlf	__tdiv_to_l_@quot+3,f
  7519  14CA  0BA0               	decfsz	??__tdiv_to_l_,f
  7520  14CB  2CC5               	goto	u5255
  7521  14CC  3001               	movlw	1
  7522  14CD  02A9               	subwf	__tdiv_to_l_@exp1,f
  7523  14CE                     l778:
  7524  14CE  0829               	movf	__tdiv_to_l_@exp1,w
  7525  14CF  1D03               	btfss	3,2
  7526  14D0  2CD2               	goto	u5261
  7527  14D1  2CD3               	goto	u5260
  7528  14D2                     u5261:
  7529  14D2  2CC3               	goto	l3784
  7530  14D3                     u5260:
  7531  14D3                     l3786:
  7532  14D3  0827               	movf	__tdiv_to_l_@quot+3,w
  7533  14D4  00F5               	movwf	?__tdiv_to_l_+3
  7534  14D5  0826               	movf	__tdiv_to_l_@quot+2,w
  7535  14D6  00F4               	movwf	?__tdiv_to_l_+2
  7536  14D7  0825               	movf	__tdiv_to_l_@quot+1,w
  7537  14D8  00F3               	movwf	?__tdiv_to_l_+1
  7538  14D9  0824               	movf	__tdiv_to_l_@quot,w
  7539  14DA  00F2               	movwf	?__tdiv_to_l_
  7540  14DB                     l767:
  7541  14DB  0008               	return
  7542  14DC                     __end_of__tdiv_to_l_:
  7543                           
  7544                           	psect	text38
  7545  159E                     __ptext38:	
  7546 ;; *************** function __div_to_l_ *****************
  7547 ;; Defined at:
  7548 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fldivl.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;  f1              3    2[COMMON] unsigned long 
  7551 ;;  f2              3    5[COMMON] unsigned long 
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  quot            4    8[BANK0 ] unsigned long 
  7554 ;;  exp1            1   13[BANK0 ] unsigned char 
  7555 ;;  cntr            1   12[BANK0 ] unsigned char 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  4    2[COMMON] unsigned long 
  7558 ;; Registers used:
  7559 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7565 ;;      Params:         6       0       0       0       0
  7566 ;;      Locals:         0       6       0       0       0
  7567 ;;      Temps:          0       8       0       0       0
  7568 ;;      Totals:         6      14       0       0       0
  7569 ;;Total ram usage:       20 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    1
  7572 ;; This function calls:
  7573 ;;		Nothing
  7574 ;; This function is called by:
  7575 ;;		_sprintf
  7576 ;; This function uses a non-reentrant model
  7577 ;;
  7578                           
  7579                           
  7580                           ;psect for function __div_to_l_
  7581  159E                     __div_to_l_:
  7582  159E                     l2682:	
  7583                           ;incstack = 0
  7584                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  7585                           
  7586  159E  3072               	movlw	low (__div_to_l_@f1| 0)
  7587  159F  0084               	movwf	4
  7588  15A0  0800               	movf	0,w
  7589  15A1  1283               	bcf	3,5	;RP0=0, select bank0
  7590  15A2  1303               	bcf	3,6	;RP1=0, select bank0
  7591  15A3  00A0               	movwf	??__div_to_l_
  7592  15A4  0A84               	incf	4,f
  7593  15A5  0800               	movf	0,w
  7594  15A6  00A1               	movwf	??__div_to_l_+1
  7595  15A7  0A84               	incf	4,f
  7596  15A8  0800               	movf	0,w
  7597  15A9  00A2               	movwf	??__div_to_l_+2
  7598  15AA  0A84               	incf	4,f
  7599  15AB  0800               	movf	0,w
  7600  15AC  00A3               	movwf	??__div_to_l_+3
  7601  15AD  1003               	clrc
  7602  15AE  0D22               	rlf	??__div_to_l_+2,w
  7603  15AF  0D23               	rlf	??__div_to_l_+3,w
  7604  15B0  00A4               	movwf	??__div_to_l_+4
  7605  15B1  0824               	movf	??__div_to_l_+4,w
  7606  15B2  00AD               	movwf	__div_to_l_@exp1
  7607  15B3  082D               	movf	__div_to_l_@exp1,w
  7608  15B4  1D03               	btfss	3,2
  7609  15B5  2DB7               	goto	u3341
  7610  15B6  2DB8               	goto	u3340
  7611  15B7                     u3341:
  7612  15B7  2DC1               	goto	l2688
  7613  15B8                     u3340:
  7614  15B8                     l2684:
  7615  15B8  3000               	movlw	0
  7616  15B9  00F5               	movwf	?__div_to_l_+3
  7617  15BA  3000               	movlw	0
  7618  15BB  00F4               	movwf	?__div_to_l_+2
  7619  15BC  3000               	movlw	0
  7620  15BD  00F3               	movwf	?__div_to_l_+1
  7621  15BE  3000               	movlw	0
  7622  15BF  00F2               	movwf	?__div_to_l_
  7623  15C0  2EC9               	goto	l688
  7624  15C1                     l2688:
  7625  15C1  3075               	movlw	low (__div_to_l_@f2| 0)
  7626  15C2  0084               	movwf	4
  7627  15C3  0800               	movf	0,w
  7628  15C4  00A0               	movwf	??__div_to_l_
  7629  15C5  0A84               	incf	4,f
  7630  15C6  0800               	movf	0,w
  7631  15C7  00A1               	movwf	??__div_to_l_+1
  7632  15C8  0A84               	incf	4,f
  7633  15C9  0800               	movf	0,w
  7634  15CA  00A2               	movwf	??__div_to_l_+2
  7635  15CB  0A84               	incf	4,f
  7636  15CC  0800               	movf	0,w
  7637  15CD  00A3               	movwf	??__div_to_l_+3
  7638  15CE  1003               	clrc
  7639  15CF  0D22               	rlf	??__div_to_l_+2,w
  7640  15D0  0D23               	rlf	??__div_to_l_+3,w
  7641  15D1  00A4               	movwf	??__div_to_l_+4
  7642  15D2  0824               	movf	??__div_to_l_+4,w
  7643  15D3  00AC               	movwf	__div_to_l_@cntr
  7644  15D4  082C               	movf	__div_to_l_@cntr,w
  7645  15D5  1D03               	btfss	3,2
  7646  15D6  2DD8               	goto	u3351
  7647  15D7  2DD9               	goto	u3350
  7648  15D8                     u3351:
  7649  15D8  2DDA               	goto	l2694
  7650  15D9                     u3350:
  7651  15D9  2DB8               	goto	l2684
  7652  15DA                     l2694:
  7653  15DA  3072               	movlw	low (__div_to_l_@f1| 0)
  7654  15DB  0084               	movwf	4
  7655  15DC  3000               	movlw	0
  7656  15DD  0480               	iorwf	0,f
  7657  15DE  0A84               	incf	4,f
  7658  15DF  3000               	movlw	0
  7659  15E0  0480               	iorwf	0,f
  7660  15E1  0A84               	incf	4,f
  7661  15E2  3080               	movlw	128
  7662  15E3  0480               	iorwf	0,f
  7663  15E4  0A84               	incf	4,f
  7664  15E5  3000               	movlw	0
  7665  15E6  0480               	iorwf	0,f
  7666  15E7  3072               	movlw	low (__div_to_l_@f1| 0)
  7667  15E8  0084               	movwf	4
  7668  15E9  30FF               	movlw	255
  7669  15EA  0580               	andwf	0,f
  7670  15EB  0A84               	incf	4,f
  7671  15EC  30FF               	movlw	255
  7672  15ED  0580               	andwf	0,f
  7673  15EE  0A84               	incf	4,f
  7674  15EF  30FF               	movlw	255
  7675  15F0  0580               	andwf	0,f
  7676  15F1  0A84               	incf	4,f
  7677  15F2  3000               	movlw	0
  7678  15F3  0580               	andwf	0,f
  7679  15F4  3075               	movlw	low (__div_to_l_@f2| 0)
  7680  15F5  0084               	movwf	4
  7681  15F6  3000               	movlw	0
  7682  15F7  0480               	iorwf	0,f
  7683  15F8  0A84               	incf	4,f
  7684  15F9  3000               	movlw	0
  7685  15FA  0480               	iorwf	0,f
  7686  15FB  0A84               	incf	4,f
  7687  15FC  3080               	movlw	128
  7688  15FD  0480               	iorwf	0,f
  7689  15FE  0A84               	incf	4,f
  7690  15FF  3000               	movlw	0
  7691  1600  0480               	iorwf	0,f
  7692  1601  3075               	movlw	low (__div_to_l_@f2| 0)
  7693  1602  0084               	movwf	4
  7694  1603  30FF               	movlw	255
  7695  1604  0580               	andwf	0,f
  7696  1605  0A84               	incf	4,f
  7697  1606  30FF               	movlw	255
  7698  1607  0580               	andwf	0,f
  7699  1608  0A84               	incf	4,f
  7700  1609  30FF               	movlw	255
  7701  160A  0580               	andwf	0,f
  7702  160B  0A84               	incf	4,f
  7703  160C  3000               	movlw	0
  7704  160D  0580               	andwf	0,f
  7705  160E                     l2696:
  7706  160E  3000               	movlw	0
  7707  160F  00AB               	movwf	__div_to_l_@quot+3
  7708  1610  3000               	movlw	0
  7709  1611  00AA               	movwf	__div_to_l_@quot+2
  7710  1612  3000               	movlw	0
  7711  1613  00A9               	movwf	__div_to_l_@quot+1
  7712  1614  3000               	movlw	0
  7713  1615  00A8               	movwf	__div_to_l_@quot
  7714  1616                     l2698:
  7715  1616  307F               	movlw	127
  7716  1617  02AD               	subwf	__div_to_l_@exp1,f
  7717  1618                     l2700:
  7718  1618  30A0               	movlw	160
  7719  1619  072C               	addwf	__div_to_l_@cntr,w
  7720  161A  00A0               	movwf	??__div_to_l_
  7721  161B  0820               	movf	??__div_to_l_,w
  7722  161C  02AD               	subwf	__div_to_l_@exp1,f
  7723  161D                     l2702:
  7724  161D  3020               	movlw	32
  7725  161E  00A0               	movwf	??__div_to_l_
  7726  161F  0820               	movf	??__div_to_l_,w
  7727  1620  00AC               	movwf	__div_to_l_@cntr
  7728  1621                     l2704:
  7729  1621  3001               	movlw	1
  7730  1622  00A0               	movwf	??__div_to_l_
  7731  1623                     u3365:
  7732  1623  1003               	clrc
  7733  1624  0DA8               	rlf	__div_to_l_@quot,f
  7734  1625  0DA9               	rlf	__div_to_l_@quot+1,f
  7735  1626  0DAA               	rlf	__div_to_l_@quot+2,f
  7736  1627  0DAB               	rlf	__div_to_l_@quot+3,f
  7737  1628  0BA0               	decfsz	??__div_to_l_,f
  7738  1629  2E23               	goto	u3365
  7739  162A                     l2706:
  7740  162A  3075               	movlw	low (__div_to_l_@f2| 0)
  7741  162B  0084               	movwf	4
  7742  162C  0800               	movf	0,w
  7743  162D  00A0               	movwf	??__div_to_l_
  7744  162E  0A84               	incf	4,f
  7745  162F  0800               	movf	0,w
  7746  1630  00A1               	movwf	??__div_to_l_+1
  7747  1631  0A84               	incf	4,f
  7748  1632  0800               	movf	0,w
  7749  1633  00A2               	movwf	??__div_to_l_+2
  7750  1634  0A84               	incf	4,f
  7751  1635  0800               	movf	0,w
  7752  1636  00A3               	movwf	??__div_to_l_+3
  7753  1637  3072               	movlw	low (__div_to_l_@f1| 0)
  7754  1638  0084               	movwf	4
  7755  1639  0800               	movf	0,w
  7756  163A  00A4               	movwf	??__div_to_l_+4
  7757  163B  0A84               	incf	4,f
  7758  163C  0800               	movf	0,w
  7759  163D  00A5               	movwf	??__div_to_l_+5
  7760  163E  0A84               	incf	4,f
  7761  163F  0800               	movf	0,w
  7762  1640  00A6               	movwf	??__div_to_l_+6
  7763  1641  0A84               	incf	4,f
  7764  1642  0800               	movf	0,w
  7765  1643  00A7               	movwf	??__div_to_l_+7
  7766  1644  0823               	movf	??__div_to_l_+3,w
  7767  1645  0227               	subwf	??__div_to_l_+7,w
  7768  1646  1D03               	skipz
  7769  1647  2E52               	goto	u3375
  7770  1648  0822               	movf	??__div_to_l_+2,w
  7771  1649  0226               	subwf	??__div_to_l_+6,w
  7772  164A  1D03               	skipz
  7773  164B  2E52               	goto	u3375
  7774  164C  0821               	movf	??__div_to_l_+1,w
  7775  164D  0225               	subwf	??__div_to_l_+5,w
  7776  164E  1D03               	skipz
  7777  164F  2E52               	goto	u3375
  7778  1650  0820               	movf	??__div_to_l_,w
  7779  1651  0224               	subwf	??__div_to_l_+4,w
  7780  1652                     u3375:
  7781  1652  1C03               	skipc
  7782  1653  2E55               	goto	u3371
  7783  1654  2E56               	goto	u3370
  7784  1655                     u3371:
  7785  1655  2E79               	goto	l691
  7786  1656                     u3370:
  7787  1656                     l2708:
  7788  1656  3075               	movlw	low (__div_to_l_@f2| 0)
  7789  1657  0084               	movwf	4
  7790  1658  0800               	movf	0,w
  7791  1659  00A0               	movwf	??__div_to_l_
  7792  165A  0A84               	incf	4,f
  7793  165B  0800               	movf	0,w
  7794  165C  00A1               	movwf	??__div_to_l_+1
  7795  165D  0A84               	incf	4,f
  7796  165E  0800               	movf	0,w
  7797  165F  00A2               	movwf	??__div_to_l_+2
  7798  1660  0A84               	incf	4,f
  7799  1661  0800               	movf	0,w
  7800  1662  00A3               	movwf	??__div_to_l_+3
  7801  1663  3072               	movlw	low (__div_to_l_@f1| 0)
  7802  1664  0084               	movwf	4
  7803  1665  0820               	movf	??__div_to_l_,w
  7804  1666  0280               	subwf	0,f
  7805  1667  0A84               	incf	4,f
  7806  1668  0821               	movf	??__div_to_l_+1,w
  7807  1669  1C03               	skipc
  7808  166A  0F21               	incfsz	??__div_to_l_+1,w
  7809  166B  0280               	subwf	0,f
  7810  166C  0A84               	incf	4,f
  7811  166D  0822               	movf	??__div_to_l_+2,w
  7812  166E  1C03               	skipc
  7813  166F  0F22               	incfsz	??__div_to_l_+2,w
  7814  1670  0280               	subwf	0,f
  7815  1671  0A84               	incf	4,f
  7816  1672  0823               	movf	??__div_to_l_+3,w
  7817  1673  1C03               	skipc
  7818  1674  0A23               	incf	??__div_to_l_+3,w
  7819  1675  0280               	subwf	0,f
  7820  1676  3003               	movlw	3
  7821  1677  0284               	subwf	4,f
  7822  1678                     l2710:
  7823  1678  1428               	bsf	__div_to_l_@quot,0
  7824  1679                     l691:
  7825  1679  3072               	movlw	low (__div_to_l_@f1| 0)
  7826  167A  0084               	movwf	4
  7827  167B  1003               	clrc
  7828  167C  0D80               	rlf	0,f
  7829  167D  0A84               	incf	4,f
  7830  167E  0D80               	rlf	0,f
  7831  167F  0A84               	incf	4,f
  7832  1680  0D80               	rlf	0,f
  7833  1681  0A84               	incf	4,f
  7834  1682  0D80               	rlf	0,f
  7835  1683  0384               	decf	4,f
  7836  1684  0384               	decf	4,f
  7837  1685  0384               	decf	4,f
  7838  1686                     l2712:
  7839  1686  3001               	movlw	1
  7840  1687  02AC               	subwf	__div_to_l_@cntr,f
  7841  1688  1D03               	btfss	3,2
  7842  1689  2E8B               	goto	u3381
  7843  168A  2E8C               	goto	u3380
  7844  168B                     u3381:
  7845  168B  2E21               	goto	l2704
  7846  168C                     u3380:
  7847  168C                     l692:
  7848  168C  1FAD               	btfss	__div_to_l_@exp1,7
  7849  168D  2E8F               	goto	u3391
  7850  168E  2E90               	goto	u3390
  7851  168F                     u3391:
  7852  168F  2EAA               	goto	l2722
  7853  1690                     u3390:
  7854  1690                     l2714:
  7855  1690  082D               	movf	__div_to_l_@exp1,w
  7856  1691  3A80               	xorlw	128
  7857  1692  3E9F               	addlw	159
  7858  1693  1803               	skipnc
  7859  1694  2E96               	goto	u3401
  7860  1695  2E97               	goto	u3400
  7861  1696                     u3401:
  7862  1696  2E98               	goto	l2720
  7863  1697                     u3400:
  7864  1697  2DB8               	goto	l2684
  7865  1698                     l2720:
  7866  1698  3001               	movlw	1
  7867  1699                     u3415:
  7868  1699  1003               	clrc
  7869  169A  0CAB               	rrf	__div_to_l_@quot+3,f
  7870  169B  0CAA               	rrf	__div_to_l_@quot+2,f
  7871  169C  0CA9               	rrf	__div_to_l_@quot+1,f
  7872  169D  0CA8               	rrf	__div_to_l_@quot,f
  7873  169E  3EFF               	addlw	-1
  7874  169F  1D03               	skipz
  7875  16A0  2E99               	goto	u3415
  7876  16A1  3001               	movlw	1
  7877  16A2  00A0               	movwf	??__div_to_l_
  7878  16A3  0820               	movf	??__div_to_l_,w
  7879  16A4  07AD               	addwf	__div_to_l_@exp1,f
  7880  16A5  1D03               	btfss	3,2
  7881  16A6  2EA8               	goto	u3421
  7882  16A7  2EA9               	goto	u3420
  7883  16A8                     u3421:
  7884  16A8  2E98               	goto	l2720
  7885  16A9                     u3420:
  7886  16A9  2EC1               	goto	l2730
  7887  16AA                     l2722:
  7888  16AA  3020               	movlw	32
  7889  16AB  022D               	subwf	__div_to_l_@exp1,w
  7890  16AC  1C03               	skipc
  7891  16AD  2EAF               	goto	u3431
  7892  16AE  2EB0               	goto	u3430
  7893  16AF                     u3431:
  7894  16AF  2EBC               	goto	l699
  7895  16B0                     u3430:
  7896  16B0  2DB8               	goto	l2684
  7897  16B1                     l2728:
  7898  16B1  3001               	movlw	1
  7899  16B2  00A0               	movwf	??__div_to_l_
  7900  16B3                     u3445:
  7901  16B3  1003               	clrc
  7902  16B4  0DA8               	rlf	__div_to_l_@quot,f
  7903  16B5  0DA9               	rlf	__div_to_l_@quot+1,f
  7904  16B6  0DAA               	rlf	__div_to_l_@quot+2,f
  7905  16B7  0DAB               	rlf	__div_to_l_@quot+3,f
  7906  16B8  0BA0               	decfsz	??__div_to_l_,f
  7907  16B9  2EB3               	goto	u3445
  7908  16BA  3001               	movlw	1
  7909  16BB  02AD               	subwf	__div_to_l_@exp1,f
  7910  16BC                     l699:
  7911  16BC  082D               	movf	__div_to_l_@exp1,w
  7912  16BD  1D03               	btfss	3,2
  7913  16BE  2EC0               	goto	u3451
  7914  16BF  2EC1               	goto	u3450
  7915  16C0                     u3451:
  7916  16C0  2EB1               	goto	l2728
  7917  16C1                     u3450:
  7918  16C1                     l2730:
  7919  16C1  082B               	movf	__div_to_l_@quot+3,w
  7920  16C2  00F5               	movwf	?__div_to_l_+3
  7921  16C3  082A               	movf	__div_to_l_@quot+2,w
  7922  16C4  00F4               	movwf	?__div_to_l_+2
  7923  16C5  0829               	movf	__div_to_l_@quot+1,w
  7924  16C6  00F3               	movwf	?__div_to_l_+1
  7925  16C7  0828               	movf	__div_to_l_@quot,w
  7926  16C8  00F2               	movwf	?__div_to_l_
  7927  16C9                     l688:
  7928  16C9  0008               	return
  7929  16CA                     __end_of__div_to_l_:
  7930                           
  7931                           	psect	text39
  7932  0803                     __ptext39:	
  7933 ;; *************** function ___wmul *****************
  7934 ;; Defined at:
  7935 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  7936 ;; Parameters:    Size  Location     Type
  7937 ;;  multiplier      2    2[COMMON] unsigned int 
  7938 ;;  multiplicand    2    4[COMMON] unsigned int 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  product         2    6[COMMON] unsigned int 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  2    2[COMMON] unsigned int 
  7943 ;; Registers used:
  7944 ;;		wreg, status,2, status,0
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7950 ;;      Params:         4       0       0       0       0
  7951 ;;      Locals:         2       0       0       0       0
  7952 ;;      Temps:          0       0       0       0       0
  7953 ;;      Totals:         6       0       0       0       0
  7954 ;;Total ram usage:        6 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    1
  7957 ;; This function calls:
  7958 ;;		Nothing
  7959 ;; This function is called by:
  7960 ;;		_Mapeo_M
  7961 ;;		_sprintf
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           
  7966                           ;psect for function ___wmul
  7967  0803                     ___wmul:
  7968  0803                     l2734:	
  7969                           ;incstack = 0
  7970                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7971                           
  7972  0803  01F6               	clrf	___wmul@product
  7973  0804  01F7               	clrf	___wmul@product+1
  7974  0805                     l2736:
  7975  0805  1C72               	btfss	___wmul@multiplier,0
  7976  0806  2808               	goto	u3461
  7977  0807  2809               	goto	u3460
  7978  0808                     u3461:
  7979  0808  280F               	goto	l482
  7980  0809                     u3460:
  7981  0809                     l2738:
  7982  0809  0874               	movf	___wmul@multiplicand,w
  7983  080A  07F6               	addwf	___wmul@product,f
  7984  080B  1803               	skipnc
  7985  080C  0AF7               	incf	___wmul@product+1,f
  7986  080D  0875               	movf	___wmul@multiplicand+1,w
  7987  080E  07F7               	addwf	___wmul@product+1,f
  7988  080F                     l482:
  7989  080F  3001               	movlw	1
  7990  0810                     u3475:
  7991  0810  1003               	clrc
  7992  0811  0DF4               	rlf	___wmul@multiplicand,f
  7993  0812  0DF5               	rlf	___wmul@multiplicand+1,f
  7994  0813  3EFF               	addlw	-1
  7995  0814  1D03               	skipz
  7996  0815  2810               	goto	u3475
  7997  0816                     l2740:
  7998  0816  3001               	movlw	1
  7999  0817                     u3485:
  8000  0817  1003               	clrc
  8001  0818  0CF3               	rrf	___wmul@multiplier+1,f
  8002  0819  0CF2               	rrf	___wmul@multiplier,f
  8003  081A  3EFF               	addlw	-1
  8004  081B  1D03               	skipz
  8005  081C  2817               	goto	u3485
  8006  081D                     l2742:
  8007  081D  0872               	movf	___wmul@multiplier,w
  8008  081E  0473               	iorwf	___wmul@multiplier+1,w
  8009  081F  1D03               	btfss	3,2
  8010  0820  2822               	goto	u3491
  8011  0821  2823               	goto	u3490
  8012  0822                     u3491:
  8013  0822  2805               	goto	l2736
  8014  0823                     u3490:
  8015  0823                     l2744:
  8016  0823  0877               	movf	___wmul@product+1,w
  8017  0824  00F3               	movwf	?___wmul+1
  8018  0825  0876               	movf	___wmul@product,w
  8019  0826  00F2               	movwf	?___wmul
  8020  0827                     l484:
  8021  0827  0008               	return
  8022  0828                     __end_of___wmul:
  8023                           
  8024                           	psect	text40
  8025  1D0D                     __ptext40:	
  8026 ;; *************** function ___lltoft *****************
  8027 ;; Defined at:
  8028 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lltoft.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  c               4    0[BANK0 ] unsigned long 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  exp             1    5[BANK0 ] unsigned char 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  3    0[BANK0 ] float 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2, status,0, pclath, cstack
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8042 ;;      Params:         0       4       0       0       0
  8043 ;;      Locals:         0       1       0       0       0
  8044 ;;      Temps:          0       1       0       0       0
  8045 ;;      Totals:         0       6       0       0       0
  8046 ;;Total ram usage:        6 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    2
  8049 ;; This function calls:
  8050 ;;		___ftpack
  8051 ;; This function is called by:
  8052 ;;		_sprintf
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           
  8057                           ;psect for function ___lltoft
  8058  1D0D                     ___lltoft:
  8059  1D0D                     l3842:	
  8060                           ;incstack = 0
  8061                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  8062                           
  8063  1D0D  308E               	movlw	142
  8064  1D0E  1283               	bcf	3,5	;RP0=0, select bank0
  8065  1D0F  1303               	bcf	3,6	;RP1=0, select bank0
  8066  1D10  00A4               	movwf	??___lltoft
  8067  1D11  0824               	movf	??___lltoft,w
  8068  1D12  00A5               	movwf	___lltoft@exp
  8069  1D13  2D21               	goto	l3846
  8070  1D14                     l3844:
  8071  1D14  3001               	movlw	1
  8072  1D15                     u5415:
  8073  1D15  1003               	clrc
  8074  1D16  0CA3               	rrf	___lltoft@c+3,f
  8075  1D17  0CA2               	rrf	___lltoft@c+2,f
  8076  1D18  0CA1               	rrf	___lltoft@c+1,f
  8077  1D19  0CA0               	rrf	___lltoft@c,f
  8078  1D1A  3EFF               	addlw	-1
  8079  1D1B  1D03               	skipz
  8080  1D1C  2D15               	goto	u5415
  8081  1D1D  3001               	movlw	1
  8082  1D1E  00A4               	movwf	??___lltoft
  8083  1D1F  0824               	movf	??___lltoft,w
  8084  1D20  07A5               	addwf	___lltoft@exp,f
  8085  1D21                     l3846:
  8086  1D21  30FF               	movlw	255
  8087  1D22  0523               	andwf	___lltoft@c+3,w
  8088  1D23  1D03               	btfss	3,2
  8089  1D24  2D26               	goto	u5421
  8090  1D25  2D27               	goto	u5420
  8091  1D26                     u5421:
  8092  1D26  2D14               	goto	l3844
  8093  1D27                     u5420:
  8094  1D27                     l3848:
  8095  1D27  0820               	movf	___lltoft@c,w
  8096  1D28  00F2               	movwf	___ftpack@arg
  8097  1D29  0821               	movf	___lltoft@c+1,w
  8098  1D2A  00F3               	movwf	___ftpack@arg+1
  8099  1D2B  0822               	movf	___lltoft@c+2,w
  8100  1D2C  00F4               	movwf	___ftpack@arg+2
  8101  1D2D  0825               	movf	___lltoft@exp,w
  8102  1D2E  00A4               	movwf	??___lltoft
  8103  1D2F  0824               	movf	??___lltoft,w
  8104  1D30  00F5               	movwf	___ftpack@exp
  8105  1D31  01F6               	clrf	___ftpack@sign
  8106  1D32  160A  118A  23A3  160A  158A  	fcall	___ftpack
  8107  1D37  0872               	movf	?___ftpack,w
  8108  1D38  1283               	bcf	3,5	;RP0=0, select bank0
  8109  1D39  1303               	bcf	3,6	;RP1=0, select bank0
  8110  1D3A  00A0               	movwf	?___lltoft
  8111  1D3B  0873               	movf	?___ftpack+1,w
  8112  1D3C  00A1               	movwf	?___lltoft+1
  8113  1D3D  0874               	movf	?___ftpack+2,w
  8114  1D3E  00A2               	movwf	?___lltoft+2
  8115  1D3F                     l861:
  8116  1D3F  0008               	return
  8117  1D40                     __end_of___lltoft:
  8118                           
  8119                           	psect	text41
  8120  10FB                     __ptext41:	
  8121 ;; *************** function ___llmod *****************
  8122 ;; Defined at:
  8123 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\llmod.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;  divisor         4    6[BANK0 ] unsigned long 
  8126 ;;  dividend        4   10[BANK0 ] unsigned long 
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;  counter         1   15[BANK0 ] unsigned char 
  8129 ;; Return value:  Size  Location     Type
  8130 ;;                  4    6[BANK0 ] unsigned long 
  8131 ;; Registers used:
  8132 ;;		wreg, status,2, status,0
  8133 ;; Tracked objects:
  8134 ;;		On entry : 0/0
  8135 ;;		On exit  : 0/0
  8136 ;;		Unchanged: 0/0
  8137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8138 ;;      Params:         0       8       0       0       0
  8139 ;;      Locals:         0       1       0       0       0
  8140 ;;      Temps:          0       1       0       0       0
  8141 ;;      Totals:         0      10       0       0       0
  8142 ;;Total ram usage:       10 bytes
  8143 ;; Hardware stack levels used:    1
  8144 ;; Hardware stack levels required when called:    1
  8145 ;; This function calls:
  8146 ;;		Nothing
  8147 ;; This function is called by:
  8148 ;;		_sprintf
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           
  8153                           ;psect for function ___llmod
  8154  10FB                     ___llmod:
  8155  10FB                     l3822:	
  8156                           ;incstack = 0
  8157                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8158                           
  8159  10FB  1283               	bcf	3,5	;RP0=0, select bank0
  8160  10FC  1303               	bcf	3,6	;RP1=0, select bank0
  8161  10FD  0829               	movf	___llmod@divisor+3,w
  8162  10FE  0428               	iorwf	___llmod@divisor+2,w
  8163  10FF  0427               	iorwf	___llmod@divisor+1,w
  8164  1100  0426               	iorwf	___llmod@divisor,w
  8165  1101  1903               	skipnz
  8166  1102  2904               	goto	u5351
  8167  1103  2905               	goto	u5350
  8168  1104                     u5351:
  8169  1104  2948               	goto	l3838
  8170  1105                     u5350:
  8171  1105                     l3824:
  8172  1105  01AF               	clrf	___llmod@counter
  8173  1106  0AAF               	incf	___llmod@counter,f
  8174  1107  2915               	goto	l3828
  8175  1108                     l3826:
  8176  1108  3001               	movlw	1
  8177  1109  00AE               	movwf	??___llmod
  8178  110A                     u5365:
  8179  110A  1003               	clrc
  8180  110B  0DA6               	rlf	___llmod@divisor,f
  8181  110C  0DA7               	rlf	___llmod@divisor+1,f
  8182  110D  0DA8               	rlf	___llmod@divisor+2,f
  8183  110E  0DA9               	rlf	___llmod@divisor+3,f
  8184  110F  0BAE               	decfsz	??___llmod,f
  8185  1110  290A               	goto	u5365
  8186  1111  3001               	movlw	1
  8187  1112  00AE               	movwf	??___llmod
  8188  1113  082E               	movf	??___llmod,w
  8189  1114  07AF               	addwf	___llmod@counter,f
  8190  1115                     l3828:
  8191  1115  1FA9               	btfss	___llmod@divisor+3,7
  8192  1116  2918               	goto	u5371
  8193  1117  2919               	goto	u5370
  8194  1118                     u5371:
  8195  1118  2908               	goto	l3826
  8196  1119                     u5370:
  8197  1119                     l3830:
  8198  1119  0829               	movf	___llmod@divisor+3,w
  8199  111A  022D               	subwf	___llmod@dividend+3,w
  8200  111B  1D03               	skipz
  8201  111C  2927               	goto	u5385
  8202  111D  0828               	movf	___llmod@divisor+2,w
  8203  111E  022C               	subwf	___llmod@dividend+2,w
  8204  111F  1D03               	skipz
  8205  1120  2927               	goto	u5385
  8206  1121  0827               	movf	___llmod@divisor+1,w
  8207  1122  022B               	subwf	___llmod@dividend+1,w
  8208  1123  1D03               	skipz
  8209  1124  2927               	goto	u5385
  8210  1125  0826               	movf	___llmod@divisor,w
  8211  1126  022A               	subwf	___llmod@dividend,w
  8212  1127                     u5385:
  8213  1127  1C03               	skipc
  8214  1128  292A               	goto	u5381
  8215  1129  292B               	goto	u5380
  8216  112A                     u5381:
  8217  112A  2939               	goto	l3834
  8218  112B                     u5380:
  8219  112B                     l3832:
  8220  112B  0826               	movf	___llmod@divisor,w
  8221  112C  02AA               	subwf	___llmod@dividend,f
  8222  112D  0827               	movf	___llmod@divisor+1,w
  8223  112E  1C03               	skipc
  8224  112F  0F27               	incfsz	___llmod@divisor+1,w
  8225  1130  02AB               	subwf	___llmod@dividend+1,f
  8226  1131  0828               	movf	___llmod@divisor+2,w
  8227  1132  1C03               	skipc
  8228  1133  0F28               	incfsz	___llmod@divisor+2,w
  8229  1134  02AC               	subwf	___llmod@dividend+2,f
  8230  1135  0829               	movf	___llmod@divisor+3,w
  8231  1136  1C03               	skipc
  8232  1137  0F29               	incfsz	___llmod@divisor+3,w
  8233  1138  02AD               	subwf	___llmod@dividend+3,f
  8234  1139                     l3834:
  8235  1139  3001               	movlw	1
  8236  113A                     u5395:
  8237  113A  1003               	clrc
  8238  113B  0CA9               	rrf	___llmod@divisor+3,f
  8239  113C  0CA8               	rrf	___llmod@divisor+2,f
  8240  113D  0CA7               	rrf	___llmod@divisor+1,f
  8241  113E  0CA6               	rrf	___llmod@divisor,f
  8242  113F  3EFF               	addlw	-1
  8243  1140  1D03               	skipz
  8244  1141  293A               	goto	u5395
  8245  1142                     l3836:
  8246  1142  3001               	movlw	1
  8247  1143  02AF               	subwf	___llmod@counter,f
  8248  1144  1D03               	btfss	3,2
  8249  1145  2947               	goto	u5401
  8250  1146  2948               	goto	u5400
  8251  1147                     u5401:
  8252  1147  2919               	goto	l3830
  8253  1148                     u5400:
  8254  1148                     l3838:
  8255  1148  082D               	movf	___llmod@dividend+3,w
  8256  1149  00A9               	movwf	?___llmod+3
  8257  114A  082C               	movf	___llmod@dividend+2,w
  8258  114B  00A8               	movwf	?___llmod+2
  8259  114C  082B               	movf	___llmod@dividend+1,w
  8260  114D  00A7               	movwf	?___llmod+1
  8261  114E  082A               	movf	___llmod@dividend,w
  8262  114F  00A6               	movwf	?___llmod
  8263  1150                     l853:
  8264  1150  0008               	return
  8265  1151                     __end_of___llmod:
  8266                           
  8267                           	psect	text42
  8268  1264                     __ptext42:	
  8269 ;; *************** function ___lldiv *****************
  8270 ;; Defined at:
  8271 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\__lldiv.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  divisor         4    2[COMMON] unsigned long 
  8274 ;;  dividend        4    6[COMMON] unsigned long 
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;  quotient        4    1[BANK0 ] unsigned long 
  8277 ;;  counter         1    5[BANK0 ] unsigned char 
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  4    2[COMMON] unsigned long 
  8280 ;; Registers used:
  8281 ;;		wreg, status,2, status,0
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8287 ;;      Params:         8       0       0       0       0
  8288 ;;      Locals:         0       5       0       0       0
  8289 ;;      Temps:          0       1       0       0       0
  8290 ;;      Totals:         8       6       0       0       0
  8291 ;;Total ram usage:       14 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    1
  8294 ;; This function calls:
  8295 ;;		Nothing
  8296 ;; This function is called by:
  8297 ;;		_sprintf
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           
  8302                           ;psect for function ___lldiv
  8303  1264                     ___lldiv:
  8304  1264                     l3790:	
  8305                           ;incstack = 0
  8306                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8307                           
  8308  1264  3000               	movlw	0
  8309  1265  1283               	bcf	3,5	;RP0=0, select bank0
  8310  1266  1303               	bcf	3,6	;RP1=0, select bank0
  8311  1267  00A4               	movwf	___lldiv@quotient+3
  8312  1268  3000               	movlw	0
  8313  1269  00A3               	movwf	___lldiv@quotient+2
  8314  126A  3000               	movlw	0
  8315  126B  00A2               	movwf	___lldiv@quotient+1
  8316  126C  3000               	movlw	0
  8317  126D  00A1               	movwf	___lldiv@quotient
  8318  126E  0875               	movf	___lldiv@divisor+3,w
  8319  126F  0474               	iorwf	___lldiv@divisor+2,w
  8320  1270  0473               	iorwf	___lldiv@divisor+1,w
  8321  1271  0472               	iorwf	___lldiv@divisor,w
  8322  1272  1903               	skipnz
  8323  1273  2A75               	goto	u5271
  8324  1274  2A76               	goto	u5270
  8325  1275                     u5271:
  8326  1275  2AC3               	goto	l3810
  8327  1276                     u5270:
  8328  1276                     l3792:
  8329  1276  01A5               	clrf	___lldiv@counter
  8330  1277  0AA5               	incf	___lldiv@counter,f
  8331  1278  2A86               	goto	l3796
  8332  1279                     l3794:
  8333  1279  3001               	movlw	1
  8334  127A  00A0               	movwf	??___lldiv
  8335  127B                     u5285:
  8336  127B  1003               	clrc
  8337  127C  0DF2               	rlf	___lldiv@divisor,f
  8338  127D  0DF3               	rlf	___lldiv@divisor+1,f
  8339  127E  0DF4               	rlf	___lldiv@divisor+2,f
  8340  127F  0DF5               	rlf	___lldiv@divisor+3,f
  8341  1280  0BA0               	decfsz	??___lldiv,f
  8342  1281  2A7B               	goto	u5285
  8343  1282  3001               	movlw	1
  8344  1283  00A0               	movwf	??___lldiv
  8345  1284  0820               	movf	??___lldiv,w
  8346  1285  07A5               	addwf	___lldiv@counter,f
  8347  1286                     l3796:
  8348  1286  1FF5               	btfss	___lldiv@divisor+3,7
  8349  1287  2A89               	goto	u5291
  8350  1288  2A8A               	goto	u5290
  8351  1289                     u5291:
  8352  1289  2A79               	goto	l3794
  8353  128A                     u5290:
  8354  128A                     l3798:
  8355  128A  3001               	movlw	1
  8356  128B  00A0               	movwf	??___lldiv
  8357  128C                     u5305:
  8358  128C  1003               	clrc
  8359  128D  0DA1               	rlf	___lldiv@quotient,f
  8360  128E  0DA2               	rlf	___lldiv@quotient+1,f
  8361  128F  0DA3               	rlf	___lldiv@quotient+2,f
  8362  1290  0DA4               	rlf	___lldiv@quotient+3,f
  8363  1291  0BA0               	decfsz	??___lldiv,f
  8364  1292  2A8C               	goto	u5305
  8365  1293                     l3800:
  8366  1293  0875               	movf	___lldiv@divisor+3,w
  8367  1294  0279               	subwf	___lldiv@dividend+3,w
  8368  1295  1D03               	skipz
  8369  1296  2AA1               	goto	u5315
  8370  1297  0874               	movf	___lldiv@divisor+2,w
  8371  1298  0278               	subwf	___lldiv@dividend+2,w
  8372  1299  1D03               	skipz
  8373  129A  2AA1               	goto	u5315
  8374  129B  0873               	movf	___lldiv@divisor+1,w
  8375  129C  0277               	subwf	___lldiv@dividend+1,w
  8376  129D  1D03               	skipz
  8377  129E  2AA1               	goto	u5315
  8378  129F  0872               	movf	___lldiv@divisor,w
  8379  12A0  0276               	subwf	___lldiv@dividend,w
  8380  12A1                     u5315:
  8381  12A1  1C03               	skipc
  8382  12A2  2AA4               	goto	u5311
  8383  12A3  2AA5               	goto	u5310
  8384  12A4                     u5311:
  8385  12A4  2AB4               	goto	l3806
  8386  12A5                     u5310:
  8387  12A5                     l3802:
  8388  12A5  0872               	movf	___lldiv@divisor,w
  8389  12A6  02F6               	subwf	___lldiv@dividend,f
  8390  12A7  0873               	movf	___lldiv@divisor+1,w
  8391  12A8  1C03               	skipc
  8392  12A9  0F73               	incfsz	___lldiv@divisor+1,w
  8393  12AA  02F7               	subwf	___lldiv@dividend+1,f
  8394  12AB  0874               	movf	___lldiv@divisor+2,w
  8395  12AC  1C03               	skipc
  8396  12AD  0F74               	incfsz	___lldiv@divisor+2,w
  8397  12AE  02F8               	subwf	___lldiv@dividend+2,f
  8398  12AF  0875               	movf	___lldiv@divisor+3,w
  8399  12B0  1C03               	skipc
  8400  12B1  0F75               	incfsz	___lldiv@divisor+3,w
  8401  12B2  02F9               	subwf	___lldiv@dividend+3,f
  8402  12B3                     l3804:
  8403  12B3  1421               	bsf	___lldiv@quotient,0
  8404  12B4                     l3806:
  8405  12B4  3001               	movlw	1
  8406  12B5                     u5325:
  8407  12B5  1003               	clrc
  8408  12B6  0CF5               	rrf	___lldiv@divisor+3,f
  8409  12B7  0CF4               	rrf	___lldiv@divisor+2,f
  8410  12B8  0CF3               	rrf	___lldiv@divisor+1,f
  8411  12B9  0CF2               	rrf	___lldiv@divisor,f
  8412  12BA  3EFF               	addlw	-1
  8413  12BB  1D03               	skipz
  8414  12BC  2AB5               	goto	u5325
  8415  12BD                     l3808:
  8416  12BD  3001               	movlw	1
  8417  12BE  02A5               	subwf	___lldiv@counter,f
  8418  12BF  1D03               	btfss	3,2
  8419  12C0  2AC2               	goto	u5331
  8420  12C1  2AC3               	goto	u5330
  8421  12C2                     u5331:
  8422  12C2  2A8A               	goto	l3798
  8423  12C3                     u5330:
  8424  12C3                     l3810:
  8425  12C3  0824               	movf	___lldiv@quotient+3,w
  8426  12C4  00F5               	movwf	?___lldiv+3
  8427  12C5  0823               	movf	___lldiv@quotient+2,w
  8428  12C6  00F4               	movwf	?___lldiv+2
  8429  12C7  0822               	movf	___lldiv@quotient+1,w
  8430  12C8  00F3               	movwf	?___lldiv+1
  8431  12C9  0821               	movf	___lldiv@quotient,w
  8432  12CA  00F2               	movwf	?___lldiv
  8433  12CB                     l518:
  8434  12CB  0008               	return
  8435  12CC                     __end_of___lldiv:
  8436                           
  8437                           	psect	text43
  8438  0828                     __ptext43:	
  8439 ;; *************** function ___fttol *****************
  8440 ;; Defined at:
  8441 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\fttol.c"
  8442 ;; Parameters:    Size  Location     Type
  8443 ;;  f1              3   37[BANK0 ] float 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  lval            4   46[BANK0 ] unsigned long 
  8446 ;;  exp1            1   50[BANK0 ] unsigned char 
  8447 ;;  sign1           1   45[BANK0 ] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  4   37[BANK0 ] long 
  8450 ;; Registers used:
  8451 ;;		wreg, status,2, status,0
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8457 ;;      Params:         0       4       0       0       0
  8458 ;;      Locals:         0       6       0       0       0
  8459 ;;      Temps:          0       4       0       0       0
  8460 ;;      Totals:         0      14       0       0       0
  8461 ;;Total ram usage:       14 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    1
  8464 ;; This function calls:
  8465 ;;		Nothing
  8466 ;; This function is called by:
  8467 ;;		_sprintf
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function ___fttol
  8473  0828                     ___fttol:
  8474  0828                     l2808:	
  8475                           ;incstack = 0
  8476                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8477                           
  8478  0828  1283               	bcf	3,5	;RP0=0, select bank0
  8479  0829  1303               	bcf	3,6	;RP1=0, select bank0
  8480  082A  0845               	movf	___fttol@f1,w
  8481  082B  00C9               	movwf	??___fttol
  8482  082C  0846               	movf	___fttol@f1+1,w
  8483  082D  00CA               	movwf	??___fttol+1
  8484  082E  0847               	movf	___fttol@f1+2,w
  8485  082F  00CB               	movwf	??___fttol+2
  8486  0830  1003               	clrc
  8487  0831  0D4A               	rlf	??___fttol+1,w
  8488  0832  0D4B               	rlf	??___fttol+2,w
  8489  0833  00CC               	movwf	??___fttol+3
  8490  0834  084C               	movf	??___fttol+3,w
  8491  0835  00D2               	movwf	___fttol@exp1
  8492  0836  0852               	movf	___fttol@exp1,w
  8493  0837  1D03               	btfss	3,2
  8494  0838  283A               	goto	u3621
  8495  0839  283B               	goto	u3620
  8496  083A                     u3621:
  8497  083A  2844               	goto	l2814
  8498  083B                     u3620:
  8499  083B                     l2810:
  8500  083B  3000               	movlw	0
  8501  083C  00C8               	movwf	?___fttol+3
  8502  083D  3000               	movlw	0
  8503  083E  00C7               	movwf	?___fttol+2
  8504  083F  3000               	movlw	0
  8505  0840  00C6               	movwf	?___fttol+1
  8506  0841  3000               	movlw	0
  8507  0842  00C5               	movwf	?___fttol
  8508  0843  28B3               	goto	l812
  8509  0844                     l2814:
  8510  0844  0845               	movf	___fttol@f1,w
  8511  0845  00C9               	movwf	??___fttol
  8512  0846  0846               	movf	___fttol@f1+1,w
  8513  0847  00CA               	movwf	??___fttol+1
  8514  0848  0847               	movf	___fttol@f1+2,w
  8515  0849  00CB               	movwf	??___fttol+2
  8516  084A  3017               	movlw	23
  8517  084B                     u3635:
  8518  084B  1003               	clrc
  8519  084C  0CCB               	rrf	??___fttol+2,f
  8520  084D  0CCA               	rrf	??___fttol+1,f
  8521  084E  0CC9               	rrf	??___fttol,f
  8522  084F                     u3630:
  8523  084F  3EFF               	addlw	-1
  8524  0850  1D03               	skipz
  8525  0851  284B               	goto	u3635
  8526  0852  0849               	movf	??___fttol,w
  8527  0853  00CC               	movwf	??___fttol+3
  8528  0854  084C               	movf	??___fttol+3,w
  8529  0855  00CD               	movwf	___fttol@sign1
  8530  0856                     l2816:
  8531  0856  17C6               	bsf	___fttol@f1+1,7
  8532  0857                     l2818:
  8533  0857  30FF               	movlw	255
  8534  0858  05C5               	andwf	___fttol@f1,f
  8535  0859  30FF               	movlw	255
  8536  085A  05C6               	andwf	___fttol@f1+1,f
  8537  085B  3000               	movlw	0
  8538  085C  05C7               	andwf	___fttol@f1+2,f
  8539  085D                     l2820:
  8540  085D  0845               	movf	___fttol@f1,w
  8541  085E  00CE               	movwf	___fttol@lval
  8542  085F  0846               	movf	___fttol@f1+1,w
  8543  0860  00CF               	movwf	___fttol@lval+1
  8544  0861  0847               	movf	___fttol@f1+2,w
  8545  0862  00D0               	movwf	___fttol@lval+2
  8546  0863  01D1               	clrf	___fttol@lval+3
  8547  0864                     l2822:
  8548  0864  308E               	movlw	142
  8549  0865  02D2               	subwf	___fttol@exp1,f
  8550  0866                     l2824:
  8551  0866  1FD2               	btfss	___fttol@exp1,7
  8552  0867  2869               	goto	u3641
  8553  0868  286A               	goto	u3640
  8554  0869                     u3641:
  8555  0869  2884               	goto	l2834
  8556  086A                     u3640:
  8557  086A                     l2826:
  8558  086A  0852               	movf	___fttol@exp1,w
  8559  086B  3A80               	xorlw	128
  8560  086C  3E8F               	addlw	143
  8561  086D  1803               	skipnc
  8562  086E  2870               	goto	u3651
  8563  086F  2871               	goto	u3650
  8564  0870                     u3651:
  8565  0870  2872               	goto	l2832
  8566  0871                     u3650:
  8567  0871  283B               	goto	l2810
  8568  0872                     l2832:
  8569  0872  3001               	movlw	1
  8570  0873                     u3665:
  8571  0873  1003               	clrc
  8572  0874  0CD1               	rrf	___fttol@lval+3,f
  8573  0875  0CD0               	rrf	___fttol@lval+2,f
  8574  0876  0CCF               	rrf	___fttol@lval+1,f
  8575  0877  0CCE               	rrf	___fttol@lval,f
  8576  0878  3EFF               	addlw	-1
  8577  0879  1D03               	skipz
  8578  087A  2873               	goto	u3665
  8579  087B  3001               	movlw	1
  8580  087C  00C9               	movwf	??___fttol
  8581  087D  0849               	movf	??___fttol,w
  8582  087E  07D2               	addwf	___fttol@exp1,f
  8583  087F  1D03               	btfss	3,2
  8584  0880  2882               	goto	u3671
  8585  0881  2883               	goto	u3670
  8586  0882                     u3671:
  8587  0882  2872               	goto	l2832
  8588  0883                     u3670:
  8589  0883  289B               	goto	l2842
  8590  0884                     l2834:
  8591  0884  3018               	movlw	24
  8592  0885  0252               	subwf	___fttol@exp1,w
  8593  0886  1C03               	skipc
  8594  0887  2889               	goto	u3681
  8595  0888  288A               	goto	u3680
  8596  0889                     u3681:
  8597  0889  2896               	goto	l819
  8598  088A                     u3680:
  8599  088A  283B               	goto	l2810
  8600  088B                     l2840:
  8601  088B  3001               	movlw	1
  8602  088C  00C9               	movwf	??___fttol
  8603  088D                     u3695:
  8604  088D  1003               	clrc
  8605  088E  0DCE               	rlf	___fttol@lval,f
  8606  088F  0DCF               	rlf	___fttol@lval+1,f
  8607  0890  0DD0               	rlf	___fttol@lval+2,f
  8608  0891  0DD1               	rlf	___fttol@lval+3,f
  8609  0892  0BC9               	decfsz	??___fttol,f
  8610  0893  288D               	goto	u3695
  8611  0894  3001               	movlw	1
  8612  0895  02D2               	subwf	___fttol@exp1,f
  8613  0896                     l819:
  8614  0896  0852               	movf	___fttol@exp1,w
  8615  0897  1D03               	btfss	3,2
  8616  0898  289A               	goto	u3701
  8617  0899  289B               	goto	u3700
  8618  089A                     u3701:
  8619  089A  288B               	goto	l2840
  8620  089B                     u3700:
  8621  089B                     l2842:
  8622  089B  084D               	movf	___fttol@sign1,w
  8623  089C  1903               	btfsc	3,2
  8624  089D  289F               	goto	u3711
  8625  089E  28A0               	goto	u3710
  8626  089F                     u3711:
  8627  089F  28AB               	goto	l2846
  8628  08A0                     u3710:
  8629  08A0                     l2844:
  8630  08A0  09CE               	comf	___fttol@lval,f
  8631  08A1  09CF               	comf	___fttol@lval+1,f
  8632  08A2  09D0               	comf	___fttol@lval+2,f
  8633  08A3  09D1               	comf	___fttol@lval+3,f
  8634  08A4  0ACE               	incf	___fttol@lval,f
  8635  08A5  1903               	skipnz
  8636  08A6  0ACF               	incf	___fttol@lval+1,f
  8637  08A7  1903               	skipnz
  8638  08A8  0AD0               	incf	___fttol@lval+2,f
  8639  08A9  1903               	skipnz
  8640  08AA  0AD1               	incf	___fttol@lval+3,f
  8641  08AB                     l2846:
  8642  08AB  0851               	movf	___fttol@lval+3,w
  8643  08AC  00C8               	movwf	?___fttol+3
  8644  08AD  0850               	movf	___fttol@lval+2,w
  8645  08AE  00C7               	movwf	?___fttol+2
  8646  08AF  084F               	movf	___fttol@lval+1,w
  8647  08B0  00C6               	movwf	?___fttol+1
  8648  08B1  084E               	movf	___fttol@lval,w
  8649  08B2  00C5               	movwf	?___fttol
  8650  08B3                     l812:
  8651  08B3  0008               	return
  8652  08B4                     __end_of___fttol:
  8653                           
  8654                           	psect	text44
  8655  1CBF                     __ptext44:	
  8656 ;; *************** function ___ftsub *****************
  8657 ;; Defined at:
  8658 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftsub.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;  f2              3   57[BANK0 ] float 
  8661 ;;  f1              3   60[BANK0 ] float 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;		None
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  3   57[BANK0 ] float 
  8666 ;; Registers used:
  8667 ;;		wreg, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8673 ;;      Params:         0       6       0       0       0
  8674 ;;      Locals:         0       0       0       0       0
  8675 ;;      Temps:          0       0       0       0       0
  8676 ;;      Totals:         0       6       0       0       0
  8677 ;;Total ram usage:        6 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    3
  8680 ;; This function calls:
  8681 ;;		___ftadd
  8682 ;; This function is called by:
  8683 ;;		_sprintf
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           
  8688                           ;psect for function ___ftsub
  8689  1CBF                     ___ftsub:
  8690  1CBF                     l3814:	
  8691                           ;incstack = 0
  8692                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  8693                           
  8694  1CBF  1283               	bcf	3,5	;RP0=0, select bank0
  8695  1CC0  1303               	bcf	3,6	;RP1=0, select bank0
  8696  1CC1  085B               	movf	___ftsub@f2+2,w
  8697  1CC2  045A               	iorwf	___ftsub@f2+1,w
  8698  1CC3  0459               	iorwf	___ftsub@f2,w
  8699  1CC4  1903               	skipnz
  8700  1CC5  2CC7               	goto	u5341
  8701  1CC6  2CC8               	goto	u5340
  8702  1CC7                     u5341:
  8703  1CC7  2CCA               	goto	l3818
  8704  1CC8                     u5340:
  8705  1CC8                     l3816:
  8706  1CC8  3080               	movlw	128
  8707  1CC9  06DB               	xorwf	___ftsub@f2+2,f
  8708  1CCA                     l3818:
  8709  1CCA  085C               	movf	___ftsub@f1,w
  8710  1CCB  00CC               	movwf	___ftadd@f1
  8711  1CCC  085D               	movf	___ftsub@f1+1,w
  8712  1CCD  00CD               	movwf	___ftadd@f1+1
  8713  1CCE  085E               	movf	___ftsub@f1+2,w
  8714  1CCF  00CE               	movwf	___ftadd@f1+2
  8715  1CD0  0859               	movf	___ftsub@f2,w
  8716  1CD1  00CF               	movwf	___ftadd@f2
  8717  1CD2  085A               	movf	___ftsub@f2+1,w
  8718  1CD3  00D0               	movwf	___ftadd@f2+1
  8719  1CD4  085B               	movf	___ftsub@f2+2,w
  8720  1CD5  00D1               	movwf	___ftadd@f2+2
  8721  1CD6  160A  118A  26CA  160A  158A  	fcall	___ftadd
  8722  1CDB  1283               	bcf	3,5	;RP0=0, select bank0
  8723  1CDC  1303               	bcf	3,6	;RP1=0, select bank0
  8724  1CDD  084C               	movf	?___ftadd,w
  8725  1CDE  00D9               	movwf	?___ftsub
  8726  1CDF  084D               	movf	?___ftadd+1,w
  8727  1CE0  00DA               	movwf	?___ftsub+1
  8728  1CE1  084E               	movf	?___ftadd+2,w
  8729  1CE2  00DB               	movwf	?___ftsub+2
  8730  1CE3                     l808:
  8731  1CE3  0008               	return
  8732  1CE4                     __end_of___ftsub:
  8733                           
  8734                           	psect	text45
  8735  16CA                     __ptext45:	
  8736 ;; *************** function ___ftadd *****************
  8737 ;; Defined at:
  8738 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftadd.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  f1              3   44[BANK0 ] float 
  8741 ;;  f2              3   47[BANK0 ] float 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  exp1            1   56[BANK0 ] unsigned char 
  8744 ;;  exp2            1   55[BANK0 ] unsigned char 
  8745 ;;  sign            1   54[BANK0 ] unsigned char 
  8746 ;; Return value:  Size  Location     Type
  8747 ;;                  3   44[BANK0 ] float 
  8748 ;; Registers used:
  8749 ;;		wreg, status,2, status,0, pclath, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8755 ;;      Params:         0       6       0       0       0
  8756 ;;      Locals:         0       3       0       0       0
  8757 ;;      Temps:          0       4       0       0       0
  8758 ;;      Totals:         0      13       0       0       0
  8759 ;;Total ram usage:       13 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    2
  8762 ;; This function calls:
  8763 ;;		___ftpack
  8764 ;; This function is called by:
  8765 ;;		_sprintf
  8766 ;;		___ftsub
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function ___ftadd
  8772  16CA                     ___ftadd:
  8773  16CA                     l3510:	
  8774                           ;incstack = 0
  8775                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8776                           
  8777  16CA  1283               	bcf	3,5	;RP0=0, select bank0
  8778  16CB  1303               	bcf	3,6	;RP1=0, select bank0
  8779  16CC  084C               	movf	___ftadd@f1,w
  8780  16CD  00D2               	movwf	??___ftadd
  8781  16CE  084D               	movf	___ftadd@f1+1,w
  8782  16CF  00D3               	movwf	??___ftadd+1
  8783  16D0  084E               	movf	___ftadd@f1+2,w
  8784  16D1  00D4               	movwf	??___ftadd+2
  8785  16D2  1003               	clrc
  8786  16D3  0D53               	rlf	??___ftadd+1,w
  8787  16D4  0D54               	rlf	??___ftadd+2,w
  8788  16D5  00D5               	movwf	??___ftadd+3
  8789  16D6  0855               	movf	??___ftadd+3,w
  8790  16D7  00D8               	movwf	___ftadd@exp1
  8791  16D8  084F               	movf	___ftadd@f2,w
  8792  16D9  00D2               	movwf	??___ftadd
  8793  16DA  0850               	movf	___ftadd@f2+1,w
  8794  16DB  00D3               	movwf	??___ftadd+1
  8795  16DC  0851               	movf	___ftadd@f2+2,w
  8796  16DD  00D4               	movwf	??___ftadd+2
  8797  16DE  1003               	clrc
  8798  16DF  0D53               	rlf	??___ftadd+1,w
  8799  16E0  0D54               	rlf	??___ftadd+2,w
  8800  16E1  00D5               	movwf	??___ftadd+3
  8801  16E2  0855               	movf	??___ftadd+3,w
  8802  16E3  00D7               	movwf	___ftadd@exp2
  8803  16E4  0858               	movf	___ftadd@exp1,w
  8804  16E5  1903               	btfsc	3,2
  8805  16E6  2EE8               	goto	u4621
  8806  16E7  2EE9               	goto	u4620
  8807  16E8                     u4621:
  8808  16E8  2EF9               	goto	l3516
  8809  16E9                     u4620:
  8810  16E9                     l3512:
  8811  16E9  0857               	movf	___ftadd@exp2,w
  8812  16EA  0258               	subwf	___ftadd@exp1,w
  8813  16EB  1803               	skipnc
  8814  16EC  2EEE               	goto	u4631
  8815  16ED  2EEF               	goto	u4630
  8816  16EE                     u4631:
  8817  16EE  2F00               	goto	l3520
  8818  16EF                     u4630:
  8819  16EF                     l3514:
  8820  16EF  0857               	movf	___ftadd@exp2,w
  8821  16F0  00D2               	movwf	??___ftadd
  8822  16F1  0858               	movf	___ftadd@exp1,w
  8823  16F2  02D2               	subwf	??___ftadd,f
  8824  16F3  3019               	movlw	25
  8825  16F4  0252               	subwf	??___ftadd,w
  8826  16F5  1C03               	skipc
  8827  16F6  2EF8               	goto	u4641
  8828  16F7  2EF9               	goto	u4640
  8829  16F8                     u4641:
  8830  16F8  2F00               	goto	l3520
  8831  16F9                     u4640:
  8832  16F9                     l3516:
  8833  16F9  084F               	movf	___ftadd@f2,w
  8834  16FA  00CC               	movwf	?___ftadd
  8835  16FB  0850               	movf	___ftadd@f2+1,w
  8836  16FC  00CD               	movwf	?___ftadd+1
  8837  16FD  0851               	movf	___ftadd@f2+2,w
  8838  16FE  00CE               	movwf	?___ftadd+2
  8839  16FF  2FFF               	goto	l728
  8840  1700                     l3520:
  8841  1700  0857               	movf	___ftadd@exp2,w
  8842  1701  1903               	btfsc	3,2
  8843  1702  2F04               	goto	u4651
  8844  1703  2F05               	goto	u4650
  8845  1704                     u4651:
  8846  1704  2F15               	goto	l731
  8847  1705                     u4650:
  8848  1705                     l3522:
  8849  1705  0858               	movf	___ftadd@exp1,w
  8850  1706  0257               	subwf	___ftadd@exp2,w
  8851  1707  1803               	skipnc
  8852  1708  2F0A               	goto	u4661
  8853  1709  2F0B               	goto	u4660
  8854  170A                     u4661:
  8855  170A  2F16               	goto	l3526
  8856  170B                     u4660:
  8857  170B                     l3524:
  8858  170B  0858               	movf	___ftadd@exp1,w
  8859  170C  00D2               	movwf	??___ftadd
  8860  170D  0857               	movf	___ftadd@exp2,w
  8861  170E  02D2               	subwf	??___ftadd,f
  8862  170F  3019               	movlw	25
  8863  1710  0252               	subwf	??___ftadd,w
  8864  1711  1C03               	skipc
  8865  1712  2F14               	goto	u4671
  8866  1713  2F15               	goto	u4670
  8867  1714                     u4671:
  8868  1714  2F16               	goto	l3526
  8869  1715                     u4670:
  8870  1715                     l731:
  8871  1715  2FFF               	goto	l728
  8872  1716                     l3526:
  8873  1716  3006               	movlw	6
  8874  1717  00D2               	movwf	??___ftadd
  8875  1718  0852               	movf	??___ftadd,w
  8876  1719  00D6               	movwf	___ftadd@sign
  8877  171A                     l3528:
  8878  171A  1FCE               	btfss	___ftadd@f1+2,7
  8879  171B  2F1D               	goto	u4681
  8880  171C  2F1E               	goto	u4680
  8881  171D                     u4681:
  8882  171D  2F1F               	goto	l732
  8883  171E                     u4680:
  8884  171E                     l3530:
  8885  171E  17D6               	bsf	___ftadd@sign,7
  8886  171F                     l732:
  8887  171F  1FD1               	btfss	___ftadd@f2+2,7
  8888  1720  2F22               	goto	u4691
  8889  1721  2F23               	goto	u4690
  8890  1722                     u4691:
  8891  1722  2F24               	goto	l733
  8892  1723                     u4690:
  8893  1723                     l3532:
  8894  1723  1756               	bsf	___ftadd@sign,6
  8895  1724                     l733:
  8896  1724  17CD               	bsf	___ftadd@f1+1,7
  8897  1725                     l3534:
  8898  1725  30FF               	movlw	255
  8899  1726  05CC               	andwf	___ftadd@f1,f
  8900  1727  30FF               	movlw	255
  8901  1728  05CD               	andwf	___ftadd@f1+1,f
  8902  1729  3000               	movlw	0
  8903  172A  05CE               	andwf	___ftadd@f1+2,f
  8904  172B                     l3536:
  8905  172B  17D0               	bsf	___ftadd@f2+1,7
  8906  172C  30FF               	movlw	255
  8907  172D  05CF               	andwf	___ftadd@f2,f
  8908  172E  30FF               	movlw	255
  8909  172F  05D0               	andwf	___ftadd@f2+1,f
  8910  1730  3000               	movlw	0
  8911  1731  05D1               	andwf	___ftadd@f2+2,f
  8912  1732  0857               	movf	___ftadd@exp2,w
  8913  1733  0258               	subwf	___ftadd@exp1,w
  8914  1734  1803               	skipnc
  8915  1735  2F37               	goto	u4701
  8916  1736  2F38               	goto	u4700
  8917  1737                     u4701:
  8918  1737  2F64               	goto	l3548
  8919  1738                     u4700:
  8920  1738                     l3538:
  8921  1738  3001               	movlw	1
  8922  1739                     u4715:
  8923  1739  1003               	clrc
  8924  173A  0DCF               	rlf	___ftadd@f2,f
  8925  173B  0DD0               	rlf	___ftadd@f2+1,f
  8926  173C  0DD1               	rlf	___ftadd@f2+2,f
  8927  173D  3EFF               	addlw	-1
  8928  173E  1D03               	skipz
  8929  173F  2F39               	goto	u4715
  8930  1740  3001               	movlw	1
  8931  1741  02D7               	subwf	___ftadd@exp2,f
  8932  1742                     l3540:
  8933  1742  0857               	movf	___ftadd@exp2,w
  8934  1743  0658               	xorwf	___ftadd@exp1,w
  8935  1744  1903               	skipnz
  8936  1745  2F47               	goto	u4721
  8937  1746  2F48               	goto	u4720
  8938  1747                     u4721:
  8939  1747  2F5D               	goto	l3546
  8940  1748                     u4720:
  8941  1748                     l3542:
  8942  1748  3001               	movlw	1
  8943  1749  02D6               	subwf	___ftadd@sign,f
  8944  174A  0856               	movf	___ftadd@sign,w
  8945  174B  3907               	andlw	7
  8946  174C  1D03               	btfss	3,2
  8947  174D  2F4F               	goto	u4731
  8948  174E  2F50               	goto	u4730
  8949  174F                     u4731:
  8950  174F  2F38               	goto	l3538
  8951  1750                     u4730:
  8952  1750  2F5D               	goto	l3546
  8953  1751                     l3544:
  8954  1751  3001               	movlw	1
  8955  1752                     u4745:
  8956  1752  1003               	clrc
  8957  1753  0CCE               	rrf	___ftadd@f1+2,f
  8958  1754  0CCD               	rrf	___ftadd@f1+1,f
  8959  1755  0CCC               	rrf	___ftadd@f1,f
  8960  1756  3EFF               	addlw	-1
  8961  1757  1D03               	skipz
  8962  1758  2F52               	goto	u4745
  8963  1759  3001               	movlw	1
  8964  175A  00D2               	movwf	??___ftadd
  8965  175B  0852               	movf	??___ftadd,w
  8966  175C  07D8               	addwf	___ftadd@exp1,f
  8967  175D                     l3546:
  8968  175D  0858               	movf	___ftadd@exp1,w
  8969  175E  0657               	xorwf	___ftadd@exp2,w
  8970  175F  1D03               	skipz
  8971  1760  2F62               	goto	u4751
  8972  1761  2F63               	goto	u4750
  8973  1762                     u4751:
  8974  1762  2F51               	goto	l3544
  8975  1763                     u4750:
  8976  1763  2F95               	goto	l742
  8977  1764                     l3548:
  8978  1764  0858               	movf	___ftadd@exp1,w
  8979  1765  0257               	subwf	___ftadd@exp2,w
  8980  1766  1803               	skipnc
  8981  1767  2F69               	goto	u4761
  8982  1768  2F6A               	goto	u4760
  8983  1769                     u4761:
  8984  1769  2F95               	goto	l742
  8985  176A                     u4760:
  8986  176A                     l3550:
  8987  176A  3001               	movlw	1
  8988  176B                     u4775:
  8989  176B  1003               	clrc
  8990  176C  0DCC               	rlf	___ftadd@f1,f
  8991  176D  0DCD               	rlf	___ftadd@f1+1,f
  8992  176E  0DCE               	rlf	___ftadd@f1+2,f
  8993  176F  3EFF               	addlw	-1
  8994  1770  1D03               	skipz
  8995  1771  2F6B               	goto	u4775
  8996  1772  3001               	movlw	1
  8997  1773  02D8               	subwf	___ftadd@exp1,f
  8998  1774                     l3552:
  8999  1774  0857               	movf	___ftadd@exp2,w
  9000  1775  0658               	xorwf	___ftadd@exp1,w
  9001  1776  1903               	skipnz
  9002  1777  2F79               	goto	u4781
  9003  1778  2F7A               	goto	u4780
  9004  1779                     u4781:
  9005  1779  2F8F               	goto	l3558
  9006  177A                     u4780:
  9007  177A                     l3554:
  9008  177A  3001               	movlw	1
  9009  177B  02D6               	subwf	___ftadd@sign,f
  9010  177C  0856               	movf	___ftadd@sign,w
  9011  177D  3907               	andlw	7
  9012  177E  1D03               	btfss	3,2
  9013  177F  2F81               	goto	u4791
  9014  1780  2F82               	goto	u4790
  9015  1781                     u4791:
  9016  1781  2F6A               	goto	l3550
  9017  1782                     u4790:
  9018  1782  2F8F               	goto	l3558
  9019  1783                     l3556:
  9020  1783  3001               	movlw	1
  9021  1784                     u4805:
  9022  1784  1003               	clrc
  9023  1785  0CD1               	rrf	___ftadd@f2+2,f
  9024  1786  0CD0               	rrf	___ftadd@f2+1,f
  9025  1787  0CCF               	rrf	___ftadd@f2,f
  9026  1788  3EFF               	addlw	-1
  9027  1789  1D03               	skipz
  9028  178A  2F84               	goto	u4805
  9029  178B  3001               	movlw	1
  9030  178C  00D2               	movwf	??___ftadd
  9031  178D  0852               	movf	??___ftadd,w
  9032  178E  07D7               	addwf	___ftadd@exp2,f
  9033  178F                     l3558:
  9034  178F  0858               	movf	___ftadd@exp1,w
  9035  1790  0657               	xorwf	___ftadd@exp2,w
  9036  1791  1D03               	skipz
  9037  1792  2F94               	goto	u4811
  9038  1793  2F95               	goto	u4810
  9039  1794                     u4811:
  9040  1794  2F83               	goto	l3556
  9041  1795                     u4810:
  9042  1795                     l742:
  9043  1795  1FD6               	btfss	___ftadd@sign,7
  9044  1796  2F98               	goto	u4821
  9045  1797  2F99               	goto	u4820
  9046  1798                     u4821:
  9047  1798  2FA9               	goto	l3562
  9048  1799                     u4820:
  9049  1799                     l3560:
  9050  1799  30FF               	movlw	255
  9051  179A  06CC               	xorwf	___ftadd@f1,f
  9052  179B  30FF               	movlw	255
  9053  179C  06CD               	xorwf	___ftadd@f1+1,f
  9054  179D  30FF               	movlw	255
  9055  179E  06CE               	xorwf	___ftadd@f1+2,f
  9056  179F  3001               	movlw	1
  9057  17A0  07CC               	addwf	___ftadd@f1,f
  9058  17A1  3000               	movlw	0
  9059  17A2  1803               	skipnc
  9060  17A3  3001               	movlw	1
  9061  17A4  07CD               	addwf	___ftadd@f1+1,f
  9062  17A5  3000               	movlw	0
  9063  17A6  1803               	skipnc
  9064  17A7  3001               	movlw	1
  9065  17A8  07CE               	addwf	___ftadd@f1+2,f
  9066  17A9                     l3562:
  9067  17A9  1F56               	btfss	___ftadd@sign,6
  9068  17AA  2FAC               	goto	u4831
  9069  17AB  2FAD               	goto	u4830
  9070  17AC                     u4831:
  9071  17AC  2FBD               	goto	l3566
  9072  17AD                     u4830:
  9073  17AD                     l3564:
  9074  17AD  30FF               	movlw	255
  9075  17AE  06CF               	xorwf	___ftadd@f2,f
  9076  17AF  30FF               	movlw	255
  9077  17B0  06D0               	xorwf	___ftadd@f2+1,f
  9078  17B1  30FF               	movlw	255
  9079  17B2  06D1               	xorwf	___ftadd@f2+2,f
  9080  17B3  3001               	movlw	1
  9081  17B4  07CF               	addwf	___ftadd@f2,f
  9082  17B5  3000               	movlw	0
  9083  17B6  1803               	skipnc
  9084  17B7  3001               	movlw	1
  9085  17B8  07D0               	addwf	___ftadd@f2+1,f
  9086  17B9  3000               	movlw	0
  9087  17BA  1803               	skipnc
  9088  17BB  3001               	movlw	1
  9089  17BC  07D1               	addwf	___ftadd@f2+2,f
  9090  17BD                     l3566:
  9091  17BD  01D6               	clrf	___ftadd@sign
  9092  17BE                     l3568:
  9093  17BE  084C               	movf	___ftadd@f1,w
  9094  17BF  07CF               	addwf	___ftadd@f2,f
  9095  17C0  084D               	movf	___ftadd@f1+1,w
  9096  17C1  1103               	clrz
  9097  17C2  1803               	skipnc
  9098  17C3  0A4D               	incf	___ftadd@f1+1,w
  9099  17C4  1903               	skipnz
  9100  17C5  2FC7               	goto	u4841
  9101  17C6  07D0               	addwf	___ftadd@f2+1,f
  9102  17C7                     u4841:
  9103  17C7  084E               	movf	___ftadd@f1+2,w
  9104  17C8  1103               	clrz
  9105  17C9  1803               	skipnc
  9106  17CA  0A4E               	incf	___ftadd@f1+2,w
  9107  17CB  1903               	skipnz
  9108  17CC  2FCE               	goto	u4842
  9109  17CD  07D1               	addwf	___ftadd@f2+2,f
  9110  17CE                     u4842:
  9111  17CE                     l3570:
  9112  17CE  1FD1               	btfss	___ftadd@f2+2,7
  9113  17CF  2FD1               	goto	u4851
  9114  17D0  2FD2               	goto	u4850
  9115  17D1                     u4851:
  9116  17D1  2FE4               	goto	l3576
  9117  17D2                     u4850:
  9118  17D2                     l3572:
  9119  17D2  30FF               	movlw	255
  9120  17D3  06CF               	xorwf	___ftadd@f2,f
  9121  17D4  30FF               	movlw	255
  9122  17D5  06D0               	xorwf	___ftadd@f2+1,f
  9123  17D6  30FF               	movlw	255
  9124  17D7  06D1               	xorwf	___ftadd@f2+2,f
  9125  17D8  3001               	movlw	1
  9126  17D9  07CF               	addwf	___ftadd@f2,f
  9127  17DA  3000               	movlw	0
  9128  17DB  1803               	skipnc
  9129  17DC  3001               	movlw	1
  9130  17DD  07D0               	addwf	___ftadd@f2+1,f
  9131  17DE  3000               	movlw	0
  9132  17DF  1803               	skipnc
  9133  17E0  3001               	movlw	1
  9134  17E1  07D1               	addwf	___ftadd@f2+2,f
  9135  17E2                     l3574:
  9136  17E2  01D6               	clrf	___ftadd@sign
  9137  17E3  0AD6               	incf	___ftadd@sign,f
  9138  17E4                     l3576:
  9139  17E4  084F               	movf	___ftadd@f2,w
  9140  17E5  00F2               	movwf	___ftpack@arg
  9141  17E6  0850               	movf	___ftadd@f2+1,w
  9142  17E7  00F3               	movwf	___ftpack@arg+1
  9143  17E8  0851               	movf	___ftadd@f2+2,w
  9144  17E9  00F4               	movwf	___ftpack@arg+2
  9145  17EA  0858               	movf	___ftadd@exp1,w
  9146  17EB  00D2               	movwf	??___ftadd
  9147  17EC  0852               	movf	??___ftadd,w
  9148  17ED  00F5               	movwf	___ftpack@exp
  9149  17EE  0856               	movf	___ftadd@sign,w
  9150  17EF  00D3               	movwf	??___ftadd+1
  9151  17F0  0853               	movf	??___ftadd+1,w
  9152  17F1  00F6               	movwf	___ftpack@sign
  9153  17F2  160A  118A  23A3  160A  118A  	fcall	___ftpack
  9154  17F7  0872               	movf	?___ftpack,w
  9155  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  9156  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  9157  17FA  00CC               	movwf	?___ftadd
  9158  17FB  0873               	movf	?___ftpack+1,w
  9159  17FC  00CD               	movwf	?___ftadd+1
  9160  17FD  0874               	movf	?___ftpack+2,w
  9161  17FE  00CE               	movwf	?___ftadd+2
  9162  17FF                     l728:
  9163  17FF  0008               	return
  9164  1800                     __end_of___ftadd:
  9165                           
  9166                           	psect	text46
  9167  13A3                     __ptext46:	
  9168 ;; *************** function ___ftpack *****************
  9169 ;; Defined at:
  9170 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\float.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;  arg             3    2[COMMON] unsigned um
  9173 ;;  exp             1    5[COMMON] unsigned char 
  9174 ;;  sign            1    6[COMMON] unsigned char 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;		None
  9177 ;; Return value:  Size  Location     Type
  9178 ;;                  3    2[COMMON] float 
  9179 ;; Registers used:
  9180 ;;		wreg, status,2, status,0
  9181 ;; Tracked objects:
  9182 ;;		On entry : 0/0
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9186 ;;      Params:         5       0       0       0       0
  9187 ;;      Locals:         0       0       0       0       0
  9188 ;;      Temps:          3       0       0       0       0
  9189 ;;      Totals:         8       0       0       0       0
  9190 ;;Total ram usage:        8 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:    1
  9193 ;; This function calls:
  9194 ;;		Nothing
  9195 ;; This function is called by:
  9196 ;;		___awtoft
  9197 ;;		___ftadd
  9198 ;;		___ftdiv
  9199 ;;		___ftmul
  9200 ;;		___lltoft
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           
  9205                           ;psect for function ___ftpack
  9206  13A3                     ___ftpack:
  9207  13A3                     l3476:	
  9208                           ;incstack = 0
  9209                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  9210                           
  9211  13A3  0875               	movf	___ftpack@exp,w
  9212  13A4  1903               	btfsc	3,2
  9213  13A5  2BA7               	goto	u4501
  9214  13A6  2BA8               	goto	u4500
  9215  13A7                     u4501:
  9216  13A7  2BAF               	goto	l3480
  9217  13A8                     u4500:
  9218  13A8                     l3478:
  9219  13A8  0874               	movf	___ftpack@arg+2,w
  9220  13A9  0473               	iorwf	___ftpack@arg+1,w
  9221  13AA  0472               	iorwf	___ftpack@arg,w
  9222  13AB  1D03               	skipz
  9223  13AC  2BAE               	goto	u4511
  9224  13AD  2BAF               	goto	u4510
  9225  13AE                     u4511:
  9226  13AE  2BC2               	goto	l3486
  9227  13AF                     u4510:
  9228  13AF                     l3480:
  9229  13AF  3000               	movlw	0
  9230  13B0  00F2               	movwf	?___ftpack
  9231  13B1  3000               	movlw	0
  9232  13B2  00F3               	movwf	?___ftpack+1
  9233  13B3  3000               	movlw	0
  9234  13B4  00F4               	movwf	?___ftpack+2
  9235  13B5  2C1E               	goto	l707
  9236  13B6                     l3484:
  9237  13B6  3001               	movlw	1
  9238  13B7  00F7               	movwf	??___ftpack
  9239  13B8  0877               	movf	??___ftpack,w
  9240  13B9  07F5               	addwf	___ftpack@exp,f
  9241  13BA  3001               	movlw	1
  9242  13BB                     u4525:
  9243  13BB  1003               	clrc
  9244  13BC  0CF4               	rrf	___ftpack@arg+2,f
  9245  13BD  0CF3               	rrf	___ftpack@arg+1,f
  9246  13BE  0CF2               	rrf	___ftpack@arg,f
  9247  13BF  3EFF               	addlw	-1
  9248  13C0  1D03               	skipz
  9249  13C1  2BBB               	goto	u4525
  9250  13C2                     l3486:
  9251  13C2  30FE               	movlw	254
  9252  13C3  0574               	andwf	___ftpack@arg+2,w
  9253  13C4  1D03               	btfss	3,2
  9254  13C5  2BC7               	goto	u4531
  9255  13C6  2BC8               	goto	u4530
  9256  13C7                     u4531:
  9257  13C7  2BB6               	goto	l3484
  9258  13C8                     u4530:
  9259  13C8  2BDF               	goto	l711
  9260  13C9                     l3488:
  9261  13C9  3001               	movlw	1
  9262  13CA  00F7               	movwf	??___ftpack
  9263  13CB  0877               	movf	??___ftpack,w
  9264  13CC  07F5               	addwf	___ftpack@exp,f
  9265  13CD                     l3490:
  9266  13CD  3001               	movlw	1
  9267  13CE  07F2               	addwf	___ftpack@arg,f
  9268  13CF  3000               	movlw	0
  9269  13D0  1803               	skipnc
  9270  13D1  3001               	movlw	1
  9271  13D2  07F3               	addwf	___ftpack@arg+1,f
  9272  13D3  3000               	movlw	0
  9273  13D4  1803               	skipnc
  9274  13D5  3001               	movlw	1
  9275  13D6  07F4               	addwf	___ftpack@arg+2,f
  9276  13D7                     l3492:
  9277  13D7  3001               	movlw	1
  9278  13D8                     u4545:
  9279  13D8  1003               	clrc
  9280  13D9  0CF4               	rrf	___ftpack@arg+2,f
  9281  13DA  0CF3               	rrf	___ftpack@arg+1,f
  9282  13DB  0CF2               	rrf	___ftpack@arg,f
  9283  13DC  3EFF               	addlw	-1
  9284  13DD  1D03               	skipz
  9285  13DE  2BD8               	goto	u4545
  9286  13DF                     l711:
  9287  13DF  30FF               	movlw	255
  9288  13E0  0574               	andwf	___ftpack@arg+2,w
  9289  13E1  1D03               	btfss	3,2
  9290  13E2  2BE4               	goto	u4551
  9291  13E3  2BE5               	goto	u4550
  9292  13E4                     u4551:
  9293  13E4  2BC9               	goto	l3488
  9294  13E5                     u4550:
  9295  13E5  2BF0               	goto	l3496
  9296  13E6                     l3494:
  9297  13E6  3001               	movlw	1
  9298  13E7  02F5               	subwf	___ftpack@exp,f
  9299  13E8  3001               	movlw	1
  9300  13E9                     u4565:
  9301  13E9  1003               	clrc
  9302  13EA  0DF2               	rlf	___ftpack@arg,f
  9303  13EB  0DF3               	rlf	___ftpack@arg+1,f
  9304  13EC  0DF4               	rlf	___ftpack@arg+2,f
  9305  13ED  3EFF               	addlw	-1
  9306  13EE  1D03               	skipz
  9307  13EF  2BE9               	goto	u4565
  9308  13F0                     l3496:
  9309  13F0  1BF3               	btfsc	___ftpack@arg+1,7
  9310  13F1  2BF3               	goto	u4571
  9311  13F2  2BF4               	goto	u4570
  9312  13F3                     u4571:
  9313  13F3  2BFA               	goto	l718
  9314  13F4                     u4570:
  9315  13F4                     l3498:
  9316  13F4  3002               	movlw	2
  9317  13F5  0275               	subwf	___ftpack@exp,w
  9318  13F6  1803               	skipnc
  9319  13F7  2BF9               	goto	u4581
  9320  13F8  2BFA               	goto	u4580
  9321  13F9                     u4581:
  9322  13F9  2BE6               	goto	l3494
  9323  13FA                     u4580:
  9324  13FA                     l718:
  9325  13FA  1875               	btfsc	___ftpack@exp,0
  9326  13FB  2BFD               	goto	u4591
  9327  13FC  2BFE               	goto	u4590
  9328  13FD                     u4591:
  9329  13FD  2C04               	goto	l719
  9330  13FE                     u4590:
  9331  13FE                     l3500:
  9332  13FE  30FF               	movlw	255
  9333  13FF  05F2               	andwf	___ftpack@arg,f
  9334  1400  307F               	movlw	127
  9335  1401  05F3               	andwf	___ftpack@arg+1,f
  9336  1402  30FF               	movlw	255
  9337  1403  05F4               	andwf	___ftpack@arg+2,f
  9338  1404                     l719:
  9339  1404  1003               	clrc
  9340  1405  0CF5               	rrf	___ftpack@exp,f
  9341  1406                     l3502:
  9342  1406  0875               	movf	___ftpack@exp,w
  9343  1407  00F7               	movwf	??___ftpack
  9344  1408  01F8               	clrf	??___ftpack+1
  9345  1409  01F9               	clrf	??___ftpack+2
  9346  140A  3010               	movlw	16
  9347  140B                     u4605:
  9348  140B  1003               	clrc
  9349  140C  0DF7               	rlf	??___ftpack,f
  9350  140D  0DF8               	rlf	??___ftpack+1,f
  9351  140E  0DF9               	rlf	??___ftpack+2,f
  9352  140F                     u4600:
  9353  140F  3EFF               	addlw	-1
  9354  1410  1D03               	skipz
  9355  1411  2C0B               	goto	u4605
  9356  1412  0877               	movf	??___ftpack,w
  9357  1413  04F2               	iorwf	___ftpack@arg,f
  9358  1414  0878               	movf	??___ftpack+1,w
  9359  1415  04F3               	iorwf	___ftpack@arg+1,f
  9360  1416  0879               	movf	??___ftpack+2,w
  9361  1417  04F4               	iorwf	___ftpack@arg+2,f
  9362  1418                     l3504:
  9363  1418  0876               	movf	___ftpack@sign,w
  9364  1419  1903               	btfsc	3,2
  9365  141A  2C1C               	goto	u4611
  9366  141B  2C1D               	goto	u4610
  9367  141C                     u4611:
  9368  141C  2C1E               	goto	l720
  9369  141D                     u4610:
  9370  141D                     l3506:
  9371  141D  17F4               	bsf	___ftpack@arg+2,7
  9372  141E                     l720:
  9373  141E                     l707:
  9374  141E  0008               	return
  9375  141F                     __end_of___ftpack:
  9376                           
  9377                           	psect	text47
  9378  1C09                     __ptext47:	
  9379 ;; *************** function ___ftneg *****************
  9380 ;; Defined at:
  9381 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftneg.c"
  9382 ;; Parameters:    Size  Location     Type
  9383 ;;  f1              3    2[COMMON] float 
  9384 ;; Auto vars:     Size  Location     Type
  9385 ;;		None
  9386 ;; Return value:  Size  Location     Type
  9387 ;;                  3    2[COMMON] float 
  9388 ;; Registers used:
  9389 ;;		wreg
  9390 ;; Tracked objects:
  9391 ;;		On entry : 0/0
  9392 ;;		On exit  : 0/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9395 ;;      Params:         3       0       0       0       0
  9396 ;;      Locals:         0       0       0       0       0
  9397 ;;      Temps:          0       0       0       0       0
  9398 ;;      Totals:         3       0       0       0       0
  9399 ;;Total ram usage:        3 bytes
  9400 ;; Hardware stack levels used:    1
  9401 ;; Hardware stack levels required when called:    1
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		_sprintf
  9406 ;; This function uses a non-reentrant model
  9407 ;;
  9408                           
  9409                           
  9410                           ;psect for function ___ftneg
  9411  1C09                     ___ftneg:
  9412  1C09                     l2792:	
  9413                           ;incstack = 0
  9414                           ; Regs used in ___ftneg: [wreg]
  9415                           
  9416  1C09  0874               	movf	___ftneg@f1+2,w
  9417  1C0A  0473               	iorwf	___ftneg@f1+1,w
  9418  1C0B  0472               	iorwf	___ftneg@f1,w
  9419  1C0C  1903               	skipnz
  9420  1C0D  2C0F               	goto	u3601
  9421  1C0E  2C10               	goto	u3600
  9422  1C0F                     u3601:
  9423  1C0F  2C12               	goto	l2796
  9424  1C10                     u3600:
  9425  1C10                     l2794:
  9426  1C10  3080               	movlw	128
  9427  1C11  06F4               	xorwf	___ftneg@f1+2,f
  9428  1C12                     l2796:
  9429  1C12                     l802:
  9430  1C12  0008               	return
  9431  1C13                     __end_of___ftneg:
  9432                           
  9433                           	psect	text48
  9434  1DDE                     __ptext48:	
  9435 ;; *************** function ___ftge *****************
  9436 ;; Defined at:
  9437 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\ftge.c"
  9438 ;; Parameters:    Size  Location     Type
  9439 ;;  ff1             3    2[COMMON] float 
  9440 ;;  ff2             3    5[COMMON] float 
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;		None
  9443 ;; Return value:  Size  Location     Type
  9444 ;;		None               void
  9445 ;; Registers used:
  9446 ;;		wreg, status,2, status,0
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9452 ;;      Params:         6       0       0       0       0
  9453 ;;      Locals:         0       0       0       0       0
  9454 ;;      Temps:          0       0       0       0       0
  9455 ;;      Totals:         6       0       0       0       0
  9456 ;;Total ram usage:        6 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    1
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_sprintf
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           
  9467                           ;psect for function ___ftge
  9468  1DDE                     ___ftge:
  9469  1DDE                     l2772:	
  9470                           ;incstack = 0
  9471                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9472                           
  9473  1DDE  1FF4               	btfss	___ftge@ff1+2,7
  9474  1DDF  2DE1               	goto	u3571
  9475  1DE0  2DE2               	goto	u3570
  9476  1DE1                     u3571:
  9477  1DE1  2DEF               	goto	l2776
  9478  1DE2                     u3570:
  9479  1DE2                     l2774:
  9480  1DE2  0872               	movf	___ftge@ff1,w
  9481  1DE3  3C00               	sublw	0
  9482  1DE4  00F2               	movwf	___ftge@ff1
  9483  1DE5  0873               	movf	___ftge@ff1+1,w
  9484  1DE6  1C03               	skipc
  9485  1DE7  0F73               	incfsz	___ftge@ff1+1,w
  9486  1DE8  3C00               	sublw	0
  9487  1DE9  00F3               	movwf	___ftge@ff1+1
  9488  1DEA  0874               	movf	___ftge@ff1+2,w
  9489  1DEB  1C03               	skipc
  9490  1DEC  0F74               	incfsz	___ftge@ff1+2,w
  9491  1DED  3C80               	sublw	128
  9492  1DEE  00F4               	movwf	___ftge@ff1+2
  9493  1DEF                     l2776:
  9494  1DEF  1FF7               	btfss	___ftge@ff2+2,7
  9495  1DF0  2DF2               	goto	u3581
  9496  1DF1  2DF3               	goto	u3580
  9497  1DF2                     u3581:
  9498  1DF2  2E00               	goto	l2780
  9499  1DF3                     u3580:
  9500  1DF3                     l2778:
  9501  1DF3  0875               	movf	___ftge@ff2,w
  9502  1DF4  3C00               	sublw	0
  9503  1DF5  00F5               	movwf	___ftge@ff2
  9504  1DF6  0876               	movf	___ftge@ff2+1,w
  9505  1DF7  1C03               	skipc
  9506  1DF8  0F76               	incfsz	___ftge@ff2+1,w
  9507  1DF9  3C00               	sublw	0
  9508  1DFA  00F6               	movwf	___ftge@ff2+1
  9509  1DFB  0877               	movf	___ftge@ff2+2,w
  9510  1DFC  1C03               	skipc
  9511  1DFD  0F77               	incfsz	___ftge@ff2+2,w
  9512  1DFE  3C80               	sublw	128
  9513  1DFF  00F7               	movwf	___ftge@ff2+2
  9514  1E00                     l2780:
  9515  1E00  3080               	movlw	128
  9516  1E01  06F4               	xorwf	___ftge@ff1+2,f
  9517  1E02                     l2782:
  9518  1E02  3080               	movlw	128
  9519  1E03  06F7               	xorwf	___ftge@ff2+2,f
  9520  1E04                     l2784:
  9521  1E04  0877               	movf	___ftge@ff2+2,w
  9522  1E05  0274               	subwf	___ftge@ff1+2,w
  9523  1E06  1D03               	skipz
  9524  1E07  2E0E               	goto	u3595
  9525  1E08  0876               	movf	___ftge@ff2+1,w
  9526  1E09  0273               	subwf	___ftge@ff1+1,w
  9527  1E0A  1D03               	skipz
  9528  1E0B  2E0E               	goto	u3595
  9529  1E0C  0875               	movf	___ftge@ff2,w
  9530  1E0D  0272               	subwf	___ftge@ff1,w
  9531  1E0E                     u3595:
  9532  1E0E  1803               	skipnc
  9533  1E0F  2E11               	goto	u3591
  9534  1E10  2E12               	goto	u3590
  9535  1E11                     u3591:
  9536  1E11  2E14               	goto	l2788
  9537  1E12                     u3590:
  9538  1E12                     l2786:
  9539  1E12  1003               	clrc
  9540  1E13  2E15               	goto	l785
  9541  1E14                     l2788:
  9542  1E14  1403               	setc
  9543  1E15                     l785:
  9544  1E15  0008               	return
  9545  1E16                     __end_of___ftge:
  9546                           
  9547                           	psect	text49
  9548  1BE2                     __ptext49:	
  9549 ;; *************** function _ISR *****************
  9550 ;; Defined at:
  9551 ;;		line 88 in file "main_maestro.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;		None
  9554 ;; Auto vars:     Size  Location     Type
  9555 ;;		None
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      void 
  9558 ;; Registers used:
  9559 ;;		None
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9565 ;;      Params:         0       0       0       0       0
  9566 ;;      Locals:         0       0       0       0       0
  9567 ;;      Temps:          2       0       0       0       0
  9568 ;;      Totals:         2       0       0       0       0
  9569 ;;Total ram usage:        2 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; This function calls:
  9572 ;;		Nothing
  9573 ;; This function is called by:
  9574 ;;		Interrupt level 1
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function _ISR
  9580  1BE2                     _ISR:
  9581  1BE2                     i1l105:
  9582  1BE2  0871               	movf	??_ISR+1,w
  9583  1BE3  008A               	movwf	10
  9584  1BE4  0E70               	swapf	??_ISR,w
  9585  1BE5  0083               	movwf	3
  9586  1BE6  0EFE               	swapf	btemp,f
  9587  1BE7  0E7E               	swapf	btemp,w
  9588  1BE8  0009               	retfie
  9589  1BE9                     __end_of_ISR:
  9590  007E                     btemp	set	126	;btemp
  9591  007E                     wtemp0	set	126
  9592                           
  9593                           	psect	intentry
  9594  0004                     __pintentry:	
  9595                           ;incstack = 0
  9596                           ; Regs used in _ISR: []
  9597                           
  9598  0004                     interrupt_function:
  9599  007E                     saved_w	set	btemp
  9600  0004  00FE               	movwf	btemp
  9601  0005  0E03               	swapf	3,w
  9602  0006  00F0               	movwf	??_ISR
  9603  0007  080A               	movf	10,w
  9604  0008  00F1               	movwf	??_ISR+1
  9605  0009  160A  158A  2BE2   	ljmp	_ISR
  9606                           
  9607                           	psect	config
  9608                           
  9609                           ;Config register CONFIG1 @ 0x2007
  9610                           ;	Oscillator Selection bits
  9611                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  9612                           ;	Watchdog Timer Enable bit
  9613                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  9614                           ;	Power-up Timer Enable bit
  9615                           ;	PWRTE = OFF, PWRT disabled
  9616                           ;	RE3/MCLR pin function select bit
  9617                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  9618                           ;	Code Protection bit
  9619                           ;	CP = OFF, Program memory code protection is disabled
  9620                           ;	Data Code Protection bit
  9621                           ;	CPD = OFF, Data memory code protection is disabled
  9622                           ;	Brown Out Reset Selection bits
  9623                           ;	BOREN = OFF, BOR disabled
  9624                           ;	Internal External Switchover bit
  9625                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  9626                           ;	Fail-Safe Clock Monitor Enabled bit
  9627                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  9628                           ;	Low Voltage Programming Enable bit
  9629                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  9630                           ;	In-Circuit Debugger Mode bit
  9631                           ;	DEBUG = 0x1, unprogrammed default
  9632  2007                     	org	8199
  9633  2007  20D6               	dw	8406
  9634                           
  9635                           ;Config register CONFIG2 @ 0x2008
  9636                           ;	Brown-out Reset Selection bit
  9637                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  9638                           ;	Flash Program Memory Self Write Enable bits
  9639                           ;	WRT = OFF, Write protection off
  9640  2008                     	org	8200
  9641  2008  3FFF               	dw	16383
  9642                           
  9643                           	psect	text27_split_1
  9644  0024                     u5620:
  9645  0024                     l3968:
  9646  0024  1683               	bsf	3,5	;RP0=1, select bank1
  9647  0025  1303               	bcf	3,6	;RP1=0, select bank1
  9648  0026  0863               	movf	(sprintf@fval+2)^(0+128),w
  9649  0027  0462               	iorwf	(sprintf@fval+1)^(0+128),w
  9650  0028  0461               	iorwf	sprintf@fval^(0+128),w
  9651  0029  1903               	skipnz
  9652  002A  282C               	goto	u5631
  9653  002B  282D               	goto	u5630
  9654  002C                     u5631:
  9655  002C  28BD               	goto	l3988
  9656  002D                     u5630:
  9657  002D                     l3970:
  9658  002D  0861               	movf	sprintf@fval^(0+128),w
  9659  002E  1283               	bcf	3,5	;RP0=0, select bank0
  9660  002F  1303               	bcf	3,6	;RP1=0, select bank0
  9661  0030  00C5               	movwf	___fttol@f1
  9662  0031  1683               	bsf	3,5	;RP0=1, select bank1
  9663  0032  1303               	bcf	3,6	;RP1=0, select bank1
  9664  0033  0862               	movf	(sprintf@fval+1)^(0+128),w
  9665  0034  1283               	bcf	3,5	;RP0=0, select bank0
  9666  0035  1303               	bcf	3,6	;RP1=0, select bank0
  9667  0036  00C6               	movwf	___fttol@f1+1
  9668  0037  1683               	bsf	3,5	;RP0=1, select bank1
  9669  0038  1303               	bcf	3,6	;RP1=0, select bank1
  9670  0039  0863               	movf	(sprintf@fval+2)^(0+128),w
  9671  003A  1283               	bcf	3,5	;RP0=0, select bank0
  9672  003B  1303               	bcf	3,6	;RP1=0, select bank0
  9673  003C  00C7               	movwf	___fttol@f1+2
  9674  003D  120A  158A  2028  120A  118A  	fcall	___fttol
  9675  0042  1283               	bcf	3,5	;RP0=0, select bank0
  9676  0043  1303               	bcf	3,6	;RP1=0, select bank0
  9677  0044  0848               	movf	?___fttol+3,w
  9678  0045  0447               	iorwf	?___fttol+2,w
  9679  0046  0446               	iorwf	?___fttol+1,w
  9680  0047  0445               	iorwf	?___fttol,w
  9681  0048  1D03               	skipz
  9682  0049  284B               	goto	u5641
  9683  004A  284C               	goto	u5640
  9684  004B                     u5641:
  9685  004B  28BD               	goto	l3988
  9686  004C                     u5640:
  9687  004C                     l3972:
  9688  004C  1683               	bsf	3,5	;RP0=1, select bank1
  9689  004D  1303               	bcf	3,6	;RP1=0, select bank1
  9690  004E  0860               	movf	(sprintf@eexp+1)^(0+128),w
  9691  004F  3A80               	xorlw	128
  9692  0050  00FF               	movwf	btemp+1
  9693  0051  3080               	movlw	128
  9694  0052  027F               	subwf	btemp+1,w
  9695  0053  1D03               	skipz
  9696  0054  2857               	goto	u5655
  9697  0055  3002               	movlw	2
  9698  0056  025F               	subwf	sprintf@eexp^(0+128),w
  9699  0057                     u5655:
  9700  0057  1C03               	skipc
  9701  0058  285A               	goto	u5651
  9702  0059  285B               	goto	u5650
  9703  005A                     u5651:
  9704  005A  28BD               	goto	l3988
  9705  005B                     u5650:
  9706  005B                     l3974:
  9707                           
  9708                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1146:      if(tmp
      +                          val.integ < 4.294967296){
  9709  005B  1683               	bsf	3,5	;RP0=1, select bank1
  9710  005C  1303               	bcf	3,6	;RP1=0, select bank1
  9711  005D  0857               	movf	sprintf@tmpval^(0+128),w
  9712  005E  00F2               	movwf	___ftge@ff1
  9713  005F  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  9714  0060  00F3               	movwf	___ftge@ff1+1
  9715  0061  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  9716  0062  00F4               	movwf	___ftge@ff1+2
  9717  0063  3070               	movlw	112
  9718  0064  00F5               	movwf	___ftge@ff2
  9719  0065  3089               	movlw	137
  9720  0066  00F6               	movwf	___ftge@ff2+1
  9721  0067  3040               	movlw	64
  9722  0068  00F7               	movwf	___ftge@ff2+2
  9723  0069  160A  158A  25DE  120A  118A  	fcall	___ftge
  9724  006E  1803               	btfsc	3,0
  9725  006F  2871               	goto	u5661
  9726  0070  2872               	goto	u5660
  9727  0071                     u5661:
  9728  0071  287B               	goto	l3978
  9729  0072                     u5660:
  9730  0072                     l3976:
  9731                           
  9732                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1147:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-1;
  9733  0072  30F7               	movlw	247
  9734  0073  1683               	bsf	3,5	;RP0=1, select bank1
  9735  0074  1303               	bcf	3,6	;RP1=0, select bank1
  9736  0075  07DF               	addwf	sprintf@eexp^(0+128),f
  9737  0076  1803               	skipnc
  9738  0077  0AE0               	incf	(sprintf@eexp+1)^(0+128),f
  9739  0078  30FF               	movlw	255
  9740  0079  07E0               	addwf	(sprintf@eexp+1)^(0+128),f
  9741                           
  9742                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1148:      }else{
  9743  007A  2883               	goto	l3980
  9744  007B                     l3978:
  9745                           
  9746                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1149:       eexp 
      +                          -= (sizeof dpowers/sizeof dpowers[0])-2;
  9747  007B  30F8               	movlw	248
  9748  007C  1683               	bsf	3,5	;RP0=1, select bank1
  9749  007D  1303               	bcf	3,6	;RP1=0, select bank1
  9750  007E  07DF               	addwf	sprintf@eexp^(0+128),f
  9751  007F  1803               	skipnc
  9752  0080  0AE0               	incf	(sprintf@eexp+1)^(0+128),f
  9753  0081  30FF               	movlw	255
  9754  0082  07E0               	addwf	(sprintf@eexp+1)^(0+128),f
  9755  0083                     l3980:
  9756                           
  9757                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1151:      tmpval
      +                          .integ = scale(eexp);
  9758  0083  085F               	movf	sprintf@eexp^(0+128),w
  9759  0084  120A  158A  225D  120A  118A  	fcall	_scale
  9760  0089  1283               	bcf	3,5	;RP0=0, select bank0
  9761  008A  1303               	bcf	3,6	;RP1=0, select bank0
  9762  008B  083C               	movf	?_scale,w
  9763  008C  1683               	bsf	3,5	;RP0=1, select bank1
  9764  008D  1303               	bcf	3,6	;RP1=0, select bank1
  9765  008E  00D7               	movwf	sprintf@tmpval^(0+128)
  9766  008F  1283               	bcf	3,5	;RP0=0, select bank0
  9767  0090  1303               	bcf	3,6	;RP1=0, select bank0
  9768  0091  083D               	movf	?_scale+1,w
  9769  0092  1683               	bsf	3,5	;RP0=1, select bank1
  9770  0093  1303               	bcf	3,6	;RP1=0, select bank1
  9771  0094  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
  9772  0095  1283               	bcf	3,5	;RP0=0, select bank0
  9773  0096  1303               	bcf	3,6	;RP1=0, select bank0
  9774  0097  083E               	movf	?_scale+2,w
  9775  0098  1683               	bsf	3,5	;RP0=1, select bank1
  9776  0099  1303               	bcf	3,6	;RP1=0, select bank1
  9777  009A  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
  9778  009B                     l3984:	
  9779                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1152:      val = 
      +                          ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_l_(fval,tmpval.integ));
  9780                           
  9781  009B  0861               	movf	sprintf@fval^(0+128),w
  9782  009C  00F2               	movwf	__tdiv_to_l_@f1
  9783  009D  0862               	movf	(sprintf@fval+1)^(0+128),w
  9784  009E  00F3               	movwf	__tdiv_to_l_@f1+1
  9785  009F  0863               	movf	(sprintf@fval+2)^(0+128),w
  9786  00A0  00F4               	movwf	__tdiv_to_l_@f1+2
  9787  00A1  0857               	movf	sprintf@tmpval^(0+128),w
  9788  00A2  00F5               	movwf	__tdiv_to_l_@f2
  9789  00A3  0858               	movf	(sprintf@tmpval+1)^(0+128),w
  9790  00A4  00F6               	movwf	__tdiv_to_l_@f2+1
  9791  00A5  0859               	movf	(sprintf@tmpval+2)^(0+128),w
  9792  00A6  00F7               	movwf	__tdiv_to_l_@f2+2
  9793  00A7  160A  118A  241F  120A  118A  	fcall	__tdiv_to_l_
  9794  00AC  0875               	movf	?__tdiv_to_l_+3,w
  9795  00AD  1683               	bsf	3,5	;RP0=1, select bank1
  9796  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  9797  00AF  00DE               	movwf	(sprintf@val+3)^(0+128)
  9798  00B0  0874               	movf	?__tdiv_to_l_+2,w
  9799  00B1  00DD               	movwf	(sprintf@val+2)^(0+128)
  9800  00B2  0873               	movf	?__tdiv_to_l_+1,w
  9801  00B3  00DC               	movwf	(sprintf@val+1)^(0+128)
  9802  00B4  0872               	movf	?__tdiv_to_l_,w
  9803  00B5  00DB               	movwf	sprintf@val^(0+128)
  9804  00B6                     l3986:
  9805                           
  9806                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1155:      fval =
      +                           0.0;
  9807  00B6  3000               	movlw	0
  9808  00B7  00E1               	movwf	sprintf@fval^(0+128)
  9809  00B8  3000               	movlw	0
  9810  00B9  00E2               	movwf	(sprintf@fval+1)^(0+128)
  9811  00BA  3000               	movlw	0
  9812  00BB  00E3               	movwf	(sprintf@fval+2)^(0+128)
  9813                           
  9814                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1156:     } else 
      +                          {
  9815  00BC  293A               	goto	l3992
  9816  00BD                     l3988:
  9817                           
  9818                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1157:      val = 
      +                          (unsigned long)fval;
  9819  00BD  1683               	bsf	3,5	;RP0=1, select bank1
  9820  00BE  1303               	bcf	3,6	;RP1=0, select bank1
  9821  00BF  0861               	movf	sprintf@fval^(0+128),w
  9822  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  9823  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  9824  00C2  00C5               	movwf	___fttol@f1
  9825  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  9826  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  9827  00C5  0862               	movf	(sprintf@fval+1)^(0+128),w
  9828  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  9829  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  9830  00C8  00C6               	movwf	___fttol@f1+1
  9831  00C9  1683               	bsf	3,5	;RP0=1, select bank1
  9832  00CA  1303               	bcf	3,6	;RP1=0, select bank1
  9833  00CB  0863               	movf	(sprintf@fval+2)^(0+128),w
  9834  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  9835  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  9836  00CE  00C7               	movwf	___fttol@f1+2
  9837  00CF  120A  158A  2028  120A  118A  	fcall	___fttol
  9838  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  9839  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  9840  00D6  0848               	movf	?___fttol+3,w
  9841  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  9842  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  9843  00D9  00DE               	movwf	(sprintf@val+3)^(0+128)
  9844  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  9845  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  9846  00DC  0847               	movf	?___fttol+2,w
  9847  00DD  1683               	bsf	3,5	;RP0=1, select bank1
  9848  00DE  1303               	bcf	3,6	;RP1=0, select bank1
  9849  00DF  00DD               	movwf	(sprintf@val+2)^(0+128)
  9850  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  9851  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  9852  00E2  0846               	movf	?___fttol+1,w
  9853  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  9854  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  9855  00E5  00DC               	movwf	(sprintf@val+1)^(0+128)
  9856  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  9857  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  9858  00E8  0845               	movf	?___fttol,w
  9859  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  9860  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  9861  00EB  00DB               	movwf	sprintf@val^(0+128)
  9862                           
  9863                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1158:      fval -
      +                          = (double)val;
  9864  00EC  085E               	movf	(sprintf@val+3)^(0+128),w
  9865  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  9866  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  9867  00EF  00A3               	movwf	___lltoft@c+3
  9868  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  9869  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  9870  00F2  085D               	movf	(sprintf@val+2)^(0+128),w
  9871  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  9872  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  9873  00F5  00A2               	movwf	___lltoft@c+2
  9874  00F6  1683               	bsf	3,5	;RP0=1, select bank1
  9875  00F7  1303               	bcf	3,6	;RP1=0, select bank1
  9876  00F8  085C               	movf	(sprintf@val+1)^(0+128),w
  9877  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  9878  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  9879  00FB  00A1               	movwf	___lltoft@c+1
  9880  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  9881  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  9882  00FE  085B               	movf	sprintf@val^(0+128),w
  9883  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  9884  0100  1303               	bcf	3,6	;RP1=0, select bank0
  9885  0101  00A0               	movwf	___lltoft@c
  9886  0102  160A  158A  250D  120A  118A  	fcall	___lltoft
  9887  0107  1283               	bcf	3,5	;RP0=0, select bank0
  9888  0108  1303               	bcf	3,6	;RP1=0, select bank0
  9889  0109  0820               	movf	?___lltoft,w
  9890  010A  00D9               	movwf	___ftsub@f2
  9891  010B  0821               	movf	?___lltoft+1,w
  9892  010C  00DA               	movwf	___ftsub@f2+1
  9893  010D  0822               	movf	?___lltoft+2,w
  9894  010E  00DB               	movwf	___ftsub@f2+2
  9895  010F  1683               	bsf	3,5	;RP0=1, select bank1
  9896  0110  1303               	bcf	3,6	;RP1=0, select bank1
  9897  0111  0861               	movf	sprintf@fval^(0+128),w
  9898  0112  1283               	bcf	3,5	;RP0=0, select bank0
  9899  0113  1303               	bcf	3,6	;RP1=0, select bank0
  9900  0114  00DC               	movwf	___ftsub@f1
  9901  0115  1683               	bsf	3,5	;RP0=1, select bank1
  9902  0116  1303               	bcf	3,6	;RP1=0, select bank1
  9903  0117  0862               	movf	(sprintf@fval+1)^(0+128),w
  9904  0118  1283               	bcf	3,5	;RP0=0, select bank0
  9905  0119  1303               	bcf	3,6	;RP1=0, select bank0
  9906  011A  00DD               	movwf	___ftsub@f1+1
  9907  011B  1683               	bsf	3,5	;RP0=1, select bank1
  9908  011C  1303               	bcf	3,6	;RP1=0, select bank1
  9909  011D  0863               	movf	(sprintf@fval+2)^(0+128),w
  9910  011E  1283               	bcf	3,5	;RP0=0, select bank0
  9911  011F  1303               	bcf	3,6	;RP1=0, select bank0
  9912  0120  00DE               	movwf	___ftsub@f1+2
  9913  0121  160A  158A  24BF  120A  118A  	fcall	___ftsub
  9914  0126  1283               	bcf	3,5	;RP0=0, select bank0
  9915  0127  1303               	bcf	3,6	;RP1=0, select bank0
  9916  0128  0859               	movf	?___ftsub,w
  9917  0129  1683               	bsf	3,5	;RP0=1, select bank1
  9918  012A  1303               	bcf	3,6	;RP1=0, select bank1
  9919  012B  00E1               	movwf	sprintf@fval^(0+128)
  9920  012C  1283               	bcf	3,5	;RP0=0, select bank0
  9921  012D  1303               	bcf	3,6	;RP1=0, select bank0
  9922  012E  085A               	movf	?___ftsub+1,w
  9923  012F  1683               	bsf	3,5	;RP0=1, select bank1
  9924  0130  1303               	bcf	3,6	;RP1=0, select bank1
  9925  0131  00E2               	movwf	(sprintf@fval+1)^(0+128)
  9926  0132  1283               	bcf	3,5	;RP0=0, select bank0
  9927  0133  1303               	bcf	3,6	;RP1=0, select bank0
  9928  0134  085B               	movf	?___ftsub+2,w
  9929  0135  1683               	bsf	3,5	;RP0=1, select bank1
  9930  0136  1303               	bcf	3,6	;RP1=0, select bank1
  9931  0137  00E3               	movwf	(sprintf@fval+2)^(0+128)
  9932  0138                     l3990:
  9933                           
  9934                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1159:      eexp =
      +                           0;
  9935  0138  01DF               	clrf	sprintf@eexp^(0+128)
  9936  0139  01E0               	clrf	(sprintf@eexp+1)^(0+128)
  9937  013A                     l3992:
  9938                           
  9939                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1162:     for(c =
      +                           1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  9940  013A  01E7               	clrf	sprintf@c^(0+128)
  9941  013B  0AE7               	incf	sprintf@c^(0+128),f
  9942  013C                     l3998:
  9943                           
  9944                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1163:      if(val
      +                           < dpowers[c])
  9945  013C  0867               	movf	sprintf@c^(0+128),w
  9946  013D  1283               	bcf	3,5	;RP0=0, select bank0
  9947  013E  1303               	bcf	3,6	;RP1=0, select bank0
  9948  013F  00E3               	movwf	??_sprintf
  9949  0140  3001               	movlw	1
  9950  0141                     u5675:
  9951  0141  1003               	clrc
  9952  0142  0DE3               	rlf	??_sprintf,f
  9953  0143  3EFF               	addlw	-1
  9954  0144  1D03               	skipz
  9955  0145  2941               	goto	u5675
  9956  0146  1003               	clrc
  9957  0147  0D63               	rlf	??_sprintf,w
  9958  0148  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  9959  0149  0084               	movwf	4
  9960  014A  160A  118A  200A  120A  118A  	fcall	stringdir
  9961  014F  00E4               	movwf	??_sprintf+1
  9962  0150  160A  118A  200A  120A  118A  	fcall	stringdir
  9963  0155  00E5               	movwf	??_sprintf+2
  9964  0156  160A  118A  200A  120A  118A  	fcall	stringdir
  9965  015B  00E6               	movwf	??_sprintf+3
  9966  015C  160A  118A  200A  120A  118A  	fcall	stringdir
  9967  0161  00E7               	movwf	??_sprintf+4
  9968  0162  0867               	movf	??_sprintf+4,w
  9969  0163  1683               	bsf	3,5	;RP0=1, select bank1
  9970  0164  1303               	bcf	3,6	;RP1=0, select bank1
  9971  0165  025E               	subwf	(sprintf@val+3)^(0+128),w
  9972  0166  1D03               	skipz
  9973  0167  297E               	goto	u5685
  9974  0168  1283               	bcf	3,5	;RP0=0, select bank0
  9975  0169  1303               	bcf	3,6	;RP1=0, select bank0
  9976  016A  0866               	movf	??_sprintf+3,w
  9977  016B  1683               	bsf	3,5	;RP0=1, select bank1
  9978  016C  1303               	bcf	3,6	;RP1=0, select bank1
  9979  016D  025D               	subwf	(sprintf@val+2)^(0+128),w
  9980  016E  1D03               	skipz
  9981  016F  297E               	goto	u5685
  9982  0170  1283               	bcf	3,5	;RP0=0, select bank0
  9983  0171  1303               	bcf	3,6	;RP1=0, select bank0
  9984  0172  0865               	movf	??_sprintf+2,w
  9985  0173  1683               	bsf	3,5	;RP0=1, select bank1
  9986  0174  1303               	bcf	3,6	;RP1=0, select bank1
  9987  0175  025C               	subwf	(sprintf@val+1)^(0+128),w
  9988  0176  1D03               	skipz
  9989  0177  297E               	goto	u5685
  9990  0178  1283               	bcf	3,5	;RP0=0, select bank0
  9991  0179  1303               	bcf	3,6	;RP1=0, select bank0
  9992  017A  0864               	movf	??_sprintf+1,w
  9993  017B  1683               	bsf	3,5	;RP0=1, select bank1
  9994  017C  1303               	bcf	3,6	;RP1=0, select bank1
  9995  017D  025B               	subwf	sprintf@val^(0+128),w
  9996  017E                     u5685:
  9997  017E  1803               	skipnc
  9998  017F  2981               	goto	u5681
  9999  0180  2982               	goto	u5680
 10000  0181                     u5681:
 10001  0181  2983               	goto	l4002
 10002  0182                     u5680:
 10003  0182  2991               	goto	l4004
 10004  0183                     l4002:
 10005  0183  3001               	movlw	1
 10006  0184  1283               	bcf	3,5	;RP0=0, select bank0
 10007  0185  1303               	bcf	3,6	;RP1=0, select bank0
 10008  0186  00E3               	movwf	??_sprintf
 10009  0187  0863               	movf	??_sprintf,w
 10010  0188  1683               	bsf	3,5	;RP0=1, select bank1
 10011  0189  1303               	bcf	3,6	;RP1=0, select bank1
 10012  018A  07E7               	addwf	sprintf@c^(0+128),f
 10013  018B  300A               	movlw	10
 10014  018C  0667               	xorwf	sprintf@c^(0+128),w
 10015  018D  1D03               	btfss	3,2
 10016  018E  2990               	goto	u5691
 10017  018F  2991               	goto	u5690
 10018  0190                     u5691:
 10019  0190  293C               	goto	l3998
 10020  0191                     u5690:
 10021  0191                     l4004:
 10022                           
 10023                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1168:     width -
      +                          = prec + c + eexp;
 10024  0191  0867               	movf	sprintf@c^(0+128),w
 10025  0192  0765               	addwf	sprintf@prec^(0+128),w
 10026  0193  1283               	bcf	3,5	;RP0=0, select bank0
 10027  0194  1303               	bcf	3,6	;RP1=0, select bank0
 10028  0195  00E3               	movwf	??_sprintf
 10029  0196  1683               	bsf	3,5	;RP0=1, select bank1
 10030  0197  1303               	bcf	3,6	;RP1=0, select bank1
 10031  0198  0866               	movf	(sprintf@prec+1)^(0+128),w
 10032  0199  1803               	skipnc
 10033  019A  0A66               	incf	(sprintf@prec+1)^(0+128),w
 10034  019B  1283               	bcf	3,5	;RP0=0, select bank0
 10035  019C  1303               	bcf	3,6	;RP1=0, select bank0
 10036  019D  00E4               	movwf	??_sprintf+1
 10037  019E  1683               	bsf	3,5	;RP0=1, select bank1
 10038  019F  1303               	bcf	3,6	;RP1=0, select bank1
 10039  01A0  085F               	movf	sprintf@eexp^(0+128),w
 10040  01A1  1283               	bcf	3,5	;RP0=0, select bank0
 10041  01A2  1303               	bcf	3,6	;RP1=0, select bank0
 10042  01A3  0763               	addwf	??_sprintf,w
 10043  01A4  00E5               	movwf	??_sprintf+2
 10044  01A5  1683               	bsf	3,5	;RP0=1, select bank1
 10045  01A6  1303               	bcf	3,6	;RP1=0, select bank1
 10046  01A7  0860               	movf	(sprintf@eexp+1)^(0+128),w
 10047  01A8  1803               	skipnc
 10048  01A9  0A60               	incf	(sprintf@eexp+1)^(0+128),w
 10049  01AA  1283               	bcf	3,5	;RP0=0, select bank0
 10050  01AB  1303               	bcf	3,6	;RP1=0, select bank0
 10051  01AC  0764               	addwf	??_sprintf+1,w
 10052  01AD  00E6               	movwf	??_sprintf+3
 10053  01AE  0865               	movf	??_sprintf+2,w
 10054  01AF  1683               	bsf	3,5	;RP0=1, select bank1
 10055  01B0  1303               	bcf	3,6	;RP1=0, select bank1
 10056  01B1  02D5               	subwf	sprintf@width^(0+128),f
 10057  01B2  1283               	bcf	3,5	;RP0=0, select bank0
 10058  01B3  1303               	bcf	3,6	;RP1=0, select bank0
 10059  01B4  0866               	movf	??_sprintf+3,w
 10060  01B5  1683               	bsf	3,5	;RP0=1, select bank1
 10061  01B6  1303               	bcf	3,6	;RP1=0, select bank1
 10062  01B7  1C03               	skipc
 10063  01B8  03D6               	decf	(sprintf@width+1)^(0+128),f
 10064  01B9  02D6               	subwf	(sprintf@width+1)^(0+128),f
 10065                           
 10066                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1169:     if(
 10067  01BA  0865               	movf	sprintf@prec^(0+128),w
 10068  01BB  0466               	iorwf	(sprintf@prec+1)^(0+128),w
 10069  01BC  1903               	btfsc	3,2
 10070  01BD  29BF               	goto	u5701
 10071  01BE  29C0               	goto	u5700
 10072  01BF                     u5701:
 10073  01BF  29C6               	goto	l4008
 10074  01C0                     u5700:
 10075  01C0                     l4006:
 10076                           
 10077                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1174:      width-
      +                          -;
 10078  01C0  30FF               	movlw	255
 10079  01C1  07D5               	addwf	sprintf@width^(0+128),f
 10080  01C2  1803               	skipnc
 10081  01C3  0AD6               	incf	(sprintf@width+1)^(0+128),f
 10082  01C4  30FF               	movlw	255
 10083  01C5  07D6               	addwf	(sprintf@width+1)^(0+128),f
 10084  01C6                     l4008:
 10085                           
 10086                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1175:     if(flag
      +                           & 0x03)
 10087  01C6  3003               	movlw	3
 10088  01C7  0553               	andwf	sprintf@flag^(0+128),w
 10089  01C8  1283               	bcf	3,5	;RP0=0, select bank0
 10090  01C9  1303               	bcf	3,6	;RP1=0, select bank0
 10091  01CA  00E3               	movwf	??_sprintf
 10092  01CB  3000               	movlw	0
 10093  01CC  1683               	bsf	3,5	;RP0=1, select bank1
 10094  01CD  1303               	bcf	3,6	;RP1=0, select bank1
 10095  01CE  0554               	andwf	(sprintf@flag+1)^(0+128),w
 10096  01CF  1283               	bcf	3,5	;RP0=0, select bank0
 10097  01D0  1303               	bcf	3,6	;RP1=0, select bank0
 10098  01D1  00E4               	movwf	??_sprintf+1
 10099  01D2  0863               	movf	??_sprintf,w
 10100  01D3  0464               	iorwf	??_sprintf+1,w
 10101  01D4  1903               	btfsc	3,2
 10102  01D5  29D7               	goto	u5711
 10103  01D6  29D8               	goto	u5710
 10104  01D7                     u5711:
 10105  01D7  29F5               	goto	l4018
 10106  01D8                     u5710:
 10107  01D8                     l4010:
 10108                           
 10109                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1176:      width-
      +                          -;
 10110  01D8  30FF               	movlw	255
 10111  01D9  1683               	bsf	3,5	;RP0=1, select bank1
 10112  01DA  1303               	bcf	3,6	;RP1=0, select bank1
 10113  01DB  07D5               	addwf	sprintf@width^(0+128),f
 10114  01DC  1803               	skipnc
 10115  01DD  0AD6               	incf	(sprintf@width+1)^(0+128),f
 10116  01DE  30FF               	movlw	255
 10117  01DF  07D6               	addwf	(sprintf@width+1)^(0+128),f
 10118  01E0  29F5               	goto	l4018
 10119  01E1                     l4012:
 10120                           
 10121                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1207:       ((*sp
      +                          ++ = (' ')));
 10122  01E1  3020               	movlw	32
 10123  01E2  1283               	bcf	3,5	;RP0=0, select bank0
 10124  01E3  1303               	bcf	3,6	;RP1=0, select bank0
 10125  01E4  00E3               	movwf	??_sprintf
 10126  01E5  1683               	bsf	3,5	;RP0=1, select bank1
 10127  01E6  1303               	bcf	3,6	;RP1=0, select bank1
 10128  01E7  0864               	movf	sprintf@sp^(0+128),w
 10129  01E8  0084               	movwf	4
 10130  01E9  1283               	bcf	3,5	;RP0=0, select bank0
 10131  01EA  1303               	bcf	3,6	;RP1=0, select bank0
 10132  01EB  0863               	movf	??_sprintf,w
 10133  01EC  1383               	bcf	3,7	;select IRP bank0
 10134  01ED  0080               	movwf	0
 10135  01EE                     l4014:
 10136  01EE  3001               	movlw	1
 10137  01EF  00E3               	movwf	??_sprintf
 10138  01F0  0863               	movf	??_sprintf,w
 10139  01F1  1683               	bsf	3,5	;RP0=1, select bank1
 10140  01F2  1303               	bcf	3,6	;RP1=0, select bank1
 10141  01F3  07E4               	addwf	sprintf@sp^(0+128),f
 10142  01F4  29D8               	goto	l4010
 10143  01F5                     l4018:
 10144                           
 10145                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1206:      while(
      +                          width > 0) {
 10146  01F5  1683               	bsf	3,5	;RP0=1, select bank1
 10147  01F6  1303               	bcf	3,6	;RP1=0, select bank1
 10148  01F7  0856               	movf	(sprintf@width+1)^(0+128),w
 10149  01F8  3A80               	xorlw	128
 10150  01F9  00FF               	movwf	btemp+1
 10151  01FA  3080               	movlw	128
 10152  01FB  027F               	subwf	btemp+1,w
 10153  01FC  1D03               	skipz
 10154  01FD  2A00               	goto	u5725
 10155  01FE  3001               	movlw	1
 10156  01FF  0255               	subwf	sprintf@width^(0+128),w
 10157  0200                     u5725:
 10158  0200  1803               	skipnc
 10159  0201  2A03               	goto	u5721
 10160  0202  2A04               	goto	u5720
 10161  0203                     u5721:
 10162  0203  29E1               	goto	l4012
 10163  0204                     u5720:
 10164  0204                     l4020:
 10165                           
 10166                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1214:     if(flag
      +                           & 0x03)
 10167  0204  3003               	movlw	3
 10168  0205  1683               	bsf	3,5	;RP0=1, select bank1
 10169  0206  1303               	bcf	3,6	;RP1=0, select bank1
 10170  0207  0553               	andwf	sprintf@flag^(0+128),w
 10171  0208  1283               	bcf	3,5	;RP0=0, select bank0
 10172  0209  1303               	bcf	3,6	;RP1=0, select bank0
 10173  020A  00E3               	movwf	??_sprintf
 10174  020B  3000               	movlw	0
 10175  020C  1683               	bsf	3,5	;RP0=1, select bank1
 10176  020D  1303               	bcf	3,6	;RP1=0, select bank1
 10177  020E  0554               	andwf	(sprintf@flag+1)^(0+128),w
 10178  020F  1283               	bcf	3,5	;RP0=0, select bank0
 10179  0210  1303               	bcf	3,6	;RP1=0, select bank0
 10180  0211  00E4               	movwf	??_sprintf+1
 10181  0212  0863               	movf	??_sprintf,w
 10182  0213  0464               	iorwf	??_sprintf+1,w
 10183  0214  1903               	btfsc	3,2
 10184  0215  2A17               	goto	u5731
 10185  0216  2A18               	goto	u5730
 10186  0217                     u5731:
 10187  0217  2ABC               	goto	l441
 10188  0218                     u5730:
 10189  0218                     l4022:
 10190                           
 10191                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1216:      ((*sp+
      +                          + = ('-')));
 10192  0218  302D               	movlw	45
 10193  0219  00E3               	movwf	??_sprintf
 10194  021A  1683               	bsf	3,5	;RP0=1, select bank1
 10195  021B  1303               	bcf	3,6	;RP1=0, select bank1
 10196  021C  0864               	movf	sprintf@sp^(0+128),w
 10197  021D  0084               	movwf	4
 10198  021E  1283               	bcf	3,5	;RP0=0, select bank0
 10199  021F  1303               	bcf	3,6	;RP1=0, select bank0
 10200  0220  0863               	movf	??_sprintf,w
 10201  0221  1383               	bcf	3,7	;select IRP bank0
 10202  0222  0080               	movwf	0
 10203  0223                     l4024:
 10204  0223  3001               	movlw	1
 10205  0224  00E3               	movwf	??_sprintf
 10206  0225  0863               	movf	??_sprintf,w
 10207  0226  1683               	bsf	3,5	;RP0=1, select bank1
 10208  0227  1303               	bcf	3,6	;RP1=0, select bank1
 10209  0228  07E4               	addwf	sprintf@sp^(0+128),f
 10210  0229  2ABC               	goto	l441
 10211  022A                     l4026:
 10212                           
 10213                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1226:     {;C:\Pr
      +                          ogram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1227:      tmpval.vd = 
      +                          val/dpowers[c];
 10214  022A  0867               	movf	sprintf@c^(0+128),w
 10215  022B  1283               	bcf	3,5	;RP0=0, select bank0
 10216  022C  1303               	bcf	3,6	;RP1=0, select bank0
 10217  022D  00E3               	movwf	??_sprintf
 10218  022E  3001               	movlw	1
 10219  022F                     u5745:
 10220  022F  1003               	clrc
 10221  0230  0DE3               	rlf	??_sprintf,f
 10222  0231  3EFF               	addlw	-1
 10223  0232  1D03               	skipz
 10224  0233  2A2F               	goto	u5745
 10225  0234  1003               	clrc
 10226  0235  0D63               	rlf	??_sprintf,w
 10227  0236  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10228  0237  0084               	movwf	4
 10229  0238  160A  118A  200A  120A  118A  	fcall	stringdir
 10230  023D  00F2               	movwf	___lldiv@divisor
 10231  023E  160A  118A  200A  120A  118A  	fcall	stringdir
 10232  0243  00F3               	movwf	___lldiv@divisor+1
 10233  0244  160A  118A  200A  120A  118A  	fcall	stringdir
 10234  0249  00F4               	movwf	___lldiv@divisor+2
 10235  024A  160A  118A  200A  120A  118A  	fcall	stringdir
 10236  024F  00F5               	movwf	___lldiv@divisor+3
 10237  0250  1683               	bsf	3,5	;RP0=1, select bank1
 10238  0251  1303               	bcf	3,6	;RP1=0, select bank1
 10239  0252  085E               	movf	(sprintf@val+3)^(0+128),w
 10240  0253  00F9               	movwf	___lldiv@dividend+3
 10241  0254  085D               	movf	(sprintf@val+2)^(0+128),w
 10242  0255  00F8               	movwf	___lldiv@dividend+2
 10243  0256  085C               	movf	(sprintf@val+1)^(0+128),w
 10244  0257  00F7               	movwf	___lldiv@dividend+1
 10245  0258  085B               	movf	sprintf@val^(0+128),w
 10246  0259  00F6               	movwf	___lldiv@dividend
 10247  025A  160A  118A  2264  120A  118A  	fcall	___lldiv
 10248  025F  0875               	movf	?___lldiv+3,w
 10249  0260  1683               	bsf	3,5	;RP0=1, select bank1
 10250  0261  1303               	bcf	3,6	;RP1=0, select bank1
 10251  0262  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
 10252  0263  0874               	movf	?___lldiv+2,w
 10253  0264  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
 10254  0265  0873               	movf	?___lldiv+1,w
 10255  0266  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
 10256  0267  0872               	movf	?___lldiv,w
 10257  0268  00D7               	movwf	sprintf@tmpval^(0+128)
 10258  0269                     l4028:
 10259                           
 10260                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1228:      tmpval
      +                          .vd %= 10;
 10261  0269  3000               	movlw	0
 10262  026A  1283               	bcf	3,5	;RP0=0, select bank0
 10263  026B  1303               	bcf	3,6	;RP1=0, select bank0
 10264  026C  00A9               	movwf	___llmod@divisor+3
 10265  026D  3000               	movlw	0
 10266  026E  00A8               	movwf	___llmod@divisor+2
 10267  026F  3000               	movlw	0
 10268  0270  00A7               	movwf	___llmod@divisor+1
 10269  0271  300A               	movlw	10
 10270  0272  00A6               	movwf	___llmod@divisor
 10271  0273  1683               	bsf	3,5	;RP0=1, select bank1
 10272  0274  1303               	bcf	3,6	;RP1=0, select bank1
 10273  0275  085A               	movf	(sprintf@tmpval+3)^(0+128),w
 10274  0276  1283               	bcf	3,5	;RP0=0, select bank0
 10275  0277  1303               	bcf	3,6	;RP1=0, select bank0
 10276  0278  00AD               	movwf	___llmod@dividend+3
 10277  0279  1683               	bsf	3,5	;RP0=1, select bank1
 10278  027A  1303               	bcf	3,6	;RP1=0, select bank1
 10279  027B  0859               	movf	(sprintf@tmpval+2)^(0+128),w
 10280  027C  1283               	bcf	3,5	;RP0=0, select bank0
 10281  027D  1303               	bcf	3,6	;RP1=0, select bank0
 10282  027E  00AC               	movwf	___llmod@dividend+2
 10283  027F  1683               	bsf	3,5	;RP0=1, select bank1
 10284  0280  1303               	bcf	3,6	;RP1=0, select bank1
 10285  0281  0858               	movf	(sprintf@tmpval+1)^(0+128),w
 10286  0282  1283               	bcf	3,5	;RP0=0, select bank0
 10287  0283  1303               	bcf	3,6	;RP1=0, select bank0
 10288  0284  00AB               	movwf	___llmod@dividend+1
 10289  0285  1683               	bsf	3,5	;RP0=1, select bank1
 10290  0286  1303               	bcf	3,6	;RP1=0, select bank1
 10291  0287  0857               	movf	sprintf@tmpval^(0+128),w
 10292  0288  1283               	bcf	3,5	;RP0=0, select bank0
 10293  0289  1303               	bcf	3,6	;RP1=0, select bank0
 10294  028A  00AA               	movwf	___llmod@dividend
 10295  028B  160A  118A  20FB  120A  118A  	fcall	___llmod
 10296  0290  1283               	bcf	3,5	;RP0=0, select bank0
 10297  0291  1303               	bcf	3,6	;RP1=0, select bank0
 10298  0292  0829               	movf	?___llmod+3,w
 10299  0293  1683               	bsf	3,5	;RP0=1, select bank1
 10300  0294  1303               	bcf	3,6	;RP1=0, select bank1
 10301  0295  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
 10302  0296  1283               	bcf	3,5	;RP0=0, select bank0
 10303  0297  1303               	bcf	3,6	;RP1=0, select bank0
 10304  0298  0828               	movf	?___llmod+2,w
 10305  0299  1683               	bsf	3,5	;RP0=1, select bank1
 10306  029A  1303               	bcf	3,6	;RP1=0, select bank1
 10307  029B  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
 10308  029C  1283               	bcf	3,5	;RP0=0, select bank0
 10309  029D  1303               	bcf	3,6	;RP1=0, select bank0
 10310  029E  0827               	movf	?___llmod+1,w
 10311  029F  1683               	bsf	3,5	;RP0=1, select bank1
 10312  02A0  1303               	bcf	3,6	;RP1=0, select bank1
 10313  02A1  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
 10314  02A2  1283               	bcf	3,5	;RP0=0, select bank0
 10315  02A3  1303               	bcf	3,6	;RP1=0, select bank0
 10316  02A4  0826               	movf	?___llmod,w
 10317  02A5  1683               	bsf	3,5	;RP0=1, select bank1
 10318  02A6  1303               	bcf	3,6	;RP1=0, select bank1
 10319  02A7  00D7               	movwf	sprintf@tmpval^(0+128)
 10320  02A8                     l4030:
 10321                           
 10322                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1229:      ((*sp+
      +                          + = ('0' + tmpval.vd)));
 10323  02A8  0857               	movf	sprintf@tmpval^(0+128),w
 10324  02A9  3E30               	addlw	48
 10325  02AA  1283               	bcf	3,5	;RP0=0, select bank0
 10326  02AB  1303               	bcf	3,6	;RP1=0, select bank0
 10327  02AC  00E3               	movwf	??_sprintf
 10328  02AD  1683               	bsf	3,5	;RP0=1, select bank1
 10329  02AE  1303               	bcf	3,6	;RP1=0, select bank1
 10330  02AF  0864               	movf	sprintf@sp^(0+128),w
 10331  02B0  0084               	movwf	4
 10332  02B1  1283               	bcf	3,5	;RP0=0, select bank0
 10333  02B2  1303               	bcf	3,6	;RP1=0, select bank0
 10334  02B3  0863               	movf	??_sprintf,w
 10335  02B4  1383               	bcf	3,7	;select IRP bank0
 10336  02B5  0080               	movwf	0
 10337  02B6  3001               	movlw	1
 10338  02B7  00E3               	movwf	??_sprintf
 10339  02B8  0863               	movf	??_sprintf,w
 10340  02B9  1683               	bsf	3,5	;RP0=1, select bank1
 10341  02BA  1303               	bcf	3,6	;RP1=0, select bank1
 10342  02BB  07E4               	addwf	sprintf@sp^(0+128),f
 10343  02BC                     l441:	
 10344                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1230:     };C:\Pr
      +                          ogram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1232:    }
 10345                           
 10346                           
 10347                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1222:    while(c-
      +                          -) {
 10348  02BC  3001               	movlw	1
 10349  02BD  1683               	bsf	3,5	;RP0=1, select bank1
 10350  02BE  1303               	bcf	3,6	;RP1=0, select bank1
 10351  02BF  02E7               	subwf	sprintf@c^(0+128),f
 10352  02C0  0A67               	incf	sprintf@c^(0+128),w
 10353  02C1  1D03               	btfss	3,2
 10354  02C2  2AC4               	goto	u5751
 10355  02C3  2AC5               	goto	u5750
 10356  02C4                     u5751:
 10357  02C4  2A2A               	goto	l4026
 10358  02C5                     u5750:
 10359  02C5  2ADF               	goto	l4038
 10360  02C6                     l4032:
 10361                           
 10362                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1234:     ((*sp++
      +                           = ('0')));
 10363  02C6  3030               	movlw	48
 10364  02C7  1283               	bcf	3,5	;RP0=0, select bank0
 10365  02C8  1303               	bcf	3,6	;RP1=0, select bank0
 10366  02C9  00E3               	movwf	??_sprintf
 10367  02CA  1683               	bsf	3,5	;RP0=1, select bank1
 10368  02CB  1303               	bcf	3,6	;RP1=0, select bank1
 10369  02CC  0864               	movf	sprintf@sp^(0+128),w
 10370  02CD  0084               	movwf	4
 10371  02CE  1283               	bcf	3,5	;RP0=0, select bank0
 10372  02CF  1303               	bcf	3,6	;RP1=0, select bank0
 10373  02D0  0863               	movf	??_sprintf,w
 10374  02D1  1383               	bcf	3,7	;select IRP bank0
 10375  02D2  0080               	movwf	0
 10376  02D3                     l4034:
 10377  02D3  3001               	movlw	1
 10378  02D4  00E3               	movwf	??_sprintf
 10379  02D5  0863               	movf	??_sprintf,w
 10380  02D6  1683               	bsf	3,5	;RP0=1, select bank1
 10381  02D7  1303               	bcf	3,6	;RP1=0, select bank1
 10382  02D8  07E4               	addwf	sprintf@sp^(0+128),f
 10383  02D9                     l4036:
 10384                           
 10385                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1235:     eexp--;
 10386  02D9  30FF               	movlw	255
 10387  02DA  07DF               	addwf	sprintf@eexp^(0+128),f
 10388  02DB  1803               	skipnc
 10389  02DC  0AE0               	incf	(sprintf@eexp+1)^(0+128),f
 10390  02DD  30FF               	movlw	255
 10391  02DE  07E0               	addwf	(sprintf@eexp+1)^(0+128),f
 10392  02DF                     l4038:
 10393                           
 10394                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1233:    while(ee
      +                          xp > 0) {
 10395  02DF  0860               	movf	(sprintf@eexp+1)^(0+128),w
 10396  02E0  3A80               	xorlw	128
 10397  02E1  00FF               	movwf	btemp+1
 10398  02E2  3080               	movlw	128
 10399  02E3  027F               	subwf	btemp+1,w
 10400  02E4  1D03               	skipz
 10401  02E5  2AE8               	goto	u5765
 10402  02E6  3001               	movlw	1
 10403  02E7  025F               	subwf	sprintf@eexp^(0+128),w
 10404  02E8                     u5765:
 10405  02E8  1803               	skipnc
 10406  02E9  2AEB               	goto	u5761
 10407  02EA  2AEC               	goto	u5760
 10408  02EB                     u5761:
 10409  02EB  2AC6               	goto	l4032
 10410  02EC                     u5760:
 10411  02EC                     l4040:
 10412                           
 10413                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1237:    if(prec 
      +                          > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 10414  02EC  1683               	bsf	3,5	;RP0=1, select bank1
 10415  02ED  1303               	bcf	3,6	;RP1=0, select bank1
 10416  02EE  0866               	movf	(sprintf@prec+1)^(0+128),w
 10417  02EF  3A80               	xorlw	128
 10418  02F0  00FF               	movwf	btemp+1
 10419  02F1  3080               	movlw	128
 10420  02F2  027F               	subwf	btemp+1,w
 10421  02F3  1D03               	skipz
 10422  02F4  2AF7               	goto	u5775
 10423  02F5  3009               	movlw	9
 10424  02F6  0265               	subwf	sprintf@prec^(0+128),w
 10425  02F7                     u5775:
 10426  02F7  1C03               	skipc
 10427  02F8  2AFA               	goto	u5771
 10428  02F9  2AFB               	goto	u5770
 10429  02FA                     u5771:
 10430  02FA  2B04               	goto	l4044
 10431  02FB                     u5770:
 10432  02FB                     l4042:
 10433                           
 10434                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1238:     c = (si
      +                          zeof dpowers/sizeof dpowers[0])-2;
 10435  02FB  3008               	movlw	8
 10436  02FC  1283               	bcf	3,5	;RP0=0, select bank0
 10437  02FD  1303               	bcf	3,6	;RP1=0, select bank0
 10438  02FE  00E3               	movwf	??_sprintf
 10439  02FF  0863               	movf	??_sprintf,w
 10440  0300  1683               	bsf	3,5	;RP0=1, select bank1
 10441  0301  1303               	bcf	3,6	;RP1=0, select bank1
 10442  0302  00E7               	movwf	sprintf@c^(0+128)
 10443  0303  2B0E               	goto	l448
 10444  0304                     l4044:
 10445                           
 10446                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1240:     c = (ch
      +                          ar)prec;
 10447  0304  1683               	bsf	3,5	;RP0=1, select bank1
 10448  0305  1303               	bcf	3,6	;RP1=0, select bank1
 10449  0306  0865               	movf	sprintf@prec^(0+128),w
 10450  0307  1283               	bcf	3,5	;RP0=0, select bank0
 10451  0308  1303               	bcf	3,6	;RP1=0, select bank0
 10452  0309  00E3               	movwf	??_sprintf
 10453  030A  0863               	movf	??_sprintf,w
 10454  030B  1683               	bsf	3,5	;RP0=1, select bank1
 10455  030C  1303               	bcf	3,6	;RP1=0, select bank1
 10456  030D  00E7               	movwf	sprintf@c^(0+128)
 10457  030E                     l448:
 10458                           
 10459                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1241:    prec -= 
      +                          (int)c;
 10460  030E  0867               	movf	sprintf@c^(0+128),w
 10461  030F  1283               	bcf	3,5	;RP0=0, select bank0
 10462  0310  1303               	bcf	3,6	;RP1=0, select bank0
 10463  0311  00E3               	movwf	??_sprintf
 10464  0312  01E4               	clrf	??_sprintf+1
 10465  0313  0863               	movf	??_sprintf,w
 10466  0314  1683               	bsf	3,5	;RP0=1, select bank1
 10467  0315  1303               	bcf	3,6	;RP1=0, select bank1
 10468  0316  02E5               	subwf	sprintf@prec^(0+128),f
 10469  0317  1283               	bcf	3,5	;RP0=0, select bank0
 10470  0318  1303               	bcf	3,6	;RP1=0, select bank0
 10471  0319  0864               	movf	??_sprintf+1,w
 10472  031A  1683               	bsf	3,5	;RP0=1, select bank1
 10473  031B  1303               	bcf	3,6	;RP1=0, select bank1
 10474  031C  1C03               	skipc
 10475  031D  03E6               	decf	(sprintf@prec+1)^(0+128),f
 10476  031E  02E6               	subwf	(sprintf@prec+1)^(0+128),f
 10477  031F                     l4046:
 10478                           
 10479                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1245:    if(c)
 10480  031F  0867               	movf	sprintf@c^(0+128),w
 10481  0320  1903               	btfsc	3,2
 10482  0321  2B23               	goto	u5781
 10483  0322  2B24               	goto	u5780
 10484  0323                     u5781:
 10485  0323  2B37               	goto	l4052
 10486  0324                     u5780:
 10487  0324                     l4048:
 10488                           
 10489                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1247:     ((*sp++
      +                           = ('.')));
 10490  0324  302E               	movlw	46
 10491  0325  1283               	bcf	3,5	;RP0=0, select bank0
 10492  0326  1303               	bcf	3,6	;RP1=0, select bank0
 10493  0327  00E3               	movwf	??_sprintf
 10494  0328  1683               	bsf	3,5	;RP0=1, select bank1
 10495  0329  1303               	bcf	3,6	;RP1=0, select bank1
 10496  032A  0864               	movf	sprintf@sp^(0+128),w
 10497  032B  0084               	movwf	4
 10498  032C  1283               	bcf	3,5	;RP0=0, select bank0
 10499  032D  1303               	bcf	3,6	;RP1=0, select bank0
 10500  032E  0863               	movf	??_sprintf,w
 10501  032F  1383               	bcf	3,7	;select IRP bank0
 10502  0330  0080               	movwf	0
 10503  0331                     l4050:
 10504  0331  3001               	movlw	1
 10505  0332  00E3               	movwf	??_sprintf
 10506  0333  0863               	movf	??_sprintf,w
 10507  0334  1683               	bsf	3,5	;RP0=1, select bank1
 10508  0335  1303               	bcf	3,6	;RP1=0, select bank1
 10509  0336  07E4               	addwf	sprintf@sp^(0+128),f
 10510  0337                     l4052:
 10511                           
 10512                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
 10513  0337  0867               	movf	sprintf@c^(0+128),w
 10514  0338  120A  158A  225D  120A  118A  	fcall	_scale
 10515  033D  1283               	bcf	3,5	;RP0=0, select bank0
 10516  033E  1303               	bcf	3,6	;RP1=0, select bank0
 10517  033F  083C               	movf	?_scale,w
 10518  0340  1683               	bsf	3,5	;RP0=1, select bank1
 10519  0341  1303               	bcf	3,6	;RP1=0, select bank1
 10520  0342  00CF               	movwf	_sprintf$1241^(0+128)
 10521  0343  1283               	bcf	3,5	;RP0=0, select bank0
 10522  0344  1303               	bcf	3,6	;RP1=0, select bank0
 10523  0345  083D               	movf	?_scale+1,w
 10524  0346  1683               	bsf	3,5	;RP0=1, select bank1
 10525  0347  1303               	bcf	3,6	;RP1=0, select bank1
 10526  0348  00D0               	movwf	(_sprintf$1241+1)^(0+128)
 10527  0349  1283               	bcf	3,5	;RP0=0, select bank0
 10528  034A  1303               	bcf	3,6	;RP1=0, select bank0
 10529  034B  083E               	movf	?_scale+2,w
 10530  034C  1683               	bsf	3,5	;RP0=1, select bank1
 10531  034D  1303               	bcf	3,6	;RP1=0, select bank1
 10532  034E  00D1               	movwf	(_sprintf$1241+2)^(0+128)
 10533  034F                     l4054:
 10534                           
 10535                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1253:    val = (u
      +                          nsigned long)(fval * scale((signed char)c));
 10536  034F  084F               	movf	_sprintf$1241^(0+128),w
 10537  0350  1283               	bcf	3,5	;RP0=0, select bank0
 10538  0351  1303               	bcf	3,6	;RP1=0, select bank0
 10539  0352  00AF               	movwf	___ftmul@f2
 10540  0353  1683               	bsf	3,5	;RP0=1, select bank1
 10541  0354  1303               	bcf	3,6	;RP1=0, select bank1
 10542  0355  0850               	movf	(_sprintf$1241+1)^(0+128),w
 10543  0356  1283               	bcf	3,5	;RP0=0, select bank0
 10544  0357  1303               	bcf	3,6	;RP1=0, select bank0
 10545  0358  00B0               	movwf	___ftmul@f2+1
 10546  0359  1683               	bsf	3,5	;RP0=1, select bank1
 10547  035A  1303               	bcf	3,6	;RP1=0, select bank1
 10548  035B  0851               	movf	(_sprintf$1241+2)^(0+128),w
 10549  035C  1283               	bcf	3,5	;RP0=0, select bank0
 10550  035D  1303               	bcf	3,6	;RP1=0, select bank0
 10551  035E  00B1               	movwf	___ftmul@f2+2
 10552  035F  1683               	bsf	3,5	;RP0=1, select bank1
 10553  0360  1303               	bcf	3,6	;RP1=0, select bank1
 10554  0361  0861               	movf	sprintf@fval^(0+128),w
 10555  0362  1283               	bcf	3,5	;RP0=0, select bank0
 10556  0363  1303               	bcf	3,6	;RP1=0, select bank0
 10557  0364  00AC               	movwf	___ftmul@f1
 10558  0365  1683               	bsf	3,5	;RP0=1, select bank1
 10559  0366  1303               	bcf	3,6	;RP1=0, select bank1
 10560  0367  0862               	movf	(sprintf@fval+1)^(0+128),w
 10561  0368  1283               	bcf	3,5	;RP0=0, select bank0
 10562  0369  1303               	bcf	3,6	;RP1=0, select bank0
 10563  036A  00AD               	movwf	___ftmul@f1+1
 10564  036B  1683               	bsf	3,5	;RP0=1, select bank1
 10565  036C  1303               	bcf	3,6	;RP1=0, select bank1
 10566  036D  0863               	movf	(sprintf@fval+2)^(0+128),w
 10567  036E  1283               	bcf	3,5	;RP0=0, select bank0
 10568  036F  1303               	bcf	3,6	;RP1=0, select bank0
 10569  0370  00AE               	movwf	___ftmul@f1+2
 10570  0371  120A  118A  26D8  120A  118A  	fcall	___ftmul
 10571  0376  1283               	bcf	3,5	;RP0=0, select bank0
 10572  0377  1303               	bcf	3,6	;RP1=0, select bank0
 10573  0378  082C               	movf	?___ftmul,w
 10574  0379  00C5               	movwf	___fttol@f1
 10575  037A  082D               	movf	?___ftmul+1,w
 10576  037B  00C6               	movwf	___fttol@f1+1
 10577  037C  082E               	movf	?___ftmul+2,w
 10578  037D  00C7               	movwf	___fttol@f1+2
 10579  037E  120A  158A  2028  120A  118A  	fcall	___fttol
 10580  0383  1283               	bcf	3,5	;RP0=0, select bank0
 10581  0384  1303               	bcf	3,6	;RP1=0, select bank0
 10582  0385  0848               	movf	?___fttol+3,w
 10583  0386  1683               	bsf	3,5	;RP0=1, select bank1
 10584  0387  1303               	bcf	3,6	;RP1=0, select bank1
 10585  0388  00DE               	movwf	(sprintf@val+3)^(0+128)
 10586  0389  1283               	bcf	3,5	;RP0=0, select bank0
 10587  038A  1303               	bcf	3,6	;RP1=0, select bank0
 10588  038B  0847               	movf	?___fttol+2,w
 10589  038C  1683               	bsf	3,5	;RP0=1, select bank1
 10590  038D  1303               	bcf	3,6	;RP1=0, select bank1
 10591  038E  00DD               	movwf	(sprintf@val+2)^(0+128)
 10592  038F  1283               	bcf	3,5	;RP0=0, select bank0
 10593  0390  1303               	bcf	3,6	;RP1=0, select bank0
 10594  0391  0846               	movf	?___fttol+1,w
 10595  0392  1683               	bsf	3,5	;RP0=1, select bank1
 10596  0393  1303               	bcf	3,6	;RP1=0, select bank1
 10597  0394  00DC               	movwf	(sprintf@val+1)^(0+128)
 10598  0395  1283               	bcf	3,5	;RP0=0, select bank0
 10599  0396  1303               	bcf	3,6	;RP1=0, select bank0
 10600  0397  0845               	movf	?___fttol,w
 10601  0398  1683               	bsf	3,5	;RP0=1, select bank1
 10602  0399  1303               	bcf	3,6	;RP1=0, select bank1
 10603  039A  00DB               	movwf	sprintf@val^(0+128)
 10604                           
 10605                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
 10606  039B  2C89               	goto	l4064
 10607  039C                     l4056:
 10608                           
 10609                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1255:     tmpval.
      +                          vd = val/dpowers[c];
 10610  039C  0867               	movf	sprintf@c^(0+128),w
 10611  039D  1283               	bcf	3,5	;RP0=0, select bank0
 10612  039E  1303               	bcf	3,6	;RP1=0, select bank0
 10613  039F  00E3               	movwf	??_sprintf
 10614  03A0  3001               	movlw	1
 10615  03A1                     u5795:
 10616  03A1  1003               	clrc
 10617  03A2  0DE3               	rlf	??_sprintf,f
 10618  03A3  3EFF               	addlw	-1
 10619  03A4  1D03               	skipz
 10620  03A5  2BA1               	goto	u5795
 10621  03A6  1003               	clrc
 10622  03A7  0D63               	rlf	??_sprintf,w
 10623  03A8  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10624  03A9  0084               	movwf	4
 10625  03AA  160A  118A  200A  120A  118A  	fcall	stringdir
 10626  03AF  00F2               	movwf	___lldiv@divisor
 10627  03B0  160A  118A  200A  120A  118A  	fcall	stringdir
 10628  03B5  00F3               	movwf	___lldiv@divisor+1
 10629  03B6  160A  118A  200A  120A  118A  	fcall	stringdir
 10630  03BB  00F4               	movwf	___lldiv@divisor+2
 10631  03BC  160A  118A  200A  120A  118A  	fcall	stringdir
 10632  03C1  00F5               	movwf	___lldiv@divisor+3
 10633  03C2  1683               	bsf	3,5	;RP0=1, select bank1
 10634  03C3  1303               	bcf	3,6	;RP1=0, select bank1
 10635  03C4  085E               	movf	(sprintf@val+3)^(0+128),w
 10636  03C5  00F9               	movwf	___lldiv@dividend+3
 10637  03C6  085D               	movf	(sprintf@val+2)^(0+128),w
 10638  03C7  00F8               	movwf	___lldiv@dividend+2
 10639  03C8  085C               	movf	(sprintf@val+1)^(0+128),w
 10640  03C9  00F7               	movwf	___lldiv@dividend+1
 10641  03CA  085B               	movf	sprintf@val^(0+128),w
 10642  03CB  00F6               	movwf	___lldiv@dividend
 10643  03CC  160A  118A  2264  120A  118A  	fcall	___lldiv
 10644  03D1  0875               	movf	?___lldiv+3,w
 10645  03D2  1683               	bsf	3,5	;RP0=1, select bank1
 10646  03D3  1303               	bcf	3,6	;RP1=0, select bank1
 10647  03D4  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
 10648  03D5  0874               	movf	?___lldiv+2,w
 10649  03D6  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
 10650  03D7  0873               	movf	?___lldiv+1,w
 10651  03D8  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
 10652  03D9  0872               	movf	?___lldiv,w
 10653  03DA  00D7               	movwf	sprintf@tmpval^(0+128)
 10654  03DB                     l4058:
 10655                           
 10656                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1256:     tmpval.
      +                          vd %= 10;
 10657  03DB  3000               	movlw	0
 10658  03DC  1283               	bcf	3,5	;RP0=0, select bank0
 10659  03DD  1303               	bcf	3,6	;RP1=0, select bank0
 10660  03DE  00A9               	movwf	___llmod@divisor+3
 10661  03DF  3000               	movlw	0
 10662  03E0  00A8               	movwf	___llmod@divisor+2
 10663  03E1  3000               	movlw	0
 10664  03E2  00A7               	movwf	___llmod@divisor+1
 10665  03E3  300A               	movlw	10
 10666  03E4  00A6               	movwf	___llmod@divisor
 10667  03E5  1683               	bsf	3,5	;RP0=1, select bank1
 10668  03E6  1303               	bcf	3,6	;RP1=0, select bank1
 10669  03E7  085A               	movf	(sprintf@tmpval+3)^(0+128),w
 10670  03E8  1283               	bcf	3,5	;RP0=0, select bank0
 10671  03E9  1303               	bcf	3,6	;RP1=0, select bank0
 10672  03EA  00AD               	movwf	___llmod@dividend+3
 10673  03EB  1683               	bsf	3,5	;RP0=1, select bank1
 10674  03EC  1303               	bcf	3,6	;RP1=0, select bank1
 10675  03ED  0859               	movf	(sprintf@tmpval+2)^(0+128),w
 10676  03EE  1283               	bcf	3,5	;RP0=0, select bank0
 10677  03EF  1303               	bcf	3,6	;RP1=0, select bank0
 10678  03F0  00AC               	movwf	___llmod@dividend+2
 10679  03F1  1683               	bsf	3,5	;RP0=1, select bank1
 10680  03F2  1303               	bcf	3,6	;RP1=0, select bank1
 10681  03F3  0858               	movf	(sprintf@tmpval+1)^(0+128),w
 10682  03F4  1283               	bcf	3,5	;RP0=0, select bank0
 10683  03F5  1303               	bcf	3,6	;RP1=0, select bank0
 10684  03F6  00AB               	movwf	___llmod@dividend+1
 10685  03F7  1683               	bsf	3,5	;RP0=1, select bank1
 10686  03F8  1303               	bcf	3,6	;RP1=0, select bank1
 10687  03F9  0857               	movf	sprintf@tmpval^(0+128),w
 10688  03FA  1283               	bcf	3,5	;RP0=0, select bank0
 10689  03FB  1303               	bcf	3,6	;RP1=0, select bank0
 10690  03FC  00AA               	movwf	___llmod@dividend
 10691  03FD  160A  118A  20FB  120A  118A  	fcall	___llmod
 10692  0402  1283               	bcf	3,5	;RP0=0, select bank0
 10693  0403  1303               	bcf	3,6	;RP1=0, select bank0
 10694  0404  0829               	movf	?___llmod+3,w
 10695  0405  1683               	bsf	3,5	;RP0=1, select bank1
 10696  0406  1303               	bcf	3,6	;RP1=0, select bank1
 10697  0407  00DA               	movwf	(sprintf@tmpval+3)^(0+128)
 10698  0408  1283               	bcf	3,5	;RP0=0, select bank0
 10699  0409  1303               	bcf	3,6	;RP1=0, select bank0
 10700  040A  0828               	movf	?___llmod+2,w
 10701  040B  1683               	bsf	3,5	;RP0=1, select bank1
 10702  040C  1303               	bcf	3,6	;RP1=0, select bank1
 10703  040D  00D9               	movwf	(sprintf@tmpval+2)^(0+128)
 10704  040E  1283               	bcf	3,5	;RP0=0, select bank0
 10705  040F  1303               	bcf	3,6	;RP1=0, select bank0
 10706  0410  0827               	movf	?___llmod+1,w
 10707  0411  1683               	bsf	3,5	;RP0=1, select bank1
 10708  0412  1303               	bcf	3,6	;RP1=0, select bank1
 10709  0413  00D8               	movwf	(sprintf@tmpval+1)^(0+128)
 10710  0414  1283               	bcf	3,5	;RP0=0, select bank0
 10711  0415  1303               	bcf	3,6	;RP1=0, select bank0
 10712  0416  0826               	movf	?___llmod,w
 10713  0417  1683               	bsf	3,5	;RP0=1, select bank1
 10714  0418  1303               	bcf	3,6	;RP1=0, select bank1
 10715  0419  00D7               	movwf	sprintf@tmpval^(0+128)
 10716  041A                     l4060:
 10717                           
 10718                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1257:     ((*sp++
      +                           = ('0' + tmpval.vd)));
 10719  041A  0857               	movf	sprintf@tmpval^(0+128),w
 10720  041B  3E30               	addlw	48
 10721  041C  1283               	bcf	3,5	;RP0=0, select bank0
 10722  041D  1303               	bcf	3,6	;RP1=0, select bank0
 10723  041E  00E3               	movwf	??_sprintf
 10724  041F  1683               	bsf	3,5	;RP0=1, select bank1
 10725  0420  1303               	bcf	3,6	;RP1=0, select bank1
 10726  0421  0864               	movf	sprintf@sp^(0+128),w
 10727  0422  0084               	movwf	4
 10728  0423  1283               	bcf	3,5	;RP0=0, select bank0
 10729  0424  1303               	bcf	3,6	;RP1=0, select bank0
 10730  0425  0863               	movf	??_sprintf,w
 10731  0426  1383               	bcf	3,7	;select IRP bank0
 10732  0427  0080               	movwf	0
 10733  0428  3001               	movlw	1
 10734  0429  00E3               	movwf	??_sprintf
 10735  042A  0863               	movf	??_sprintf,w
 10736  042B  1683               	bsf	3,5	;RP0=1, select bank1
 10737  042C  1303               	bcf	3,6	;RP1=0, select bank1
 10738  042D  07E4               	addwf	sprintf@sp^(0+128),f
 10739  042E                     l4062:
 10740                           
 10741                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1258:     val %= 
      +                          dpowers[c];
 10742  042E  0867               	movf	sprintf@c^(0+128),w
 10743  042F  1283               	bcf	3,5	;RP0=0, select bank0
 10744  0430  1303               	bcf	3,6	;RP1=0, select bank0
 10745  0431  00E3               	movwf	??_sprintf
 10746  0432  3001               	movlw	1
 10747  0433                     u5805:
 10748  0433  1003               	clrc
 10749  0434  0DE3               	rlf	??_sprintf,f
 10750  0435  3EFF               	addlw	-1
 10751  0436  1D03               	skipz
 10752  0437  2C33               	goto	u5805
 10753  0438  1003               	clrc
 10754  0439  0D63               	rlf	??_sprintf,w
 10755  043A  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10756  043B  0084               	movwf	4
 10757  043C  160A  118A  200A  120A  118A  	fcall	stringdir
 10758  0441  00A6               	movwf	___llmod@divisor
 10759  0442  160A  118A  200A  120A  118A  	fcall	stringdir
 10760  0447  00A7               	movwf	___llmod@divisor+1
 10761  0448  160A  118A  200A  120A  118A  	fcall	stringdir
 10762  044D  00A8               	movwf	___llmod@divisor+2
 10763  044E  160A  118A  200A  120A  118A  	fcall	stringdir
 10764  0453  00A9               	movwf	___llmod@divisor+3
 10765  0454  1683               	bsf	3,5	;RP0=1, select bank1
 10766  0455  1303               	bcf	3,6	;RP1=0, select bank1
 10767  0456  085E               	movf	(sprintf@val+3)^(0+128),w
 10768  0457  1283               	bcf	3,5	;RP0=0, select bank0
 10769  0458  1303               	bcf	3,6	;RP1=0, select bank0
 10770  0459  00AD               	movwf	___llmod@dividend+3
 10771  045A  1683               	bsf	3,5	;RP0=1, select bank1
 10772  045B  1303               	bcf	3,6	;RP1=0, select bank1
 10773  045C  085D               	movf	(sprintf@val+2)^(0+128),w
 10774  045D  1283               	bcf	3,5	;RP0=0, select bank0
 10775  045E  1303               	bcf	3,6	;RP1=0, select bank0
 10776  045F  00AC               	movwf	___llmod@dividend+2
 10777  0460  1683               	bsf	3,5	;RP0=1, select bank1
 10778  0461  1303               	bcf	3,6	;RP1=0, select bank1
 10779  0462  085C               	movf	(sprintf@val+1)^(0+128),w
 10780  0463  1283               	bcf	3,5	;RP0=0, select bank0
 10781  0464  1303               	bcf	3,6	;RP1=0, select bank0
 10782  0465  00AB               	movwf	___llmod@dividend+1
 10783  0466  1683               	bsf	3,5	;RP0=1, select bank1
 10784  0467  1303               	bcf	3,6	;RP1=0, select bank1
 10785  0468  085B               	movf	sprintf@val^(0+128),w
 10786  0469  1283               	bcf	3,5	;RP0=0, select bank0
 10787  046A  1303               	bcf	3,6	;RP1=0, select bank0
 10788  046B  00AA               	movwf	___llmod@dividend
 10789  046C  160A  118A  20FB  120A  118A  	fcall	___llmod
 10790  0471  1283               	bcf	3,5	;RP0=0, select bank0
 10791  0472  1303               	bcf	3,6	;RP1=0, select bank0
 10792  0473  0829               	movf	?___llmod+3,w
 10793  0474  1683               	bsf	3,5	;RP0=1, select bank1
 10794  0475  1303               	bcf	3,6	;RP1=0, select bank1
 10795  0476  00DE               	movwf	(sprintf@val+3)^(0+128)
 10796  0477  1283               	bcf	3,5	;RP0=0, select bank0
 10797  0478  1303               	bcf	3,6	;RP1=0, select bank0
 10798  0479  0828               	movf	?___llmod+2,w
 10799  047A  1683               	bsf	3,5	;RP0=1, select bank1
 10800  047B  1303               	bcf	3,6	;RP1=0, select bank1
 10801  047C  00DD               	movwf	(sprintf@val+2)^(0+128)
 10802  047D  1283               	bcf	3,5	;RP0=0, select bank0
 10803  047E  1303               	bcf	3,6	;RP1=0, select bank0
 10804  047F  0827               	movf	?___llmod+1,w
 10805  0480  1683               	bsf	3,5	;RP0=1, select bank1
 10806  0481  1303               	bcf	3,6	;RP1=0, select bank1
 10807  0482  00DC               	movwf	(sprintf@val+1)^(0+128)
 10808  0483  1283               	bcf	3,5	;RP0=0, select bank0
 10809  0484  1303               	bcf	3,6	;RP1=0, select bank0
 10810  0485  0826               	movf	?___llmod,w
 10811  0486  1683               	bsf	3,5	;RP0=1, select bank1
 10812  0487  1303               	bcf	3,6	;RP1=0, select bank1
 10813  0488  00DB               	movwf	sprintf@val^(0+128)
 10814  0489                     l4064:
 10815                           
 10816                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1254:    while(c-
      +                          -) {
 10817  0489  3001               	movlw	1
 10818  048A  02E7               	subwf	sprintf@c^(0+128),f
 10819  048B  0A67               	incf	sprintf@c^(0+128),w
 10820  048C  1D03               	btfss	3,2
 10821  048D  2C8F               	goto	u5811
 10822  048E  2C90               	goto	u5810
 10823  048F                     u5811:
 10824  048F  2B9C               	goto	l4056
 10825  0490                     u5810:
 10826  0490  2CAA               	goto	l4072
 10827  0491                     l4066:
 10828                           
 10829                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1262:     ((*sp++
      +                           = ('0')));
 10830  0491  3030               	movlw	48
 10831  0492  1283               	bcf	3,5	;RP0=0, select bank0
 10832  0493  1303               	bcf	3,6	;RP1=0, select bank0
 10833  0494  00E3               	movwf	??_sprintf
 10834  0495  1683               	bsf	3,5	;RP0=1, select bank1
 10835  0496  1303               	bcf	3,6	;RP1=0, select bank1
 10836  0497  0864               	movf	sprintf@sp^(0+128),w
 10837  0498  0084               	movwf	4
 10838  0499  1283               	bcf	3,5	;RP0=0, select bank0
 10839  049A  1303               	bcf	3,6	;RP1=0, select bank0
 10840  049B  0863               	movf	??_sprintf,w
 10841  049C  1383               	bcf	3,7	;select IRP bank0
 10842  049D  0080               	movwf	0
 10843  049E                     l4068:
 10844  049E  3001               	movlw	1
 10845  049F  00E3               	movwf	??_sprintf
 10846  04A0  0863               	movf	??_sprintf,w
 10847  04A1  1683               	bsf	3,5	;RP0=1, select bank1
 10848  04A2  1303               	bcf	3,6	;RP1=0, select bank1
 10849  04A3  07E4               	addwf	sprintf@sp^(0+128),f
 10850  04A4                     l4070:
 10851                           
 10852                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1263:     prec--;
 10853  04A4  30FF               	movlw	255
 10854  04A5  07E5               	addwf	sprintf@prec^(0+128),f
 10855  04A6  1803               	skipnc
 10856  04A7  0AE6               	incf	(sprintf@prec+1)^(0+128),f
 10857  04A8  30FF               	movlw	255
 10858  04A9  07E6               	addwf	(sprintf@prec+1)^(0+128),f
 10859  04AA                     l4072:
 10860                           
 10861                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1261:    while(pr
      +                          ec) {
 10862  04AA  0865               	movf	sprintf@prec^(0+128),w
 10863  04AB  0466               	iorwf	(sprintf@prec+1)^(0+128),w
 10864  04AC  1D03               	btfss	3,2
 10865  04AD  2CAF               	goto	u5821
 10866  04AE  2CB0               	goto	u5820
 10867  04AF                     u5821:
 10868  04AF  2C91               	goto	l4066
 10869  04B0                     u5820:
 10870  04B0  2EBA               	goto	l4152
 10871  04B1                     l4074:
 10872                           
 10873                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           long)(*(int *)__va_arg((*(int **)ap), (int)0));
 10874  04B1  1683               	bsf	3,5	;RP0=1, select bank1
 10875  04B2  1303               	bcf	3,6	;RP1=0, select bank1
 10876  04B3  0852               	movf	sprintf@ap^(0+128),w
 10877  04B4  0084               	movwf	4
 10878  04B5  1383               	bcf	3,7	;select IRP bank0
 10879  04B6  0800               	movf	0,w
 10880  04B7  1283               	bcf	3,5	;RP0=0, select bank0
 10881  04B8  1303               	bcf	3,6	;RP1=0, select bank0
 10882  04B9  00E3               	movwf	??_sprintf
 10883  04BA  0A84               	incf	4,f
 10884  04BB  0800               	movf	0,w
 10885  04BC  00E4               	movwf	??_sprintf+1
 10886  04BD  0863               	movf	??_sprintf,w
 10887  04BE  1683               	bsf	3,5	;RP0=1, select bank1
 10888  04BF  1303               	bcf	3,6	;RP1=0, select bank1
 10889  04C0  00DB               	movwf	sprintf@val^(0+128)
 10890  04C1  1283               	bcf	3,5	;RP0=0, select bank0
 10891  04C2  1303               	bcf	3,6	;RP1=0, select bank0
 10892  04C3  0864               	movf	??_sprintf+1,w
 10893  04C4  1683               	bsf	3,5	;RP0=1, select bank1
 10894  04C5  1303               	bcf	3,6	;RP1=0, select bank1
 10895  04C6  00DC               	movwf	(sprintf@val+1)^(0+128)
 10896  04C7  3000               	movlw	0
 10897  04C8  1BDC               	btfsc	(sprintf@val+1)^(0+128),7
 10898  04C9  30FF               	movlw	255
 10899  04CA  00DD               	movwf	(sprintf@val+2)^(0+128)
 10900  04CB  00DE               	movwf	(sprintf@val+3)^(0+128)
 10901  04CC                     l4076:
 10902  04CC  3002               	movlw	2
 10903  04CD  1283               	bcf	3,5	;RP0=0, select bank0
 10904  04CE  1303               	bcf	3,6	;RP1=0, select bank0
 10905  04CF  00E3               	movwf	??_sprintf
 10906  04D0  0863               	movf	??_sprintf,w
 10907  04D1  1683               	bsf	3,5	;RP0=1, select bank1
 10908  04D2  1303               	bcf	3,6	;RP1=0, select bank1
 10909  04D3  07D2               	addwf	sprintf@ap^(0+128),f
 10910  04D4                     l4078:
 10911                           
 10912                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((long
      +                          )val < 0) {
 10913  04D4  1FDE               	btfss	(sprintf@val+3)^(0+128),7
 10914  04D5  2CD7               	goto	u5831
 10915  04D6  2CD8               	goto	u5830
 10916  04D7                     u5831:
 10917  04D7  2CE7               	goto	l4084
 10918  04D8                     u5830:
 10919  04D8                     l4080:
 10920                           
 10921                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
 10922  04D8  3003               	movlw	3
 10923  04D9  04D3               	iorwf	sprintf@flag^(0+128),f
 10924  04DA  3000               	movlw	0
 10925  04DB  04D4               	iorwf	(sprintf@flag+1)^(0+128),f
 10926  04DC                     l4082:
 10927                           
 10928                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
 10929  04DC  09DB               	comf	sprintf@val^(0+128),f
 10930  04DD  09DC               	comf	(sprintf@val+1)^(0+128),f
 10931  04DE  09DD               	comf	(sprintf@val+2)^(0+128),f
 10932  04DF  09DE               	comf	(sprintf@val+3)^(0+128),f
 10933  04E0  0ADB               	incf	sprintf@val^(0+128),f
 10934  04E1  1903               	skipnz
 10935  04E2  0ADC               	incf	(sprintf@val+1)^(0+128),f
 10936  04E3  1903               	skipnz
 10937  04E4  0ADD               	incf	(sprintf@val+2)^(0+128),f
 10938  04E5  1903               	skipnz
 10939  04E6  0ADE               	incf	(sprintf@val+3)^(0+128),f
 10940  04E7                     l4084:
 10941                           
 10942                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
 10943  04E7  0865               	movf	sprintf@prec^(0+128),w
 10944  04E8  0466               	iorwf	(sprintf@prec+1)^(0+128),w
 10945  04E9  1D03               	btfss	3,2
 10946  04EA  2CEC               	goto	u5841
 10947  04EB  2CED               	goto	u5840
 10948  04EC                     u5841:
 10949  04EC  2CFB               	goto	l4090
 10950  04ED                     u5840:
 10951  04ED                     l4086:
 10952  04ED  085E               	movf	(sprintf@val+3)^(0+128),w
 10953  04EE  045D               	iorwf	(sprintf@val+2)^(0+128),w
 10954  04EF  045C               	iorwf	(sprintf@val+1)^(0+128),w
 10955  04F0  045B               	iorwf	sprintf@val^(0+128),w
 10956  04F1  1D03               	skipz
 10957  04F2  2CF4               	goto	u5851
 10958  04F3  2CF5               	goto	u5850
 10959  04F4                     u5851:
 10960  04F4  2CFB               	goto	l4090
 10961  04F5                     u5850:
 10962  04F5                     l4088:
 10963                           
 10964                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
 10965  04F5  3001               	movlw	1
 10966  04F6  07E5               	addwf	sprintf@prec^(0+128),f
 10967  04F7  1803               	skipnc
 10968  04F8  0AE6               	incf	(sprintf@prec+1)^(0+128),f
 10969  04F9  3000               	movlw	0
 10970  04FA  07E6               	addwf	(sprintf@prec+1)^(0+128),f
 10971  04FB                     l4090:
 10972                           
 10973                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10974  04FB  01E7               	clrf	sprintf@c^(0+128)
 10975  04FC  0AE7               	incf	sprintf@c^(0+128),f
 10976  04FD                     l4096:
 10977                           
 10978                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
 10979  04FD  0867               	movf	sprintf@c^(0+128),w
 10980  04FE  1283               	bcf	3,5	;RP0=0, select bank0
 10981  04FF  1303               	bcf	3,6	;RP1=0, select bank0
 10982  0500  00E3               	movwf	??_sprintf
 10983  0501  3001               	movlw	1
 10984  0502                     u5865:
 10985  0502  1003               	clrc
 10986  0503  0DE3               	rlf	??_sprintf,f
 10987  0504  3EFF               	addlw	-1
 10988  0505  1D03               	skipz
 10989  0506  2D02               	goto	u5865
 10990  0507  1003               	clrc
 10991  0508  0D63               	rlf	??_sprintf,w
 10992  0509  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 10993  050A  0084               	movwf	4
 10994  050B  160A  118A  200A  120A  118A  	fcall	stringdir
 10995  0510  00E4               	movwf	??_sprintf+1
 10996  0511  160A  118A  200A  120A  118A  	fcall	stringdir
 10997  0516  00E5               	movwf	??_sprintf+2
 10998  0517  160A  118A  200A  120A  118A  	fcall	stringdir
 10999  051C  00E6               	movwf	??_sprintf+3
 11000  051D  160A  118A  200A  120A  118A  	fcall	stringdir
 11001  0522  00E7               	movwf	??_sprintf+4
 11002  0523  0867               	movf	??_sprintf+4,w
 11003  0524  1683               	bsf	3,5	;RP0=1, select bank1
 11004  0525  1303               	bcf	3,6	;RP1=0, select bank1
 11005  0526  025E               	subwf	(sprintf@val+3)^(0+128),w
 11006  0527  1D03               	skipz
 11007  0528  2D3F               	goto	u5875
 11008  0529  1283               	bcf	3,5	;RP0=0, select bank0
 11009  052A  1303               	bcf	3,6	;RP1=0, select bank0
 11010  052B  0866               	movf	??_sprintf+3,w
 11011  052C  1683               	bsf	3,5	;RP0=1, select bank1
 11012  052D  1303               	bcf	3,6	;RP1=0, select bank1
 11013  052E  025D               	subwf	(sprintf@val+2)^(0+128),w
 11014  052F  1D03               	skipz
 11015  0530  2D3F               	goto	u5875
 11016  0531  1283               	bcf	3,5	;RP0=0, select bank0
 11017  0532  1303               	bcf	3,6	;RP1=0, select bank0
 11018  0533  0865               	movf	??_sprintf+2,w
 11019  0534  1683               	bsf	3,5	;RP0=1, select bank1
 11020  0535  1303               	bcf	3,6	;RP1=0, select bank1
 11021  0536  025C               	subwf	(sprintf@val+1)^(0+128),w
 11022  0537  1D03               	skipz
 11023  0538  2D3F               	goto	u5875
 11024  0539  1283               	bcf	3,5	;RP0=0, select bank0
 11025  053A  1303               	bcf	3,6	;RP1=0, select bank0
 11026  053B  0864               	movf	??_sprintf+1,w
 11027  053C  1683               	bsf	3,5	;RP0=1, select bank1
 11028  053D  1303               	bcf	3,6	;RP1=0, select bank1
 11029  053E  025B               	subwf	sprintf@val^(0+128),w
 11030  053F                     u5875:
 11031  053F  1803               	skipnc
 11032  0540  2D42               	goto	u5871
 11033  0541  2D43               	goto	u5870
 11034  0542                     u5871:
 11035  0542  2D44               	goto	l4100
 11036  0543                     u5870:
 11037  0543  2D52               	goto	l4102
 11038  0544                     l4100:
 11039  0544  3001               	movlw	1
 11040  0545  1283               	bcf	3,5	;RP0=0, select bank0
 11041  0546  1303               	bcf	3,6	;RP1=0, select bank0
 11042  0547  00E3               	movwf	??_sprintf
 11043  0548  0863               	movf	??_sprintf,w
 11044  0549  1683               	bsf	3,5	;RP0=1, select bank1
 11045  054A  1303               	bcf	3,6	;RP1=0, select bank1
 11046  054B  07E7               	addwf	sprintf@c^(0+128),f
 11047  054C  300A               	movlw	10
 11048  054D  0667               	xorwf	sprintf@c^(0+128),w
 11049  054E  1D03               	btfss	3,2
 11050  054F  2D51               	goto	u5881
 11051  0550  2D52               	goto	u5880
 11052  0551                     u5881:
 11053  0551  2CFD               	goto	l4096
 11054  0552                     u5880:
 11055  0552                     l4102:
 11056                           
 11057                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
 11058  0552  0866               	movf	(sprintf@prec+1)^(0+128),w
 11059  0553  3A80               	xorlw	128
 11060  0554  3C80               	sublw	128
 11061  0555  1D03               	skipz
 11062  0556  2D59               	goto	u5895
 11063  0557  0865               	movf	sprintf@prec^(0+128),w
 11064  0558  0267               	subwf	sprintf@c^(0+128),w
 11065  0559                     u5895:
 11066  0559  1803               	skipnc
 11067  055A  2D5C               	goto	u5891
 11068  055B  2D5D               	goto	u5890
 11069  055C                     u5891:
 11070  055C  2D68               	goto	l4106
 11071  055D                     u5890:
 11072  055D                     l4104:
 11073                           
 11074                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1366:    c = (cha
      +                          r)prec;
 11075  055D  1683               	bsf	3,5	;RP0=1, select bank1
 11076  055E  1303               	bcf	3,6	;RP1=0, select bank1
 11077  055F  0865               	movf	sprintf@prec^(0+128),w
 11078  0560  1283               	bcf	3,5	;RP0=0, select bank0
 11079  0561  1303               	bcf	3,6	;RP1=0, select bank0
 11080  0562  00E3               	movwf	??_sprintf
 11081  0563  0863               	movf	??_sprintf,w
 11082  0564  1683               	bsf	3,5	;RP0=1, select bank1
 11083  0565  1303               	bcf	3,6	;RP1=0, select bank1
 11084  0566  00E7               	movwf	sprintf@c^(0+128)
 11085  0567  2D8C               	goto	l4110
 11086  0568                     l4106:
 11087  0568  1683               	bsf	3,5	;RP0=1, select bank1
 11088  0569  1303               	bcf	3,6	;RP1=0, select bank1
 11089  056A  0866               	movf	(sprintf@prec+1)^(0+128),w
 11090  056B  3A80               	xorlw	128
 11091  056C  1283               	bcf	3,5	;RP0=0, select bank0
 11092  056D  1303               	bcf	3,6	;RP1=0, select bank0
 11093  056E  00E3               	movwf	??_sprintf
 11094  056F  3080               	movlw	128
 11095  0570  0263               	subwf	??_sprintf,w
 11096  0571  1D03               	skipz
 11097  0572  2D77               	goto	u5905
 11098  0573  1683               	bsf	3,5	;RP0=1, select bank1
 11099  0574  1303               	bcf	3,6	;RP1=0, select bank1
 11100  0575  0867               	movf	sprintf@c^(0+128),w
 11101  0576  0265               	subwf	sprintf@prec^(0+128),w
 11102  0577                     u5905:
 11103  0577  1803               	skipnc
 11104  0578  2D7A               	goto	u5901
 11105  0579  2D7B               	goto	u5900
 11106  057A                     u5901:
 11107  057A  2D8C               	goto	l4110
 11108  057B                     u5900:
 11109  057B                     l4108:
 11110                           
 11111                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
 11112  057B  1683               	bsf	3,5	;RP0=1, select bank1
 11113  057C  1303               	bcf	3,6	;RP1=0, select bank1
 11114  057D  0867               	movf	sprintf@c^(0+128),w
 11115  057E  1283               	bcf	3,5	;RP0=0, select bank0
 11116  057F  1303               	bcf	3,6	;RP1=0, select bank0
 11117  0580  00E3               	movwf	??_sprintf
 11118  0581  01E4               	clrf	??_sprintf+1
 11119  0582  0863               	movf	??_sprintf,w
 11120  0583  1683               	bsf	3,5	;RP0=1, select bank1
 11121  0584  1303               	bcf	3,6	;RP1=0, select bank1
 11122  0585  00E5               	movwf	sprintf@prec^(0+128)
 11123  0586  1283               	bcf	3,5	;RP0=0, select bank0
 11124  0587  1303               	bcf	3,6	;RP1=0, select bank0
 11125  0588  0864               	movf	??_sprintf+1,w
 11126  0589  1683               	bsf	3,5	;RP0=1, select bank1
 11127  058A  1303               	bcf	3,6	;RP1=0, select bank1
 11128  058B  00E6               	movwf	(sprintf@prec+1)^(0+128)
 11129  058C                     l4110:
 11130                           
 11131                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
 11132  058C  1683               	bsf	3,5	;RP0=1, select bank1
 11133  058D  1303               	bcf	3,6	;RP1=0, select bank1
 11134  058E  0855               	movf	sprintf@width^(0+128),w
 11135  058F  0456               	iorwf	(sprintf@width+1)^(0+128),w
 11136  0590  1903               	btfsc	3,2
 11137  0591  2D93               	goto	u5911
 11138  0592  2D94               	goto	u5910
 11139  0593                     u5911:
 11140  0593  2DAE               	goto	l4116
 11141  0594                     u5910:
 11142  0594                     l4112:
 11143  0594  3003               	movlw	3
 11144  0595  0553               	andwf	sprintf@flag^(0+128),w
 11145  0596  1283               	bcf	3,5	;RP0=0, select bank0
 11146  0597  1303               	bcf	3,6	;RP1=0, select bank0
 11147  0598  00E3               	movwf	??_sprintf
 11148  0599  3000               	movlw	0
 11149  059A  1683               	bsf	3,5	;RP0=1, select bank1
 11150  059B  1303               	bcf	3,6	;RP1=0, select bank1
 11151  059C  0554               	andwf	(sprintf@flag+1)^(0+128),w
 11152  059D  1283               	bcf	3,5	;RP0=0, select bank0
 11153  059E  1303               	bcf	3,6	;RP1=0, select bank0
 11154  059F  00E4               	movwf	??_sprintf+1
 11155  05A0  0863               	movf	??_sprintf,w
 11156  05A1  0464               	iorwf	??_sprintf+1,w
 11157  05A2  1903               	btfsc	3,2
 11158  05A3  2DA5               	goto	u5921
 11159  05A4  2DA6               	goto	u5920
 11160  05A5                     u5921:
 11161  05A5  2DAE               	goto	l4116
 11162  05A6                     u5920:
 11163  05A6                     l4114:
 11164                           
 11165                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
 11166  05A6  30FF               	movlw	255
 11167  05A7  1683               	bsf	3,5	;RP0=1, select bank1
 11168  05A8  1303               	bcf	3,6	;RP1=0, select bank1
 11169  05A9  07D5               	addwf	sprintf@width^(0+128),f
 11170  05AA  1803               	skipnc
 11171  05AB  0AD6               	incf	(sprintf@width+1)^(0+128),f
 11172  05AC  30FF               	movlw	255
 11173  05AD  07D6               	addwf	(sprintf@width+1)^(0+128),f
 11174  05AE                     l4116:
 11175                           
 11176                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1374:   if(flag &
      +                           0x4000) {
 11177  05AE  1683               	bsf	3,5	;RP0=1, select bank1
 11178  05AF  1303               	bcf	3,6	;RP1=0, select bank1
 11179  05B0  1F54               	btfss	(sprintf@flag+1)^(0+128),6
 11180  05B1  2DB3               	goto	u5931
 11181  05B2  2DB4               	goto	u5930
 11182  05B3                     u5931:
 11183  05B3  2DD7               	goto	l4124
 11184  05B4                     u5930:
 11185  05B4                     l4118:
 11186                           
 11187                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1375:    if(width
      +                           > prec)
 11188  05B4  0866               	movf	(sprintf@prec+1)^(0+128),w
 11189  05B5  3A80               	xorlw	128
 11190  05B6  1283               	bcf	3,5	;RP0=0, select bank0
 11191  05B7  1303               	bcf	3,6	;RP1=0, select bank0
 11192  05B8  00E3               	movwf	??_sprintf
 11193  05B9  1683               	bsf	3,5	;RP0=1, select bank1
 11194  05BA  1303               	bcf	3,6	;RP1=0, select bank1
 11195  05BB  0856               	movf	(sprintf@width+1)^(0+128),w
 11196  05BC  3A80               	xorlw	128
 11197  05BD  1283               	bcf	3,5	;RP0=0, select bank0
 11198  05BE  1303               	bcf	3,6	;RP1=0, select bank0
 11199  05BF  0263               	subwf	??_sprintf,w
 11200  05C0  1D03               	skipz
 11201  05C1  2DC6               	goto	u5945
 11202  05C2  1683               	bsf	3,5	;RP0=1, select bank1
 11203  05C3  1303               	bcf	3,6	;RP1=0, select bank1
 11204  05C4  0855               	movf	sprintf@width^(0+128),w
 11205  05C5  0265               	subwf	sprintf@prec^(0+128),w
 11206  05C6                     u5945:
 11207  05C6  1803               	skipnc
 11208  05C7  2DC9               	goto	u5941
 11209  05C8  2DCA               	goto	u5940
 11210  05C9                     u5941:
 11211  05C9  2DD3               	goto	l4122
 11212  05CA                     u5940:
 11213  05CA                     l4120:
 11214                           
 11215                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1376:     width -
      +                          = prec;
 11216  05CA  1683               	bsf	3,5	;RP0=1, select bank1
 11217  05CB  1303               	bcf	3,6	;RP1=0, select bank1
 11218  05CC  0865               	movf	sprintf@prec^(0+128),w
 11219  05CD  02D5               	subwf	sprintf@width^(0+128),f
 11220  05CE  0866               	movf	(sprintf@prec+1)^(0+128),w
 11221  05CF  1C03               	skipc
 11222  05D0  03D6               	decf	(sprintf@width+1)^(0+128),f
 11223  05D1  02D6               	subwf	(sprintf@width+1)^(0+128),f
 11224  05D2  2DD7               	goto	l4124
 11225  05D3                     l4122:
 11226                           
 11227                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1378:     width =
      +                           0;
 11228  05D3  1683               	bsf	3,5	;RP0=1, select bank1
 11229  05D4  1303               	bcf	3,6	;RP1=0, select bank1
 11230  05D5  01D5               	clrf	sprintf@width^(0+128)
 11231  05D6  01D6               	clrf	(sprintf@width+1)^(0+128)
 11232  05D7                     l4124:
 11233                           
 11234                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
 11235  05D7  0856               	movf	(sprintf@width+1)^(0+128),w
 11236  05D8  3A80               	xorlw	128
 11237  05D9  3C80               	sublw	128
 11238  05DA  1D03               	skipz
 11239  05DB  2DDE               	goto	u5955
 11240  05DC  0855               	movf	sprintf@width^(0+128),w
 11241  05DD  0267               	subwf	sprintf@c^(0+128),w
 11242  05DE                     u5955:
 11243  05DE  1803               	skipnc
 11244  05DF  2DE1               	goto	u5951
 11245  05E0  2DE2               	goto	u5950
 11246  05E1                     u5951:
 11247  05E1  2DF6               	goto	l4128
 11248  05E2                     u5950:
 11249  05E2                     l4126:
 11250                           
 11251                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
 11252  05E2  1683               	bsf	3,5	;RP0=1, select bank1
 11253  05E3  1303               	bcf	3,6	;RP1=0, select bank1
 11254  05E4  0867               	movf	sprintf@c^(0+128),w
 11255  05E5  1283               	bcf	3,5	;RP0=0, select bank0
 11256  05E6  1303               	bcf	3,6	;RP1=0, select bank0
 11257  05E7  00E3               	movwf	??_sprintf
 11258  05E8  01E4               	clrf	??_sprintf+1
 11259  05E9  0863               	movf	??_sprintf,w
 11260  05EA  1683               	bsf	3,5	;RP0=1, select bank1
 11261  05EB  1303               	bcf	3,6	;RP1=0, select bank1
 11262  05EC  02D5               	subwf	sprintf@width^(0+128),f
 11263  05ED  1283               	bcf	3,5	;RP0=0, select bank0
 11264  05EE  1303               	bcf	3,6	;RP1=0, select bank0
 11265  05EF  0864               	movf	??_sprintf+1,w
 11266  05F0  1683               	bsf	3,5	;RP0=1, select bank1
 11267  05F1  1303               	bcf	3,6	;RP1=0, select bank1
 11268  05F2  1C03               	skipc
 11269  05F3  03D6               	decf	(sprintf@width+1)^(0+128),f
 11270  05F4  02D6               	subwf	(sprintf@width+1)^(0+128),f
 11271  05F5  2DFA               	goto	l4130
 11272  05F6                     l4128:
 11273                           
 11274                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
 11275  05F6  1683               	bsf	3,5	;RP0=1, select bank1
 11276  05F7  1303               	bcf	3,6	;RP1=0, select bank1
 11277  05F8  01D5               	clrf	sprintf@width^(0+128)
 11278  05F9  01D6               	clrf	(sprintf@width+1)^(0+128)
 11279  05FA                     l4130:
 11280                           
 11281                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
 11282  05FA  0855               	movf	sprintf@width^(0+128),w
 11283  05FB  0456               	iorwf	(sprintf@width+1)^(0+128),w
 11284  05FC  1903               	btfsc	3,2
 11285  05FD  2DFF               	goto	u5961
 11286  05FE  2E00               	goto	u5960
 11287  05FF                     u5961:
 11288  05FF  2E1F               	goto	l4138
 11289  0600                     u5960:
 11290  0600                     l4132:
 11291                           
 11292                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
 11293  0600  3020               	movlw	32
 11294  0601  1283               	bcf	3,5	;RP0=0, select bank0
 11295  0602  1303               	bcf	3,6	;RP1=0, select bank0
 11296  0603  00E3               	movwf	??_sprintf
 11297  0604  1683               	bsf	3,5	;RP0=1, select bank1
 11298  0605  1303               	bcf	3,6	;RP1=0, select bank1
 11299  0606  0864               	movf	sprintf@sp^(0+128),w
 11300  0607  0084               	movwf	4
 11301  0608  1283               	bcf	3,5	;RP0=0, select bank0
 11302  0609  1303               	bcf	3,6	;RP1=0, select bank0
 11303  060A  0863               	movf	??_sprintf,w
 11304  060B  1383               	bcf	3,7	;select IRP bank0
 11305  060C  0080               	movwf	0
 11306  060D                     l4134:
 11307  060D  3001               	movlw	1
 11308  060E  00E3               	movwf	??_sprintf
 11309  060F  0863               	movf	??_sprintf,w
 11310  0610  1683               	bsf	3,5	;RP0=1, select bank1
 11311  0611  1303               	bcf	3,6	;RP1=0, select bank1
 11312  0612  07E4               	addwf	sprintf@sp^(0+128),f
 11313  0613                     l4136:
 11314  0613  30FF               	movlw	255
 11315  0614  07D5               	addwf	sprintf@width^(0+128),f
 11316  0615  1803               	skipnc
 11317  0616  0AD6               	incf	(sprintf@width+1)^(0+128),f
 11318  0617  30FF               	movlw	255
 11319  0618  07D6               	addwf	(sprintf@width+1)^(0+128),f
 11320  0619  0855               	movf	sprintf@width^(0+128),w
 11321  061A  0456               	iorwf	(sprintf@width+1)^(0+128),w
 11322  061B  1D03               	btfss	3,2
 11323  061C  2E1E               	goto	u5971
 11324  061D  2E1F               	goto	u5970
 11325  061E                     u5971:
 11326  061E  2E00               	goto	l4132
 11327  061F                     u5970:
 11328  061F                     l4138:
 11329                           
 11330                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
 11331  061F  3003               	movlw	3
 11332  0620  0553               	andwf	sprintf@flag^(0+128),w
 11333  0621  1283               	bcf	3,5	;RP0=0, select bank0
 11334  0622  1303               	bcf	3,6	;RP1=0, select bank0
 11335  0623  00E3               	movwf	??_sprintf
 11336  0624  3000               	movlw	0
 11337  0625  1683               	bsf	3,5	;RP0=1, select bank1
 11338  0626  1303               	bcf	3,6	;RP1=0, select bank1
 11339  0627  0554               	andwf	(sprintf@flag+1)^(0+128),w
 11340  0628  1283               	bcf	3,5	;RP0=0, select bank0
 11341  0629  1303               	bcf	3,6	;RP1=0, select bank0
 11342  062A  00E4               	movwf	??_sprintf+1
 11343  062B  0863               	movf	??_sprintf,w
 11344  062C  0464               	iorwf	??_sprintf+1,w
 11345  062D  1903               	btfsc	3,2
 11346  062E  2E30               	goto	u5981
 11347  062F  2E31               	goto	u5980
 11348  0630                     u5981:
 11349  0630  2EAA               	goto	l4150
 11350  0631                     u5980:
 11351  0631                     l4140:
 11352                           
 11353                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
 11354  0631  302D               	movlw	45
 11355  0632  00E3               	movwf	??_sprintf
 11356  0633  1683               	bsf	3,5	;RP0=1, select bank1
 11357  0634  1303               	bcf	3,6	;RP1=0, select bank1
 11358  0635  0864               	movf	sprintf@sp^(0+128),w
 11359  0636  0084               	movwf	4
 11360  0637  1283               	bcf	3,5	;RP0=0, select bank0
 11361  0638  1303               	bcf	3,6	;RP1=0, select bank0
 11362  0639  0863               	movf	??_sprintf,w
 11363  063A  1383               	bcf	3,7	;select IRP bank0
 11364  063B  0080               	movwf	0
 11365  063C                     l4142:
 11366  063C  3001               	movlw	1
 11367  063D  00E3               	movwf	??_sprintf
 11368  063E  0863               	movf	??_sprintf,w
 11369  063F  1683               	bsf	3,5	;RP0=1, select bank1
 11370  0640  1303               	bcf	3,6	;RP1=0, select bank1
 11371  0641  07E4               	addwf	sprintf@sp^(0+128),f
 11372  0642  2EAA               	goto	l4150
 11373  0643                     l4144:
 11374                           
 11375                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned int)prec]) % 10 + '0';
 11376  0643  3000               	movlw	0
 11377  0644  1283               	bcf	3,5	;RP0=0, select bank0
 11378  0645  1303               	bcf	3,6	;RP1=0, select bank0
 11379  0646  00A9               	movwf	___llmod@divisor+3
 11380  0647  3000               	movlw	0
 11381  0648  00A8               	movwf	___llmod@divisor+2
 11382  0649  3000               	movlw	0
 11383  064A  00A7               	movwf	___llmod@divisor+1
 11384  064B  300A               	movlw	10
 11385  064C  00A6               	movwf	___llmod@divisor
 11386  064D  1683               	bsf	3,5	;RP0=1, select bank1
 11387  064E  1303               	bcf	3,6	;RP1=0, select bank1
 11388  064F  0865               	movf	sprintf@prec^(0+128),w
 11389  0650  1283               	bcf	3,5	;RP0=0, select bank0
 11390  0651  1303               	bcf	3,6	;RP1=0, select bank0
 11391  0652  00E3               	movwf	??_sprintf
 11392  0653  3001               	movlw	1
 11393  0654                     u5995:
 11394  0654  1003               	clrc
 11395  0655  0DE3               	rlf	??_sprintf,f
 11396  0656  3EFF               	addlw	-1
 11397  0657  1D03               	skipz
 11398  0658  2E54               	goto	u5995
 11399  0659  1003               	clrc
 11400  065A  0D63               	rlf	??_sprintf,w
 11401  065B  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
 11402  065C  0084               	movwf	4
 11403  065D  160A  118A  200A  120A  118A  	fcall	stringdir
 11404  0662  00F2               	movwf	___lldiv@divisor
 11405  0663  160A  118A  200A  120A  118A  	fcall	stringdir
 11406  0668  00F3               	movwf	___lldiv@divisor+1
 11407  0669  160A  118A  200A  120A  118A  	fcall	stringdir
 11408  066E  00F4               	movwf	___lldiv@divisor+2
 11409  066F  160A  118A  200A  120A  118A  	fcall	stringdir
 11410  0674  00F5               	movwf	___lldiv@divisor+3
 11411  0675  1683               	bsf	3,5	;RP0=1, select bank1
 11412  0676  1303               	bcf	3,6	;RP1=0, select bank1
 11413  0677  085E               	movf	(sprintf@val+3)^(0+128),w
 11414  0678  00F9               	movwf	___lldiv@dividend+3
 11415  0679  085D               	movf	(sprintf@val+2)^(0+128),w
 11416  067A  00F8               	movwf	___lldiv@dividend+2
 11417  067B  085C               	movf	(sprintf@val+1)^(0+128),w
 11418  067C  00F7               	movwf	___lldiv@dividend+1
 11419  067D  085B               	movf	sprintf@val^(0+128),w
 11420  067E  00F6               	movwf	___lldiv@dividend
 11421  067F  160A  118A  2264  120A  118A  	fcall	___lldiv
 11422  0684  0875               	movf	?___lldiv+3,w
 11423  0685  1283               	bcf	3,5	;RP0=0, select bank0
 11424  0686  1303               	bcf	3,6	;RP1=0, select bank0
 11425  0687  00AD               	movwf	___llmod@dividend+3
 11426  0688  0874               	movf	?___lldiv+2,w
 11427  0689  00AC               	movwf	___llmod@dividend+2
 11428  068A  0873               	movf	?___lldiv+1,w
 11429  068B  00AB               	movwf	___llmod@dividend+1
 11430  068C  0872               	movf	?___lldiv,w
 11431  068D  00AA               	movwf	___llmod@dividend
 11432  068E  160A  118A  20FB  120A  118A  	fcall	___llmod
 11433  0693  1283               	bcf	3,5	;RP0=0, select bank0
 11434  0694  1303               	bcf	3,6	;RP1=0, select bank0
 11435  0695  0826               	movf	?___llmod,w
 11436  0696  3E30               	addlw	48
 11437  0697  00E4               	movwf	??_sprintf+1
 11438  0698  0864               	movf	??_sprintf+1,w
 11439  0699  1683               	bsf	3,5	;RP0=1, select bank1
 11440  069A  1303               	bcf	3,6	;RP1=0, select bank1
 11441  069B  00E7               	movwf	sprintf@c^(0+128)
 11442  069C                     l4146:
 11443                           
 11444                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
 11445  069C  0867               	movf	sprintf@c^(0+128),w
 11446  069D  1283               	bcf	3,5	;RP0=0, select bank0
 11447  069E  1303               	bcf	3,6	;RP1=0, select bank0
 11448  069F  00E3               	movwf	??_sprintf
 11449  06A0  1683               	bsf	3,5	;RP0=1, select bank1
 11450  06A1  1303               	bcf	3,6	;RP1=0, select bank1
 11451  06A2  0864               	movf	sprintf@sp^(0+128),w
 11452  06A3  0084               	movwf	4
 11453  06A4  1283               	bcf	3,5	;RP0=0, select bank0
 11454  06A5  1303               	bcf	3,6	;RP1=0, select bank0
 11455  06A6  0863               	movf	??_sprintf,w
 11456  06A7  1383               	bcf	3,7	;select IRP bank0
 11457  06A8  0080               	movwf	0
 11458  06A9  2E3C               	goto	l4142
 11459  06AA                     l4150:
 11460                           
 11461                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
 11462  06AA  30FF               	movlw	255
 11463  06AB  1683               	bsf	3,5	;RP0=1, select bank1
 11464  06AC  1303               	bcf	3,6	;RP1=0, select bank1
 11465  06AD  07E5               	addwf	sprintf@prec^(0+128),f
 11466  06AE  1803               	skipnc
 11467  06AF  0AE6               	incf	(sprintf@prec+1)^(0+128),f
 11468  06B0  30FF               	movlw	255
 11469  06B1  07E6               	addwf	(sprintf@prec+1)^(0+128),f
 11470  06B2  0A65               	incf	sprintf@prec^(0+128),w
 11471  06B3  1D03               	skipz
 11472  06B4  2EB9               	goto	u6001
 11473  06B5  0A66               	incf	(sprintf@prec+1)^(0+128),w
 11474  06B6  1D03               	btfss	3,2
 11475  06B7  2EB9               	goto	u6001
 11476  06B8  2EBA               	goto	u6000
 11477  06B9                     u6001:
 11478  06B9  2E43               	goto	l4144
 11479  06BA                     u6000:
 11480  06BA                     l4152:
 11481                           
 11482                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
 11483  06BA  3001               	movlw	1
 11484  06BB  1283               	bcf	3,5	;RP0=0, select bank0
 11485  06BC  07DF               	addwf	sprintf@f,f
 11486  06BD  30FF               	movlw	-1
 11487  06BE  075F               	addwf	sprintf@f,w
 11488  06BF  0084               	movwf	4
 11489  06C0  160A  118A  200A  120A  118A  	fcall	stringdir
 11490  06C5  00E3               	movwf	??_sprintf
 11491  06C6  0863               	movf	??_sprintf,w
 11492  06C7  1683               	bsf	3,5	;RP0=1, select bank1
 11493  06C8  1303               	bcf	3,6	;RP1=0, select bank1
 11494  06C9  00E7               	movwf	sprintf@c^(0+128)
 11495  06CA  0867               	movf	sprintf@c^(0+128),w
 11496  06CB  1D03               	btfss	3,2
 11497  06CC  2ECE               	goto	u6011
 11498  06CD  2ED1               	goto	u6010
 11499  06CE                     u6011:
 11500  06CE  120A  158A  2D26   	goto	l3874
 11501  06D1                     u6010:
 11502  06D1                     l4154:
 11503                           
 11504                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
 11505  06D1  1683               	bsf	3,5	;RP0=1, select bank1
 11506  06D2  1303               	bcf	3,6	;RP1=0, select bank1
 11507  06D3  0864               	movf	sprintf@sp^(0+128),w
 11508  06D4  0084               	movwf	4
 11509  06D5  1383               	bcf	3,7	;select IRP bank0
 11510  06D6  0180               	clrf	0
 11511  06D7                     l478:
 11512  06D7  0008               	return
 11513  06D8                     __end_of_sprintf:

Data Sizes:
    Strings     69
    Constant    118
    Data        0
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      80
    BANK1            80     25      72
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[5]), STR_3(CODE[7]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data_TEMP(BANK1[8]), data_ADC(BANK1[8]), data_cont(BANK1[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[6]), STR_10(CODE[9]), STR_9(CODE[4]), STR_8(CODE[8]), 
		 -> STR_7(CODE[4]), STR_6(CODE[9]), data_TEMP(BANK1[8]), data_ADC(BANK1[8]), 
		 -> data_cont(BANK1[8]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 18
		 -> STR_5(CODE[2]), data_TEMP(BANK1[8]), data_ADC(BANK1[8]), data_cont(BANK1[8]), 
		 -> STR_1(CODE[18]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Show_val_VT->_Write_USART_String
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _SPI_TEMP->_spiWrite
    _SPI_CONT->_spiWrite
    _SPI_ADC->_spiWrite
    _Mapeo_M->___awdiv
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___awdiv
    _sprintf->___lldiv
    _scale->___awdiv
    ___awdiv->___awmod
    ___lwdiv->___lwmod
    ___ftmul->___awdiv
    ___ftmul->___ftpack
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftadd->___ftpack

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _Mapeo_M->___ftdiv
    ___ftdiv->___ftmul
    _ADC_to_string->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _ADC_to_string->_sprintf

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   57204
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _Mapeo_M
                            _SPI_ADC
                           _SPI_CONT
                           _SPI_TEMP
                       _Show_val_LCD
                        _Show_val_VT
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Show_val_VT                                          0     0      0     611
                        _Write_USART
                 _Write_USART_String
 ---------------------------------------------------------------------------------
 (2) _Write_USART_String                                   4     2      2     589
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (3) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         1     1      0    1096
                                              2 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     517
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     579
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _SPI_TEMP                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_CONT                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_ADC                                              3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mapeo_M                                              2     2      0   13016
                                             44 BANK0      2     2      0
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2948
                                             28 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2596
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0   40851
                                             73 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             40    36      4   40851
                                             63 BANK0     10     6      4
                                              0 BANK1     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     6      3    8105
                                             28 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     932
                                              2 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1148
                                              9 COMMON     1     1      0
                                              0 BANK0      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              16    13      3    6854
                                             28 BANK0     16    13      3
                             ___bmul
                            ___ftmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     477
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     631
                                              8 COMMON     1     1      0
                                              0 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    4836
                                             12 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     560
                                              8 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     584
                                              2 COMMON     6     0      6
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     552
                                              2 COMMON     6     0      6
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1488
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2565
                                              0 BANK0      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     752
                                              6 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     631
                                              2 COMMON     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     411
                                             37 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4109
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3883
                                             44 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2398
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3      98
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     560
                                              2 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___lwdiv
             ___lwmod (ARG)
           ___lwmod
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                   ___lwmod (ARG)
                 ___lwmod (ARG)
               ___ftpack (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___lwdiv
               ___lwmod (ARG)
             ___lwmod
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
                 ___lwmod (ARG)
               ___lwmod (ARG)
             ___ftpack (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___lwdiv
           ___lwmod (ARG)
         ___lwmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
               ___lwmod (ARG)
             ___lwmod (ARG)
           ___ftpack (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Mapeo_M
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
             ___lwmod (ARG)
           ___lwmod (ARG)
         ___ftpack (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___bmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
           ___lwmod (ARG)
         ___lwmod (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
     ___wmul
   _SPI_ADC
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_CONT
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_TEMP
     _spiRead
       _spiReceiveWait
     _spiWrite
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Show_val_VT
     _Write_USART
     _Write_USART_String
       _Write_USART
   _setup
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A4       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     19      48       7       90.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A4      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 17:57:46 2021

                           pc 0002                ___bmul@product 002A                   _SSPSTATbits 0094  
                ___awdiv@sign 0025                            fsr 0004           ___wmul@multiplicand 0074  
                ___ftadd@exp1 0058                  ___ftadd@exp2 0057          __size_of_Write_USART 000C  
                ___ftadd@sign 0056                           l122 1FFF                           l131 1D73  
                         l116 07FE                           l125 1263                           l134 1DA7  
                         l222 1BE1                           l150 11D0                           l119 13A2  
                         l231 1C1E                           l151 11D6                           l143 11AC  
                         l128 1DDD                           l152 11DC                           l144 1204  
                         l153 1205                           l145 11B2                           l137 1E8C  
                         l146 11B8                           l219 1BF7                           l147 11BE  
                         l172 1C9A                           l228 1C14                           l148 11C4  
                         l260 1C69                           l181 1CBE                           l237 10FA  
                         l149 11CA                           l166 1F63                           l190 1F18  
                         l175 1C2B                           l263 1BE9                           l408 0E0A  
                         l184 1C53                           l441 02BC                           l169 1BD5  
                         l266 1BEF                           l259 1C64                           l508 1C80  
                         l277 1C08                           l269 1BDB                           l518 12CB  
                         l711 13DF                           l720 141E                           l448 030E  
                         l802 1C12                           l482 080F                           l386 0D17  
                         l707 141E                           l731 1715                           l379 0A5C  
                         l732 171F                           l812 08B3                           l484 0827  
                         l733 1724                           l718 13FA                           l742 1795  
                         l478 06D7                           l719 1404                           l728 17FF  
                         l808 1CE3                           l665 1334                           l819 0896  
                         l691 1679                           l771 149E                           l692 168C  
                         l924 1ED2                           l684 1D0C                           l853 1150  
                         l861 1D3F                           l934 1E4F                           l678 11A9  
                         l767 14DB                           l791 07BC                           l759 159D  
                         l688 16C9                           l768 144D                           l944 1C3D  
                         l785 1E15                           l778 14CE                           l699 16BC  
                         _RC0 0038                           _RC1 0039                           _RC2 003A  
                         _ISR 1BE2                           fsr0 0004                           indf 0000  
                ___awmod@sign 0078   __size_of_Write_USART_String 002B                          ?_ISR 0070  
                ___ftdiv@cntr 0046                  ___ftdiv@sign 004B                          l2300 12F2  
                        l2310 1318                          l2302 12F9                          l2320 1330  
                        l2312 1319                          l2304 12FD                          l3200 1BD7  
                        l2314 1320                          l2306 1301                          l2330 115B  
                        l4010 01D8                          l4002 0183                          l3202 1C00  
                        l2308 1312                          l2316 1326                          l2340 116F  
                        l2332 115D                          l2324 1151                          l4100 0544  
                        l4020 0204                          l4012 01E1                          l4004 0191  
                        l3204 1C05                          l3220 1BDF                          l3212 11E2  
                        l3300 1E5F                          l2270 1C72                          l2510 1E1C  
                        l2318 132B                          l2350 118E                          l2342 1176  
                        l2334 1161                          l2326 1152                          l4110 058C  
                        l4102 0552                          l4030 02A8                          l4022 0218  
                        l4014 01EE                          l4006 01C0                          l3222 1BF0  
                        l3230 1C60                          l3310 1E66                          l3302 1E60  
                        l2272 1C76                          l2520 1E38                          l2512 1E1F  
                        l2280 12CC                          l2352 1195                          l2344 117A  
                        l2336 1166                          l2328 1156                          l4120 05CA  
                        l4112 0594                          l4104 055D                          l4040 02EC  
                        l4032 02C6                          l4024 0223                          l4008 01C6  
                        l4200 1548                          l3208 11AB                          l3232 1C63  
                        l3224 1C55                          l3320 1E73                          l3312 1E67  
                        l3304 1E63                          l2274 1C78                          l2266 1C6D  
                        l2522 1E3E                          l2514 1E26                          l2290 12DE  
                        l2282 12CF                          l2346 117E                          l2338 116C  
                        l2354 119B                          l4130 05FA                          l4122 05D3  
                        l4114 05A6                          l4106 0568                          l4050 0331  
                        l4042 02FB                          l4034 02D3                          l4026 022A  
                        l4018 01F5                          l4210 1574                          l4202 1553  
                        l2530 1C14                          l3218 1BDC                          l3226 1C5C  
                        l3322 1E76                          l3314 1E6A                          l3306 1E64  
                        l3500 13FE                          l2700 1618                          l2276 1C7F  
                        l2268 1C6E                          l2524 1E45                          l2516 1E2A  
                        l2508 1E16                          l2620 1C2E                          l2292 12E3  
                        l2284 12D3                          l2356 11A0                          l2348 1188  
                        l4140 0631                          l4132 0600                          l4124 05D7  
                        l4116 05AE                          l4108 057B                          l4060 041A  
                        l4052 0337                          l4044 0304                          l4036 02D9  
                        l4028 0269                          l4220 1F1F                          l4212 157C  
                        l4204 155B                          l2532 1C1A                          l3228 1C5E  
                        l3324 1E79                          l3316 1E6D                          l3308 1E65  
                        l3502 1406                          l3510 16CA                          l2710 1678  
                        l2702 161D                          l2518 1E2E                          l2526 1E4B  
                        l2622 1C34                          l2294 12E7                          l2286 12D8  
                        l2358 11A5                          l4142 063C                          l4150 06AA  
                        l4134 060D                          l4126 05E2                          l4118 05B4  
                        l4070 04A4                          l4062 042E                          l4054 034F  
                        l4046 031F                          l4038 02DF                          l4222 1F28  
                        l4214 1582                          l4206 1569                          l4230 1335  
                        l3350 1DCD                          l3342 1DA8                          l3326 1E7E  
                        l3318 1E70                          l3504 1418                          l3520 1700  
                        l3512 16E9                          l2720 1698                          l2712 1686  
                        l2704 1621                          l3600 073F                          l2624 1C3A  
                        l2296 12E9                          l2288 12DA                          l4144 0643  
                        l4136 0613                          l4128 05F6                          l4080 04D8  
                        l4072 04AA                          l4056 039C                          l4064 0489  
                        l4048 0324                          l4152 06BA                          l4232 07BD  
                        l4224 1F37                          l4208 1573                          l3360 1D63  
                        l3352 1D40                          l3344 1DAB                          l4240 1FD5  
                        l3192 10D0                          l3328 1E83                          l3506 141D  
                        l3530 171E                          l3522 1705                          l3514 16EF  
                        l2810 083B                          l2730 16C1                          l2714 1690  
                        l2722 16AA                          l2706 162A                          l3610 0765  
                        l3602 0745                          l2626 1C3C                          l2618 1C2D  
                        l2298 12EF                          l4146 069C                          l4138 061F  
                        l4090 04FB                          l4082 04DC                          l4066 0491  
                        l4058 03DB                          l4074 04B1                          l4154 06D1  
                        l4330 0E26                          l4226 1F3D                          l4218 1F19  
                        l4170 1CF0                          l2554 1BE9                          l3354 1D43  
                        l3346 1DB4                          l3370 1D97                          l3362 1D74  
                        l4242 1FE1                          l4234 1FAF                          l3194 10D2  
                        l3290 1E56                          l4250 1F6C                          l3540 1742  
                        l3532 1723                          l3524 170B                          l3516 16F9  
                        l2820 085D                          l2740 0816                          l2708 1656  
                        l3620 078B                          l3612 076D                          l3604 0749  
                        l3700 0A64                          l4084 04E7                          l4076 04CC  
                        l4068 049E                          l3508 1BD1                          l4228 1C1F  
                        l4172 1CF2                          l4164 1CE4                          l3356 1D4C  
                        l3348 1DBA                          l3364 1D77                          l4244 1FF6  
                        l4236 1FB7                          l3196 10E3                          l3380 125D  
                        l3292 1E59                          l4260 1F88                          l4252 1F6D  
                        l3550 176A                          l3542 1748                          l3534 1725  
                        l3526 1716                          l2822 0864                          l2814 0844  
                        l2742 081D                          l2734 0803                          l3622 0793  
                        l3614 0773                          l3606 074D                          l3630 1E8D  
                        l3710 0B2B                          l3702 0A66                          l4086 04ED  
                        l4078 04D4                          l4166 1CE7                          l4190 1514  
                        l4182 14F6                          l3358 1D52                          l3366 1D80  
                        l4238 1FC0                          l3198 10E7                          l3294 1E5A  
                        l4270 1FA1                          l4262 1F8D                          l4254 1F72  
                        l4246 1F64                          l3480 13AF                          l3560 1799  
                        l3552 1774                          l3544 1751                          l3536 172B  
                        l3528 171A                          l2840 088B                          l2832 0872  
                        l2824 0866                          l2816 0856                          l2808 0828  
                        l3800 1293                          l2744 0823                          l2736 0805  
                        l2728 16B1                          l3624 079B                          l3616 0777  
                        l3608 075D                          l3640 1EA5                          l3632 1E91  
                        l3712 0B32                          l3704 0A6D                          l3720 0BBF  
                        l4096 04FD                          l4088 04F5                          l4168 1CEB  
                        l4192 1519                          l4184 1507                          l4176 14DC  
                        l3368 1D86                          l3376 1206                          l4328 11EA  
                        l3296 1E5D                          l3288 1E50                          l4272 1FA6  
                        l4264 1F92                          l4256 1F77                          l4248 1F69  
                        l3490 13CD                          l3570 17CE                          l3562 17A9  
                        l3554 177A                          l3546 175D                          l3538 1738  
                        l2842 089B                          l2826 086A                          l2834 0884  
                        l2818 0857                          l3802 12A5                          l3810 12C3  
                        l2738 0809                          l2682 159E                          l3626 07A1  
                        l3618 077B                          l3650 1EC8                          l3642 1EA9  
                        l3634 1E97                          l3730 0C8B                          l3722 0BC6  
                        l4194 152B                          l4178 14EF                          l3378 1257  
                        l3298 1E5E                          l4266 1F97                          l4258 1F7F  
                        l2780 1E00                          l2772 1DDE                          l3492 13D7  
                        l3484 13B6                          l3476 13A3                          l3572 17D2  
                        l3564 17AD                          l3556 1783                          l3548 1764  
                        l2844 08A0                          l3804 12B3                          l2684 15B8  
                        l3740 1432                          l3580 06D8                          l3644 1EBA  
                        l3636 1E9A                          l3652 1ECE                          l3716 0B9E  
                        l3900 0DB7                          l3660 1C8B                          l4196 153D  
                        l4188 150E                          l4268 1F9C                          l2782 1E02  
                        l2774 1DE2                          l3494 13E6                          l3486 13C2  
                        l3478 13A8                          l3574 17E2                          l3566 17BD  
                        l3558 178F                          l3814 1CBF                          l2846 08AB  
                        l3806 12B4                          l3830 1119                          l3822 10FB  
                        l2694 15DA                          l3750 144E                          l3582 06EB  
                        l3646 1EC0                          l3638 1EA1                          l3734 0CF7  
                        l3902 0DBC                          l3910 0E04                          l3662 1C8E  
                        l4198 1541                          l3670 1C48                          l2784 1E04  
                        l2776 1DEF                          l2792 1C09                          l3496 13F0  
                        l3488 13C9                          l3576 17E4                          l3568 17BE  
                        l3816 1CC8                          l3808 12BD                          l3832 112B  
                        l3824 1105                          l2696 160E                          l2688 15C1  
                        l3760 1477                          l3752 1454                          l3744 143B  
                        l3592 070A                          l3648 1EC1                          l3680 0980  
                        l3728 0C84                          l3920 0E4A                          l3912 0E08  
                        l3904 0DD1                          l3664 1C97                          l3656 1C82  
                        l3672 1C4B                          l2786 1E12                          l2778 1DF3  
                        l2794 1C10                          l3498 13F4                          l3818 1CCA  
                        l3834 1139                          l3826 1108                          l3842 1D0D  
                        l2698 1616                          l3770 14A2                          l3762 1485  
                        l3754 1463                          l3738 141F                          l3594 0737  
                        l3586 06F2                          l3690 0A0F                          l3930 0E7C  
                        l3922 0E50                          l3906 0DEC                          l3658 1C85  
                        l3674 1C50                          l3666 1C3F                          l2788 1E14  
                        l2796 1C12                          l3836 1142                          l3828 1115  
                        l3844 1D14                          l3764 148F                          l3756 1465  
                        l3596 0738                          l3588 0703                          l3676 08B7  
                        l3940 0ECD                          l3932 0E91                          l3924 0E54  
                        l3916 0E0E                          l3908 0DF2                          l3860 1CB3  
                        l3852 1C9C                          l3668 1C42                          l3790 1264  
                        l3838 1148                          l3846 1D21                          l3766 1490  
                        l3758 146E                          l3598 0739                          l3694 0A29  
                        l3678 08BD                          l3686 099A                          l3950 0F13  
                        l3942 0ED3                          l3934 0E95                          l3926 0E5F  
                        l3918 0E34                          l3862 1CB8                          l3854 1CA1  
                        l3870 1EFC                          l3792 1276                          l3848 1D27  
                        l3784 14C3                          l3776 14AA                          l3768 1498  
                        l3688 09A0                          l3960 0F9A                          l3952 0F2C  
                        l3944 0EE6                          l3936 0E99                          l3928 0E67  
                        l3880 0D40                          l3872 0D1B                          l3856 1CA6  
                        l3864 1ED3                          l3794 1279                          l3786 14D3  
                        l3778 14BC                          l3698 0A60                          l3970 002D  
                        l3954 0F65                          l3946 0F09                          l3938 0EA0  
                        l3962 0FA2                          l3890 0D8A                          l3882 0D44  
                        l3874 0D26                          l3858 1CAD                          l3866 1ED8  
                        l3796 1286                          l3980 0083                          l3972 004C  
                        l3964 0FB1                          l3956 0F7A                          l3948 0F0D  
                        l3892 0D90                          l3884 0D56                          l3876 0D2C  
                        l3868 1EF4                          l3798 128A                          l3990 0138  
                        l3974 005B                          l3966 0FEA                          l3958 0F83  
                        l3886 0D5A                          l3894 0DA0                          l3878 0D39  
                        l3992 013A                          l3984 009B                          l3976 0072  
                        l3968 0024                          l3896 0DAE                          l3888 0D6F  
                        l3986 00B6                          l3978 007B                          l3898 0DB1  
                        l3988 00BD                          l3998 013C                          STR_1 1086  
                        STR_2 10C4                          STR_3 10B2                          STR_4 10BF  
                        STR_5 10C9                          STR_6 10A1                          STR_7 10AE  
                        STR_8 10AA                          STR_9 10AE                          u3100 1C1A  
                        u3101 1C19                          u3110 1BEF                          u3111 1BEE  
                        u3040 1E1C                          u3200 1C3A                          u2400 12D3  
                        u3041 1E1B                          u3201 1C39                          u2401 12D2  
                        u2410 12DE                          u2411 12DD                          u3060 1E2E  
                        u2420 12EF                          u2500 1156                          u3061 1E2D  
                        u2421 12EE                          u2501 1155                          u3070 1E38  
                        u2510 1161                          u3071 1E37                          u3055 1E20  
                        u2511 1160                          u3400 1697                          u5000 1E97  
                        u2440 1301                          u2520 116C                          u3401 1696  
                        u5001 1E96                          u2441 1300                          u2521 116B  
                        u3090 1E4B                          u3091 1E4A                          u3075 1E34  
                        u2435 12F3                          u3420 16A9                          u3340 15B8  
                        u2380 1C72                          u5020 1EA9                          u2460 1312  
                        u2540 117E                          u5100 0A6D                          u3421 16A8  
                        u3341 15B7                          u2381 1C71                          u5021 1EA8  
                        u3085 1E3F                          u2461 1311                          u2541 117D  
                        u5101 0A6C                          u3430 16B0                          u3350 15D9  
                        u2390 1C7F                          u3190 1C34                          u2550 1188  
                        u5110 0B32                          u3431 16AF                          u3415 1699  
                        u3351 15D8                          u2391 1C7E                          u5015 1E9B  
                        u3191 1C33                          u2455 1302                          u2551 1187  
                        u2535 1170                          u5111 0B31                          u3600 1C10  
                        u5200 14A2                          u5040 1EBA                          u2480 1326  
                        u5120 0BC6                          u6000 06BA                          u4400 1C5C  
                        u3601 1C0F                          u5201 14A1                          u5041 1EB9  
                        u2481 1325                          u2465 130E                          u5121 0BC5  
                        u6001 06B9                          u4401 1C5B                          u3450 16C1  
                        u3370 1656                          u5210 14A9                          u2490 132B  
                        u2570 119B                          u5130 0C8B                          u6010 06D1  
                        u3451 16C0                          u3371 1655                          u5211 14A8  
                        u5035 1EAA                          u2491 132A                          u2475 131A  
                        u2571 119A                          u2555 1184                          u5131 0C8A  
                        u6011 06CE                          u4500 13A8                          u3700 089B  
                        u3620 083B                          u3460 0809                          u3380 168C  
                        u5140 1432                          u5060 1ECE                          u2580 11A0  
                        u6020 1CEB                          u6100 1582                          u4501 13A7  
                        u3701 089A                          u3621 083A                          u3461 0808  
                        u3445 16B3                          u3381 168B                          u3365 1623  
                        u5141 1431                          u5061 1ECD                          u5045 1EB6  
                        u2581 119F                          u2565 118F                          u6021 1CEA  
                        u6101 1581                          u4510 13AF                          u3710 08A0  
                        u3630 084F                          u5310 12A5                          u3390 1690  
                        u5230 14BB                          u5150 144C                          u5070 08BD  
                        u6030 14EF                          u4511 13AE                          u3711 089F  
                        u5311 12A4                          u3391 168F                          u3375 1652  
                        u5231 14BA                          u5151 144B                          u5055 1EC2  
                        u5071 08BC                          u6031 14EE                          u4600 140F  
                        u3640 086A                          u5400 1148                          u5240 14C2  
                        u5080 09A0                          u6040 1507                          u3641 0869  
                        u5305 128C                          u5401 1147                          u5241 14C1  
                        u5225 14AB                          u5081 099F                          u6041 1506  
                        u3570 1DE2                          u4610 141D                          u4530 13C8  
                        u3650 0871                          u5330 12C3                          u3490 0823  
                        u5170 1485                          u5090 0A64                          u6050 1524  
                        u3571 1DE1                          u4611 141C                          u4531 13C7  
                        u3651 0870                          u3635 084B                          u5331 12C2  
                        u5315 12A1                          u3491 0822                          u3475 0810  
                        u5171 1484                          u5091 0A63                          u3580 1DF3  
                        u4700 1738                          u4620 16E9                          u5340 1CC8  
                        u5420 1D27                          u5260 14D3                          u5500 0DA0  
                        u6060 1536                          u3581 1DF2                          u4605 140B  
                        u4525 13BB                          u4701 1737                          u4621 16E8  
                        u5341 1CC7                          u5325 12B5                          u5421 1D26  
                        u3485 0817                          u5261 14D2                          u5165 1470  
                        u5501 0D9F                          u6117 1C4D                          u3590 1E12  
                        u4550 13E5                          u4630 16EF                          u3670 0883  
                        u5270 1276                          u5350 1105                          u5190 149E  
                        u5510 0DAE                          u5430 1CA1                          u4390 10FA  
                        u3591 1E11                          u4551 13E4                          u4631 16EE  
                        u3671 0882                          u5271 1275                          u5351 1104  
                        u5415 1D15                          u5255 14C5                          u5191 149D  
                        u5175 1481                          u5511 0DAD                          u6055 1520  
                        u6207 1D6C                          u6127 1D7B                          u5431 1CA0  
                        u4391 10F9                          u4720 1748                          u4640 16F9  
                        u3680 088A                          u5600 0F9A                          u5520 0E03  
                        u6080 1569                          u5440 1CB3                          u4545 13D8  
                        u4721 1747                          u4641 16F8                          u3681 0889  
                        u3665 0873                          u5185 1491                          u5601 0F99  
                        u5521 0E02                          u6217 1F23                          u6081 1568  
                        u6065 1532                          u6137 1D92                          u5441 1CB2  
                        u4570 13F4                          u4810 1795                          u4730 1750  
                        u4650 1705                          u5290 128A                          u5370 1119  
                        u5610 0FB1                          u5530 0E4A                          u5450 1EE2  
                        u3595 1E0E                          u4571 13F3                          u4811 1794  
                        u4731 174F                          u4715 1739                          u4651 1704  
                        u5291 1289                          u5371 1118                          u5611 0FB0  
                        u5531 0E47                          u6227 1F32                          u6075 1554  
                        u6147 1DA0                          u4580 13FA                          u4820 1799  
                        u4660 170B                          u5380 112B                          u4900 074D  
                        u5700 01C0                          u5620 0024                          u5540 0E50  
                        u5460 1F06                          _RCIF 0065                          u4581 13F9  
                        u4565 13E9                          u4821 1798                          u4805 1784  
                        u4661 170A                          u5285 127B                          u5381 112A  
                        u5365 110A                          u4901 074C                          u5701 01BF  
                        u5621 0FFA                          u5541 0E4F                          u6237 1F41  
                        u6085 1565                          u6157 1DAF                          u4590 13FE  
                        u4830 17AD                          u4750 1763                          u4670 1715  
                        u5710 01D8                          u5630 002D                          u5550 0E7C  
                        u5470 1F18                          u4591 13FD                          u4831 17AC  
                        u4751 1762                          u4671 1714                          u3695 088D  
                        u4911 0756                          u5711 01D7                          u5631 002C  
                        u5615 0FAD                          u5551 0E7B                          u6247 1C92  
                        u6095 1575                          u6167 1DC8                          u5471 1F17  
                        u4760 176A                          u4680 171E                          u4912 075D  
                        u5720 0204                          u5640 004C                          u5560 0EA0  
                        u5480 0D2C                          u4841 17C7                          u4761 1769  
                        u4745 1752                          u4681 171D                          u5385 1127  
                        u5721 0203                          u5641 004B                          u5625 0FF5  
                        u5561 0E9F                          u5481 0D2B                          u6177 1DD6  
                        u4850 17D2                          u4842 17CE                          u4690 1723  
                        u5810 0490                          u5730 0218                          u5650 005B  
                        u5570 0EB6                          u5490 0D56                          u4851 17D1  
                        u4691 1722                          u5395 113A                          u5811 048F  
                        u5731 0217                          u5651 005A                          u5491 0D55  
                        u6187 1D47                          u4780 177A                          u4940 0773  
                        u4860 06EB                          u5900 057B                          u5820 04B0  
                        u5660 0072                          u5580 0F0D                          u4781 1779  
                        u4941 0772                          u4925 075E                          u4861 06EA  
                        u5901 057A                          u5821 04AF                          u5805 0433  
                        u5725 0200                          u5661 0071                          u5581 0F0C  
                        u6197 1D5E                          u4790 1782                          u4950 077B  
                        u4870 0703                          u5910 0594                          u5830 04D8  
                        u5750 02C5                          u5590 0F7A                          u4791 1781  
                        u4775 176B                          u4951 077A                          u4935 0766  
                        u4871 0702                          u5911 0593                          u5831 04D7  
                        u5751 02C4                          u5655 0057                          u5591 0F79  
                        u5575 0EB1                          u4880 071A                          u5920 05A6  
                        u5840 04ED                          u5760 02EC                          u5680 0182  
                        u4961 0784                          u5921 05A5                          u5905 0577  
                        u5841 04EC                          u5761 02EB                          u5745 022F  
                        u5681 0181                          u4962 078B                          u4890 072C  
                        u5930 05B4                          u5850 04F5                          u5770 02FB  
                        u5690 0191                          u5931 05B3                          u5851 04F4  
                        u5771 02FA                          u5691 0190                          u5675 0141  
                        u5940 05CA                          u5780 0324                          u4885 0716  
                        u5941 05C9                          u5781 0323                          u5765 02E8  
                        u5685 017E                          u4990 07A1                          u5950 05E2  
                        u5870 0543                          u4991 07A0                          u4975 078C  
                        u4895 0728                          u5951 05E1                          u5871 0542  
                        u5775 02F7                          u5960 0600                          u5880 0552  
                        u4985 0794                          u5961 05FF                          u5945 05C6  
                        u5881 0551                          u5865 0502                          u5970 061F  
                        u5890 055D                          u5971 061E                          u5955 05DE  
                        u5891 055C                          u5875 053F                          u5795 03A1  
                        u5980 0631                          u5981 0630                          u5895 0559  
                        u5995 0654                          _TRMT 04C1             ?_Lcd_Write_String 0075  
             __end_of_SPI_ADC 1D74                          _cont 006E                          _main 1F64  
                ___ftpack@arg 0072                  ___ftpack@exp 0075                          btemp 007E  
                        start 000C            ??_Lcd_Write_String 0077                  _sprintf$1241 00CF  
             __end_of_Lcd_Cmd 1C9B             ___bmul@multiplier 002B                  ___ftmul@cntr 003A  
                ___ftmul@sign 003B               __end_of_Mapeo_M 13A3                         ??_ISR 0070  
                ___fttol@exp1 0052                  ___fttol@lval 004E                         ?_main 0070  
             __end_of___awdiv 1335               __end_of___ftadd 1800                         STR_10 1098  
                       STR_11 10B9               __end_of___awmod 11AA               __end_of___ftdiv 159E  
             __end_of___ftneg 1C13                         _ANSEL 0188               __end_of___lldiv 12CC  
             __end_of___ftmul 07BD               ___awdiv@divisor 0020               __end_of___llmod 1151  
             __end_of___ftsub 1CE4               __end_of___fttol 08B4               __end_of___lwdiv 1ED3  
                       i1l105 1BE2               __end_of___lwmod 1E50               ___awdiv@counter 0024  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009       __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085  
                       _TRISB 0086                         _TRISD 0088                         _TRISE 0089  
                       _TXREG 0019                  ___lltoft@exp 0025                 ___awtoft@sign 0025  
             __end_of_dpowers 1086               __end_of_initOsc 1206              __end_of_SPI_CONT 1DDE  
                       _scale 0A5D               __end_of_isdigit 1C3E              __end_of_SPI_TEMP 1DA8  
               ___ftpack@sign 0076                         _setup 1E50                         pclath 000A  
             __end_of_spiInit 1C6A               __end_of_spiRead 1C09                         status 0003  
                       wtemp0 007E               __end_of_sprintf 06D8                   ?_USART_Init 0070  
            __end_of_Lcd_Init 1F64              __end_of_Lcd_Port 1BD6               __initialization 000F  
                __end_of_main 1FAF                        ??_main 007A                 ___fttol@sign1 004D  
          __size_of_Lcd_Clear 000D          __size_of__tdiv_to_l_ 00BD                     ??_SPI_ADC 0073  
            ___llmod@dividend 002A                        ?_scale 003C                   initOsc@IRCF 0074  
            ___awdiv@dividend 0022           _USART_Init_BaudRate 1BDC                        ?_setup 0070  
            __end_of___awtoft 1D0D              __end_of___ftpack 141F                        _ANSELH 0189  
            __end_of___lltoft 1D40                     ??_Lcd_Cmd 0073                        _SPBRGH 009A  
     __size_of_Lcd_Write_Char 0016                        _TRISC0 0438                        _TRISC1 0439  
                      _TRISC2 043A                        _TRISC3 043B                        _TRISC5 043D  
                      _SSPCON 0014                        _SSPBUF 0013                     ??_Mapeo_M 004C  
            __end_of__powers_ 1037                        ___bmul 1C6A                        ___ftge 1DDE  
                      ___wmul 0803                     ??___awdiv 0079                     ??___ftadd 0052  
                   ??___awmod 0076          ?_USART_Init_BaudRate 0070                     ??___ftdiv 0042  
                   ??___ftneg 0075                     ??___lldiv 0020                     ??___ftmul 0032  
                   ??___llmod 002E                     ??___ftsub 007A                     ??___fttol 0049  
                   ??___lwdiv 0078                     ??___lwmod 0076                        _fround 08B4  
            ___awdiv@quotient 0026               ___awmod@divisor 0072               ___awmod@counter 0077  
       ___ftmul@f3_as_product 0037                     ??_initOsc 0072                     ??_isdigit 0072  
                      saved_w 007E              __end_of_spiWrite 1BDC                     ??_spiInit 0075  
                   ??_spiRead 0072           __size_of_USART_Init 0008                 ??_Show_val_VT 0077  
                   ??_sprintf 0063               Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076  
     __end_of__initialization 0020                    ___ftadd@f1 004C                    ___ftadd@f2 004F  
                  ___ftge@ff1 0072                    ___ftge@ff2 0075             __end_of_Lcd_Clear 1C2C  
                  ___ftdiv@f1 003F                    ___ftdiv@f2 003C                    ___ftdiv@f3 0047  
                  ___ftneg@f1 0072                    ___awtoft@c 0020           ___bmul@multiplicand 0028  
                  ___ftmul@f1 002C                    ___ftmul@f2 002F                    ___ftsub@f1 005C  
                  ___ftsub@f2 0059                    ___fttol@f1 0045                __pcstackCOMMON 0070  
       ??_USART_Init_BaudRate 0072                    ___lltoft@c 0020                 __end_of_scale 0D18  
                   ?_SPI_CONT 0070                 __end_of_setup 1E8D                     ?_SPI_TEMP 0070  
              _Lcd_Set_Cursor 1C9B                    __div_to_l_ 159E                     ?_Lcd_Init 0070  
                   ?_Lcd_Port 0070               __div_to_l_@exp1 002D               __div_to_l_@cntr 002C  
                     ??_scale 003F               __div_to_l_@quot 0028                  sprintf@width 00D5  
                     ??_setup 0076                  Write_USART@a 0072                    __pbssBANK0 006C  
                  __pbssBANK1 00A0           __end_of_Show_val_VT 1264                    _data_total 00A0  
               __div_to_l_@f1 0072                 __div_to_l_@f2 0075                    __pmaintext 1F64  
                     ?___bmul 0028                       ?___ftge 0072                       ?___wmul 0072  
               ??_Write_USART 0072                    __pintentry 0004       __size_of_spiReceiveWait 0007  
                  ??_SPI_CONT 0073                    ??_SPI_TEMP 0073                       ?_fround 003C  
   __size_of_Lcd_Write_String 0046                     ?___awtoft 0020                     ?___ftpack 0072  
      __end_of_Lcd_Set_Cursor 1CBF                     ?___lltoft 0020        __size_of_ADC_to_string 0042  
  __end_of_Write_USART_String 10FB                    ??_Lcd_Init 0076                    ??_Lcd_Port 0072  
                     _SPI_ADC 1D40                       _SSPSTAT 0094                    __stringtab 1000  
              _Lcd_Write_Char 1C3E                       _Lcd_Cmd 1C81                       _Mapeo_M 1335  
                ??_USART_Init 0072             __end_of__npowers_ 105E                    _scale$1240 0041  
                   _ADC_val_M 00B4                     ?_spiWrite 0070               __size_of___bmul 0017  
               ?_Show_val_LCD 0070               __size_of___ftge 0038                       ___awdiv 12CC  
                     ___ftadd 16CA                       ___awmod 1151                       ___ftdiv 14DC  
                     ___ftneg 1C09                       ___lldiv 1264               __size_of___wmul 0025  
                     ___ftmul 06D8                       ___llmod 10FB                       ___ftsub 1CBF  
                     ___fttol 0828                       ___lwdiv 1E8D                       ___lwmod 1E16  
                  ??___awtoft 0023                    ??___ftpack 0077               __size_of_fround 01A9  
             ?_Lcd_Set_Cursor 0076                    ??___lltoft 0024                       __ptext1 1E50  
                     __ptext2 1C54                       __ptext3 11AA                       __ptext4 1BDC  
                     __ptext5 1BF0                       __ptext6 1206                       __ptext7 10D0  
                     __ptext8 1C13                       __ptext9 1FAF                  __size_of_ISR 0007  
                 ?__div_to_l_ 0072                       _dpowers 105E                       _initOsc 11AA  
         __end_of_Write_USART 1C1F                       _isdigit 1C2C                       _val_ADC 007B  
            ___awmod@dividend 0074                       _spiInit 1C54                       _spiRead 1C00  
          __end_of_USART_Init 1BF8                   _Show_val_VT 1206                       _sprintf 0D18  
                     clrloop0 1BF9        __end_of_Lcd_Write_Char 1C54          end_of_initialization 0020  
               _ADC_to_string 07BD               ___lldiv@divisor 0072               ___lldiv@counter 0025  
              ??_Show_val_LCD 0022                     _RCSTAbits 0018                    ??_spiWrite 0072  
                     psplit$0 26003F                     Lcd_Port@a 0072                __tdiv_to_l_@f1 0072  
              __tdiv_to_l_@f2 0075                 ??__tdiv_to_l_ 0020                     _PORTCbits 0007  
                   _PORTEbits 0009                   spiWrite@dat 0072               ?_Lcd_Write_Char 0070  
           Lcd_Write_String@a 0075             Lcd_Write_String@i 0020                ?_ADC_to_string 0070  
                 ___ftdiv@exp 004A                     _TXSTAbits 0098           __size_of__div_to_l_ 012C  
                 ___ftmul@exp 0036                     _Lcd_Clear 1C1F                _spiReceiveWait 1BE9  
              __end_of___bmul 1C81                __end_of___ftge 1E16                   _Write_USART 1C13  
              __end_of___wmul 0828              _Lcd_Write_String 1ED3                __end_of_fround 0A5D  
           __size_of_SPI_CONT 0036             __size_of_SPI_TEMP 0034           start_initialization 000F  
                 __end_of_ISR 1BE9           __end_of__tdiv_to_l_ 14DC             __size_of_Lcd_Init 004B  
                _hola_esclavo 006F             __size_of_Lcd_Port 0006               ___llmod@divisor 0026  
 __end_of_USART_Init_BaudRate 1BE2               ___llmod@counter 002F        __end_of_spiReceiveWait 1BF0  
                  ?_Lcd_Clear 0070                      ??___bmul 0029                      ??___ftge 0078  
                    ??___wmul 0076               Lcd_Write_Char@a 0074                      ??_fround 003F  
               sprintf@tmpval 00D7                    fround@prec 004B             __size_of___awtoft 0029  
           __size_of___ftpack 007C             __size_of___lltoft 0033                   __pbssCOMMON 007A  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00CF  
                _isdigit$1035 0072                      ?_SPI_ADC 0070          __end_of_Show_val_LCD 2000  
             ??_ADC_to_string 0069                      ?_Lcd_Cmd 0070                   sprintf@flag 00D3  
                 sprintf@eexp 00DF                   sprintf@fval 00E1                     _data_TEMP 00B7  
          _Write_USART_String 10D0                   sprintf@prec 00E5                      ?_Mapeo_M 0070  
                   _data_cont 00C7              ___lwdiv@dividend 0022               ?_spiReceiveWait 0070  
            ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0073                      ?___awdiv 0020  
                    ?___ftadd 004C                      ?___awmod 0072                      ?___ftdiv 003C  
                    ?___ftneg 0072                      ?___lldiv 0072                      ?___ftmul 002C  
                    ?___llmod 0026                      ?___ftsub 0059                     __npowers_ 1037  
                    ?___fttol 0045                      ?___lwdiv 0020                      ?___lwmod 0072  
           __size_of_spiWrite 0006                     __pstrings 1000                   __tdiv_to_l_ 141F  
                ??__div_to_l_ 0020                      ?_initOsc 0070                      ?_isdigit 0070  
                    ?_spiInit 0072                      ?_spiRead 0070          ??_Write_USART_String 0075  
                ?_Show_val_VT 0070              ___lwdiv@quotient 0025                    pnum$text27 0026  
                    ?_sprintf 005F                __size_of_scale 02BB                __size_of_setup 003D  
               _mv_temp_val_M 006C          spiInit@sTransmitEdge 0074             interrupt_function 0004  
              ___wmul@product 0076                     clear_ram0 1BF8                      _PIE1bits 008C  
          spiInit@sDataSample 0072                      Lcd_Cmd@a 0075            __end_of__div_to_l_ 16CA  
                 ??_Lcd_Clear 0076                      _SPI_CONT 1DA8                      _SPI_TEMP 1D74  
                 __stringbase 100F             ___wmul@multiplier 0072              ??_Lcd_Write_Char 0073  
                    _Lcd_Init 1F19                      _Lcd_Port 1BD0              __size_of_SPI_ADC 0034  
    __end_of_Lcd_Write_String 1F19              __size_of_Lcd_Cmd 001A              __size_of_Mapeo_M 006E  
                ?_Write_USART 0070              __size_of___awdiv 0069              __size_of___ftadd 0136  
            __size_of___awmod 0059              __size_of___ftdiv 00C2              __size_of___ftneg 000A  
            __size_of___lldiv 0068              __size_of___ftmul 00E5              __size_of___llmod 0056  
            __size_of___ftsub 0025              __size_of___fttol 008C              __size_of___lwdiv 0046  
            __size_of___lwmod 003A                      ___awtoft 1CE4                      ___ftpack 13A3  
                 _fround$1238 0048                   _fround$1239 0045            __end_of__stringtab 1010  
                    ___lltoft 1D0D         __size_of_Show_val_LCD 0051                      _data_ADC 00BF  
                  sprintf@val 00DB              __size_of_initOsc 005C              __size_of_isdigit 0012  
             ___lwdiv@divisor 0020               ___lwdiv@counter 0024                      __ptext10 1ED3  
                    __ptext11 1C3E                      __ptext20 14DC                      __ptext12 1C9B  
                    __ptext21 1CE4                      __ptext13 1D74                      __ptext30 12CC  
                    __ptext22 1F19                      __ptext14 1DA8                      __ptext31 1C2C  
                    __ptext23 1C1F                      __ptext15 1D40                      __ptext40 1D0D  
                    __ptext32 08B4                      __ptext24 1C81                      __ptext16 1BD6  
                    __ptext41 10FB                      __ptext33 1E16                      __ptext25 1BD0  
                    __ptext17 1C00                      __ptext42 1264                      __ptext34 1E8D  
                    __ptext26 07BD                      __ptext18 1BE9                      __ptext43 0828  
                    __ptext35 06D8                      __ptext27 0D18                      __ptext19 1335  
                    __ptext44 1CBF                      __ptext36 1C6A                      __ptext28 0A5D  
                    __ptext45 16CA                      __ptext37 141F                      __ptext29 1151  
                    __ptext46 13A3                      __ptext38 159E                      __ptext47 1C09  
                    __ptext39 0803                      __ptext48 1DDE                      __ptext49 1BE2  
            __size_of_spiInit 0016              __size_of_spiRead 0009                      __powers_ 1010  
            __size_of_sprintf F9C0                 __size_of_main 004B                      _val_TEMP 007A  
                    _spiWrite 1BD6                  _Show_val_LCD 1FAF                  spiInit@sType 0075  
           spiInit@sClockIdle 0073                    _INTCONbits 000B           Write_USART_String@a 0073  
         Write_USART_String@i 0076            pnum$text27_split_1 003F                      isdigit@c 0073  
                    scale@scl 0044                      intlevel1 0000                     sprintf@ap 00D2  
            __tdiv_to_l_@exp1 0029          __size_of_Show_val_VT 005E              __tdiv_to_l_@cntr 0028  
                   sprintf@sp 00E4              __tdiv_to_l_@quot 0024              ___lwmod@dividend 0074  
            ___lldiv@dividend 0076              ??_spiReceiveWait 0072                     stringcode 100A  
                  _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006            Lcd_Set_Cursor@temp 0079  
                ?__tdiv_to_l_ 0072                      sprintf@c 00E7                      sprintf@f 005F  
            ___lldiv@quotient 0021               ___lwmod@divisor 0072               ___lwmod@counter 0077  
                    stringdir 100A                      stringtab 1000         __end_of_ADC_to_string 07FF  
                  _USART_Init 1BF0  
