

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 12:57:42 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text26,local,class=CODE,merge=1,delta=2,group=3
    38                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text30,local,class=CODE,merge=1,delta=2
    42                           	psect	intentry,global,class=CODE,delta=2
    43                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    44                           	dabs	1,0x7E,2
    45  0000                     
    46                           ; Version 2.20
    47                           ; Generated 12/02/2020 GMT
    48                           ; 
    49                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC16F887 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  000E                     	;# 
    96  000F                     	;# 
    97  0010                     	;# 
    98  0011                     	;# 
    99  0012                     	;# 
   100  0013                     	;# 
   101  0014                     	;# 
   102  0015                     	;# 
   103  0015                     	;# 
   104  0016                     	;# 
   105  0017                     	;# 
   106  0018                     	;# 
   107  0019                     	;# 
   108  001A                     	;# 
   109  001B                     	;# 
   110  001B                     	;# 
   111  001C                     	;# 
   112  001D                     	;# 
   113  001E                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  0087                     	;# 
   119  0088                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  0105                     	;# 
   144  0107                     	;# 
   145  0108                     	;# 
   146  0109                     	;# 
   147  010C                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0187                     	;# 
   154  0188                     	;# 
   155  0189                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  000E                     	;# 
   174  000F                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  001D                     	;# 
   191  001E                     	;# 
   192  001F                     	;# 
   193  0081                     	;# 
   194  0085                     	;# 
   195  0086                     	;# 
   196  0087                     	;# 
   197  0088                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0093                     	;# 
   209  0094                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0097                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009A                     	;# 
   216  009B                     	;# 
   217  009C                     	;# 
   218  009D                     	;# 
   219  009E                     	;# 
   220  009F                     	;# 
   221  0105                     	;# 
   222  0107                     	;# 
   223  0108                     	;# 
   224  0109                     	;# 
   225  010C                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  0185                     	;# 
   231  0187                     	;# 
   232  0188                     	;# 
   233  0189                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  000E                     	;# 
   252  000F                     	;# 
   253  0010                     	;# 
   254  0011                     	;# 
   255  0012                     	;# 
   256  0013                     	;# 
   257  0014                     	;# 
   258  0015                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0017                     	;# 
   262  0018                     	;# 
   263  0019                     	;# 
   264  001A                     	;# 
   265  001B                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001D                     	;# 
   269  001E                     	;# 
   270  001F                     	;# 
   271  0081                     	;# 
   272  0085                     	;# 
   273  0086                     	;# 
   274  0087                     	;# 
   275  0088                     	;# 
   276  0089                     	;# 
   277  008C                     	;# 
   278  008D                     	;# 
   279  008E                     	;# 
   280  008F                     	;# 
   281  0090                     	;# 
   282  0091                     	;# 
   283  0092                     	;# 
   284  0093                     	;# 
   285  0093                     	;# 
   286  0093                     	;# 
   287  0094                     	;# 
   288  0095                     	;# 
   289  0096                     	;# 
   290  0097                     	;# 
   291  0098                     	;# 
   292  0099                     	;# 
   293  009A                     	;# 
   294  009B                     	;# 
   295  009C                     	;# 
   296  009D                     	;# 
   297  009E                     	;# 
   298  009F                     	;# 
   299  0105                     	;# 
   300  0107                     	;# 
   301  0108                     	;# 
   302  0109                     	;# 
   303  010C                     	;# 
   304  010C                     	;# 
   305  010D                     	;# 
   306  010E                     	;# 
   307  010F                     	;# 
   308  0185                     	;# 
   309  0187                     	;# 
   310  0188                     	;# 
   311  0189                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  0000                     	;# 
   315  0001                     	;# 
   316  0002                     	;# 
   317  0003                     	;# 
   318  0004                     	;# 
   319  0005                     	;# 
   320  0006                     	;# 
   321  0007                     	;# 
   322  0008                     	;# 
   323  0009                     	;# 
   324  000A                     	;# 
   325  000B                     	;# 
   326  000C                     	;# 
   327  000D                     	;# 
   328  000E                     	;# 
   329  000E                     	;# 
   330  000F                     	;# 
   331  0010                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0013                     	;# 
   335  0014                     	;# 
   336  0015                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  001D                     	;# 
   347  001E                     	;# 
   348  001F                     	;# 
   349  0081                     	;# 
   350  0085                     	;# 
   351  0086                     	;# 
   352  0087                     	;# 
   353  0088                     	;# 
   354  0089                     	;# 
   355  008C                     	;# 
   356  008D                     	;# 
   357  008E                     	;# 
   358  008F                     	;# 
   359  0090                     	;# 
   360  0091                     	;# 
   361  0092                     	;# 
   362  0093                     	;# 
   363  0093                     	;# 
   364  0093                     	;# 
   365  0094                     	;# 
   366  0095                     	;# 
   367  0096                     	;# 
   368  0097                     	;# 
   369  0098                     	;# 
   370  0099                     	;# 
   371  009A                     	;# 
   372  009B                     	;# 
   373  009C                     	;# 
   374  009D                     	;# 
   375  009E                     	;# 
   376  009F                     	;# 
   377  0105                     	;# 
   378  0107                     	;# 
   379  0108                     	;# 
   380  0109                     	;# 
   381  010C                     	;# 
   382  010C                     	;# 
   383  010D                     	;# 
   384  010E                     	;# 
   385  010F                     	;# 
   386  0185                     	;# 
   387  0187                     	;# 
   388  0188                     	;# 
   389  0189                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  0000                     	;# 
   393  0001                     	;# 
   394  0002                     	;# 
   395  0003                     	;# 
   396  0004                     	;# 
   397  0005                     	;# 
   398  0006                     	;# 
   399  0007                     	;# 
   400  0008                     	;# 
   401  0009                     	;# 
   402  000A                     	;# 
   403  000B                     	;# 
   404  000C                     	;# 
   405  000D                     	;# 
   406  000E                     	;# 
   407  000E                     	;# 
   408  000F                     	;# 
   409  0010                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0013                     	;# 
   413  0014                     	;# 
   414  0015                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0017                     	;# 
   418  0018                     	;# 
   419  0019                     	;# 
   420  001A                     	;# 
   421  001B                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  001D                     	;# 
   425  001E                     	;# 
   426  001F                     	;# 
   427  0081                     	;# 
   428  0085                     	;# 
   429  0086                     	;# 
   430  0087                     	;# 
   431  0088                     	;# 
   432  0089                     	;# 
   433  008C                     	;# 
   434  008D                     	;# 
   435  008E                     	;# 
   436  008F                     	;# 
   437  0090                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0093                     	;# 
   441  0093                     	;# 
   442  0093                     	;# 
   443  0094                     	;# 
   444  0095                     	;# 
   445  0096                     	;# 
   446  0097                     	;# 
   447  0098                     	;# 
   448  0099                     	;# 
   449  009A                     	;# 
   450  009B                     	;# 
   451  009C                     	;# 
   452  009D                     	;# 
   453  009E                     	;# 
   454  009F                     	;# 
   455  0105                     	;# 
   456  0107                     	;# 
   457  0108                     	;# 
   458  0109                     	;# 
   459  010C                     	;# 
   460  010C                     	;# 
   461  010D                     	;# 
   462  010E                     	;# 
   463  010F                     	;# 
   464  0185                     	;# 
   465  0187                     	;# 
   466  0188                     	;# 
   467  0189                     	;# 
   468  018C                     	;# 
   469  018D                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  000E                     	;# 
   486  000F                     	;# 
   487  0010                     	;# 
   488  0011                     	;# 
   489  0012                     	;# 
   490  0013                     	;# 
   491  0014                     	;# 
   492  0015                     	;# 
   493  0015                     	;# 
   494  0016                     	;# 
   495  0017                     	;# 
   496  0018                     	;# 
   497  0019                     	;# 
   498  001A                     	;# 
   499  001B                     	;# 
   500  001B                     	;# 
   501  001C                     	;# 
   502  001D                     	;# 
   503  001E                     	;# 
   504  001F                     	;# 
   505  0081                     	;# 
   506  0085                     	;# 
   507  0086                     	;# 
   508  0087                     	;# 
   509  0088                     	;# 
   510  0089                     	;# 
   511  008C                     	;# 
   512  008D                     	;# 
   513  008E                     	;# 
   514  008F                     	;# 
   515  0090                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0093                     	;# 
   519  0093                     	;# 
   520  0093                     	;# 
   521  0094                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0098                     	;# 
   526  0099                     	;# 
   527  009A                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  009F                     	;# 
   533  0105                     	;# 
   534  0107                     	;# 
   535  0108                     	;# 
   536  0109                     	;# 
   537  010C                     	;# 
   538  010C                     	;# 
   539  010D                     	;# 
   540  010E                     	;# 
   541  010F                     	;# 
   542  0185                     	;# 
   543  0187                     	;# 
   544  0188                     	;# 
   545  0189                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548                           
   549                           	psect	strings
   550  030F                     __pstrings:
   551  030F                     stringtab:
   552  030F                     __stringtab:
   553                           
   554                           ;	String table - string pointers are 1 byte each
   555  030F  1BFF               	btfsc	btemp+1,7
   556  0310  2B19               	ljmp	stringcode
   557  0311  1383               	bcf	3,7
   558  0312  187F               	btfsc	btemp+1,0
   559  0313  1783               	bsf	3,7
   560  0314  0800               	movf	0,w
   561  0315  0A84               	incf	4,f
   562  0316  1903               	skipnz
   563  0317  0AFF               	incf	btemp+1,f
   564  0318  0008               	return
   565  0319                     stringcode:
   566  0319                     stringdir:
   567  0319  3003               	movlw	high stringdir
   568  031A  008A               	movwf	10
   569  031B  0804               	movf	4,w
   570  031C  0A84               	incf	4,f
   571  031D  0782               	addwf	2,f
   572  031E                     __stringbase:
   573  031E  3400               	retlw	0
   574  031F                     __end_of__stringtab:
   575  031F                     _dpowers:
   576  031F  3401               	retlw	1
   577  0320  3400               	retlw	0
   578  0321  340A               	retlw	10
   579  0322  3400               	retlw	0
   580  0323  3464               	retlw	100
   581  0324  3400               	retlw	0
   582  0325  34E8               	retlw	232
   583  0326  3403               	retlw	3
   584  0327  3410               	retlw	16
   585  0328  3427               	retlw	39
   586  0329                     __end_of_dpowers:
   587  0013                     _SSPBUF	set	19
   588  0014                     _SSPCON	set	20
   589  001A                     _RCREG	set	26
   590  0019                     _TXREG	set	25
   591  000B                     _INTCONbits	set	11
   592  0018                     _RCSTAbits	set	24
   593  0009                     _PORTEbits	set	9
   594  0007                     _PORTCbits	set	7
   595  0009                     _PORTE	set	9
   596  0008                     _PORTD	set	8
   597  0007                     _PORTC	set	7
   598  0005                     _PORTA	set	5
   599  0006                     _PORTB	set	6
   600  0065                     _RCIF	set	101
   601  0039                     _RC1	set	57
   602  0038                     _RC0	set	56
   603  003A                     _RC2	set	58
   604  0094                     _SSPSTATbits	set	148
   605  0094                     _SSPSTAT	set	148
   606  008C                     _PIE1bits	set	140
   607  0099                     _SPBRG	set	153
   608  009A                     _SPBRGH	set	154
   609  0098                     _TXSTAbits	set	152
   610  008F                     _OSCCONbits	set	143
   611  0089                     _TRISE	set	137
   612  0088                     _TRISD	set	136
   613  0086                     _TRISB	set	134
   614  0085                     _TRISA	set	133
   615  043B                     _TRISC3	set	1083
   616  043D                     _TRISC5	set	1085
   617  04C1                     _TRMT	set	1217
   618  043A                     _TRISC2	set	1082
   619  0439                     _TRISC1	set	1081
   620  0438                     _TRISC0	set	1080
   621  0189                     _ANSELH	set	393
   622  0188                     _ANSEL	set	392
   623  0329                     STR_1:
   624  0329  3463               	retlw	99	;'c'
   625  032A  346F               	retlw	111	;'o'
   626  032B  346E               	retlw	110	;'n'
   627  032C  3474               	retlw	116	;'t'
   628  032D  3420               	retlw	32	;' '
   629  032E  3420               	retlw	32	;' '
   630  032F  3420               	retlw	32	;' '
   631  0330  3453               	retlw	83	;'S'
   632  0331  3432               	retlw	50	;'2'
   633  0332  343A               	retlw	58	;':'
   634  0333  3420               	retlw	32	;' '
   635  0334  3420               	retlw	32	;' '
   636  0335  3420               	retlw	32	;' '
   637  0336  3453               	retlw	83	;'S'
   638  0337  3433               	retlw	51	;'3'
   639  0338  343A               	retlw	58	;':'
   640  0339  3400               	retlw	0
   641  033A                     STR_6:
   642  033A  3454               	retlw	84	;'T'
   643  033B  3445               	retlw	69	;'E'
   644  033C  344D               	retlw	77	;'M'
   645  033D  3450               	retlw	80	;'P'
   646  033E  343A               	retlw	58	;':'
   647  033F  3420               	retlw	32	;' '
   648  0340  3420               	retlw	32	;' '
   649  0341  340A               	retlw	10
   650  0342  3400               	retlw	0
   651  0343                     STR_2:
   652  0343  3443               	retlw	67	;'C'
   653  0344  344F               	retlw	79	;'O'
   654  0345  344E               	retlw	78	;'N'
   655  0346  3454               	retlw	84	;'T'
   656  0347  343A               	retlw	58	;':'
   657  0348  3420               	retlw	32	;' '
   658  0349  3420               	retlw	32	;' '
   659  034A  340A               	retlw	10
   660  034B  3400               	retlw	0
   661  034C                     STR_4:
   662  034C  3441               	retlw	65	;'A'
   663  034D  3444               	retlw	68	;'D'
   664  034E  3443               	retlw	67	;'C'
   665  034F  343A               	retlw	58	;':'
   666  0350  3420               	retlw	32	;' '
   667  0351  3420               	retlw	32	;' '
   668  0352  340A               	retlw	10
   669  0353  3400               	retlw	0
   670  0354                     STR_7:
   671  0354  34B0               	retlw	-80
   672  0355  3443               	retlw	67	;'C'
   673  0356  3420               	retlw	32	;' '
   674  0357  3420               	retlw	32	;' '
   675  0358  340A               	retlw	10
   676  0359  3400               	retlw	0
   677  035A                     STR_10:
   678  035A  3425               	retlw	37	;'%'
   679  035B  342E               	retlw	46	;'.'
   680  035C  3432               	retlw	50	;'2'
   681  035D  3469               	retlw	105	;'i'
   682  035E  3400               	retlw	0
   683  035F                     STR_8:
   684  035F  3425               	retlw	37	;'%'
   685  0360  342E               	retlw	46	;'.'
   686  0361  3433               	retlw	51	;'3'
   687  0362  3469               	retlw	105	;'i'
   688  0363  3400               	retlw	0
   689  0350                     
   690                           	psect	cinit
   691  000F                     start_initialization:	
   692                           ; #config settings
   693                           
   694  000F                     __initialization:
   695                           
   696                           ; Clear objects allocated to COMMON
   697  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   698  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   699                           
   700                           ; Clear objects allocated to BANK0
   701  0011  1383               	bcf	3,7	;select IRP bank0
   702  0012  3020               	movlw	low __pbssBANK0
   703  0013  0084               	movwf	4
   704  0014  3050               	movlw	low (__pbssBANK0+48)
   705  0015  120A  118A  269E  120A  118A  	fcall	clear_ram0
   706  001A                     end_of_initialization:	
   707                           ;End of C runtime variable initialization code
   708                           
   709  001A                     __end_of__initialization:
   710  001A  0183               	clrf	3
   711  001B  120A  118A  2983   	ljmp	_main	;jump to C main() function
   712                           
   713                           	psect	bssCOMMON
   714  007A                     __pbssCOMMON:
   715  007A                     _val_TEMP:
   716  007A                     	ds	1
   717  007B                     _hola_esclavo:
   718  007B                     	ds	1
   719                           
   720                           	psect	bssBANK0
   721  0020                     __pbssBANK0:
   722  0020                     _data_total:
   723  0020                     	ds	20
   724  0034                     _mv_temp_val_M:
   725  0034                     	ds	2
   726  0036                     _val_ADC:
   727  0036                     	ds	1
   728  0037                     _cont:
   729  0037                     	ds	1
   730  0038                     _data_TEMP:
   731  0038                     	ds	8
   732  0040                     _data_ADC:
   733  0040                     	ds	8
   734  0048                     _data_cont:
   735  0048                     	ds	8
   736                           
   737                           	psect	clrtext
   738  069E                     clear_ram0:	
   739                           ;	Called with FSR containing the base address, and
   740                           ;	W with the last address+1
   741                           
   742  069E  0064               	clrwdt	;clear the watchdog before getting into this loop
   743  069F                     clrloop0:
   744  069F  0180               	clrf	0	;clear RAM location pointed to by FSR
   745  06A0  0A84               	incf	4,f	;increment pointer
   746  06A1  0604               	xorwf	4,w	;XOR with final address
   747  06A2  1903               	btfsc	3,2	;have we reached the end yet?
   748  06A3  3400               	retlw	0	;all done for this memory range, return
   749  06A4  0604               	xorwf	4,w	;XOR again to restore value
   750  06A5  2E9F               	goto	clrloop0	;do the next byte
   751                           
   752                           	psect	cstackCOMMON
   753  0070                     __pcstackCOMMON:
   754  0070                     ?_isdigit:
   755  0070                     ?_setup:	
   756                           ; 1 bit 
   757                           
   758  0070                     ?_Lcd_Init:	
   759                           ; 1 bytes @ 0x0
   760                           
   761  0070                     ?_Lcd_Clear:	
   762                           ; 1 bytes @ 0x0
   763                           
   764  0070                     ?_SPI_CONT:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0070                     ?_SPI_ADC:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  0070                     ?_SPI_TEMP:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0070                     ?_ADC_to_string:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  0070                     ?_Write_USART:	
   777                           ; 1 bytes @ 0x0
   778                           
   779  0070                     ?_Show_val_LCD:	
   780                           ; 1 bytes @ 0x0
   781                           
   782  0070                     ?_initOsc:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  0070                     ?_USART_Init_BaudRate:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  0070                     ?_USART_Init:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  0070                     ?_spiWrite:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  0070                     ?_spiRead:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  0070                     ?_Lcd_Port:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  0070                     ?_Lcd_Cmd:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  0070                     ?_ISR:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ??_ISR:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  0070                     ?_main:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0070                     ?_Lcd_Write_Char:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0070                     ?_spiReceiveWait:	
   816                           ; 1 bytes @ 0x0
   817                           
   818                           
   819                           ; 1 bytes @ 0x0
   820  0070                     	ds	2
   821  0072                     ??_Write_USART:
   822  0072                     ??_initOsc:	
   823                           ; 1 bytes @ 0x2
   824                           
   825  0072                     ??_USART_Init_BaudRate:	
   826                           ; 1 bytes @ 0x2
   827                           
   828  0072                     ??_USART_Init:	
   829                           ; 1 bytes @ 0x2
   830                           
   831  0072                     ?_spiInit:	
   832                           ; 1 bytes @ 0x2
   833                           
   834  0072                     ??_spiWrite:	
   835                           ; 1 bytes @ 0x2
   836                           
   837  0072                     ??_spiRead:	
   838                           ; 1 bytes @ 0x2
   839                           
   840  0072                     ??_Lcd_Port:	
   841                           ; 1 bytes @ 0x2
   842                           
   843  0072                     ??_isdigit:	
   844                           ; 1 bytes @ 0x2
   845                           
   846  0072                     ??_spiReceiveWait:	
   847                           ; 1 bytes @ 0x2
   848                           
   849  0072                     ?___bmul:	
   850                           ; 1 bytes @ 0x2
   851                           
   852  0072                     ?___wmul:	
   853                           ; 1 bytes @ 0x2
   854                           
   855  0072                     ?___lwdiv:	
   856                           ; 2 bytes @ 0x2
   857                           
   858  0072                     Lcd_Port@a:	
   859                           ; 2 bytes @ 0x2
   860                           
   861  0072                     Write_USART@a:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  0072                     spiInit@sDataSample:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  0072                     spiWrite@dat:	
   868                           ; 1 bytes @ 0x2
   869                           
   870  0072                     ___bmul@multiplicand:	
   871                           ; 1 bytes @ 0x2
   872                           
   873  0072                     _isdigit$987:	
   874                           ; 1 bytes @ 0x2
   875                           
   876  0072                     ___wmul@multiplier:	
   877                           ; 1 bytes @ 0x2
   878                           
   879  0072                     ___lwdiv@divisor:	
   880                           ; 2 bytes @ 0x2
   881                           
   882                           
   883                           ; 2 bytes @ 0x2
   884  0072                     	ds	1
   885  0073                     ??_SPI_CONT:
   886  0073                     ??_SPI_ADC:	
   887                           ; 1 bytes @ 0x3
   888                           
   889  0073                     ??_SPI_TEMP:	
   890                           ; 1 bytes @ 0x3
   891                           
   892  0073                     ?_Write_USART_String:	
   893                           ; 1 bytes @ 0x3
   894                           
   895  0073                     ??_Lcd_Cmd:	
   896                           ; 1 bytes @ 0x3
   897                           
   898  0073                     ??_Lcd_Write_Char:	
   899                           ; 1 bytes @ 0x3
   900                           
   901  0073                     ??___bmul:	
   902                           ; 1 bytes @ 0x3
   903                           
   904  0073                     spiInit@sClockIdle:	
   905                           ; 1 bytes @ 0x3
   906                           
   907  0073                     isdigit@c:	
   908                           ; 1 bytes @ 0x3
   909                           
   910  0073                     Write_USART_String@a:	
   911                           ; 1 bytes @ 0x3
   912                           
   913                           
   914                           ; 2 bytes @ 0x3
   915  0073                     	ds	1
   916  0074                     initOsc@IRCF:
   917  0074                     Lcd_Write_Char@a:	
   918                           ; 1 bytes @ 0x4
   919                           
   920  0074                     spiInit@sTransmitEdge:	
   921                           ; 1 bytes @ 0x4
   922                           
   923  0074                     ___bmul@product:	
   924                           ; 1 bytes @ 0x4
   925                           
   926  0074                     ___wmul@multiplicand:	
   927                           ; 1 bytes @ 0x4
   928                           
   929  0074                     ___lwdiv@dividend:	
   930                           ; 2 bytes @ 0x4
   931                           
   932                           
   933                           ; 2 bytes @ 0x4
   934  0074                     	ds	1
   935  0075                     ?_Lcd_Write_String:
   936  0075                     ??_Write_USART_String:	
   937                           ; 1 bytes @ 0x5
   938                           
   939  0075                     ??_spiInit:	
   940                           ; 1 bytes @ 0x5
   941                           
   942  0075                     Lcd_Cmd@a:	
   943                           ; 1 bytes @ 0x5
   944                           
   945  0075                     spiInit@sType:	
   946                           ; 1 bytes @ 0x5
   947                           
   948  0075                     ___bmul@multiplier:	
   949                           ; 1 bytes @ 0x5
   950                           
   951  0075                     Lcd_Write_String@a:	
   952                           ; 1 bytes @ 0x5
   953                           
   954                           
   955                           ; 2 bytes @ 0x5
   956  0075                     	ds	1
   957  0076                     ??_setup:
   958  0076                     ??_Lcd_Init:	
   959                           ; 1 bytes @ 0x6
   960                           
   961  0076                     ??_Lcd_Clear:	
   962                           ; 1 bytes @ 0x6
   963                           
   964  0076                     ?_Lcd_Set_Cursor:	
   965                           ; 1 bytes @ 0x6
   966                           
   967  0076                     ??___wmul:	
   968                           ; 1 bytes @ 0x6
   969                           
   970  0076                     ??___lwdiv:	
   971                           ; 1 bytes @ 0x6
   972                           
   973  0076                     Lcd_Set_Cursor@b:	
   974                           ; 1 bytes @ 0x6
   975                           
   976  0076                     Write_USART_String@i:	
   977                           ; 1 bytes @ 0x6
   978                           
   979  0076                     ___wmul@product:	
   980                           ; 1 bytes @ 0x6
   981                           
   982                           
   983                           ; 2 bytes @ 0x6
   984  0076                     	ds	1
   985  0077                     ??_Lcd_Set_Cursor:
   986  0077                     ??_Lcd_Write_String:	
   987                           ; 1 bytes @ 0x7
   988                           
   989  0077                     ___lwdiv@quotient:	
   990                           ; 1 bytes @ 0x7
   991                           
   992                           
   993                           ; 2 bytes @ 0x7
   994  0077                     	ds	1
   995  0078                     ??___awdiv:
   996  0078                     Lcd_Set_Cursor@a:	
   997                           ; 1 bytes @ 0x8
   998                           
   999                           
  1000                           ; 1 bytes @ 0x8
  1001  0078                     	ds	1
  1002  0079                     Lcd_Set_Cursor@temp:
  1003  0079                     ___lwdiv@counter:	
  1004                           ; 1 bytes @ 0x9
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0x9
  1008  0079                     	ds	1
  1009  007A                     ??_Show_val_LCD:
  1010                           
  1011                           	psect	cstackBANK0
  1012  0050                     __pcstackBANK0:	
  1013                           ; 1 bytes @ 0xA
  1014                           
  1015  0050                     ?___awdiv:
  1016  0050                     ?___lwmod:	
  1017                           ; 2 bytes @ 0x0
  1018                           
  1019  0050                     Lcd_Write_String@i:	
  1020                           ; 2 bytes @ 0x0
  1021                           
  1022  0050                     ___awdiv@divisor:	
  1023                           ; 2 bytes @ 0x0
  1024                           
  1025  0050                     ___lwmod@divisor:	
  1026                           ; 2 bytes @ 0x0
  1027                           
  1028                           
  1029                           ; 2 bytes @ 0x0
  1030  0050                     	ds	2
  1031  0052                     ___awdiv@dividend:
  1032  0052                     ___lwmod@dividend:	
  1033                           ; 2 bytes @ 0x2
  1034                           
  1035                           
  1036                           ; 2 bytes @ 0x2
  1037  0052                     	ds	2
  1038  0054                     ??___lwmod:
  1039  0054                     ___awdiv@counter:	
  1040                           ; 1 bytes @ 0x4
  1041                           
  1042                           
  1043                           ; 1 bytes @ 0x4
  1044  0054                     	ds	1
  1045  0055                     ___awdiv@sign:
  1046  0055                     ___lwmod@counter:	
  1047                           ; 1 bytes @ 0x5
  1048                           
  1049                           
  1050                           ; 1 bytes @ 0x5
  1051  0055                     	ds	1
  1052  0056                     ?_sprintf:
  1053  0056                     sprintf@f:	
  1054                           ; 2 bytes @ 0x6
  1055                           
  1056  0056                     ___awdiv@quotient:	
  1057                           ; 1 bytes @ 0x6
  1058                           
  1059                           
  1060                           ; 2 bytes @ 0x6
  1061  0056                     	ds	3
  1062  0059                     ??_sprintf:
  1063                           
  1064                           ; 1 bytes @ 0x9
  1065  0059                     	ds	3
  1066  005C                     sprintf@ap:
  1067                           
  1068                           ; 1 bytes @ 0xC
  1069  005C                     	ds	1
  1070  005D                     sprintf@flag:
  1071                           
  1072                           ; 1 bytes @ 0xD
  1073  005D                     	ds	1
  1074  005E                     sprintf@val:
  1075                           
  1076                           ; 2 bytes @ 0xE
  1077  005E                     	ds	2
  1078  0060                     sprintf@sp:
  1079                           
  1080                           ; 1 bytes @ 0x10
  1081  0060                     	ds	1
  1082  0061                     sprintf@prec:
  1083                           
  1084                           ; 1 bytes @ 0x11
  1085  0061                     	ds	1
  1086  0062                     sprintf@c:
  1087                           
  1088                           ; 1 bytes @ 0x12
  1089  0062                     	ds	1
  1090  0063                     ??_ADC_to_string:
  1091                           
  1092                           ; 1 bytes @ 0x13
  1093  0063                     	ds	3
  1094  0066                     ??_main:
  1095                           
  1096                           ; 1 bytes @ 0x16
  1097  0066                     	ds	2
  1098                           
  1099                           	psect	maintext
  1100  0183                     __pmaintext:	
  1101 ;;
  1102 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1103 ;;
  1104 ;; *************** function _main *****************
  1105 ;; Defined at:
  1106 ;;		line 92 in file "main_maestro.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : B00/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1120 ;;      Params:         0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0
  1122 ;;      Temps:          0       2       0       0       0
  1123 ;;      Totals:         0       2       0       0       0
  1124 ;;Total ram usage:        2 bytes
  1125 ;; Hardware stack levels required when called:    5
  1126 ;; This function calls:
  1127 ;;		_ADC_to_string
  1128 ;;		_Lcd_Clear
  1129 ;;		_Lcd_Init
  1130 ;;		_Lcd_Set_Cursor
  1131 ;;		_Lcd_Write_String
  1132 ;;		_SPI_ADC
  1133 ;;		_SPI_CONT
  1134 ;;		_SPI_TEMP
  1135 ;;		_Show_val_LCD
  1136 ;;		_Write_USART
  1137 ;;		_Write_USART_String
  1138 ;;		___awdiv
  1139 ;;		___wmul
  1140 ;;		_setup
  1141 ;; This function is called by:
  1142 ;;		Startup code after reset
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           
  1147                           ;psect for function _main
  1148  0183                     _main:
  1149  0183                     l2070:	
  1150                           ;incstack = 0
  1151                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1152                           
  1153                           
  1154                           ;main_maestro.c: 93:     setup();
  1155  0183  120A  118A  2439  120A  118A  	fcall	_setup
  1156  0188                     l2072:
  1157                           
  1158                           ;main_maestro.c: 94:     PORTB = 0;
  1159  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1160  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1161  018A  0186               	clrf	6	;volatile
  1162  018B                     l2074:
  1163                           
  1164                           ;main_maestro.c: 95:     cont = 0;
  1165  018B  01B7               	clrf	_cont
  1166  018C                     l2076:
  1167                           
  1168                           ;main_maestro.c: 97:     Lcd_Init();
  1169  018C  120A  118A  2364  120A  118A  	fcall	_Lcd_Init
  1170  0191                     l2078:
  1171                           
  1172                           ;main_maestro.c: 98:     Lcd_Clear();
  1173  0191  120A  118A  267C  120A  118A  	fcall	_Lcd_Clear
  1174  0196                     l2080:
  1175                           
  1176                           ;main_maestro.c: 99:     Lcd_Set_Cursor(1,1);
  1177  0196  01F6               	clrf	Lcd_Set_Cursor@b
  1178  0197  0AF6               	incf	Lcd_Set_Cursor@b,f
  1179  0198  3001               	movlw	1
  1180  0199  120A  118A  25D9  120A  118A  	fcall	_Lcd_Set_Cursor
  1181  019E                     l2082:
  1182                           
  1183                           ;main_maestro.c: 100:     Lcd_Write_String("cont   S2:   S3:");
  1184  019E  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1185  019F  00F5               	movwf	Lcd_Write_String@a
  1186  01A0  3080               	movlw	128
  1187  01A1  00F6               	movwf	Lcd_Write_String@a+1
  1188  01A2  120A  118A  23AF  120A  118A  	fcall	_Lcd_Write_String
  1189  01A7                     l2084:
  1190                           
  1191                           ;main_maestro.c: 107:         SPI_CONT();
  1192  01A7  120A  118A  24E9  120A  118A  	fcall	_SPI_CONT
  1193  01AC                     l2086:
  1194                           
  1195                           ;main_maestro.c: 108:         SPI_ADC();
  1196  01AC  120A  118A  251F  120A  118A  	fcall	_SPI_ADC
  1197  01B1                     l2088:
  1198                           
  1199                           ;main_maestro.c: 109:         SPI_TEMP();
  1200  01B1  120A  118A  2555  120A  118A  	fcall	_SPI_TEMP
  1201  01B6                     l2090:
  1202                           
  1203                           ;main_maestro.c: 112:         PORTB = val_TEMP;
  1204  01B6  087A               	movf	_val_TEMP,w
  1205  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1206  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1207  01B9  0086               	movwf	6	;volatile
  1208  01BA                     l2092:
  1209                           
  1210                           ;main_maestro.c: 113:         mv_temp_val_M = ((val_TEMP * 150) / 255);
  1211  01BA  30FF               	movlw	255
  1212  01BB  00D0               	movwf	___awdiv@divisor
  1213  01BC  3000               	movlw	0
  1214  01BD  00D1               	movwf	___awdiv@divisor+1
  1215  01BE  087A               	movf	_val_TEMP,w
  1216  01BF  00E6               	movwf	??_main
  1217  01C0  01E7               	clrf	??_main+1
  1218  01C1  0866               	movf	??_main,w
  1219  01C2  00F2               	movwf	___wmul@multiplier
  1220  01C3  0867               	movf	??_main+1,w
  1221  01C4  00F3               	movwf	___wmul@multiplier+1
  1222  01C5  3096               	movlw	150
  1223  01C6  00F4               	movwf	___wmul@multiplicand
  1224  01C7  3000               	movlw	0
  1225  01C8  00F5               	movwf	___wmul@multiplicand+1
  1226  01C9  120A  118A  25B4  120A  118A  	fcall	___wmul
  1227  01CE  0873               	movf	?___wmul+1,w
  1228  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1229  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1230  01D1  00D3               	movwf	___awdiv@dividend+1
  1231  01D2  0872               	movf	?___wmul,w
  1232  01D3  00D2               	movwf	___awdiv@dividend
  1233  01D4  120A  118A  224A  120A  118A  	fcall	___awdiv
  1234  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1235  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1236  01DB  0851               	movf	?___awdiv+1,w
  1237  01DC  00B5               	movwf	_mv_temp_val_M+1
  1238  01DD  0850               	movf	?___awdiv,w
  1239  01DE  00B4               	movwf	_mv_temp_val_M
  1240  01DF                     l2094:
  1241                           
  1242                           ;main_maestro.c: 114:         ADC_to_string();
  1243  01DF  120A  118A  24B2  120A  118A  	fcall	_ADC_to_string
  1244  01E4                     l2096:
  1245                           
  1246                           ;main_maestro.c: 115:         Write_USART_String("CONT:  \n");
  1247  01E4  3025               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1248  01E5  00F3               	movwf	Write_USART_String@a
  1249  01E6  3080               	movlw	128
  1250  01E7  00F4               	movwf	Write_USART_String@a+1
  1251  01E8  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1252  01ED                     l2098:
  1253                           
  1254                           ;main_maestro.c: 116:         Write_USART_String(data_cont);
  1255  01ED  3048               	movlw	(low (_data_cont| 0))& (0+255)
  1256  01EE  00F3               	movwf	Write_USART_String@a
  1257  01EF  3000               	movlw	0
  1258  01F0  00F4               	movwf	Write_USART_String@a+1
  1259  01F1  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1260  01F6                     l2100:
  1261                           
  1262                           ;main_maestro.c: 117:         Write_USART_String("  \n");
  1263  01F6  3032               	movlw	(low (((STR_4+4)-__stringbase)| (0+32768)))& (0+255)
  1264  01F7  00F3               	movwf	Write_USART_String@a
  1265  01F8  3080               	movlw	128
  1266  01F9  00F4               	movwf	Write_USART_String@a+1
  1267  01FA  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1268  01FF                     l2102:
  1269                           
  1270                           ;main_maestro.c: 118:         Write_USART_String("ADC:  \n");
  1271  01FF  302E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1272  0200  00F3               	movwf	Write_USART_String@a
  1273  0201  3080               	movlw	128
  1274  0202  00F4               	movwf	Write_USART_String@a+1
  1275  0203  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1276  0208                     l2104:
  1277                           
  1278                           ;main_maestro.c: 119:         Write_USART_String(data_ADC);
  1279  0208  3040               	movlw	(low (_data_ADC| 0))& (0+255)
  1280  0209  00F3               	movwf	Write_USART_String@a
  1281  020A  3000               	movlw	0
  1282  020B  00F4               	movwf	Write_USART_String@a+1
  1283  020C  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1284  0211                     l2106:
  1285                           
  1286                           ;main_maestro.c: 120:         Write_USART_String("  \n");
  1287  0211  3032               	movlw	(low (((STR_4+4)-__stringbase)| (0+32768)))& (0+255)
  1288  0212  00F3               	movwf	Write_USART_String@a
  1289  0213  3080               	movlw	128
  1290  0214  00F4               	movwf	Write_USART_String@a+1
  1291  0215  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1292  021A                     l2108:
  1293                           
  1294                           ;main_maestro.c: 121:         Write_USART_String("TEMP:  \n");
  1295  021A  301C               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1296  021B  00F3               	movwf	Write_USART_String@a
  1297  021C  3080               	movlw	128
  1298  021D  00F4               	movwf	Write_USART_String@a+1
  1299  021E  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1300  0223                     l2110:
  1301                           
  1302                           ;main_maestro.c: 122:         Write_USART_String(data_TEMP);
  1303  0223  3038               	movlw	(low (_data_TEMP| 0))& (0+255)
  1304  0224  00F3               	movwf	Write_USART_String@a
  1305  0225  3000               	movlw	0
  1306  0226  00F4               	movwf	Write_USART_String@a+1
  1307  0227  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1308  022C                     l2112:
  1309                           
  1310                           ;main_maestro.c: 123:         Write_USART_String("°C  \n");
  1311  022C  3036               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1312  022D  00F3               	movwf	Write_USART_String@a
  1313  022E  3080               	movlw	128
  1314  022F  00F4               	movwf	Write_USART_String@a+1
  1315  0230  120A  118A  2589  120A  118A  	fcall	_Write_USART_String
  1316  0235                     l2114:
  1317                           
  1318                           ;main_maestro.c: 124:         Write_USART(13);
  1319  0235  300D               	movlw	13
  1320  0236  120A  118A  2689  120A  118A  	fcall	_Write_USART
  1321  023B                     l2116:
  1322                           
  1323                           ;main_maestro.c: 125:         Write_USART(10);
  1324  023B  300A               	movlw	10
  1325  023C  120A  118A  2689  120A  118A  	fcall	_Write_USART
  1326  0241                     l2118:
  1327                           
  1328                           ;main_maestro.c: 127:         Show_val_LCD();
  1329  0241  120A  118A  2658  120A  118A  	fcall	_Show_val_LCD
  1330  0246  29A7               	goto	l2084
  1331  0247  120A  118A  280C   	ljmp	start
  1332  024A                     __end_of_main:
  1333                           
  1334                           	psect	text1
  1335  0439                     __ptext1:	
  1336 ;; *************** function _setup *****************
  1337 ;; Defined at:
  1338 ;;		line 137 in file "main_maestro.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0
  1355 ;;      Totals:         0       0       0       0       0
  1356 ;;Total ram usage:        0 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    2
  1359 ;; This function calls:
  1360 ;;		_USART_Init
  1361 ;;		_USART_Init_BaudRate
  1362 ;;		_initOsc
  1363 ;;		_spiInit
  1364 ;; This function is called by:
  1365 ;;		_main
  1366 ;; This function uses a non-reentrant model
  1367 ;;
  1368                           
  1369                           
  1370                           ;psect for function _setup
  1371  0439                     _setup:
  1372  0439                     l1594:	
  1373                           ;incstack = 0
  1374                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1375                           
  1376                           
  1377                           ;main_maestro.c: 138:     initOsc(0b00000111);
  1378  0439  3007               	movlw	7
  1379  043A  120A  118A  22B3  120A  118A  	fcall	_initOsc
  1380  043F                     l1596:
  1381                           
  1382                           ;main_maestro.c: 139:     ANSEL = 0;
  1383  043F  1683               	bsf	3,5	;RP0=1, select bank3
  1384  0440  1703               	bsf	3,6	;RP1=1, select bank3
  1385  0441  0188               	clrf	8	;volatile
  1386  0442                     l1598:
  1387                           
  1388                           ;main_maestro.c: 140:     ANSELH = 0;
  1389  0442  0189               	clrf	9	;volatile
  1390  0443                     l1600:
  1391                           
  1392                           ;main_maestro.c: 142:     TRISA = 0;
  1393  0443  1683               	bsf	3,5	;RP0=1, select bank1
  1394  0444  1303               	bcf	3,6	;RP1=0, select bank1
  1395  0445  0185               	clrf	5	;volatile
  1396  0446                     l1602:
  1397                           
  1398                           ;main_maestro.c: 143:     TRISB = 0;
  1399  0446  0186               	clrf	6	;volatile
  1400  0447                     l1604:
  1401                           
  1402                           ;main_maestro.c: 147:     TRISD = 0;
  1403  0447  0188               	clrf	8	;volatile
  1404  0448                     l1606:
  1405                           
  1406                           ;main_maestro.c: 148:     TRISE = 0;
  1407  0448  0189               	clrf	9	;volatile
  1408  0449                     l1608:
  1409                           
  1410                           ;main_maestro.c: 150:     PORTA = 0;
  1411  0449  1283               	bcf	3,5	;RP0=0, select bank0
  1412  044A  1303               	bcf	3,6	;RP1=0, select bank0
  1413  044B  0185               	clrf	5	;volatile
  1414  044C                     l1610:
  1415                           
  1416                           ;main_maestro.c: 151:     PORTB = 0;
  1417  044C  0186               	clrf	6	;volatile
  1418  044D                     l1612:
  1419                           
  1420                           ;main_maestro.c: 152:     PORTC = 0;
  1421  044D  0187               	clrf	7	;volatile
  1422  044E                     l1614:
  1423                           
  1424                           ;main_maestro.c: 153:     PORTD = 0;
  1425  044E  0188               	clrf	8	;volatile
  1426  044F                     l1616:
  1427                           
  1428                           ;main_maestro.c: 154:     PORTE = 0;
  1429  044F  0189               	clrf	9	;volatile
  1430  0450                     l1618:
  1431                           
  1432                           ;main_maestro.c: 157:     TRISC0 = 0;
  1433  0450  1683               	bsf	3,5	;RP0=1, select bank1
  1434  0451  1303               	bcf	3,6	;RP1=0, select bank1
  1435  0452  1007               	bcf	7,0	;volatile
  1436  0453                     l1620:
  1437                           
  1438                           ;main_maestro.c: 158:     PORTCbits.RC0 = 1;
  1439  0453  1283               	bcf	3,5	;RP0=0, select bank0
  1440  0454  1303               	bcf	3,6	;RP1=0, select bank0
  1441  0455  1407               	bsf	7,0	;volatile
  1442  0456                     l1622:
  1443                           
  1444                           ;main_maestro.c: 159:     TRISC1 = 0;
  1445  0456  1683               	bsf	3,5	;RP0=1, select bank1
  1446  0457  1303               	bcf	3,6	;RP1=0, select bank1
  1447  0458  1087               	bcf	7,1	;volatile
  1448  0459                     l1624:
  1449                           
  1450                           ;main_maestro.c: 160:     PORTCbits.RC1 = 1;
  1451  0459  1283               	bcf	3,5	;RP0=0, select bank0
  1452  045A  1303               	bcf	3,6	;RP1=0, select bank0
  1453  045B  1487               	bsf	7,1	;volatile
  1454  045C                     l1626:
  1455                           
  1456                           ;main_maestro.c: 161:     TRISC2 = 0;
  1457  045C  1683               	bsf	3,5	;RP0=1, select bank1
  1458  045D  1303               	bcf	3,6	;RP1=0, select bank1
  1459  045E  1107               	bcf	7,2	;volatile
  1460  045F                     l1628:
  1461                           
  1462                           ;main_maestro.c: 162:     PORTCbits.RC2 = 1;
  1463  045F  1283               	bcf	3,5	;RP0=0, select bank0
  1464  0460  1303               	bcf	3,6	;RP1=0, select bank0
  1465  0461  1507               	bsf	7,2	;volatile
  1466  0462                     l1630:
  1467                           
  1468                           ;main_maestro.c: 165:     USART_Init_BaudRate();
  1469  0462  120A  118A  26BC  120A  118A  	fcall	_USART_Init_BaudRate
  1470  0467                     l1632:
  1471                           
  1472                           ;main_maestro.c: 166:     USART_Init();
  1473  0467  120A  118A  26A6  120A  118A  	fcall	_USART_Init
  1474  046C                     l1634:
  1475                           
  1476                           ;main_maestro.c: 169:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1477  046C  01F2               	clrf	spiInit@sDataSample
  1478  046D  01F3               	clrf	spiInit@sClockIdle
  1479  046E  01F4               	clrf	spiInit@sTransmitEdge
  1480  046F  3020               	movlw	32
  1481  0470  120A  118A  2617  120A  118A  	fcall	_spiInit
  1482  0475                     l110:
  1483  0475  0008               	return
  1484  0476                     __end_of_setup:
  1485                           
  1486                           	psect	text2
  1487  0617                     __ptext2:	
  1488 ;; *************** function _spiInit *****************
  1489 ;; Defined at:
  1490 ;;		line 14 in file "SPI.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  sType           1    wreg     enum E1264
  1493 ;;  sDataSample     1    2[COMMON] enum E1272
  1494 ;;  sClockIdle      1    3[COMMON] enum E1276
  1495 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  sType           1    5[COMMON] enum E1264
  1498 ;; Return value:  Size  Location     Type
  1499 ;;                  1    wreg      void 
  1500 ;; Registers used:
  1501 ;;		wreg, status,2, status,0
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1507 ;;      Params:         3       0       0       0       0
  1508 ;;      Locals:         1       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0
  1510 ;;      Totals:         4       0       0       0       0
  1511 ;;Total ram usage:        4 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    1
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_setup
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           
  1522                           ;psect for function _spiInit
  1523  0617                     _spiInit:
  1524                           
  1525                           ;incstack = 0
  1526                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1527                           ;spiInit@sType stored from wreg
  1528  0617  00F5               	movwf	spiInit@sType
  1529  0618                     l1486:
  1530                           
  1531                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1532  0618  1683               	bsf	3,5	;RP0=1, select bank1
  1533  0619  1303               	bcf	3,6	;RP1=0, select bank1
  1534  061A  1287               	bcf	7,5	;volatile
  1535                           
  1536                           ;SPI.c: 17:     if(sType & 0b00000100)
  1537  061B  1D75               	btfss	spiInit@sType,2
  1538  061C  2E1E               	goto	u791
  1539  061D  2E1F               	goto	u790
  1540  061E                     u791:
  1541  061E  2E23               	goto	l1492
  1542  061F                     u790:
  1543  061F                     l1488:
  1544                           
  1545                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1546  061F  0874               	movf	spiInit@sTransmitEdge,w
  1547  0620  0094               	movwf	20	;volatile
  1548  0621                     l1490:
  1549                           
  1550                           ;SPI.c: 20:         TRISC3 = 1;
  1551  0621  1587               	bsf	7,3	;volatile
  1552                           
  1553                           ;SPI.c: 21:     }
  1554  0622  2E27               	goto	l247
  1555  0623                     l1492:
  1556                           
  1557                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1558  0623  0872               	movf	spiInit@sDataSample,w
  1559  0624  0474               	iorwf	spiInit@sTransmitEdge,w
  1560  0625  0094               	movwf	20	;volatile
  1561  0626                     l1494:
  1562                           
  1563                           ;SPI.c: 25:         TRISC3 = 0;
  1564  0626  1187               	bcf	7,3	;volatile
  1565  0627                     l247:	
  1566                           ;SPI.c: 26:     }
  1567                           
  1568                           
  1569                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1570  0627  0875               	movf	spiInit@sType,w
  1571  0628  0473               	iorwf	spiInit@sClockIdle,w
  1572  0629  1283               	bcf	3,5	;RP0=0, select bank0
  1573  062A  1303               	bcf	3,6	;RP1=0, select bank0
  1574  062B  0094               	movwf	20	;volatile
  1575  062C                     l248:
  1576  062C  0008               	return
  1577  062D                     __end_of_spiInit:
  1578                           
  1579                           	psect	text3
  1580  02B3                     __ptext3:	
  1581 ;; *************** function _initOsc *****************
  1582 ;; Defined at:
  1583 ;;		line 3 in file "Oscilador.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  IRCF            1    wreg     unsigned char 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  IRCF            1    4[COMMON] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  1    wreg      void 
  1590 ;; Registers used:
  1591 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1597 ;;      Params:         0       0       0       0       0
  1598 ;;      Locals:         1       0       0       0       0
  1599 ;;      Temps:          2       0       0       0       0
  1600 ;;      Totals:         3       0       0       0       0
  1601 ;;Total ram usage:        3 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; Hardware stack levels required when called:    1
  1604 ;; This function calls:
  1605 ;;		Nothing
  1606 ;; This function is called by:
  1607 ;;		_setup
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           
  1612                           ;psect for function _initOsc
  1613  02B3                     _initOsc:
  1614                           
  1615                           ;incstack = 0
  1616                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1617                           ;initOsc@IRCF stored from wreg
  1618  02B3  00F4               	movwf	initOsc@IRCF
  1619  02B4                     l1470:
  1620                           
  1621                           ;Oscilador.c: 5:     switch(IRCF){
  1622  02B4  2AEB               	goto	l1474
  1623  02B5                     l131:	
  1624                           ;Oscilador.c: 6:         case 0:
  1625                           
  1626                           
  1627                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1628  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  1629  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  1630  02B7  130F               	bcf	15,6	;volatile
  1631                           
  1632                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1633  02B8  128F               	bcf	15,5	;volatile
  1634                           
  1635                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1636  02B9  120F               	bcf	15,4	;volatile
  1637                           
  1638                           ;Oscilador.c: 10:             break;
  1639  02BA  2B0D               	goto	l132
  1640  02BB                     l133:	
  1641                           ;Oscilador.c: 11:          case 1:
  1642                           
  1643                           
  1644                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1645  02BB  1683               	bsf	3,5	;RP0=1, select bank1
  1646  02BC  1303               	bcf	3,6	;RP1=0, select bank1
  1647  02BD  130F               	bcf	15,6	;volatile
  1648                           
  1649                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1650  02BE  128F               	bcf	15,5	;volatile
  1651                           
  1652                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1653  02BF  160F               	bsf	15,4	;volatile
  1654                           
  1655                           ;Oscilador.c: 15:             break;
  1656  02C0  2B0D               	goto	l132
  1657  02C1                     l134:	
  1658                           ;Oscilador.c: 16:         case 2:
  1659                           
  1660                           
  1661                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1662  02C1  1683               	bsf	3,5	;RP0=1, select bank1
  1663  02C2  1303               	bcf	3,6	;RP1=0, select bank1
  1664  02C3  130F               	bcf	15,6	;volatile
  1665                           
  1666                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1667  02C4  168F               	bsf	15,5	;volatile
  1668                           
  1669                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1670  02C5  120F               	bcf	15,4	;volatile
  1671                           
  1672                           ;Oscilador.c: 20:             break;
  1673  02C6  2B0D               	goto	l132
  1674  02C7                     l135:	
  1675                           ;Oscilador.c: 21:         case 3:
  1676                           
  1677                           
  1678                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1679  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  1680  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  1681  02C9  130F               	bcf	15,6	;volatile
  1682                           
  1683                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1684  02CA  168F               	bsf	15,5	;volatile
  1685                           
  1686                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1687  02CB  160F               	bsf	15,4	;volatile
  1688                           
  1689                           ;Oscilador.c: 25:             break;
  1690  02CC  2B0D               	goto	l132
  1691  02CD                     l136:	
  1692                           ;Oscilador.c: 26:         case 4:
  1693                           
  1694                           
  1695                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1696  02CD  1683               	bsf	3,5	;RP0=1, select bank1
  1697  02CE  1303               	bcf	3,6	;RP1=0, select bank1
  1698  02CF  170F               	bsf	15,6	;volatile
  1699                           
  1700                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1701  02D0  128F               	bcf	15,5	;volatile
  1702                           
  1703                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1704  02D1  120F               	bcf	15,4	;volatile
  1705                           
  1706                           ;Oscilador.c: 30:             break;
  1707  02D2  2B0D               	goto	l132
  1708  02D3                     l137:	
  1709                           ;Oscilador.c: 31:         case 5:
  1710                           
  1711                           
  1712                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1713  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  1714  02D4  1303               	bcf	3,6	;RP1=0, select bank1
  1715  02D5  170F               	bsf	15,6	;volatile
  1716                           
  1717                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1718  02D6  128F               	bcf	15,5	;volatile
  1719                           
  1720                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1721  02D7  160F               	bsf	15,4	;volatile
  1722                           
  1723                           ;Oscilador.c: 35:             break;
  1724  02D8  2B0D               	goto	l132
  1725  02D9                     l138:	
  1726                           ;Oscilador.c: 36:         case 6:
  1727                           
  1728                           
  1729                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1730  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  1731  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  1732  02DB  170F               	bsf	15,6	;volatile
  1733                           
  1734                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1735  02DC  168F               	bsf	15,5	;volatile
  1736                           
  1737                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1738  02DD  120F               	bcf	15,4	;volatile
  1739                           
  1740                           ;Oscilador.c: 40:             break;
  1741  02DE  2B0D               	goto	l132
  1742  02DF                     l139:	
  1743                           ;Oscilador.c: 41:         case 7:
  1744                           
  1745                           
  1746                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1747  02DF  1683               	bsf	3,5	;RP0=1, select bank1
  1748  02E0  1303               	bcf	3,6	;RP1=0, select bank1
  1749  02E1  170F               	bsf	15,6	;volatile
  1750                           
  1751                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1752  02E2  168F               	bsf	15,5	;volatile
  1753                           
  1754                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1755  02E3  160F               	bsf	15,4	;volatile
  1756                           
  1757                           ;Oscilador.c: 45:             break;
  1758  02E4  2B0D               	goto	l132
  1759  02E5                     l140:	
  1760                           ;Oscilador.c: 46:         default:
  1761                           
  1762                           
  1763                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1764  02E5  1683               	bsf	3,5	;RP0=1, select bank1
  1765  02E6  1303               	bcf	3,6	;RP1=0, select bank1
  1766  02E7  170F               	bsf	15,6	;volatile
  1767                           
  1768                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1769  02E8  168F               	bsf	15,5	;volatile
  1770                           
  1771                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1772  02E9  120F               	bcf	15,4	;volatile
  1773                           
  1774                           ;Oscilador.c: 50:             break;
  1775  02EA  2B0D               	goto	l132
  1776  02EB                     l1474:
  1777  02EB  0874               	movf	initOsc@IRCF,w
  1778  02EC  00F2               	movwf	??_initOsc
  1779  02ED  01F3               	clrf	??_initOsc+1
  1780                           
  1781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1782                           ; Switch size 1, requested type "simple"
  1783                           ; Number of cases is 1, Range of values is 0 to 0
  1784                           ; switch strategies available:
  1785                           ; Name         Instructions Cycles
  1786                           ; simple_byte            4     3 (average)
  1787                           ; direct_byte           11     8 (fixed)
  1788                           ; jumptable            260     6 (fixed)
  1789                           ;	Chosen strategy is simple_byte
  1790  02EE  0873               	movf	??_initOsc+1,w
  1791  02EF  3A00               	xorlw	0	; case 0
  1792  02F0  1903               	skipnz
  1793  02F1  2AF3               	goto	l2174
  1794  02F2  2AE5               	goto	l140
  1795  02F3                     l2174:
  1796                           
  1797                           ; Switch size 1, requested type "simple"
  1798                           ; Number of cases is 8, Range of values is 0 to 7
  1799                           ; switch strategies available:
  1800                           ; Name         Instructions Cycles
  1801                           ; simple_byte           25    13 (average)
  1802                           ; direct_byte           32     8 (fixed)
  1803                           ; jumptable            260     6 (fixed)
  1804                           ;	Chosen strategy is simple_byte
  1805  02F3  0872               	movf	??_initOsc,w
  1806  02F4  3A00               	xorlw	0	; case 0
  1807  02F5  1903               	skipnz
  1808  02F6  2AB5               	goto	l131
  1809  02F7  3A01               	xorlw	1	; case 1
  1810  02F8  1903               	skipnz
  1811  02F9  2ABB               	goto	l133
  1812  02FA  3A03               	xorlw	3	; case 2
  1813  02FB  1903               	skipnz
  1814  02FC  2AC1               	goto	l134
  1815  02FD  3A01               	xorlw	1	; case 3
  1816  02FE  1903               	skipnz
  1817  02FF  2AC7               	goto	l135
  1818  0300  3A07               	xorlw	7	; case 4
  1819  0301  1903               	skipnz
  1820  0302  2ACD               	goto	l136
  1821  0303  3A01               	xorlw	1	; case 5
  1822  0304  1903               	skipnz
  1823  0305  2AD3               	goto	l137
  1824  0306  3A03               	xorlw	3	; case 6
  1825  0307  1903               	skipnz
  1826  0308  2AD9               	goto	l138
  1827  0309  3A01               	xorlw	1	; case 7
  1828  030A  1903               	skipnz
  1829  030B  2ADF               	goto	l139
  1830  030C  2AE5               	goto	l140
  1831  030D                     l132:
  1832                           
  1833                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1834  030D  140F               	bsf	15,0	;volatile
  1835  030E                     l141:
  1836  030E  0008               	return
  1837  030F                     __end_of_initOsc:
  1838                           
  1839                           	psect	text4
  1840  06BC                     __ptext4:	
  1841 ;; *************** function _USART_Init_BaudRate *****************
  1842 ;; Defined at:
  1843 ;;		line 19 in file "USART.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg, status,2
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1857 ;;      Params:         0       0       0       0       0
  1858 ;;      Locals:         0       0       0       0       0
  1859 ;;      Temps:          0       0       0       0       0
  1860 ;;      Totals:         0       0       0       0       0
  1861 ;;Total ram usage:        0 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    1
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_setup
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _USART_Init_BaudRate
  1873  06BC                     _USART_Init_BaudRate:
  1874  06BC                     l1480:	
  1875                           ;incstack = 0
  1876                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1877                           
  1878                           
  1879                           ;USART.c: 20:     SPBRGH = 0;
  1880  06BC  1683               	bsf	3,5	;RP0=1, select bank1
  1881  06BD  1303               	bcf	3,6	;RP1=0, select bank1
  1882  06BE  019A               	clrf	26	;volatile
  1883  06BF                     l1482:
  1884                           
  1885                           ;USART.c: 21:     SPBRG = 12;
  1886  06BF  300C               	movlw	12
  1887  06C0  0099               	movwf	25	;volatile
  1888  06C1                     l210:
  1889  06C1  0008               	return
  1890  06C2                     __end_of_USART_Init_BaudRate:
  1891                           
  1892                           	psect	text5
  1893  06A6                     __ptext5:	
  1894 ;; *************** function _USART_Init *****************
  1895 ;; Defined at:
  1896 ;;		line 8 in file "USART.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		None
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1910 ;;      Params:         0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0
  1913 ;;      Totals:         0       0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    1
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_setup
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _USART_Init
  1926  06A6                     _USART_Init:
  1927  06A6                     l1484:	
  1928                           ;incstack = 0
  1929                           ; Regs used in _USART_Init: []
  1930                           
  1931                           
  1932                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1933  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1934  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1935  06A8  1798               	bsf	24,7	;volatile
  1936                           
  1937                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1938  06A9  1683               	bsf	3,5	;RP0=1, select bank1
  1939  06AA  1303               	bcf	3,6	;RP1=0, select bank1
  1940  06AB  1218               	bcf	24,4	;volatile
  1941                           
  1942                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1943  06AC  1698               	bsf	24,5	;volatile
  1944  06AD                     l207:
  1945  06AD  0008               	return
  1946  06AE                     __end_of_USART_Init:
  1947                           
  1948                           	psect	text6
  1949  05B4                     __ptext6:	
  1950 ;; *************** function ___wmul *****************
  1951 ;; Defined at:
  1952 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  multiplier      2    2[COMMON] unsigned int 
  1955 ;;  multiplicand    2    4[COMMON] unsigned int 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  product         2    6[COMMON] unsigned int 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  2    2[COMMON] unsigned int 
  1960 ;; Registers used:
  1961 ;;		wreg, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1967 ;;      Params:         4       0       0       0       0
  1968 ;;      Locals:         2       0       0       0       0
  1969 ;;      Temps:          0       0       0       0       0
  1970 ;;      Totals:         6       0       0       0       0
  1971 ;;Total ram usage:        6 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    1
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function ___wmul
  1983  05B4                     ___wmul:
  1984  05B4                     l1692:	
  1985                           ;incstack = 0
  1986                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1987                           
  1988  05B4  01F6               	clrf	___wmul@product
  1989  05B5  01F7               	clrf	___wmul@product+1
  1990  05B6                     l1694:
  1991  05B6  1C72               	btfss	___wmul@multiplier,0
  1992  05B7  2DB9               	goto	u941
  1993  05B8  2DBA               	goto	u940
  1994  05B9                     u941:
  1995  05B9  2DC0               	goto	l390
  1996  05BA                     u940:
  1997  05BA                     l1696:
  1998  05BA  0874               	movf	___wmul@multiplicand,w
  1999  05BB  07F6               	addwf	___wmul@product,f
  2000  05BC  1803               	skipnc
  2001  05BD  0AF7               	incf	___wmul@product+1,f
  2002  05BE  0875               	movf	___wmul@multiplicand+1,w
  2003  05BF  07F7               	addwf	___wmul@product+1,f
  2004  05C0                     l390:
  2005  05C0  3001               	movlw	1
  2006  05C1                     u955:
  2007  05C1  1003               	clrc
  2008  05C2  0DF4               	rlf	___wmul@multiplicand,f
  2009  05C3  0DF5               	rlf	___wmul@multiplicand+1,f
  2010  05C4  3EFF               	addlw	-1
  2011  05C5  1D03               	skipz
  2012  05C6  2DC1               	goto	u955
  2013  05C7                     l1698:
  2014  05C7  3001               	movlw	1
  2015  05C8                     u965:
  2016  05C8  1003               	clrc
  2017  05C9  0CF3               	rrf	___wmul@multiplier+1,f
  2018  05CA  0CF2               	rrf	___wmul@multiplier,f
  2019  05CB  3EFF               	addlw	-1
  2020  05CC  1D03               	skipz
  2021  05CD  2DC8               	goto	u965
  2022  05CE                     l1700:
  2023  05CE  0872               	movf	___wmul@multiplier,w
  2024  05CF  0473               	iorwf	___wmul@multiplier+1,w
  2025  05D0  1D03               	btfss	3,2
  2026  05D1  2DD3               	goto	u971
  2027  05D2  2DD4               	goto	u970
  2028  05D3                     u971:
  2029  05D3  2DB6               	goto	l1694
  2030  05D4                     u970:
  2031  05D4                     l1702:
  2032  05D4  0877               	movf	___wmul@product+1,w
  2033  05D5  00F3               	movwf	?___wmul+1
  2034  05D6  0876               	movf	___wmul@product,w
  2035  05D7  00F2               	movwf	?___wmul
  2036  05D8                     l392:
  2037  05D8  0008               	return
  2038  05D9                     __end_of___wmul:
  2039                           
  2040                           	psect	text7
  2041  024A                     __ptext7:	
  2042 ;; *************** function ___awdiv *****************
  2043 ;; Defined at:
  2044 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;  divisor         2    0[BANK0 ] int 
  2047 ;;  dividend        2    2[BANK0 ] int 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  quotient        2    6[BANK0 ] int 
  2050 ;;  sign            1    5[BANK0 ] unsigned char 
  2051 ;;  counter         1    4[BANK0 ] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  2    0[BANK0 ] int 
  2054 ;; Registers used:
  2055 ;;		wreg, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2061 ;;      Params:         0       4       0       0       0
  2062 ;;      Locals:         0       4       0       0       0
  2063 ;;      Temps:          1       0       0       0       0
  2064 ;;      Totals:         1       8       0       0       0
  2065 ;;Total ram usage:        9 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; Hardware stack levels required when called:    1
  2068 ;; This function calls:
  2069 ;;		Nothing
  2070 ;; This function is called by:
  2071 ;;		_main
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           
  2076                           ;psect for function ___awdiv
  2077  024A                     ___awdiv:
  2078  024A                     l2026:	
  2079                           ;incstack = 0
  2080                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2081                           
  2082  024A  1283               	bcf	3,5	;RP0=0, select bank0
  2083  024B  1303               	bcf	3,6	;RP1=0, select bank0
  2084  024C  01D5               	clrf	___awdiv@sign
  2085  024D                     l2028:
  2086  024D  1FD1               	btfss	___awdiv@divisor+1,7
  2087  024E  2A50               	goto	u1321
  2088  024F  2A51               	goto	u1320
  2089  0250                     u1321:
  2090  0250  2A58               	goto	l2034
  2091  0251                     u1320:
  2092  0251                     l2030:
  2093  0251  09D0               	comf	___awdiv@divisor,f
  2094  0252  09D1               	comf	___awdiv@divisor+1,f
  2095  0253  0AD0               	incf	___awdiv@divisor,f
  2096  0254  1903               	skipnz
  2097  0255  0AD1               	incf	___awdiv@divisor+1,f
  2098  0256                     l2032:
  2099  0256  01D5               	clrf	___awdiv@sign
  2100  0257  0AD5               	incf	___awdiv@sign,f
  2101  0258                     l2034:
  2102  0258  1FD3               	btfss	___awdiv@dividend+1,7
  2103  0259  2A5B               	goto	u1331
  2104  025A  2A5C               	goto	u1330
  2105  025B                     u1331:
  2106  025B  2A65               	goto	l2040
  2107  025C                     u1330:
  2108  025C                     l2036:
  2109  025C  09D2               	comf	___awdiv@dividend,f
  2110  025D  09D3               	comf	___awdiv@dividend+1,f
  2111  025E  0AD2               	incf	___awdiv@dividend,f
  2112  025F  1903               	skipnz
  2113  0260  0AD3               	incf	___awdiv@dividend+1,f
  2114  0261                     l2038:
  2115  0261  3001               	movlw	1
  2116  0262  00F8               	movwf	??___awdiv
  2117  0263  0878               	movf	??___awdiv,w
  2118  0264  06D5               	xorwf	___awdiv@sign,f
  2119  0265                     l2040:
  2120  0265  01D6               	clrf	___awdiv@quotient
  2121  0266  01D7               	clrf	___awdiv@quotient+1
  2122  0267                     l2042:
  2123  0267  0850               	movf	___awdiv@divisor,w
  2124  0268  0451               	iorwf	___awdiv@divisor+1,w
  2125  0269  1903               	btfsc	3,2
  2126  026A  2A6C               	goto	u1341
  2127  026B  2A6D               	goto	u1340
  2128  026C                     u1341:
  2129  026C  2AA4               	goto	l2062
  2130  026D                     u1340:
  2131  026D                     l2044:
  2132  026D  01D4               	clrf	___awdiv@counter
  2133  026E  0AD4               	incf	___awdiv@counter,f
  2134  026F  2A7B               	goto	l2050
  2135  0270                     l2046:
  2136  0270  3001               	movlw	1
  2137  0271                     u1355:
  2138  0271  1003               	clrc
  2139  0272  0DD0               	rlf	___awdiv@divisor,f
  2140  0273  0DD1               	rlf	___awdiv@divisor+1,f
  2141  0274  3EFF               	addlw	-1
  2142  0275  1D03               	skipz
  2143  0276  2A71               	goto	u1355
  2144  0277                     l2048:
  2145  0277  3001               	movlw	1
  2146  0278  00F8               	movwf	??___awdiv
  2147  0279  0878               	movf	??___awdiv,w
  2148  027A  07D4               	addwf	___awdiv@counter,f
  2149  027B                     l2050:
  2150  027B  1FD1               	btfss	___awdiv@divisor+1,7
  2151  027C  2A7E               	goto	u1361
  2152  027D  2A7F               	goto	u1360
  2153  027E                     u1361:
  2154  027E  2A70               	goto	l2046
  2155  027F                     u1360:
  2156  027F                     l2052:
  2157  027F  3001               	movlw	1
  2158  0280                     u1375:
  2159  0280  1003               	clrc
  2160  0281  0DD6               	rlf	___awdiv@quotient,f
  2161  0282  0DD7               	rlf	___awdiv@quotient+1,f
  2162  0283  3EFF               	addlw	-1
  2163  0284  1D03               	skipz
  2164  0285  2A80               	goto	u1375
  2165  0286  0851               	movf	___awdiv@divisor+1,w
  2166  0287  0253               	subwf	___awdiv@dividend+1,w
  2167  0288  1D03               	skipz
  2168  0289  2A8C               	goto	u1385
  2169  028A  0850               	movf	___awdiv@divisor,w
  2170  028B  0252               	subwf	___awdiv@dividend,w
  2171  028C                     u1385:
  2172  028C  1C03               	skipc
  2173  028D  2A8F               	goto	u1381
  2174  028E  2A90               	goto	u1380
  2175  028F                     u1381:
  2176  028F  2A97               	goto	l2058
  2177  0290                     u1380:
  2178  0290                     l2054:
  2179  0290  0850               	movf	___awdiv@divisor,w
  2180  0291  02D2               	subwf	___awdiv@dividend,f
  2181  0292  0851               	movf	___awdiv@divisor+1,w
  2182  0293  1C03               	skipc
  2183  0294  03D3               	decf	___awdiv@dividend+1,f
  2184  0295  02D3               	subwf	___awdiv@dividend+1,f
  2185  0296                     l2056:
  2186  0296  1456               	bsf	___awdiv@quotient,0
  2187  0297                     l2058:
  2188  0297  3001               	movlw	1
  2189  0298                     u1395:
  2190  0298  1003               	clrc
  2191  0299  0CD1               	rrf	___awdiv@divisor+1,f
  2192  029A  0CD0               	rrf	___awdiv@divisor,f
  2193  029B  3EFF               	addlw	-1
  2194  029C  1D03               	skipz
  2195  029D  2A98               	goto	u1395
  2196  029E                     l2060:
  2197  029E  3001               	movlw	1
  2198  029F  02D4               	subwf	___awdiv@counter,f
  2199  02A0  1D03               	btfss	3,2
  2200  02A1  2AA3               	goto	u1401
  2201  02A2  2AA4               	goto	u1400
  2202  02A3                     u1401:
  2203  02A3  2A7F               	goto	l2052
  2204  02A4                     u1400:
  2205  02A4                     l2062:
  2206  02A4  0855               	movf	___awdiv@sign,w
  2207  02A5  1903               	btfsc	3,2
  2208  02A6  2AA8               	goto	u1411
  2209  02A7  2AA9               	goto	u1410
  2210  02A8                     u1411:
  2211  02A8  2AAE               	goto	l2066
  2212  02A9                     u1410:
  2213  02A9                     l2064:
  2214  02A9  09D6               	comf	___awdiv@quotient,f
  2215  02AA  09D7               	comf	___awdiv@quotient+1,f
  2216  02AB  0AD6               	incf	___awdiv@quotient,f
  2217  02AC  1903               	skipnz
  2218  02AD  0AD7               	incf	___awdiv@quotient+1,f
  2219  02AE                     l2066:
  2220  02AE  0857               	movf	___awdiv@quotient+1,w
  2221  02AF  00D1               	movwf	?___awdiv+1
  2222  02B0  0856               	movf	___awdiv@quotient,w
  2223  02B1  00D0               	movwf	?___awdiv
  2224  02B2                     l573:
  2225  02B2  0008               	return
  2226  02B3                     __end_of___awdiv:
  2227                           
  2228                           	psect	text8
  2229  0589                     __ptext8:	
  2230 ;; *************** function _Write_USART_String *****************
  2231 ;; Defined at:
  2232 ;;		line 37 in file "USART.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  a               2    3[COMMON] PTR unsigned char 
  2235 ;;		 -> STR_7(6), data_TEMP(8), STR_6(9), STR_5(4), 
  2236 ;;		 -> data_ADC(8), STR_4(8), STR_3(4), data_cont(8), 
  2237 ;;		 -> STR_2(9), 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  i               1    6[COMMON] unsigned char 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2249 ;;      Params:         2       0       0       0       0
  2250 ;;      Locals:         1       0       0       0       0
  2251 ;;      Temps:          1       0       0       0       0
  2252 ;;      Totals:         4       0       0       0       0
  2253 ;;Total ram usage:        4 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    2
  2256 ;; This function calls:
  2257 ;;		_Write_USART
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           
  2264                           ;psect for function _Write_USART_String
  2265  0589                     _Write_USART_String:
  2266  0589                     l1680:	
  2267                           ;incstack = 0
  2268                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2269                           
  2270                           
  2271                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  2272  0589  01F6               	clrf	Write_USART_String@i
  2273  058A  2DA0               	goto	l1686
  2274  058B                     l1682:
  2275                           
  2276                           ;USART.c: 40:         Write_USART(a[i]);
  2277  058B  0876               	movf	Write_USART_String@i,w
  2278  058C  0773               	addwf	Write_USART_String@a,w
  2279  058D  0084               	movwf	4
  2280  058E  0874               	movf	Write_USART_String@a+1,w
  2281  058F  1803               	skipnc
  2282  0590  0A74               	incf	Write_USART_String@a+1,w
  2283  0591  00FF               	movwf	btemp+1
  2284  0592  120A  118A  230F  120A  118A  	fcall	stringtab
  2285  0597  120A  118A  2689  120A  118A  	fcall	_Write_USART
  2286  059C                     l1684:
  2287                           
  2288                           ;USART.c: 41:     }
  2289  059C  3001               	movlw	1
  2290  059D  00F5               	movwf	??_Write_USART_String
  2291  059E  0875               	movf	??_Write_USART_String,w
  2292  059F  07F6               	addwf	Write_USART_String@i,f
  2293  05A0                     l1686:
  2294  05A0  0876               	movf	Write_USART_String@i,w
  2295  05A1  0773               	addwf	Write_USART_String@a,w
  2296  05A2  0084               	movwf	4
  2297  05A3  0874               	movf	Write_USART_String@a+1,w
  2298  05A4  1803               	skipnc
  2299  05A5  0A74               	incf	Write_USART_String@a+1,w
  2300  05A6  1283               	bcf	3,5	;RP0=0, select bank0
  2301  05A7  1303               	bcf	3,6	;RP1=0, select bank0
  2302  05A8  00FF               	movwf	btemp+1
  2303  05A9  120A  118A  230F  120A  118A  	fcall	stringtab
  2304  05AE  3A00               	xorlw	0
  2305  05AF  1D03               	skipz
  2306  05B0  2DB2               	goto	u931
  2307  05B1  2DB3               	goto	u930
  2308  05B2                     u931:
  2309  05B2  2D8B               	goto	l1682
  2310  05B3                     u930:
  2311  05B3                     l225:
  2312  05B3  0008               	return
  2313  05B4                     __end_of_Write_USART_String:
  2314                           
  2315                           	psect	text9
  2316  0689                     __ptext9:	
  2317 ;; *************** function _Write_USART *****************
  2318 ;; Defined at:
  2319 ;;		line 33 in file "USART.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  a               1    wreg     unsigned char 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  a               1    2[COMMON] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2333 ;;      Params:         0       0       0       0       0
  2334 ;;      Locals:         1       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0
  2336 ;;      Totals:         1       0       0       0       0
  2337 ;;Total ram usage:        1 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    1
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_main
  2344 ;;		_Write_USART_String
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           
  2349                           ;psect for function _Write_USART
  2350  0689                     _Write_USART:
  2351                           
  2352                           ;incstack = 0
  2353                           ; Regs used in _Write_USART: [wreg]
  2354                           ;Write_USART@a stored from wreg
  2355  0689  00F2               	movwf	Write_USART@a
  2356  068A                     l1466:
  2357  068A                     l216:	
  2358                           ;USART.c: 34:     while(!TRMT);
  2359                           
  2360  068A  1683               	bsf	3,5	;RP0=1, select bank1
  2361  068B  1303               	bcf	3,6	;RP1=0, select bank1
  2362  068C  1C98               	btfss	24,1	;volatile
  2363  068D  2E8F               	goto	u781
  2364  068E  2E90               	goto	u780
  2365  068F                     u781:
  2366  068F  2E8A               	goto	l216
  2367  0690                     u780:
  2368  0690                     l1468:
  2369                           
  2370                           ;USART.c: 35:     TXREG=a;
  2371  0690  0872               	movf	Write_USART@a,w
  2372  0691  1283               	bcf	3,5	;RP0=0, select bank0
  2373  0692  1303               	bcf	3,6	;RP1=0, select bank0
  2374  0693  0099               	movwf	25	;volatile
  2375  0694                     l219:
  2376  0694  0008               	return
  2377  0695                     __end_of_Write_USART:
  2378                           
  2379                           	psect	text10
  2380  0658                     __ptext10:	
  2381 ;; *************** function _Show_val_LCD *****************
  2382 ;; Defined at:
  2383 ;;		line 186 in file "main_maestro.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2397 ;;      Params:         0       0       0       0       0
  2398 ;;      Locals:         0       0       0       0       0
  2399 ;;      Temps:          0       0       0       0       0
  2400 ;;      Totals:         0       0       0       0       0
  2401 ;;Total ram usage:        0 bytes
  2402 ;; Hardware stack levels used:    1
  2403 ;; Hardware stack levels required when called:    4
  2404 ;; This function calls:
  2405 ;;		_Lcd_Set_Cursor
  2406 ;;		_Lcd_Write_String
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           
  2413                           ;psect for function _Show_val_LCD
  2414  0658                     _Show_val_LCD:
  2415  0658                     l2022:	
  2416                           ;incstack = 0
  2417                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2418                           
  2419                           
  2420                           ;main_maestro.c: 189:     Lcd_Set_Cursor(2,1);
  2421  0658  01F6               	clrf	Lcd_Set_Cursor@b
  2422  0659  0AF6               	incf	Lcd_Set_Cursor@b,f
  2423  065A  3002               	movlw	2
  2424  065B  120A  118A  25D9  120A  118A  	fcall	_Lcd_Set_Cursor
  2425  0660                     l2024:
  2426                           
  2427                           ;main_maestro.c: 190:     Lcd_Write_String(data_cont);
  2428  0660  3048               	movlw	(low (_data_cont| 0))& (0+255)
  2429  0661  00F5               	movwf	Lcd_Write_String@a
  2430  0662  3000               	movlw	0
  2431  0663  00F6               	movwf	Lcd_Write_String@a+1
  2432  0664  120A  118A  23AF  120A  118A  	fcall	_Lcd_Write_String
  2433  0669                     l116:
  2434  0669  0008               	return
  2435  066A                     __end_of_Show_val_LCD:
  2436                           
  2437                           	psect	text11
  2438  03AF                     __ptext11:	
  2439 ;; *************** function _Lcd_Write_String *****************
  2440 ;; Defined at:
  2441 ;;		line 70 in file "LCD.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;  a               2    5[COMMON] PTR unsigned char 
  2444 ;;		 -> data_cont(8), STR_1(17), 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  i               2    0[BANK0 ] int 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2456 ;;      Params:         2       0       0       0       0
  2457 ;;      Locals:         0       2       0       0       0
  2458 ;;      Temps:          3       0       0       0       0
  2459 ;;      Totals:         5       2       0       0       0
  2460 ;;Total ram usage:        7 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    3
  2463 ;; This function calls:
  2464 ;;		_Lcd_Write_Char
  2465 ;; This function is called by:
  2466 ;;		_main
  2467 ;;		_Show_val_LCD
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           
  2472                           ;psect for function _Lcd_Write_String
  2473  03AF                     _Lcd_Write_String:
  2474  03AF                     l1910:	
  2475                           ;incstack = 0
  2476                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2477                           
  2478                           
  2479                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2480  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  2481  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  2482  03B1  01D0               	clrf	Lcd_Write_String@i
  2483  03B2  01D1               	clrf	Lcd_Write_String@i+1
  2484  03B3  2BD8               	goto	l1916
  2485  03B4                     l1912:
  2486                           
  2487                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2488  03B4  0850               	movf	Lcd_Write_String@i,w
  2489  03B5  0775               	addwf	Lcd_Write_String@a,w
  2490  03B6  00F8               	movwf	??_Lcd_Write_String+1
  2491  03B7  0876               	movf	Lcd_Write_String@a+1,w
  2492  03B8  00F7               	movwf	??_Lcd_Write_String
  2493  03B9  1803               	skipnc
  2494  03BA  0AF7               	incf	??_Lcd_Write_String,f
  2495  03BB  1FD0               	btfss	Lcd_Write_String@i,7
  2496  03BC  2BBE               	goto	u1160
  2497  03BD  03F7               	decf	??_Lcd_Write_String,f
  2498  03BE                     u1160:
  2499  03BE  0877               	movf	??_Lcd_Write_String,w
  2500  03BF  00F9               	movwf	??_Lcd_Write_String+2
  2501  03C0  0879               	movf	??_Lcd_Write_String+2,w
  2502  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  2503  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2504  03C3  00FF               	movwf	btemp+1
  2505  03C4  0878               	movf	??_Lcd_Write_String+1,w
  2506  03C5  0084               	movwf	4
  2507  03C6  120A  118A  230F  120A  118A  	fcall	stringtab
  2508  03CB  120A  118A  262D  120A  118A  	fcall	_Lcd_Write_Char
  2509  03D0                     l1914:
  2510  03D0  3001               	movlw	1
  2511  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  2512  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  2513  03D3  07D0               	addwf	Lcd_Write_String@i,f
  2514  03D4  1803               	skipnc
  2515  03D5  0AD1               	incf	Lcd_Write_String@i+1,f
  2516  03D6  3000               	movlw	0
  2517  03D7  07D1               	addwf	Lcd_Write_String@i+1,f
  2518  03D8                     l1916:
  2519  03D8  0850               	movf	Lcd_Write_String@i,w
  2520  03D9  0775               	addwf	Lcd_Write_String@a,w
  2521  03DA  00F8               	movwf	??_Lcd_Write_String+1
  2522  03DB  0876               	movf	Lcd_Write_String@a+1,w
  2523  03DC  00F7               	movwf	??_Lcd_Write_String
  2524  03DD  1803               	skipnc
  2525  03DE  0AF7               	incf	??_Lcd_Write_String,f
  2526  03DF  1FD0               	btfss	Lcd_Write_String@i,7
  2527  03E0  2BE2               	goto	u1170
  2528  03E1  03F7               	decf	??_Lcd_Write_String,f
  2529  03E2                     u1170:
  2530  03E2  0877               	movf	??_Lcd_Write_String,w
  2531  03E3  00F9               	movwf	??_Lcd_Write_String+2
  2532  03E4  0879               	movf	??_Lcd_Write_String+2,w
  2533  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  2534  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  2535  03E7  00FF               	movwf	btemp+1
  2536  03E8  0878               	movf	??_Lcd_Write_String+1,w
  2537  03E9  0084               	movwf	4
  2538  03EA  120A  118A  230F  120A  118A  	fcall	stringtab
  2539  03EF  3A00               	xorlw	0
  2540  03F0  1D03               	skipz
  2541  03F1  2BF3               	goto	u1181
  2542  03F2  2BF4               	goto	u1180
  2543  03F3                     u1181:
  2544  03F3  2BB4               	goto	l1912
  2545  03F4                     u1180:
  2546  03F4                     l178:
  2547  03F4  0008               	return
  2548  03F5                     __end_of_Lcd_Write_String:
  2549                           
  2550                           	psect	text12
  2551  062D                     __ptext12:	
  2552 ;; *************** function _Lcd_Write_Char *****************
  2553 ;; Defined at:
  2554 ;;		line 61 in file "LCD.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  a               1    wreg     unsigned char 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  a               1    4[COMMON] unsigned char 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0, pclath, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2568 ;;      Params:         0       0       0       0       0
  2569 ;;      Locals:         1       0       0       0       0
  2570 ;;      Temps:          1       0       0       0       0
  2571 ;;      Totals:         2       0       0       0       0
  2572 ;;Total ram usage:        2 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    2
  2575 ;; This function calls:
  2576 ;;		_Lcd_Port
  2577 ;; This function is called by:
  2578 ;;		_Lcd_Write_String
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           
  2583                           ;psect for function _Lcd_Write_Char
  2584  062D                     _Lcd_Write_Char:
  2585                           
  2586                           ;incstack = 0
  2587                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2588                           ;Lcd_Write_Char@a stored from wreg
  2589  062D  00F4               	movwf	Lcd_Write_Char@a
  2590  062E                     l1866:
  2591                           
  2592                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2593  062E  1283               	bcf	3,5	;RP0=0, select bank0
  2594  062F  1303               	bcf	3,6	;RP1=0, select bank0
  2595  0630  1409               	bsf	9,0	;volatile
  2596  0631                     l1868:
  2597                           
  2598                           ;LCD.c: 63:    Lcd_Port(a);
  2599  0631  0874               	movf	Lcd_Write_Char@a,w
  2600  0632  120A  118A  26C8  120A  118A  	fcall	_Lcd_Port
  2601  0637                     l1870:
  2602                           
  2603                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2604  0637  1283               	bcf	3,5	;RP0=0, select bank0
  2605  0638  1303               	bcf	3,6	;RP1=0, select bank0
  2606  0639  1509               	bsf	9,2	;volatile
  2607  063A                     l1872:
  2608                           
  2609                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2610  063A  301A               	movlw	26
  2611  063B  00F3               	movwf	??_Lcd_Write_Char
  2612  063C                     u1427:
  2613  063C  0BF3               	decfsz	??_Lcd_Write_Char,f
  2614  063D  2E3C               	goto	u1427
  2615  063E  0000               	nop
  2616  063F                     l1874:
  2617                           
  2618                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2619  063F  1283               	bcf	3,5	;RP0=0, select bank0
  2620  0640  1303               	bcf	3,6	;RP1=0, select bank0
  2621  0641  1109               	bcf	9,2	;volatile
  2622  0642                     l172:
  2623  0642  0008               	return
  2624  0643                     __end_of_Lcd_Write_Char:
  2625                           
  2626                           	psect	text13
  2627  05D9                     __ptext13:	
  2628 ;; *************** function _Lcd_Set_Cursor *****************
  2629 ;; Defined at:
  2630 ;;		line 48 in file "LCD.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  a               1    wreg     unsigned char 
  2633 ;;  b               1    6[COMMON] unsigned char 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  a               1    8[COMMON] unsigned char 
  2636 ;;  temp            1    9[COMMON] unsigned char 
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0, pclath, cstack
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2646 ;;      Params:         1       0       0       0       0
  2647 ;;      Locals:         2       0       0       0       0
  2648 ;;      Temps:          1       0       0       0       0
  2649 ;;      Totals:         4       0       0       0       0
  2650 ;;Total ram usage:        4 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    3
  2653 ;; This function calls:
  2654 ;;		_Lcd_Cmd
  2655 ;; This function is called by:
  2656 ;;		_main
  2657 ;;		_Show_val_LCD
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           
  2662                           ;psect for function _Lcd_Set_Cursor
  2663  05D9                     _Lcd_Set_Cursor:
  2664                           
  2665                           ;incstack = 0
  2666                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2667                           ;Lcd_Set_Cursor@a stored from wreg
  2668  05D9  00F8               	movwf	Lcd_Set_Cursor@a
  2669  05DA                     l1898:
  2670                           
  2671                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2672  05DA  0378               	decf	Lcd_Set_Cursor@a,w
  2673  05DB  1D03               	btfss	3,2
  2674  05DC  2DDE               	goto	u1141
  2675  05DD  2DDF               	goto	u1140
  2676  05DE                     u1141:
  2677  05DE  2DEB               	goto	l1904
  2678  05DF                     u1140:
  2679  05DF                     l1900:
  2680                           
  2681                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2682  05DF  0876               	movf	Lcd_Set_Cursor@b,w
  2683  05E0  3E7F               	addlw	127
  2684  05E1  00F7               	movwf	??_Lcd_Set_Cursor
  2685  05E2  0877               	movf	??_Lcd_Set_Cursor,w
  2686  05E3  00F9               	movwf	Lcd_Set_Cursor@temp
  2687  05E4                     l1902:
  2688                           
  2689                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2690  05E4  0879               	movf	Lcd_Set_Cursor@temp,w
  2691  05E5  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  2692                           
  2693                           ;LCD.c: 53:  }
  2694  05EA  2DFC               	goto	l169
  2695  05EB                     l1904:
  2696  05EB  3002               	movlw	2
  2697  05EC  0678               	xorwf	Lcd_Set_Cursor@a,w
  2698  05ED  1D03               	btfss	3,2
  2699  05EE  2DF0               	goto	u1151
  2700  05EF  2DF1               	goto	u1150
  2701  05F0                     u1151:
  2702  05F0  2DFC               	goto	l169
  2703  05F1                     u1150:
  2704  05F1                     l1906:
  2705                           
  2706                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2707  05F1  0876               	movf	Lcd_Set_Cursor@b,w
  2708  05F2  3EBF               	addlw	191
  2709  05F3  00F7               	movwf	??_Lcd_Set_Cursor
  2710  05F4  0877               	movf	??_Lcd_Set_Cursor,w
  2711  05F5  00F9               	movwf	Lcd_Set_Cursor@temp
  2712  05F6                     l1908:
  2713                           
  2714                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2715  05F6  0879               	movf	Lcd_Set_Cursor@temp,w
  2716  05F7  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  2717  05FC                     l169:
  2718  05FC  0008               	return
  2719  05FD                     __end_of_Lcd_Set_Cursor:
  2720                           
  2721                           	psect	text14
  2722  0555                     __ptext14:	
  2723 ;; *************** function _SPI_TEMP *****************
  2724 ;; Defined at:
  2725 ;;		line 228 in file "main_maestro.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2, status,0, pclath, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2739 ;;      Params:         0       0       0       0       0
  2740 ;;      Locals:         0       0       0       0       0
  2741 ;;      Temps:          3       0       0       0       0
  2742 ;;      Totals:         3       0       0       0       0
  2743 ;;Total ram usage:        3 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    3
  2746 ;; This function calls:
  2747 ;;		_spiRead
  2748 ;;		_spiWrite
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           
  2755                           ;psect for function _SPI_TEMP
  2756  0555                     _SPI_TEMP:
  2757  0555                     l1668:	
  2758                           ;incstack = 0
  2759                           ; Regs used in _SPI_TEMP: [wreg+status,2+status,0+pclath+cstack]
  2760                           
  2761                           
  2762                           ;main_maestro.c: 229:     RC1 = 0;
  2763  0555  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0556  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0557  1087               	bcf	7,1	;volatile
  2766  0558                     l1670:
  2767                           
  2768                           ;main_maestro.c: 230:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2769  0558  3003               	movlw	3
  2770  0559  00F4               	movwf	??_SPI_TEMP+1
  2771  055A  3097               	movlw	151
  2772  055B  00F3               	movwf	??_SPI_TEMP
  2773  055C                     u1437:
  2774  055C  0BF3               	decfsz	??_SPI_TEMP,f
  2775  055D  2D5C               	goto	u1437
  2776  055E  0BF4               	decfsz	??_SPI_TEMP+1,f
  2777  055F  2D5C               	goto	u1437
  2778  0560  2D61               	nop2
  2779  0561                     l1672:
  2780                           
  2781                           ;main_maestro.c: 232:    spiWrite(hola_esclavo);
  2782  0561  3000               	movlw	0
  2783  0562  120A  118A  26C2  120A  118A  	fcall	_spiWrite
  2784  0567                     l1674:
  2785                           
  2786                           ;main_maestro.c: 233:    val_TEMP = spiRead();
  2787  0567  120A  118A  2695  120A  118A  	fcall	_spiRead
  2788  056C  00F3               	movwf	??_SPI_TEMP
  2789  056D  0873               	movf	??_SPI_TEMP,w
  2790  056E  00FA               	movwf	_val_TEMP
  2791                           
  2792                           ;main_maestro.c: 235:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2793  056F  3003               	movlw	3
  2794  0570  00F4               	movwf	??_SPI_TEMP+1
  2795  0571  3097               	movlw	151
  2796  0572  00F3               	movwf	??_SPI_TEMP
  2797  0573                     u1447:
  2798  0573  0BF3               	decfsz	??_SPI_TEMP,f
  2799  0574  2D73               	goto	u1447
  2800  0575  0BF4               	decfsz	??_SPI_TEMP+1,f
  2801  0576  2D73               	goto	u1447
  2802  0577  2D78               	nop2
  2803  0578                     l1676:
  2804                           
  2805                           ;main_maestro.c: 236:    RC1 = 1;
  2806  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2807  0579  1303               	bcf	3,6	;RP1=0, select bank0
  2808  057A  1487               	bsf	7,1	;volatile
  2809                           
  2810                           ;main_maestro.c: 238:    _delay((unsigned long)((100)*(8000000/4000.0)));
  2811  057B  3002               	movlw	2
  2812  057C  00F5               	movwf	??_SPI_TEMP+2
  2813  057D  3004               	movlw	4
  2814  057E  00F4               	movwf	??_SPI_TEMP+1
  2815  057F  30BA               	movlw	186
  2816  0580  00F3               	movwf	??_SPI_TEMP
  2817  0581                     u1457:
  2818  0581  0BF3               	decfsz	??_SPI_TEMP,f
  2819  0582  2D81               	goto	u1457
  2820  0583  0BF4               	decfsz	??_SPI_TEMP+1,f
  2821  0584  2D81               	goto	u1457
  2822  0585  0BF5               	decfsz	??_SPI_TEMP+2,f
  2823  0586  2D81               	goto	u1457
  2824  0587  0000               	nop
  2825  0588                     l125:
  2826  0588  0008               	return
  2827  0589                     __end_of_SPI_TEMP:
  2828                           
  2829                           	psect	text15
  2830  04E9                     __ptext15:	
  2831 ;; *************** function _SPI_CONT *****************
  2832 ;; Defined at:
  2833 ;;		line 203 in file "main_maestro.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, status,2, status,0, pclath, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2847 ;;      Params:         0       0       0       0       0
  2848 ;;      Locals:         0       0       0       0       0
  2849 ;;      Temps:          3       0       0       0       0
  2850 ;;      Totals:         3       0       0       0       0
  2851 ;;Total ram usage:        3 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    3
  2854 ;; This function calls:
  2855 ;;		_spiRead
  2856 ;;		_spiWrite
  2857 ;; This function is called by:
  2858 ;;		_main
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           
  2863                           ;psect for function _SPI_CONT
  2864  04E9                     _SPI_CONT:
  2865  04E9                     l1648:	
  2866                           ;incstack = 0
  2867                           ; Regs used in _SPI_CONT: [wreg+status,2+status,0+pclath+cstack]
  2868                           
  2869                           
  2870                           ;main_maestro.c: 204:     RC2 = 0;
  2871  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2872  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2873  04EB  1107               	bcf	7,2	;volatile
  2874  04EC                     l1650:
  2875                           
  2876                           ;main_maestro.c: 205:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2877  04EC  3003               	movlw	3
  2878  04ED  00F4               	movwf	??_SPI_CONT+1
  2879  04EE  3097               	movlw	151
  2880  04EF  00F3               	movwf	??_SPI_CONT
  2881  04F0                     u1467:
  2882  04F0  0BF3               	decfsz	??_SPI_CONT,f
  2883  04F1  2CF0               	goto	u1467
  2884  04F2  0BF4               	decfsz	??_SPI_CONT+1,f
  2885  04F3  2CF0               	goto	u1467
  2886  04F4  2CF5               	nop2
  2887  04F5                     l1652:
  2888                           
  2889                           ;main_maestro.c: 207:    spiWrite(hola_esclavo);
  2890  04F5  3000               	movlw	0
  2891  04F6  120A  118A  26C2  120A  118A  	fcall	_spiWrite
  2892  04FB                     l1654:
  2893                           
  2894                           ;main_maestro.c: 208:    cont = spiRead();
  2895  04FB  120A  118A  2695  120A  118A  	fcall	_spiRead
  2896  0500  00F3               	movwf	??_SPI_CONT
  2897  0501  0873               	movf	??_SPI_CONT,w
  2898  0502  1283               	bcf	3,5	;RP0=0, select bank0
  2899  0503  1303               	bcf	3,6	;RP1=0, select bank0
  2900  0504  00B7               	movwf	_cont
  2901                           
  2902                           ;main_maestro.c: 210:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2903  0505  3003               	movlw	3
  2904  0506  00F4               	movwf	??_SPI_CONT+1
  2905  0507  3097               	movlw	151
  2906  0508  00F3               	movwf	??_SPI_CONT
  2907  0509                     u1477:
  2908  0509  0BF3               	decfsz	??_SPI_CONT,f
  2909  050A  2D09               	goto	u1477
  2910  050B  0BF4               	decfsz	??_SPI_CONT+1,f
  2911  050C  2D09               	goto	u1477
  2912  050D  2D0E               	nop2
  2913  050E                     l1656:
  2914                           
  2915                           ;main_maestro.c: 211:    RC2 = 1;
  2916  050E  1283               	bcf	3,5	;RP0=0, select bank0
  2917  050F  1303               	bcf	3,6	;RP1=0, select bank0
  2918  0510  1507               	bsf	7,2	;volatile
  2919                           
  2920                           ;main_maestro.c: 213:    _delay((unsigned long)((100)*(8000000/4000.0)));
  2921  0511  3002               	movlw	2
  2922  0512  00F5               	movwf	??_SPI_CONT+2
  2923  0513  3004               	movlw	4
  2924  0514  00F4               	movwf	??_SPI_CONT+1
  2925  0515  30BA               	movlw	186
  2926  0516  00F3               	movwf	??_SPI_CONT
  2927  0517                     u1487:
  2928  0517  0BF3               	decfsz	??_SPI_CONT,f
  2929  0518  2D17               	goto	u1487
  2930  0519  0BF4               	decfsz	??_SPI_CONT+1,f
  2931  051A  2D17               	goto	u1487
  2932  051B  0BF5               	decfsz	??_SPI_CONT+2,f
  2933  051C  2D17               	goto	u1487
  2934  051D  0000               	nop
  2935  051E                     l119:
  2936  051E  0008               	return
  2937  051F                     __end_of_SPI_CONT:
  2938                           
  2939                           	psect	text16
  2940  051F                     __ptext16:	
  2941 ;; *************** function _SPI_ADC *****************
  2942 ;; Defined at:
  2943 ;;		line 216 in file "main_maestro.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  1    wreg      void 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0, pclath, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2957 ;;      Params:         0       0       0       0       0
  2958 ;;      Locals:         0       0       0       0       0
  2959 ;;      Temps:          3       0       0       0       0
  2960 ;;      Totals:         3       0       0       0       0
  2961 ;;Total ram usage:        3 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    3
  2964 ;; This function calls:
  2965 ;;		_spiRead
  2966 ;;		_spiWrite
  2967 ;; This function is called by:
  2968 ;;		_main
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           
  2973                           ;psect for function _SPI_ADC
  2974  051F                     _SPI_ADC:
  2975  051F                     l1658:	
  2976                           ;incstack = 0
  2977                           ; Regs used in _SPI_ADC: [wreg+status,2+status,0+pclath+cstack]
  2978                           
  2979                           
  2980                           ;main_maestro.c: 217:     RC0 = 0;
  2981  051F  1283               	bcf	3,5	;RP0=0, select bank0
  2982  0520  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0521  1007               	bcf	7,0	;volatile
  2984  0522                     l1660:
  2985                           
  2986                           ;main_maestro.c: 218:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2987  0522  3003               	movlw	3
  2988  0523  00F4               	movwf	??_SPI_ADC+1
  2989  0524  3097               	movlw	151
  2990  0525  00F3               	movwf	??_SPI_ADC
  2991  0526                     u1497:
  2992  0526  0BF3               	decfsz	??_SPI_ADC,f
  2993  0527  2D26               	goto	u1497
  2994  0528  0BF4               	decfsz	??_SPI_ADC+1,f
  2995  0529  2D26               	goto	u1497
  2996  052A  2D2B               	nop2
  2997  052B                     l1662:
  2998                           
  2999                           ;main_maestro.c: 220:    spiWrite(hola_esclavo);
  3000  052B  3000               	movlw	0
  3001  052C  120A  118A  26C2  120A  118A  	fcall	_spiWrite
  3002  0531                     l1664:
  3003                           
  3004                           ;main_maestro.c: 221:    val_ADC = spiRead();
  3005  0531  120A  118A  2695  120A  118A  	fcall	_spiRead
  3006  0536  00F3               	movwf	??_SPI_ADC
  3007  0537  0873               	movf	??_SPI_ADC,w
  3008  0538  1283               	bcf	3,5	;RP0=0, select bank0
  3009  0539  1303               	bcf	3,6	;RP1=0, select bank0
  3010  053A  00B6               	movwf	_val_ADC
  3011                           
  3012                           ;main_maestro.c: 223:    _delay((unsigned long)((1)*(8000000/4000.0)));
  3013  053B  3003               	movlw	3
  3014  053C  00F4               	movwf	??_SPI_ADC+1
  3015  053D  3097               	movlw	151
  3016  053E  00F3               	movwf	??_SPI_ADC
  3017  053F                     u1507:
  3018  053F  0BF3               	decfsz	??_SPI_ADC,f
  3019  0540  2D3F               	goto	u1507
  3020  0541  0BF4               	decfsz	??_SPI_ADC+1,f
  3021  0542  2D3F               	goto	u1507
  3022  0543  2D44               	nop2
  3023  0544                     l1666:
  3024                           
  3025                           ;main_maestro.c: 224:    RC0 = 1;
  3026  0544  1283               	bcf	3,5	;RP0=0, select bank0
  3027  0545  1303               	bcf	3,6	;RP1=0, select bank0
  3028  0546  1407               	bsf	7,0	;volatile
  3029                           
  3030                           ;main_maestro.c: 226:    _delay((unsigned long)((100)*(8000000/4000.0)));
  3031  0547  3002               	movlw	2
  3032  0548  00F5               	movwf	??_SPI_ADC+2
  3033  0549  3004               	movlw	4
  3034  054A  00F4               	movwf	??_SPI_ADC+1
  3035  054B  30BA               	movlw	186
  3036  054C  00F3               	movwf	??_SPI_ADC
  3037  054D                     u1517:
  3038  054D  0BF3               	decfsz	??_SPI_ADC,f
  3039  054E  2D4D               	goto	u1517
  3040  054F  0BF4               	decfsz	??_SPI_ADC+1,f
  3041  0550  2D4D               	goto	u1517
  3042  0551  0BF5               	decfsz	??_SPI_ADC+2,f
  3043  0552  2D4D               	goto	u1517
  3044  0553  0000               	nop
  3045  0554                     l122:
  3046  0554  0008               	return
  3047  0555                     __end_of_SPI_ADC:
  3048                           
  3049                           	psect	text17
  3050  06C2                     __ptext17:	
  3051 ;; *************** function _spiWrite *****************
  3052 ;; Defined at:
  3053 ;;		line 36 in file "SPI.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  dat             1    wreg     unsigned char 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  dat             1    2[COMMON] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3067 ;;      Params:         0       0       0       0       0
  3068 ;;      Locals:         1       0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0
  3070 ;;      Totals:         1       0       0       0       0
  3071 ;;Total ram usage:        1 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    1
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_SPI_CONT
  3078 ;;		_SPI_ADC
  3079 ;;		_SPI_TEMP
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           
  3084                           ;psect for function _spiWrite
  3085  06C2                     _spiWrite:
  3086                           
  3087                           ;incstack = 0
  3088                           ; Regs used in _spiWrite: [wreg]
  3089                           ;spiWrite@dat stored from wreg
  3090  06C2  00F2               	movwf	spiWrite@dat
  3091  06C3                     l1586:
  3092                           
  3093                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  3094  06C3  0872               	movf	spiWrite@dat,w
  3095  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  3096  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  3097  06C6  0093               	movwf	19	;volatile
  3098  06C7                     l257:
  3099  06C7  0008               	return
  3100  06C8                     __end_of_spiWrite:
  3101                           
  3102                           	psect	text18
  3103  0695                     __ptext18:	
  3104 ;; *************** function _spiRead *****************
  3105 ;; Defined at:
  3106 ;;		line 49 in file "SPI.c"
  3107 ;; Parameters:    Size  Location     Type
  3108 ;;		None
  3109 ;; Auto vars:     Size  Location     Type
  3110 ;;		None
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  1    wreg      unsigned char 
  3113 ;; Registers used:
  3114 ;;		wreg, status,2, status,0, pclath, cstack
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3120 ;;      Params:         0       0       0       0       0
  3121 ;;      Locals:         0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0
  3123 ;;      Totals:         0       0       0       0       0
  3124 ;;Total ram usage:        0 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    2
  3127 ;; This function calls:
  3128 ;;		_spiReceiveWait
  3129 ;; This function is called by:
  3130 ;;		_SPI_CONT
  3131 ;;		_SPI_ADC
  3132 ;;		_SPI_TEMP
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function _spiRead
  3138  0695                     _spiRead:
  3139  0695                     l1588:	
  3140                           ;incstack = 0
  3141                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  3142                           
  3143                           
  3144                           ;SPI.c: 51:     spiReceiveWait();
  3145  0695  120A  118A  26AE  120A  118A  	fcall	_spiReceiveWait
  3146  069A                     l1590:
  3147                           
  3148                           ;SPI.c: 52:     return(SSPBUF);
  3149  069A  1283               	bcf	3,5	;RP0=0, select bank0
  3150  069B  1303               	bcf	3,6	;RP1=0, select bank0
  3151  069C  0813               	movf	19,w	;volatile
  3152  069D                     l265:
  3153  069D  0008               	return
  3154  069E                     __end_of_spiRead:
  3155                           
  3156                           	psect	text19
  3157  06AE                     __ptext19:	
  3158 ;; *************** function _spiReceiveWait *****************
  3159 ;; Defined at:
  3160 ;;		line 31 in file "SPI.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;		None
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;		None
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		None
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3174 ;;      Params:         0       0       0       0       0
  3175 ;;      Locals:         0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0
  3177 ;;      Totals:         0       0       0       0       0
  3178 ;;Total ram usage:        0 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    1
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_spiRead
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           
  3189                           ;psect for function _spiReceiveWait
  3190  06AE                     _spiReceiveWait:
  3191  06AE                     l1370:	
  3192                           ;incstack = 0
  3193                           ; Regs used in _spiReceiveWait: []
  3194                           
  3195  06AE                     l251:	
  3196                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  3197                           
  3198  06AE  1683               	bsf	3,5	;RP0=1, select bank1
  3199  06AF  1303               	bcf	3,6	;RP1=0, select bank1
  3200  06B0  1C14               	btfss	20,0	;volatile
  3201  06B1  2EB3               	goto	u551
  3202  06B2  2EB4               	goto	u550
  3203  06B3                     u551:
  3204  06B3  2EAE               	goto	l251
  3205  06B4                     u550:
  3206  06B4                     l254:
  3207  06B4  0008               	return
  3208  06B5                     __end_of_spiReceiveWait:
  3209                           
  3210                           	psect	text20
  3211  0364                     __ptext20:	
  3212 ;; *************** function _Lcd_Init *****************
  3213 ;; Defined at:
  3214 ;;		line 14 in file "LCD.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;		None
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      void 
  3221 ;; Registers used:
  3222 ;;		wreg, status,2, status,0, pclath, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3228 ;;      Params:         0       0       0       0       0
  3229 ;;      Locals:         0       0       0       0       0
  3230 ;;      Temps:          2       0       0       0       0
  3231 ;;      Totals:         2       0       0       0       0
  3232 ;;Total ram usage:        2 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    3
  3235 ;; This function calls:
  3236 ;;		_Lcd_Cmd
  3237 ;;		_Lcd_Port
  3238 ;; This function is called by:
  3239 ;;		_main
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           
  3244                           ;psect for function _Lcd_Init
  3245  0364                     _Lcd_Init:
  3246  0364                     l2008:	
  3247                           ;incstack = 0
  3248                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3249                           
  3250                           
  3251                           ;LCD.c: 15:   Lcd_Port(0x00);
  3252  0364  3000               	movlw	0
  3253  0365  120A  118A  26C8  120A  118A  	fcall	_Lcd_Port
  3254  036A                     l2010:
  3255                           
  3256                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  3257  036A  3034               	movlw	52
  3258  036B  00F7               	movwf	??_Lcd_Init+1
  3259  036C  30F1               	movlw	241
  3260  036D  00F6               	movwf	??_Lcd_Init
  3261  036E                     u1527:
  3262  036E  0BF6               	decfsz	??_Lcd_Init,f
  3263  036F  2B6E               	goto	u1527
  3264  0370  0BF7               	decfsz	??_Lcd_Init+1,f
  3265  0371  2B6E               	goto	u1527
  3266  0372  2B73               	nop2
  3267  0373                     l2012:
  3268                           
  3269                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  3270  0373  3030               	movlw	48
  3271  0374  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3272                           
  3273                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  3274  0379  300D               	movlw	13
  3275  037A  00F7               	movwf	??_Lcd_Init+1
  3276  037B  30FB               	movlw	251
  3277  037C  00F6               	movwf	??_Lcd_Init
  3278  037D                     u1537:
  3279  037D  0BF6               	decfsz	??_Lcd_Init,f
  3280  037E  2B7D               	goto	u1537
  3281  037F  0BF7               	decfsz	??_Lcd_Init+1,f
  3282  0380  2B7D               	goto	u1537
  3283  0381  2B82               	nop2
  3284  0382                     l2014:
  3285                           
  3286                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  3287  0382  3030               	movlw	48
  3288  0383  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3289  0388                     l2016:
  3290                           
  3291                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  3292  0388  301D               	movlw	29
  3293  0389  00F7               	movwf	??_Lcd_Init+1
  3294  038A  3091               	movlw	145
  3295  038B  00F6               	movwf	??_Lcd_Init
  3296  038C                     u1547:
  3297  038C  0BF6               	decfsz	??_Lcd_Init,f
  3298  038D  2B8C               	goto	u1547
  3299  038E  0BF7               	decfsz	??_Lcd_Init+1,f
  3300  038F  2B8C               	goto	u1547
  3301                           
  3302                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  3303  0390  3030               	movlw	48
  3304  0391  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3305                           
  3306                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  3307  0396  3038               	movlw	56
  3308  0397  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3309                           
  3310                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  3311  039C  300C               	movlw	12
  3312  039D  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3313                           
  3314                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  3315  03A2  3001               	movlw	1
  3316  03A3  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3317                           
  3318                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  3319  03A8  3006               	movlw	6
  3320  03A9  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3321  03AE                     l154:
  3322  03AE  0008               	return
  3323  03AF                     __end_of_Lcd_Init:
  3324                           
  3325                           	psect	text21
  3326  067C                     __ptext21:	
  3327 ;; *************** function _Lcd_Clear *****************
  3328 ;; Defined at:
  3329 ;;		line 42 in file "LCD.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0, pclath, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3343 ;;      Params:         0       0       0       0       0
  3344 ;;      Locals:         0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0
  3346 ;;      Totals:         0       0       0       0       0
  3347 ;;Total ram usage:        0 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    3
  3350 ;; This function calls:
  3351 ;;		_Lcd_Cmd
  3352 ;; This function is called by:
  3353 ;;		_main
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           
  3358                           ;psect for function _Lcd_Clear
  3359  067C                     _Lcd_Clear:
  3360  067C                     l2018:	
  3361                           ;incstack = 0
  3362                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3363                           
  3364                           
  3365                           ;LCD.c: 43:  Lcd_Cmd(0);
  3366  067C  3000               	movlw	0
  3367  067D  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3368                           
  3369                           ;LCD.c: 44:  Lcd_Cmd(1);
  3370  0682  3001               	movlw	1
  3371  0683  120A  118A  25FD  120A  118A  	fcall	_Lcd_Cmd
  3372  0688                     l163:
  3373  0688  0008               	return
  3374  0689                     __end_of_Lcd_Clear:
  3375                           
  3376                           	psect	text22
  3377  05FD                     __ptext22:	
  3378 ;; *************** function _Lcd_Cmd *****************
  3379 ;; Defined at:
  3380 ;;		line 33 in file "LCD.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  a               1    wreg     unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  a               1    5[COMMON] unsigned char 
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0, pclath, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3394 ;;      Params:         0       0       0       0       0
  3395 ;;      Locals:         1       0       0       0       0
  3396 ;;      Temps:          2       0       0       0       0
  3397 ;;      Totals:         3       0       0       0       0
  3398 ;;Total ram usage:        3 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    2
  3401 ;; This function calls:
  3402 ;;		_Lcd_Port
  3403 ;; This function is called by:
  3404 ;;		_Lcd_Init
  3405 ;;		_Lcd_Clear
  3406 ;;		_Lcd_Set_Cursor
  3407 ;;		_Lcd_Shift_Right
  3408 ;;		_Lcd_Shift_Left
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _Lcd_Cmd
  3414  05FD                     _Lcd_Cmd:
  3415                           
  3416                           ;incstack = 0
  3417                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3418                           ;Lcd_Cmd@a stored from wreg
  3419  05FD  00F5               	movwf	Lcd_Cmd@a
  3420  05FE                     l1856:
  3421                           
  3422                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  3423  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  3424  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  3425  0600  1009               	bcf	9,0	;volatile
  3426  0601                     l1858:
  3427                           
  3428                           ;LCD.c: 35:  Lcd_Port(a);
  3429  0601  0875               	movf	Lcd_Cmd@a,w
  3430  0602  120A  118A  26C8  120A  118A  	fcall	_Lcd_Port
  3431  0607                     l1860:
  3432                           
  3433                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  3434  0607  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0608  1303               	bcf	3,6	;RP1=0, select bank0
  3436  0609  1509               	bsf	9,2	;volatile
  3437  060A                     l1862:
  3438                           
  3439                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  3440  060A  300B               	movlw	11
  3441  060B  00F4               	movwf	??_Lcd_Cmd+1
  3442  060C  3062               	movlw	98
  3443  060D  00F3               	movwf	??_Lcd_Cmd
  3444  060E                     u1557:
  3445  060E  0BF3               	decfsz	??_Lcd_Cmd,f
  3446  060F  2E0E               	goto	u1557
  3447  0610  0BF4               	decfsz	??_Lcd_Cmd+1,f
  3448  0611  2E0E               	goto	u1557
  3449  0612  0000               	nop
  3450  0613                     l1864:
  3451                           
  3452                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  3453  0613  1283               	bcf	3,5	;RP0=0, select bank0
  3454  0614  1303               	bcf	3,6	;RP1=0, select bank0
  3455  0615  1109               	bcf	9,2	;volatile
  3456  0616                     l160:
  3457  0616  0008               	return
  3458  0617                     __end_of_Lcd_Cmd:
  3459                           
  3460                           	psect	text23
  3461  06C8                     __ptext23:	
  3462 ;; *************** function _Lcd_Port *****************
  3463 ;; Defined at:
  3464 ;;		line 29 in file "LCD.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  a               1    wreg     unsigned char 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  a               1    2[COMMON] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3478 ;;      Params:         0       0       0       0       0
  3479 ;;      Locals:         1       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0
  3481 ;;      Totals:         1       0       0       0       0
  3482 ;;Total ram usage:        1 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    1
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_Lcd_Init
  3489 ;;		_Lcd_Cmd
  3490 ;;		_Lcd_Write_Char
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           
  3495                           ;psect for function _Lcd_Port
  3496  06C8                     _Lcd_Port:
  3497                           
  3498                           ;incstack = 0
  3499                           ; Regs used in _Lcd_Port: [wreg]
  3500                           ;Lcd_Port@a stored from wreg
  3501  06C8  00F2               	movwf	Lcd_Port@a
  3502  06C9                     l1854:
  3503                           
  3504                           ;LCD.c: 30:     PORTD = a;
  3505  06C9  0872               	movf	Lcd_Port@a,w
  3506  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  3507  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  3508  06CC  0088               	movwf	8	;volatile
  3509  06CD                     l157:
  3510  06CD  0008               	return
  3511  06CE                     __end_of_Lcd_Port:
  3512                           
  3513                           	psect	text24
  3514  04B2                     __ptext24:	
  3515 ;; *************** function _ADC_to_string *****************
  3516 ;; Defined at:
  3517 ;;		line 178 in file "main_maestro.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;		None
  3520 ;; Auto vars:     Size  Location     Type
  3521 ;;		None
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  1    wreg      void 
  3524 ;; Registers used:
  3525 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3531 ;;      Params:         0       0       0       0       0
  3532 ;;      Locals:         0       0       0       0       0
  3533 ;;      Temps:          0       3       0       0       0
  3534 ;;      Totals:         0       3       0       0       0
  3535 ;;Total ram usage:        3 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    3
  3538 ;; This function calls:
  3539 ;;		_sprintf
  3540 ;; This function is called by:
  3541 ;;		_main
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           
  3546                           ;psect for function _ADC_to_string
  3547  04B2                     _ADC_to_string:
  3548  04B2                     l2020:	
  3549                           ;incstack = 0
  3550                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3551                           
  3552                           
  3553                           ;main_maestro.c: 180:     sprintf(data_cont, "%.3i", cont);
  3554  04B2  3041               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3555  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  3556  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  3557  04B5  00E3               	movwf	??_ADC_to_string
  3558  04B6  0863               	movf	??_ADC_to_string,w
  3559  04B7  00D6               	movwf	sprintf@f
  3560  04B8  0837               	movf	_cont,w
  3561  04B9  00E4               	movwf	??_ADC_to_string+1
  3562  04BA  01E5               	clrf	??_ADC_to_string+2
  3563  04BB  0864               	movf	??_ADC_to_string+1,w
  3564  04BC  00D7               	movwf	?_sprintf+1
  3565  04BD  0865               	movf	??_ADC_to_string+2,w
  3566  04BE  00D8               	movwf	?_sprintf+2
  3567  04BF  3048               	movlw	(low (_data_cont| 0))& (0+255)
  3568  04C0  120A  118A  201E  120A  118A  	fcall	_sprintf
  3569                           
  3570                           ;main_maestro.c: 181:     sprintf(data_ADC, "%.3i", val_ADC );
  3571  04C5  3041               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  3572  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  3573  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  3574  04C8  00E3               	movwf	??_ADC_to_string
  3575  04C9  0863               	movf	??_ADC_to_string,w
  3576  04CA  00D6               	movwf	sprintf@f
  3577  04CB  0836               	movf	_val_ADC,w
  3578  04CC  00E4               	movwf	??_ADC_to_string+1
  3579  04CD  01E5               	clrf	??_ADC_to_string+2
  3580  04CE  0864               	movf	??_ADC_to_string+1,w
  3581  04CF  00D7               	movwf	?_sprintf+1
  3582  04D0  0865               	movf	??_ADC_to_string+2,w
  3583  04D1  00D8               	movwf	?_sprintf+2
  3584  04D2  3040               	movlw	(low (_data_ADC| 0))& (0+255)
  3585  04D3  120A  118A  201E  120A  118A  	fcall	_sprintf
  3586                           
  3587                           ;main_maestro.c: 182:     sprintf(data_TEMP, "%.2i", mv_temp_val_M );
  3588  04D8  303C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  3589  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3590  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  3591  04DB  00E3               	movwf	??_ADC_to_string
  3592  04DC  0863               	movf	??_ADC_to_string,w
  3593  04DD  00D6               	movwf	sprintf@f
  3594  04DE  0835               	movf	_mv_temp_val_M+1,w
  3595  04DF  00D8               	movwf	?_sprintf+2
  3596  04E0  0834               	movf	_mv_temp_val_M,w
  3597  04E1  00D7               	movwf	?_sprintf+1
  3598  04E2  3038               	movlw	(low (_data_TEMP| 0))& (0+255)
  3599  04E3  120A  118A  201E  120A  118A  	fcall	_sprintf
  3600  04E8                     l113:
  3601  04E8  0008               	return
  3602  04E9                     __end_of_ADC_to_string:
  3603                           
  3604                           	psect	text25
  3605  001E                     __ptext25:	
  3606 ;; *************** function _sprintf *****************
  3607 ;; Defined at:
  3608 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;  sp              1    wreg     PTR unsigned char 
  3611 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  3612 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  3613 ;;		 -> STR_10(5), STR_9(5), STR_8(5), 
  3614 ;; Auto vars:     Size  Location     Type
  3615 ;;  sp              1   16[BANK0 ] PTR unsigned char 
  3616 ;;		 -> data_TEMP(8), data_ADC(8), data_cont(8), 
  3617 ;;  tmpval          4    0        struct .
  3618 ;;  val             2   14[BANK0 ] unsigned int 
  3619 ;;  cp              2    0        PTR const unsigned char 
  3620 ;;  len             2    0        unsigned int 
  3621 ;;  c               1   18[BANK0 ] unsigned char 
  3622 ;;  prec            1   17[BANK0 ] char 
  3623 ;;  flag            1   13[BANK0 ] unsigned char 
  3624 ;;  ap              1   12[BANK0 ] PTR void [1]
  3625 ;;		 -> ?_sprintf(2), 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  2    6[BANK0 ] int 
  3628 ;; Registers used:
  3629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3635 ;;      Params:         0       3       0       0       0
  3636 ;;      Locals:         0       7       0       0       0
  3637 ;;      Temps:          0       3       0       0       0
  3638 ;;      Totals:         0      13       0       0       0
  3639 ;;Total ram usage:       13 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:    2
  3642 ;; This function calls:
  3643 ;;		___bmul
  3644 ;;		___lwdiv
  3645 ;;		___lwmod
  3646 ;;		_isdigit
  3647 ;; This function is called by:
  3648 ;;		_ADC_to_string
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           
  3653                           ;psect for function _sprintf
  3654  001E                     _sprintf:
  3655                           
  3656                           ;incstack = 0
  3657                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3658                           ;sprintf@sp stored from wreg
  3659  001E  1283               	bcf	3,5	;RP0=0, select bank0
  3660  001F  1303               	bcf	3,6	;RP1=0, select bank0
  3661  0020  00E0               	movwf	sprintf@sp
  3662  0021                     l1918:
  3663                           
  3664                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  3665  0021  3057               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  3666  0022  00D9               	movwf	??_sprintf
  3667  0023  0859               	movf	??_sprintf,w
  3668  0024  00DC               	movwf	sprintf@ap
  3669                           
  3670                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3671  0025  296C               	goto	l1996
  3672  0026                     l1920:
  3673                           
  3674                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  3675  0026  3025               	movlw	37
  3676  0027  0662               	xorwf	sprintf@c,w
  3677  0028  1903               	btfsc	3,2
  3678  0029  282B               	goto	u1191
  3679  002A  282C               	goto	u1190
  3680  002B                     u1191:
  3681  002B  2838               	goto	l1926
  3682  002C                     u1190:
  3683  002C                     l1922:
  3684                           
  3685                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  3686  002C  0862               	movf	sprintf@c,w
  3687  002D  00D9               	movwf	??_sprintf
  3688  002E  0860               	movf	sprintf@sp,w
  3689  002F  0084               	movwf	4
  3690  0030  0859               	movf	??_sprintf,w
  3691  0031  1383               	bcf	3,7	;select IRP bank0
  3692  0032  0080               	movwf	0
  3693  0033                     l1924:
  3694  0033  3001               	movlw	1
  3695  0034  00D9               	movwf	??_sprintf
  3696  0035  0859               	movf	??_sprintf,w
  3697  0036  07E0               	addwf	sprintf@sp,f
  3698                           
  3699                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  3700  0037  296C               	goto	l1996
  3701  0038                     l1926:
  3702                           
  3703                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  3704  0038  01DD               	clrf	sprintf@flag
  3705  0039                     l1928:
  3706                           
  3707                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  3708  0039  0856               	movf	sprintf@f,w
  3709  003A  0084               	movwf	4
  3710  003B  120A  118A  2319  120A  118A  	fcall	stringdir
  3711  0040  3A2E               	xorlw	46
  3712  0041  1D03               	skipz
  3713  0042  2844               	goto	u1201
  3714  0043  2845               	goto	u1200
  3715  0044                     u1201:
  3716  0044  287C               	goto	l1942
  3717  0045                     u1200:
  3718  0045                     l1930:
  3719                           
  3720                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  3721  0045  3001               	movlw	1
  3722  0046  00D9               	movwf	??_sprintf
  3723  0047  0859               	movf	??_sprintf,w
  3724  0048  07D6               	addwf	sprintf@f,f
  3725  0049                     l1932:
  3726                           
  3727                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  3728  0049  01E1               	clrf	sprintf@prec
  3729                           
  3730                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3731  004A  286B               	goto	l1940
  3732  004B                     l1934:
  3733                           
  3734                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  3735  004B  1283               	bcf	3,5	;RP0=0, select bank0
  3736  004C  1303               	bcf	3,6	;RP1=0, select bank0
  3737  004D  0861               	movf	sprintf@prec,w
  3738  004E  00D9               	movwf	??_sprintf
  3739  004F  0859               	movf	??_sprintf,w
  3740  0050  00F2               	movwf	___bmul@multiplicand
  3741  0051  300A               	movlw	10
  3742  0052  120A  118A  2643  120A  118A  	fcall	___bmul
  3743  0057  1283               	bcf	3,5	;RP0=0, select bank0
  3744  0058  1303               	bcf	3,6	;RP1=0, select bank0
  3745  0059  00DA               	movwf	??_sprintf+1
  3746  005A  085A               	movf	??_sprintf+1,w
  3747  005B  00E1               	movwf	sprintf@prec
  3748  005C                     l1936:
  3749                           
  3750                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  3751  005C  0856               	movf	sprintf@f,w
  3752  005D  0084               	movwf	4
  3753  005E  120A  118A  2319  120A  118A  	fcall	stringdir
  3754  0063  3ED0               	addlw	-48
  3755  0064  00D9               	movwf	??_sprintf
  3756  0065  0859               	movf	??_sprintf,w
  3757  0066  07E1               	addwf	sprintf@prec,f
  3758  0067                     l1938:
  3759  0067  3001               	movlw	1
  3760  0068  00D9               	movwf	??_sprintf
  3761  0069  0859               	movf	??_sprintf,w
  3762  006A  07D6               	addwf	sprintf@f,f
  3763  006B                     l1940:
  3764                           
  3765                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3766  006B  0856               	movf	sprintf@f,w
  3767  006C  0084               	movwf	4
  3768  006D  120A  118A  2319  120A  118A  	fcall	stringdir
  3769  0072  120A  118A  266A  120A  118A  	fcall	_isdigit
  3770  0077  1803               	btfsc	3,0
  3771  0078  287A               	goto	u1211
  3772  0079  287B               	goto	u1210
  3773  007A                     u1211:
  3774  007A  284B               	goto	l1934
  3775  007B                     u1210:
  3776  007B  287D               	goto	l1946
  3777  007C                     l1942:
  3778                           
  3779                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  3780  007C  01E1               	clrf	sprintf@prec
  3781  007D                     l1946:
  3782  007D  3001               	movlw	1
  3783  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3784  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0080  07D6               	addwf	sprintf@f,f
  3786  0081  30FF               	movlw	-1
  3787  0082  0756               	addwf	sprintf@f,w
  3788  0083  0084               	movwf	4
  3789  0084  120A  118A  2319  120A  118A  	fcall	stringdir
  3790  0089  00E2               	movwf	sprintf@c
  3791  008A  00D9               	movwf	??_sprintf
  3792  008B  01DA               	clrf	??_sprintf+1
  3793                           
  3794                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3795                           ; Switch size 1, requested type "simple"
  3796                           ; Number of cases is 1, Range of values is 0 to 0
  3797                           ; switch strategies available:
  3798                           ; Name         Instructions Cycles
  3799                           ; simple_byte            4     3 (average)
  3800                           ; direct_byte           11     8 (fixed)
  3801                           ; jumptable            260     6 (fixed)
  3802                           ;	Chosen strategy is simple_byte
  3803  008C  085A               	movf	??_sprintf+1,w
  3804  008D  3A00               	xorlw	0	; case 0
  3805  008E  1903               	skipnz
  3806  008F  2891               	goto	l2176
  3807  0090  296C               	goto	l1996
  3808  0091                     l2176:
  3809                           
  3810                           ; Switch size 1, requested type "simple"
  3811                           ; Number of cases is 3, Range of values is 0 to 105
  3812                           ; switch strategies available:
  3813                           ; Name         Instructions Cycles
  3814                           ; simple_byte           10     6 (average)
  3815                           ; jumptable            260     6 (fixed)
  3816                           ;	Chosen strategy is simple_byte
  3817  0091  0859               	movf	??_sprintf,w
  3818  0092  3A00               	xorlw	0	; case 0
  3819  0093  1903               	skipnz
  3820  0094  297E               	goto	l1998
  3821  0095  3A64               	xorlw	100	; case 100
  3822  0096  1903               	skipnz
  3823  0097  289C               	goto	l1948
  3824  0098  3A0D               	xorlw	13	; case 105
  3825  0099  1903               	skipnz
  3826  009A  289C               	goto	l1948
  3827  009B  296C               	goto	l1996
  3828  009C                     l1948:
  3829                           
  3830                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3831  009C  085C               	movf	sprintf@ap,w
  3832  009D  0084               	movwf	4
  3833  009E  1383               	bcf	3,7	;select IRP bank0
  3834  009F  0800               	movf	0,w
  3835  00A0  00DE               	movwf	sprintf@val
  3836  00A1  0A84               	incf	4,f
  3837  00A2  0800               	movf	0,w
  3838  00A3  00DF               	movwf	sprintf@val+1
  3839  00A4                     l1950:
  3840  00A4  3002               	movlw	2
  3841  00A5  00D9               	movwf	??_sprintf
  3842  00A6  0859               	movf	??_sprintf,w
  3843  00A7  07DC               	addwf	sprintf@ap,f
  3844  00A8                     l1952:
  3845                           
  3846                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  3847  00A8  1FDF               	btfss	sprintf@val+1,7
  3848  00A9  28AB               	goto	u1221
  3849  00AA  28AC               	goto	u1220
  3850  00AB                     u1221:
  3851  00AB  28B5               	goto	l1958
  3852  00AC                     u1220:
  3853  00AC                     l1954:
  3854                           
  3855                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  3856  00AC  3003               	movlw	3
  3857  00AD  00D9               	movwf	??_sprintf
  3858  00AE  0859               	movf	??_sprintf,w
  3859  00AF  04DD               	iorwf	sprintf@flag,f
  3860  00B0                     l1956:
  3861                           
  3862                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  3863  00B0  09DE               	comf	sprintf@val,f
  3864  00B1  09DF               	comf	sprintf@val+1,f
  3865  00B2  0ADE               	incf	sprintf@val,f
  3866  00B3  1903               	skipnz
  3867  00B4  0ADF               	incf	sprintf@val+1,f
  3868  00B5                     l1958:
  3869                           
  3870                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  3871  00B5  0861               	movf	sprintf@prec,w
  3872  00B6  1D03               	btfss	3,2
  3873  00B7  28B9               	goto	u1231
  3874  00B8  28BA               	goto	u1230
  3875  00B9                     u1231:
  3876  00B9  28C4               	goto	l1964
  3877  00BA                     u1230:
  3878  00BA                     l1960:
  3879  00BA  085E               	movf	sprintf@val,w
  3880  00BB  045F               	iorwf	sprintf@val+1,w
  3881  00BC  1D03               	btfss	3,2
  3882  00BD  28BF               	goto	u1241
  3883  00BE  28C0               	goto	u1240
  3884  00BF                     u1241:
  3885  00BF  28C4               	goto	l1964
  3886  00C0                     u1240:
  3887  00C0                     l1962:
  3888                           
  3889                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  3890  00C0  3001               	movlw	1
  3891  00C1  00D9               	movwf	??_sprintf
  3892  00C2  0859               	movf	??_sprintf,w
  3893  00C3  07E1               	addwf	sprintf@prec,f
  3894  00C4                     l1964:
  3895                           
  3896                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3897  00C4  01E2               	clrf	sprintf@c
  3898  00C5  0AE2               	incf	sprintf@c,f
  3899  00C6                     l1968:
  3900                           
  3901                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3902  00C6  0862               	movf	sprintf@c,w
  3903  00C7  00D9               	movwf	??_sprintf
  3904  00C8  0759               	addwf	??_sprintf,w
  3905  00C9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3906  00CA  0084               	movwf	4
  3907  00CB  120A  118A  2319  120A  118A  	fcall	stringdir
  3908  00D0  00DA               	movwf	??_sprintf+1
  3909  00D1  120A  118A  2319  120A  118A  	fcall	stringdir
  3910  00D6  00DB               	movwf	??_sprintf+2
  3911  00D7  085B               	movf	??_sprintf+2,w
  3912  00D8  025F               	subwf	sprintf@val+1,w
  3913  00D9  1D03               	skipz
  3914  00DA  28DD               	goto	u1255
  3915  00DB  085A               	movf	??_sprintf+1,w
  3916  00DC  025E               	subwf	sprintf@val,w
  3917  00DD                     u1255:
  3918  00DD  1803               	skipnc
  3919  00DE  28E0               	goto	u1251
  3920  00DF  28E1               	goto	u1250
  3921  00E0                     u1251:
  3922  00E0  28E2               	goto	l1972
  3923  00E1                     u1250:
  3924  00E1  28EC               	goto	l1974
  3925  00E2                     l1972:
  3926  00E2  3001               	movlw	1
  3927  00E3  00D9               	movwf	??_sprintf
  3928  00E4  0859               	movf	??_sprintf,w
  3929  00E5  07E2               	addwf	sprintf@c,f
  3930  00E6  3005               	movlw	5
  3931  00E7  0662               	xorwf	sprintf@c,w
  3932  00E8  1D03               	btfss	3,2
  3933  00E9  28EB               	goto	u1261
  3934  00EA  28EC               	goto	u1260
  3935  00EB                     u1261:
  3936  00EB  28C6               	goto	l1968
  3937  00EC                     u1260:
  3938  00EC                     l1974:
  3939                           
  3940                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  3941  00EC  0861               	movf	sprintf@prec,w
  3942  00ED  00D9               	movwf	??_sprintf
  3943  00EE  01DA               	clrf	??_sprintf+1
  3944  00EF  1BD9               	btfsc	??_sprintf,7
  3945  00F0  03DA               	decf	??_sprintf+1,f
  3946  00F1  085A               	movf	??_sprintf+1,w
  3947  00F2  3A80               	xorlw	128
  3948  00F3  3C80               	sublw	128
  3949  00F4  1D03               	skipz
  3950  00F5  28F8               	goto	u1275
  3951  00F6  0859               	movf	??_sprintf,w
  3952  00F7  0262               	subwf	sprintf@c,w
  3953  00F8                     u1275:
  3954  00F8  1803               	skipnc
  3955  00F9  28FB               	goto	u1271
  3956  00FA  28FC               	goto	u1270
  3957  00FB                     u1271:
  3958  00FB  28FD               	goto	l1978
  3959  00FC                     u1270:
  3960  00FC                     l1976:
  3961  00FC  2917               	goto	l1982
  3962  00FD                     l1978:
  3963  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3964  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  3965  00FF  0861               	movf	sprintf@prec,w
  3966  0100  00D9               	movwf	??_sprintf
  3967  0101  01DA               	clrf	??_sprintf+1
  3968  0102  1BD9               	btfsc	??_sprintf,7
  3969  0103  03DA               	decf	??_sprintf+1,f
  3970  0104  085A               	movf	??_sprintf+1,w
  3971  0105  3A80               	xorlw	128
  3972  0106  00DB               	movwf	??_sprintf+2
  3973  0107  3080               	movlw	128
  3974  0108  025B               	subwf	??_sprintf+2,w
  3975  0109  1D03               	skipz
  3976  010A  290D               	goto	u1285
  3977  010B  0862               	movf	sprintf@c,w
  3978  010C  0259               	subwf	??_sprintf,w
  3979  010D                     u1285:
  3980  010D  1803               	skipnc
  3981  010E  2910               	goto	u1281
  3982  010F  2911               	goto	u1280
  3983  0110                     u1281:
  3984  0110  2917               	goto	l1982
  3985  0111                     u1280:
  3986  0111                     l1980:
  3987                           
  3988                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
  3989  0111  1283               	bcf	3,5	;RP0=0, select bank0
  3990  0112  1303               	bcf	3,6	;RP1=0, select bank0
  3991  0113  0862               	movf	sprintf@c,w
  3992  0114  00D9               	movwf	??_sprintf
  3993  0115  0859               	movf	??_sprintf,w
  3994  0116  00E1               	movwf	sprintf@prec
  3995  0117                     l1982:
  3996                           
  3997                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  3998  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3999  0118  1303               	bcf	3,6	;RP1=0, select bank0
  4000  0119  085D               	movf	sprintf@flag,w
  4001  011A  3903               	andlw	3
  4002  011B  1903               	btfsc	3,2
  4003  011C  291E               	goto	u1291
  4004  011D  291F               	goto	u1290
  4005  011E                     u1291:
  4006  011E  2963               	goto	l1994
  4007  011F                     u1290:
  4008  011F                     l1984:
  4009                           
  4010                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4011  011F  302D               	movlw	45
  4012  0120  00D9               	movwf	??_sprintf
  4013  0121  0860               	movf	sprintf@sp,w
  4014  0122  0084               	movwf	4
  4015  0123  0859               	movf	??_sprintf,w
  4016  0124  1383               	bcf	3,7	;select IRP bank0
  4017  0125  0080               	movwf	0
  4018  0126                     l1986:
  4019  0126  3001               	movlw	1
  4020  0127  00D9               	movwf	??_sprintf
  4021  0128  0859               	movf	??_sprintf,w
  4022  0129  07E0               	addwf	sprintf@sp,f
  4023  012A  2963               	goto	l1994
  4024  012B                     l1988:
  4025                           
  4026                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4027  012B  300A               	movlw	10
  4028  012C  00D0               	movwf	___lwmod@divisor
  4029  012D  3000               	movlw	0
  4030  012E  00D1               	movwf	___lwmod@divisor+1
  4031  012F  0861               	movf	sprintf@prec,w
  4032  0130  00D9               	movwf	??_sprintf
  4033  0131  0759               	addwf	??_sprintf,w
  4034  0132  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4035  0133  0084               	movwf	4
  4036  0134  120A  118A  2319  120A  118A  	fcall	stringdir
  4037  0139  00F2               	movwf	___lwdiv@divisor
  4038  013A  120A  118A  2319  120A  118A  	fcall	stringdir
  4039  013F  00F3               	movwf	___lwdiv@divisor+1
  4040  0140  085F               	movf	sprintf@val+1,w
  4041  0141  00F5               	movwf	___lwdiv@dividend+1
  4042  0142  085E               	movf	sprintf@val,w
  4043  0143  00F4               	movwf	___lwdiv@dividend
  4044  0144  120A  118A  23F5  120A  118A  	fcall	___lwdiv
  4045  0149  0873               	movf	?___lwdiv+1,w
  4046  014A  1283               	bcf	3,5	;RP0=0, select bank0
  4047  014B  1303               	bcf	3,6	;RP1=0, select bank0
  4048  014C  00D3               	movwf	___lwmod@dividend+1
  4049  014D  0872               	movf	?___lwdiv,w
  4050  014E  00D2               	movwf	___lwmod@dividend
  4051  014F  120A  118A  2476  120A  118A  	fcall	___lwmod
  4052  0154  1283               	bcf	3,5	;RP0=0, select bank0
  4053  0155  1303               	bcf	3,6	;RP1=0, select bank0
  4054  0156  0850               	movf	?___lwmod,w
  4055  0157  3E30               	addlw	48
  4056  0158  00DA               	movwf	??_sprintf+1
  4057  0159  085A               	movf	??_sprintf+1,w
  4058  015A  00E2               	movwf	sprintf@c
  4059  015B                     l1990:
  4060                           
  4061                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  4062  015B  0862               	movf	sprintf@c,w
  4063  015C  00D9               	movwf	??_sprintf
  4064  015D  0860               	movf	sprintf@sp,w
  4065  015E  0084               	movwf	4
  4066  015F  0859               	movf	??_sprintf,w
  4067  0160  1383               	bcf	3,7	;select IRP bank0
  4068  0161  0080               	movwf	0
  4069  0162  2926               	goto	l1986
  4070  0163                     l1994:
  4071                           
  4072                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4073  0163  30FF               	movlw	255
  4074  0164  00D9               	movwf	??_sprintf
  4075  0165  0859               	movf	??_sprintf,w
  4076  0166  07E1               	addwf	sprintf@prec,f
  4077  0167  0A61               	incf	sprintf@prec,w
  4078  0168  1D03               	btfss	3,2
  4079  0169  296B               	goto	u1301
  4080  016A  296C               	goto	u1300
  4081  016B                     u1301:
  4082  016B  292B               	goto	l1988
  4083  016C                     u1300:
  4084  016C                     l1996:
  4085                           
  4086                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4087  016C  3001               	movlw	1
  4088  016D  07D6               	addwf	sprintf@f,f
  4089  016E  30FF               	movlw	-1
  4090  016F  0756               	addwf	sprintf@f,w
  4091  0170  0084               	movwf	4
  4092  0171  120A  118A  2319  120A  118A  	fcall	stringdir
  4093  0176  00D9               	movwf	??_sprintf
  4094  0177  0859               	movf	??_sprintf,w
  4095  0178  00E2               	movwf	sprintf@c
  4096  0179  0862               	movf	sprintf@c,w
  4097  017A  1D03               	btfss	3,2
  4098  017B  297D               	goto	u1311
  4099  017C  297E               	goto	u1310
  4100  017D                     u1311:
  4101  017D  2826               	goto	l1920
  4102  017E                     u1310:
  4103  017E                     l1998:
  4104                           
  4105                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4106  017E  0860               	movf	sprintf@sp,w
  4107  017F  0084               	movwf	4
  4108  0180  1383               	bcf	3,7	;select IRP bank0
  4109  0181  0180               	clrf	0
  4110  0182                     l386:
  4111  0182  0008               	return
  4112  0183                     __end_of_sprintf:
  4113                           
  4114                           	psect	text26
  4115  066A                     __ptext26:	
  4116 ;; *************** function _isdigit *****************
  4117 ;; Defined at:
  4118 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  c               1    wreg     unsigned char 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  c               1    3[COMMON] unsigned char 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;		None               void
  4125 ;; Registers used:
  4126 ;;		wreg, status,2, status,0
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4132 ;;      Params:         0       0       0       0       0
  4133 ;;      Locals:         2       0       0       0       0
  4134 ;;      Temps:          0       0       0       0       0
  4135 ;;      Totals:         2       0       0       0       0
  4136 ;;Total ram usage:        2 bytes
  4137 ;; Hardware stack levels used:    1
  4138 ;; Hardware stack levels required when called:    1
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		_sprintf
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           
  4147                           ;psect for function _isdigit
  4148  066A                     _isdigit:
  4149                           
  4150                           ;incstack = 0
  4151                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4152                           ;isdigit@c stored from wreg
  4153  066A  00F3               	movwf	isdigit@c
  4154  066B                     l1372:
  4155  066B  01F2               	clrf	_isdigit$987
  4156  066C                     l1374:
  4157  066C  303A               	movlw	58
  4158  066D  0273               	subwf	isdigit@c,w
  4159  066E  1803               	skipnc
  4160  066F  2E71               	goto	u561
  4161  0670  2E72               	goto	u560
  4162  0671                     u561:
  4163  0671  2E7A               	goto	l1380
  4164  0672                     u560:
  4165  0672                     l1376:
  4166  0672  3030               	movlw	48
  4167  0673  0273               	subwf	isdigit@c,w
  4168  0674  1C03               	skipc
  4169  0675  2E77               	goto	u571
  4170  0676  2E78               	goto	u570
  4171  0677                     u571:
  4172  0677  2E7A               	goto	l1380
  4173  0678                     u570:
  4174  0678                     l1378:
  4175  0678  01F2               	clrf	_isdigit$987
  4176  0679  0AF2               	incf	_isdigit$987,f
  4177  067A                     l1380:
  4178  067A  0C72               	rrf	_isdigit$987,w
  4179  067B                     l818:
  4180  067B  0008               	return
  4181  067C                     __end_of_isdigit:
  4182                           
  4183                           	psect	text27
  4184  0476                     __ptext27:	
  4185 ;; *************** function ___lwmod *****************
  4186 ;; Defined at:
  4187 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  divisor         2    0[BANK0 ] unsigned int 
  4190 ;;  dividend        2    2[BANK0 ] unsigned int 
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  counter         1    5[BANK0 ] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  2    0[BANK0 ] unsigned int 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4202 ;;      Params:         0       4       0       0       0
  4203 ;;      Locals:         0       1       0       0       0
  4204 ;;      Temps:          0       1       0       0       0
  4205 ;;      Totals:         0       6       0       0       0
  4206 ;;Total ram usage:        6 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    1
  4209 ;; This function calls:
  4210 ;;		Nothing
  4211 ;; This function is called by:
  4212 ;;		_sprintf
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function ___lwmod
  4218  0476                     ___lwmod:
  4219  0476                     l1876:	
  4220                           ;incstack = 0
  4221                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  4222                           
  4223  0476  1283               	bcf	3,5	;RP0=0, select bank0
  4224  0477  1303               	bcf	3,6	;RP1=0, select bank0
  4225  0478  0850               	movf	___lwmod@divisor,w
  4226  0479  0451               	iorwf	___lwmod@divisor+1,w
  4227  047A  1903               	btfsc	3,2
  4228  047B  2C7D               	goto	u1081
  4229  047C  2C7E               	goto	u1080
  4230  047D                     u1081:
  4231  047D  2CAD               	goto	l1894
  4232  047E                     u1080:
  4233  047E                     l1878:
  4234  047E  01D5               	clrf	___lwmod@counter
  4235  047F  0AD5               	incf	___lwmod@counter,f
  4236  0480  2C8C               	goto	l1884
  4237  0481                     l1880:
  4238  0481  3001               	movlw	1
  4239  0482                     u1095:
  4240  0482  1003               	clrc
  4241  0483  0DD0               	rlf	___lwmod@divisor,f
  4242  0484  0DD1               	rlf	___lwmod@divisor+1,f
  4243  0485  3EFF               	addlw	-1
  4244  0486  1D03               	skipz
  4245  0487  2C82               	goto	u1095
  4246  0488                     l1882:
  4247  0488  3001               	movlw	1
  4248  0489  00D4               	movwf	??___lwmod
  4249  048A  0854               	movf	??___lwmod,w
  4250  048B  07D5               	addwf	___lwmod@counter,f
  4251  048C                     l1884:
  4252  048C  1FD1               	btfss	___lwmod@divisor+1,7
  4253  048D  2C8F               	goto	u1101
  4254  048E  2C90               	goto	u1100
  4255  048F                     u1101:
  4256  048F  2C81               	goto	l1880
  4257  0490                     u1100:
  4258  0490                     l1886:
  4259  0490  0851               	movf	___lwmod@divisor+1,w
  4260  0491  0253               	subwf	___lwmod@dividend+1,w
  4261  0492  1D03               	skipz
  4262  0493  2C96               	goto	u1115
  4263  0494  0850               	movf	___lwmod@divisor,w
  4264  0495  0252               	subwf	___lwmod@dividend,w
  4265  0496                     u1115:
  4266  0496  1C03               	skipc
  4267  0497  2C99               	goto	u1111
  4268  0498  2C9A               	goto	u1110
  4269  0499                     u1111:
  4270  0499  2CA0               	goto	l1890
  4271  049A                     u1110:
  4272  049A                     l1888:
  4273  049A  0850               	movf	___lwmod@divisor,w
  4274  049B  02D2               	subwf	___lwmod@dividend,f
  4275  049C  0851               	movf	___lwmod@divisor+1,w
  4276  049D  1C03               	skipc
  4277  049E  03D3               	decf	___lwmod@dividend+1,f
  4278  049F  02D3               	subwf	___lwmod@dividend+1,f
  4279  04A0                     l1890:
  4280  04A0  3001               	movlw	1
  4281  04A1                     u1125:
  4282  04A1  1003               	clrc
  4283  04A2  0CD1               	rrf	___lwmod@divisor+1,f
  4284  04A3  0CD0               	rrf	___lwmod@divisor,f
  4285  04A4  3EFF               	addlw	-1
  4286  04A5  1D03               	skipz
  4287  04A6  2CA1               	goto	u1125
  4288  04A7                     l1892:
  4289  04A7  3001               	movlw	1
  4290  04A8  02D5               	subwf	___lwmod@counter,f
  4291  04A9  1D03               	btfss	3,2
  4292  04AA  2CAC               	goto	u1131
  4293  04AB  2CAD               	goto	u1130
  4294  04AC                     u1131:
  4295  04AC  2C90               	goto	l1886
  4296  04AD                     u1130:
  4297  04AD                     l1894:
  4298  04AD  0853               	movf	___lwmod@dividend+1,w
  4299  04AE  00D1               	movwf	?___lwmod+1
  4300  04AF  0852               	movf	___lwmod@dividend,w
  4301  04B0  00D0               	movwf	?___lwmod
  4302  04B1                     l808:
  4303  04B1  0008               	return
  4304  04B2                     __end_of___lwmod:
  4305                           
  4306                           	psect	text28
  4307  03F5                     __ptext28:	
  4308 ;; *************** function ___lwdiv *****************
  4309 ;; Defined at:
  4310 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  divisor         2    2[COMMON] unsigned int 
  4313 ;;  dividend        2    4[COMMON] unsigned int 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  quotient        2    7[COMMON] unsigned int 
  4316 ;;  counter         1    9[COMMON] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    2[COMMON] unsigned int 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4326 ;;      Params:         4       0       0       0       0
  4327 ;;      Locals:         3       0       0       0       0
  4328 ;;      Temps:          1       0       0       0       0
  4329 ;;      Totals:         8       0       0       0       0
  4330 ;;Total ram usage:        8 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    1
  4333 ;; This function calls:
  4334 ;;		Nothing
  4335 ;; This function is called by:
  4336 ;;		_sprintf
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function ___lwdiv
  4342  03F5                     ___lwdiv:
  4343  03F5                     l1398:	
  4344                           ;incstack = 0
  4345                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4346                           
  4347  03F5  01F7               	clrf	___lwdiv@quotient
  4348  03F6  01F8               	clrf	___lwdiv@quotient+1
  4349  03F7                     l1400:
  4350  03F7  0872               	movf	___lwdiv@divisor,w
  4351  03F8  0473               	iorwf	___lwdiv@divisor+1,w
  4352  03F9  1903               	btfsc	3,2
  4353  03FA  2BFC               	goto	u601
  4354  03FB  2BFD               	goto	u600
  4355  03FC                     u601:
  4356  03FC  2C34               	goto	l1420
  4357  03FD                     u600:
  4358  03FD                     l1402:
  4359  03FD  01F9               	clrf	___lwdiv@counter
  4360  03FE  0AF9               	incf	___lwdiv@counter,f
  4361  03FF  2C0B               	goto	l1408
  4362  0400                     l1404:
  4363  0400  3001               	movlw	1
  4364  0401                     u615:
  4365  0401  1003               	clrc
  4366  0402  0DF2               	rlf	___lwdiv@divisor,f
  4367  0403  0DF3               	rlf	___lwdiv@divisor+1,f
  4368  0404  3EFF               	addlw	-1
  4369  0405  1D03               	skipz
  4370  0406  2C01               	goto	u615
  4371  0407                     l1406:
  4372  0407  3001               	movlw	1
  4373  0408  00F6               	movwf	??___lwdiv
  4374  0409  0876               	movf	??___lwdiv,w
  4375  040A  07F9               	addwf	___lwdiv@counter,f
  4376  040B                     l1408:
  4377  040B  1FF3               	btfss	___lwdiv@divisor+1,7
  4378  040C  2C0E               	goto	u621
  4379  040D  2C0F               	goto	u620
  4380  040E                     u621:
  4381  040E  2C00               	goto	l1404
  4382  040F                     u620:
  4383  040F                     l1410:
  4384  040F  3001               	movlw	1
  4385  0410                     u635:
  4386  0410  1003               	clrc
  4387  0411  0DF7               	rlf	___lwdiv@quotient,f
  4388  0412  0DF8               	rlf	___lwdiv@quotient+1,f
  4389  0413  3EFF               	addlw	-1
  4390  0414  1D03               	skipz
  4391  0415  2C10               	goto	u635
  4392  0416  0873               	movf	___lwdiv@divisor+1,w
  4393  0417  0275               	subwf	___lwdiv@dividend+1,w
  4394  0418  1D03               	skipz
  4395  0419  2C1C               	goto	u645
  4396  041A  0872               	movf	___lwdiv@divisor,w
  4397  041B  0274               	subwf	___lwdiv@dividend,w
  4398  041C                     u645:
  4399  041C  1C03               	skipc
  4400  041D  2C1F               	goto	u641
  4401  041E  2C20               	goto	u640
  4402  041F                     u641:
  4403  041F  2C27               	goto	l1416
  4404  0420                     u640:
  4405  0420                     l1412:
  4406  0420  0872               	movf	___lwdiv@divisor,w
  4407  0421  02F4               	subwf	___lwdiv@dividend,f
  4408  0422  0873               	movf	___lwdiv@divisor+1,w
  4409  0423  1C03               	skipc
  4410  0424  03F5               	decf	___lwdiv@dividend+1,f
  4411  0425  02F5               	subwf	___lwdiv@dividend+1,f
  4412  0426                     l1414:
  4413  0426  1477               	bsf	___lwdiv@quotient,0
  4414  0427                     l1416:
  4415  0427  3001               	movlw	1
  4416  0428                     u655:
  4417  0428  1003               	clrc
  4418  0429  0CF3               	rrf	___lwdiv@divisor+1,f
  4419  042A  0CF2               	rrf	___lwdiv@divisor,f
  4420  042B  3EFF               	addlw	-1
  4421  042C  1D03               	skipz
  4422  042D  2C28               	goto	u655
  4423  042E                     l1418:
  4424  042E  3001               	movlw	1
  4425  042F  02F9               	subwf	___lwdiv@counter,f
  4426  0430  1D03               	btfss	3,2
  4427  0431  2C33               	goto	u661
  4428  0432  2C34               	goto	u660
  4429  0433                     u661:
  4430  0433  2C0F               	goto	l1410
  4431  0434                     u660:
  4432  0434                     l1420:
  4433  0434  0878               	movf	___lwdiv@quotient+1,w
  4434  0435  00F3               	movwf	?___lwdiv+1
  4435  0436  0877               	movf	___lwdiv@quotient,w
  4436  0437  00F2               	movwf	?___lwdiv
  4437  0438                     l798:
  4438  0438  0008               	return
  4439  0439                     __end_of___lwdiv:
  4440                           
  4441                           	psect	text29
  4442  0643                     __ptext29:	
  4443 ;; *************** function ___bmul *****************
  4444 ;; Defined at:
  4445 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  multiplier      1    wreg     unsigned char 
  4448 ;;  multiplicand    1    2[COMMON] unsigned char 
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  multiplier      1    5[COMMON] unsigned char 
  4451 ;;  product         1    4[COMMON] unsigned char 
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      unsigned char 
  4454 ;; Registers used:
  4455 ;;		wreg, status,2, status,0
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4461 ;;      Params:         1       0       0       0       0
  4462 ;;      Locals:         2       0       0       0       0
  4463 ;;      Temps:          1       0       0       0       0
  4464 ;;      Totals:         4       0       0       0       0
  4465 ;;Total ram usage:        4 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; Hardware stack levels required when called:    1
  4468 ;; This function calls:
  4469 ;;		Nothing
  4470 ;; This function is called by:
  4471 ;;		_sprintf
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           
  4476                           ;psect for function ___bmul
  4477  0643                     ___bmul:
  4478                           
  4479                           ;incstack = 0
  4480                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4481                           ;___bmul@multiplier stored from wreg
  4482  0643  00F5               	movwf	___bmul@multiplier
  4483  0644                     l1384:
  4484  0644  01F4               	clrf	___bmul@product
  4485  0645                     l1386:
  4486  0645  1C75               	btfss	___bmul@multiplier,0
  4487  0646  2E48               	goto	u581
  4488  0647  2E49               	goto	u580
  4489  0648                     u581:
  4490  0648  2E4D               	goto	l1390
  4491  0649                     u580:
  4492  0649                     l1388:
  4493  0649  0872               	movf	___bmul@multiplicand,w
  4494  064A  00F3               	movwf	??___bmul
  4495  064B  0873               	movf	??___bmul,w
  4496  064C  07F4               	addwf	___bmul@product,f
  4497  064D                     l1390:
  4498  064D  1003               	clrc
  4499  064E  0DF2               	rlf	___bmul@multiplicand,f
  4500  064F                     l1392:
  4501  064F  1003               	clrc
  4502  0650  0CF5               	rrf	___bmul@multiplier,f
  4503  0651  0875               	movf	___bmul@multiplier,w
  4504  0652  1D03               	btfss	3,2
  4505  0653  2E55               	goto	u591
  4506  0654  2E56               	goto	u590
  4507  0655                     u591:
  4508  0655  2E45               	goto	l1386
  4509  0656                     u590:
  4510  0656                     l1394:
  4511  0656  0874               	movf	___bmul@product,w
  4512  0657                     l416:
  4513  0657  0008               	return
  4514  0658                     __end_of___bmul:
  4515                           
  4516                           	psect	text30
  4517  06B5                     __ptext30:	
  4518 ;; *************** function _ISR *****************
  4519 ;; Defined at:
  4520 ;;		line 85 in file "main_maestro.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;		None
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;		None
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      void 
  4527 ;; Registers used:
  4528 ;;		None
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4534 ;;      Params:         0       0       0       0       0
  4535 ;;      Locals:         0       0       0       0       0
  4536 ;;      Temps:          2       0       0       0       0
  4537 ;;      Totals:         2       0       0       0       0
  4538 ;;Total ram usage:        2 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; This function calls:
  4541 ;;		Nothing
  4542 ;; This function is called by:
  4543 ;;		Interrupt level 1
  4544 ;; This function uses a non-reentrant model
  4545 ;;
  4546                           
  4547                           
  4548                           ;psect for function _ISR
  4549  06B5                     _ISR:
  4550  06B5                     i1l99:
  4551  06B5  0871               	movf	??_ISR+1,w
  4552  06B6  008A               	movwf	10
  4553  06B7  0E70               	swapf	??_ISR,w
  4554  06B8  0083               	movwf	3
  4555  06B9  0EFE               	swapf	btemp,f
  4556  06BA  0E7E               	swapf	btemp,w
  4557  06BB  0009               	retfie
  4558  06BC                     __end_of_ISR:
  4559  007E                     btemp	set	126	;btemp
  4560  007E                     wtemp0	set	126
  4561                           
  4562                           	psect	intentry
  4563  0004                     __pintentry:	
  4564                           ;incstack = 0
  4565                           ; Regs used in _ISR: []
  4566                           
  4567  0004                     interrupt_function:
  4568  007E                     saved_w	set	btemp
  4569  0004  00FE               	movwf	btemp
  4570  0005  0E03               	swapf	3,w
  4571  0006  00F0               	movwf	??_ISR
  4572  0007  080A               	movf	10,w
  4573  0008  00F1               	movwf	??_ISR+1
  4574  0009  120A  118A  2EB5   	ljmp	_ISR
  4575                           
  4576                           	psect	config
  4577                           
  4578                           ;Config register CONFIG1 @ 0x2007
  4579                           ;	Oscillator Selection bits
  4580                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  4581                           ;	Watchdog Timer Enable bit
  4582                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4583                           ;	Power-up Timer Enable bit
  4584                           ;	PWRTE = OFF, PWRT disabled
  4585                           ;	RE3/MCLR pin function select bit
  4586                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4587                           ;	Code Protection bit
  4588                           ;	CP = OFF, Program memory code protection is disabled
  4589                           ;	Data Code Protection bit
  4590                           ;	CPD = OFF, Data memory code protection is disabled
  4591                           ;	Brown Out Reset Selection bits
  4592                           ;	BOREN = OFF, BOR disabled
  4593                           ;	Internal External Switchover bit
  4594                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4595                           ;	Fail-Safe Clock Monitor Enabled bit
  4596                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4597                           ;	Low Voltage Programming Enable bit
  4598                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4599                           ;	In-Circuit Debugger Mode bit
  4600                           ;	DEBUG = 0x1, unprogrammed default
  4601  2007                     	org	8199
  4602  2007  20D6               	dw	8406
  4603                           
  4604                           ;Config register CONFIG2 @ 0x2008
  4605                           ;	Brown-out Reset Selection bit
  4606                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4607                           ;	Flash Program Memory Self Write Enable bits
  4608                           ;	WRT = OFF, Write protection off
  4609  2008                     	org	8200
  4610  2008  3FFF               	dw	16383

Data Sizes:
    Strings     59
    Constant    10
    Data        0
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     24      72
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data_TEMP(BANK0[8]), data_ADC(BANK0[8]), data_cont(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> STR_7(CODE[6]), data_TEMP(BANK0[8]), STR_6(CODE[9]), STR_5(CODE[4]), 
		 -> data_ADC(BANK0[8]), STR_4(CODE[8]), STR_3(CODE[4]), data_cont(BANK0[8]), 
		 -> STR_2(CODE[9]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> data_cont(BANK0[8]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    ___awdiv->___wmul
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _SPI_TEMP->_spiWrite
    _SPI_CONT->_spiWrite
    _SPI_ADC->_spiWrite
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _ADC_to_string->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5519
                                             22 BANK0      2     2      0
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _SPI_ADC
                           _SPI_CONT
                           _SPI_TEMP
                       _Show_val_LCD
                        _Write_USART
                 _Write_USART_String
                            ___awdiv
                             ___wmul
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     198
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     575
                                              8 COMMON     1     1      0
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   4     2      2     589
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         0     0      0     706
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     322
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     384
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _SPI_TEMP                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_CONT                                             3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _SPI_ADC                                              3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0    2189
                                             19 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    2189
                                              6 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     145
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _isdigit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SPI_ADC
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_CONT
     _spiRead
       _spiReceiveWait
     _spiWrite
   _SPI_TEMP
     _spiRead
       _spiReceiveWait
     _spiWrite
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Write_USART
   _Write_USART_String
     _Write_USART
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _setup
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      54       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     18      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      54      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 12:57:42 2021

                           pc 0002                ___bmul@product 0074                   _SSPSTATbits 0094  
                ___awdiv@sign 0055                            fsr 0004           ___wmul@multiplicand 0074  
        __size_of_Write_USART 000C                           l110 0475                           l113 04E8  
                         l122 0554                           l210 06C1                           l131 02B5  
                         l116 0669                           l140 02E5                           l132 030D  
                         l125 0588                           l141 030E                           l133 02BB  
                         l134 02C1                           l119 051E                           l207 06AD  
                         l135 02C7                           l160 0616                           l216 068A  
                         l136 02CD                           l225 05B3                           l137 02D3  
                         l154 03AE                           l138 02D9                           l163 0688  
                         l251 06AE                           l219 0694                           l139 02DF  
                         l172 0642                           l157 06CD                           l254 06B4  
                         l247 0627                           l416 0657                           l248 062C  
                         l265 069D                           l257 06C7                           l169 05FC  
                         l178 03F4                           l390 05C0                           l392 05D8  
                         l386 0182                           l573 02B2                           l808 04B1  
                         l818 067B                           l798 0438                           _RC0 0038  
                         _RC1 0039                           _RC2 003A                           u600 03FD  
                         u601 03FC                           u620 040F                           _ISR 06B5  
                         u621 040E                           u550 06B4                           u615 0401  
                         u551 06B3                           u640 0420                           u560 0672  
                         u641 041F                           u561 0671                           u570 0678  
                         u635 0410                           u571 0677                           u580 0649  
                         u660 0434                           u581 0648                           u661 0433  
                         u645 041C                           u590 0656                           u591 0655  
                         u655 0428                           u930 05B3                           u931 05B2  
                         u780 0690                           u940 05BA                           u781 068F  
                         u941 05B9                           u790 061F                           u791 061E  
                         u970 05D4                           u971 05D3                           u955 05C1  
                         u965 05C8                           fsr0 0004                           indf 0000  
 __size_of_Write_USART_String 002B                          ?_ISR 0070                          l2010 036A  
                        l2020 04B2                          l2012 0373                          l2100 01F6  
                        l2014 0382                          l2022 0658                          l2030 0251  
                        l2110 0223                          l2102 01FF                          l1400 03F7  
                        l2016 0388                          l2008 0364                          l2024 0660  
                        l2040 0265                          l2032 0256                          l2112 022C  
                        l2104 0208                          l1410 040F                          l1402 03FD  
                        l2018 067C                          l2050 027B                          l2042 0267  
                        l2034 0258                          l2026 024A                          l2114 0235  
                        l2106 0211                          l1412 0420                          l1404 0400  
                        l1420 0434                          l2060 029E                          l2052 027F  
                        l2044 026D                          l2036 025C                          l2028 024D  
                        l2116 023B                          l2108 021A                          l1414 0426  
                        l1406 0407                          l2054 0290                          l2046 0270  
                        l2062 02A4                          l2038 0261                          l2118 0241  
                        l2070 0183                          l1416 0427                          l1408 040B  
                        l2064 02A9                          l2056 0296                          l2048 0277  
                        l1600 0443                          l2080 0196                          l2072 0188  
                        l1418 042E                          l1370 06AE                          l2066 02AE  
                        l2058 0297                          l1610 044C                          l1602 0446  
                        l2090 01B6                          l2082 019E                          l2074 018B  
                        l1380 067A                          l1372 066B                          l1700 05CE  
                        l1620 0453                          l1612 044D                          l1604 0447  
                        l2092 01BA                          l2084 01A7                          l2076 018C  
                        l1390 064D                          l1374 066C                          l1702 05D4  
                        l2174 02F3                          l1470 02B4                          l1630 0462  
                        l1622 0456                          l1614 044E                          l1606 0448  
                        l2094 01DF                          l2086 01AC                          l2078 0191  
                        l1392 064F                          l1384 0644                          l1376 0672  
                        l2176 0091                          l1480 06BC                          l1632 0467  
                        l1624 0459                          l1616 044F                          l1608 0449  
                        l2096 01E4                          l2088 01B1                          l1394 0656  
                        l1386 0645                          l1378 0678                          l1650 04EC  
                        l1466 068A                          l1482 06BF                          l1474 02EB  
                        l1490 0621                          l1634 046C                          l1626 045C  
                        l1618 0450                          l2098 01ED                          l1388 0649  
                        l1660 0522                          l1652 04F5                          l1900 05DF  
                        l1468 0690                          l1484 06A6                          l1492 0623  
                        l1628 045F                          l1398 03F5                          l1590 069A  
                        l1662 052B                          l1654 04FB                          l1670 0558  
                        l1902 05E4                          l1910 03AF                          l1494 0626  
                        l1486 0618                          l1920 0026                          l1664 0531  
                        l1656 050E                          l1648 04E9                          l1672 0561  
                        l1904 05EB                          l1912 03B4                          l1680 0589  
                        l1488 061F                          l1930 0045                          l1922 002C  
                        l1586 06C3                          l1666 0544                          l1658 051F  
                        l1674 0567                          l1906 05F1                          l1914 03D0  
                        l1682 058B                          l1594 0439                          l1940 006B  
                        l1932 0049                          l1924 0033                          l1860 0607  
                        l1588 0695                          l1676 0578                          l1668 0555  
                        l1908 05F6                          l1916 03D8                          l1684 059C  
                        l1692 05B4                          l1596 043F                          l1950 00A4  
                        l1934 004B                          l1942 007C                          l1926 0038  
                        l1918 0021                          l1854 06C9                          l1862 060A  
                        l1870 0637                          l1686 05A0                          l1694 05B6  
                        l1598 0442                          l1880 0481                          l1960 00BA  
                        l1952 00A8                          l1936 005C                          l1928 0039  
                        l1864 0613                          l1856 05FE                          l1872 063A  
                        l1696 05BA                          l1890 04A0                          l1882 0488  
                        l1962 00C0                          l1954 00AC                          l1946 007D  
                        l1938 0067                          l1858 0601                          l1874 063F  
                        l1866 062E                          l1698 05C7                          l1892 04A7  
                        l1884 048C                          l1876 0476                          l1980 0111  
                        l1972 00E2                          l1964 00C4                          l1956 00B0  
                        l1948 009C                          l1868 0631                          l1886 0490  
                        l1878 047E                          l1894 04AD                          l1990 015B  
                        l1982 0117                          l1974 00EC                          l1958 00B5  
                        l1888 049A                          l1984 011F                          l1976 00FC  
                        l1968 00C6                          l1986 0126                          l1994 0163  
                        l1978 00FD                          l1898 05DA                          l1988 012B  
                        l1996 016C                          l1998 017E                          STR_1 0329  
                        STR_2 0343                          STR_3 0350                          STR_4 034C  
                        STR_5 0350                          STR_6 033A                          STR_7 0354  
                        STR_8 035F                          STR_9 035F                          u1100 0490  
                        u1101 048F                          u1110 049A                          u1111 0499  
                        u1200 0045                          u1201 0044                          u1130 04AD  
                        u1210 007B                          u1131 04AC                          u1115 0496  
                        u1211 007A                          u1300 016C                          u1220 00AC  
                        u1140 05DF                          u1125 04A1                          u1301 016B  
                        u1221 00AB                          u1141 05DE                          u1310 017E  
                        u1230 00BA                          u1150 05F1                          u1311 017D  
                        u1231 00B9                          u1151 05F0                          u1080 047E  
                        u1240 00C0                          u1160 03BE                          u1400 02A4  
                        u1320 0251                          u1081 047D                          u1241 00BF  
                        u1401 02A3                          u1321 0250                          u1250 00E1  
                        u1170 03E2                          u1410 02A9                          u1330 025C  
                        u1251 00E0                          u1411 02A8                          u1331 025B  
                        u1260 00EC                          u1180 03F4                          u1340 026D  
                        u1261 00EB                          u1181 03F3                          u1341 026C  
                        u1270 00FC                          u1190 002C                          u1095 0482  
                        u1271 00FB                          u1255 00DD                          u1191 002B  
                        u1280 0111                          u1360 027F                          u1281 0110  
                        u1361 027E                          u1290 011F                          u1291 011E  
                        u1275 00F8                          u1507 053F                          u1427 063C  
                        u1355 0271                          u1380 0290                          u1285 010D  
                        u1517 054D                          u1437 055C                          u1381 028F  
                        u1527 036E                          u1447 0573                          u1375 0280  
                        u1537 037D                          u1457 0581                          u1385 028C  
                        u1547 038C                          u1467 04F0                          u1395 0298  
                        u1557 060E                          u1477 0509                          u1487 0517  
                        u1497 0526                          _RCIF 0065                          i1l99 06B5  
                        _TRMT 04C1             ?_Lcd_Write_String 0075               __end_of_SPI_ADC 0555  
                        _cont 0037                          _main 0183                          btemp 007E  
                        start 000C            ??_Lcd_Write_String 0077               __end_of_Lcd_Cmd 0617  
           ___bmul@multiplier 0075                         ??_ISR 0070                         ?_main 0070  
             __end_of___awdiv 02B3                         STR_10 035A                         _ANSEL 0188  
             ___awdiv@divisor 0050               __end_of___lwdiv 0439               __end_of___lwmod 04B2  
             ___awdiv@counter 0054                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009       __size_of_Lcd_Set_Cursor 0024  
                       _TRISA 0085                         _TRISB 0086                         _TRISD 0088  
                       _TRISE 0089                         _TXREG 0019               __end_of_dpowers 0329  
             __end_of_initOsc 030F              __end_of_SPI_CONT 051F               __end_of_isdigit 067C  
            __end_of_SPI_TEMP 0589                         _setup 0439                         pclath 000A  
             __end_of_spiInit 062D               __end_of_spiRead 069E                         status 0003  
                       wtemp0 007E               __end_of_sprintf 0183                   ?_USART_Init 0070  
            __end_of_Lcd_Init 03AF              __end_of_Lcd_Port 06CE               __initialization 000F  
                __end_of_main 024A                        ??_main 0066            __size_of_Lcd_Clear 000D  
                   ??_SPI_ADC 0073                   initOsc@IRCF 0074              ___awdiv@dividend 0052  
         _USART_Init_BaudRate 06BC                        ?_setup 0070                        _ANSELH 0189  
                   ??_Lcd_Cmd 0073                        _SPBRGH 009A       __size_of_Lcd_Write_Char 0016  
                      _TRISC0 0438                        _TRISC1 0439                        _TRISC2 043A  
                      _TRISC3 043B                        _TRISC5 043D                        _SSPCON 0014  
                      _SSPBUF 0013                        ___bmul 0643                        ___wmul 05B4  
                   ??___awdiv 0078          ?_USART_Init_BaudRate 0070                     ??___lwdiv 0076  
                   ??___lwmod 0054              ___awdiv@quotient 0056                     ??_initOsc 0072  
                   ??_isdigit 0072                        saved_w 007E              __end_of_spiWrite 06C8  
                   ??_spiInit 0075                     ??_spiRead 0072           __size_of_USART_Init 0008  
                   ??_sprintf 0059               Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076  
     __end_of__initialization 001A             __end_of_Lcd_Clear 0689           ___bmul@multiplicand 0072  
              __pcstackCOMMON 0070         ??_USART_Init_BaudRate 0072                     ?_SPI_CONT 0070  
               __end_of_setup 0476                     ?_SPI_TEMP 0070                _Lcd_Set_Cursor 05D9  
                   ?_Lcd_Init 0070                     ?_Lcd_Port 0070                       ??_setup 0076  
                Write_USART@a 0072                    __pbssBANK0 0020                    _data_total 0020  
                  __pmaintext 0183                       ?___bmul 0072                       ?___wmul 0072  
               ??_Write_USART 0072                    __pintentry 0004       __size_of_spiReceiveWait 0007  
                  ??_SPI_CONT 0073                    ??_SPI_TEMP 0073     __size_of_Lcd_Write_String 0046  
      __end_of_Lcd_Set_Cursor 05FD        __size_of_ADC_to_string 0037    __end_of_Write_USART_String 05B4  
                  ??_Lcd_Init 0076                    ??_Lcd_Port 0072                       _SPI_ADC 051F  
                     _SSPSTAT 0094                    __stringtab 030F                _Lcd_Write_Char 062D  
                     _Lcd_Cmd 05FD                  ??_USART_Init 0072                     ?_spiWrite 0070  
             __size_of___bmul 0015                 ?_Show_val_LCD 0070                       ___awdiv 024A  
             __size_of___wmul 0025                       ___lwdiv 03F5                       ___lwmod 0476  
             ?_Lcd_Set_Cursor 0076                       __ptext1 0439                       __ptext2 0617  
                     __ptext3 02B3                       __ptext4 06BC                       __ptext5 06A6  
                     __ptext6 05B4                       __ptext7 024A                       __ptext8 0589  
                     __ptext9 0689                  __size_of_ISR 0007                       _dpowers 031F  
                     _initOsc 02B3           __end_of_Write_USART 0695                       _isdigit 066A  
                     _val_ADC 0036                       _spiInit 0617                       _spiRead 0695  
          __end_of_USART_Init 06AE                       _sprintf 001E                       clrloop0 069F  
      __end_of_Lcd_Write_Char 0643          end_of_initialization 001A                 _ADC_to_string 04B2  
              ??_Show_val_LCD 007A                     _RCSTAbits 0018                    ??_spiWrite 0072  
                   Lcd_Port@a 0072                     _PORTCbits 0007                     _PORTEbits 0009  
                 spiWrite@dat 0072               ?_Lcd_Write_Char 0070             Lcd_Write_String@a 0075  
           Lcd_Write_String@i 0050                ?_ADC_to_string 0070                     _TXSTAbits 0098  
                   _Lcd_Clear 067C                _spiReceiveWait 06AE                __end_of___bmul 0658  
                 _Write_USART 0689                __end_of___wmul 05D9              _Lcd_Write_String 03AF  
           __size_of_SPI_CONT 0036             __size_of_SPI_TEMP 0034           start_initialization 000F  
                 __end_of_ISR 06BC             __size_of_Lcd_Init 004B                  _hola_esclavo 007B  
           __size_of_Lcd_Port 0006   __end_of_USART_Init_BaudRate 06C2        __end_of_spiReceiveWait 06B5  
                  ?_Lcd_Clear 0070                      ??___bmul 0073                      ??___wmul 0076  
             Lcd_Write_Char@a 0074                   __pbssCOMMON 007A                     ___latbits 0002  
               __pcstackBANK0 0050                      ?_SPI_ADC 0070          __end_of_Show_val_LCD 066A  
             ??_ADC_to_string 0063                      ?_Lcd_Cmd 0070                   sprintf@flag 005D  
                   _data_TEMP 0038            _Write_USART_String 0589                   sprintf@prec 0061  
                   _data_cont 0048              ___lwdiv@dividend 0074               ?_spiReceiveWait 0070  
            ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0073                      ?___awdiv 0050  
                    ?___lwdiv 0072                      ?___lwmod 0050             __size_of_spiWrite 0006  
                   __pstrings 030F                      ?_initOsc 0070                      ?_isdigit 0070  
                    ?_spiInit 0072                      ?_spiRead 0070          ??_Write_USART_String 0075  
            ___lwdiv@quotient 0077                      ?_sprintf 0056                __size_of_setup 003D  
               _mv_temp_val_M 0034          spiInit@sTransmitEdge 0074             interrupt_function 0004  
              ___wmul@product 0076                     clear_ram0 069E                      _PIE1bits 008C  
          spiInit@sDataSample 0072                      Lcd_Cmd@a 0075                   ??_Lcd_Clear 0076  
                    _SPI_CONT 04E9                      _SPI_TEMP 0555                   __stringbase 031E  
           ___wmul@multiplier 0072              ??_Lcd_Write_Char 0073                      _Lcd_Init 0364  
                    _Lcd_Port 06C8              __size_of_SPI_ADC 0036      __end_of_Lcd_Write_String 03F5  
            __size_of_Lcd_Cmd 001A                  ?_Write_USART 0070              __size_of___awdiv 0069  
            __size_of___lwdiv 0044              __size_of___lwmod 003C            __end_of__stringtab 031F  
                 _isdigit$987 0072         __size_of_Show_val_LCD 0012                      _data_ADC 0040  
                  sprintf@val 005E              __size_of_initOsc 005C              __size_of_isdigit 0012  
             ___lwdiv@divisor 0072               ___lwdiv@counter 0079                      __ptext10 0658  
                    __ptext11 03AF                      __ptext20 0364                      __ptext12 062D  
                    __ptext21 067C                      __ptext13 05D9                      __ptext30 06B5  
                    __ptext22 05FD                      __ptext14 0555                      __ptext23 06C8  
                    __ptext15 04E9                      __ptext24 04B2                      __ptext16 051F  
                    __ptext25 001E                      __ptext17 06C2                      __ptext26 066A  
                    __ptext18 0695                      __ptext27 0476                      __ptext19 06AE  
                    __ptext28 03F5                      __ptext29 0643              __size_of_spiInit 0016  
            __size_of_spiRead 0009              __size_of_sprintf 0165                 __size_of_main 00C7  
                    _val_TEMP 007A                      _spiWrite 06C2                  _Show_val_LCD 0658  
                spiInit@sType 0075             spiInit@sClockIdle 0073                    _INTCONbits 000B  
         Write_USART_String@a 0073           Write_USART_String@i 0076                      isdigit@c 0073  
                    intlevel1 0000                     sprintf@ap 005C                     sprintf@sp 0060  
            ___lwmod@dividend 0052              ??_spiReceiveWait 0072                     stringcode 0319  
                  _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006            Lcd_Set_Cursor@temp 0079  
                    sprintf@c 0062                      sprintf@f 0056               ___lwmod@divisor 0050  
             ___lwmod@counter 0055                      stringdir 0319                      stringtab 030F  
       __end_of_ADC_to_string 04E9                    _USART_Init 06A6  
