

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 08:20:52 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    34                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41  0000                     
    42                           ; Version 2.20
    43                           ; Generated 12/02/2020 GMT
    44                           ; 
    45                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F887 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76  0000                     	;# 
    77  0001                     	;# 
    78  0002                     	;# 
    79  0003                     	;# 
    80  0004                     	;# 
    81  0005                     	;# 
    82  0006                     	;# 
    83  0007                     	;# 
    84  0008                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0088                     	;# 
   116  0089                     	;# 
   117  008C                     	;# 
   118  008D                     	;# 
   119  008E                     	;# 
   120  008F                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0094                     	;# 
   128  0095                     	;# 
   129  0096                     	;# 
   130  0097                     	;# 
   131  0098                     	;# 
   132  0099                     	;# 
   133  009A                     	;# 
   134  009B                     	;# 
   135  009C                     	;# 
   136  009D                     	;# 
   137  009E                     	;# 
   138  009F                     	;# 
   139  0105                     	;# 
   140  0107                     	;# 
   141  0108                     	;# 
   142  0109                     	;# 
   143  010C                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  0185                     	;# 
   149  0187                     	;# 
   150  0188                     	;# 
   151  0189                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0088                     	;# 
   194  0089                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  008F                     	;# 
   199  0090                     	;# 
   200  0091                     	;# 
   201  0092                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0093                     	;# 
   205  0094                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0098                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  0105                     	;# 
   218  0107                     	;# 
   219  0108                     	;# 
   220  0109                     	;# 
   221  010C                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0187                     	;# 
   228  0188                     	;# 
   229  0189                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232  0000                     	;# 
   233  0001                     	;# 
   234  0002                     	;# 
   235  0003                     	;# 
   236  0004                     	;# 
   237  0005                     	;# 
   238  0006                     	;# 
   239  0007                     	;# 
   240  0008                     	;# 
   241  0009                     	;# 
   242  000A                     	;# 
   243  000B                     	;# 
   244  000C                     	;# 
   245  000D                     	;# 
   246  000E                     	;# 
   247  000E                     	;# 
   248  000F                     	;# 
   249  0010                     	;# 
   250  0011                     	;# 
   251  0012                     	;# 
   252  0013                     	;# 
   253  0014                     	;# 
   254  0015                     	;# 
   255  0015                     	;# 
   256  0016                     	;# 
   257  0017                     	;# 
   258  0018                     	;# 
   259  0019                     	;# 
   260  001A                     	;# 
   261  001B                     	;# 
   262  001B                     	;# 
   263  001C                     	;# 
   264  001D                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  0081                     	;# 
   268  0085                     	;# 
   269  0086                     	;# 
   270  0087                     	;# 
   271  0088                     	;# 
   272  0089                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  008F                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0094                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  0105                     	;# 
   296  0107                     	;# 
   297  0108                     	;# 
   298  0109                     	;# 
   299  010C                     	;# 
   300  010C                     	;# 
   301  010D                     	;# 
   302  010E                     	;# 
   303  010F                     	;# 
   304  0185                     	;# 
   305  0187                     	;# 
   306  0188                     	;# 
   307  0189                     	;# 
   308  018C                     	;# 
   309  018D                     	;# 
   310  0000                     	;# 
   311  0001                     	;# 
   312  0002                     	;# 
   313  0003                     	;# 
   314  0004                     	;# 
   315  0005                     	;# 
   316  0006                     	;# 
   317  0007                     	;# 
   318  0008                     	;# 
   319  0009                     	;# 
   320  000A                     	;# 
   321  000B                     	;# 
   322  000C                     	;# 
   323  000D                     	;# 
   324  000E                     	;# 
   325  000E                     	;# 
   326  000F                     	;# 
   327  0010                     	;# 
   328  0011                     	;# 
   329  0012                     	;# 
   330  0013                     	;# 
   331  0014                     	;# 
   332  0015                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0017                     	;# 
   336  0018                     	;# 
   337  0019                     	;# 
   338  001A                     	;# 
   339  001B                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001D                     	;# 
   343  001E                     	;# 
   344  001F                     	;# 
   345  0081                     	;# 
   346  0085                     	;# 
   347  0086                     	;# 
   348  0087                     	;# 
   349  0088                     	;# 
   350  0089                     	;# 
   351  008C                     	;# 
   352  008D                     	;# 
   353  008E                     	;# 
   354  008F                     	;# 
   355  0090                     	;# 
   356  0091                     	;# 
   357  0092                     	;# 
   358  0093                     	;# 
   359  0093                     	;# 
   360  0093                     	;# 
   361  0094                     	;# 
   362  0095                     	;# 
   363  0096                     	;# 
   364  0097                     	;# 
   365  0098                     	;# 
   366  0099                     	;# 
   367  009A                     	;# 
   368  009B                     	;# 
   369  009C                     	;# 
   370  009D                     	;# 
   371  009E                     	;# 
   372  009F                     	;# 
   373  0105                     	;# 
   374  0107                     	;# 
   375  0108                     	;# 
   376  0109                     	;# 
   377  010C                     	;# 
   378  010C                     	;# 
   379  010D                     	;# 
   380  010E                     	;# 
   381  010F                     	;# 
   382  0185                     	;# 
   383  0187                     	;# 
   384  0188                     	;# 
   385  0189                     	;# 
   386  018C                     	;# 
   387  018D                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  000E                     	;# 
   404  000F                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0013                     	;# 
   409  0014                     	;# 
   410  0015                     	;# 
   411  0015                     	;# 
   412  0016                     	;# 
   413  0017                     	;# 
   414  0018                     	;# 
   415  0019                     	;# 
   416  001A                     	;# 
   417  001B                     	;# 
   418  001B                     	;# 
   419  001C                     	;# 
   420  001D                     	;# 
   421  001E                     	;# 
   422  001F                     	;# 
   423  0081                     	;# 
   424  0085                     	;# 
   425  0086                     	;# 
   426  0087                     	;# 
   427  0088                     	;# 
   428  0089                     	;# 
   429  008C                     	;# 
   430  008D                     	;# 
   431  008E                     	;# 
   432  008F                     	;# 
   433  0090                     	;# 
   434  0091                     	;# 
   435  0092                     	;# 
   436  0093                     	;# 
   437  0093                     	;# 
   438  0093                     	;# 
   439  0094                     	;# 
   440  0095                     	;# 
   441  0096                     	;# 
   442  0097                     	;# 
   443  0098                     	;# 
   444  0099                     	;# 
   445  009A                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  009F                     	;# 
   451  0105                     	;# 
   452  0107                     	;# 
   453  0108                     	;# 
   454  0109                     	;# 
   455  010C                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  010F                     	;# 
   460  0185                     	;# 
   461  0187                     	;# 
   462  0188                     	;# 
   463  0189                     	;# 
   464  018C                     	;# 
   465  018D                     	;# 
   466  0000                     	;# 
   467  0001                     	;# 
   468  0002                     	;# 
   469  0003                     	;# 
   470  0004                     	;# 
   471  0005                     	;# 
   472  0006                     	;# 
   473  0007                     	;# 
   474  0008                     	;# 
   475  0009                     	;# 
   476  000A                     	;# 
   477  000B                     	;# 
   478  000C                     	;# 
   479  000D                     	;# 
   480  000E                     	;# 
   481  000E                     	;# 
   482  000F                     	;# 
   483  0010                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0013                     	;# 
   487  0014                     	;# 
   488  0015                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  001D                     	;# 
   499  001E                     	;# 
   500  001F                     	;# 
   501  0081                     	;# 
   502  0085                     	;# 
   503  0086                     	;# 
   504  0087                     	;# 
   505  0088                     	;# 
   506  0089                     	;# 
   507  008C                     	;# 
   508  008D                     	;# 
   509  008E                     	;# 
   510  008F                     	;# 
   511  0090                     	;# 
   512  0091                     	;# 
   513  0092                     	;# 
   514  0093                     	;# 
   515  0093                     	;# 
   516  0093                     	;# 
   517  0094                     	;# 
   518  0095                     	;# 
   519  0096                     	;# 
   520  0097                     	;# 
   521  0098                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  009F                     	;# 
   529  0105                     	;# 
   530  0107                     	;# 
   531  0108                     	;# 
   532  0109                     	;# 
   533  010C                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  010F                     	;# 
   538  0185                     	;# 
   539  0187                     	;# 
   540  0188                     	;# 
   541  0189                     	;# 
   542  018C                     	;# 
   543  018D                     	;# 
   544                           
   545                           	psect	strings
   546  037D                     __pstrings:
   547  037D                     stringtab:
   548  037D                     __stringtab:
   549                           
   550                           ;	String table - string pointers are 1 byte each
   551  037D  1BFF               	btfsc	btemp+1,7
   552  037E  2B87               	ljmp	stringcode
   553  037F  1383               	bcf	3,7
   554  0380  187F               	btfsc	btemp+1,0
   555  0381  1783               	bsf	3,7
   556  0382  0800               	movf	0,w
   557  0383  0A84               	incf	4,f
   558  0384  1903               	skipnz
   559  0385  0AFF               	incf	btemp+1,f
   560  0386  0008               	return
   561  0387                     stringcode:
   562  0387                     stringdir:
   563  0387  3003               	movlw	high stringdir
   564  0388  008A               	movwf	10
   565  0389  0804               	movf	4,w
   566  038A  0A84               	incf	4,f
   567  038B  0782               	addwf	2,f
   568  038C                     __stringbase:
   569  038C  3400               	retlw	0
   570  038D                     __end_of__stringtab:
   571  038D                     _dpowers:
   572  038D  3401               	retlw	1
   573  038E  3400               	retlw	0
   574  038F  340A               	retlw	10
   575  0390  3400               	retlw	0
   576  0391  3464               	retlw	100
   577  0392  3400               	retlw	0
   578  0393  34E8               	retlw	232
   579  0394  3403               	retlw	3
   580  0395  3410               	retlw	16
   581  0396  3427               	retlw	39
   582  0397                     __end_of_dpowers:
   583  0013                     _SSPBUF	set	19
   584  0014                     _SSPCON	set	20
   585  001A                     _RCREG	set	26
   586  0019                     _TXREG	set	25
   587  000B                     _INTCONbits	set	11
   588  0018                     _RCSTAbits	set	24
   589  0009                     _PORTEbits	set	9
   590  0007                     _PORTCbits	set	7
   591  0009                     _PORTE	set	9
   592  0008                     _PORTD	set	8
   593  0007                     _PORTC	set	7
   594  0005                     _PORTA	set	5
   595  0006                     _PORTB	set	6
   596  0065                     _RCIF	set	101
   597  003A                     _RC2	set	58
   598  0094                     _SSPSTATbits	set	148
   599  0094                     _SSPSTAT	set	148
   600  008C                     _PIE1bits	set	140
   601  0099                     _SPBRG	set	153
   602  009A                     _SPBRGH	set	154
   603  0098                     _TXSTAbits	set	152
   604  008F                     _OSCCONbits	set	143
   605  0089                     _TRISE	set	137
   606  0088                     _TRISD	set	136
   607  0087                     _TRISCbits	set	135
   608  0086                     _TRISB	set	134
   609  0085                     _TRISA	set	133
   610  043B                     _TRISC3	set	1083
   611  043D                     _TRISC5	set	1085
   612  04C1                     _TRMT	set	1217
   613  043A                     _TRISC2	set	1082
   614  0189                     _ANSELH	set	393
   615  0188                     _ANSEL	set	392
   616  0397                     STR_1:
   617  0397  3463               	retlw	99	;'c'
   618  0398  346F               	retlw	111	;'o'
   619  0399  346E               	retlw	110	;'n'
   620  039A  3474               	retlw	116	;'t'
   621  039B  3420               	retlw	32	;' '
   622  039C  3420               	retlw	32	;' '
   623  039D  3420               	retlw	32	;' '
   624  039E  3453               	retlw	83	;'S'
   625  039F  3432               	retlw	50	;'2'
   626  03A0  343A               	retlw	58	;':'
   627  03A1  3420               	retlw	32	;' '
   628  03A2  3420               	retlw	32	;' '
   629  03A3  3420               	retlw	32	;' '
   630  03A4  3453               	retlw	83	;'S'
   631  03A5  3433               	retlw	51	;'3'
   632  03A6  343A               	retlw	58	;':'
   633  03A7  3400               	retlw	0
   634  03A8                     STR_2:
   635  03A8  3463               	retlw	99	;'c'
   636  03A9  346F               	retlw	111	;'o'
   637  03AA  346E               	retlw	110	;'n'
   638  03AB  3474               	retlw	116	;'t'
   639  03AC  343A               	retlw	58	;':'
   640  03AD  3420               	retlw	32	;' '
   641  03AE  3420               	retlw	32	;' '
   642  03AF  340A               	retlw	10
   643  03B0  3400               	retlw	0
   644  03B1                     STR_3:
   645  03B1  3425               	retlw	37	;'%'
   646  03B2  342E               	retlw	46	;'.'
   647  03B3  3433               	retlw	51	;'3'
   648  03B4  3469               	retlw	105	;'i'
   649  03B5  3400               	retlw	0
   650                           
   651                           	psect	cinit
   652  000F                     start_initialization:	
   653                           ; #config settings
   654                           
   655  000F                     __initialization:
   656                           
   657                           ; Clear objects allocated to COMMON
   658  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   659  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   660                           
   661                           ; Clear objects allocated to BANK0
   662  0011  1383               	bcf	3,7	;select IRP bank0
   663  0012  3020               	movlw	low __pbssBANK0
   664  0013  0084               	movwf	4
   665  0014  303C               	movlw	low (__pbssBANK0+28)
   666  0015  120A  118A  24F2  120A  118A  	fcall	clear_ram0
   667  001A                     end_of_initialization:	
   668                           ;End of C runtime variable initialization code
   669                           
   670  001A                     __end_of__initialization:
   671  001A  0183               	clrf	3
   672  001B  120A  118A  2983   	ljmp	_main	;jump to C main() function
   673                           
   674                           	psect	bssCOMMON
   675  007A                     __pbssCOMMON:
   676  007A                     _cont:
   677  007A                     	ds	1
   678  007B                     _hola_esclavo:
   679  007B                     	ds	1
   680                           
   681                           	psect	bssBANK0
   682  0020                     __pbssBANK0:
   683  0020                     _data_total:
   684  0020                     	ds	20
   685  0034                     _data:
   686  0034                     	ds	8
   687                           
   688                           	psect	clrtext
   689  04F2                     clear_ram0:	
   690                           ;	Called with FSR containing the base address, and
   691                           ;	W with the last address+1
   692                           
   693  04F2  0064               	clrwdt	;clear the watchdog before getting into this loop
   694  04F3                     clrloop0:
   695  04F3  0180               	clrf	0	;clear RAM location pointed to by FSR
   696  04F4  0A84               	incf	4,f	;increment pointer
   697  04F5  0604               	xorwf	4,w	;XOR with final address
   698  04F6  1903               	btfsc	3,2	;have we reached the end yet?
   699  04F7  3400               	retlw	0	;all done for this memory range, return
   700  04F8  0604               	xorwf	4,w	;XOR again to restore value
   701  04F9  2CF3               	goto	clrloop0	;do the next byte
   702                           
   703                           	psect	cstackCOMMON
   704  0070                     __pcstackCOMMON:
   705  0070                     ?_isdigit:
   706  0070                     ?_setup:	
   707                           ; 1 bit 
   708                           
   709  0070                     ?_Lcd_Init:	
   710                           ; 1 bytes @ 0x0
   711                           
   712  0070                     ?_Lcd_Clear:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_spiWrite:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ?_spiRead:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_ADC_to_string:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ?_Write_USART:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_Show_val_LCD:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_initOsc:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_USART_Init_BaudRate:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?_USART_Init:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?_USART_INTERRUPT:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ?_Lcd_Port:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     ?_Lcd_Cmd:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ?_ISR:	
   749                           ; 1 bytes @ 0x0
   750                           
   751  0070                     ??_ISR:	
   752                           ; 1 bytes @ 0x0
   753                           
   754  0070                     ?_main:	
   755                           ; 1 bytes @ 0x0
   756                           
   757  0070                     ?_Lcd_Write_Char:	
   758                           ; 1 bytes @ 0x0
   759                           
   760  0070                     ?_spiReceiveWait:	
   761                           ; 1 bytes @ 0x0
   762                           
   763                           
   764                           ; 1 bytes @ 0x0
   765  0070                     	ds	2
   766  0072                     ??_spiWrite:
   767  0072                     ??_spiRead:	
   768                           ; 1 bytes @ 0x2
   769                           
   770  0072                     ??_Write_USART:	
   771                           ; 1 bytes @ 0x2
   772                           
   773  0072                     ??_initOsc:	
   774                           ; 1 bytes @ 0x2
   775                           
   776  0072                     ??_USART_Init_BaudRate:	
   777                           ; 1 bytes @ 0x2
   778                           
   779  0072                     ??_USART_Init:	
   780                           ; 1 bytes @ 0x2
   781                           
   782  0072                     ??_USART_INTERRUPT:	
   783                           ; 1 bytes @ 0x2
   784                           
   785  0072                     ?_spiInit:	
   786                           ; 1 bytes @ 0x2
   787                           
   788  0072                     ??_Lcd_Port:	
   789                           ; 1 bytes @ 0x2
   790                           
   791  0072                     ??_isdigit:	
   792                           ; 1 bytes @ 0x2
   793                           
   794  0072                     ??_spiReceiveWait:	
   795                           ; 1 bytes @ 0x2
   796                           
   797  0072                     ?___bmul:	
   798                           ; 1 bytes @ 0x2
   799                           
   800  0072                     ?___lwdiv:	
   801                           ; 1 bytes @ 0x2
   802                           
   803  0072                     Lcd_Port@a:	
   804                           ; 2 bytes @ 0x2
   805                           
   806  0072                     Write_USART@a:	
   807                           ; 1 bytes @ 0x2
   808                           
   809  0072                     spiInit@sDataSample:	
   810                           ; 1 bytes @ 0x2
   811                           
   812  0072                     spiWrite@dat:	
   813                           ; 1 bytes @ 0x2
   814                           
   815  0072                     ___bmul@multiplicand:	
   816                           ; 1 bytes @ 0x2
   817                           
   818  0072                     _isdigit$989:	
   819                           ; 1 bytes @ 0x2
   820                           
   821  0072                     ___lwdiv@divisor:	
   822                           ; 1 bytes @ 0x2
   823                           
   824                           
   825                           ; 2 bytes @ 0x2
   826  0072                     	ds	1
   827  0073                     ?_Write_USART_String:
   828  0073                     ??_Lcd_Cmd:	
   829                           ; 1 bytes @ 0x3
   830                           
   831  0073                     ??_Lcd_Write_Char:	
   832                           ; 1 bytes @ 0x3
   833                           
   834  0073                     ??___bmul:	
   835                           ; 1 bytes @ 0x3
   836                           
   837  0073                     spiInit@sClockIdle:	
   838                           ; 1 bytes @ 0x3
   839                           
   840  0073                     isdigit@c:	
   841                           ; 1 bytes @ 0x3
   842                           
   843  0073                     Write_USART_String@a:	
   844                           ; 1 bytes @ 0x3
   845                           
   846                           
   847                           ; 2 bytes @ 0x3
   848  0073                     	ds	1
   849  0074                     initOsc@IRCF:
   850  0074                     Lcd_Write_Char@a:	
   851                           ; 1 bytes @ 0x4
   852                           
   853  0074                     spiInit@sTransmitEdge:	
   854                           ; 1 bytes @ 0x4
   855                           
   856  0074                     ___bmul@product:	
   857                           ; 1 bytes @ 0x4
   858                           
   859  0074                     ___lwdiv@dividend:	
   860                           ; 1 bytes @ 0x4
   861                           
   862                           
   863                           ; 2 bytes @ 0x4
   864  0074                     	ds	1
   865  0075                     ?_Lcd_Write_String:
   866  0075                     ??_Write_USART_String:	
   867                           ; 1 bytes @ 0x5
   868                           
   869  0075                     ??_spiInit:	
   870                           ; 1 bytes @ 0x5
   871                           
   872  0075                     Lcd_Cmd@a:	
   873                           ; 1 bytes @ 0x5
   874                           
   875  0075                     spiInit@sType:	
   876                           ; 1 bytes @ 0x5
   877                           
   878  0075                     ___bmul@multiplier:	
   879                           ; 1 bytes @ 0x5
   880                           
   881  0075                     Lcd_Write_String@a:	
   882                           ; 1 bytes @ 0x5
   883                           
   884                           
   885                           ; 2 bytes @ 0x5
   886  0075                     	ds	1
   887  0076                     ??_setup:
   888  0076                     ??_Lcd_Init:	
   889                           ; 1 bytes @ 0x6
   890                           
   891  0076                     ??_Lcd_Clear:	
   892                           ; 1 bytes @ 0x6
   893                           
   894  0076                     ?_Lcd_Set_Cursor:	
   895                           ; 1 bytes @ 0x6
   896                           
   897  0076                     ??___lwdiv:	
   898                           ; 1 bytes @ 0x6
   899                           
   900  0076                     Lcd_Set_Cursor@b:	
   901                           ; 1 bytes @ 0x6
   902                           
   903  0076                     Write_USART_String@i:	
   904                           ; 1 bytes @ 0x6
   905                           
   906                           
   907                           ; 1 bytes @ 0x6
   908  0076                     	ds	1
   909  0077                     ??_Lcd_Set_Cursor:
   910  0077                     ??_Lcd_Write_String:	
   911                           ; 1 bytes @ 0x7
   912                           
   913  0077                     ___lwdiv@quotient:	
   914                           ; 1 bytes @ 0x7
   915                           
   916                           
   917                           ; 2 bytes @ 0x7
   918  0077                     	ds	1
   919  0078                     Lcd_Set_Cursor@a:
   920                           
   921                           ; 1 bytes @ 0x8
   922  0078                     	ds	1
   923  0079                     Lcd_Set_Cursor@temp:
   924  0079                     ___lwdiv@counter:	
   925                           ; 1 bytes @ 0x9
   926                           
   927                           
   928                           ; 1 bytes @ 0x9
   929  0079                     	ds	1
   930  007A                     ??_Show_val_LCD:
   931                           
   932                           	psect	cstackBANK0
   933  003C                     __pcstackBANK0:	
   934                           ; 1 bytes @ 0xA
   935                           
   936  003C                     ?___lwmod:
   937  003C                     Lcd_Write_String@i:	
   938                           ; 2 bytes @ 0x0
   939                           
   940  003C                     ___lwmod@divisor:	
   941                           ; 2 bytes @ 0x0
   942                           
   943                           
   944                           ; 2 bytes @ 0x0
   945  003C                     	ds	2
   946  003E                     ___lwmod@dividend:
   947                           
   948                           ; 2 bytes @ 0x2
   949  003E                     	ds	2
   950  0040                     ??___lwmod:
   951                           
   952                           ; 1 bytes @ 0x4
   953  0040                     	ds	1
   954  0041                     ___lwmod@counter:
   955                           
   956                           ; 1 bytes @ 0x5
   957  0041                     	ds	1
   958  0042                     ?_sprintf:
   959  0042                     sprintf@f:	
   960                           ; 2 bytes @ 0x6
   961                           
   962                           
   963                           ; 1 bytes @ 0x6
   964  0042                     	ds	3
   965  0045                     ??_sprintf:
   966                           
   967                           ; 1 bytes @ 0x9
   968  0045                     	ds	3
   969  0048                     sprintf@ap:
   970                           
   971                           ; 1 bytes @ 0xC
   972  0048                     	ds	1
   973  0049                     sprintf@flag:
   974                           
   975                           ; 1 bytes @ 0xD
   976  0049                     	ds	1
   977  004A                     sprintf@sp:
   978                           
   979                           ; 1 bytes @ 0xE
   980  004A                     	ds	1
   981  004B                     sprintf@val:
   982                           
   983                           ; 2 bytes @ 0xF
   984  004B                     	ds	2
   985  004D                     sprintf@prec:
   986                           
   987                           ; 1 bytes @ 0x11
   988  004D                     	ds	1
   989  004E                     sprintf@c:
   990                           
   991                           ; 1 bytes @ 0x12
   992  004E                     	ds	1
   993  004F                     ??_ADC_to_string:
   994                           
   995                           ; 1 bytes @ 0x13
   996  004F                     	ds	3
   997  0052                     ??_main:
   998                           
   999                           ; 1 bytes @ 0x16
  1000  0052                     	ds	3
  1001                           
  1002                           	psect	maintext
  1003  0183                     __pmaintext:	
  1004 ;;
  1005 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1006 ;;
  1007 ;; *************** function _main *****************
  1008 ;; Defined at:
  1009 ;;		line 85 in file "main_maestro.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;		None
  1012 ;; Auto vars:     Size  Location     Type
  1013 ;;		None
  1014 ;; Return value:  Size  Location     Type
  1015 ;;                  1    wreg      void 
  1016 ;; Registers used:
  1017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1018 ;; Tracked objects:
  1019 ;;		On entry : B00/0
  1020 ;;		On exit  : 0/0
  1021 ;;		Unchanged: 0/0
  1022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1023 ;;      Params:         0       0       0       0       0
  1024 ;;      Locals:         0       0       0       0       0
  1025 ;;      Temps:          0       3       0       0       0
  1026 ;;      Totals:         0       3       0       0       0
  1027 ;;Total ram usage:        3 bytes
  1028 ;; Hardware stack levels required when called:    5
  1029 ;; This function calls:
  1030 ;;		_ADC_to_string
  1031 ;;		_Lcd_Clear
  1032 ;;		_Lcd_Init
  1033 ;;		_Lcd_Set_Cursor
  1034 ;;		_Lcd_Write_String
  1035 ;;		_Show_val_LCD
  1036 ;;		_Write_USART
  1037 ;;		_Write_USART_String
  1038 ;;		_setup
  1039 ;;		_spiRead
  1040 ;;		_spiWrite
  1041 ;; This function is called by:
  1042 ;;		Startup code after reset
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           
  1047                           ;psect for function _main
  1048  0183                     _main:
  1049  0183                     l1803:	
  1050                           ;incstack = 0
  1051                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1052                           
  1053                           
  1054                           ;main_maestro.c: 86:     setup();
  1055  0183  120A  118A  23B6  120A  118A  	fcall	_setup
  1056  0188                     l1805:
  1057                           
  1058                           ;main_maestro.c: 87:     PORTB = 0;
  1059  0188  1283               	bcf	3,5	;RP0=0, select bank0
  1060  0189  1303               	bcf	3,6	;RP1=0, select bank0
  1061  018A  0186               	clrf	6	;volatile
  1062  018B                     l1807:
  1063                           
  1064                           ;main_maestro.c: 88:     cont = 0;
  1065  018B  01FA               	clrf	_cont
  1066  018C                     l1809:
  1067                           
  1068                           ;main_maestro.c: 90:     Lcd_Init();
  1069  018C  120A  118A  226C  120A  118A  	fcall	_Lcd_Init
  1070  0191                     l1811:
  1071                           
  1072                           ;main_maestro.c: 91:     Lcd_Clear();
  1073  0191  120A  118A  24D0  120A  118A  	fcall	_Lcd_Clear
  1074  0196                     l1813:
  1075                           
  1076                           ;main_maestro.c: 92:     Lcd_Set_Cursor(1,1);
  1077  0196  01F6               	clrf	Lcd_Set_Cursor@b
  1078  0197  0AF6               	incf	Lcd_Set_Cursor@b,f
  1079  0198  3001               	movlw	1
  1080  0199  120A  118A  2419  120A  118A  	fcall	_Lcd_Set_Cursor
  1081  019E                     l1815:
  1082                           
  1083                           ;main_maestro.c: 93:     Lcd_Write_String("cont   S2:   S3:");
  1084  019E  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1085  019F  00F5               	movwf	Lcd_Write_String@a
  1086  01A0  3080               	movlw	128
  1087  01A1  00F6               	movwf	Lcd_Write_String@a+1
  1088  01A2  120A  118A  22B7  120A  118A  	fcall	_Lcd_Write_String
  1089  01A7                     l1817:
  1090                           
  1091                           ;main_maestro.c: 100:         RC2 = 0;
  1092  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1093  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1094  01A9  1107               	bcf	7,2	;volatile
  1095  01AA                     l1819:
  1096                           
  1097                           ;main_maestro.c: 101:        _delay((unsigned long)((1)*(8000000/4000.0)));
  1098  01AA  3003               	movlw	3
  1099  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1100  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1101  01AD  00D3               	movwf	??_main+1
  1102  01AE  3097               	movlw	151
  1103  01AF  00D2               	movwf	??_main
  1104  01B0                     u1047:
  1105  01B0  0BD2               	decfsz	??_main,f
  1106  01B1  29B0               	goto	u1047
  1107  01B2  0BD3               	decfsz	??_main+1,f
  1108  01B3  29B0               	goto	u1047
  1109  01B4                     l1821:
  1110                           
  1111                           ;main_maestro.c: 103:        spiWrite(hola_esclavo);
  1112  01B4  3000               	movlw	0
  1113  01B5  120A  118A  2510  120A  118A  	fcall	_spiWrite
  1114  01BA                     l1823:
  1115                           
  1116                           ;main_maestro.c: 104:        cont = spiRead();
  1117  01BA  120A  118A  24E9  120A  118A  	fcall	_spiRead
  1118  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  1119  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  1120  01C1  00D2               	movwf	??_main
  1121  01C2  0852               	movf	??_main,w
  1122  01C3  00FA               	movwf	_cont
  1123  01C4                     l1825:
  1124                           
  1125                           ;main_maestro.c: 106:        _delay((unsigned long)((1)*(8000000/4000.0)));
  1126  01C4  3003               	movlw	3
  1127  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1128  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1129  01C7  00D3               	movwf	??_main+1
  1130  01C8  3097               	movlw	151
  1131  01C9  00D2               	movwf	??_main
  1132  01CA                     u1057:
  1133  01CA  0BD2               	decfsz	??_main,f
  1134  01CB  29CA               	goto	u1057
  1135  01CC  0BD3               	decfsz	??_main+1,f
  1136  01CD  29CA               	goto	u1057
  1137  01CE                     l1827:
  1138                           
  1139                           ;main_maestro.c: 107:        RC2 = 1;
  1140  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  1141  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  1142  01D0  1507               	bsf	7,2	;volatile
  1143  01D1                     l1829:
  1144                           
  1145                           ;main_maestro.c: 109:        _delay((unsigned long)((100)*(8000000/4000.0)));
  1146  01D1  3002               	movlw	2
  1147  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1148  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1149  01D4  00D4               	movwf	??_main+2
  1150  01D5  3004               	movlw	4
  1151  01D6  00D3               	movwf	??_main+1
  1152  01D7  30B9               	movlw	185
  1153  01D8  00D2               	movwf	??_main
  1154  01D9                     u1067:
  1155  01D9  0BD2               	decfsz	??_main,f
  1156  01DA  29D9               	goto	u1067
  1157  01DB  0BD3               	decfsz	??_main+1,f
  1158  01DC  29D9               	goto	u1067
  1159  01DD  0BD4               	decfsz	??_main+2,f
  1160  01DE  29D9               	goto	u1067
  1161  01DF  29E0               	nop2
  1162  01E0                     l1831:
  1163                           
  1164                           ;main_maestro.c: 111:        Write_USART_String("cont:  \n");
  1165  01E0  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1166  01E1  00F3               	movwf	Write_USART_String@a
  1167  01E2  3080               	movlw	128
  1168  01E3  00F4               	movwf	Write_USART_String@a+1
  1169  01E4  120A  118A  23EE  120A  118A  	fcall	_Write_USART_String
  1170  01E9                     l1833:
  1171                           
  1172                           ;main_maestro.c: 112:        PORTB = cont;
  1173  01E9  087A               	movf	_cont,w
  1174  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1175  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1176  01EC  0086               	movwf	6	;volatile
  1177  01ED                     l1835:
  1178                           
  1179                           ;main_maestro.c: 113:        ADC_to_string();
  1180  01ED  120A  118A  2498  120A  118A  	fcall	_ADC_to_string
  1181  01F2                     l1837:
  1182                           
  1183                           ;main_maestro.c: 115:         Write_USART_String(data);
  1184  01F2  3034               	movlw	(low (_data| 0))& (0+255)
  1185  01F3  00F3               	movwf	Write_USART_String@a
  1186  01F4  3000               	movlw	0
  1187  01F5  00F4               	movwf	Write_USART_String@a+1
  1188  01F6  120A  118A  23EE  120A  118A  	fcall	_Write_USART_String
  1189  01FB                     l1839:
  1190                           
  1191                           ;main_maestro.c: 116:         Write_USART(13);
  1192  01FB  300D               	movlw	13
  1193  01FC  120A  118A  24DD  120A  118A  	fcall	_Write_USART
  1194  0201                     l1841:
  1195                           
  1196                           ;main_maestro.c: 117:         Write_USART(10);
  1197  0201  300A               	movlw	10
  1198  0202  120A  118A  24DD  120A  118A  	fcall	_Write_USART
  1199  0207                     l1843:
  1200                           
  1201                           ;main_maestro.c: 119:         Show_val_LCD();
  1202  0207  120A  118A  24AC  120A  118A  	fcall	_Show_val_LCD
  1203  020C  29A7               	goto	l1817
  1204  020D  120A  118A  280C   	ljmp	start
  1205  0210                     __end_of_main:
  1206                           
  1207                           	psect	text1
  1208  0510                     __ptext1:	
  1209 ;; *************** function _spiWrite *****************
  1210 ;; Defined at:
  1211 ;;		line 36 in file "SPI.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;  dat             1    wreg     unsigned char 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;  dat             1    2[COMMON] unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1225 ;;      Params:         0       0       0       0       0
  1226 ;;      Locals:         1       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0
  1228 ;;      Totals:         1       0       0       0       0
  1229 ;;Total ram usage:        1 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    1
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _spiWrite
  1241  0510                     _spiWrite:
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in _spiWrite: [wreg]
  1245                           ;spiWrite@dat stored from wreg
  1246  0510  00F2               	movwf	spiWrite@dat
  1247  0511                     l1513:
  1248                           
  1249                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  1250  0511  0872               	movf	spiWrite@dat,w
  1251  0512  1283               	bcf	3,5	;RP0=0, select bank0
  1252  0513  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0514  0093               	movwf	19	;volatile
  1254  0515                     l228:
  1255  0515  0008               	return
  1256  0516                     __end_of_spiWrite:
  1257                           
  1258                           	psect	text2
  1259  04E9                     __ptext2:	
  1260 ;; *************** function _spiRead *****************
  1261 ;; Defined at:
  1262 ;;		line 49 in file "SPI.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      unsigned char 
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0, pclath, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         0       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0
  1279 ;;      Totals:         0       0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    2
  1283 ;; This function calls:
  1284 ;;		_spiReceiveWait
  1285 ;; This function is called by:
  1286 ;;		_main
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           
  1291                           ;psect for function _spiRead
  1292  04E9                     _spiRead:
  1293  04E9                     l1515:	
  1294                           ;incstack = 0
  1295                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1296                           
  1297                           
  1298                           ;SPI.c: 51:     spiReceiveWait();
  1299  04E9  120A  118A  2502  120A  118A  	fcall	_spiReceiveWait
  1300  04EE                     l1517:
  1301                           
  1302                           ;SPI.c: 52:     return(SSPBUF);
  1303  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  1304  04EF  1303               	bcf	3,6	;RP1=0, select bank0
  1305  04F0  0813               	movf	19,w	;volatile
  1306  04F1                     l236:
  1307  04F1  0008               	return
  1308  04F2                     __end_of_spiRead:
  1309                           
  1310                           	psect	text3
  1311  0502                     __ptext3:	
  1312 ;; *************** function _spiReceiveWait *****************
  1313 ;; Defined at:
  1314 ;;		line 31 in file "SPI.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		None
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1328 ;;      Params:         0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:    1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_spiRead
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           
  1343                           ;psect for function _spiReceiveWait
  1344  0502                     _spiReceiveWait:
  1345  0502                     l1459:	
  1346                           ;incstack = 0
  1347                           ; Regs used in _spiReceiveWait: []
  1348                           
  1349  0502                     l222:	
  1350                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  1351                           
  1352  0502  1683               	bsf	3,5	;RP0=1, select bank1
  1353  0503  1303               	bcf	3,6	;RP1=0, select bank1
  1354  0504  1C14               	btfss	20,0	;volatile
  1355  0505  2D07               	goto	u781
  1356  0506  2D08               	goto	u780
  1357  0507                     u781:
  1358  0507  2D02               	goto	l222
  1359  0508                     u780:
  1360  0508                     l225:
  1361  0508  0008               	return
  1362  0509                     __end_of_spiReceiveWait:
  1363                           
  1364                           	psect	text4
  1365  03B6                     __ptext4:	
  1366 ;; *************** function _setup *****************
  1367 ;; Defined at:
  1368 ;;		line 129 in file "main_maestro.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;		None
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1382 ;;      Params:         0       0       0       0       0
  1383 ;;      Locals:         0       0       0       0       0
  1384 ;;      Temps:          0       0       0       0       0
  1385 ;;      Totals:         0       0       0       0       0
  1386 ;;Total ram usage:        0 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    2
  1389 ;; This function calls:
  1390 ;;		_USART_INTERRUPT
  1391 ;;		_USART_Init
  1392 ;;		_USART_Init_BaudRate
  1393 ;;		_initOsc
  1394 ;;		_spiInit
  1395 ;; This function is called by:
  1396 ;;		_main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           
  1401                           ;psect for function _setup
  1402  03B6                     _setup:
  1403  03B6                     l1461:	
  1404                           ;incstack = 0
  1405                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1406                           
  1407                           
  1408                           ;main_maestro.c: 130:     initOsc(7);
  1409  03B6  3007               	movlw	7
  1410  03B7  120A  118A  2210  120A  118A  	fcall	_initOsc
  1411  03BC                     l1463:
  1412                           
  1413                           ;main_maestro.c: 131:     ANSEL = 0;
  1414  03BC  1683               	bsf	3,5	;RP0=1, select bank3
  1415  03BD  1703               	bsf	3,6	;RP1=1, select bank3
  1416  03BE  0188               	clrf	8	;volatile
  1417  03BF                     l1465:
  1418                           
  1419                           ;main_maestro.c: 132:     ANSELH = 0;
  1420  03BF  0189               	clrf	9	;volatile
  1421  03C0                     l1467:
  1422                           
  1423                           ;main_maestro.c: 134:     TRISA = 0;
  1424  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  1425  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  1426  03C2  0185               	clrf	5	;volatile
  1427  03C3                     l1469:
  1428                           
  1429                           ;main_maestro.c: 135:     TRISB = 0;
  1430  03C3  0186               	clrf	6	;volatile
  1431  03C4                     l1471:
  1432                           
  1433                           ;main_maestro.c: 136:     TRISCbits.TRISC6 = 0;
  1434  03C4  1307               	bcf	7,6	;volatile
  1435  03C5                     l1473:
  1436                           
  1437                           ;main_maestro.c: 137:     TRISCbits.TRISC7 = 1;
  1438  03C5  1787               	bsf	7,7	;volatile
  1439  03C6                     l1475:
  1440                           
  1441                           ;main_maestro.c: 139:     TRISD = 0;
  1442  03C6  0188               	clrf	8	;volatile
  1443  03C7                     l1477:
  1444                           
  1445                           ;main_maestro.c: 140:     TRISE = 0;
  1446  03C7  0189               	clrf	9	;volatile
  1447  03C8                     l1479:
  1448                           
  1449                           ;main_maestro.c: 142:     PORTA = 0;
  1450  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1451  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1452  03CA  0185               	clrf	5	;volatile
  1453  03CB                     l1481:
  1454                           
  1455                           ;main_maestro.c: 143:     PORTB = 0;
  1456  03CB  0186               	clrf	6	;volatile
  1457  03CC                     l1483:
  1458                           
  1459                           ;main_maestro.c: 144:     PORTC = 0;
  1460  03CC  0187               	clrf	7	;volatile
  1461  03CD                     l1485:
  1462                           
  1463                           ;main_maestro.c: 145:     PORTD = 0;
  1464  03CD  0188               	clrf	8	;volatile
  1465  03CE                     l1487:
  1466                           
  1467                           ;main_maestro.c: 146:     PORTE = 0;
  1468  03CE  0189               	clrf	9	;volatile
  1469  03CF                     l1489:
  1470                           
  1471                           ;main_maestro.c: 150:     TRISC2 = 0;
  1472  03CF  1683               	bsf	3,5	;RP0=1, select bank1
  1473  03D0  1303               	bcf	3,6	;RP1=0, select bank1
  1474  03D1  1107               	bcf	7,2	;volatile
  1475  03D2                     l1491:
  1476                           
  1477                           ;main_maestro.c: 151:     PORTCbits.RC2 = 1;
  1478  03D2  1283               	bcf	3,5	;RP0=0, select bank0
  1479  03D3  1303               	bcf	3,6	;RP1=0, select bank0
  1480  03D4  1507               	bsf	7,2	;volatile
  1481  03D5                     l1493:
  1482                           
  1483                           ;main_maestro.c: 155:     USART_Init_BaudRate();
  1484  03D5  120A  118A  2516  120A  118A  	fcall	_USART_Init_BaudRate
  1485  03DA                     l1495:
  1486                           
  1487                           ;main_maestro.c: 156:     USART_Init();
  1488  03DA  120A  118A  24FA  120A  118A  	fcall	_USART_Init
  1489  03DF                     l1497:
  1490                           
  1491                           ;main_maestro.c: 157:     USART_INTERRUPT();
  1492  03DF  120A  118A  251C  120A  118A  	fcall	_USART_INTERRUPT
  1493  03E4                     l1499:
  1494                           
  1495                           ;main_maestro.c: 159:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1496  03E4  01F2               	clrf	spiInit@sDataSample
  1497  03E5  01F3               	clrf	spiInit@sClockIdle
  1498  03E6  01F4               	clrf	spiInit@sTransmitEdge
  1499  03E7  3020               	movlw	32
  1500  03E8  120A  118A  2457  120A  118A  	fcall	_spiInit
  1501  03ED                     l90:
  1502  03ED  0008               	return
  1503  03EE                     __end_of_setup:
  1504                           
  1505                           	psect	text5
  1506  0457                     __ptext5:	
  1507 ;; *************** function _spiInit *****************
  1508 ;; Defined at:
  1509 ;;		line 14 in file "SPI.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  sType           1    wreg     enum E1264
  1512 ;;  sDataSample     1    2[COMMON] enum E1272
  1513 ;;  sClockIdle      1    3[COMMON] enum E1276
  1514 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  sType           1    5[COMMON] enum E1264
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1526 ;;      Params:         3       0       0       0       0
  1527 ;;      Locals:         1       0       0       0       0
  1528 ;;      Temps:          0       0       0       0       0
  1529 ;;      Totals:         4       0       0       0       0
  1530 ;;Total ram usage:        4 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    1
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_setup
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           
  1541                           ;psect for function _spiInit
  1542  0457                     _spiInit:
  1543                           
  1544                           ;incstack = 0
  1545                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1546                           ;spiInit@sType stored from wreg
  1547  0457  00F5               	movwf	spiInit@sType
  1548  0458                     l1359:
  1549                           
  1550                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1551  0458  1683               	bsf	3,5	;RP0=1, select bank1
  1552  0459  1303               	bcf	3,6	;RP1=0, select bank1
  1553  045A  1287               	bcf	7,5	;volatile
  1554                           
  1555                           ;SPI.c: 17:     if(sType & 0b00000100)
  1556  045B  1D75               	btfss	spiInit@sType,2
  1557  045C  2C5E               	goto	u641
  1558  045D  2C5F               	goto	u640
  1559  045E                     u641:
  1560  045E  2C63               	goto	l1365
  1561  045F                     u640:
  1562  045F                     l1361:
  1563                           
  1564                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1565  045F  0874               	movf	spiInit@sTransmitEdge,w
  1566  0460  0094               	movwf	20	;volatile
  1567  0461                     l1363:
  1568                           
  1569                           ;SPI.c: 20:         TRISC3 = 1;
  1570  0461  1587               	bsf	7,3	;volatile
  1571                           
  1572                           ;SPI.c: 21:     }
  1573  0462  2C67               	goto	l218
  1574  0463                     l1365:
  1575                           
  1576                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1577  0463  0872               	movf	spiInit@sDataSample,w
  1578  0464  0474               	iorwf	spiInit@sTransmitEdge,w
  1579  0465  0094               	movwf	20	;volatile
  1580  0466                     l1367:
  1581                           
  1582                           ;SPI.c: 25:         TRISC3 = 0;
  1583  0466  1187               	bcf	7,3	;volatile
  1584  0467                     l218:	
  1585                           ;SPI.c: 26:     }
  1586                           
  1587                           
  1588                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1589  0467  0875               	movf	spiInit@sType,w
  1590  0468  0473               	iorwf	spiInit@sClockIdle,w
  1591  0469  1283               	bcf	3,5	;RP0=0, select bank0
  1592  046A  1303               	bcf	3,6	;RP1=0, select bank0
  1593  046B  0094               	movwf	20	;volatile
  1594  046C                     l219:
  1595  046C  0008               	return
  1596  046D                     __end_of_spiInit:
  1597                           
  1598                           	psect	text6
  1599  0210                     __ptext6:	
  1600 ;; *************** function _initOsc *****************
  1601 ;; Defined at:
  1602 ;;		line 3 in file "Oscilador.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  IRCF            1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  IRCF            1    4[COMMON] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1616 ;;      Params:         0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0
  1618 ;;      Temps:          2       0       0       0       0
  1619 ;;      Totals:         3       0       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    1
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_setup
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           
  1631                           ;psect for function _initOsc
  1632  0210                     _initOsc:
  1633                           
  1634                           ;incstack = 0
  1635                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1636                           ;initOsc@IRCF stored from wreg
  1637  0210  00F4               	movwf	initOsc@IRCF
  1638  0211                     l1341:
  1639                           
  1640                           ;Oscilador.c: 5:     switch(IRCF){
  1641  0211  2A48               	goto	l1345
  1642  0212                     l102:	
  1643                           ;Oscilador.c: 6:         case 0:
  1644                           
  1645                           
  1646                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1647  0212  1683               	bsf	3,5	;RP0=1, select bank1
  1648  0213  1303               	bcf	3,6	;RP1=0, select bank1
  1649  0214  130F               	bcf	15,6	;volatile
  1650                           
  1651                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1652  0215  128F               	bcf	15,5	;volatile
  1653                           
  1654                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1655  0216  120F               	bcf	15,4	;volatile
  1656                           
  1657                           ;Oscilador.c: 10:             break;
  1658  0217  2A6A               	goto	l103
  1659  0218                     l104:	
  1660                           ;Oscilador.c: 11:          case 1:
  1661                           
  1662                           
  1663                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1664  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1665  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1666  021A  130F               	bcf	15,6	;volatile
  1667                           
  1668                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1669  021B  128F               	bcf	15,5	;volatile
  1670                           
  1671                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1672  021C  160F               	bsf	15,4	;volatile
  1673                           
  1674                           ;Oscilador.c: 15:             break;
  1675  021D  2A6A               	goto	l103
  1676  021E                     l105:	
  1677                           ;Oscilador.c: 16:         case 2:
  1678                           
  1679                           
  1680                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1681  021E  1683               	bsf	3,5	;RP0=1, select bank1
  1682  021F  1303               	bcf	3,6	;RP1=0, select bank1
  1683  0220  130F               	bcf	15,6	;volatile
  1684                           
  1685                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1686  0221  168F               	bsf	15,5	;volatile
  1687                           
  1688                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1689  0222  120F               	bcf	15,4	;volatile
  1690                           
  1691                           ;Oscilador.c: 20:             break;
  1692  0223  2A6A               	goto	l103
  1693  0224                     l106:	
  1694                           ;Oscilador.c: 21:         case 3:
  1695                           
  1696                           
  1697                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1698  0224  1683               	bsf	3,5	;RP0=1, select bank1
  1699  0225  1303               	bcf	3,6	;RP1=0, select bank1
  1700  0226  130F               	bcf	15,6	;volatile
  1701                           
  1702                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1703  0227  168F               	bsf	15,5	;volatile
  1704                           
  1705                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1706  0228  160F               	bsf	15,4	;volatile
  1707                           
  1708                           ;Oscilador.c: 25:             break;
  1709  0229  2A6A               	goto	l103
  1710  022A                     l107:	
  1711                           ;Oscilador.c: 26:         case 4:
  1712                           
  1713                           
  1714                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1715  022A  1683               	bsf	3,5	;RP0=1, select bank1
  1716  022B  1303               	bcf	3,6	;RP1=0, select bank1
  1717  022C  170F               	bsf	15,6	;volatile
  1718                           
  1719                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1720  022D  128F               	bcf	15,5	;volatile
  1721                           
  1722                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1723  022E  120F               	bcf	15,4	;volatile
  1724                           
  1725                           ;Oscilador.c: 30:             break;
  1726  022F  2A6A               	goto	l103
  1727  0230                     l108:	
  1728                           ;Oscilador.c: 31:         case 5:
  1729                           
  1730                           
  1731                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1732  0230  1683               	bsf	3,5	;RP0=1, select bank1
  1733  0231  1303               	bcf	3,6	;RP1=0, select bank1
  1734  0232  170F               	bsf	15,6	;volatile
  1735                           
  1736                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1737  0233  128F               	bcf	15,5	;volatile
  1738                           
  1739                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1740  0234  160F               	bsf	15,4	;volatile
  1741                           
  1742                           ;Oscilador.c: 35:             break;
  1743  0235  2A6A               	goto	l103
  1744  0236                     l109:	
  1745                           ;Oscilador.c: 36:         case 6:
  1746                           
  1747                           
  1748                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1749  0236  1683               	bsf	3,5	;RP0=1, select bank1
  1750  0237  1303               	bcf	3,6	;RP1=0, select bank1
  1751  0238  170F               	bsf	15,6	;volatile
  1752                           
  1753                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1754  0239  168F               	bsf	15,5	;volatile
  1755                           
  1756                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1757  023A  120F               	bcf	15,4	;volatile
  1758                           
  1759                           ;Oscilador.c: 40:             break;
  1760  023B  2A6A               	goto	l103
  1761  023C                     l110:	
  1762                           ;Oscilador.c: 41:         case 7:
  1763                           
  1764                           
  1765                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1766  023C  1683               	bsf	3,5	;RP0=1, select bank1
  1767  023D  1303               	bcf	3,6	;RP1=0, select bank1
  1768  023E  170F               	bsf	15,6	;volatile
  1769                           
  1770                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1771  023F  168F               	bsf	15,5	;volatile
  1772                           
  1773                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1774  0240  160F               	bsf	15,4	;volatile
  1775                           
  1776                           ;Oscilador.c: 45:             break;
  1777  0241  2A6A               	goto	l103
  1778  0242                     l111:	
  1779                           ;Oscilador.c: 46:         default:
  1780                           
  1781                           
  1782                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1783  0242  1683               	bsf	3,5	;RP0=1, select bank1
  1784  0243  1303               	bcf	3,6	;RP1=0, select bank1
  1785  0244  170F               	bsf	15,6	;volatile
  1786                           
  1787                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1788  0245  168F               	bsf	15,5	;volatile
  1789                           
  1790                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1791  0246  120F               	bcf	15,4	;volatile
  1792                           
  1793                           ;Oscilador.c: 50:             break;
  1794  0247  2A6A               	goto	l103
  1795  0248                     l1345:
  1796  0248  0874               	movf	initOsc@IRCF,w
  1797  0249  00F2               	movwf	??_initOsc
  1798  024A  01F3               	clrf	??_initOsc+1
  1799                           
  1800                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1801                           ; Switch size 1, requested type "simple"
  1802                           ; Number of cases is 1, Range of values is 0 to 0
  1803                           ; switch strategies available:
  1804                           ; Name         Instructions Cycles
  1805                           ; simple_byte            4     3 (average)
  1806                           ; direct_byte           11     8 (fixed)
  1807                           ; jumptable            260     6 (fixed)
  1808                           ;	Chosen strategy is simple_byte
  1809  024B  0873               	movf	??_initOsc+1,w
  1810  024C  3A00               	xorlw	0	; case 0
  1811  024D  1903               	skipnz
  1812  024E  2A50               	goto	l1899
  1813  024F  2A42               	goto	l111
  1814  0250                     l1899:
  1815                           
  1816                           ; Switch size 1, requested type "simple"
  1817                           ; Number of cases is 8, Range of values is 0 to 7
  1818                           ; switch strategies available:
  1819                           ; Name         Instructions Cycles
  1820                           ; simple_byte           25    13 (average)
  1821                           ; direct_byte           32     8 (fixed)
  1822                           ; jumptable            260     6 (fixed)
  1823                           ;	Chosen strategy is simple_byte
  1824  0250  0872               	movf	??_initOsc,w
  1825  0251  3A00               	xorlw	0	; case 0
  1826  0252  1903               	skipnz
  1827  0253  2A12               	goto	l102
  1828  0254  3A01               	xorlw	1	; case 1
  1829  0255  1903               	skipnz
  1830  0256  2A18               	goto	l104
  1831  0257  3A03               	xorlw	3	; case 2
  1832  0258  1903               	skipnz
  1833  0259  2A1E               	goto	l105
  1834  025A  3A01               	xorlw	1	; case 3
  1835  025B  1903               	skipnz
  1836  025C  2A24               	goto	l106
  1837  025D  3A07               	xorlw	7	; case 4
  1838  025E  1903               	skipnz
  1839  025F  2A2A               	goto	l107
  1840  0260  3A01               	xorlw	1	; case 5
  1841  0261  1903               	skipnz
  1842  0262  2A30               	goto	l108
  1843  0263  3A03               	xorlw	3	; case 6
  1844  0264  1903               	skipnz
  1845  0265  2A36               	goto	l109
  1846  0266  3A01               	xorlw	1	; case 7
  1847  0267  1903               	skipnz
  1848  0268  2A3C               	goto	l110
  1849  0269  2A42               	goto	l111
  1850  026A                     l103:
  1851                           
  1852                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1853  026A  140F               	bsf	15,0	;volatile
  1854  026B                     l112:
  1855  026B  0008               	return
  1856  026C                     __end_of_initOsc:
  1857                           
  1858                           	psect	text7
  1859  0516                     __ptext7:	
  1860 ;; *************** function _USART_Init_BaudRate *****************
  1861 ;; Defined at:
  1862 ;;		line 19 in file "USART.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1876 ;;      Params:         0       0       0       0       0
  1877 ;;      Locals:         0       0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0
  1879 ;;      Totals:         0       0       0       0       0
  1880 ;;Total ram usage:        0 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    1
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_setup
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           
  1891                           ;psect for function _USART_Init_BaudRate
  1892  0516                     _USART_Init_BaudRate:
  1893  0516                     l1351:	
  1894                           ;incstack = 0
  1895                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1896                           
  1897                           
  1898                           ;USART.c: 20:     SPBRGH = 0;
  1899  0516  1683               	bsf	3,5	;RP0=1, select bank1
  1900  0517  1303               	bcf	3,6	;RP1=0, select bank1
  1901  0518  019A               	clrf	26	;volatile
  1902  0519                     l1353:
  1903                           
  1904                           ;USART.c: 21:     SPBRG = 12;
  1905  0519  300C               	movlw	12
  1906  051A  0099               	movwf	25	;volatile
  1907  051B                     l181:
  1908  051B  0008               	return
  1909  051C                     __end_of_USART_Init_BaudRate:
  1910                           
  1911                           	psect	text8
  1912  04FA                     __ptext8:	
  1913 ;; *************** function _USART_Init *****************
  1914 ;; Defined at:
  1915 ;;		line 8 in file "USART.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		None
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1929 ;;      Params:         0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0
  1932 ;;      Totals:         0       0       0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    1
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_setup
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           
  1944                           ;psect for function _USART_Init
  1945  04FA                     _USART_Init:
  1946  04FA                     l1355:	
  1947                           ;incstack = 0
  1948                           ; Regs used in _USART_Init: []
  1949                           
  1950                           
  1951                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1952  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1953  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1954  04FC  1798               	bsf	24,7	;volatile
  1955                           
  1956                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1957  04FD  1683               	bsf	3,5	;RP0=1, select bank1
  1958  04FE  1303               	bcf	3,6	;RP1=0, select bank1
  1959  04FF  1218               	bcf	24,4	;volatile
  1960                           
  1961                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1962  0500  1698               	bsf	24,5	;volatile
  1963  0501                     l178:
  1964  0501  0008               	return
  1965  0502                     __end_of_USART_Init:
  1966                           
  1967                           	psect	text9
  1968  051C                     __ptext9:	
  1969 ;; *************** function _USART_INTERRUPT *****************
  1970 ;; Defined at:
  1971 ;;		line 24 in file "USART.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		None
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1985 ;;      Params:         0       0       0       0       0
  1986 ;;      Locals:         0       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0
  1988 ;;      Totals:         0       0       0       0       0
  1989 ;;Total ram usage:        0 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    1
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_setup
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _USART_INTERRUPT
  2001  051C                     _USART_INTERRUPT:
  2002  051C                     l1357:	
  2003                           ;incstack = 0
  2004                           ; Regs used in _USART_INTERRUPT: []
  2005                           
  2006                           
  2007                           ;USART.c: 25:     INTCONbits.GIE = 1;
  2008  051C  178B               	bsf	11,7	;volatile
  2009                           
  2010                           ;USART.c: 26:     INTCONbits.PEIE = 1;
  2011  051D  170B               	bsf	11,6	;volatile
  2012                           
  2013                           ;USART.c: 27:     PIE1bits.RCIE = 1;
  2014  051E  1683               	bsf	3,5	;RP0=1, select bank1
  2015  051F  1303               	bcf	3,6	;RP1=0, select bank1
  2016  0520  168C               	bsf	12,5	;volatile
  2017  0521                     l184:
  2018  0521  0008               	return
  2019  0522                     __end_of_USART_INTERRUPT:
  2020                           
  2021                           	psect	text10
  2022  03EE                     __ptext10:	
  2023 ;; *************** function _Write_USART_String *****************
  2024 ;; Defined at:
  2025 ;;		line 37 in file "USART.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  a               2    3[COMMON] PTR unsigned char 
  2028 ;;		 -> data(8), STR_2(9), 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  i               1    6[COMMON] unsigned char 
  2031 ;; Return value:  Size  Location     Type
  2032 ;;                  1    wreg      void 
  2033 ;; Registers used:
  2034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2035 ;; Tracked objects:
  2036 ;;		On entry : 0/0
  2037 ;;		On exit  : 0/0
  2038 ;;		Unchanged: 0/0
  2039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2040 ;;      Params:         2       0       0       0       0
  2041 ;;      Locals:         1       0       0       0       0
  2042 ;;      Temps:          1       0       0       0       0
  2043 ;;      Totals:         4       0       0       0       0
  2044 ;;Total ram usage:        4 bytes
  2045 ;; Hardware stack levels used:    1
  2046 ;; Hardware stack levels required when called:    2
  2047 ;; This function calls:
  2048 ;;		_Write_USART
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function _Write_USART_String
  2056  03EE                     _Write_USART_String:
  2057  03EE                     l1521:	
  2058                           ;incstack = 0
  2059                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2060                           
  2061                           
  2062                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  2063  03EE  01F6               	clrf	Write_USART_String@i
  2064  03EF  2C05               	goto	l1527
  2065  03F0                     l1523:
  2066                           
  2067                           ;USART.c: 40:         Write_USART(a[i]);
  2068  03F0  0876               	movf	Write_USART_String@i,w
  2069  03F1  0773               	addwf	Write_USART_String@a,w
  2070  03F2  0084               	movwf	4
  2071  03F3  0874               	movf	Write_USART_String@a+1,w
  2072  03F4  1803               	skipnc
  2073  03F5  0A74               	incf	Write_USART_String@a+1,w
  2074  03F6  00FF               	movwf	btemp+1
  2075  03F7  120A  118A  237D  120A  118A  	fcall	stringtab
  2076  03FC  120A  118A  24DD  120A  118A  	fcall	_Write_USART
  2077  0401                     l1525:
  2078                           
  2079                           ;USART.c: 41:     }
  2080  0401  3001               	movlw	1
  2081  0402  00F5               	movwf	??_Write_USART_String
  2082  0403  0875               	movf	??_Write_USART_String,w
  2083  0404  07F6               	addwf	Write_USART_String@i,f
  2084  0405                     l1527:
  2085  0405  0876               	movf	Write_USART_String@i,w
  2086  0406  0773               	addwf	Write_USART_String@a,w
  2087  0407  0084               	movwf	4
  2088  0408  0874               	movf	Write_USART_String@a+1,w
  2089  0409  1803               	skipnc
  2090  040A  0A74               	incf	Write_USART_String@a+1,w
  2091  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2092  040C  1303               	bcf	3,6	;RP1=0, select bank0
  2093  040D  00FF               	movwf	btemp+1
  2094  040E  120A  118A  237D  120A  118A  	fcall	stringtab
  2095  0413  3A00               	xorlw	0
  2096  0414  1D03               	skipz
  2097  0415  2C17               	goto	u791
  2098  0416  2C18               	goto	u790
  2099  0417                     u791:
  2100  0417  2BF0               	goto	l1523
  2101  0418                     u790:
  2102  0418                     l196:
  2103  0418  0008               	return
  2104  0419                     __end_of_Write_USART_String:
  2105                           
  2106                           	psect	text11
  2107  04DD                     __ptext11:	
  2108 ;; *************** function _Write_USART *****************
  2109 ;; Defined at:
  2110 ;;		line 33 in file "USART.c"
  2111 ;; Parameters:    Size  Location     Type
  2112 ;;  a               1    wreg     unsigned char 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  a               1    2[COMMON] unsigned char 
  2115 ;; Return value:  Size  Location     Type
  2116 ;;                  1    wreg      void 
  2117 ;; Registers used:
  2118 ;;		wreg
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2124 ;;      Params:         0       0       0       0       0
  2125 ;;      Locals:         1       0       0       0       0
  2126 ;;      Temps:          0       0       0       0       0
  2127 ;;      Totals:         1       0       0       0       0
  2128 ;;Total ram usage:        1 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; Hardware stack levels required when called:    1
  2131 ;; This function calls:
  2132 ;;		Nothing
  2133 ;; This function is called by:
  2134 ;;		_main
  2135 ;;		_Write_USART_String
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _Write_USART
  2141  04DD                     _Write_USART:
  2142                           
  2143                           ;incstack = 0
  2144                           ; Regs used in _Write_USART: [wreg]
  2145                           ;Write_USART@a stored from wreg
  2146  04DD  00F2               	movwf	Write_USART@a
  2147  04DE                     l1337:
  2148  04DE                     l187:	
  2149                           ;USART.c: 34:     while(!TRMT);
  2150                           
  2151  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2152  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2153  04E0  1C98               	btfss	24,1	;volatile
  2154  04E1  2CE3               	goto	u631
  2155  04E2  2CE4               	goto	u630
  2156  04E3                     u631:
  2157  04E3  2CDE               	goto	l187
  2158  04E4                     u630:
  2159  04E4                     l1339:
  2160                           
  2161                           ;USART.c: 35:     TXREG=a;
  2162  04E4  0872               	movf	Write_USART@a,w
  2163  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  2164  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  2165  04E7  0099               	movwf	25	;volatile
  2166  04E8                     l190:
  2167  04E8  0008               	return
  2168  04E9                     __end_of_Write_USART:
  2169                           
  2170                           	psect	text12
  2171  04AC                     __ptext12:	
  2172 ;; *************** function _Show_val_LCD *****************
  2173 ;; Defined at:
  2174 ;;		line 176 in file "main_maestro.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2188 ;;      Params:         0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0
  2191 ;;      Totals:         0       0       0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    4
  2195 ;; This function calls:
  2196 ;;		_Lcd_Set_Cursor
  2197 ;;		_Lcd_Write_String
  2198 ;; This function is called by:
  2199 ;;		_main
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           
  2204                           ;psect for function _Show_val_LCD
  2205  04AC                     _Show_val_LCD:
  2206  04AC                     l1799:	
  2207                           ;incstack = 0
  2208                           ; Regs used in _Show_val_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2209                           
  2210                           
  2211                           ;main_maestro.c: 179:     Lcd_Set_Cursor(2,1);
  2212  04AC  01F6               	clrf	Lcd_Set_Cursor@b
  2213  04AD  0AF6               	incf	Lcd_Set_Cursor@b,f
  2214  04AE  3002               	movlw	2
  2215  04AF  120A  118A  2419  120A  118A  	fcall	_Lcd_Set_Cursor
  2216  04B4                     l1801:
  2217                           
  2218                           ;main_maestro.c: 180:     Lcd_Write_String(data);
  2219  04B4  3034               	movlw	(low (_data| 0))& (0+255)
  2220  04B5  00F5               	movwf	Lcd_Write_String@a
  2221  04B6  3000               	movlw	0
  2222  04B7  00F6               	movwf	Lcd_Write_String@a+1
  2223  04B8  120A  118A  22B7  120A  118A  	fcall	_Lcd_Write_String
  2224  04BD                     l96:
  2225  04BD  0008               	return
  2226  04BE                     __end_of_Show_val_LCD:
  2227                           
  2228                           	psect	text13
  2229  02B7                     __ptext13:	
  2230 ;; *************** function _Lcd_Write_String *****************
  2231 ;; Defined at:
  2232 ;;		line 70 in file "LCD.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  a               2    5[COMMON] PTR unsigned char 
  2235 ;;		 -> data(8), STR_1(17), 
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;  i               2    0[BANK0 ] int 
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2247 ;;      Params:         2       0       0       0       0
  2248 ;;      Locals:         0       2       0       0       0
  2249 ;;      Temps:          3       0       0       0       0
  2250 ;;      Totals:         5       2       0       0       0
  2251 ;;Total ram usage:        7 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    3
  2254 ;; This function calls:
  2255 ;;		_Lcd_Write_Char
  2256 ;; This function is called by:
  2257 ;;		_main
  2258 ;;		_Show_val_LCD
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           
  2263                           ;psect for function _Lcd_Write_String
  2264  02B7                     _Lcd_Write_String:
  2265  02B7                     l1687:	
  2266                           ;incstack = 0
  2267                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2268                           
  2269                           
  2270                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2271  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2272  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  2273  02B9  01BC               	clrf	Lcd_Write_String@i
  2274  02BA  01BD               	clrf	Lcd_Write_String@i+1
  2275  02BB  2AE0               	goto	l1693
  2276  02BC                     l1689:
  2277                           
  2278                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2279  02BC  083C               	movf	Lcd_Write_String@i,w
  2280  02BD  0775               	addwf	Lcd_Write_String@a,w
  2281  02BE  00F8               	movwf	??_Lcd_Write_String+1
  2282  02BF  0876               	movf	Lcd_Write_String@a+1,w
  2283  02C0  00F7               	movwf	??_Lcd_Write_String
  2284  02C1  1803               	skipnc
  2285  02C2  0AF7               	incf	??_Lcd_Write_String,f
  2286  02C3  1FBC               	btfss	Lcd_Write_String@i,7
  2287  02C4  2AC6               	goto	u880
  2288  02C5  03F7               	decf	??_Lcd_Write_String,f
  2289  02C6                     u880:
  2290  02C6  0877               	movf	??_Lcd_Write_String,w
  2291  02C7  00F9               	movwf	??_Lcd_Write_String+2
  2292  02C8  0879               	movf	??_Lcd_Write_String+2,w
  2293  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2294  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  2295  02CB  00FF               	movwf	btemp+1
  2296  02CC  0878               	movf	??_Lcd_Write_String+1,w
  2297  02CD  0084               	movwf	4
  2298  02CE  120A  118A  237D  120A  118A  	fcall	stringtab
  2299  02D3  120A  118A  246D  120A  118A  	fcall	_Lcd_Write_Char
  2300  02D8                     l1691:
  2301  02D8  3001               	movlw	1
  2302  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2303  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2304  02DB  07BC               	addwf	Lcd_Write_String@i,f
  2305  02DC  1803               	skipnc
  2306  02DD  0ABD               	incf	Lcd_Write_String@i+1,f
  2307  02DE  3000               	movlw	0
  2308  02DF  07BD               	addwf	Lcd_Write_String@i+1,f
  2309  02E0                     l1693:
  2310  02E0  083C               	movf	Lcd_Write_String@i,w
  2311  02E1  0775               	addwf	Lcd_Write_String@a,w
  2312  02E2  00F8               	movwf	??_Lcd_Write_String+1
  2313  02E3  0876               	movf	Lcd_Write_String@a+1,w
  2314  02E4  00F7               	movwf	??_Lcd_Write_String
  2315  02E5  1803               	skipnc
  2316  02E6  0AF7               	incf	??_Lcd_Write_String,f
  2317  02E7  1FBC               	btfss	Lcd_Write_String@i,7
  2318  02E8  2AEA               	goto	u890
  2319  02E9  03F7               	decf	??_Lcd_Write_String,f
  2320  02EA                     u890:
  2321  02EA  0877               	movf	??_Lcd_Write_String,w
  2322  02EB  00F9               	movwf	??_Lcd_Write_String+2
  2323  02EC  0879               	movf	??_Lcd_Write_String+2,w
  2324  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2325  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2326  02EF  00FF               	movwf	btemp+1
  2327  02F0  0878               	movf	??_Lcd_Write_String+1,w
  2328  02F1  0084               	movwf	4
  2329  02F2  120A  118A  237D  120A  118A  	fcall	stringtab
  2330  02F7  3A00               	xorlw	0
  2331  02F8  1D03               	skipz
  2332  02F9  2AFB               	goto	u901
  2333  02FA  2AFC               	goto	u900
  2334  02FB                     u901:
  2335  02FB  2ABC               	goto	l1689
  2336  02FC                     u900:
  2337  02FC                     l149:
  2338  02FC  0008               	return
  2339  02FD                     __end_of_Lcd_Write_String:
  2340                           
  2341                           	psect	text14
  2342  046D                     __ptext14:	
  2343 ;; *************** function _Lcd_Write_Char *****************
  2344 ;; Defined at:
  2345 ;;		line 61 in file "LCD.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  a               1    wreg     unsigned char 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  a               1    4[COMMON] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  1    wreg      void 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0, pclath, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2359 ;;      Params:         0       0       0       0       0
  2360 ;;      Locals:         1       0       0       0       0
  2361 ;;      Temps:          1       0       0       0       0
  2362 ;;      Totals:         2       0       0       0       0
  2363 ;;Total ram usage:        2 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    2
  2366 ;; This function calls:
  2367 ;;		_Lcd_Port
  2368 ;; This function is called by:
  2369 ;;		_Lcd_Write_String
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function _Lcd_Write_Char
  2375  046D                     _Lcd_Write_Char:
  2376                           
  2377                           ;incstack = 0
  2378                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2379                           ;Lcd_Write_Char@a stored from wreg
  2380  046D  00F4               	movwf	Lcd_Write_Char@a
  2381  046E                     l1643:
  2382                           
  2383                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2384  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2385  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2386  0470  1409               	bsf	9,0	;volatile
  2387  0471                     l1645:
  2388                           
  2389                           ;LCD.c: 63:    Lcd_Port(a);
  2390  0471  0874               	movf	Lcd_Write_Char@a,w
  2391  0472  120A  118A  2522  120A  118A  	fcall	_Lcd_Port
  2392  0477                     l1647:
  2393                           
  2394                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2395  0477  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0478  1303               	bcf	3,6	;RP1=0, select bank0
  2397  0479  1509               	bsf	9,2	;volatile
  2398  047A                     l1649:
  2399                           
  2400                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2401  047A  301A               	movlw	26
  2402  047B  00F3               	movwf	??_Lcd_Write_Char
  2403  047C                     u1077:
  2404  047C  0BF3               	decfsz	??_Lcd_Write_Char,f
  2405  047D  2C7C               	goto	u1077
  2406  047E  0000               	nop
  2407  047F                     l1651:
  2408                           
  2409                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2410  047F  1283               	bcf	3,5	;RP0=0, select bank0
  2411  0480  1303               	bcf	3,6	;RP1=0, select bank0
  2412  0481  1109               	bcf	9,2	;volatile
  2413  0482                     l143:
  2414  0482  0008               	return
  2415  0483                     __end_of_Lcd_Write_Char:
  2416                           
  2417                           	psect	text15
  2418  0419                     __ptext15:	
  2419 ;; *************** function _Lcd_Set_Cursor *****************
  2420 ;; Defined at:
  2421 ;;		line 48 in file "LCD.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  a               1    wreg     unsigned char 
  2424 ;;  b               1    6[COMMON] unsigned char 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  a               1    8[COMMON] unsigned char 
  2427 ;;  temp            1    9[COMMON] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, pclath, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2437 ;;      Params:         1       0       0       0       0
  2438 ;;      Locals:         2       0       0       0       0
  2439 ;;      Temps:          1       0       0       0       0
  2440 ;;      Totals:         4       0       0       0       0
  2441 ;;Total ram usage:        4 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    3
  2444 ;; This function calls:
  2445 ;;		_Lcd_Cmd
  2446 ;; This function is called by:
  2447 ;;		_main
  2448 ;;		_Show_val_LCD
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           
  2453                           ;psect for function _Lcd_Set_Cursor
  2454  0419                     _Lcd_Set_Cursor:
  2455                           
  2456                           ;incstack = 0
  2457                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2458                           ;Lcd_Set_Cursor@a stored from wreg
  2459  0419  00F8               	movwf	Lcd_Set_Cursor@a
  2460  041A                     l1675:
  2461                           
  2462                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2463  041A  0378               	decf	Lcd_Set_Cursor@a,w
  2464  041B  1D03               	btfss	3,2
  2465  041C  2C1E               	goto	u861
  2466  041D  2C1F               	goto	u860
  2467  041E                     u861:
  2468  041E  2C2B               	goto	l1681
  2469  041F                     u860:
  2470  041F                     l1677:
  2471                           
  2472                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2473  041F  0876               	movf	Lcd_Set_Cursor@b,w
  2474  0420  3E7F               	addlw	127
  2475  0421  00F7               	movwf	??_Lcd_Set_Cursor
  2476  0422  0877               	movf	??_Lcd_Set_Cursor,w
  2477  0423  00F9               	movwf	Lcd_Set_Cursor@temp
  2478  0424                     l1679:
  2479                           
  2480                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2481  0424  0879               	movf	Lcd_Set_Cursor@temp,w
  2482  0425  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2483                           
  2484                           ;LCD.c: 53:  }
  2485  042A  2C3C               	goto	l140
  2486  042B                     l1681:
  2487  042B  3002               	movlw	2
  2488  042C  0678               	xorwf	Lcd_Set_Cursor@a,w
  2489  042D  1D03               	btfss	3,2
  2490  042E  2C30               	goto	u871
  2491  042F  2C31               	goto	u870
  2492  0430                     u871:
  2493  0430  2C3C               	goto	l140
  2494  0431                     u870:
  2495  0431                     l1683:
  2496                           
  2497                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2498  0431  0876               	movf	Lcd_Set_Cursor@b,w
  2499  0432  3EBF               	addlw	191
  2500  0433  00F7               	movwf	??_Lcd_Set_Cursor
  2501  0434  0877               	movf	??_Lcd_Set_Cursor,w
  2502  0435  00F9               	movwf	Lcd_Set_Cursor@temp
  2503  0436                     l1685:
  2504                           
  2505                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2506  0436  0879               	movf	Lcd_Set_Cursor@temp,w
  2507  0437  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2508  043C                     l140:
  2509  043C  0008               	return
  2510  043D                     __end_of_Lcd_Set_Cursor:
  2511                           
  2512                           	psect	text16
  2513  026C                     __ptext16:	
  2514 ;; *************** function _Lcd_Init *****************
  2515 ;; Defined at:
  2516 ;;		line 14 in file "LCD.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;		None
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0, pclath, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2530 ;;      Params:         0       0       0       0       0
  2531 ;;      Locals:         0       0       0       0       0
  2532 ;;      Temps:          2       0       0       0       0
  2533 ;;      Totals:         2       0       0       0       0
  2534 ;;Total ram usage:        2 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    3
  2537 ;; This function calls:
  2538 ;;		_Lcd_Cmd
  2539 ;;		_Lcd_Port
  2540 ;; This function is called by:
  2541 ;;		_main
  2542 ;; This function uses a non-reentrant model
  2543 ;;
  2544                           
  2545                           
  2546                           ;psect for function _Lcd_Init
  2547  026C                     _Lcd_Init:
  2548  026C                     l1785:	
  2549                           ;incstack = 0
  2550                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2551                           
  2552                           
  2553                           ;LCD.c: 15:   Lcd_Port(0x00);
  2554  026C  3000               	movlw	0
  2555  026D  120A  118A  2522  120A  118A  	fcall	_Lcd_Port
  2556  0272                     l1787:
  2557                           
  2558                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  2559  0272  3034               	movlw	52
  2560  0273  00F7               	movwf	??_Lcd_Init+1
  2561  0274  30F1               	movlw	241
  2562  0275  00F6               	movwf	??_Lcd_Init
  2563  0276                     u1087:
  2564  0276  0BF6               	decfsz	??_Lcd_Init,f
  2565  0277  2A76               	goto	u1087
  2566  0278  0BF7               	decfsz	??_Lcd_Init+1,f
  2567  0279  2A76               	goto	u1087
  2568  027A  2A7B               	nop2
  2569  027B                     l1789:
  2570                           
  2571                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  2572  027B  3030               	movlw	48
  2573  027C  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2574                           
  2575                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2576  0281  300D               	movlw	13
  2577  0282  00F7               	movwf	??_Lcd_Init+1
  2578  0283  30FB               	movlw	251
  2579  0284  00F6               	movwf	??_Lcd_Init
  2580  0285                     u1097:
  2581  0285  0BF6               	decfsz	??_Lcd_Init,f
  2582  0286  2A85               	goto	u1097
  2583  0287  0BF7               	decfsz	??_Lcd_Init+1,f
  2584  0288  2A85               	goto	u1097
  2585  0289  2A8A               	nop2
  2586  028A                     l1791:
  2587                           
  2588                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  2589  028A  3030               	movlw	48
  2590  028B  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2591  0290                     l1793:
  2592                           
  2593                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  2594  0290  301D               	movlw	29
  2595  0291  00F7               	movwf	??_Lcd_Init+1
  2596  0292  3091               	movlw	145
  2597  0293  00F6               	movwf	??_Lcd_Init
  2598  0294                     u1107:
  2599  0294  0BF6               	decfsz	??_Lcd_Init,f
  2600  0295  2A94               	goto	u1107
  2601  0296  0BF7               	decfsz	??_Lcd_Init+1,f
  2602  0297  2A94               	goto	u1107
  2603                           
  2604                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  2605  0298  3030               	movlw	48
  2606  0299  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2607                           
  2608                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  2609  029E  3038               	movlw	56
  2610  029F  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2611                           
  2612                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  2613  02A4  300C               	movlw	12
  2614  02A5  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2615                           
  2616                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  2617  02AA  3001               	movlw	1
  2618  02AB  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2619                           
  2620                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  2621  02B0  3006               	movlw	6
  2622  02B1  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2623  02B6                     l125:
  2624  02B6  0008               	return
  2625  02B7                     __end_of_Lcd_Init:
  2626                           
  2627                           	psect	text17
  2628  04D0                     __ptext17:	
  2629 ;; *************** function _Lcd_Clear *****************
  2630 ;; Defined at:
  2631 ;;		line 42 in file "LCD.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;		None
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0, pclath, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2645 ;;      Params:         0       0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0
  2648 ;;      Totals:         0       0       0       0       0
  2649 ;;Total ram usage:        0 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    3
  2652 ;; This function calls:
  2653 ;;		_Lcd_Cmd
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _Lcd_Clear
  2661  04D0                     _Lcd_Clear:
  2662  04D0                     l1795:	
  2663                           ;incstack = 0
  2664                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2665                           
  2666                           
  2667                           ;LCD.c: 43:  Lcd_Cmd(0);
  2668  04D0  3000               	movlw	0
  2669  04D1  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2670                           
  2671                           ;LCD.c: 44:  Lcd_Cmd(1);
  2672  04D6  3001               	movlw	1
  2673  04D7  120A  118A  243D  120A  118A  	fcall	_Lcd_Cmd
  2674  04DC                     l134:
  2675  04DC  0008               	return
  2676  04DD                     __end_of_Lcd_Clear:
  2677                           
  2678                           	psect	text18
  2679  043D                     __ptext18:	
  2680 ;; *************** function _Lcd_Cmd *****************
  2681 ;; Defined at:
  2682 ;;		line 33 in file "LCD.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;  a               1    wreg     unsigned char 
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  a               1    5[COMMON] unsigned char 
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      void 
  2689 ;; Registers used:
  2690 ;;		wreg, status,2, status,0, pclath, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2696 ;;      Params:         0       0       0       0       0
  2697 ;;      Locals:         1       0       0       0       0
  2698 ;;      Temps:          2       0       0       0       0
  2699 ;;      Totals:         3       0       0       0       0
  2700 ;;Total ram usage:        3 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    2
  2703 ;; This function calls:
  2704 ;;		_Lcd_Port
  2705 ;; This function is called by:
  2706 ;;		_Lcd_Init
  2707 ;;		_Lcd_Clear
  2708 ;;		_Lcd_Set_Cursor
  2709 ;;		_Lcd_Shift_Right
  2710 ;;		_Lcd_Shift_Left
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           
  2715                           ;psect for function _Lcd_Cmd
  2716  043D                     _Lcd_Cmd:
  2717                           
  2718                           ;incstack = 0
  2719                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2720                           ;Lcd_Cmd@a stored from wreg
  2721  043D  00F5               	movwf	Lcd_Cmd@a
  2722  043E                     l1633:
  2723                           
  2724                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  2725  043E  1283               	bcf	3,5	;RP0=0, select bank0
  2726  043F  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0440  1009               	bcf	9,0	;volatile
  2728  0441                     l1635:
  2729                           
  2730                           ;LCD.c: 35:  Lcd_Port(a);
  2731  0441  0875               	movf	Lcd_Cmd@a,w
  2732  0442  120A  118A  2522  120A  118A  	fcall	_Lcd_Port
  2733  0447                     l1637:
  2734                           
  2735                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  2736  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2737  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2738  0449  1509               	bsf	9,2	;volatile
  2739  044A                     l1639:
  2740                           
  2741                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2742  044A  300B               	movlw	11
  2743  044B  00F4               	movwf	??_Lcd_Cmd+1
  2744  044C  3062               	movlw	98
  2745  044D  00F3               	movwf	??_Lcd_Cmd
  2746  044E                     u1117:
  2747  044E  0BF3               	decfsz	??_Lcd_Cmd,f
  2748  044F  2C4E               	goto	u1117
  2749  0450  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2750  0451  2C4E               	goto	u1117
  2751  0452  0000               	nop
  2752  0453                     l1641:
  2753                           
  2754                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  2755  0453  1283               	bcf	3,5	;RP0=0, select bank0
  2756  0454  1303               	bcf	3,6	;RP1=0, select bank0
  2757  0455  1109               	bcf	9,2	;volatile
  2758  0456                     l131:
  2759  0456  0008               	return
  2760  0457                     __end_of_Lcd_Cmd:
  2761                           
  2762                           	psect	text19
  2763  0522                     __ptext19:	
  2764 ;; *************** function _Lcd_Port *****************
  2765 ;; Defined at:
  2766 ;;		line 29 in file "LCD.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  a               1    wreg     unsigned char 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  a               1    2[COMMON] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2780 ;;      Params:         0       0       0       0       0
  2781 ;;      Locals:         1       0       0       0       0
  2782 ;;      Temps:          0       0       0       0       0
  2783 ;;      Totals:         1       0       0       0       0
  2784 ;;Total ram usage:        1 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_Lcd_Init
  2791 ;;		_Lcd_Cmd
  2792 ;;		_Lcd_Write_Char
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           
  2797                           ;psect for function _Lcd_Port
  2798  0522                     _Lcd_Port:
  2799                           
  2800                           ;incstack = 0
  2801                           ; Regs used in _Lcd_Port: [wreg]
  2802                           ;Lcd_Port@a stored from wreg
  2803  0522  00F2               	movwf	Lcd_Port@a
  2804  0523                     l1631:
  2805                           
  2806                           ;LCD.c: 30:     PORTD = a;
  2807  0523  0872               	movf	Lcd_Port@a,w
  2808  0524  1283               	bcf	3,5	;RP0=0, select bank0
  2809  0525  1303               	bcf	3,6	;RP1=0, select bank0
  2810  0526  0088               	movwf	8	;volatile
  2811  0527                     l128:
  2812  0527  0008               	return
  2813  0528                     __end_of_Lcd_Port:
  2814                           
  2815                           	psect	text20
  2816  0498                     __ptext20:	
  2817 ;; *************** function _ADC_to_string *****************
  2818 ;; Defined at:
  2819 ;;		line 170 in file "main_maestro.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2833 ;;      Params:         0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0
  2835 ;;      Temps:          0       3       0       0       0
  2836 ;;      Totals:         0       3       0       0       0
  2837 ;;Total ram usage:        3 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    3
  2840 ;; This function calls:
  2841 ;;		_sprintf
  2842 ;; This function is called by:
  2843 ;;		_main
  2844 ;; This function uses a non-reentrant model
  2845 ;;
  2846                           
  2847                           
  2848                           ;psect for function _ADC_to_string
  2849  0498                     _ADC_to_string:
  2850  0498                     l1797:	
  2851                           ;incstack = 0
  2852                           ; Regs used in _ADC_to_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2853                           
  2854                           
  2855                           ;main_maestro.c: 172:     sprintf(data, "%.3i", cont);
  2856  0498  3025               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2857  0499  1283               	bcf	3,5	;RP0=0, select bank0
  2858  049A  1303               	bcf	3,6	;RP1=0, select bank0
  2859  049B  00CF               	movwf	??_ADC_to_string
  2860  049C  084F               	movf	??_ADC_to_string,w
  2861  049D  00C2               	movwf	sprintf@f
  2862  049E  087A               	movf	_cont,w
  2863  049F  00D0               	movwf	??_ADC_to_string+1
  2864  04A0  01D1               	clrf	??_ADC_to_string+2
  2865  04A1  0850               	movf	??_ADC_to_string+1,w
  2866  04A2  00C3               	movwf	?_sprintf+1
  2867  04A3  0851               	movf	??_ADC_to_string+2,w
  2868  04A4  00C4               	movwf	?_sprintf+2
  2869  04A5  3034               	movlw	(low (_data| 0))& (0+255)
  2870  04A6  120A  118A  201E  120A  118A  	fcall	_sprintf
  2871  04AB                     l93:
  2872  04AB  0008               	return
  2873  04AC                     __end_of_ADC_to_string:
  2874                           
  2875                           	psect	text21
  2876  001E                     __ptext21:	
  2877 ;; *************** function _sprintf *****************
  2878 ;; Defined at:
  2879 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  sp              1    wreg     PTR unsigned char 
  2882 ;;		 -> data(8), 
  2883 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  2884 ;;		 -> STR_3(5), 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  sp              1   14[BANK0 ] PTR unsigned char 
  2887 ;;		 -> data(8), 
  2888 ;;  tmpval          4    0        struct .
  2889 ;;  val             2   15[BANK0 ] unsigned int 
  2890 ;;  cp              2    0        PTR const unsigned char 
  2891 ;;  len             2    0        unsigned int 
  2892 ;;  c               1   18[BANK0 ] unsigned char 
  2893 ;;  prec            1   17[BANK0 ] char 
  2894 ;;  flag            1   13[BANK0 ] unsigned char 
  2895 ;;  ap              1   12[BANK0 ] PTR void [1]
  2896 ;;		 -> ?_sprintf(2), 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  2    6[BANK0 ] int 
  2899 ;; Registers used:
  2900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2906 ;;      Params:         0       3       0       0       0
  2907 ;;      Locals:         0       7       0       0       0
  2908 ;;      Temps:          0       3       0       0       0
  2909 ;;      Totals:         0      13       0       0       0
  2910 ;;Total ram usage:       13 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    2
  2913 ;; This function calls:
  2914 ;;		___bmul
  2915 ;;		___lwdiv
  2916 ;;		___lwmod
  2917 ;;		_isdigit
  2918 ;; This function is called by:
  2919 ;;		_ADC_to_string
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           
  2924                           ;psect for function _sprintf
  2925  001E                     _sprintf:
  2926                           
  2927                           ;incstack = 0
  2928                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2929                           ;sprintf@sp stored from wreg
  2930  001E  1283               	bcf	3,5	;RP0=0, select bank0
  2931  001F  1303               	bcf	3,6	;RP1=0, select bank0
  2932  0020  00CA               	movwf	sprintf@sp
  2933  0021                     l1695:
  2934                           
  2935                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2936  0021  3043               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2937  0022  00C5               	movwf	??_sprintf
  2938  0023  0845               	movf	??_sprintf,w
  2939  0024  00C8               	movwf	sprintf@ap
  2940                           
  2941                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2942  0025  296C               	goto	l1773
  2943  0026                     l1697:
  2944                           
  2945                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2946  0026  3025               	movlw	37
  2947  0027  064E               	xorwf	sprintf@c,w
  2948  0028  1903               	btfsc	3,2
  2949  0029  282B               	goto	u911
  2950  002A  282C               	goto	u910
  2951  002B                     u911:
  2952  002B  2838               	goto	l1703
  2953  002C                     u910:
  2954  002C                     l1699:
  2955                           
  2956                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2957  002C  084E               	movf	sprintf@c,w
  2958  002D  00C5               	movwf	??_sprintf
  2959  002E  084A               	movf	sprintf@sp,w
  2960  002F  0084               	movwf	4
  2961  0030  0845               	movf	??_sprintf,w
  2962  0031  1383               	bcf	3,7	;select IRP bank0
  2963  0032  0080               	movwf	0
  2964  0033                     l1701:
  2965  0033  3001               	movlw	1
  2966  0034  00C5               	movwf	??_sprintf
  2967  0035  0845               	movf	??_sprintf,w
  2968  0036  07CA               	addwf	sprintf@sp,f
  2969                           
  2970                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  2971  0037  296C               	goto	l1773
  2972  0038                     l1703:
  2973                           
  2974                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2975  0038  01C9               	clrf	sprintf@flag
  2976  0039                     l1705:
  2977                           
  2978                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  2979  0039  0842               	movf	sprintf@f,w
  2980  003A  0084               	movwf	4
  2981  003B  120A  118A  2387  120A  118A  	fcall	stringdir
  2982  0040  3A2E               	xorlw	46
  2983  0041  1D03               	skipz
  2984  0042  2844               	goto	u921
  2985  0043  2845               	goto	u920
  2986  0044                     u921:
  2987  0044  287C               	goto	l1719
  2988  0045                     u920:
  2989  0045                     l1707:
  2990                           
  2991                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  2992  0045  3001               	movlw	1
  2993  0046  00C5               	movwf	??_sprintf
  2994  0047  0845               	movf	??_sprintf,w
  2995  0048  07C2               	addwf	sprintf@f,f
  2996  0049                     l1709:
  2997                           
  2998                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  2999  0049  01CD               	clrf	sprintf@prec
  3000                           
  3001                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3002  004A  286B               	goto	l1717
  3003  004B                     l1711:
  3004                           
  3005                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  3006  004B  1283               	bcf	3,5	;RP0=0, select bank0
  3007  004C  1303               	bcf	3,6	;RP1=0, select bank0
  3008  004D  084D               	movf	sprintf@prec,w
  3009  004E  00C5               	movwf	??_sprintf
  3010  004F  0845               	movf	??_sprintf,w
  3011  0050  00F2               	movwf	___bmul@multiplicand
  3012  0051  300A               	movlw	10
  3013  0052  120A  118A  2483  120A  118A  	fcall	___bmul
  3014  0057  1283               	bcf	3,5	;RP0=0, select bank0
  3015  0058  1303               	bcf	3,6	;RP1=0, select bank0
  3016  0059  00C6               	movwf	??_sprintf+1
  3017  005A  0846               	movf	??_sprintf+1,w
  3018  005B  00CD               	movwf	sprintf@prec
  3019  005C                     l1713:
  3020                           
  3021                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  3022  005C  0842               	movf	sprintf@f,w
  3023  005D  0084               	movwf	4
  3024  005E  120A  118A  2387  120A  118A  	fcall	stringdir
  3025  0063  3ED0               	addlw	-48
  3026  0064  00C5               	movwf	??_sprintf
  3027  0065  0845               	movf	??_sprintf,w
  3028  0066  07CD               	addwf	sprintf@prec,f
  3029  0067                     l1715:
  3030  0067  3001               	movlw	1
  3031  0068  00C5               	movwf	??_sprintf
  3032  0069  0845               	movf	??_sprintf,w
  3033  006A  07C2               	addwf	sprintf@f,f
  3034  006B                     l1717:
  3035                           
  3036                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  3037  006B  0842               	movf	sprintf@f,w
  3038  006C  0084               	movwf	4
  3039  006D  120A  118A  2387  120A  118A  	fcall	stringdir
  3040  0072  120A  118A  24BE  120A  118A  	fcall	_isdigit
  3041  0077  1803               	btfsc	3,0
  3042  0078  287A               	goto	u931
  3043  0079  287B               	goto	u930
  3044  007A                     u931:
  3045  007A  284B               	goto	l1711
  3046  007B                     u930:
  3047  007B  287D               	goto	l1723
  3048  007C                     l1719:
  3049                           
  3050                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  3051  007C  01CD               	clrf	sprintf@prec
  3052  007D                     l1723:
  3053  007D  3001               	movlw	1
  3054  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3055  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3056  0080  07C2               	addwf	sprintf@f,f
  3057  0081  30FF               	movlw	-1
  3058  0082  0742               	addwf	sprintf@f,w
  3059  0083  0084               	movwf	4
  3060  0084  120A  118A  2387  120A  118A  	fcall	stringdir
  3061  0089  00CE               	movwf	sprintf@c
  3062  008A  00C5               	movwf	??_sprintf
  3063  008B  01C6               	clrf	??_sprintf+1
  3064                           
  3065                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3066                           ; Switch size 1, requested type "simple"
  3067                           ; Number of cases is 1, Range of values is 0 to 0
  3068                           ; switch strategies available:
  3069                           ; Name         Instructions Cycles
  3070                           ; simple_byte            4     3 (average)
  3071                           ; direct_byte           11     8 (fixed)
  3072                           ; jumptable            260     6 (fixed)
  3073                           ;	Chosen strategy is simple_byte
  3074  008C  0846               	movf	??_sprintf+1,w
  3075  008D  3A00               	xorlw	0	; case 0
  3076  008E  1903               	skipnz
  3077  008F  2891               	goto	l1901
  3078  0090  296C               	goto	l1773
  3079  0091                     l1901:
  3080                           
  3081                           ; Switch size 1, requested type "simple"
  3082                           ; Number of cases is 3, Range of values is 0 to 105
  3083                           ; switch strategies available:
  3084                           ; Name         Instructions Cycles
  3085                           ; simple_byte           10     6 (average)
  3086                           ; jumptable            260     6 (fixed)
  3087                           ;	Chosen strategy is simple_byte
  3088  0091  0845               	movf	??_sprintf,w
  3089  0092  3A00               	xorlw	0	; case 0
  3090  0093  1903               	skipnz
  3091  0094  297E               	goto	l1775
  3092  0095  3A64               	xorlw	100	; case 100
  3093  0096  1903               	skipnz
  3094  0097  289C               	goto	l1725
  3095  0098  3A0D               	xorlw	13	; case 105
  3096  0099  1903               	skipnz
  3097  009A  289C               	goto	l1725
  3098  009B  296C               	goto	l1773
  3099  009C                     l1725:
  3100                           
  3101                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3102  009C  0848               	movf	sprintf@ap,w
  3103  009D  0084               	movwf	4
  3104  009E  1383               	bcf	3,7	;select IRP bank0
  3105  009F  0800               	movf	0,w
  3106  00A0  00CB               	movwf	sprintf@val
  3107  00A1  0A84               	incf	4,f
  3108  00A2  0800               	movf	0,w
  3109  00A3  00CC               	movwf	sprintf@val+1
  3110  00A4                     l1727:
  3111  00A4  3002               	movlw	2
  3112  00A5  00C5               	movwf	??_sprintf
  3113  00A6  0845               	movf	??_sprintf,w
  3114  00A7  07C8               	addwf	sprintf@ap,f
  3115  00A8                     l1729:
  3116                           
  3117                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  3118  00A8  1FCC               	btfss	sprintf@val+1,7
  3119  00A9  28AB               	goto	u941
  3120  00AA  28AC               	goto	u940
  3121  00AB                     u941:
  3122  00AB  28B5               	goto	l1735
  3123  00AC                     u940:
  3124  00AC                     l1731:
  3125                           
  3126                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  3127  00AC  3003               	movlw	3
  3128  00AD  00C5               	movwf	??_sprintf
  3129  00AE  0845               	movf	??_sprintf,w
  3130  00AF  04C9               	iorwf	sprintf@flag,f
  3131  00B0                     l1733:
  3132                           
  3133                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  3134  00B0  09CB               	comf	sprintf@val,f
  3135  00B1  09CC               	comf	sprintf@val+1,f
  3136  00B2  0ACB               	incf	sprintf@val,f
  3137  00B3  1903               	skipnz
  3138  00B4  0ACC               	incf	sprintf@val+1,f
  3139  00B5                     l1735:
  3140                           
  3141                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  3142  00B5  084D               	movf	sprintf@prec,w
  3143  00B6  1D03               	btfss	3,2
  3144  00B7  28B9               	goto	u951
  3145  00B8  28BA               	goto	u950
  3146  00B9                     u951:
  3147  00B9  28C4               	goto	l1741
  3148  00BA                     u950:
  3149  00BA                     l1737:
  3150  00BA  084B               	movf	sprintf@val,w
  3151  00BB  044C               	iorwf	sprintf@val+1,w
  3152  00BC  1D03               	btfss	3,2
  3153  00BD  28BF               	goto	u961
  3154  00BE  28C0               	goto	u960
  3155  00BF                     u961:
  3156  00BF  28C4               	goto	l1741
  3157  00C0                     u960:
  3158  00C0                     l1739:
  3159                           
  3160                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  3161  00C0  3001               	movlw	1
  3162  00C1  00C5               	movwf	??_sprintf
  3163  00C2  0845               	movf	??_sprintf,w
  3164  00C3  07CD               	addwf	sprintf@prec,f
  3165  00C4                     l1741:
  3166                           
  3167                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3168  00C4  01CE               	clrf	sprintf@c
  3169  00C5  0ACE               	incf	sprintf@c,f
  3170  00C6                     l1745:
  3171                           
  3172                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3173  00C6  084E               	movf	sprintf@c,w
  3174  00C7  00C5               	movwf	??_sprintf
  3175  00C8  0745               	addwf	??_sprintf,w
  3176  00C9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3177  00CA  0084               	movwf	4
  3178  00CB  120A  118A  2387  120A  118A  	fcall	stringdir
  3179  00D0  00C6               	movwf	??_sprintf+1
  3180  00D1  120A  118A  2387  120A  118A  	fcall	stringdir
  3181  00D6  00C7               	movwf	??_sprintf+2
  3182  00D7  0847               	movf	??_sprintf+2,w
  3183  00D8  024C               	subwf	sprintf@val+1,w
  3184  00D9  1D03               	skipz
  3185  00DA  28DD               	goto	u975
  3186  00DB  0846               	movf	??_sprintf+1,w
  3187  00DC  024B               	subwf	sprintf@val,w
  3188  00DD                     u975:
  3189  00DD  1803               	skipnc
  3190  00DE  28E0               	goto	u971
  3191  00DF  28E1               	goto	u970
  3192  00E0                     u971:
  3193  00E0  28E2               	goto	l1749
  3194  00E1                     u970:
  3195  00E1  28EC               	goto	l1751
  3196  00E2                     l1749:
  3197  00E2  3001               	movlw	1
  3198  00E3  00C5               	movwf	??_sprintf
  3199  00E4  0845               	movf	??_sprintf,w
  3200  00E5  07CE               	addwf	sprintf@c,f
  3201  00E6  3005               	movlw	5
  3202  00E7  064E               	xorwf	sprintf@c,w
  3203  00E8  1D03               	btfss	3,2
  3204  00E9  28EB               	goto	u981
  3205  00EA  28EC               	goto	u980
  3206  00EB                     u981:
  3207  00EB  28C6               	goto	l1745
  3208  00EC                     u980:
  3209  00EC                     l1751:
  3210                           
  3211                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  3212  00EC  084D               	movf	sprintf@prec,w
  3213  00ED  00C5               	movwf	??_sprintf
  3214  00EE  01C6               	clrf	??_sprintf+1
  3215  00EF  1BC5               	btfsc	??_sprintf,7
  3216  00F0  03C6               	decf	??_sprintf+1,f
  3217  00F1  0846               	movf	??_sprintf+1,w
  3218  00F2  3A80               	xorlw	128
  3219  00F3  3C80               	sublw	128
  3220  00F4  1D03               	skipz
  3221  00F5  28F8               	goto	u995
  3222  00F6  0845               	movf	??_sprintf,w
  3223  00F7  024E               	subwf	sprintf@c,w
  3224  00F8                     u995:
  3225  00F8  1803               	skipnc
  3226  00F9  28FB               	goto	u991
  3227  00FA  28FC               	goto	u990
  3228  00FB                     u991:
  3229  00FB  28FD               	goto	l1755
  3230  00FC                     u990:
  3231  00FC                     l1753:
  3232  00FC  2917               	goto	l1759
  3233  00FD                     l1755:
  3234  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  3235  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  3236  00FF  084D               	movf	sprintf@prec,w
  3237  0100  00C5               	movwf	??_sprintf
  3238  0101  01C6               	clrf	??_sprintf+1
  3239  0102  1BC5               	btfsc	??_sprintf,7
  3240  0103  03C6               	decf	??_sprintf+1,f
  3241  0104  0846               	movf	??_sprintf+1,w
  3242  0105  3A80               	xorlw	128
  3243  0106  00C7               	movwf	??_sprintf+2
  3244  0107  3080               	movlw	128
  3245  0108  0247               	subwf	??_sprintf+2,w
  3246  0109  1D03               	skipz
  3247  010A  290D               	goto	u1005
  3248  010B  084E               	movf	sprintf@c,w
  3249  010C  0245               	subwf	??_sprintf,w
  3250  010D                     u1005:
  3251  010D  1803               	skipnc
  3252  010E  2910               	goto	u1001
  3253  010F  2911               	goto	u1000
  3254  0110                     u1001:
  3255  0110  2917               	goto	l1759
  3256  0111                     u1000:
  3257  0111                     l1757:
  3258                           
  3259                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
  3260  0111  1283               	bcf	3,5	;RP0=0, select bank0
  3261  0112  1303               	bcf	3,6	;RP1=0, select bank0
  3262  0113  084E               	movf	sprintf@c,w
  3263  0114  00C5               	movwf	??_sprintf
  3264  0115  0845               	movf	??_sprintf,w
  3265  0116  00CD               	movwf	sprintf@prec
  3266  0117                     l1759:
  3267                           
  3268                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  3269  0117  1283               	bcf	3,5	;RP0=0, select bank0
  3270  0118  1303               	bcf	3,6	;RP1=0, select bank0
  3271  0119  0849               	movf	sprintf@flag,w
  3272  011A  3903               	andlw	3
  3273  011B  1903               	btfsc	3,2
  3274  011C  291E               	goto	u1011
  3275  011D  291F               	goto	u1010
  3276  011E                     u1011:
  3277  011E  2963               	goto	l1771
  3278  011F                     u1010:
  3279  011F                     l1761:
  3280                           
  3281                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  3282  011F  302D               	movlw	45
  3283  0120  00C5               	movwf	??_sprintf
  3284  0121  084A               	movf	sprintf@sp,w
  3285  0122  0084               	movwf	4
  3286  0123  0845               	movf	??_sprintf,w
  3287  0124  1383               	bcf	3,7	;select IRP bank0
  3288  0125  0080               	movwf	0
  3289  0126                     l1763:
  3290  0126  3001               	movlw	1
  3291  0127  00C5               	movwf	??_sprintf
  3292  0128  0845               	movf	??_sprintf,w
  3293  0129  07CA               	addwf	sprintf@sp,f
  3294  012A  2963               	goto	l1771
  3295  012B                     l1765:
  3296                           
  3297                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  3298  012B  300A               	movlw	10
  3299  012C  00BC               	movwf	___lwmod@divisor
  3300  012D  3000               	movlw	0
  3301  012E  00BD               	movwf	___lwmod@divisor+1
  3302  012F  084D               	movf	sprintf@prec,w
  3303  0130  00C5               	movwf	??_sprintf
  3304  0131  0745               	addwf	??_sprintf,w
  3305  0132  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3306  0133  0084               	movwf	4
  3307  0134  120A  118A  2387  120A  118A  	fcall	stringdir
  3308  0139  00F2               	movwf	___lwdiv@divisor
  3309  013A  120A  118A  2387  120A  118A  	fcall	stringdir
  3310  013F  00F3               	movwf	___lwdiv@divisor+1
  3311  0140  084C               	movf	sprintf@val+1,w
  3312  0141  00F5               	movwf	___lwdiv@dividend+1
  3313  0142  084B               	movf	sprintf@val,w
  3314  0143  00F4               	movwf	___lwdiv@dividend
  3315  0144  120A  118A  22FD  120A  118A  	fcall	___lwdiv
  3316  0149  0873               	movf	?___lwdiv+1,w
  3317  014A  1283               	bcf	3,5	;RP0=0, select bank0
  3318  014B  1303               	bcf	3,6	;RP1=0, select bank0
  3319  014C  00BF               	movwf	___lwmod@dividend+1
  3320  014D  0872               	movf	?___lwdiv,w
  3321  014E  00BE               	movwf	___lwmod@dividend
  3322  014F  120A  118A  2341  120A  118A  	fcall	___lwmod
  3323  0154  1283               	bcf	3,5	;RP0=0, select bank0
  3324  0155  1303               	bcf	3,6	;RP1=0, select bank0
  3325  0156  083C               	movf	?___lwmod,w
  3326  0157  3E30               	addlw	48
  3327  0158  00C6               	movwf	??_sprintf+1
  3328  0159  0846               	movf	??_sprintf+1,w
  3329  015A  00CE               	movwf	sprintf@c
  3330  015B                     l1767:
  3331                           
  3332                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  3333  015B  084E               	movf	sprintf@c,w
  3334  015C  00C5               	movwf	??_sprintf
  3335  015D  084A               	movf	sprintf@sp,w
  3336  015E  0084               	movwf	4
  3337  015F  0845               	movf	??_sprintf,w
  3338  0160  1383               	bcf	3,7	;select IRP bank0
  3339  0161  0080               	movwf	0
  3340  0162  2926               	goto	l1763
  3341  0163                     l1771:
  3342                           
  3343                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  3344  0163  30FF               	movlw	255
  3345  0164  00C5               	movwf	??_sprintf
  3346  0165  0845               	movf	??_sprintf,w
  3347  0166  07CD               	addwf	sprintf@prec,f
  3348  0167  0A4D               	incf	sprintf@prec,w
  3349  0168  1D03               	btfss	3,2
  3350  0169  296B               	goto	u1021
  3351  016A  296C               	goto	u1020
  3352  016B                     u1021:
  3353  016B  292B               	goto	l1765
  3354  016C                     u1020:
  3355  016C                     l1773:
  3356                           
  3357                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3358  016C  3001               	movlw	1
  3359  016D  07C2               	addwf	sprintf@f,f
  3360  016E  30FF               	movlw	-1
  3361  016F  0742               	addwf	sprintf@f,w
  3362  0170  0084               	movwf	4
  3363  0171  120A  118A  2387  120A  118A  	fcall	stringdir
  3364  0176  00C5               	movwf	??_sprintf
  3365  0177  0845               	movf	??_sprintf,w
  3366  0178  00CE               	movwf	sprintf@c
  3367  0179  084E               	movf	sprintf@c,w
  3368  017A  1D03               	btfss	3,2
  3369  017B  297D               	goto	u1031
  3370  017C  297E               	goto	u1030
  3371  017D                     u1031:
  3372  017D  2826               	goto	l1697
  3373  017E                     u1030:
  3374  017E                     l1775:
  3375                           
  3376                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  3377  017E  084A               	movf	sprintf@sp,w
  3378  017F  0084               	movwf	4
  3379  0180  1383               	bcf	3,7	;select IRP bank0
  3380  0181  0180               	clrf	0
  3381  0182                     l357:
  3382  0182  0008               	return
  3383  0183                     __end_of_sprintf:
  3384                           
  3385                           	psect	text22
  3386  04BE                     __ptext22:	
  3387 ;; *************** function _isdigit *****************
  3388 ;; Defined at:
  3389 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  c               1    wreg     unsigned char 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  c               1    3[COMMON] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;		None               void
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3403 ;;      Params:         0       0       0       0       0
  3404 ;;      Locals:         2       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0
  3406 ;;      Totals:         2       0       0       0       0
  3407 ;;Total ram usage:        2 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    1
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_sprintf
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _isdigit
  3419  04BE                     _isdigit:
  3420                           
  3421                           ;incstack = 0
  3422                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3423                           ;isdigit@c stored from wreg
  3424  04BE  00F3               	movwf	isdigit@c
  3425  04BF                     l1243:
  3426  04BF  01F2               	clrf	_isdigit$989
  3427  04C0                     l1245:
  3428  04C0  303A               	movlw	58
  3429  04C1  0273               	subwf	isdigit@c,w
  3430  04C2  1803               	skipnc
  3431  04C3  2CC5               	goto	u411
  3432  04C4  2CC6               	goto	u410
  3433  04C5                     u411:
  3434  04C5  2CCE               	goto	l1251
  3435  04C6                     u410:
  3436  04C6                     l1247:
  3437  04C6  3030               	movlw	48
  3438  04C7  0273               	subwf	isdigit@c,w
  3439  04C8  1C03               	skipc
  3440  04C9  2CCB               	goto	u421
  3441  04CA  2CCC               	goto	u420
  3442  04CB                     u421:
  3443  04CB  2CCE               	goto	l1251
  3444  04CC                     u420:
  3445  04CC                     l1249:
  3446  04CC  01F2               	clrf	_isdigit$989
  3447  04CD  0AF2               	incf	_isdigit$989,f
  3448  04CE                     l1251:
  3449  04CE  0C72               	rrf	_isdigit$989,w
  3450  04CF                     l789:
  3451  04CF  0008               	return
  3452  04D0                     __end_of_isdigit:
  3453                           
  3454                           	psect	text23
  3455  0341                     __ptext23:	
  3456 ;; *************** function ___lwmod *****************
  3457 ;; Defined at:
  3458 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;  divisor         2    0[BANK0 ] unsigned int 
  3461 ;;  dividend        2    2[BANK0 ] unsigned int 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  counter         1    5[BANK0 ] unsigned char 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  2    0[BANK0 ] unsigned int 
  3466 ;; Registers used:
  3467 ;;		wreg, status,2, status,0
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3473 ;;      Params:         0       4       0       0       0
  3474 ;;      Locals:         0       1       0       0       0
  3475 ;;      Temps:          0       1       0       0       0
  3476 ;;      Totals:         0       6       0       0       0
  3477 ;;Total ram usage:        6 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    1
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_sprintf
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function ___lwmod
  3489  0341                     ___lwmod:
  3490  0341                     l1653:	
  3491                           ;incstack = 0
  3492                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3493                           
  3494  0341  1283               	bcf	3,5	;RP0=0, select bank0
  3495  0342  1303               	bcf	3,6	;RP1=0, select bank0
  3496  0343  083C               	movf	___lwmod@divisor,w
  3497  0344  043D               	iorwf	___lwmod@divisor+1,w
  3498  0345  1903               	btfsc	3,2
  3499  0346  2B48               	goto	u801
  3500  0347  2B49               	goto	u800
  3501  0348                     u801:
  3502  0348  2B78               	goto	l1671
  3503  0349                     u800:
  3504  0349                     l1655:
  3505  0349  01C1               	clrf	___lwmod@counter
  3506  034A  0AC1               	incf	___lwmod@counter,f
  3507  034B  2B57               	goto	l1661
  3508  034C                     l1657:
  3509  034C  3001               	movlw	1
  3510  034D                     u815:
  3511  034D  1003               	clrc
  3512  034E  0DBC               	rlf	___lwmod@divisor,f
  3513  034F  0DBD               	rlf	___lwmod@divisor+1,f
  3514  0350  3EFF               	addlw	-1
  3515  0351  1D03               	skipz
  3516  0352  2B4D               	goto	u815
  3517  0353                     l1659:
  3518  0353  3001               	movlw	1
  3519  0354  00C0               	movwf	??___lwmod
  3520  0355  0840               	movf	??___lwmod,w
  3521  0356  07C1               	addwf	___lwmod@counter,f
  3522  0357                     l1661:
  3523  0357  1FBD               	btfss	___lwmod@divisor+1,7
  3524  0358  2B5A               	goto	u821
  3525  0359  2B5B               	goto	u820
  3526  035A                     u821:
  3527  035A  2B4C               	goto	l1657
  3528  035B                     u820:
  3529  035B                     l1663:
  3530  035B  083D               	movf	___lwmod@divisor+1,w
  3531  035C  023F               	subwf	___lwmod@dividend+1,w
  3532  035D  1D03               	skipz
  3533  035E  2B61               	goto	u835
  3534  035F  083C               	movf	___lwmod@divisor,w
  3535  0360  023E               	subwf	___lwmod@dividend,w
  3536  0361                     u835:
  3537  0361  1C03               	skipc
  3538  0362  2B64               	goto	u831
  3539  0363  2B65               	goto	u830
  3540  0364                     u831:
  3541  0364  2B6B               	goto	l1667
  3542  0365                     u830:
  3543  0365                     l1665:
  3544  0365  083C               	movf	___lwmod@divisor,w
  3545  0366  02BE               	subwf	___lwmod@dividend,f
  3546  0367  083D               	movf	___lwmod@divisor+1,w
  3547  0368  1C03               	skipc
  3548  0369  03BF               	decf	___lwmod@dividend+1,f
  3549  036A  02BF               	subwf	___lwmod@dividend+1,f
  3550  036B                     l1667:
  3551  036B  3001               	movlw	1
  3552  036C                     u845:
  3553  036C  1003               	clrc
  3554  036D  0CBD               	rrf	___lwmod@divisor+1,f
  3555  036E  0CBC               	rrf	___lwmod@divisor,f
  3556  036F  3EFF               	addlw	-1
  3557  0370  1D03               	skipz
  3558  0371  2B6C               	goto	u845
  3559  0372                     l1669:
  3560  0372  3001               	movlw	1
  3561  0373  02C1               	subwf	___lwmod@counter,f
  3562  0374  1D03               	btfss	3,2
  3563  0375  2B77               	goto	u851
  3564  0376  2B78               	goto	u850
  3565  0377                     u851:
  3566  0377  2B5B               	goto	l1663
  3567  0378                     u850:
  3568  0378                     l1671:
  3569  0378  083F               	movf	___lwmod@dividend+1,w
  3570  0379  00BD               	movwf	?___lwmod+1
  3571  037A  083E               	movf	___lwmod@dividend,w
  3572  037B  00BC               	movwf	?___lwmod
  3573  037C                     l779:
  3574  037C  0008               	return
  3575  037D                     __end_of___lwmod:
  3576                           
  3577                           	psect	text24
  3578  02FD                     __ptext24:	
  3579 ;; *************** function ___lwdiv *****************
  3580 ;; Defined at:
  3581 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  divisor         2    2[COMMON] unsigned int 
  3584 ;;  dividend        2    4[COMMON] unsigned int 
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  quotient        2    7[COMMON] unsigned int 
  3587 ;;  counter         1    9[COMMON] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  2    2[COMMON] unsigned int 
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3597 ;;      Params:         4       0       0       0       0
  3598 ;;      Locals:         3       0       0       0       0
  3599 ;;      Temps:          1       0       0       0       0
  3600 ;;      Totals:         8       0       0       0       0
  3601 ;;Total ram usage:        8 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    1
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_sprintf
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           
  3612                           ;psect for function ___lwdiv
  3613  02FD                     ___lwdiv:
  3614  02FD                     l1269:	
  3615                           ;incstack = 0
  3616                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3617                           
  3618  02FD  01F7               	clrf	___lwdiv@quotient
  3619  02FE  01F8               	clrf	___lwdiv@quotient+1
  3620  02FF                     l1271:
  3621  02FF  0872               	movf	___lwdiv@divisor,w
  3622  0300  0473               	iorwf	___lwdiv@divisor+1,w
  3623  0301  1903               	btfsc	3,2
  3624  0302  2B04               	goto	u451
  3625  0303  2B05               	goto	u450
  3626  0304                     u451:
  3627  0304  2B3C               	goto	l1291
  3628  0305                     u450:
  3629  0305                     l1273:
  3630  0305  01F9               	clrf	___lwdiv@counter
  3631  0306  0AF9               	incf	___lwdiv@counter,f
  3632  0307  2B13               	goto	l1279
  3633  0308                     l1275:
  3634  0308  3001               	movlw	1
  3635  0309                     u465:
  3636  0309  1003               	clrc
  3637  030A  0DF2               	rlf	___lwdiv@divisor,f
  3638  030B  0DF3               	rlf	___lwdiv@divisor+1,f
  3639  030C  3EFF               	addlw	-1
  3640  030D  1D03               	skipz
  3641  030E  2B09               	goto	u465
  3642  030F                     l1277:
  3643  030F  3001               	movlw	1
  3644  0310  00F6               	movwf	??___lwdiv
  3645  0311  0876               	movf	??___lwdiv,w
  3646  0312  07F9               	addwf	___lwdiv@counter,f
  3647  0313                     l1279:
  3648  0313  1FF3               	btfss	___lwdiv@divisor+1,7
  3649  0314  2B16               	goto	u471
  3650  0315  2B17               	goto	u470
  3651  0316                     u471:
  3652  0316  2B08               	goto	l1275
  3653  0317                     u470:
  3654  0317                     l1281:
  3655  0317  3001               	movlw	1
  3656  0318                     u485:
  3657  0318  1003               	clrc
  3658  0319  0DF7               	rlf	___lwdiv@quotient,f
  3659  031A  0DF8               	rlf	___lwdiv@quotient+1,f
  3660  031B  3EFF               	addlw	-1
  3661  031C  1D03               	skipz
  3662  031D  2B18               	goto	u485
  3663  031E  0873               	movf	___lwdiv@divisor+1,w
  3664  031F  0275               	subwf	___lwdiv@dividend+1,w
  3665  0320  1D03               	skipz
  3666  0321  2B24               	goto	u495
  3667  0322  0872               	movf	___lwdiv@divisor,w
  3668  0323  0274               	subwf	___lwdiv@dividend,w
  3669  0324                     u495:
  3670  0324  1C03               	skipc
  3671  0325  2B27               	goto	u491
  3672  0326  2B28               	goto	u490
  3673  0327                     u491:
  3674  0327  2B2F               	goto	l1287
  3675  0328                     u490:
  3676  0328                     l1283:
  3677  0328  0872               	movf	___lwdiv@divisor,w
  3678  0329  02F4               	subwf	___lwdiv@dividend,f
  3679  032A  0873               	movf	___lwdiv@divisor+1,w
  3680  032B  1C03               	skipc
  3681  032C  03F5               	decf	___lwdiv@dividend+1,f
  3682  032D  02F5               	subwf	___lwdiv@dividend+1,f
  3683  032E                     l1285:
  3684  032E  1477               	bsf	___lwdiv@quotient,0
  3685  032F                     l1287:
  3686  032F  3001               	movlw	1
  3687  0330                     u505:
  3688  0330  1003               	clrc
  3689  0331  0CF3               	rrf	___lwdiv@divisor+1,f
  3690  0332  0CF2               	rrf	___lwdiv@divisor,f
  3691  0333  3EFF               	addlw	-1
  3692  0334  1D03               	skipz
  3693  0335  2B30               	goto	u505
  3694  0336                     l1289:
  3695  0336  3001               	movlw	1
  3696  0337  02F9               	subwf	___lwdiv@counter,f
  3697  0338  1D03               	btfss	3,2
  3698  0339  2B3B               	goto	u511
  3699  033A  2B3C               	goto	u510
  3700  033B                     u511:
  3701  033B  2B17               	goto	l1281
  3702  033C                     u510:
  3703  033C                     l1291:
  3704  033C  0878               	movf	___lwdiv@quotient+1,w
  3705  033D  00F3               	movwf	?___lwdiv+1
  3706  033E  0877               	movf	___lwdiv@quotient,w
  3707  033F  00F2               	movwf	?___lwdiv
  3708  0340                     l769:
  3709  0340  0008               	return
  3710  0341                     __end_of___lwdiv:
  3711                           
  3712                           	psect	text25
  3713  0483                     __ptext25:	
  3714 ;; *************** function ___bmul *****************
  3715 ;; Defined at:
  3716 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  multiplier      1    wreg     unsigned char 
  3719 ;;  multiplicand    1    2[COMMON] unsigned char 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  multiplier      1    5[COMMON] unsigned char 
  3722 ;;  product         1    4[COMMON] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  1    wreg      unsigned char 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3732 ;;      Params:         1       0       0       0       0
  3733 ;;      Locals:         2       0       0       0       0
  3734 ;;      Temps:          1       0       0       0       0
  3735 ;;      Totals:         4       0       0       0       0
  3736 ;;Total ram usage:        4 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    1
  3739 ;; This function calls:
  3740 ;;		Nothing
  3741 ;; This function is called by:
  3742 ;;		_sprintf
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           
  3747                           ;psect for function ___bmul
  3748  0483                     ___bmul:
  3749                           
  3750                           ;incstack = 0
  3751                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3752                           ;___bmul@multiplier stored from wreg
  3753  0483  00F5               	movwf	___bmul@multiplier
  3754  0484                     l1255:
  3755  0484  01F4               	clrf	___bmul@product
  3756  0485                     l1257:
  3757  0485  1C75               	btfss	___bmul@multiplier,0
  3758  0486  2C88               	goto	u431
  3759  0487  2C89               	goto	u430
  3760  0488                     u431:
  3761  0488  2C8D               	goto	l1261
  3762  0489                     u430:
  3763  0489                     l1259:
  3764  0489  0872               	movf	___bmul@multiplicand,w
  3765  048A  00F3               	movwf	??___bmul
  3766  048B  0873               	movf	??___bmul,w
  3767  048C  07F4               	addwf	___bmul@product,f
  3768  048D                     l1261:
  3769  048D  1003               	clrc
  3770  048E  0DF2               	rlf	___bmul@multiplicand,f
  3771  048F                     l1263:
  3772  048F  1003               	clrc
  3773  0490  0CF5               	rrf	___bmul@multiplier,f
  3774  0491  0875               	movf	___bmul@multiplier,w
  3775  0492  1D03               	btfss	3,2
  3776  0493  2C95               	goto	u441
  3777  0494  2C96               	goto	u440
  3778  0495                     u441:
  3779  0495  2C85               	goto	l1257
  3780  0496                     u440:
  3781  0496                     l1265:
  3782  0496  0874               	movf	___bmul@product,w
  3783  0497                     l387:
  3784  0497  0008               	return
  3785  0498                     __end_of___bmul:
  3786                           
  3787                           	psect	text26
  3788  0509                     __ptext26:	
  3789 ;; *************** function _ISR *****************
  3790 ;; Defined at:
  3791 ;;		line 78 in file "main_maestro.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		None
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3805 ;;      Params:         0       0       0       0       0
  3806 ;;      Locals:         0       0       0       0       0
  3807 ;;      Temps:          2       0       0       0       0
  3808 ;;      Totals:         2       0       0       0       0
  3809 ;;Total ram usage:        2 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; This function calls:
  3812 ;;		Nothing
  3813 ;; This function is called by:
  3814 ;;		Interrupt level 1
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function _ISR
  3820  0509                     _ISR:
  3821  0509                     i1l79:
  3822  0509  0871               	movf	??_ISR+1,w
  3823  050A  008A               	movwf	10
  3824  050B  0E70               	swapf	??_ISR,w
  3825  050C  0083               	movwf	3
  3826  050D  0EFE               	swapf	btemp,f
  3827  050E  0E7E               	swapf	btemp,w
  3828  050F  0009               	retfie
  3829  0510                     __end_of_ISR:
  3830  007E                     btemp	set	126	;btemp
  3831  007E                     wtemp0	set	126
  3832                           
  3833                           	psect	intentry
  3834  0004                     __pintentry:	
  3835                           ;incstack = 0
  3836                           ; Regs used in _ISR: []
  3837                           
  3838  0004                     interrupt_function:
  3839  007E                     saved_w	set	btemp
  3840  0004  00FE               	movwf	btemp
  3841  0005  0E03               	swapf	3,w
  3842  0006  00F0               	movwf	??_ISR
  3843  0007  080A               	movf	10,w
  3844  0008  00F1               	movwf	??_ISR+1
  3845  0009  120A  118A  2D09   	ljmp	_ISR
  3846                           
  3847                           	psect	config
  3848                           
  3849                           ;Config register CONFIG1 @ 0x2007
  3850                           ;	Oscillator Selection bits
  3851                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  3852                           ;	Watchdog Timer Enable bit
  3853                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3854                           ;	Power-up Timer Enable bit
  3855                           ;	PWRTE = OFF, PWRT disabled
  3856                           ;	RE3/MCLR pin function select bit
  3857                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3858                           ;	Code Protection bit
  3859                           ;	CP = OFF, Program memory code protection is disabled
  3860                           ;	Data Code Protection bit
  3861                           ;	CPD = OFF, Data memory code protection is disabled
  3862                           ;	Brown Out Reset Selection bits
  3863                           ;	BOREN = OFF, BOR disabled
  3864                           ;	Internal External Switchover bit
  3865                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3866                           ;	Fail-Safe Clock Monitor Enabled bit
  3867                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3868                           ;	Low Voltage Programming Enable bit
  3869                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3870                           ;	In-Circuit Debugger Mode bit
  3871                           ;	DEBUG = 0x1, unprogrammed default
  3872  2007                     	org	8199
  3873  2007  20D6               	dw	8406
  3874                           
  3875                           ;Config register CONFIG2 @ 0x2008
  3876                           ;	Brown-out Reset Selection bit
  3877                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3878                           ;	Flash Program Memory Self Write Enable bits
  3879                           ;	WRT = OFF, Write protection off
  3880  2008                     	org	8200
  3881  2008  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    10
    Data        0
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     25      53
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> data(BANK0[8]), STR_2(CODE[9]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> data(BANK0[8]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Write_USART_String->_Write_USART
    _Show_val_LCD->_Lcd_Set_Cursor
    _Show_val_LCD->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _sprintf->___lwdiv
    ___lwmod->___lwdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ADC_to_string
    _Show_val_LCD->_Lcd_Write_String
    _ADC_to_string->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4141
                                             22 BANK0      3     3      0
                      _ADC_to_string
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _Show_val_LCD
                        _Write_USART
                 _Write_USART_String
                              _setup
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     313
                    _USART_INTERRUPT
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_INTERRUPT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   4     2      2     218
                                              3 COMMON     4     2      2
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Show_val_LCD                                         0     0      0     706
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     322
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       4     3      1     384
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_to_string                                        3     3      0    1999
                                             19 BANK0      3     3      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1999
                                              6 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     362
                                              0 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     145
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_to_string
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _isdigit
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Show_val_LCD
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
   _Write_USART
   _Write_USART_String
     _Write_USART
   _setup
     _USART_INTERRUPT
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      41       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      35       5       66.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      41      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 08:20:52 2021

                           pc 0002                ___bmul@product 0074                   _SSPSTATbits 0094  
                          l90 03ED                            l93 04AB                            l96 04BD  
                          fsr 0004          __size_of_Write_USART 000C              ?_USART_INTERRUPT 0070  
                         l110 023C                           l102 0212                           l111 0242  
                         l103 026A                           l112 026B                           l104 0218  
                         l105 021E                           l106 0224                           l131 0456  
                         l107 022A                           l140 043C                           l108 0230  
                         l125 02B6                           l109 0236                           l134 04DC  
                         l222 0502                           l143 0482                           l128 0527  
                         l225 0508                           l218 0467                           l219 046C  
                         l236 04F1                           l228 0515                           l149 02FC  
                         l181 051B                           l190 04E8                           l184 0521  
                         l178 0501                           l187 04DE                           l196 0418  
                         l357 0182                           l387 0497                           l769 0340  
                         l779 037C                           l789 04CF                           _RC2 003A  
                         u410 04C6                           u411 04C5                           u420 04CC  
                         u421 04CB                           u430 0489                           u510 033C  
                         u431 0488                           u511 033B                           u440 0496  
                         u441 0495                           u505 0330                           u450 0305  
                         u451 0304                           _ISR 0509                           u470 0317  
                         u630 04E4                           u471 0316                           u631 04E3  
                         u800 0349                           u640 045F                           u465 0309  
                         u801 0348                           u641 045E                           u490 0328  
                         u491 0327                           u820 035B                           u900 02FC  
                         u485 0318                           u821 035A                           u901 02FB  
                         u830 0365                           u910 002C                           u495 0324  
                         u831 0364                           u815 034D                           u911 002B  
                         u920 0045                           u921 0044                           u850 0378  
                         u930 007B                           u851 0377                           u835 0361  
                         u931 007A                           u940 00AC                           u860 041F  
                         u780 0508                           u845 036C                           u941 00AB  
                         u861 041E                           u781 0507                           u950 00BA  
                         u870 0431                           u790 0418                           u951 00B9  
                         u871 0430                           u791 0417                           u960 00C0  
                         u880 02C6                           u961 00BF                           u970 00E1  
                         u890 02EA                           u971 00E0                           u980 00EC  
                         u981 00EB                           u990 00FC                           u991 00FB  
                         u975 00DD                           u995 00F8                           fsr0 0004  
                         indf 0000   __size_of_Write_USART_String 002B                          ?_ISR 0070  
                        l1251 04CE                          l1243 04BF                          l1261 048D  
                        l1245 04C0                          l1341 0211                          l1263 048F  
                        l1255 0484                          l1271 02FF                          l1247 04C6  
                        l1351 0516                          l1265 0496                          l1257 0485  
                        l1281 0317                          l1273 0305                          l1249 04CC  
                        l1337 04DE                          l1521 03EE                          l1353 0519  
                        l1345 0248                          l1361 045F                          l1513 0511  
                        l1259 0489                          l1283 0328                          l1275 0308  
                        l1291 033C                          l1339 04E4                          l1523 03F0  
                        l1355 04FA                          l1363 0461                          l1515 04E9  
                        l1285 032E                          l1277 030F                          l1269 02FD  
                        l1701 0033                          l1525 0401                          l1357 051C  
                        l1365 0463                          l1461 03B6                          l1517 04EE  
                        l1287 032F                          l1279 0313                          l1711 004B  
                        l1703 0038                          l1631 0523                          l1527 0405  
                        l1367 0466                          l1359 0458                          l1471 03C4  
                        l1463 03BC                          l1289 0336                          l1713 005C  
                        l1705 0039                          l1641 0453                          l1633 043E  
                        l1801 04B4                          l1481 03CB                          l1473 03C5  
                        l1465 03BF                          l1731 00AC                          l1723 007D  
                        l1715 0067                          l1707 0045                          l1635 0441  
                        l1651 047F                          l1643 046E                          l1491 03D2  
                        l1483 03CC                          l1475 03C6                          l1467 03C0  
                        l1459 0502                          l1811 0191                          l1803 0183  
                        l1661 0357                          l1653 0341                          l1741 00C4  
                        l1733 00B0                          l1725 009C                          l1901 0091  
                        l1717 006B                          l1709 0049                          l1637 0447  
                        l1645 0471                          l1493 03D5                          l1485 03CD  
                        l1477 03C7                          l1469 03C3                          l1821 01B4  
                        l1813 0196                          l1805 0188                          l1663 035B  
                        l1655 0349                          l1671 0378                          l1751 00EC  
                        l1735 00B5                          l1727 00A4                          l1719 007C  
                        l1639 044A                          l1647 0477                          l1495 03DA  
                        l1487 03CE                          l1479 03C8                          l1831 01E0  
                        l1823 01BA                          l1815 019E                          l1807 018B  
                        l1665 0365                          l1657 034C                          l1761 011F  
                        l1753 00FC                          l1745 00C6                          l1737 00BA  
                        l1729 00A8                          l1681 042B                          l1649 047A  
                        l1497 03DF                          l1489 03CF                          l1841 0201  
                        l1833 01E9                          l1825 01C4                          l1817 01A7  
                        l1809 018C                          l1667 036B                          l1659 0353  
                        l1763 0126                          l1771 0163                          l1755 00FD  
                        l1739 00C0                          l1683 0431                          l1675 041A  
                        l1691 02D8                          l1499 03E4                          l1843 0207  
                        l1835 01ED                          l1827 01CE                          l1819 01AA  
                        l1669 0372                          l1765 012B                          l1757 0111  
                        l1749 00E2                          l1773 016C                          l1685 0436  
                        l1677 041F                          l1693 02E0                          l1837 01F2  
                        l1829 01D1                          l1767 015B                          l1759 0117  
                        l1775 017E                          l1695 0021                          l1791 028A  
                        l1679 0424                          l1687 02B7                          l1839 01FB  
                        l1697 0026                          l1793 0290                          l1785 026C  
                        l1689 02BC                          l1699 002C                          l1795 04D0  
                        l1787 0272                          l1797 0498                          l1789 027B  
                        l1799 04AC                          l1899 0250                          STR_1 0397  
                        STR_2 03A8                          STR_3 03B1                          u1000 0111  
                        u1001 0110                          u1010 011F                          u1011 011E  
                        u1020 016C                          u1021 016B                          u1005 010D  
                        u1030 017E                          u1031 017D                          u1107 0294  
                        u1117 044E                          u1047 01B0                          u1057 01CA  
                        u1067 01D9                          u1077 047C                          u1087 0276  
                        u1097 0285                          _RCIF 0065                          i1l79 0509  
                        _TRMT 04C1                          _data 0034             ?_Lcd_Write_String 0075  
                        _cont 007A                          _main 0183                          btemp 007E  
                        start 000C            ??_Lcd_Write_String 0077               __end_of_Lcd_Cmd 0457  
           ___bmul@multiplier 0075                         ??_ISR 0070                         ?_main 0070  
                       _ANSEL 0188               __end_of___lwdiv 0341               __end_of___lwmod 037D  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009       __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085  
                       _TRISB 0086                         _TRISD 0088                         _TRISE 0089  
                       _TXREG 0019               __end_of_dpowers 0397               __end_of_initOsc 026C  
             __end_of_isdigit 04D0                         _setup 03B6                         pclath 000A  
             __end_of_spiInit 046D               __end_of_spiRead 04F2                         status 0003  
                       wtemp0 007E               __end_of_sprintf 0183                   ?_USART_Init 0070  
            __end_of_Lcd_Init 02B7              __end_of_Lcd_Port 0528               __initialization 000F  
                __end_of_main 0210                        ??_main 0052            __size_of_Lcd_Clear 000D  
                 initOsc@IRCF 0074           _USART_Init_BaudRate 0516                        ?_setup 0070  
                      _ANSELH 0189                     ??_Lcd_Cmd 0073                        _SPBRGH 009A  
     __size_of_Lcd_Write_Char 0016                        _TRISC2 043A                        _TRISC3 043B  
                      _TRISC5 043D                        _SSPCON 0014                        _SSPBUF 0013  
                      ___bmul 0483          ?_USART_Init_BaudRate 0070                     ??___lwdiv 0076  
                   ??___lwmod 0040                     ??_initOsc 0072                     ??_isdigit 0072  
                      saved_w 007E              __end_of_spiWrite 0516                     ??_spiInit 0075  
                   ??_spiRead 0072           __size_of_USART_Init 0008                     ??_sprintf 0045  
             Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076       __end_of__initialization 001A  
           __end_of_Lcd_Clear 04DD           ___bmul@multiplicand 0072                __pcstackCOMMON 0070  
       ??_USART_Init_BaudRate 0072                 __end_of_setup 03EE                _Lcd_Set_Cursor 0419  
                   ?_Lcd_Init 0070                     ?_Lcd_Port 0070                       ??_setup 0076  
                Write_USART@a 0072                    __pbssBANK0 0020                    _data_total 0020  
                  __pmaintext 0183                       ?___bmul 0072                 ??_Write_USART 0072  
                  __pintentry 0004       __size_of_spiReceiveWait 0007     __size_of_Lcd_Write_String 0046  
      __end_of_Lcd_Set_Cursor 043D        __size_of_ADC_to_string 0014    __end_of_Write_USART_String 0419  
                  ??_Lcd_Init 0076                    ??_Lcd_Port 0072      __size_of_USART_INTERRUPT 0006  
                     _SSPSTAT 0094                    __stringtab 037D                _Lcd_Write_Char 046D  
                     _Lcd_Cmd 043D                  ??_USART_Init 0072                     ?_spiWrite 0070  
             __size_of___bmul 0015                 ?_Show_val_LCD 0070                       ___lwdiv 02FD  
                     ___lwmod 0341               ?_Lcd_Set_Cursor 0076                       __ptext1 0510  
                     __ptext2 04E9                       __ptext3 0502                       __ptext4 03B6  
                     __ptext5 0457                       __ptext6 0210                       __ptext7 0516  
                     __ptext8 04FA                       __ptext9 051C                  __size_of_ISR 0007  
                     _dpowers 038D                       _initOsc 0210           __end_of_Write_USART 04E9  
                     _isdigit 04BE                       _spiInit 0457                       _spiRead 04E9  
          __end_of_USART_Init 0502                       _sprintf 001E                       clrloop0 04F3  
      __end_of_Lcd_Write_Char 0483          end_of_initialization 001A                 _ADC_to_string 0498  
              ??_Show_val_LCD 007A                     _RCSTAbits 0018                    ??_spiWrite 0072  
                   Lcd_Port@a 0072                     _PORTCbits 0007                     _PORTEbits 0009  
                   _TRISCbits 0087                   spiWrite@dat 0072               ?_Lcd_Write_Char 0070  
           Lcd_Write_String@a 0075             Lcd_Write_String@i 003C                ?_ADC_to_string 0070  
                   _TXSTAbits 0098             ??_USART_INTERRUPT 0072                     _Lcd_Clear 04D0  
              _spiReceiveWait 0502                __end_of___bmul 0498                   _Write_USART 04DD  
            _Lcd_Write_String 02B7           start_initialization 000F                   __end_of_ISR 0510  
           __size_of_Lcd_Init 004B                  _hola_esclavo 007B             __size_of_Lcd_Port 0006  
 __end_of_USART_Init_BaudRate 051C        __end_of_spiReceiveWait 0509                    ?_Lcd_Clear 0070  
                    ??___bmul 0073               Lcd_Write_Char@a 0074                   __pbssCOMMON 007A  
                   ___latbits 0002                 __pcstackBANK0 003C          __end_of_Show_val_LCD 04BE  
             ??_ADC_to_string 004F                      ?_Lcd_Cmd 0070                   sprintf@flag 0049  
          _Write_USART_String 03EE                   sprintf@prec 004D              ___lwdiv@dividend 0074  
             ?_spiReceiveWait 0070              ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0073  
                    ?___lwdiv 0072                      ?___lwmod 003C             __size_of_spiWrite 0006  
                   __pstrings 037D                      ?_initOsc 0070                      ?_isdigit 0070  
                    ?_spiInit 0072                      ?_spiRead 0070          ??_Write_USART_String 0075  
            ___lwdiv@quotient 0077                      ?_sprintf 0042                __size_of_setup 0038  
        spiInit@sTransmitEdge 0074             interrupt_function 0004                     clear_ram0 04F2  
                    _PIE1bits 008C            spiInit@sDataSample 0072                      Lcd_Cmd@a 0075  
                 ??_Lcd_Clear 0076                   __stringbase 038C              ??_Lcd_Write_Char 0073  
             _USART_INTERRUPT 051C                      _Lcd_Init 026C                      _Lcd_Port 0522  
    __end_of_Lcd_Write_String 02FD              __size_of_Lcd_Cmd 001A                  ?_Write_USART 0070  
            __size_of___lwdiv 0044              __size_of___lwmod 003C            __end_of__stringtab 038D  
                 _isdigit$989 0072         __size_of_Show_val_LCD 0012                    sprintf@val 004B  
            __size_of_initOsc 005C              __size_of_isdigit 0012               ___lwdiv@divisor 0072  
             ___lwdiv@counter 0079                      __ptext10 03EE                      __ptext11 04DD  
                    __ptext20 0498                      __ptext12 04AC                      __ptext21 001E  
                    __ptext13 02B7                      __ptext22 04BE                      __ptext14 046D  
                    __ptext23 0341                      __ptext15 0419                      __ptext24 02FD  
                    __ptext16 026C                      __ptext25 0483                      __ptext17 04D0  
                    __ptext26 0509                      __ptext18 043D                      __ptext19 0522  
            __size_of_spiInit 0016              __size_of_spiRead 0009              __size_of_sprintf 0165  
               __size_of_main 008D                      _spiWrite 0510                  _Show_val_LCD 04AC  
                spiInit@sType 0075             spiInit@sClockIdle 0073       __end_of_USART_INTERRUPT 0522  
                  _INTCONbits 000B           Write_USART_String@a 0073           Write_USART_String@i 0076  
                    isdigit@c 0073                      intlevel1 0000                     sprintf@ap 0048  
                   sprintf@sp 004A              ___lwmod@dividend 003E              ??_spiReceiveWait 0072  
                   stringcode 0387                    _OSCCONbits 008F  __size_of_USART_Init_BaudRate 0006  
          Lcd_Set_Cursor@temp 0079                      sprintf@c 004E                      sprintf@f 0042  
             ___lwmod@divisor 003C               ___lwmod@counter 0041                      stringdir 0387  
                    stringtab 037D         __end_of_ADC_to_string 04AC                    _USART_Init 04FA  
