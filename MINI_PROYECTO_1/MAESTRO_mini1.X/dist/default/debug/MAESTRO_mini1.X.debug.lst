

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 22 09:03:12 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0097                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0105                     	;# 
   134  0107                     	;# 
   135  0108                     	;# 
   136  0109                     	;# 
   137  010C                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0187                     	;# 
   144  0188                     	;# 
   145  0189                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0088                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  008F                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  0105                     	;# 
   290  0107                     	;# 
   291  0108                     	;# 
   292  0109                     	;# 
   293  010C                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  0185                     	;# 
   299  0187                     	;# 
   300  0188                     	;# 
   301  0189                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0008                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0088                     	;# 
   344  0089                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  008F                     	;# 
   349  0090                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  0105                     	;# 
   368  0107                     	;# 
   369  0108                     	;# 
   370  0109                     	;# 
   371  010C                     	;# 
   372  010C                     	;# 
   373  010D                     	;# 
   374  010E                     	;# 
   375  010F                     	;# 
   376  0185                     	;# 
   377  0187                     	;# 
   378  0188                     	;# 
   379  0189                     	;# 
   380  018C                     	;# 
   381  018D                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0088                     	;# 
   422  0089                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  008F                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0094                     	;# 
   434  0095                     	;# 
   435  0096                     	;# 
   436  0097                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009A                     	;# 
   440  009B                     	;# 
   441  009C                     	;# 
   442  009D                     	;# 
   443  009E                     	;# 
   444  009F                     	;# 
   445  0105                     	;# 
   446  0107                     	;# 
   447  0108                     	;# 
   448  0109                     	;# 
   449  010C                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  010F                     	;# 
   454  0185                     	;# 
   455  0187                     	;# 
   456  0188                     	;# 
   457  0189                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  000E                     	;# 
   476  000F                     	;# 
   477  0010                     	;# 
   478  0011                     	;# 
   479  0012                     	;# 
   480  0013                     	;# 
   481  0014                     	;# 
   482  0015                     	;# 
   483  0015                     	;# 
   484  0016                     	;# 
   485  0017                     	;# 
   486  0018                     	;# 
   487  0019                     	;# 
   488  001A                     	;# 
   489  001B                     	;# 
   490  001B                     	;# 
   491  001C                     	;# 
   492  001D                     	;# 
   493  001E                     	;# 
   494  001F                     	;# 
   495  0081                     	;# 
   496  0085                     	;# 
   497  0086                     	;# 
   498  0087                     	;# 
   499  0088                     	;# 
   500  0089                     	;# 
   501  008C                     	;# 
   502  008D                     	;# 
   503  008E                     	;# 
   504  008F                     	;# 
   505  0090                     	;# 
   506  0091                     	;# 
   507  0092                     	;# 
   508  0093                     	;# 
   509  0093                     	;# 
   510  0093                     	;# 
   511  0094                     	;# 
   512  0095                     	;# 
   513  0096                     	;# 
   514  0097                     	;# 
   515  0098                     	;# 
   516  0099                     	;# 
   517  009A                     	;# 
   518  009B                     	;# 
   519  009C                     	;# 
   520  009D                     	;# 
   521  009E                     	;# 
   522  009F                     	;# 
   523  0105                     	;# 
   524  0107                     	;# 
   525  0108                     	;# 
   526  0109                     	;# 
   527  010C                     	;# 
   528  010C                     	;# 
   529  010D                     	;# 
   530  010E                     	;# 
   531  010F                     	;# 
   532  0185                     	;# 
   533  0187                     	;# 
   534  0188                     	;# 
   535  0189                     	;# 
   536  018C                     	;# 
   537  018D                     	;# 
   538  0013                     _SSPBUF	set	19
   539  0014                     _SSPCON	set	20
   540  001A                     _RCREG	set	26
   541  0019                     _TXREG	set	25
   542  000B                     _INTCONbits	set	11
   543  0018                     _RCSTAbits	set	24
   544  0009                     _PORTEbits	set	9
   545  0007                     _PORTCbits	set	7
   546  0009                     _PORTE	set	9
   547  0008                     _PORTD	set	8
   548  0007                     _PORTC	set	7
   549  0005                     _PORTA	set	5
   550  0006                     _PORTB	set	6
   551  0065                     _RCIF	set	101
   552  0039                     _RC1	set	57
   553  0038                     _RC0	set	56
   554  003A                     _RC2	set	58
   555  0094                     _SSPSTATbits	set	148
   556  0094                     _SSPSTAT	set	148
   557  008C                     _PIE1bits	set	140
   558  0099                     _SPBRG	set	153
   559  009A                     _SPBRGH	set	154
   560  0098                     _TXSTAbits	set	152
   561  008F                     _OSCCONbits	set	143
   562  0089                     _TRISE	set	137
   563  0088                     _TRISD	set	136
   564  0087                     _TRISCbits	set	135
   565  0086                     _TRISB	set	134
   566  0085                     _TRISA	set	133
   567  043B                     _TRISC3	set	1083
   568  043D                     _TRISC5	set	1085
   569  04C1                     _TRMT	set	1217
   570  043A                     _TRISC2	set	1082
   571  0439                     _TRISC1	set	1081
   572  0438                     _TRISC0	set	1080
   573  0189                     _ANSELH	set	393
   574  0188                     _ANSEL	set	392
   575                           
   576                           	psect	strings
   577  01BA                     __pstrings:
   578  01BA                     stringtab:
   579  01BA                     __stringtab:
   580                           
   581                           ;	String table - string pointers are 1 byte each
   582  01BA  1BFF               	btfsc	btemp+1,7
   583  01BB  29C4               	ljmp	stringcode
   584  01BC  1383               	bcf	3,7
   585  01BD  187F               	btfsc	btemp+1,0
   586  01BE  1783               	bsf	3,7
   587  01BF  0800               	movf	0,w
   588  01C0  0A84               	incf	4,f
   589  01C1  1903               	skipnz
   590  01C2  0AFF               	incf	btemp+1,f
   591  01C3  0008               	return
   592  01C4                     stringcode:
   593  01C4                     stringdir:
   594  01C4  3001               	movlw	high stringdir
   595  01C5  008A               	movwf	10
   596  01C6  0804               	movf	4,w
   597  01C7  0A84               	incf	4,f
   598  01C8  0782               	addwf	2,f
   599  01C9                     __stringbase:
   600  01C9  3400               	retlw	0
   601  01CA                     __end_of__stringtab:
   602  01CA                     STR_1:
   603  01CA  3463               	retlw	99	;'c'
   604  01CB  346F               	retlw	111	;'o'
   605  01CC  346E               	retlw	110	;'n'
   606  01CD  3474               	retlw	116	;'t'
   607  01CE  3420               	retlw	32	;' '
   608  01CF  3420               	retlw	32	;' '
   609  01D0  3420               	retlw	32	;' '
   610  01D1  3453               	retlw	83	;'S'
   611  01D2  3432               	retlw	50	;'2'
   612  01D3  343A               	retlw	58	;':'
   613  01D4  3420               	retlw	32	;' '
   614  01D5  3420               	retlw	32	;' '
   615  01D6  3420               	retlw	32	;' '
   616  01D7  3453               	retlw	83	;'S'
   617  01D8  3433               	retlw	51	;'3'
   618  01D9  343A               	retlw	58	;':'
   619  01DA  3400               	retlw	0
   620  01DB                     STR_2:
   621  01DB  3463               	retlw	99	;'c'
   622  01DC  346F               	retlw	111	;'o'
   623  01DD  346E               	retlw	110	;'n'
   624  01DE  3474               	retlw	116	;'t'
   625  01DF  343A               	retlw	58	;':'
   626  01E0  3420               	retlw	32	;' '
   627  01E1  3420               	retlw	32	;' '
   628  01E2  340A               	retlw	10
   629  01E3  3400               	retlw	0
   630  01E4                     STR_3:
   631  01E4  3425               	retlw	37	;'%'
   632  01E5  342E               	retlw	46	;'.'
   633  01E6  3433               	retlw	51	;'3'
   634  01E7  3469               	retlw	105	;'i'
   635  01E8  3400               	retlw	0
   636                           
   637                           	psect	cinit
   638  000F                     start_initialization:	
   639                           ; #config settings
   640                           
   641  000F                     __initialization:
   642                           
   643                           ; Clear objects allocated to COMMON
   644  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   645  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   646                           
   647                           ; Clear objects allocated to BANK0
   648  0011  1383               	bcf	3,7	;select IRP bank0
   649  0012  3020               	movlw	low __pbssBANK0
   650  0013  0084               	movwf	4
   651  0014  303E               	movlw	low (__pbssBANK0+30)
   652  0015  120A  118A  2297  120A  118A  	fcall	clear_ram0
   653  001A                     end_of_initialization:	
   654                           ;End of C runtime variable initialization code
   655                           
   656  001A                     __end_of__initialization:
   657  001A  0183               	clrf	3
   658  001B  120A  118A  294F   	ljmp	_main	;jump to C main() function
   659                           
   660                           	psect	bssCOMMON
   661  007A                     __pbssCOMMON:
   662  007A                     _val_ADC:
   663  007A                     	ds	1
   664  007B                     _cont:
   665  007B                     	ds	1
   666                           
   667                           	psect	bssBANK0
   668  0020                     __pbssBANK0:
   669  0020                     _data_total:
   670  0020                     	ds	20
   671  0034                     _val_TEMP:
   672  0034                     	ds	1
   673  0035                     _hola_esclavo:
   674  0035                     	ds	1
   675  0036                     _data:
   676  0036                     	ds	8
   677                           
   678                           	psect	clrtext
   679  0297                     clear_ram0:	
   680                           ;	Called with FSR containing the base address, and
   681                           ;	W with the last address+1
   682                           
   683  0297  0064               	clrwdt	;clear the watchdog before getting into this loop
   684  0298                     clrloop0:
   685  0298  0180               	clrf	0	;clear RAM location pointed to by FSR
   686  0299  0A84               	incf	4,f	;increment pointer
   687  029A  0604               	xorwf	4,w	;XOR with final address
   688  029B  1903               	btfsc	3,2	;have we reached the end yet?
   689  029C  3400               	retlw	0	;all done for this memory range, return
   690  029D  0604               	xorwf	4,w	;XOR again to restore value
   691  029E  2A98               	goto	clrloop0	;do the next byte
   692                           
   693                           	psect	cstackCOMMON
   694  0070                     __pcstackCOMMON:
   695  0070                     ?_setup:
   696  0070                     ?_Lcd_Init:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_Lcd_Clear:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?_SPI_ADC:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     ?_Write_USART_String:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0070                     ?_initOsc:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0070                     ?_USART_Init_BaudRate:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0070                     ?_USART_Init:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0070                     ?_USART_INTERRUPT:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0070                     ?_spiWrite:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0070                     ?_spiRead:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0070                     ?_Lcd_Port:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0070                     ?_Lcd_Cmd:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0070                     ?_ISR:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0070                     ??_ISR:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0070                     ?_main:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0070                     ?_Lcd_Write_Char:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0070                     ?_Write_USART:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0070                     ?_spiReceiveWait:	
   748                           ; 1 bytes @ 0x0
   749                           
   750                           
   751                           ; 1 bytes @ 0x0
   752  0070                     	ds	2
   753  0072                     ??_initOsc:
   754  0072                     ??_USART_Init_BaudRate:	
   755                           ; 1 bytes @ 0x2
   756                           
   757  0072                     ??_USART_Init:	
   758                           ; 1 bytes @ 0x2
   759                           
   760  0072                     ??_USART_INTERRUPT:	
   761                           ; 1 bytes @ 0x2
   762                           
   763  0072                     ?_spiInit:	
   764                           ; 1 bytes @ 0x2
   765                           
   766  0072                     ??_spiWrite:	
   767                           ; 1 bytes @ 0x2
   768                           
   769  0072                     ??_spiRead:	
   770                           ; 1 bytes @ 0x2
   771                           
   772  0072                     ??_Lcd_Port:	
   773                           ; 1 bytes @ 0x2
   774                           
   775  0072                     ??_Write_USART:	
   776                           ; 1 bytes @ 0x2
   777                           
   778  0072                     ??_spiReceiveWait:	
   779                           ; 1 bytes @ 0x2
   780                           
   781  0072                     Lcd_Port@a:	
   782                           ; 1 bytes @ 0x2
   783                           
   784  0072                     Write_USART@a:	
   785                           ; 1 bytes @ 0x2
   786                           
   787  0072                     spiInit@sDataSample:	
   788                           ; 1 bytes @ 0x2
   789                           
   790  0072                     spiWrite@dat:	
   791                           ; 1 bytes @ 0x2
   792                           
   793                           
   794                           ; 1 bytes @ 0x2
   795  0072                     	ds	1
   796  0073                     ??_SPI_ADC:
   797  0073                     ??_Write_USART_String:	
   798                           ; 1 bytes @ 0x3
   799                           
   800  0073                     ??_Lcd_Cmd:	
   801                           ; 1 bytes @ 0x3
   802                           
   803  0073                     ??_Lcd_Write_Char:	
   804                           ; 1 bytes @ 0x3
   805                           
   806  0073                     spiInit@sClockIdle:	
   807                           ; 1 bytes @ 0x3
   808                           
   809                           
   810                           ; 1 bytes @ 0x3
   811  0073                     	ds	1
   812  0074                     initOsc@IRCF:
   813  0074                     Lcd_Write_Char@a:	
   814                           ; 1 bytes @ 0x4
   815                           
   816  0074                     Write_USART_String@a:	
   817                           ; 1 bytes @ 0x4
   818                           
   819  0074                     spiInit@sTransmitEdge:	
   820                           ; 1 bytes @ 0x4
   821                           
   822                           
   823                           ; 1 bytes @ 0x4
   824  0074                     	ds	1
   825  0075                     ?_Lcd_Write_String:
   826  0075                     ??_spiInit:	
   827                           ; 1 bytes @ 0x5
   828                           
   829  0075                     Lcd_Cmd@a:	
   830                           ; 1 bytes @ 0x5
   831                           
   832  0075                     Write_USART_String@i:	
   833                           ; 1 bytes @ 0x5
   834                           
   835  0075                     spiInit@sType:	
   836                           ; 1 bytes @ 0x5
   837                           
   838  0075                     Lcd_Write_String@a:	
   839                           ; 1 bytes @ 0x5
   840                           
   841                           
   842                           ; 2 bytes @ 0x5
   843  0075                     	ds	1
   844  0076                     ??_setup:
   845  0076                     ??_Lcd_Init:	
   846                           ; 1 bytes @ 0x6
   847                           
   848  0076                     ??_Lcd_Clear:	
   849                           ; 1 bytes @ 0x6
   850                           
   851  0076                     ?_Lcd_Set_Cursor:	
   852                           ; 1 bytes @ 0x6
   853                           
   854  0076                     Lcd_Set_Cursor@b:	
   855                           ; 1 bytes @ 0x6
   856                           
   857                           
   858                           ; 1 bytes @ 0x6
   859  0076                     	ds	1
   860  0077                     ??_Lcd_Set_Cursor:
   861  0077                     ??_Lcd_Write_String:	
   862                           ; 1 bytes @ 0x7
   863                           
   864                           
   865                           ; 1 bytes @ 0x7
   866  0077                     	ds	1
   867  0078                     Lcd_Set_Cursor@a:
   868                           
   869                           ; 1 bytes @ 0x8
   870  0078                     	ds	1
   871  0079                     Lcd_Set_Cursor@temp:
   872                           
   873                           ; 1 bytes @ 0x9
   874  0079                     	ds	1
   875  007A                     ??_main:
   876                           
   877                           	psect	cstackBANK0
   878  003E                     __pcstackBANK0:	
   879                           ; 1 bytes @ 0xA
   880                           
   881  003E                     Lcd_Write_String@i:
   882                           
   883                           ; 2 bytes @ 0x0
   884  003E                     	ds	2
   885                           
   886                           	psect	maintext
   887  014F                     __pmaintext:	
   888 ;;
   889 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   890 ;;
   891 ;; *************** function _main *****************
   892 ;; Defined at:
   893 ;;		line 89 in file "main_maestro.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;		None
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : B00/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   907 ;;      Params:         0       0       0       0       0
   908 ;;      Locals:         0       0       0       0       0
   909 ;;      Temps:          0       0       0       0       0
   910 ;;      Totals:         0       0       0       0       0
   911 ;;Total ram usage:        0 bytes
   912 ;; Hardware stack levels required when called:    4
   913 ;; This function calls:
   914 ;;		_Lcd_Clear
   915 ;;		_Lcd_Init
   916 ;;		_Lcd_Set_Cursor
   917 ;;		_Lcd_Write_String
   918 ;;		_SPI_ADC
   919 ;;		_Write_USART_String
   920 ;;		_setup
   921 ;; This function is called by:
   922 ;;		Startup code after reset
   923 ;; This function uses a non-reentrant model
   924 ;;
   925                           
   926                           
   927                           ;psect for function _main
   928  014F                     _main:
   929  014F                     l1311:	
   930                           ;incstack = 0
   931                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   932                           
   933                           
   934                           ;main_maestro.c: 90:     setup();
   935  014F  120A  118A  210B  120A  118A  	fcall	_setup
   936  0154                     l1313:
   937                           
   938                           ;main_maestro.c: 91:     PORTB = 0;
   939  0154  1283               	bcf	3,5	;RP0=0, select bank0
   940  0155  1303               	bcf	3,6	;RP1=0, select bank0
   941  0156  0186               	clrf	6	;volatile
   942  0157                     l1315:
   943                           
   944                           ;main_maestro.c: 92:     cont = 0;
   945  0157  01FB               	clrf	_cont
   946  0158                     l1317:
   947                           
   948                           ;main_maestro.c: 94:     Lcd_Init();
   949  0158  120A  118A  207A  120A  118A  	fcall	_Lcd_Init
   950  015D                     l1319:
   951                           
   952                           ;main_maestro.c: 95:     Lcd_Clear();
   953  015D  120A  118A  2275  120A  118A  	fcall	_Lcd_Clear
   954  0162                     l1321:
   955                           
   956                           ;main_maestro.c: 96:     Lcd_Set_Cursor(1,1);
   957  0162  01F6               	clrf	Lcd_Set_Cursor@b
   958  0163  0AF6               	incf	Lcd_Set_Cursor@b,f
   959  0164  3001               	movlw	1
   960  0165  120A  118A  21E9  120A  118A  	fcall	_Lcd_Set_Cursor
   961  016A                     l1323:
   962                           
   963                           ;main_maestro.c: 97:     Lcd_Write_String("cont   S2:   S3:");
   964  016A  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   965  016B  00F5               	movwf	Lcd_Write_String@a
   966  016C  3080               	movlw	128
   967  016D  00F6               	movwf	Lcd_Write_String@a+1
   968  016E  120A  118A  20C5  120A  118A  	fcall	_Lcd_Write_String
   969  0173                     l1325:
   970                           
   971                           ;main_maestro.c: 105:         SPI_ADC();
   972  0173  120A  118A  2186  120A  118A  	fcall	_SPI_ADC
   973  0178                     l1327:
   974                           
   975                           ;main_maestro.c: 108:         Write_USART_String("cont:  \n");
   976  0178  3012               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   977  0179  120A  118A  220D  120A  118A  	fcall	_Write_USART_String
   978  017E                     l1329:
   979                           
   980                           ;main_maestro.c: 109:         PORTB = val_ADC;
   981  017E  087A               	movf	_val_ADC,w
   982  017F  1283               	bcf	3,5	;RP0=0, select bank0
   983  0180  1303               	bcf	3,6	;RP1=0, select bank0
   984  0181  0086               	movwf	6	;volatile
   985  0182  2973               	goto	l1325
   986  0183  120A  118A  280C   	ljmp	start
   987  0186                     __end_of_main:
   988                           
   989                           	psect	text1
   990  010B                     __ptext1:	
   991 ;; *************** function _setup *****************
   992 ;; Defined at:
   993 ;;		line 126 in file "main_maestro.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;		None
   996 ;; Auto vars:     Size  Location     Type
   997 ;;		None
   998 ;; Return value:  Size  Location     Type
   999 ;;                  1    wreg      void 
  1000 ;; Registers used:
  1001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1007 ;;      Params:         0       0       0       0       0
  1008 ;;      Locals:         0       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0
  1010 ;;      Totals:         0       0       0       0       0
  1011 ;;Total ram usage:        0 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    2
  1014 ;; This function calls:
  1015 ;;		_USART_INTERRUPT
  1016 ;;		_USART_Init
  1017 ;;		_USART_Init_BaudRate
  1018 ;;		_initOsc
  1019 ;;		_spiInit
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           
  1026                           ;psect for function _setup
  1027  010B                     _setup:
  1028  010B                     l1077:	
  1029                           ;incstack = 0
  1030                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1031                           
  1032                           
  1033                           ;main_maestro.c: 127:     initOsc(7);
  1034  010B  3007               	movlw	7
  1035  010C  120A  118A  201E  120A  118A  	fcall	_initOsc
  1036  0111                     l1079:
  1037                           
  1038                           ;main_maestro.c: 128:     ANSEL = 0;
  1039  0111  1683               	bsf	3,5	;RP0=1, select bank3
  1040  0112  1703               	bsf	3,6	;RP1=1, select bank3
  1041  0113  0188               	clrf	8	;volatile
  1042  0114                     l1081:
  1043                           
  1044                           ;main_maestro.c: 129:     ANSELH = 0;
  1045  0114  0189               	clrf	9	;volatile
  1046  0115                     l1083:
  1047                           
  1048                           ;main_maestro.c: 131:     TRISA = 0;
  1049  0115  1683               	bsf	3,5	;RP0=1, select bank1
  1050  0116  1303               	bcf	3,6	;RP1=0, select bank1
  1051  0117  0185               	clrf	5	;volatile
  1052  0118                     l1085:
  1053                           
  1054                           ;main_maestro.c: 132:     TRISB = 0;
  1055  0118  0186               	clrf	6	;volatile
  1056  0119                     l1087:
  1057                           
  1058                           ;main_maestro.c: 133:     TRISCbits.TRISC6 = 0;
  1059  0119  1307               	bcf	7,6	;volatile
  1060  011A                     l1089:
  1061                           
  1062                           ;main_maestro.c: 134:     TRISCbits.TRISC7 = 1;
  1063  011A  1787               	bsf	7,7	;volatile
  1064  011B                     l1091:
  1065                           
  1066                           ;main_maestro.c: 136:     TRISD = 0;
  1067  011B  0188               	clrf	8	;volatile
  1068  011C                     l1093:
  1069                           
  1070                           ;main_maestro.c: 137:     TRISE = 0;
  1071  011C  0189               	clrf	9	;volatile
  1072  011D                     l1095:
  1073                           
  1074                           ;main_maestro.c: 139:     PORTA = 0;
  1075  011D  1283               	bcf	3,5	;RP0=0, select bank0
  1076  011E  1303               	bcf	3,6	;RP1=0, select bank0
  1077  011F  0185               	clrf	5	;volatile
  1078  0120                     l1097:
  1079                           
  1080                           ;main_maestro.c: 140:     PORTB = 0;
  1081  0120  0186               	clrf	6	;volatile
  1082  0121                     l1099:
  1083                           
  1084                           ;main_maestro.c: 141:     PORTC = 0;
  1085  0121  0187               	clrf	7	;volatile
  1086  0122                     l1101:
  1087                           
  1088                           ;main_maestro.c: 142:     PORTD = 0;
  1089  0122  0188               	clrf	8	;volatile
  1090  0123                     l1103:
  1091                           
  1092                           ;main_maestro.c: 143:     PORTE = 0;
  1093  0123  0189               	clrf	9	;volatile
  1094  0124                     l1105:
  1095                           
  1096                           ;main_maestro.c: 146:     TRISC0 = 0;
  1097  0124  1683               	bsf	3,5	;RP0=1, select bank1
  1098  0125  1303               	bcf	3,6	;RP1=0, select bank1
  1099  0126  1007               	bcf	7,0	;volatile
  1100  0127                     l1107:
  1101                           
  1102                           ;main_maestro.c: 147:     PORTCbits.RC0 = 1;
  1103  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1104  0128  1303               	bcf	3,6	;RP1=0, select bank0
  1105  0129  1407               	bsf	7,0	;volatile
  1106  012A                     l1109:
  1107                           
  1108                           ;main_maestro.c: 148:     TRISC1 = 0;
  1109  012A  1683               	bsf	3,5	;RP0=1, select bank1
  1110  012B  1303               	bcf	3,6	;RP1=0, select bank1
  1111  012C  1087               	bcf	7,1	;volatile
  1112  012D                     l1111:
  1113                           
  1114                           ;main_maestro.c: 149:     PORTCbits.RC1 = 1;
  1115  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1116  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1117  012F  1487               	bsf	7,1	;volatile
  1118  0130                     l1113:
  1119                           
  1120                           ;main_maestro.c: 150:     TRISC2 = 0;
  1121  0130  1683               	bsf	3,5	;RP0=1, select bank1
  1122  0131  1303               	bcf	3,6	;RP1=0, select bank1
  1123  0132  1107               	bcf	7,2	;volatile
  1124  0133                     l1115:
  1125                           
  1126                           ;main_maestro.c: 151:     PORTCbits.RC2 = 1;
  1127  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1128  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1129  0135  1507               	bsf	7,2	;volatile
  1130  0136                     l1117:
  1131                           
  1132                           ;main_maestro.c: 154:     USART_Init_BaudRate();
  1133  0136  120A  118A  22B5  120A  118A  	fcall	_USART_Init_BaudRate
  1134  013B                     l1119:
  1135                           
  1136                           ;main_maestro.c: 155:     USART_Init();
  1137  013B  120A  118A  229F  120A  118A  	fcall	_USART_Init
  1138  0140                     l1121:
  1139                           
  1140                           ;main_maestro.c: 156:     USART_INTERRUPT();
  1141  0140  120A  118A  22BB  120A  118A  	fcall	_USART_INTERRUPT
  1142  0145                     l1123:
  1143                           
  1144                           ;main_maestro.c: 158:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK
      +                          _IDLE_LOW, SPI_IDLE_2_ACTIVE);
  1145  0145  01F2               	clrf	spiInit@sDataSample
  1146  0146  01F3               	clrf	spiInit@sClockIdle
  1147  0147  01F4               	clrf	spiInit@sTransmitEdge
  1148  0148  3020               	movlw	32
  1149  0149  120A  118A  2249  120A  118A  	fcall	_spiInit
  1150  014E                     l98:
  1151  014E  0008               	return
  1152  014F                     __end_of_setup:
  1153                           
  1154                           	psect	text2
  1155  0249                     __ptext2:	
  1156 ;; *************** function _spiInit *****************
  1157 ;; Defined at:
  1158 ;;		line 14 in file "SPI.c"
  1159 ;; Parameters:    Size  Location     Type
  1160 ;;  sType           1    wreg     enum E1264
  1161 ;;  sDataSample     1    2[COMMON] enum E1272
  1162 ;;  sClockIdle      1    3[COMMON] enum E1276
  1163 ;;  sTransmitEdg    1    4[COMMON] enum E1280
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  sType           1    5[COMMON] enum E1264
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         3       0       0       0       0
  1176 ;;      Locals:         1       0       0       0       0
  1177 ;;      Temps:          0       0       0       0       0
  1178 ;;      Totals:         4       0       0       0       0
  1179 ;;Total ram usage:        4 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; Hardware stack levels required when called:    1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_setup
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           
  1190                           ;psect for function _spiInit
  1191  0249                     _spiInit:
  1192                           
  1193                           ;incstack = 0
  1194                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1195                           ;spiInit@sType stored from wreg
  1196  0249  00F5               	movwf	spiInit@sType
  1197  024A                     l1039:
  1198                           
  1199                           ;SPI.c: 14: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 15: {;SPI.c: 16:     TRISC5 = 0;
  1200  024A  1683               	bsf	3,5	;RP0=1, select bank1
  1201  024B  1303               	bcf	3,6	;RP1=0, select bank1
  1202  024C  1287               	bcf	7,5	;volatile
  1203                           
  1204                           ;SPI.c: 17:     if(sType & 0b00000100)
  1205  024D  1D75               	btfss	spiInit@sType,2
  1206  024E  2A50               	goto	u121
  1207  024F  2A51               	goto	u120
  1208  0250                     u121:
  1209  0250  2A55               	goto	l1045
  1210  0251                     u120:
  1211  0251                     l1041:
  1212                           
  1213                           ;SPI.c: 18:     {;SPI.c: 19:         SSPSTAT = sTransmitEdge;
  1214  0251  0874               	movf	spiInit@sTransmitEdge,w
  1215  0252  0094               	movwf	20	;volatile
  1216  0253                     l1043:
  1217                           
  1218                           ;SPI.c: 20:         TRISC3 = 1;
  1219  0253  1587               	bsf	7,3	;volatile
  1220                           
  1221                           ;SPI.c: 21:     }
  1222  0254  2A59               	goto	l235
  1223  0255                     l1045:
  1224                           
  1225                           ;SPI.c: 23:     {;SPI.c: 24:         SSPSTAT = sDataSample | sTransmitEdge;
  1226  0255  0872               	movf	spiInit@sDataSample,w
  1227  0256  0474               	iorwf	spiInit@sTransmitEdge,w
  1228  0257  0094               	movwf	20	;volatile
  1229  0258                     l1047:
  1230                           
  1231                           ;SPI.c: 25:         TRISC3 = 0;
  1232  0258  1187               	bcf	7,3	;volatile
  1233  0259                     l235:	
  1234                           ;SPI.c: 26:     }
  1235                           
  1236                           
  1237                           ;SPI.c: 28:     SSPCON = sType | sClockIdle;
  1238  0259  0875               	movf	spiInit@sType,w
  1239  025A  0473               	iorwf	spiInit@sClockIdle,w
  1240  025B  1283               	bcf	3,5	;RP0=0, select bank0
  1241  025C  1303               	bcf	3,6	;RP1=0, select bank0
  1242  025D  0094               	movwf	20	;volatile
  1243  025E                     l236:
  1244  025E  0008               	return
  1245  025F                     __end_of_spiInit:
  1246                           
  1247                           	psect	text3
  1248  001E                     __ptext3:	
  1249 ;; *************** function _initOsc *****************
  1250 ;; Defined at:
  1251 ;;		line 3 in file "Oscilador.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;  IRCF            1    wreg     unsigned char 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;  IRCF            1    4[COMMON] unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1265 ;;      Params:         0       0       0       0       0
  1266 ;;      Locals:         1       0       0       0       0
  1267 ;;      Temps:          2       0       0       0       0
  1268 ;;      Totals:         3       0       0       0       0
  1269 ;;Total ram usage:        3 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    1
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_setup
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           
  1280                           ;psect for function _initOsc
  1281  001E                     _initOsc:
  1282                           
  1283                           ;incstack = 0
  1284                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
  1285                           ;initOsc@IRCF stored from wreg
  1286  001E  00F4               	movwf	initOsc@IRCF
  1287  001F                     l795:
  1288                           
  1289                           ;Oscilador.c: 5:     switch(IRCF){
  1290  001F  2856               	goto	l799
  1291  0020                     l119:	
  1292                           ;Oscilador.c: 6:         case 0:
  1293                           
  1294                           
  1295                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
  1296  0020  1683               	bsf	3,5	;RP0=1, select bank1
  1297  0021  1303               	bcf	3,6	;RP1=0, select bank1
  1298  0022  130F               	bcf	15,6	;volatile
  1299                           
  1300                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
  1301  0023  128F               	bcf	15,5	;volatile
  1302                           
  1303                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
  1304  0024  120F               	bcf	15,4	;volatile
  1305                           
  1306                           ;Oscilador.c: 10:             break;
  1307  0025  2878               	goto	l120
  1308  0026                     l121:	
  1309                           ;Oscilador.c: 11:          case 1:
  1310                           
  1311                           
  1312                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1313  0026  1683               	bsf	3,5	;RP0=1, select bank1
  1314  0027  1303               	bcf	3,6	;RP1=0, select bank1
  1315  0028  130F               	bcf	15,6	;volatile
  1316                           
  1317                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1318  0029  128F               	bcf	15,5	;volatile
  1319                           
  1320                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1321  002A  160F               	bsf	15,4	;volatile
  1322                           
  1323                           ;Oscilador.c: 15:             break;
  1324  002B  2878               	goto	l120
  1325  002C                     l122:	
  1326                           ;Oscilador.c: 16:         case 2:
  1327                           
  1328                           
  1329                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1330  002C  1683               	bsf	3,5	;RP0=1, select bank1
  1331  002D  1303               	bcf	3,6	;RP1=0, select bank1
  1332  002E  130F               	bcf	15,6	;volatile
  1333                           
  1334                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1335  002F  168F               	bsf	15,5	;volatile
  1336                           
  1337                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1338  0030  120F               	bcf	15,4	;volatile
  1339                           
  1340                           ;Oscilador.c: 20:             break;
  1341  0031  2878               	goto	l120
  1342  0032                     l123:	
  1343                           ;Oscilador.c: 21:         case 3:
  1344                           
  1345                           
  1346                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1347  0032  1683               	bsf	3,5	;RP0=1, select bank1
  1348  0033  1303               	bcf	3,6	;RP1=0, select bank1
  1349  0034  130F               	bcf	15,6	;volatile
  1350                           
  1351                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1352  0035  168F               	bsf	15,5	;volatile
  1353                           
  1354                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1355  0036  160F               	bsf	15,4	;volatile
  1356                           
  1357                           ;Oscilador.c: 25:             break;
  1358  0037  2878               	goto	l120
  1359  0038                     l124:	
  1360                           ;Oscilador.c: 26:         case 4:
  1361                           
  1362                           
  1363                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1364  0038  1683               	bsf	3,5	;RP0=1, select bank1
  1365  0039  1303               	bcf	3,6	;RP1=0, select bank1
  1366  003A  170F               	bsf	15,6	;volatile
  1367                           
  1368                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1369  003B  128F               	bcf	15,5	;volatile
  1370                           
  1371                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1372  003C  120F               	bcf	15,4	;volatile
  1373                           
  1374                           ;Oscilador.c: 30:             break;
  1375  003D  2878               	goto	l120
  1376  003E                     l125:	
  1377                           ;Oscilador.c: 31:         case 5:
  1378                           
  1379                           
  1380                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1381  003E  1683               	bsf	3,5	;RP0=1, select bank1
  1382  003F  1303               	bcf	3,6	;RP1=0, select bank1
  1383  0040  170F               	bsf	15,6	;volatile
  1384                           
  1385                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1386  0041  128F               	bcf	15,5	;volatile
  1387                           
  1388                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1389  0042  160F               	bsf	15,4	;volatile
  1390                           
  1391                           ;Oscilador.c: 35:             break;
  1392  0043  2878               	goto	l120
  1393  0044                     l126:	
  1394                           ;Oscilador.c: 36:         case 6:
  1395                           
  1396                           
  1397                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1398  0044  1683               	bsf	3,5	;RP0=1, select bank1
  1399  0045  1303               	bcf	3,6	;RP1=0, select bank1
  1400  0046  170F               	bsf	15,6	;volatile
  1401                           
  1402                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1403  0047  168F               	bsf	15,5	;volatile
  1404                           
  1405                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1406  0048  120F               	bcf	15,4	;volatile
  1407                           
  1408                           ;Oscilador.c: 40:             break;
  1409  0049  2878               	goto	l120
  1410  004A                     l127:	
  1411                           ;Oscilador.c: 41:         case 7:
  1412                           
  1413                           
  1414                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1415  004A  1683               	bsf	3,5	;RP0=1, select bank1
  1416  004B  1303               	bcf	3,6	;RP1=0, select bank1
  1417  004C  170F               	bsf	15,6	;volatile
  1418                           
  1419                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1420  004D  168F               	bsf	15,5	;volatile
  1421                           
  1422                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1423  004E  160F               	bsf	15,4	;volatile
  1424                           
  1425                           ;Oscilador.c: 45:             break;
  1426  004F  2878               	goto	l120
  1427  0050                     l128:	
  1428                           ;Oscilador.c: 46:         default:
  1429                           
  1430                           
  1431                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1432  0050  1683               	bsf	3,5	;RP0=1, select bank1
  1433  0051  1303               	bcf	3,6	;RP1=0, select bank1
  1434  0052  170F               	bsf	15,6	;volatile
  1435                           
  1436                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1437  0053  168F               	bsf	15,5	;volatile
  1438                           
  1439                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1440  0054  120F               	bcf	15,4	;volatile
  1441                           
  1442                           ;Oscilador.c: 50:             break;
  1443  0055  2878               	goto	l120
  1444  0056                     l799:
  1445  0056  0874               	movf	initOsc@IRCF,w
  1446  0057  00F2               	movwf	??_initOsc
  1447  0058  01F3               	clrf	??_initOsc+1
  1448                           
  1449                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1450                           ; Switch size 1, requested type "simple"
  1451                           ; Number of cases is 1, Range of values is 0 to 0
  1452                           ; switch strategies available:
  1453                           ; Name         Instructions Cycles
  1454                           ; simple_byte            4     3 (average)
  1455                           ; direct_byte           11     8 (fixed)
  1456                           ; jumptable            260     6 (fixed)
  1457                           ;	Chosen strategy is simple_byte
  1458  0059  0873               	movf	??_initOsc+1,w
  1459  005A  3A00               	xorlw	0	; case 0
  1460  005B  1903               	skipnz
  1461  005C  285E               	goto	l1359
  1462  005D  2850               	goto	l128
  1463  005E                     l1359:
  1464                           
  1465                           ; Switch size 1, requested type "simple"
  1466                           ; Number of cases is 8, Range of values is 0 to 7
  1467                           ; switch strategies available:
  1468                           ; Name         Instructions Cycles
  1469                           ; simple_byte           25    13 (average)
  1470                           ; direct_byte           32     8 (fixed)
  1471                           ; jumptable            260     6 (fixed)
  1472                           ;	Chosen strategy is simple_byte
  1473  005E  0872               	movf	??_initOsc,w
  1474  005F  3A00               	xorlw	0	; case 0
  1475  0060  1903               	skipnz
  1476  0061  2820               	goto	l119
  1477  0062  3A01               	xorlw	1	; case 1
  1478  0063  1903               	skipnz
  1479  0064  2826               	goto	l121
  1480  0065  3A03               	xorlw	3	; case 2
  1481  0066  1903               	skipnz
  1482  0067  282C               	goto	l122
  1483  0068  3A01               	xorlw	1	; case 3
  1484  0069  1903               	skipnz
  1485  006A  2832               	goto	l123
  1486  006B  3A07               	xorlw	7	; case 4
  1487  006C  1903               	skipnz
  1488  006D  2838               	goto	l124
  1489  006E  3A01               	xorlw	1	; case 5
  1490  006F  1903               	skipnz
  1491  0070  283E               	goto	l125
  1492  0071  3A03               	xorlw	3	; case 6
  1493  0072  1903               	skipnz
  1494  0073  2844               	goto	l126
  1495  0074  3A01               	xorlw	1	; case 7
  1496  0075  1903               	skipnz
  1497  0076  284A               	goto	l127
  1498  0077  2850               	goto	l128
  1499  0078                     l120:
  1500                           
  1501                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1502  0078  140F               	bsf	15,0	;volatile
  1503  0079                     l129:
  1504  0079  0008               	return
  1505  007A                     __end_of_initOsc:
  1506                           
  1507                           	psect	text4
  1508  02B5                     __ptext4:	
  1509 ;; *************** function _USART_Init_BaudRate *****************
  1510 ;; Defined at:
  1511 ;;		line 19 in file "USART.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;		None
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1525 ;;      Params:         0       0       0       0       0
  1526 ;;      Locals:         0       0       0       0       0
  1527 ;;      Temps:          0       0       0       0       0
  1528 ;;      Totals:         0       0       0       0       0
  1529 ;;Total ram usage:        0 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    1
  1532 ;; This function calls:
  1533 ;;		Nothing
  1534 ;; This function is called by:
  1535 ;;		_setup
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           
  1540                           ;psect for function _USART_Init_BaudRate
  1541  02B5                     _USART_Init_BaudRate:
  1542  02B5                     l805:	
  1543                           ;incstack = 0
  1544                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1545                           
  1546                           
  1547                           ;USART.c: 20:     SPBRGH = 0;
  1548  02B5  1683               	bsf	3,5	;RP0=1, select bank1
  1549  02B6  1303               	bcf	3,6	;RP1=0, select bank1
  1550  02B7  019A               	clrf	26	;volatile
  1551  02B8                     l807:
  1552                           
  1553                           ;USART.c: 21:     SPBRG = 12;
  1554  02B8  300C               	movlw	12
  1555  02B9  0099               	movwf	25	;volatile
  1556  02BA                     l198:
  1557  02BA  0008               	return
  1558  02BB                     __end_of_USART_Init_BaudRate:
  1559                           
  1560                           	psect	text5
  1561  029F                     __ptext5:	
  1562 ;; *************** function _USART_Init *****************
  1563 ;; Defined at:
  1564 ;;		line 8 in file "USART.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		None
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1578 ;;      Params:         0       0       0       0       0
  1579 ;;      Locals:         0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0
  1581 ;;      Totals:         0       0       0       0       0
  1582 ;;Total ram usage:        0 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    1
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_setup
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           
  1593                           ;psect for function _USART_Init
  1594  029F                     _USART_Init:
  1595  029F                     l809:	
  1596                           ;incstack = 0
  1597                           ; Regs used in _USART_Init: []
  1598                           
  1599                           
  1600                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1601  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1602  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1603  02A1  1798               	bsf	24,7	;volatile
  1604                           
  1605                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1606  02A2  1683               	bsf	3,5	;RP0=1, select bank1
  1607  02A3  1303               	bcf	3,6	;RP1=0, select bank1
  1608  02A4  1218               	bcf	24,4	;volatile
  1609                           
  1610                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1611  02A5  1698               	bsf	24,5	;volatile
  1612  02A6                     l195:
  1613  02A6  0008               	return
  1614  02A7                     __end_of_USART_Init:
  1615                           
  1616                           	psect	text6
  1617  02BB                     __ptext6:	
  1618 ;; *************** function _USART_INTERRUPT *****************
  1619 ;; Defined at:
  1620 ;;		line 24 in file "USART.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  1    wreg      void 
  1627 ;; Registers used:
  1628 ;;		None
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1634 ;;      Params:         0       0       0       0       0
  1635 ;;      Locals:         0       0       0       0       0
  1636 ;;      Temps:          0       0       0       0       0
  1637 ;;      Totals:         0       0       0       0       0
  1638 ;;Total ram usage:        0 bytes
  1639 ;; Hardware stack levels used:    1
  1640 ;; Hardware stack levels required when called:    1
  1641 ;; This function calls:
  1642 ;;		Nothing
  1643 ;; This function is called by:
  1644 ;;		_setup
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           
  1649                           ;psect for function _USART_INTERRUPT
  1650  02BB                     _USART_INTERRUPT:
  1651  02BB                     l811:	
  1652                           ;incstack = 0
  1653                           ; Regs used in _USART_INTERRUPT: []
  1654                           
  1655                           
  1656                           ;USART.c: 25:     INTCONbits.GIE = 1;
  1657  02BB  178B               	bsf	11,7	;volatile
  1658                           
  1659                           ;USART.c: 26:     INTCONbits.PEIE = 1;
  1660  02BC  170B               	bsf	11,6	;volatile
  1661                           
  1662                           ;USART.c: 27:     PIE1bits.RCIE = 1;
  1663  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  1664  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  1665  02BF  168C               	bsf	12,5	;volatile
  1666  02C0                     l201:
  1667  02C0  0008               	return
  1668  02C1                     __end_of_USART_INTERRUPT:
  1669                           
  1670                           	psect	text7
  1671  020D                     __ptext7:	
  1672 ;; *************** function _Write_USART_String *****************
  1673 ;; Defined at:
  1674 ;;		line 37 in file "USART.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  a               1    wreg     PTR unsigned char 
  1677 ;;		 -> STR_2(9), 
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;  a               1    4[COMMON] PTR unsigned char 
  1680 ;;		 -> STR_2(9), 
  1681 ;;  i               1    5[COMMON] unsigned char 
  1682 ;; Return value:  Size  Location     Type
  1683 ;;                  1    wreg      void 
  1684 ;; Registers used:
  1685 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1686 ;; Tracked objects:
  1687 ;;		On entry : 0/0
  1688 ;;		On exit  : 0/0
  1689 ;;		Unchanged: 0/0
  1690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1691 ;;      Params:         0       0       0       0       0
  1692 ;;      Locals:         2       0       0       0       0
  1693 ;;      Temps:          1       0       0       0       0
  1694 ;;      Totals:         3       0       0       0       0
  1695 ;;Total ram usage:        3 bytes
  1696 ;; Hardware stack levels used:    1
  1697 ;; Hardware stack levels required when called:    2
  1698 ;; This function calls:
  1699 ;;		_Write_USART
  1700 ;; This function is called by:
  1701 ;;		_main
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           
  1706                           ;psect for function _Write_USART_String
  1707  020D                     _Write_USART_String:
  1708                           
  1709                           ;incstack = 0
  1710                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1711                           ;Write_USART_String@a stored from wreg
  1712  020D  00F4               	movwf	Write_USART_String@a
  1713  020E                     l1167:
  1714                           
  1715                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  1716  020E  01F5               	clrf	Write_USART_String@i
  1717  020F  2A21               	goto	l1173
  1718  0210                     l1169:
  1719                           
  1720                           ;USART.c: 40:         Write_USART(a[i]);
  1721  0210  0875               	movf	Write_USART_String@i,w
  1722  0211  0774               	addwf	Write_USART_String@a,w
  1723  0212  0084               	movwf	4
  1724  0213  120A  118A  21C4  120A  118A  	fcall	stringdir
  1725  0218  120A  118A  2282  120A  118A  	fcall	_Write_USART
  1726  021D                     l1171:
  1727                           
  1728                           ;USART.c: 41:     }
  1729  021D  3001               	movlw	1
  1730  021E  00F3               	movwf	??_Write_USART_String
  1731  021F  0873               	movf	??_Write_USART_String,w
  1732  0220  07F5               	addwf	Write_USART_String@i,f
  1733  0221                     l1173:
  1734  0221  0875               	movf	Write_USART_String@i,w
  1735  0222  0774               	addwf	Write_USART_String@a,w
  1736  0223  0084               	movwf	4
  1737  0224  120A  118A  21C4  120A  118A  	fcall	stringdir
  1738  0229  3A00               	xorlw	0
  1739  022A  1D03               	skipz
  1740  022B  2A2D               	goto	u181
  1741  022C  2A2E               	goto	u180
  1742  022D                     u181:
  1743  022D  2A10               	goto	l1169
  1744  022E                     u180:
  1745  022E                     l213:
  1746  022E  0008               	return
  1747  022F                     __end_of_Write_USART_String:
  1748                           
  1749                           	psect	text8
  1750  0282                     __ptext8:	
  1751 ;; *************** function _Write_USART *****************
  1752 ;; Defined at:
  1753 ;;		line 33 in file "USART.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;  a               1    wreg     unsigned char 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  a               1    2[COMMON] unsigned char 
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1767 ;;      Params:         0       0       0       0       0
  1768 ;;      Locals:         1       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0
  1770 ;;      Totals:         1       0       0       0       0
  1771 ;;Total ram usage:        1 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    1
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_Write_USART_String
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function _Write_USART
  1783  0282                     _Write_USART:
  1784                           
  1785                           ;incstack = 0
  1786                           ; Regs used in _Write_USART: [wreg]
  1787                           ;Write_USART@a stored from wreg
  1788  0282  00F2               	movwf	Write_USART@a
  1789  0283                     l851:
  1790  0283                     l204:	
  1791                           ;USART.c: 34:     while(!TRMT);
  1792                           
  1793  0283  1683               	bsf	3,5	;RP0=1, select bank1
  1794  0284  1303               	bcf	3,6	;RP1=0, select bank1
  1795  0285  1C98               	btfss	24,1	;volatile
  1796  0286  2A88               	goto	u31
  1797  0287  2A89               	goto	u30
  1798  0288                     u31:
  1799  0288  2A83               	goto	l204
  1800  0289                     u30:
  1801  0289                     l853:
  1802                           
  1803                           ;USART.c: 35:     TXREG=a;
  1804  0289  0872               	movf	Write_USART@a,w
  1805  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1806  028B  1303               	bcf	3,6	;RP1=0, select bank0
  1807  028C  0099               	movwf	25	;volatile
  1808  028D                     l207:
  1809  028D  0008               	return
  1810  028E                     __end_of_Write_USART:
  1811                           
  1812                           	psect	text9
  1813  0186                     __ptext9:	
  1814 ;; *************** function _SPI_ADC *****************
  1815 ;; Defined at:
  1816 ;;		line 203 in file "main_maestro.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, status,2, status,0, pclath, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1830 ;;      Params:         0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0
  1832 ;;      Temps:          3       0       0       0       0
  1833 ;;      Totals:         3       0       0       0       0
  1834 ;;Total ram usage:        3 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    3
  1837 ;; This function calls:
  1838 ;;		_spiRead
  1839 ;;		_spiWrite
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           
  1846                           ;psect for function _SPI_ADC
  1847  0186                     _SPI_ADC:
  1848  0186                     l1157:	
  1849                           ;incstack = 0
  1850                           ; Regs used in _SPI_ADC: [wreg+status,2+status,0+pclath+cstack]
  1851                           
  1852                           
  1853                           ;main_maestro.c: 204:     RC0 = 0;
  1854  0186  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0187  1303               	bcf	3,6	;RP1=0, select bank0
  1856  0188  1007               	bcf	7,0	;volatile
  1857  0189                     l1159:
  1858                           
  1859                           ;main_maestro.c: 205:    _delay((unsigned long)((1)*(8000000/4000.0)));
  1860  0189  3003               	movlw	3
  1861  018A  00F4               	movwf	??_SPI_ADC+1
  1862  018B  3097               	movlw	151
  1863  018C  00F3               	movwf	??_SPI_ADC
  1864  018D                     u247:
  1865  018D  0BF3               	decfsz	??_SPI_ADC,f
  1866  018E  298D               	goto	u247
  1867  018F  0BF4               	decfsz	??_SPI_ADC+1,f
  1868  0190  298D               	goto	u247
  1869  0191  2992               	nop2
  1870  0192                     l1161:
  1871                           
  1872                           ;main_maestro.c: 207:    spiWrite(hola_esclavo);
  1873  0192  3000               	movlw	0
  1874  0193  120A  118A  22C1  120A  118A  	fcall	_spiWrite
  1875  0198                     l1163:
  1876                           
  1877                           ;main_maestro.c: 208:    val_ADC = spiRead();
  1878  0198  120A  118A  228E  120A  118A  	fcall	_spiRead
  1879  019D  00F3               	movwf	??_SPI_ADC
  1880  019E  0873               	movf	??_SPI_ADC,w
  1881  019F  00FA               	movwf	_val_ADC
  1882                           
  1883                           ;main_maestro.c: 210:    _delay((unsigned long)((1)*(8000000/4000.0)));
  1884  01A0  3003               	movlw	3
  1885  01A1  00F4               	movwf	??_SPI_ADC+1
  1886  01A2  3097               	movlw	151
  1887  01A3  00F3               	movwf	??_SPI_ADC
  1888  01A4                     u257:
  1889  01A4  0BF3               	decfsz	??_SPI_ADC,f
  1890  01A5  29A4               	goto	u257
  1891  01A6  0BF4               	decfsz	??_SPI_ADC+1,f
  1892  01A7  29A4               	goto	u257
  1893  01A8  29A9               	nop2
  1894  01A9                     l1165:
  1895                           
  1896                           ;main_maestro.c: 211:    RC0 = 1;
  1897  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1898  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1899  01AB  1407               	bsf	7,0	;volatile
  1900                           
  1901                           ;main_maestro.c: 213:    _delay((unsigned long)((100)*(8000000/4000.0)));
  1902  01AC  3002               	movlw	2
  1903  01AD  00F5               	movwf	??_SPI_ADC+2
  1904  01AE  3004               	movlw	4
  1905  01AF  00F4               	movwf	??_SPI_ADC+1
  1906  01B0  30BA               	movlw	186
  1907  01B1  00F3               	movwf	??_SPI_ADC
  1908  01B2                     u267:
  1909  01B2  0BF3               	decfsz	??_SPI_ADC,f
  1910  01B3  29B2               	goto	u267
  1911  01B4  0BF4               	decfsz	??_SPI_ADC+1,f
  1912  01B5  29B2               	goto	u267
  1913  01B6  0BF5               	decfsz	??_SPI_ADC+2,f
  1914  01B7  29B2               	goto	u267
  1915  01B8  0000               	nop
  1916  01B9                     l110:
  1917  01B9  0008               	return
  1918  01BA                     __end_of_SPI_ADC:
  1919                           
  1920                           	psect	text10
  1921  02C1                     __ptext10:	
  1922 ;; *************** function _spiWrite *****************
  1923 ;; Defined at:
  1924 ;;		line 36 in file "SPI.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  dat             1    wreg     unsigned char 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  dat             1    2[COMMON] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1938 ;;      Params:         0       0       0       0       0
  1939 ;;      Locals:         1       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0
  1941 ;;      Totals:         1       0       0       0       0
  1942 ;;Total ram usage:        1 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    1
  1945 ;; This function calls:
  1946 ;;		Nothing
  1947 ;; This function is called by:
  1948 ;;		_SPI_ADC
  1949 ;;		_SPI_CONT
  1950 ;;		_SPI_TEMP
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           
  1955                           ;psect for function _spiWrite
  1956  02C1                     _spiWrite:
  1957                           
  1958                           ;incstack = 0
  1959                           ; Regs used in _spiWrite: [wreg]
  1960                           ;spiWrite@dat stored from wreg
  1961  02C1  00F2               	movwf	spiWrite@dat
  1962  02C2                     l1049:
  1963                           
  1964                           ;SPI.c: 36: void spiWrite(char dat);SPI.c: 37: {;SPI.c: 38:     SSPBUF = dat;
  1965  02C2  0872               	movf	spiWrite@dat,w
  1966  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  1967  02C4  1303               	bcf	3,6	;RP1=0, select bank0
  1968  02C5  0093               	movwf	19	;volatile
  1969  02C6                     l245:
  1970  02C6  0008               	return
  1971  02C7                     __end_of_spiWrite:
  1972                           
  1973                           	psect	text11
  1974  028E                     __ptext11:	
  1975 ;; *************** function _spiRead *****************
  1976 ;; Defined at:
  1977 ;;		line 49 in file "SPI.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      unsigned char 
  1984 ;; Registers used:
  1985 ;;		wreg, status,2, status,0, pclath, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1991 ;;      Params:         0       0       0       0       0
  1992 ;;      Locals:         0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0
  1994 ;;      Totals:         0       0       0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    2
  1998 ;; This function calls:
  1999 ;;		_spiReceiveWait
  2000 ;; This function is called by:
  2001 ;;		_SPI_ADC
  2002 ;;		_SPI_CONT
  2003 ;;		_SPI_TEMP
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           
  2008                           ;psect for function _spiRead
  2009  028E                     _spiRead:
  2010  028E                     l1051:	
  2011                           ;incstack = 0
  2012                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2013                           
  2014                           
  2015                           ;SPI.c: 51:     spiReceiveWait();
  2016  028E  120A  118A  22A7  120A  118A  	fcall	_spiReceiveWait
  2017  0293                     l1053:
  2018                           
  2019                           ;SPI.c: 52:     return(SSPBUF);
  2020  0293  1283               	bcf	3,5	;RP0=0, select bank0
  2021  0294  1303               	bcf	3,6	;RP1=0, select bank0
  2022  0295  0813               	movf	19,w	;volatile
  2023  0296                     l253:
  2024  0296  0008               	return
  2025  0297                     __end_of_spiRead:
  2026                           
  2027                           	psect	text12
  2028  02A7                     __ptext12:	
  2029 ;; *************** function _spiReceiveWait *****************
  2030 ;; Defined at:
  2031 ;;		line 31 in file "SPI.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;		None
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		None
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2045 ;;      Params:         0       0       0       0       0
  2046 ;;      Locals:         0       0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0
  2048 ;;      Totals:         0       0       0       0       0
  2049 ;;Total ram usage:        0 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:    1
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		_spiRead
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           
  2060                           ;psect for function _spiReceiveWait
  2061  02A7                     _spiReceiveWait:
  2062  02A7                     l1037:	
  2063                           ;incstack = 0
  2064                           ; Regs used in _spiReceiveWait: []
  2065                           
  2066  02A7                     l239:	
  2067                           ;SPI.c: 33:     while ( !SSPSTATbits.BF );
  2068                           
  2069  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  2070  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  2071  02A9  1C14               	btfss	20,0	;volatile
  2072  02AA  2AAC               	goto	u111
  2073  02AB  2AAD               	goto	u110
  2074  02AC                     u111:
  2075  02AC  2AA7               	goto	l239
  2076  02AD                     u110:
  2077  02AD                     l242:
  2078  02AD  0008               	return
  2079  02AE                     __end_of_spiReceiveWait:
  2080                           
  2081                           	psect	text13
  2082  00C5                     __ptext13:	
  2083 ;; *************** function _Lcd_Write_String *****************
  2084 ;; Defined at:
  2085 ;;		line 70 in file "LCD.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  a               2    5[COMMON] PTR unsigned char 
  2088 ;;		 -> data(8), STR_1(17), 
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  i               2    0[BANK0 ] int 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2100 ;;      Params:         2       0       0       0       0
  2101 ;;      Locals:         0       2       0       0       0
  2102 ;;      Temps:          3       0       0       0       0
  2103 ;;      Totals:         5       2       0       0       0
  2104 ;;Total ram usage:        7 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    3
  2107 ;; This function calls:
  2108 ;;		_Lcd_Write_Char
  2109 ;; This function is called by:
  2110 ;;		_main
  2111 ;;		_Show_val_LCD
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _Lcd_Write_String
  2117  00C5                     _Lcd_Write_String:
  2118  00C5                     l1303:	
  2119                           ;incstack = 0
  2120                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2121                           
  2122                           
  2123                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  2124  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  2125  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  2126  00C7  01BE               	clrf	Lcd_Write_String@i
  2127  00C8  01BF               	clrf	Lcd_Write_String@i+1
  2128  00C9  28EE               	goto	l1309
  2129  00CA                     l1305:
  2130                           
  2131                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  2132  00CA  083E               	movf	Lcd_Write_String@i,w
  2133  00CB  0775               	addwf	Lcd_Write_String@a,w
  2134  00CC  00F8               	movwf	??_Lcd_Write_String+1
  2135  00CD  0876               	movf	Lcd_Write_String@a+1,w
  2136  00CE  00F7               	movwf	??_Lcd_Write_String
  2137  00CF  1803               	skipnc
  2138  00D0  0AF7               	incf	??_Lcd_Write_String,f
  2139  00D1  1FBE               	btfss	Lcd_Write_String@i,7
  2140  00D2  28D4               	goto	u210
  2141  00D3  03F7               	decf	??_Lcd_Write_String,f
  2142  00D4                     u210:
  2143  00D4  0877               	movf	??_Lcd_Write_String,w
  2144  00D5  00F9               	movwf	??_Lcd_Write_String+2
  2145  00D6  0879               	movf	??_Lcd_Write_String+2,w
  2146  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2147  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  2148  00D9  00FF               	movwf	btemp+1
  2149  00DA  0878               	movf	??_Lcd_Write_String+1,w
  2150  00DB  0084               	movwf	4
  2151  00DC  120A  118A  21BA  120A  118A  	fcall	stringtab
  2152  00E1  120A  118A  225F  120A  118A  	fcall	_Lcd_Write_Char
  2153  00E6                     l1307:
  2154  00E6  3001               	movlw	1
  2155  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  2156  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  2157  00E9  07BE               	addwf	Lcd_Write_String@i,f
  2158  00EA  1803               	skipnc
  2159  00EB  0ABF               	incf	Lcd_Write_String@i+1,f
  2160  00EC  3000               	movlw	0
  2161  00ED  07BF               	addwf	Lcd_Write_String@i+1,f
  2162  00EE                     l1309:
  2163  00EE  083E               	movf	Lcd_Write_String@i,w
  2164  00EF  0775               	addwf	Lcd_Write_String@a,w
  2165  00F0  00F8               	movwf	??_Lcd_Write_String+1
  2166  00F1  0876               	movf	Lcd_Write_String@a+1,w
  2167  00F2  00F7               	movwf	??_Lcd_Write_String
  2168  00F3  1803               	skipnc
  2169  00F4  0AF7               	incf	??_Lcd_Write_String,f
  2170  00F5  1FBE               	btfss	Lcd_Write_String@i,7
  2171  00F6  28F8               	goto	u220
  2172  00F7  03F7               	decf	??_Lcd_Write_String,f
  2173  00F8                     u220:
  2174  00F8  0877               	movf	??_Lcd_Write_String,w
  2175  00F9  00F9               	movwf	??_Lcd_Write_String+2
  2176  00FA  0879               	movf	??_Lcd_Write_String+2,w
  2177  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  2178  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  2179  00FD  00FF               	movwf	btemp+1
  2180  00FE  0878               	movf	??_Lcd_Write_String+1,w
  2181  00FF  0084               	movwf	4
  2182  0100  120A  118A  21BA  120A  118A  	fcall	stringtab
  2183  0105  3A00               	xorlw	0
  2184  0106  1D03               	skipz
  2185  0107  2909               	goto	u231
  2186  0108  290A               	goto	u230
  2187  0109                     u231:
  2188  0109  28CA               	goto	l1305
  2189  010A                     u230:
  2190  010A                     l166:
  2191  010A  0008               	return
  2192  010B                     __end_of_Lcd_Write_String:
  2193                           
  2194                           	psect	text14
  2195  025F                     __ptext14:	
  2196 ;; *************** function _Lcd_Write_Char *****************
  2197 ;; Defined at:
  2198 ;;		line 61 in file "LCD.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  a               1    wreg     unsigned char 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;  a               1    4[COMMON] unsigned char 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, status,2, status,0, pclath, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2212 ;;      Params:         0       0       0       0       0
  2213 ;;      Locals:         1       0       0       0       0
  2214 ;;      Temps:          1       0       0       0       0
  2215 ;;      Totals:         2       0       0       0       0
  2216 ;;Total ram usage:        2 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    2
  2219 ;; This function calls:
  2220 ;;		_Lcd_Port
  2221 ;; This function is called by:
  2222 ;;		_Lcd_Write_String
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           
  2227                           ;psect for function _Lcd_Write_Char
  2228  025F                     _Lcd_Write_Char:
  2229                           
  2230                           ;incstack = 0
  2231                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2232                           ;Lcd_Write_Char@a stored from wreg
  2233  025F  00F4               	movwf	Lcd_Write_Char@a
  2234  0260                     l1269:
  2235                           
  2236                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  2237  0260  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0261  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0262  1409               	bsf	9,0	;volatile
  2240  0263                     l1271:
  2241                           
  2242                           ;LCD.c: 63:    Lcd_Port(a);
  2243  0263  0874               	movf	Lcd_Write_Char@a,w
  2244  0264  120A  118A  22C7  120A  118A  	fcall	_Lcd_Port
  2245  0269                     l1273:
  2246                           
  2247                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  2248  0269  1283               	bcf	3,5	;RP0=0, select bank0
  2249  026A  1303               	bcf	3,6	;RP1=0, select bank0
  2250  026B  1509               	bsf	9,2	;volatile
  2251  026C                     l1275:
  2252                           
  2253                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2254  026C  301A               	movlw	26
  2255  026D  00F3               	movwf	??_Lcd_Write_Char
  2256  026E                     u277:
  2257  026E  0BF3               	decfsz	??_Lcd_Write_Char,f
  2258  026F  2A6E               	goto	u277
  2259  0270  0000               	nop
  2260  0271                     l1277:
  2261                           
  2262                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  2263  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2264  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2265  0273  1109               	bcf	9,2	;volatile
  2266  0274                     l160:
  2267  0274  0008               	return
  2268  0275                     __end_of_Lcd_Write_Char:
  2269                           
  2270                           	psect	text15
  2271  01E9                     __ptext15:	
  2272 ;; *************** function _Lcd_Set_Cursor *****************
  2273 ;; Defined at:
  2274 ;;		line 48 in file "LCD.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;  a               1    wreg     unsigned char 
  2277 ;;  b               1    6[COMMON] unsigned char 
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  a               1    8[COMMON] unsigned char 
  2280 ;;  temp            1    9[COMMON] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      void 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0, pclath, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2290 ;;      Params:         1       0       0       0       0
  2291 ;;      Locals:         2       0       0       0       0
  2292 ;;      Temps:          1       0       0       0       0
  2293 ;;      Totals:         4       0       0       0       0
  2294 ;;Total ram usage:        4 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    3
  2297 ;; This function calls:
  2298 ;;		_Lcd_Cmd
  2299 ;; This function is called by:
  2300 ;;		_main
  2301 ;;		_Show_val_LCD
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           
  2306                           ;psect for function _Lcd_Set_Cursor
  2307  01E9                     _Lcd_Set_Cursor:
  2308                           
  2309                           ;incstack = 0
  2310                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2311                           ;Lcd_Set_Cursor@a stored from wreg
  2312  01E9  00F8               	movwf	Lcd_Set_Cursor@a
  2313  01EA                     l1291:
  2314                           
  2315                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  2316  01EA  0378               	decf	Lcd_Set_Cursor@a,w
  2317  01EB  1D03               	btfss	3,2
  2318  01EC  29EE               	goto	u191
  2319  01ED  29EF               	goto	u190
  2320  01EE                     u191:
  2321  01EE  29FB               	goto	l1297
  2322  01EF                     u190:
  2323  01EF                     l1293:
  2324                           
  2325                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2326  01EF  0876               	movf	Lcd_Set_Cursor@b,w
  2327  01F0  3E7F               	addlw	127
  2328  01F1  00F7               	movwf	??_Lcd_Set_Cursor
  2329  01F2  0877               	movf	??_Lcd_Set_Cursor,w
  2330  01F3  00F9               	movwf	Lcd_Set_Cursor@temp
  2331  01F4                     l1295:
  2332                           
  2333                           ;LCD.c: 52:         Lcd_Cmd(temp);
  2334  01F4  0879               	movf	Lcd_Set_Cursor@temp,w
  2335  01F5  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2336                           
  2337                           ;LCD.c: 53:  }
  2338  01FA  2A0C               	goto	l157
  2339  01FB                     l1297:
  2340  01FB  3002               	movlw	2
  2341  01FC  0678               	xorwf	Lcd_Set_Cursor@a,w
  2342  01FD  1D03               	btfss	3,2
  2343  01FE  2A00               	goto	u201
  2344  01FF  2A01               	goto	u200
  2345  0200                     u201:
  2346  0200  2A0C               	goto	l157
  2347  0201                     u200:
  2348  0201                     l1299:
  2349                           
  2350                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  2351  0201  0876               	movf	Lcd_Set_Cursor@b,w
  2352  0202  3EBF               	addlw	191
  2353  0203  00F7               	movwf	??_Lcd_Set_Cursor
  2354  0204  0877               	movf	??_Lcd_Set_Cursor,w
  2355  0205  00F9               	movwf	Lcd_Set_Cursor@temp
  2356  0206                     l1301:
  2357                           
  2358                           ;LCD.c: 56:   Lcd_Cmd(temp);
  2359  0206  0879               	movf	Lcd_Set_Cursor@temp,w
  2360  0207  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2361  020C                     l157:
  2362  020C  0008               	return
  2363  020D                     __end_of_Lcd_Set_Cursor:
  2364                           
  2365                           	psect	text16
  2366  007A                     __ptext16:	
  2367 ;; *************** function _Lcd_Init *****************
  2368 ;; Defined at:
  2369 ;;		line 14 in file "LCD.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;		None
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;		None
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  1    wreg      void 
  2376 ;; Registers used:
  2377 ;;		wreg, status,2, status,0, pclath, cstack
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2383 ;;      Params:         0       0       0       0       0
  2384 ;;      Locals:         0       0       0       0       0
  2385 ;;      Temps:          2       0       0       0       0
  2386 ;;      Totals:         2       0       0       0       0
  2387 ;;Total ram usage:        2 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    3
  2390 ;; This function calls:
  2391 ;;		_Lcd_Cmd
  2392 ;;		_Lcd_Port
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           
  2399                           ;psect for function _Lcd_Init
  2400  007A                     _Lcd_Init:
  2401  007A                     l1279:	
  2402                           ;incstack = 0
  2403                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2404                           
  2405                           
  2406                           ;LCD.c: 15:   Lcd_Port(0x00);
  2407  007A  3000               	movlw	0
  2408  007B  120A  118A  22C7  120A  118A  	fcall	_Lcd_Port
  2409  0080                     l1281:
  2410                           
  2411                           ;LCD.c: 16:   _delay((unsigned long)((20)*(8000000/4000.0)));
  2412  0080  3034               	movlw	52
  2413  0081  00F7               	movwf	??_Lcd_Init+1
  2414  0082  30F1               	movlw	241
  2415  0083  00F6               	movwf	??_Lcd_Init
  2416  0084                     u287:
  2417  0084  0BF6               	decfsz	??_Lcd_Init,f
  2418  0085  2884               	goto	u287
  2419  0086  0BF7               	decfsz	??_Lcd_Init+1,f
  2420  0087  2884               	goto	u287
  2421  0088  2889               	nop2
  2422  0089                     l1283:
  2423                           
  2424                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  2425  0089  3030               	movlw	48
  2426  008A  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2427                           
  2428                           ;LCD.c: 18:   _delay((unsigned long)((5)*(8000000/4000.0)));
  2429  008F  300D               	movlw	13
  2430  0090  00F7               	movwf	??_Lcd_Init+1
  2431  0091  30FB               	movlw	251
  2432  0092  00F6               	movwf	??_Lcd_Init
  2433  0093                     u297:
  2434  0093  0BF6               	decfsz	??_Lcd_Init,f
  2435  0094  2893               	goto	u297
  2436  0095  0BF7               	decfsz	??_Lcd_Init+1,f
  2437  0096  2893               	goto	u297
  2438  0097  2898               	nop2
  2439  0098                     l1285:
  2440                           
  2441                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  2442  0098  3030               	movlw	48
  2443  0099  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2444  009E                     l1287:
  2445                           
  2446                           ;LCD.c: 20:   _delay((unsigned long)((11)*(8000000/4000.0)));
  2447  009E  301D               	movlw	29
  2448  009F  00F7               	movwf	??_Lcd_Init+1
  2449  00A0  3091               	movlw	145
  2450  00A1  00F6               	movwf	??_Lcd_Init
  2451  00A2                     u307:
  2452  00A2  0BF6               	decfsz	??_Lcd_Init,f
  2453  00A3  28A2               	goto	u307
  2454  00A4  0BF7               	decfsz	??_Lcd_Init+1,f
  2455  00A5  28A2               	goto	u307
  2456                           
  2457                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  2458  00A6  3030               	movlw	48
  2459  00A7  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2460                           
  2461                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  2462  00AC  3038               	movlw	56
  2463  00AD  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2464                           
  2465                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  2466  00B2  300C               	movlw	12
  2467  00B3  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2468                           
  2469                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  2470  00B8  3001               	movlw	1
  2471  00B9  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2472                           
  2473                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  2474  00BE  3006               	movlw	6
  2475  00BF  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2476  00C4                     l142:
  2477  00C4  0008               	return
  2478  00C5                     __end_of_Lcd_Init:
  2479                           
  2480                           	psect	text17
  2481  0275                     __ptext17:	
  2482 ;; *************** function _Lcd_Clear *****************
  2483 ;; Defined at:
  2484 ;;		line 42 in file "LCD.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, pclath, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2498 ;;      Params:         0       0       0       0       0
  2499 ;;      Locals:         0       0       0       0       0
  2500 ;;      Temps:          0       0       0       0       0
  2501 ;;      Totals:         0       0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    3
  2505 ;; This function calls:
  2506 ;;		_Lcd_Cmd
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _Lcd_Clear
  2514  0275                     _Lcd_Clear:
  2515  0275                     l1289:	
  2516                           ;incstack = 0
  2517                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2518                           
  2519                           
  2520                           ;LCD.c: 43:  Lcd_Cmd(0);
  2521  0275  3000               	movlw	0
  2522  0276  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2523                           
  2524                           ;LCD.c: 44:  Lcd_Cmd(1);
  2525  027B  3001               	movlw	1
  2526  027C  120A  118A  222F  120A  118A  	fcall	_Lcd_Cmd
  2527  0281                     l151:
  2528  0281  0008               	return
  2529  0282                     __end_of_Lcd_Clear:
  2530                           
  2531                           	psect	text18
  2532  022F                     __ptext18:	
  2533 ;; *************** function _Lcd_Cmd *****************
  2534 ;; Defined at:
  2535 ;;		line 33 in file "LCD.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  a               1    wreg     unsigned char 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  a               1    5[COMMON] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0, pclath, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2549 ;;      Params:         0       0       0       0       0
  2550 ;;      Locals:         1       0       0       0       0
  2551 ;;      Temps:          2       0       0       0       0
  2552 ;;      Totals:         3       0       0       0       0
  2553 ;;Total ram usage:        3 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    2
  2556 ;; This function calls:
  2557 ;;		_Lcd_Port
  2558 ;; This function is called by:
  2559 ;;		_Lcd_Init
  2560 ;;		_Lcd_Clear
  2561 ;;		_Lcd_Set_Cursor
  2562 ;;		_Lcd_Shift_Right
  2563 ;;		_Lcd_Shift_Left
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _Lcd_Cmd
  2569  022F                     _Lcd_Cmd:
  2570                           
  2571                           ;incstack = 0
  2572                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2573                           ;Lcd_Cmd@a stored from wreg
  2574  022F  00F5               	movwf	Lcd_Cmd@a
  2575  0230                     l1259:
  2576                           
  2577                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  2578  0230  1283               	bcf	3,5	;RP0=0, select bank0
  2579  0231  1303               	bcf	3,6	;RP1=0, select bank0
  2580  0232  1009               	bcf	9,0	;volatile
  2581  0233                     l1261:
  2582                           
  2583                           ;LCD.c: 35:  Lcd_Port(a);
  2584  0233  0875               	movf	Lcd_Cmd@a,w
  2585  0234  120A  118A  22C7  120A  118A  	fcall	_Lcd_Port
  2586  0239                     l1263:
  2587                           
  2588                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  2589  0239  1283               	bcf	3,5	;RP0=0, select bank0
  2590  023A  1303               	bcf	3,6	;RP1=0, select bank0
  2591  023B  1509               	bsf	9,2	;volatile
  2592  023C                     l1265:
  2593                           
  2594                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2595  023C  300B               	movlw	11
  2596  023D  00F4               	movwf	??_Lcd_Cmd+1
  2597  023E  3062               	movlw	98
  2598  023F  00F3               	movwf	??_Lcd_Cmd
  2599  0240                     u317:
  2600  0240  0BF3               	decfsz	??_Lcd_Cmd,f
  2601  0241  2A40               	goto	u317
  2602  0242  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2603  0243  2A40               	goto	u317
  2604  0244  0000               	nop
  2605  0245                     l1267:
  2606                           
  2607                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  2608  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0247  1109               	bcf	9,2	;volatile
  2611  0248                     l148:
  2612  0248  0008               	return
  2613  0249                     __end_of_Lcd_Cmd:
  2614                           
  2615                           	psect	text19
  2616  02C7                     __ptext19:	
  2617 ;; *************** function _Lcd_Port *****************
  2618 ;; Defined at:
  2619 ;;		line 29 in file "LCD.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  a               1    wreg     unsigned char 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  a               1    2[COMMON] unsigned char 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2633 ;;      Params:         0       0       0       0       0
  2634 ;;      Locals:         1       0       0       0       0
  2635 ;;      Temps:          0       0       0       0       0
  2636 ;;      Totals:         1       0       0       0       0
  2637 ;;Total ram usage:        1 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    1
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_Lcd_Init
  2644 ;;		_Lcd_Cmd
  2645 ;;		_Lcd_Write_Char
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           
  2650                           ;psect for function _Lcd_Port
  2651  02C7                     _Lcd_Port:
  2652                           
  2653                           ;incstack = 0
  2654                           ; Regs used in _Lcd_Port: [wreg]
  2655                           ;Lcd_Port@a stored from wreg
  2656  02C7  00F2               	movwf	Lcd_Port@a
  2657  02C8                     l1257:
  2658                           
  2659                           ;LCD.c: 30:     PORTD = a;
  2660  02C8  0872               	movf	Lcd_Port@a,w
  2661  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2662  02CA  1303               	bcf	3,6	;RP1=0, select bank0
  2663  02CB  0088               	movwf	8	;volatile
  2664  02CC                     l145:
  2665  02CC  0008               	return
  2666  02CD                     __end_of_Lcd_Port:
  2667                           
  2668                           	psect	text20
  2669  02AE                     __ptext20:	
  2670 ;; *************** function _ISR *****************
  2671 ;; Defined at:
  2672 ;;		line 82 in file "main_maestro.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		None
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2686 ;;      Params:         0       0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0
  2688 ;;      Temps:          2       0       0       0       0
  2689 ;;      Totals:         2       0       0       0       0
  2690 ;;Total ram usage:        2 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		Interrupt level 1
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           
  2700                           ;psect for function _ISR
  2701  02AE                     _ISR:
  2702  02AE                     i1l87:
  2703  02AE  0871               	movf	??_ISR+1,w
  2704  02AF  008A               	movwf	10
  2705  02B0  0E70               	swapf	??_ISR,w
  2706  02B1  0083               	movwf	3
  2707  02B2  0EFE               	swapf	btemp,f
  2708  02B3  0E7E               	swapf	btemp,w
  2709  02B4  0009               	retfie
  2710  02B5                     __end_of_ISR:
  2711  007E                     btemp	set	126	;btemp
  2712  007E                     wtemp0	set	126
  2713                           
  2714                           	psect	intentry
  2715  0004                     __pintentry:	
  2716                           ;incstack = 0
  2717                           ; Regs used in _ISR: []
  2718                           
  2719  0004                     interrupt_function:
  2720  007E                     saved_w	set	btemp
  2721  0004  00FE               	movwf	btemp
  2722  0005  0E03               	swapf	3,w
  2723  0006  00F0               	movwf	??_ISR
  2724  0007  080A               	movf	10,w
  2725  0008  00F1               	movwf	??_ISR+1
  2726  0009  120A  118A  2AAE   	ljmp	_ISR
  2727                           
  2728                           	psect	config
  2729                           
  2730                           ;Config register CONFIG1 @ 0x2007
  2731                           ;	Oscillator Selection bits
  2732                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  2733                           ;	Watchdog Timer Enable bit
  2734                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2735                           ;	Power-up Timer Enable bit
  2736                           ;	PWRTE = OFF, PWRT disabled
  2737                           ;	RE3/MCLR pin function select bit
  2738                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2739                           ;	Code Protection bit
  2740                           ;	CP = OFF, Program memory code protection is disabled
  2741                           ;	Data Code Protection bit
  2742                           ;	CPD = OFF, Data memory code protection is disabled
  2743                           ;	Brown Out Reset Selection bits
  2744                           ;	BOREN = OFF, BOR disabled
  2745                           ;	Internal External Switchover bit
  2746                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2747                           ;	Fail-Safe Clock Monitor Enabled bit
  2748                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2749                           ;	Low Voltage Programming Enable bit
  2750                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2751                           ;	In-Circuit Debugger Mode bit
  2752                           ;	DEBUG = 0x1, unprogrammed default
  2753  2007                     	org	8199
  2754  2007  20D6               	dw	8406
  2755                           
  2756                           ;Config register CONFIG2 @ 0x2008
  2757                           ;	Brown-out Reset Selection bit
  2758                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2759                           ;	Flash Program Memory Self Write Enable bits
  2760                           ;	WRT = OFF, Write protection off
  2761  2008                     	org	8200
  2762  2008  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         32
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80      2      32
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    _doprnt$2	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMMON[1]), 

    _doprnt$1	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), 

    _doprnt$0	PTR struct __prbuf size(1) Largest target is 3
		 -> sprintf@pb(COMMON[2]), 

    S958__prbuf$func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    pb.func	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> Absolute function(), 

    S958__prbuf$ptr	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 

    pb.ptr	PTR unsigned char  size(1) Largest target is 8
		 -> data(BANK0[8]), 

    Write_USART_String@a	PTR unsigned char  size(1) Largest target is 9
		 -> STR_2(CODE[9]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> data(BANK0[8]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _setup->_spiInit
    _Write_USART_String->_Write_USART
    _SPI_ADC->_spiWrite
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1321
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _SPI_ADC
                 _Write_USART_String
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     306
                    _USART_INTERRUPT
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     291
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      15
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_INTERRUPT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   3     3      0     132
                                              3 COMMON     3     3      0
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPI_ADC                                              3     3      0      22
                                              3 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     322
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0      62
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     384
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      62
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SPI_ADC
     _spiRead
       _spiReceiveWait
     _spiWrite
   _Write_USART_String
     _Write_USART
   _setup
     _USART_INTERRUPT
     _USART_Init
     _USART_Init_BaudRate
     _initOsc
     _spiInit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2      20       5       40.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2C      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 22 09:03:12 2021

                           pc 0002                   _SSPSTATbits 0094                            l98 014E  
                          u30 0289                            u31 0288                            fsr 0004  
        __size_of_Write_USART 000C              ?_USART_INTERRUPT 0070                           l110 01B9  
                         l120 0078                           l201 02C0                           l121 0026  
                         l122 002C                           l123 0032                           l204 0283  
                         l124 0038                           l213 022E                           l125 003E  
                         l142 00C4                           l126 0044                           l151 0281  
                         l207 028D                           l127 004A                           l119 0020  
                         l160 0274                           l128 0050                           l145 02CC  
                         l129 0079                           l242 02AD                           l235 0259  
                         l148 0248                           l236 025E                           l157 020C  
                         l253 0296                           l245 02C6                           l166 010A  
                         l239 02A7                           l195 02A6                           l198 02BA  
                         l811 02BB                           l805 02B5                           l807 02B8  
                         l809 029F                           l851 0283                           l853 0289  
                         l795 001F                           l799 0056                           _RC0 0038  
                         _RC1 0039                           _RC2 003A                           u110 02AD  
                         u111 02AC                           u200 0201                           u120 0251  
                         u201 0200                           u121 0250                           u210 00D4  
                         u220 00F8                           u230 010A                           u231 0109  
                         u307 00A2                           u180 022E                           u317 0240  
                         u181 022D                           u190 01EF                           u191 01EE  
                         u247 018D                           u257 01A4                           u267 01B2  
                         _ISR 02AE                           u277 026E                           u287 0084  
                         u297 0093                           fsr0 0004                           indf 0000  
 __size_of_Write_USART_String 0022                          ?_ISR 0070                          l1101 0122  
                        l1111 012D                          l1103 0123                          l1041 0251  
                        l1121 0140                          l1113 0130                          l1105 0124  
                        l1051 028E                          l1043 0253                          l1123 0145  
                        l1115 0133                          l1107 0127                          l1301 0206  
                        l1037 02A7                          l1053 0293                          l1045 0255  
                        l1117 0136                          l1109 012A                          l1303 00C5  
                        l1047 0258                          l1039 024A                          l1119 013B  
                        l1311 014F                          l1305 00CA                          l1049 02C2  
                        l1161 0192                          l1081 0114                          l1321 0162  
                        l1313 0154                          l1307 00E6                          l1163 0198  
                        l1171 021D                          l1091 011B                          l1083 0115  
                        l1323 016A                          l1315 0157                          l1261 0233  
                        l1309 00EE                          l1165 01A9                          l1157 0186  
                        l1173 0221                          l1093 011C                          l1085 0118  
                        l1077 010B                          l1325 0173                          l1317 0158  
                        l1263 0239                          l1271 0263                          l1159 0189  
                        l1167 020E                          l1095 011D                          l1087 0119  
                        l1079 0111                          l1327 0178                          l1319 015D  
                        l1257 02C8                          l1265 023C                          l1281 0080  
                        l1273 0269                          l1169 0210                          l1097 0120  
                        l1089 011A                          l1329 017E                          l1267 0245  
                        l1259 0230                          l1283 0089                          l1291 01EA  
                        l1275 026C                          l1099 0121                          l1285 0098  
                        l1293 01EF                          l1277 0271                          l1269 0260  
                        l1287 009E                          l1279 007A                          l1295 01F4  
                        l1359 005E                          l1289 0275                          l1297 01FB  
                        l1299 0201                          STR_1 01CA                          STR_2 01DB  
                        STR_3 01E4                          _RCIF 0065                          i1l87 02AE  
                        _TRMT 04C1                          _data 0036             ?_Lcd_Write_String 0075  
             __end_of_SPI_ADC 01BA                          _cont 007B                          _main 014F  
                        btemp 007E                          start 000C            ??_Lcd_Write_String 0077  
             __end_of_Lcd_Cmd 0249                         ??_ISR 0070                         ?_main 0070  
                       _ANSEL 0188                         _RCREG 001A                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009       __size_of_Lcd_Set_Cursor 0024  
                       _TRISA 0085                         _TRISB 0086                         _TRISD 0088  
                       _TRISE 0089                         _TXREG 0019               __end_of_initOsc 007A  
                       _setup 010B                         pclath 000A               __end_of_spiInit 025F  
             __end_of_spiRead 0297                         status 0003                         wtemp0 007E  
                 ?_USART_Init 0070              __end_of_Lcd_Init 00C5              __end_of_Lcd_Port 02CD  
             __initialization 000F                  __end_of_main 0186                        ??_main 007A  
          __size_of_Lcd_Clear 000D                     ??_SPI_ADC 0073                   initOsc@IRCF 0074  
         _USART_Init_BaudRate 02B5                        ?_setup 0070                        _ANSELH 0189  
                   ??_Lcd_Cmd 0073                        _SPBRGH 009A       __size_of_Lcd_Write_Char 0016  
                      _TRISC0 0438                        _TRISC1 0439                        _TRISC2 043A  
                      _TRISC3 043B                        _TRISC5 043D                        _SSPCON 0014  
                      _SSPBUF 0013          ?_USART_Init_BaudRate 0070                     ??_initOsc 0072  
                      saved_w 007E              __end_of_spiWrite 02C7                     ??_spiInit 0075  
                   ??_spiRead 0072           __size_of_USART_Init 0008               Lcd_Set_Cursor@a 0078  
             Lcd_Set_Cursor@b 0076       __end_of__initialization 001A             __end_of_Lcd_Clear 0282  
              __pcstackCOMMON 0070         ??_USART_Init_BaudRate 0072                 __end_of_setup 014F  
              _Lcd_Set_Cursor 01E9                     ?_Lcd_Init 0070                     ?_Lcd_Port 0070  
                     ??_setup 0076                  Write_USART@a 0072                    __pbssBANK0 0020  
                  _data_total 0020                    __pmaintext 014F                 ??_Write_USART 0072  
                  __pintentry 0004       __size_of_spiReceiveWait 0007     __size_of_Lcd_Write_String 0046  
      __end_of_Lcd_Set_Cursor 020D    __end_of_Write_USART_String 022F                    ??_Lcd_Init 0076  
                  ??_Lcd_Port 0072                       _SPI_ADC 0186      __size_of_USART_INTERRUPT 0006  
                     _SSPSTAT 0094                    __stringtab 01BA                _Lcd_Write_Char 025F  
                     _Lcd_Cmd 022F                  ??_USART_Init 0072                     ?_spiWrite 0070  
             ?_Lcd_Set_Cursor 0076                       __ptext1 010B                       __ptext2 0249  
                     __ptext3 001E                       __ptext4 02B5                       __ptext5 029F  
                     __ptext6 02BB                       __ptext7 020D                       __ptext8 0282  
                     __ptext9 0186                  __size_of_ISR 0007                       _initOsc 001E  
         __end_of_Write_USART 028E                       _val_ADC 007A                       _spiInit 0249  
                     _spiRead 028E            __end_of_USART_Init 02A7                       clrloop0 0298  
      __end_of_Lcd_Write_Char 0275          end_of_initialization 001A                     _RCSTAbits 0018  
                  ??_spiWrite 0072                     Lcd_Port@a 0072                     _PORTCbits 0007  
                   _PORTEbits 0009                     _TRISCbits 0087                   spiWrite@dat 0072  
             ?_Lcd_Write_Char 0070             Lcd_Write_String@a 0075             Lcd_Write_String@i 003E  
                   _TXSTAbits 0098             ??_USART_INTERRUPT 0072                     _Lcd_Clear 0275  
              _spiReceiveWait 02A7                   _Write_USART 0282              _Lcd_Write_String 00C5  
         start_initialization 000F                   __end_of_ISR 02B5             __size_of_Lcd_Init 004B  
                _hola_esclavo 0035             __size_of_Lcd_Port 0006   __end_of_USART_Init_BaudRate 02BB  
      __end_of_spiReceiveWait 02AE                    ?_Lcd_Clear 0070               Lcd_Write_Char@a 0074  
                 __pbssCOMMON 007A                     ___latbits 0002                 __pcstackBANK0 003E  
                    ?_SPI_ADC 0070                      ?_Lcd_Cmd 0070            _Write_USART_String 020D  
             ?_spiReceiveWait 0070              ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0070  
           __size_of_spiWrite 0006                     __pstrings 01BA                      ?_initOsc 0070  
                    ?_spiInit 0072                      ?_spiRead 0070          ??_Write_USART_String 0073  
              __size_of_setup 0044          spiInit@sTransmitEdge 0074             interrupt_function 0004  
                   clear_ram0 0297                      _PIE1bits 008C            spiInit@sDataSample 0072  
                    Lcd_Cmd@a 0075                   ??_Lcd_Clear 0076                   __stringbase 01C9  
            ??_Lcd_Write_Char 0073               _USART_INTERRUPT 02BB                      _Lcd_Init 007A  
                    _Lcd_Port 02C7              __size_of_SPI_ADC 0034      __end_of_Lcd_Write_String 010B  
            __size_of_Lcd_Cmd 001A                  ?_Write_USART 0070            __end_of__stringtab 01CA  
            __size_of_initOsc 005C                      __ptext10 02C1                      __ptext11 028E  
                    __ptext20 02AE                      __ptext12 02A7                      __ptext13 00C5  
                    __ptext14 025F                      __ptext15 01E9                      __ptext16 007A  
                    __ptext17 0275                      __ptext18 022F                      __ptext19 02C7  
            __size_of_spiInit 0016              __size_of_spiRead 0009                 __size_of_main 0037  
                    _val_TEMP 0034                      _spiWrite 02C1                  spiInit@sType 0075  
           spiInit@sClockIdle 0073       __end_of_USART_INTERRUPT 02C1                    _INTCONbits 000B  
         Write_USART_String@a 0074           Write_USART_String@i 0075                      intlevel1 0000  
            ??_spiReceiveWait 0072                     stringcode 01C4                    _OSCCONbits 008F  
__size_of_USART_Init_BaudRate 0006            Lcd_Set_Cursor@temp 0079                      stringdir 01C4  
                    stringtab 01BA                    _USART_Init 029F  
