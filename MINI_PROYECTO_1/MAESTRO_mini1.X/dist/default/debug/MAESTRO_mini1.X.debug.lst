

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 15 09:25:10 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.20
    31                           ; Generated 12/02/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  008F                     	;# 
   109  0090                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0093                     	;# 
   115  0094                     	;# 
   116  0095                     	;# 
   117  0096                     	;# 
   118  0097                     	;# 
   119  0098                     	;# 
   120  0099                     	;# 
   121  009A                     	;# 
   122  009B                     	;# 
   123  009C                     	;# 
   124  009D                     	;# 
   125  009E                     	;# 
   126  009F                     	;# 
   127  0105                     	;# 
   128  0107                     	;# 
   129  0108                     	;# 
   130  0109                     	;# 
   131  010C                     	;# 
   132  010C                     	;# 
   133  010D                     	;# 
   134  010E                     	;# 
   135  010F                     	;# 
   136  0185                     	;# 
   137  0187                     	;# 
   138  0188                     	;# 
   139  0189                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  0000                     	;# 
   143  0001                     	;# 
   144  0002                     	;# 
   145  0003                     	;# 
   146  0004                     	;# 
   147  0005                     	;# 
   148  0006                     	;# 
   149  0007                     	;# 
   150  0008                     	;# 
   151  0009                     	;# 
   152  000A                     	;# 
   153  000B                     	;# 
   154  000C                     	;# 
   155  000D                     	;# 
   156  000E                     	;# 
   157  000E                     	;# 
   158  000F                     	;# 
   159  0010                     	;# 
   160  0011                     	;# 
   161  0012                     	;# 
   162  0013                     	;# 
   163  0014                     	;# 
   164  0015                     	;# 
   165  0015                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001B                     	;# 
   173  001C                     	;# 
   174  001D                     	;# 
   175  001E                     	;# 
   176  001F                     	;# 
   177  0081                     	;# 
   178  0085                     	;# 
   179  0086                     	;# 
   180  0087                     	;# 
   181  0088                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0008                     	;# 
   229  0009                     	;# 
   230  000A                     	;# 
   231  000B                     	;# 
   232  000C                     	;# 
   233  000D                     	;# 
   234  000E                     	;# 
   235  000E                     	;# 
   236  000F                     	;# 
   237  0010                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0014                     	;# 
   242  0015                     	;# 
   243  0015                     	;# 
   244  0016                     	;# 
   245  0017                     	;# 
   246  0018                     	;# 
   247  0019                     	;# 
   248  001A                     	;# 
   249  001B                     	;# 
   250  001B                     	;# 
   251  001C                     	;# 
   252  001D                     	;# 
   253  001E                     	;# 
   254  001F                     	;# 
   255  0081                     	;# 
   256  0085                     	;# 
   257  0086                     	;# 
   258  0087                     	;# 
   259  0088                     	;# 
   260  0089                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  008F                     	;# 
   265  0090                     	;# 
   266  0091                     	;# 
   267  0092                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0094                     	;# 
   272  0095                     	;# 
   273  0096                     	;# 
   274  0097                     	;# 
   275  0098                     	;# 
   276  0099                     	;# 
   277  009A                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  009F                     	;# 
   283  0105                     	;# 
   284  0107                     	;# 
   285  0108                     	;# 
   286  0109                     	;# 
   287  010C                     	;# 
   288  010C                     	;# 
   289  010D                     	;# 
   290  010E                     	;# 
   291  010F                     	;# 
   292  0185                     	;# 
   293  0187                     	;# 
   294  0188                     	;# 
   295  0189                     	;# 
   296  018C                     	;# 
   297  018D                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0008                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0088                     	;# 
   338  0089                     	;# 
   339  008C                     	;# 
   340  008D                     	;# 
   341  008E                     	;# 
   342  008F                     	;# 
   343  0090                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0094                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0098                     	;# 
   354  0099                     	;# 
   355  009A                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  009F                     	;# 
   361  0105                     	;# 
   362  0107                     	;# 
   363  0108                     	;# 
   364  0109                     	;# 
   365  010C                     	;# 
   366  010C                     	;# 
   367  010D                     	;# 
   368  010E                     	;# 
   369  010F                     	;# 
   370  0185                     	;# 
   371  0187                     	;# 
   372  0188                     	;# 
   373  0189                     	;# 
   374  018C                     	;# 
   375  018D                     	;# 
   376  0000                     	;# 
   377  0001                     	;# 
   378  0002                     	;# 
   379  0003                     	;# 
   380  0004                     	;# 
   381  0005                     	;# 
   382  0006                     	;# 
   383  0007                     	;# 
   384  0008                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  000E                     	;# 
   392  000F                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0013                     	;# 
   397  0014                     	;# 
   398  0015                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  001D                     	;# 
   409  001E                     	;# 
   410  001F                     	;# 
   411  0081                     	;# 
   412  0085                     	;# 
   413  0086                     	;# 
   414  0087                     	;# 
   415  0088                     	;# 
   416  0089                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  008F                     	;# 
   421  0090                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0093                     	;# 
   427  0094                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0098                     	;# 
   432  0099                     	;# 
   433  009A                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  0105                     	;# 
   440  0107                     	;# 
   441  0108                     	;# 
   442  0109                     	;# 
   443  010C                     	;# 
   444  010C                     	;# 
   445  010D                     	;# 
   446  010E                     	;# 
   447  010F                     	;# 
   448  0185                     	;# 
   449  0187                     	;# 
   450  0188                     	;# 
   451  0189                     	;# 
   452  018C                     	;# 
   453  018D                     	;# 
   454  001A                     _RCREG	set	26
   455  0019                     _TXREG	set	25
   456  000B                     _INTCONbits	set	11
   457  0018                     _RCSTAbits	set	24
   458  0009                     _PORTEbits	set	9
   459  0009                     _PORTE	set	9
   460  0008                     _PORTD	set	8
   461  0007                     _PORTC	set	7
   462  0006                     _PORTB	set	6
   463  0005                     _PORTA	set	5
   464  0065                     _RCIF	set	101
   465  008C                     _PIE1bits	set	140
   466  0099                     _SPBRG	set	153
   467  009A                     _SPBRGH	set	154
   468  0098                     _TXSTAbits	set	152
   469  008F                     _OSCCONbits	set	143
   470  0089                     _TRISE	set	137
   471  0087                     _TRISCbits	set	135
   472  0086                     _TRISB	set	134
   473  0085                     _TRISA	set	133
   474  0088                     _TRISD	set	136
   475  04C1                     _TRMT	set	1217
   476  0189                     _ANSELH	set	393
   477  0188                     _ANSEL	set	392
   478                           
   479                           	psect	strings
   480  0128                     __pstrings:
   481  0128                     stringtab:
   482  0128                     __stringtab:
   483  0128                     stringcode:	
   484                           ;	String table - string pointers are 1 byte each
   485                           
   486  0128                     stringdir:
   487  0128  3001               	movlw	high stringdir
   488  0129  008A               	movwf	10
   489  012A  0804               	movf	4,w
   490  012B  0A84               	incf	4,f
   491  012C  0782               	addwf	2,f
   492  012D                     __stringbase:
   493  012D  3400               	retlw	0
   494  012E                     __end_of__stringtab:
   495  012E                     STR_1:
   496  012E  3453               	retlw	83	;'S'
   497  012F  3431               	retlw	49	;'1'
   498  0130  343A               	retlw	58	;':'
   499  0131  3420               	retlw	32	;' '
   500  0132  3420               	retlw	32	;' '
   501  0133  3420               	retlw	32	;' '
   502  0134  3453               	retlw	83	;'S'
   503  0135  3432               	retlw	50	;'2'
   504  0136  343A               	retlw	58	;':'
   505  0137  3420               	retlw	32	;' '
   506  0138  3420               	retlw	32	;' '
   507  0139  3420               	retlw	32	;' '
   508  013A  3453               	retlw	83	;'S'
   509  013B  3433               	retlw	51	;'3'
   510  013C  343A               	retlw	58	;':'
   511  013D  3400               	retlw	0
   512  013E                     STR_2:
   513  013E  3453               	retlw	83	;'S'
   514  013F  3431               	retlw	49	;'1'
   515  0140  3420               	retlw	32	;' '
   516  0141  3420               	retlw	32	;' '
   517  0142  3420               	retlw	32	;' '
   518  0143  3453               	retlw	83	;'S'
   519  0144  3432               	retlw	50	;'2'
   520  0145  3420               	retlw	32	;' '
   521  0146  3420               	retlw	32	;' '
   522  0147  3420               	retlw	32	;' '
   523  0148  3453               	retlw	83	;'S'
   524  0149  3433               	retlw	51	;'3'
   525  014A  3420               	retlw	32	;' '
   526  014B  340A               	retlw	10
   527  014C  3400               	retlw	0
   528  012E                     
   529                           	psect	cinit
   530  000F                     start_initialization:	
   531                           ; #config settings
   532                           
   533  000F                     __initialization:
   534                           
   535                           ; Clear objects allocated to BANK0
   536  000F  1383               	bcf	3,7	;select IRP bank0
   537  0010  3020               	movlw	low __pbssBANK0
   538  0011  0084               	movwf	4
   539  0012  3034               	movlw	low (__pbssBANK0+20)
   540  0013  120A  118A  2201  120A  118A  	fcall	clear_ram0
   541  0018                     end_of_initialization:	
   542                           ;End of C runtime variable initialization code
   543                           
   544  0018                     __end_of__initialization:
   545  0018  0183               	clrf	3
   546  0019  120A  118A  28C3   	ljmp	_main	;jump to C main() function
   547                           
   548                           	psect	bssBANK0
   549  0020                     __pbssBANK0:
   550  0020                     _data_total:
   551  0020                     	ds	20
   552                           
   553                           	psect	clrtext
   554  0201                     clear_ram0:	
   555                           ;	Called with FSR containing the base address, and
   556                           ;	W with the last address+1
   557                           
   558  0201  0064               	clrwdt	;clear the watchdog before getting into this loop
   559  0202                     clrloop0:
   560  0202  0180               	clrf	0	;clear RAM location pointed to by FSR
   561  0203  0A84               	incf	4,f	;increment pointer
   562  0204  0604               	xorwf	4,w	;XOR with final address
   563  0205  1903               	btfsc	3,2	;have we reached the end yet?
   564  0206  3400               	retlw	0	;all done for this memory range, return
   565  0207  0604               	xorwf	4,w	;XOR again to restore value
   566  0208  2A02               	goto	clrloop0	;do the next byte
   567                           
   568                           	psect	cstackCOMMON
   569  0070                     __pcstackCOMMON:
   570  0070                     ?_setup:
   571  0070                     ?_Lcd_Init:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_Lcd_Clear:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_Lcd_Write_String:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_Write_USART_String:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_initOsc:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_USART_Init_BaudRate:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_USART_Init:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_USART_INTERRUPT:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_Lcd_Port:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_Lcd_Cmd:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_ISR:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ??_ISR:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_main:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_Lcd_Write_Char:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_Write_USART:	
   614                           ; 1 bytes @ 0x0
   615                           
   616                           
   617                           ; 1 bytes @ 0x0
   618  0070                     	ds	2
   619  0072                     ??_initOsc:
   620  0072                     ??_USART_Init_BaudRate:	
   621                           ; 1 bytes @ 0x2
   622                           
   623  0072                     ??_USART_Init:	
   624                           ; 1 bytes @ 0x2
   625                           
   626  0072                     ??_USART_INTERRUPT:	
   627                           ; 1 bytes @ 0x2
   628                           
   629  0072                     ??_Lcd_Port:	
   630                           ; 1 bytes @ 0x2
   631                           
   632  0072                     ??_Write_USART:	
   633                           ; 1 bytes @ 0x2
   634                           
   635  0072                     Lcd_Port@a:	
   636                           ; 1 bytes @ 0x2
   637                           
   638  0072                     Write_USART@a:	
   639                           ; 1 bytes @ 0x2
   640                           
   641                           
   642                           ; 1 bytes @ 0x2
   643  0072                     	ds	1
   644  0073                     ??_Write_USART_String:
   645  0073                     ??_Lcd_Cmd:	
   646                           ; 1 bytes @ 0x3
   647                           
   648  0073                     ??_Lcd_Write_Char:	
   649                           ; 1 bytes @ 0x3
   650                           
   651                           
   652                           ; 1 bytes @ 0x3
   653  0073                     	ds	1
   654  0074                     initOsc@IRCF:
   655  0074                     Lcd_Write_Char@a:	
   656                           ; 1 bytes @ 0x4
   657                           
   658  0074                     Write_USART_String@a:	
   659                           ; 1 bytes @ 0x4
   660                           
   661                           
   662                           ; 1 bytes @ 0x4
   663  0074                     	ds	1
   664  0075                     ??_setup:
   665  0075                     ??_Lcd_Write_String:	
   666                           ; 1 bytes @ 0x5
   667                           
   668  0075                     Lcd_Cmd@a:	
   669                           ; 1 bytes @ 0x5
   670                           
   671  0075                     Write_USART_String@i:	
   672                           ; 1 bytes @ 0x5
   673                           
   674  0075                     Lcd_Write_String@i:	
   675                           ; 1 bytes @ 0x5
   676                           
   677                           
   678                           ; 2 bytes @ 0x5
   679  0075                     	ds	1
   680  0076                     ??_Lcd_Init:
   681  0076                     ??_Lcd_Clear:	
   682                           ; 1 bytes @ 0x6
   683                           
   684  0076                     ?_Lcd_Set_Cursor:	
   685                           ; 1 bytes @ 0x6
   686                           
   687  0076                     Lcd_Set_Cursor@b:	
   688                           ; 1 bytes @ 0x6
   689                           
   690                           
   691                           ; 1 bytes @ 0x6
   692  0076                     	ds	1
   693  0077                     ??_Lcd_Set_Cursor:
   694  0077                     Lcd_Write_String@a:	
   695                           ; 1 bytes @ 0x7
   696                           
   697                           
   698                           ; 1 bytes @ 0x7
   699  0077                     	ds	1
   700  0078                     Lcd_Set_Cursor@a:
   701                           
   702                           ; 1 bytes @ 0x8
   703  0078                     	ds	1
   704  0079                     Lcd_Set_Cursor@temp:
   705                           
   706                           ; 1 bytes @ 0x9
   707  0079                     	ds	1
   708                           
   709                           	psect	cstackBANK0
   710  0034                     __pcstackBANK0:
   711  0034                     ??_main:
   712                           
   713                           ; 1 bytes @ 0x0
   714  0034                     	ds	3
   715                           
   716                           	psect	maintext
   717  00C3                     __pmaintext:	
   718 ;;
   719 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   720 ;;
   721 ;; *************** function _main *****************
   722 ;; Defined at:
   723 ;;		line 82 in file "main_maestro.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;		None
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : B00/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   737 ;;      Params:         0       0       0       0       0
   738 ;;      Locals:         0       0       0       0       0
   739 ;;      Temps:          0       3       0       0       0
   740 ;;      Totals:         0       3       0       0       0
   741 ;;Total ram usage:        3 bytes
   742 ;; Hardware stack levels required when called:    4
   743 ;; This function calls:
   744 ;;		_Lcd_Clear
   745 ;;		_Lcd_Init
   746 ;;		_Lcd_Set_Cursor
   747 ;;		_Lcd_Write_String
   748 ;;		_Write_USART_String
   749 ;;		_setup
   750 ;; This function is called by:
   751 ;;		Startup code after reset
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           
   756                           ;psect for function _main
   757  00C3                     _main:
   758  00C3                     l961:	
   759                           ;incstack = 0
   760                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   761                           
   762                           
   763                           ;main_maestro.c: 83:     setup();
   764  00C3  120A  118A  20FF  120A  118A  	fcall	_setup
   765  00C8                     l963:
   766                           
   767                           ;main_maestro.c: 84:     TRISD = 0x00;
   768  00C8  1683               	bsf	3,5	;RP0=1, select bank1
   769  00C9  1303               	bcf	3,6	;RP1=0, select bank1
   770  00CA  0188               	clrf	8	;volatile
   771  00CB                     l965:
   772                           
   773                           ;main_maestro.c: 85:     Lcd_Init();
   774  00CB  120A  118A  2078  120A  118A  	fcall	_Lcd_Init
   775  00D0                     l967:
   776                           
   777                           ;main_maestro.c: 86:     Lcd_Clear();
   778  00D0  120A  118A  21E8  120A  118A  	fcall	_Lcd_Clear
   779  00D5                     l969:
   780                           
   781                           ;main_maestro.c: 87:     Lcd_Set_Cursor(1,2);
   782  00D5  3002               	movlw	2
   783  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   784  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   785  00D8  00B4               	movwf	??_main
   786  00D9  0834               	movf	??_main,w
   787  00DA  00F6               	movwf	Lcd_Set_Cursor@b
   788  00DB  3001               	movlw	1
   789  00DC  120A  118A  2172  120A  118A  	fcall	_Lcd_Set_Cursor
   790  00E1                     l971:
   791                           
   792                           ;main_maestro.c: 88:     Lcd_Write_String("S1:   S2:   S3:");
   793  00E1  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   794  00E2  120A  118A  214D  120A  118A  	fcall	_Lcd_Write_String
   795  00E7                     l973:
   796                           
   797                           ;main_maestro.c: 94:          Write_USART_String("S1   S2   S3 \n");
   798  00E7  3011               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   799  00E8  120A  118A  2196  120A  118A  	fcall	_Write_USART_String
   800  00ED                     l975:
   801                           
   802                           ;main_maestro.c: 102:         _delay((unsigned long)((500)*(8000000/4000.0)));
   803  00ED  3006               	movlw	6
   804  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   805  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   806  00F0  00B6               	movwf	??_main+2
   807  00F1  3013               	movlw	19
   808  00F2  00B5               	movwf	??_main+1
   809  00F3  30AD               	movlw	173
   810  00F4  00B4               	movwf	??_main
   811  00F5                     u117:
   812  00F5  0BB4               	decfsz	??_main,f
   813  00F6  28F5               	goto	u117
   814  00F7  0BB5               	decfsz	??_main+1,f
   815  00F8  28F5               	goto	u117
   816  00F9  0BB6               	decfsz	??_main+2,f
   817  00FA  28F5               	goto	u117
   818  00FB  28E7               	goto	l973
   819  00FC  120A  118A  280C   	ljmp	start
   820  00FF                     __end_of_main:
   821                           
   822                           	psect	text1
   823  00FF                     __ptext1:	
   824 ;; *************** function _setup *****************
   825 ;; Defined at:
   826 ;;		line 111 in file "main_maestro.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;		None
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   840 ;;      Params:         0       0       0       0       0
   841 ;;      Locals:         0       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0
   843 ;;      Totals:         0       0       0       0       0
   844 ;;Total ram usage:        0 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; Hardware stack levels required when called:    2
   847 ;; This function calls:
   848 ;;		_USART_INTERRUPT
   849 ;;		_USART_Init
   850 ;;		_USART_Init_BaudRate
   851 ;;		_initOsc
   852 ;; This function is called by:
   853 ;;		_main
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           
   858                           ;psect for function _setup
   859  00FF                     _setup:
   860  00FF                     l809:	
   861                           ;incstack = 0
   862                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   863                           
   864                           
   865                           ;main_maestro.c: 112:     initOsc(7);
   866  00FF  3007               	movlw	7
   867  0100  120A  118A  201C  120A  118A  	fcall	_initOsc
   868  0105                     l811:
   869                           
   870                           ;main_maestro.c: 113:     ANSEL = 0;
   871  0105  1683               	bsf	3,5	;RP0=1, select bank3
   872  0106  1703               	bsf	3,6	;RP1=1, select bank3
   873  0107  0188               	clrf	8	;volatile
   874  0108                     l813:
   875                           
   876                           ;main_maestro.c: 114:     ANSELH = 0;
   877  0108  0189               	clrf	9	;volatile
   878  0109                     l815:
   879                           
   880                           ;main_maestro.c: 115:     TRISA = 0;
   881  0109  1683               	bsf	3,5	;RP0=1, select bank1
   882  010A  1303               	bcf	3,6	;RP1=0, select bank1
   883  010B  0185               	clrf	5	;volatile
   884  010C                     l817:
   885                           
   886                           ;main_maestro.c: 116:     TRISB = 0;
   887  010C  0186               	clrf	6	;volatile
   888  010D                     l819:
   889                           
   890                           ;main_maestro.c: 117:     TRISCbits.TRISC6 = 0;
   891  010D  1307               	bcf	7,6	;volatile
   892  010E                     l821:
   893                           
   894                           ;main_maestro.c: 118:     TRISCbits.TRISC7 = 1;
   895  010E  1787               	bsf	7,7	;volatile
   896  010F                     l823:
   897                           
   898                           ;main_maestro.c: 119:     TRISD = 0;
   899  010F  0188               	clrf	8	;volatile
   900  0110                     l825:
   901                           
   902                           ;main_maestro.c: 120:     TRISE = 0;
   903  0110  0189               	clrf	9	;volatile
   904  0111                     l827:
   905                           
   906                           ;main_maestro.c: 121:     PORTA = 0;
   907  0111  1283               	bcf	3,5	;RP0=0, select bank0
   908  0112  1303               	bcf	3,6	;RP1=0, select bank0
   909  0113  0185               	clrf	5	;volatile
   910  0114                     l829:
   911                           
   912                           ;main_maestro.c: 122:     PORTB = 0;
   913  0114  0186               	clrf	6	;volatile
   914  0115                     l831:
   915                           
   916                           ;main_maestro.c: 123:     PORTC = 0;
   917  0115  0187               	clrf	7	;volatile
   918  0116                     l833:
   919                           
   920                           ;main_maestro.c: 124:     PORTD = 0;
   921  0116  0188               	clrf	8	;volatile
   922  0117                     l835:
   923                           
   924                           ;main_maestro.c: 125:     PORTE = 0;
   925  0117  0189               	clrf	9	;volatile
   926  0118                     l837:
   927                           
   928                           ;main_maestro.c: 126:     USART_Init_BaudRate();
   929  0118  120A  118A  2218  120A  118A  	fcall	_USART_Init_BaudRate
   930  011D                     l839:
   931                           
   932                           ;main_maestro.c: 127:     USART_Init();
   933  011D  120A  118A  2209  120A  118A  	fcall	_USART_Init
   934  0122                     l841:
   935                           
   936                           ;main_maestro.c: 128:     USART_INTERRUPT();
   937  0122  120A  118A  221E  120A  118A  	fcall	_USART_INTERRUPT
   938  0127                     l64:
   939  0127  0008               	return
   940  0128                     __end_of_setup:
   941                           
   942                           	psect	text2
   943  001C                     __ptext2:	
   944 ;; *************** function _initOsc *****************
   945 ;; Defined at:
   946 ;;		line 3 in file "Oscilador.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  IRCF            1    wreg     unsigned char 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  IRCF            1    4[COMMON] unsigned char 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   960 ;;      Params:         0       0       0       0       0
   961 ;;      Locals:         1       0       0       0       0
   962 ;;      Temps:          2       0       0       0       0
   963 ;;      Totals:         3       0       0       0       0
   964 ;;Total ram usage:        3 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; Hardware stack levels required when called:    1
   967 ;; This function calls:
   968 ;;		Nothing
   969 ;; This function is called by:
   970 ;;		_setup
   971 ;; This function uses a non-reentrant model
   972 ;;
   973                           
   974                           
   975                           ;psect for function _initOsc
   976  001C                     _initOsc:
   977                           
   978                           ;incstack = 0
   979                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
   980                           ;initOsc@IRCF stored from wreg
   981  001C  00F4               	movwf	initOsc@IRCF
   982  001D                     l767:
   983                           
   984                           ;Oscilador.c: 5:     switch(IRCF){
   985  001D  2854               	goto	l771
   986  001E                     l73:	
   987                           ;Oscilador.c: 6:         case 0:
   988                           
   989                           
   990                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
   991  001E  1683               	bsf	3,5	;RP0=1, select bank1
   992  001F  1303               	bcf	3,6	;RP1=0, select bank1
   993  0020  130F               	bcf	15,6	;volatile
   994                           
   995                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
   996  0021  128F               	bcf	15,5	;volatile
   997                           
   998                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
   999  0022  120F               	bcf	15,4	;volatile
  1000                           
  1001                           ;Oscilador.c: 10:             break;
  1002  0023  2876               	goto	l74
  1003  0024                     l75:	
  1004                           ;Oscilador.c: 11:          case 1:
  1005                           
  1006                           
  1007                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
  1008  0024  1683               	bsf	3,5	;RP0=1, select bank1
  1009  0025  1303               	bcf	3,6	;RP1=0, select bank1
  1010  0026  130F               	bcf	15,6	;volatile
  1011                           
  1012                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
  1013  0027  128F               	bcf	15,5	;volatile
  1014                           
  1015                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
  1016  0028  160F               	bsf	15,4	;volatile
  1017                           
  1018                           ;Oscilador.c: 15:             break;
  1019  0029  2876               	goto	l74
  1020  002A                     l76:	
  1021                           ;Oscilador.c: 16:         case 2:
  1022                           
  1023                           
  1024                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
  1025  002A  1683               	bsf	3,5	;RP0=1, select bank1
  1026  002B  1303               	bcf	3,6	;RP1=0, select bank1
  1027  002C  130F               	bcf	15,6	;volatile
  1028                           
  1029                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
  1030  002D  168F               	bsf	15,5	;volatile
  1031                           
  1032                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
  1033  002E  120F               	bcf	15,4	;volatile
  1034                           
  1035                           ;Oscilador.c: 20:             break;
  1036  002F  2876               	goto	l74
  1037  0030                     l77:	
  1038                           ;Oscilador.c: 21:         case 3:
  1039                           
  1040                           
  1041                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
  1042  0030  1683               	bsf	3,5	;RP0=1, select bank1
  1043  0031  1303               	bcf	3,6	;RP1=0, select bank1
  1044  0032  130F               	bcf	15,6	;volatile
  1045                           
  1046                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1047  0033  168F               	bsf	15,5	;volatile
  1048                           
  1049                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1050  0034  160F               	bsf	15,4	;volatile
  1051                           
  1052                           ;Oscilador.c: 25:             break;
  1053  0035  2876               	goto	l74
  1054  0036                     l78:	
  1055                           ;Oscilador.c: 26:         case 4:
  1056                           
  1057                           
  1058                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1059  0036  1683               	bsf	3,5	;RP0=1, select bank1
  1060  0037  1303               	bcf	3,6	;RP1=0, select bank1
  1061  0038  170F               	bsf	15,6	;volatile
  1062                           
  1063                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1064  0039  128F               	bcf	15,5	;volatile
  1065                           
  1066                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1067  003A  120F               	bcf	15,4	;volatile
  1068                           
  1069                           ;Oscilador.c: 30:             break;
  1070  003B  2876               	goto	l74
  1071  003C                     l79:	
  1072                           ;Oscilador.c: 31:         case 5:
  1073                           
  1074                           
  1075                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1076  003C  1683               	bsf	3,5	;RP0=1, select bank1
  1077  003D  1303               	bcf	3,6	;RP1=0, select bank1
  1078  003E  170F               	bsf	15,6	;volatile
  1079                           
  1080                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1081  003F  128F               	bcf	15,5	;volatile
  1082                           
  1083                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1084  0040  160F               	bsf	15,4	;volatile
  1085                           
  1086                           ;Oscilador.c: 35:             break;
  1087  0041  2876               	goto	l74
  1088  0042                     l80:	
  1089                           ;Oscilador.c: 36:         case 6:
  1090                           
  1091                           
  1092                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1093  0042  1683               	bsf	3,5	;RP0=1, select bank1
  1094  0043  1303               	bcf	3,6	;RP1=0, select bank1
  1095  0044  170F               	bsf	15,6	;volatile
  1096                           
  1097                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1098  0045  168F               	bsf	15,5	;volatile
  1099                           
  1100                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1101  0046  120F               	bcf	15,4	;volatile
  1102                           
  1103                           ;Oscilador.c: 40:             break;
  1104  0047  2876               	goto	l74
  1105  0048                     l81:	
  1106                           ;Oscilador.c: 41:         case 7:
  1107                           
  1108                           
  1109                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1110  0048  1683               	bsf	3,5	;RP0=1, select bank1
  1111  0049  1303               	bcf	3,6	;RP1=0, select bank1
  1112  004A  170F               	bsf	15,6	;volatile
  1113                           
  1114                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1115  004B  168F               	bsf	15,5	;volatile
  1116                           
  1117                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1118  004C  160F               	bsf	15,4	;volatile
  1119                           
  1120                           ;Oscilador.c: 45:             break;
  1121  004D  2876               	goto	l74
  1122  004E                     l82:	
  1123                           ;Oscilador.c: 46:         default:
  1124                           
  1125                           
  1126                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1127  004E  1683               	bsf	3,5	;RP0=1, select bank1
  1128  004F  1303               	bcf	3,6	;RP1=0, select bank1
  1129  0050  170F               	bsf	15,6	;volatile
  1130                           
  1131                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1132  0051  168F               	bsf	15,5	;volatile
  1133                           
  1134                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1135  0052  120F               	bcf	15,4	;volatile
  1136                           
  1137                           ;Oscilador.c: 50:             break;
  1138  0053  2876               	goto	l74
  1139  0054                     l771:
  1140  0054  0874               	movf	initOsc@IRCF,w
  1141  0055  00F2               	movwf	??_initOsc
  1142  0056  01F3               	clrf	??_initOsc+1
  1143                           
  1144                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1145                           ; Switch size 1, requested type "simple"
  1146                           ; Number of cases is 1, Range of values is 0 to 0
  1147                           ; switch strategies available:
  1148                           ; Name         Instructions Cycles
  1149                           ; simple_byte            4     3 (average)
  1150                           ; direct_byte           11     8 (fixed)
  1151                           ; jumptable            260     6 (fixed)
  1152                           ;	Chosen strategy is simple_byte
  1153  0057  0873               	movf	??_initOsc+1,w
  1154  0058  3A00               	xorlw	0	; case 0
  1155  0059  1903               	skipnz
  1156  005A  285C               	goto	l1001
  1157  005B  284E               	goto	l82
  1158  005C                     l1001:
  1159                           
  1160                           ; Switch size 1, requested type "simple"
  1161                           ; Number of cases is 8, Range of values is 0 to 7
  1162                           ; switch strategies available:
  1163                           ; Name         Instructions Cycles
  1164                           ; simple_byte           25    13 (average)
  1165                           ; direct_byte           32     8 (fixed)
  1166                           ; jumptable            260     6 (fixed)
  1167                           ;	Chosen strategy is simple_byte
  1168  005C  0872               	movf	??_initOsc,w
  1169  005D  3A00               	xorlw	0	; case 0
  1170  005E  1903               	skipnz
  1171  005F  281E               	goto	l73
  1172  0060  3A01               	xorlw	1	; case 1
  1173  0061  1903               	skipnz
  1174  0062  2824               	goto	l75
  1175  0063  3A03               	xorlw	3	; case 2
  1176  0064  1903               	skipnz
  1177  0065  282A               	goto	l76
  1178  0066  3A01               	xorlw	1	; case 3
  1179  0067  1903               	skipnz
  1180  0068  2830               	goto	l77
  1181  0069  3A07               	xorlw	7	; case 4
  1182  006A  1903               	skipnz
  1183  006B  2836               	goto	l78
  1184  006C  3A01               	xorlw	1	; case 5
  1185  006D  1903               	skipnz
  1186  006E  283C               	goto	l79
  1187  006F  3A03               	xorlw	3	; case 6
  1188  0070  1903               	skipnz
  1189  0071  2842               	goto	l80
  1190  0072  3A01               	xorlw	1	; case 7
  1191  0073  1903               	skipnz
  1192  0074  2848               	goto	l81
  1193  0075  284E               	goto	l82
  1194  0076                     l74:
  1195                           
  1196                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1197  0076  140F               	bsf	15,0	;volatile
  1198  0077                     l83:
  1199  0077  0008               	return
  1200  0078                     __end_of_initOsc:
  1201                           
  1202                           	psect	text3
  1203  0218                     __ptext3:	
  1204 ;; *************** function _USART_Init_BaudRate *****************
  1205 ;; Defined at:
  1206 ;;		line 19 in file "USART.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;		None
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;		None
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		wreg, status,2
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1220 ;;      Params:         0       0       0       0       0
  1221 ;;      Locals:         0       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0
  1223 ;;      Totals:         0       0       0       0       0
  1224 ;;Total ram usage:        0 bytes
  1225 ;; Hardware stack levels used:    1
  1226 ;; Hardware stack levels required when called:    1
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_setup
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234                           
  1235                           ;psect for function _USART_Init_BaudRate
  1236  0218                     _USART_Init_BaudRate:
  1237  0218                     l777:	
  1238                           ;incstack = 0
  1239                           ; Regs used in _USART_Init_BaudRate: [wreg+status,2]
  1240                           
  1241                           
  1242                           ;USART.c: 20:     SPBRGH = 0;
  1243  0218  1683               	bsf	3,5	;RP0=1, select bank1
  1244  0219  1303               	bcf	3,6	;RP1=0, select bank1
  1245  021A  019A               	clrf	26	;volatile
  1246  021B                     l779:
  1247                           
  1248                           ;USART.c: 21:     SPBRG = 12;
  1249  021B  300C               	movlw	12
  1250  021C  0099               	movwf	25	;volatile
  1251  021D                     l152:
  1252  021D  0008               	return
  1253  021E                     __end_of_USART_Init_BaudRate:
  1254                           
  1255                           	psect	text4
  1256  0209                     __ptext4:	
  1257 ;; *************** function _USART_Init *****************
  1258 ;; Defined at:
  1259 ;;		line 8 in file "USART.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		None
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1273 ;;      Params:         0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0
  1275 ;;      Temps:          0       0       0       0       0
  1276 ;;      Totals:         0       0       0       0       0
  1277 ;;Total ram usage:        0 bytes
  1278 ;; Hardware stack levels used:    1
  1279 ;; Hardware stack levels required when called:    1
  1280 ;; This function calls:
  1281 ;;		Nothing
  1282 ;; This function is called by:
  1283 ;;		_setup
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           
  1288                           ;psect for function _USART_Init
  1289  0209                     _USART_Init:
  1290  0209                     l781:	
  1291                           ;incstack = 0
  1292                           ; Regs used in _USART_Init: []
  1293                           
  1294                           
  1295                           ;USART.c: 10:     RCSTAbits.SPEN = 1;
  1296  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1297  020A  1303               	bcf	3,6	;RP1=0, select bank0
  1298  020B  1798               	bsf	24,7	;volatile
  1299                           
  1300                           ;USART.c: 11:     TXSTAbits.SYNC = 0;
  1301  020C  1683               	bsf	3,5	;RP0=1, select bank1
  1302  020D  1303               	bcf	3,6	;RP1=0, select bank1
  1303  020E  1218               	bcf	24,4	;volatile
  1304                           
  1305                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  1306  020F  1698               	bsf	24,5	;volatile
  1307  0210                     l149:
  1308  0210  0008               	return
  1309  0211                     __end_of_USART_Init:
  1310                           
  1311                           	psect	text5
  1312  021E                     __ptext5:	
  1313 ;; *************** function _USART_INTERRUPT *****************
  1314 ;; Defined at:
  1315 ;;		line 24 in file "USART.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;		None
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;		None
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  1    wreg      void 
  1322 ;; Registers used:
  1323 ;;		None
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1329 ;;      Params:         0       0       0       0       0
  1330 ;;      Locals:         0       0       0       0       0
  1331 ;;      Temps:          0       0       0       0       0
  1332 ;;      Totals:         0       0       0       0       0
  1333 ;;Total ram usage:        0 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    1
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_setup
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           
  1344                           ;psect for function _USART_INTERRUPT
  1345  021E                     _USART_INTERRUPT:
  1346  021E                     l783:	
  1347                           ;incstack = 0
  1348                           ; Regs used in _USART_INTERRUPT: []
  1349                           
  1350                           
  1351                           ;USART.c: 25:     INTCONbits.GIE = 1;
  1352  021E  178B               	bsf	11,7	;volatile
  1353                           
  1354                           ;USART.c: 26:     INTCONbits.PEIE = 1;
  1355  021F  170B               	bsf	11,6	;volatile
  1356                           
  1357                           ;USART.c: 27:     PIE1bits.RCIE = 1;
  1358  0220  1683               	bsf	3,5	;RP0=1, select bank1
  1359  0221  1303               	bcf	3,6	;RP1=0, select bank1
  1360  0222  168C               	bsf	12,5	;volatile
  1361  0223                     l155:
  1362  0223  0008               	return
  1363  0224                     __end_of_USART_INTERRUPT:
  1364                           
  1365                           	psect	text6
  1366  0196                     __ptext6:	
  1367 ;; *************** function _Write_USART_String *****************
  1368 ;; Defined at:
  1369 ;;		line 37 in file "USART.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;  a               1    wreg     PTR unsigned char 
  1372 ;;		 -> STR_2(15), 
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;  a               1    4[COMMON] PTR unsigned char 
  1375 ;;		 -> STR_2(15), 
  1376 ;;  i               1    5[COMMON] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1386 ;;      Params:         0       0       0       0       0
  1387 ;;      Locals:         2       0       0       0       0
  1388 ;;      Temps:          1       0       0       0       0
  1389 ;;      Totals:         3       0       0       0       0
  1390 ;;Total ram usage:        3 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    2
  1393 ;; This function calls:
  1394 ;;		_Write_USART
  1395 ;; This function is called by:
  1396 ;;		_main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           
  1401                           ;psect for function _Write_USART_String
  1402  0196                     _Write_USART_String:
  1403                           
  1404                           ;incstack = 0
  1405                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1406                           ;Write_USART_String@a stored from wreg
  1407  0196  00F4               	movwf	Write_USART_String@a
  1408  0197                     l953:
  1409                           
  1410                           ;USART.c: 38:     uint8_t i;;USART.c: 39:     for(i=0;a[i]!='\0';i++){
  1411  0197  01F5               	clrf	Write_USART_String@i
  1412  0198  29AA               	goto	l959
  1413  0199                     l955:
  1414                           
  1415                           ;USART.c: 40:         Write_USART(a[i]);
  1416  0199  0875               	movf	Write_USART_String@i,w
  1417  019A  0774               	addwf	Write_USART_String@a,w
  1418  019B  0084               	movwf	4
  1419  019C  120A  118A  2128  120A  118A  	fcall	stringdir
  1420  01A1  120A  118A  21F5  120A  118A  	fcall	_Write_USART
  1421  01A6                     l957:
  1422                           
  1423                           ;USART.c: 41:     }
  1424  01A6  3001               	movlw	1
  1425  01A7  00F3               	movwf	??_Write_USART_String
  1426  01A8  0873               	movf	??_Write_USART_String,w
  1427  01A9  07F5               	addwf	Write_USART_String@i,f
  1428  01AA                     l959:
  1429  01AA  0875               	movf	Write_USART_String@i,w
  1430  01AB  0774               	addwf	Write_USART_String@a,w
  1431  01AC  0084               	movwf	4
  1432  01AD  120A  118A  2128  120A  118A  	fcall	stringdir
  1433  01B2  3A00               	xorlw	0
  1434  01B3  1D03               	skipz
  1435  01B4  29B6               	goto	u101
  1436  01B5  29B7               	goto	u100
  1437  01B6                     u101:
  1438  01B6  2999               	goto	l955
  1439  01B7                     u100:
  1440  01B7                     l167:
  1441  01B7  0008               	return
  1442  01B8                     __end_of_Write_USART_String:
  1443                           
  1444                           	psect	text7
  1445  01F5                     __ptext7:	
  1446 ;; *************** function _Write_USART *****************
  1447 ;; Defined at:
  1448 ;;		line 33 in file "USART.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  a               1    wreg     unsigned char 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  a               1    2[COMMON] unsigned char 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		wreg
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1462 ;;      Params:         0       0       0       0       0
  1463 ;;      Locals:         1       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0
  1465 ;;      Totals:         1       0       0       0       0
  1466 ;;Total ram usage:        1 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    1
  1469 ;; This function calls:
  1470 ;;		Nothing
  1471 ;; This function is called by:
  1472 ;;		_Write_USART_String
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           
  1477                           ;psect for function _Write_USART
  1478  01F5                     _Write_USART:
  1479                           
  1480                           ;incstack = 0
  1481                           ; Regs used in _Write_USART: [wreg]
  1482                           ;Write_USART@a stored from wreg
  1483  01F5  00F2               	movwf	Write_USART@a
  1484  01F6                     l805:
  1485  01F6                     l158:	
  1486                           ;USART.c: 34:     while(!TRMT);
  1487                           
  1488  01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1489  01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1490  01F8  1C98               	btfss	24,1	;volatile
  1491  01F9  29FB               	goto	u11
  1492  01FA  29FC               	goto	u10
  1493  01FB                     u11:
  1494  01FB  29F6               	goto	l158
  1495  01FC                     u10:
  1496  01FC                     l807:
  1497                           
  1498                           ;USART.c: 35:     TXREG=a;
  1499  01FC  0872               	movf	Write_USART@a,w
  1500  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1501  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1502  01FF  0099               	movwf	25	;volatile
  1503  0200                     l161:
  1504  0200  0008               	return
  1505  0201                     __end_of_Write_USART:
  1506                           
  1507                           	psect	text8
  1508  014D                     __ptext8:	
  1509 ;; *************** function _Lcd_Write_String *****************
  1510 ;; Defined at:
  1511 ;;		line 70 in file "LCD.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  a               1    wreg     PTR unsigned char 
  1514 ;;		 -> STR_3(16), STR_1(16), 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  a               1    7[COMMON] PTR unsigned char 
  1517 ;;		 -> STR_3(16), STR_1(16), 
  1518 ;;  i               2    5[COMMON] int 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1528 ;;      Params:         0       0       0       0       0
  1529 ;;      Locals:         3       0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0
  1531 ;;      Totals:         3       0       0       0       0
  1532 ;;Total ram usage:        3 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    3
  1535 ;; This function calls:
  1536 ;;		_Lcd_Write_Char
  1537 ;; This function is called by:
  1538 ;;		_main
  1539 ;;		_Show_val_LCD
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           
  1544                           ;psect for function _Lcd_Write_String
  1545  014D                     _Lcd_Write_String:
  1546                           
  1547                           ;incstack = 0
  1548                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1549                           ;Lcd_Write_String@a stored from wreg
  1550  014D  00F7               	movwf	Lcd_Write_String@a
  1551  014E                     l945:
  1552                           
  1553                           ;LCD.c: 71:  int i;;LCD.c: 72:  for(i=0;a[i]!='\0';i++)
  1554  014E  01F5               	clrf	Lcd_Write_String@i
  1555  014F  01F6               	clrf	Lcd_Write_String@i+1
  1556  0150  2964               	goto	l951
  1557  0151                     l947:
  1558                           
  1559                           ;LCD.c: 73:     Lcd_Write_Char(a[i]);
  1560  0151  0875               	movf	Lcd_Write_String@i,w
  1561  0152  0777               	addwf	Lcd_Write_String@a,w
  1562  0153  0084               	movwf	4
  1563  0154  120A  118A  2128  120A  118A  	fcall	stringdir
  1564  0159  120A  118A  21D2  120A  118A  	fcall	_Lcd_Write_Char
  1565  015E                     l949:
  1566  015E  3001               	movlw	1
  1567  015F  07F5               	addwf	Lcd_Write_String@i,f
  1568  0160  1803               	skipnc
  1569  0161  0AF6               	incf	Lcd_Write_String@i+1,f
  1570  0162  3000               	movlw	0
  1571  0163  07F6               	addwf	Lcd_Write_String@i+1,f
  1572  0164                     l951:
  1573  0164  0875               	movf	Lcd_Write_String@i,w
  1574  0165  0777               	addwf	Lcd_Write_String@a,w
  1575  0166  0084               	movwf	4
  1576  0167  120A  118A  2128  120A  118A  	fcall	stringdir
  1577  016C  3A00               	xorlw	0
  1578  016D  1D03               	skipz
  1579  016E  2970               	goto	u91
  1580  016F  2971               	goto	u90
  1581  0170                     u91:
  1582  0170  2951               	goto	l947
  1583  0171                     u90:
  1584  0171                     l120:
  1585  0171  0008               	return
  1586  0172                     __end_of_Lcd_Write_String:
  1587                           
  1588                           	psect	text9
  1589  01D2                     __ptext9:	
  1590 ;; *************** function _Lcd_Write_Char *****************
  1591 ;; Defined at:
  1592 ;;		line 61 in file "LCD.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  a               1    wreg     unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  a               1    4[COMMON] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;                  1    wreg      void 
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0, pclath, cstack
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1606 ;;      Params:         0       0       0       0       0
  1607 ;;      Locals:         1       0       0       0       0
  1608 ;;      Temps:          1       0       0       0       0
  1609 ;;      Totals:         2       0       0       0       0
  1610 ;;Total ram usage:        2 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    2
  1613 ;; This function calls:
  1614 ;;		_Lcd_Port
  1615 ;; This function is called by:
  1616 ;;		_Lcd_Write_String
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           
  1621                           ;psect for function _Lcd_Write_Char
  1622  01D2                     _Lcd_Write_Char:
  1623                           
  1624                           ;incstack = 0
  1625                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1626                           ;Lcd_Write_Char@a stored from wreg
  1627  01D2  00F4               	movwf	Lcd_Write_Char@a
  1628  01D3                     l795:
  1629                           
  1630                           ;LCD.c: 62:    PORTEbits.RE0 = 1;
  1631  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  1632  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  1633  01D5  1409               	bsf	9,0	;volatile
  1634  01D6                     l797:
  1635                           
  1636                           ;LCD.c: 63:    Lcd_Port(a);
  1637  01D6  0874               	movf	Lcd_Write_Char@a,w
  1638  01D7  120A  118A  2224  120A  118A  	fcall	_Lcd_Port
  1639  01DC                     l799:
  1640                           
  1641                           ;LCD.c: 64:    PORTEbits.RE2 = 1;
  1642  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1643  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1644  01DE  1509               	bsf	9,2	;volatile
  1645  01DF                     l801:
  1646                           
  1647                           ;LCD.c: 65:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  1648  01DF  301A               	movlw	26
  1649  01E0  00F3               	movwf	??_Lcd_Write_Char
  1650  01E1                     u127:
  1651  01E1  0BF3               	decfsz	??_Lcd_Write_Char,f
  1652  01E2  29E1               	goto	u127
  1653  01E3  0000               	nop
  1654  01E4                     l803:
  1655                           
  1656                           ;LCD.c: 66:    PORTEbits.RE2 = 0;
  1657  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  1658  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  1659  01E6  1109               	bcf	9,2	;volatile
  1660  01E7                     l114:
  1661  01E7  0008               	return
  1662  01E8                     __end_of_Lcd_Write_Char:
  1663                           
  1664                           	psect	text10
  1665  0172                     __ptext10:	
  1666 ;; *************** function _Lcd_Set_Cursor *****************
  1667 ;; Defined at:
  1668 ;;		line 48 in file "LCD.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  a               1    wreg     unsigned char 
  1671 ;;  b               1    6[COMMON] unsigned char 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  a               1    8[COMMON] unsigned char 
  1674 ;;  temp            1    9[COMMON] unsigned char 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  1    wreg      void 
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0, pclath, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1684 ;;      Params:         1       0       0       0       0
  1685 ;;      Locals:         2       0       0       0       0
  1686 ;;      Temps:          1       0       0       0       0
  1687 ;;      Totals:         4       0       0       0       0
  1688 ;;Total ram usage:        4 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    3
  1691 ;; This function calls:
  1692 ;;		_Lcd_Cmd
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;;		_Show_val_LCD
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           
  1700                           ;psect for function _Lcd_Set_Cursor
  1701  0172                     _Lcd_Set_Cursor:
  1702                           
  1703                           ;incstack = 0
  1704                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1705                           ;Lcd_Set_Cursor@a stored from wreg
  1706  0172  00F8               	movwf	Lcd_Set_Cursor@a
  1707  0173                     l933:
  1708                           
  1709                           ;LCD.c: 49:  char temp;;LCD.c: 50:  if(a == 1){
  1710  0173  0378               	decf	Lcd_Set_Cursor@a,w
  1711  0174  1D03               	btfss	3,2
  1712  0175  2977               	goto	u71
  1713  0176  2978               	goto	u70
  1714  0177                     u71:
  1715  0177  2984               	goto	l939
  1716  0178                     u70:
  1717  0178                     l935:
  1718                           
  1719                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  1720  0178  0876               	movf	Lcd_Set_Cursor@b,w
  1721  0179  3E7F               	addlw	127
  1722  017A  00F7               	movwf	??_Lcd_Set_Cursor
  1723  017B  0877               	movf	??_Lcd_Set_Cursor,w
  1724  017C  00F9               	movwf	Lcd_Set_Cursor@temp
  1725  017D                     l937:
  1726                           
  1727                           ;LCD.c: 52:         Lcd_Cmd(temp);
  1728  017D  0879               	movf	Lcd_Set_Cursor@temp,w
  1729  017E  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1730                           
  1731                           ;LCD.c: 53:  }
  1732  0183  2995               	goto	l111
  1733  0184                     l939:
  1734  0184  3002               	movlw	2
  1735  0185  0678               	xorwf	Lcd_Set_Cursor@a,w
  1736  0186  1D03               	btfss	3,2
  1737  0187  2989               	goto	u81
  1738  0188  298A               	goto	u80
  1739  0189                     u81:
  1740  0189  2995               	goto	l111
  1741  018A                     u80:
  1742  018A                     l941:
  1743                           
  1744                           ;LCD.c: 55:   temp = 0xC0 + b - 1;
  1745  018A  0876               	movf	Lcd_Set_Cursor@b,w
  1746  018B  3EBF               	addlw	191
  1747  018C  00F7               	movwf	??_Lcd_Set_Cursor
  1748  018D  0877               	movf	??_Lcd_Set_Cursor,w
  1749  018E  00F9               	movwf	Lcd_Set_Cursor@temp
  1750  018F                     l943:
  1751                           
  1752                           ;LCD.c: 56:   Lcd_Cmd(temp);
  1753  018F  0879               	movf	Lcd_Set_Cursor@temp,w
  1754  0190  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1755  0195                     l111:
  1756  0195  0008               	return
  1757  0196                     __end_of_Lcd_Set_Cursor:
  1758                           
  1759                           	psect	text11
  1760  0078                     __ptext11:	
  1761 ;; *************** function _Lcd_Init *****************
  1762 ;; Defined at:
  1763 ;;		line 14 in file "LCD.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;		None
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;		None
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  1    wreg      void 
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0, pclath, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1777 ;;      Params:         0       0       0       0       0
  1778 ;;      Locals:         0       0       0       0       0
  1779 ;;      Temps:          2       0       0       0       0
  1780 ;;      Totals:         2       0       0       0       0
  1781 ;;Total ram usage:        2 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    3
  1784 ;; This function calls:
  1785 ;;		_Lcd_Cmd
  1786 ;;		_Lcd_Port
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792                           
  1793                           ;psect for function _Lcd_Init
  1794  0078                     _Lcd_Init:
  1795  0078                     l843:	
  1796                           ;incstack = 0
  1797                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1798                           
  1799                           
  1800                           ;LCD.c: 15:   Lcd_Port(0x00);
  1801  0078  3000               	movlw	0
  1802  0079  120A  118A  2224  120A  118A  	fcall	_Lcd_Port
  1803  007E                     l845:
  1804                           
  1805                           ;LCD.c: 16:    _delay((unsigned long)((20)*(8000000/4000.0)));
  1806  007E  3034               	movlw	52
  1807  007F  00F7               	movwf	??_Lcd_Init+1
  1808  0080  30F1               	movlw	241
  1809  0081  00F6               	movwf	??_Lcd_Init
  1810  0082                     u137:
  1811  0082  0BF6               	decfsz	??_Lcd_Init,f
  1812  0083  2882               	goto	u137
  1813  0084  0BF7               	decfsz	??_Lcd_Init+1,f
  1814  0085  2882               	goto	u137
  1815  0086  2887               	nop2
  1816  0087                     l847:
  1817                           
  1818                           ;LCD.c: 17:   Lcd_Cmd(0x30);
  1819  0087  3030               	movlw	48
  1820  0088  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1821                           
  1822                           ;LCD.c: 18:     _delay((unsigned long)((5)*(8000000/4000.0)));
  1823  008D  300D               	movlw	13
  1824  008E  00F7               	movwf	??_Lcd_Init+1
  1825  008F  30FB               	movlw	251
  1826  0090  00F6               	movwf	??_Lcd_Init
  1827  0091                     u147:
  1828  0091  0BF6               	decfsz	??_Lcd_Init,f
  1829  0092  2891               	goto	u147
  1830  0093  0BF7               	decfsz	??_Lcd_Init+1,f
  1831  0094  2891               	goto	u147
  1832  0095  2896               	nop2
  1833  0096                     l849:
  1834                           
  1835                           ;LCD.c: 19:   Lcd_Cmd(0x30);
  1836  0096  3030               	movlw	48
  1837  0097  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1838  009C                     l851:
  1839                           
  1840                           ;LCD.c: 20:     _delay((unsigned long)((11)*(8000000/4000.0)));
  1841  009C  301D               	movlw	29
  1842  009D  00F7               	movwf	??_Lcd_Init+1
  1843  009E  3091               	movlw	145
  1844  009F  00F6               	movwf	??_Lcd_Init
  1845  00A0                     u157:
  1846  00A0  0BF6               	decfsz	??_Lcd_Init,f
  1847  00A1  28A0               	goto	u157
  1848  00A2  0BF7               	decfsz	??_Lcd_Init+1,f
  1849  00A3  28A0               	goto	u157
  1850                           
  1851                           ;LCD.c: 21:   Lcd_Cmd(0x30);
  1852  00A4  3030               	movlw	48
  1853  00A5  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1854                           
  1855                           ;LCD.c: 22:   Lcd_Cmd(0x38);
  1856  00AA  3038               	movlw	56
  1857  00AB  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1858                           
  1859                           ;LCD.c: 23:   Lcd_Cmd(0x0C);
  1860  00B0  300C               	movlw	12
  1861  00B1  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1862                           
  1863                           ;LCD.c: 24:   Lcd_Cmd(0x01);
  1864  00B6  3001               	movlw	1
  1865  00B7  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1866                           
  1867                           ;LCD.c: 25:   Lcd_Cmd(0x06);
  1868  00BC  3006               	movlw	6
  1869  00BD  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1870  00C2                     l96:
  1871  00C2  0008               	return
  1872  00C3                     __end_of_Lcd_Init:
  1873                           
  1874                           	psect	text12
  1875  01E8                     __ptext12:	
  1876 ;; *************** function _Lcd_Clear *****************
  1877 ;; Defined at:
  1878 ;;		line 42 in file "LCD.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, status,2, status,0, pclath, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0
  1895 ;;      Totals:         0       0       0       0       0
  1896 ;;Total ram usage:        0 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    3
  1899 ;; This function calls:
  1900 ;;		_Lcd_Cmd
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           
  1907                           ;psect for function _Lcd_Clear
  1908  01E8                     _Lcd_Clear:
  1909  01E8                     l853:	
  1910                           ;incstack = 0
  1911                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1912                           
  1913                           
  1914                           ;LCD.c: 43:  Lcd_Cmd(0);
  1915  01E8  3000               	movlw	0
  1916  01E9  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1917                           
  1918                           ;LCD.c: 44:  Lcd_Cmd(1);
  1919  01EE  3001               	movlw	1
  1920  01EF  120A  118A  21B8  120A  118A  	fcall	_Lcd_Cmd
  1921  01F4                     l105:
  1922  01F4  0008               	return
  1923  01F5                     __end_of_Lcd_Clear:
  1924                           
  1925                           	psect	text13
  1926  01B8                     __ptext13:	
  1927 ;; *************** function _Lcd_Cmd *****************
  1928 ;; Defined at:
  1929 ;;		line 33 in file "LCD.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  a               1    wreg     unsigned char 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  a               1    5[COMMON] unsigned char 
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      void 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, pclath, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1943 ;;      Params:         0       0       0       0       0
  1944 ;;      Locals:         1       0       0       0       0
  1945 ;;      Temps:          2       0       0       0       0
  1946 ;;      Totals:         3       0       0       0       0
  1947 ;;Total ram usage:        3 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    2
  1950 ;; This function calls:
  1951 ;;		_Lcd_Port
  1952 ;; This function is called by:
  1953 ;;		_Lcd_Init
  1954 ;;		_Lcd_Clear
  1955 ;;		_Lcd_Set_Cursor
  1956 ;;		_Lcd_Shift_Right
  1957 ;;		_Lcd_Shift_Left
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           
  1962                           ;psect for function _Lcd_Cmd
  1963  01B8                     _Lcd_Cmd:
  1964                           
  1965                           ;incstack = 0
  1966                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1967                           ;Lcd_Cmd@a stored from wreg
  1968  01B8  00F5               	movwf	Lcd_Cmd@a
  1969  01B9                     l785:
  1970                           
  1971                           ;LCD.c: 34:  PORTEbits.RE0 = 0;
  1972  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1973  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1974  01BB  1009               	bcf	9,0	;volatile
  1975  01BC                     l787:
  1976                           
  1977                           ;LCD.c: 35:  Lcd_Port(a);
  1978  01BC  0875               	movf	Lcd_Cmd@a,w
  1979  01BD  120A  118A  2224  120A  118A  	fcall	_Lcd_Port
  1980  01C2                     l789:
  1981                           
  1982                           ;LCD.c: 36:  PORTEbits.RE2 = 1;
  1983  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1984  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1985  01C4  1509               	bsf	9,2	;volatile
  1986  01C5                     l791:
  1987                           
  1988                           ;LCD.c: 37:         _delay((unsigned long)((4)*(8000000/4000.0)));
  1989  01C5  300B               	movlw	11
  1990  01C6  00F4               	movwf	??_Lcd_Cmd+1
  1991  01C7  3062               	movlw	98
  1992  01C8  00F3               	movwf	??_Lcd_Cmd
  1993  01C9                     u167:
  1994  01C9  0BF3               	decfsz	??_Lcd_Cmd,f
  1995  01CA  29C9               	goto	u167
  1996  01CB  0BF4               	decfsz	??_Lcd_Cmd+1,f
  1997  01CC  29C9               	goto	u167
  1998  01CD  0000               	nop
  1999  01CE                     l793:
  2000                           
  2001                           ;LCD.c: 38:         PORTEbits.RE2 = 0;
  2002  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  2003  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  2004  01D0  1109               	bcf	9,2	;volatile
  2005  01D1                     l102:
  2006  01D1  0008               	return
  2007  01D2                     __end_of_Lcd_Cmd:
  2008                           
  2009                           	psect	text14
  2010  0224                     __ptext14:	
  2011 ;; *************** function _Lcd_Port *****************
  2012 ;; Defined at:
  2013 ;;		line 29 in file "LCD.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;  a               1    wreg     unsigned char 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;  a               1    2[COMMON] unsigned char 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2027 ;;      Params:         0       0       0       0       0
  2028 ;;      Locals:         1       0       0       0       0
  2029 ;;      Temps:          0       0       0       0       0
  2030 ;;      Totals:         1       0       0       0       0
  2031 ;;Total ram usage:        1 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    1
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_Lcd_Init
  2038 ;;		_Lcd_Cmd
  2039 ;;		_Lcd_Write_Char
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           
  2044                           ;psect for function _Lcd_Port
  2045  0224                     _Lcd_Port:
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in _Lcd_Port: [wreg]
  2049                           ;Lcd_Port@a stored from wreg
  2050  0224  00F2               	movwf	Lcd_Port@a
  2051  0225                     l765:
  2052                           
  2053                           ;LCD.c: 30:     PORTD = a;
  2054  0225  0872               	movf	Lcd_Port@a,w
  2055  0226  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0227  1303               	bcf	3,6	;RP1=0, select bank0
  2057  0228  0088               	movwf	8	;volatile
  2058  0229                     l99:
  2059  0229  0008               	return
  2060  022A                     __end_of_Lcd_Port:
  2061                           
  2062                           	psect	text15
  2063  0211                     __ptext15:	
  2064 ;; *************** function _ISR *****************
  2065 ;; Defined at:
  2066 ;;		line 76 in file "main_maestro.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;		None
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;		None
  2071 ;; Return value:  Size  Location     Type
  2072 ;;                  1    wreg      void 
  2073 ;; Registers used:
  2074 ;;		None
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2080 ;;      Params:         0       0       0       0       0
  2081 ;;      Locals:         0       0       0       0       0
  2082 ;;      Temps:          2       0       0       0       0
  2083 ;;      Totals:         2       0       0       0       0
  2084 ;;Total ram usage:        2 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		Interrupt level 1
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           
  2094                           ;psect for function _ISR
  2095  0211                     _ISR:
  2096  0211                     i1l53:
  2097  0211  0871               	movf	??_ISR+1,w
  2098  0212  008A               	movwf	10
  2099  0213  0E70               	swapf	??_ISR,w
  2100  0214  0083               	movwf	3
  2101  0215  0EFE               	swapf	btemp,f
  2102  0216  0E7E               	swapf	btemp,w
  2103  0217  0009               	retfie
  2104  0218                     __end_of_ISR:
  2105  007E                     btemp	set	126	;btemp
  2106  007E                     wtemp0	set	126
  2107                           
  2108                           	psect	intentry
  2109  0004                     __pintentry:	
  2110                           ;incstack = 0
  2111                           ; Regs used in _ISR: []
  2112                           
  2113  0004                     interrupt_function:
  2114  007E                     saved_w	set	btemp
  2115  0004  00FE               	movwf	btemp
  2116  0005  0E03               	swapf	3,w
  2117  0006  00F0               	movwf	??_ISR
  2118  0007  080A               	movf	10,w
  2119  0008  00F1               	movwf	??_ISR+1
  2120  0009  120A  118A  2A11   	ljmp	_ISR
  2121                           
  2122                           	psect	config
  2123                           
  2124                           ;Config register CONFIG1 @ 0x2007
  2125                           ;	Oscillator Selection bits
  2126                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  2127                           ;	Watchdog Timer Enable bit
  2128                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2129                           ;	Power-up Timer Enable bit
  2130                           ;	PWRTE = OFF, PWRT disabled
  2131                           ;	RE3/MCLR pin function select bit
  2132                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2133                           ;	Code Protection bit
  2134                           ;	CP = OFF, Program memory code protection is disabled
  2135                           ;	Data Code Protection bit
  2136                           ;	CPD = OFF, Data memory code protection is disabled
  2137                           ;	Brown Out Reset Selection bits
  2138                           ;	BOREN = OFF, BOR disabled
  2139                           ;	Internal External Switchover bit
  2140                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2141                           ;	Fail-Safe Clock Monitor Enabled bit
  2142                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2143                           ;	Low Voltage Programming Enable bit
  2144                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2145                           ;	In-Circuit Debugger Mode bit
  2146                           ;	DEBUG = 0x1, unprogrammed default
  2147  2007                     	org	8199
  2148  2007  20D2               	dw	8402
  2149                           
  2150                           ;Config register CONFIG2 @ 0x2008
  2151                           ;	Brown-out Reset Selection bit
  2152                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2153                           ;	Flash Program Memory Self Write Enable bits
  2154                           ;	WRT = OFF, Write protection off
  2155  2008                     	org	8200
  2156  2008  3FFF               	dw	16383

Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      3      23
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Write_USART_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[15]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 16
		 -> STR_3(CODE[16]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _setup->_initOsc
    _Write_USART_String->_Write_USART
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     730
                                              0 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                 _Write_USART_String
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      15
                    _USART_INTERRUPT
                         _USART_Init
                _USART_Init_BaudRate
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      15
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _USART_Init_BaudRate                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART_INTERRUPT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   3     3      0     138
                                              3 COMMON     3     3      0
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     186
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0      30
                                              3 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     316
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      45
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      30
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      30
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Write_USART_String
     _Write_USART
   _setup
     _USART_INTERRUPT
     _USART_Init
     _USART_Init_BaudRate
     _initOsc

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      21       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3      17       5       28.7%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      21      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 15 09:25:10 2021

                           pc 0002                            l80 0042                            l64 0127  
                          l81 0048                            l73 001E                            l82 004E  
                          l74 0076                            l83 0077                            l75 0024  
                          l76 002A                            l77 0030                            l78 0036  
                          l79 003C                            l96 00C2                            l99 0229  
                          u10 01FC                            u11 01FB                            u70 0178  
                          u71 0177                            u80 018A                            u81 0189  
                          u90 0171                            u91 0170                            fsr 0004  
        __size_of_Write_USART 000C              ?_USART_INTERRUPT 0070                           l102 01D1  
                         l111 0195                           l120 0171                           l105 01F4  
                         l114 01E7                           l152 021D                           l161 0200  
                         l155 0223                           l149 0210                           l158 01F6  
                         l167 01B7                           l801 01DF                           l803 01E4  
                         l811 0105                           l805 01F6                           l821 010E  
                         l813 0108                           l807 01FC                           l831 0115  
                         l823 010F                           l815 0109                           l841 0122  
                         l833 0116                           l825 0110                           l817 010C  
                         l809 00FF                           l851 009C                           l843 0078  
                         l771 0054                           l835 0117                           l827 0111  
                         l819 010D                           l765 0225                           l853 01E8  
                         l845 007E                           l941 018A                           l933 0173  
                         l781 0209                           l837 0118                           l829 0114  
                         l791 01C5                           l847 0087                           l943 018F  
                         l935 0178                           l951 0164                           l783 021E  
                         l767 001D                           l839 011D                           l793 01CE  
                         l785 01B9                           l849 0096                           l937 017D  
                         l945 014E                           l953 0197                           l777 0218  
                         l961 00C3                           l787 01BC                           l939 0184  
                         l795 01D3                           l947 0151                           l955 0199  
                         l779 021B                           l971 00E1                           l963 00C8  
                         l789 01C2                           l797 01D6                           l949 015E  
                         l957 01A6                           l973 00E7                           l965 00CB  
                         l799 01DC                           l959 01AA                           l975 00ED  
                         l967 00D0                           l969 00D5                           u100 01B7  
                         u101 01B6                           u117 00F5                           u127 01E1  
                         u137 0082                           u147 0091                           u157 00A0  
                         u167 01C9                           _ISR 0211                           fsr0 0004  
                         indf 0000   __size_of_Write_USART_String 0022                          ?_ISR 0070  
                        l1001 005C                          STR_1 012E                          STR_2 013E  
                        _RCIF 0065                          i1l53 0211                          _TRMT 04C1  
           ?_Lcd_Write_String 0070                          _main 00C3                          btemp 007E  
                        start 000C            ??_Lcd_Write_String 0075               __end_of_Lcd_Cmd 01D2  
                       ??_ISR 0070                         ?_main 0070                         _ANSEL 0188  
                       _RCREG 001A                         _SPBRG 0099                         _PORTA 0005  
                       _PORTB 0006                         _PORTC 0007                         _PORTD 0008  
                       _PORTE 0009       __size_of_Lcd_Set_Cursor 0024                         _TRISA 0085  
                       _TRISB 0086                         _TRISD 0088                         _TRISE 0089  
                       _TXREG 0019               __end_of_initOsc 0078                         _setup 00FF  
                       pclath 000A                         status 0003                         wtemp0 007E  
                 ?_USART_Init 0070              __end_of_Lcd_Init 00C3              __end_of_Lcd_Port 022A  
             __initialization 000F                  __end_of_main 00FF                        ??_main 0034  
          __size_of_Lcd_Clear 000D                   initOsc@IRCF 0074           _USART_Init_BaudRate 0218  
                      ?_setup 0070                        _ANSELH 0189                     ??_Lcd_Cmd 0073  
                      _SPBRGH 009A       __size_of_Lcd_Write_Char 0016          ?_USART_Init_BaudRate 0070  
                   ??_initOsc 0072                        saved_w 007E           __size_of_USART_Init 0008  
             Lcd_Set_Cursor@a 0078               Lcd_Set_Cursor@b 0076       __end_of__initialization 0018  
           __end_of_Lcd_Clear 01F5                __pcstackCOMMON 0070         ??_USART_Init_BaudRate 0072  
               __end_of_setup 0128                _Lcd_Set_Cursor 0172                     ?_Lcd_Init 0070  
                   ?_Lcd_Port 0070                       ??_setup 0075                  Write_USART@a 0072  
                  __pbssBANK0 0020                    _data_total 0020                    __pmaintext 00C3  
               ??_Write_USART 0072                    __pintentry 0004     __size_of_Lcd_Write_String 0025  
      __end_of_Lcd_Set_Cursor 0196    __end_of_Write_USART_String 01B8                    ??_Lcd_Init 0076  
                  ??_Lcd_Port 0072      __size_of_USART_INTERRUPT 0006                    __stringtab 0128  
              _Lcd_Write_Char 01D2                       _Lcd_Cmd 01B8                  ??_USART_Init 0072  
             ?_Lcd_Set_Cursor 0076                       __ptext1 00FF                       __ptext2 001C  
                     __ptext3 0218                       __ptext4 0209                       __ptext5 021E  
                     __ptext6 0196                       __ptext7 01F5                       __ptext8 014D  
                     __ptext9 01D2                  __size_of_ISR 0007                       _initOsc 001C  
         __end_of_Write_USART 0201            __end_of_USART_Init 0211                       clrloop0 0202  
      __end_of_Lcd_Write_Char 01E8          end_of_initialization 0018                     _RCSTAbits 0018  
                   Lcd_Port@a 0072                     _PORTEbits 0009                     _TRISCbits 0087  
             ?_Lcd_Write_Char 0070             Lcd_Write_String@a 0077             Lcd_Write_String@i 0075  
                   _TXSTAbits 0098             ??_USART_INTERRUPT 0072                     _Lcd_Clear 01E8  
                 _Write_USART 01F5              _Lcd_Write_String 014D           start_initialization 000F  
                 __end_of_ISR 0218             __size_of_Lcd_Init 004B             __size_of_Lcd_Port 0006  
 __end_of_USART_Init_BaudRate 021E                    ?_Lcd_Clear 0070               Lcd_Write_Char@a 0074  
                   ___latbits 0002                 __pcstackBANK0 0034                      ?_Lcd_Cmd 0070  
          _Write_USART_String 0196              ??_Lcd_Set_Cursor 0077           ?_Write_USART_String 0070  
                   __pstrings 0128                      ?_initOsc 0070          ??_Write_USART_String 0073  
              __size_of_setup 0029             interrupt_function 0004                     clear_ram0 0201  
                    _PIE1bits 008C                      Lcd_Cmd@a 0075                   ??_Lcd_Clear 0076  
                 __stringbase 012D              ??_Lcd_Write_Char 0073               _USART_INTERRUPT 021E  
                    _Lcd_Init 0078                      _Lcd_Port 0224      __end_of_Lcd_Write_String 0172  
            __size_of_Lcd_Cmd 001A                  ?_Write_USART 0070            __end_of__stringtab 012E  
            __size_of_initOsc 005C                      __ptext10 0172                      __ptext11 0078  
                    __ptext12 01E8                      __ptext13 01B8                      __ptext14 0224  
                    __ptext15 0211                 __size_of_main 003C       __end_of_USART_INTERRUPT 0224  
                  _INTCONbits 000B           Write_USART_String@a 0074           Write_USART_String@i 0075  
                    intlevel1 0000                     stringcode 0128                    _OSCCONbits 008F  
__size_of_USART_Init_BaudRate 0006            Lcd_Set_Cursor@temp 0079                      stringdir 0128  
                    stringtab 0128                    _USART_Init 0209  
