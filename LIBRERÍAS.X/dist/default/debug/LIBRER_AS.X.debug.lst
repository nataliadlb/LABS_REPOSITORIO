

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Feb 04 15:36:43 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  0105                     	;# 
   200  0107                     	;# 
   201  0108                     	;# 
   202  0109                     	;# 
   203  010C                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  0185                     	;# 
   209  0187                     	;# 
   210  0188                     	;# 
   211  0189                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0014                     	;# 
   236  0015                     	;# 
   237  0015                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001B                     	;# 
   245  001C                     	;# 
   246  001D                     	;# 
   247  001E                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  0087                     	;# 
   253  0088                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0097                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  0105                     	;# 
   278  0107                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0187                     	;# 
   288  0188                     	;# 
   289  0189                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0008                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  000E                     	;# 
   308  000F                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0014                     	;# 
   314  0015                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001D                     	;# 
   325  001E                     	;# 
   326  001F                     	;# 
   327  0081                     	;# 
   328  0085                     	;# 
   329  0086                     	;# 
   330  0087                     	;# 
   331  0088                     	;# 
   332  0089                     	;# 
   333  008C                     	;# 
   334  008D                     	;# 
   335  008E                     	;# 
   336  008F                     	;# 
   337  0090                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0093                     	;# 
   341  0093                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0095                     	;# 
   345  0096                     	;# 
   346  0097                     	;# 
   347  0098                     	;# 
   348  0099                     	;# 
   349  009A                     	;# 
   350  009B                     	;# 
   351  009C                     	;# 
   352  009D                     	;# 
   353  009E                     	;# 
   354  009F                     	;# 
   355  0105                     	;# 
   356  0107                     	;# 
   357  0108                     	;# 
   358  0109                     	;# 
   359  010C                     	;# 
   360  010C                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0187                     	;# 
   366  0188                     	;# 
   367  0189                     	;# 
   368  018C                     	;# 
   369  018D                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000D                     	;# 
   384  000E                     	;# 
   385  000E                     	;# 
   386  000F                     	;# 
   387  0010                     	;# 
   388  0011                     	;# 
   389  0012                     	;# 
   390  0013                     	;# 
   391  0014                     	;# 
   392  0015                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  001D                     	;# 
   403  001E                     	;# 
   404  001F                     	;# 
   405  0081                     	;# 
   406  0085                     	;# 
   407  0086                     	;# 
   408  0087                     	;# 
   409  0088                     	;# 
   410  0089                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  008F                     	;# 
   415  0090                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0093                     	;# 
   419  0093                     	;# 
   420  0093                     	;# 
   421  0094                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0098                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  009F                     	;# 
   433  0105                     	;# 
   434  0107                     	;# 
   435  0108                     	;# 
   436  0109                     	;# 
   437  010C                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  010F                     	;# 
   442  0185                     	;# 
   443  0187                     	;# 
   444  0188                     	;# 
   445  0189                     	;# 
   446  018C                     	;# 
   447  018D                     	;# 
   448  000B                     _INTCON	set	11
   449  001F                     _ADCON0	set	31
   450  0009                     _PORTE	set	9
   451  0007                     _PORTC	set	7
   452  0006                     _PORTB	set	6
   453  0005                     _PORTA	set	5
   454  0001                     _TMR0	set	1
   455  0008                     _PORTD	set	8
   456  0009                     _PORTEbits	set	9
   457  001F                     _ADCON0bits	set	31
   458  001E                     _ADRESH	set	30
   459  000C                     _PIR1bits	set	12
   460  0006                     _PORTBbits	set	6
   461  000B                     _INTCONbits	set	11
   462  0081                     _OPTION_REG	set	129
   463  008C                     _PIE1bits	set	140
   464  0081                     _OPTION_REGbits	set	129
   465  0096                     _IOCBbits	set	150
   466  0089                     _TRISE	set	137
   467  0088                     _TRISD	set	136
   468  0087                     _TRISC	set	135
   469  0086                     _TRISB	set	134
   470  0085                     _TRISA	set	133
   471  009E                     _ADRESL	set	158
   472  008F                     _OSCCONbits	set	143
   473  0189                     _ANSELH	set	393
   474  0188                     _ANSEL	set	392
   475                           
   476                           	psect	cinit
   477  0011                     start_initialization:	
   478                           ; #config settings
   479                           
   480  0011                     __initialization:
   481                           
   482                           ; Clear objects allocated to COMMON
   483  0011  01FB               	clrf	__pbssCOMMON& (0+127)
   484  0012  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   485  0013  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   486                           
   487                           ; Clear objects allocated to BANK0
   488  0014  1283               	bcf	3,5	;RP0=0, select bank0
   489  0015  1303               	bcf	3,6	;RP1=0, select bank0
   490  0016  01A0               	clrf	__pbssBANK0& (0+127)
   491  0017  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   492  0018  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   493  0019  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   494  001A  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   495  001B  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   496  001C  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   497  001D  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   498  001E  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   499  001F                     end_of_initialization:	
   500                           ;End of C runtime variable initialization code
   501                           
   502  001F                     __end_of__initialization:
   503  001F  0183               	clrf	3
   504  0020  120A  118A  2A04   	ljmp	_main	;jump to C main() function
   505                           
   506                           	psect	bssCOMMON
   507  007B                     __pbssCOMMON:
   508  007B                     _ADC_NIBBLE2:
   509  007B                     	ds	1
   510  007C                     _ADC_NIBBLE1:
   511  007C                     	ds	1
   512  007D                     _Valor_hex:
   513  007D                     	ds	1
   514                           
   515                           	psect	bssBANK0
   516  0020                     __pbssBANK0:
   517  0020                     _ADC_VALOR:
   518  0020                     	ds	2
   519  0022                     _VAL_NIBBLE2:
   520  0022                     	ds	1
   521  0023                     _VAL_NIBBLE1:
   522  0023                     	ds	1
   523  0024                     _VAL_SWAP:
   524  0024                     	ds	1
   525  0025                     _VAL:
   526  0025                     	ds	1
   527  0026                     _cont_multiplex:
   528  0026                     	ds	1
   529  0027                     _ADC_SWAP:
   530  0027                     	ds	1
   531  0028                     _contador:
   532  0028                     	ds	1
   533                           
   534                           	psect	cstackCOMMON
   535  0070                     __pcstackCOMMON:
   536  0070                     ?_ADC:
   537  0070                     ?_SWAP_ADC:	
   538                           ; 1 bytes @ 0x0
   539                           
   540  0070                     ??_SWAP_ADC:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ?_NIBBLE1_ADC:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     ??_NIBBLE1_ADC:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_NIBBLE2_ADC:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ??_NIBBLE2_ADC:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_setup:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_ContadorLEDS:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_InitTimer0:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_initOsc:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_display:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ??_display:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_ISR:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_main:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ADC@ADRESL_:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ADC@ADRESH_:	
   583                           ; 1 bytes @ 0x0
   584                           
   585                           
   586                           ; 1 bytes @ 0x0
   587  0070                     	ds	1
   588  0071                     ??_ADC:
   589  0071                     NIBBLE1_ADC@VAL_ADC:	
   590                           ; 1 bytes @ 0x1
   591                           
   592  0071                     NIBBLE2_ADC@VAL_SWAP:	
   593                           ; 1 bytes @ 0x1
   594                           
   595                           
   596                           ; 1 bytes @ 0x1
   597  0071                     	ds	1
   598  0072                     display@ADC_VALOR:
   599                           
   600                           ; 1 bytes @ 0x2
   601  0072                     	ds	2
   602  0074                     SWAP_ADC@VAL_ADC:
   603                           
   604                           ; 1 bytes @ 0x4
   605  0074                     	ds	1
   606  0075                     ??_ISR:
   607                           
   608                           ; 1 bytes @ 0x5
   609  0075                     	ds	6
   610                           
   611                           	psect	cstackBANK0
   612  0029                     __pcstackBANK0:
   613  0029                     ??_ContadorLEDS:
   614  0029                     ??_InitTimer0:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0029                     ??_initOsc:	
   618                           ; 1 bytes @ 0x0
   619                           
   620                           
   621                           ; 1 bytes @ 0x0
   622  0029                     	ds	2
   623  002B                     initOsc@IRCF:
   624                           
   625                           ; 1 bytes @ 0x2
   626  002B                     	ds	1
   627  002C                     ??_setup:
   628  002C                     ??_main:	
   629                           ; 1 bytes @ 0x3
   630                           
   631                           
   632                           	psect	maintext
   633  0204                     __pmaintext:	
   634                           ; 1 bytes @ 0x3
   635 ;;
   636 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   637 ;;
   638 ;; *************** function _main *****************
   639 ;; Defined at:
   640 ;;		line 114 in file "Prueba.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;		None
   643 ;; Auto vars:     Size  Location     Type
   644 ;;		None
   645 ;; Return value:  Size  Location     Type
   646 ;;                  1    wreg      void 
   647 ;; Registers used:
   648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   649 ;; Tracked objects:
   650 ;;		On entry : B00/0
   651 ;;		On exit  : 0/0
   652 ;;		Unchanged: 0/0
   653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   654 ;;      Params:         0       0       0       0       0
   655 ;;      Locals:         0       0       0       0       0
   656 ;;      Temps:          0       0       0       0       0
   657 ;;      Totals:         0       0       0       0       0
   658 ;;Total ram usage:        0 bytes
   659 ;; Hardware stack levels required when called:    4
   660 ;; This function calls:
   661 ;;		_ContadorLEDS
   662 ;;		_setup
   663 ;; This function is called by:
   664 ;;		Startup code after reset
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           
   669                           ;psect for function _main
   670  0204                     _main:
   671  0204                     l1193:	
   672                           ;incstack = 0
   673                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   674                           
   675                           
   676                           ;Prueba.c: 115:     setup();
   677  0204  120A  118A  21A5  120A  118A  	fcall	_setup
   678  0209                     l1195:
   679                           
   680                           ;Prueba.c: 116:     contador = 0;
   681  0209  1283               	bcf	3,5	;RP0=0, select bank0
   682  020A  1303               	bcf	3,6	;RP1=0, select bank0
   683  020B  01A8               	clrf	_contador
   684  020C                     l1197:
   685                           
   686                           ;Prueba.c: 117:     cont_multiplex = 0;
   687  020C  01A6               	clrf	_cont_multiplex
   688  020D                     l1199:
   689                           
   690                           ;Prueba.c: 124:         ContadorLEDS();
   691  020D  120A  118A  223D  120A  118A  	fcall	_ContadorLEDS
   692  0212  2A0D               	goto	l1199
   693  0213  120A  118A  280E   	ljmp	start
   694  0216                     __end_of_main:
   695                           
   696                           	psect	text1
   697  01A5                     __ptext1:	
   698 ;; *************** function _setup *****************
   699 ;; Defined at:
   700 ;;		line 144 in file "Prueba.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;		None
   703 ;; Auto vars:     Size  Location     Type
   704 ;;		None
   705 ;; Return value:  Size  Location     Type
   706 ;;                  1    wreg      void 
   707 ;; Registers used:
   708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   714 ;;      Params:         0       0       0       0       0
   715 ;;      Locals:         0       0       0       0       0
   716 ;;      Temps:          0       0       0       0       0
   717 ;;      Totals:         0       0       0       0       0
   718 ;;Total ram usage:        0 bytes
   719 ;; Hardware stack levels used:    1
   720 ;; Hardware stack levels required when called:    3
   721 ;; This function calls:
   722 ;;		_InitTimer0
   723 ;;		_initOsc
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           
   730                           ;psect for function _setup
   731  01A5                     _setup:
   732  01A5                     l1095:	
   733                           ;incstack = 0
   734                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   735                           
   736                           
   737                           ;Prueba.c: 145:     initOsc(0b00000110);
   738  01A5  3006               	movlw	6
   739  01A6  120A  118A  2147  120A  118A  	fcall	_initOsc
   740  01AB                     l1097:
   741                           
   742                           ;Prueba.c: 146:     ANSEL = 0b00000001;
   743  01AB  3001               	movlw	1
   744  01AC  1683               	bsf	3,5	;RP0=1, select bank3
   745  01AD  1703               	bsf	3,6	;RP1=1, select bank3
   746  01AE  0088               	movwf	8	;volatile
   747  01AF                     l1099:
   748                           
   749                           ;Prueba.c: 147:     ANSELH = 0;
   750  01AF  0189               	clrf	9	;volatile
   751  01B0                     l1101:
   752                           
   753                           ;Prueba.c: 148:     TRISA = 0b00000001;
   754  01B0  3001               	movlw	1
   755  01B1  1683               	bsf	3,5	;RP0=1, select bank1
   756  01B2  1303               	bcf	3,6	;RP1=0, select bank1
   757  01B3  0085               	movwf	5	;volatile
   758  01B4                     l1103:
   759                           
   760                           ;Prueba.c: 149:     PORTA = 0;
   761  01B4  1283               	bcf	3,5	;RP0=0, select bank0
   762  01B5  1303               	bcf	3,6	;RP1=0, select bank0
   763  01B6  0185               	clrf	5	;volatile
   764  01B7                     l1105:
   765                           
   766                           ;Prueba.c: 150:     TRISB = 0b00000011;
   767  01B7  3003               	movlw	3
   768  01B8  1683               	bsf	3,5	;RP0=1, select bank1
   769  01B9  1303               	bcf	3,6	;RP1=0, select bank1
   770  01BA  0086               	movwf	6	;volatile
   771  01BB                     l1107:
   772                           
   773                           ;Prueba.c: 151:     PORTB = 0;
   774  01BB  1283               	bcf	3,5	;RP0=0, select bank0
   775  01BC  1303               	bcf	3,6	;RP1=0, select bank0
   776  01BD  0186               	clrf	6	;volatile
   777  01BE                     l1109:
   778                           
   779                           ;Prueba.c: 152:     TRISC = 0;
   780  01BE  1683               	bsf	3,5	;RP0=1, select bank1
   781  01BF  1303               	bcf	3,6	;RP1=0, select bank1
   782  01C0  0187               	clrf	7	;volatile
   783  01C1                     l1111:
   784                           
   785                           ;Prueba.c: 153:     PORTC = 0;
   786  01C1  1283               	bcf	3,5	;RP0=0, select bank0
   787  01C2  1303               	bcf	3,6	;RP1=0, select bank0
   788  01C3  0187               	clrf	7	;volatile
   789  01C4                     l1113:
   790                           
   791                           ;Prueba.c: 154:     TRISD = 0;
   792  01C4  1683               	bsf	3,5	;RP0=1, select bank1
   793  01C5  1303               	bcf	3,6	;RP1=0, select bank1
   794  01C6  0188               	clrf	8	;volatile
   795  01C7                     l1115:
   796                           
   797                           ;Prueba.c: 155:     PORTD = 0;
   798  01C7  1283               	bcf	3,5	;RP0=0, select bank0
   799  01C8  1303               	bcf	3,6	;RP1=0, select bank0
   800  01C9  0188               	clrf	8	;volatile
   801  01CA                     l1117:
   802                           
   803                           ;Prueba.c: 156:     TRISE = 0;
   804  01CA  1683               	bsf	3,5	;RP0=1, select bank1
   805  01CB  1303               	bcf	3,6	;RP1=0, select bank1
   806  01CC  0189               	clrf	9	;volatile
   807  01CD                     l1119:
   808                           
   809                           ;Prueba.c: 157:     PORTE = 0;
   810  01CD  1283               	bcf	3,5	;RP0=0, select bank0
   811  01CE  1303               	bcf	3,6	;RP1=0, select bank0
   812  01CF  0189               	clrf	9	;volatile
   813  01D0                     l1121:
   814                           
   815                           ;Prueba.c: 166:     InitTimer0();
   816  01D0  120A  118A  2216  120A  118A  	fcall	_InitTimer0
   817  01D5                     l1123:
   818                           
   819                           ;Prueba.c: 169:     INTCONbits.RBIE = 1;
   820  01D5  158B               	bsf	11,3	;volatile
   821  01D6                     l1125:
   822                           
   823                           ;Prueba.c: 170:     INTCONbits.RBIF = 0;
   824  01D6  100B               	bcf	11,0	;volatile
   825  01D7                     l1127:
   826                           
   827                           ;Prueba.c: 171:     IOCBbits.IOCB0 = 1;
   828  01D7  1683               	bsf	3,5	;RP0=1, select bank1
   829  01D8  1303               	bcf	3,6	;RP1=0, select bank1
   830  01D9  1416               	bsf	22,0	;volatile
   831  01DA                     l1129:
   832                           
   833                           ;Prueba.c: 172:     IOCBbits.IOCB1 = 1;
   834  01DA  1496               	bsf	22,1	;volatile
   835  01DB                     l1131:
   836                           
   837                           ;Prueba.c: 173:     OPTION_REGbits.nRBPU = 0;
   838  01DB  1381               	bcf	1,7	;volatile
   839  01DC                     l1133:
   840                           
   841                           ;Prueba.c: 176:     INTCONbits.PEIE = 1;
   842  01DC  170B               	bsf	11,6	;volatile
   843  01DD                     l1135:
   844                           
   845                           ;Prueba.c: 177:     PIE1bits.ADIE = 1;
   846  01DD  170C               	bsf	12,6	;volatile
   847  01DE                     l1137:
   848                           
   849                           ;Prueba.c: 178:     PIR1bits.ADIF = 0;
   850  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   851  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   852  01E0  130C               	bcf	12,6	;volatile
   853  01E1                     l1139:
   854                           
   855                           ;Prueba.c: 179:     ADCON0 = 0b11000001;
   856  01E1  30C1               	movlw	193
   857  01E2  009F               	movwf	31	;volatile
   858  01E3                     l1141:
   859                           
   860                           ;Prueba.c: 180:     ADCON0bits.GO_nDONE = 1;
   861  01E3  149F               	bsf	31,1	;volatile
   862  01E4                     l151:
   863  01E4  0008               	return
   864  01E5                     __end_of_setup:
   865                           
   866                           	psect	text2
   867  0147                     __ptext2:	
   868 ;; *************** function _initOsc *****************
   869 ;; Defined at:
   870 ;;		line 3 in file "Oscilador.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  IRCF            1    wreg     unsigned char 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  IRCF            1    2[BANK0 ] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       0       0       0       0
   885 ;;      Locals:         0       1       0       0       0
   886 ;;      Temps:          0       2       0       0       0
   887 ;;      Totals:         0       3       0       0       0
   888 ;;Total ram usage:        3 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; Hardware stack levels required when called:    2
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_setup
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           
   899                           ;psect for function _initOsc
   900  0147                     _initOsc:
   901                           
   902                           ;incstack = 0
   903                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
   904                           ;initOsc@IRCF stored from wreg
   905  0147  1283               	bcf	3,5	;RP0=0, select bank0
   906  0148  1303               	bcf	3,6	;RP1=0, select bank0
   907  0149  00AB               	movwf	initOsc@IRCF
   908  014A                     l1011:
   909                           
   910                           ;Oscilador.c: 5:     switch(IRCF){
   911  014A  2981               	goto	l1015
   912  014B                     l6:	
   913                           ;Oscilador.c: 6:         case 0:
   914                           
   915                           
   916                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
   917  014B  1683               	bsf	3,5	;RP0=1, select bank1
   918  014C  1303               	bcf	3,6	;RP1=0, select bank1
   919  014D  130F               	bcf	15,6	;volatile
   920                           
   921                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
   922  014E  128F               	bcf	15,5	;volatile
   923                           
   924                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
   925  014F  120F               	bcf	15,4	;volatile
   926                           
   927                           ;Oscilador.c: 10:             break;
   928  0150  29A3               	goto	l7
   929  0151                     l8:	
   930                           ;Oscilador.c: 11:          case 1:
   931                           
   932                           
   933                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
   934  0151  1683               	bsf	3,5	;RP0=1, select bank1
   935  0152  1303               	bcf	3,6	;RP1=0, select bank1
   936  0153  130F               	bcf	15,6	;volatile
   937                           
   938                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
   939  0154  128F               	bcf	15,5	;volatile
   940                           
   941                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
   942  0155  160F               	bsf	15,4	;volatile
   943                           
   944                           ;Oscilador.c: 15:             break;
   945  0156  29A3               	goto	l7
   946  0157                     l9:	
   947                           ;Oscilador.c: 16:         case 2:
   948                           
   949                           
   950                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
   951  0157  1683               	bsf	3,5	;RP0=1, select bank1
   952  0158  1303               	bcf	3,6	;RP1=0, select bank1
   953  0159  130F               	bcf	15,6	;volatile
   954                           
   955                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
   956  015A  168F               	bsf	15,5	;volatile
   957                           
   958                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
   959  015B  120F               	bcf	15,4	;volatile
   960                           
   961                           ;Oscilador.c: 20:             break;
   962  015C  29A3               	goto	l7
   963  015D                     l10:	
   964                           ;Oscilador.c: 21:         case 3:
   965                           
   966                           
   967                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
   968  015D  1683               	bsf	3,5	;RP0=1, select bank1
   969  015E  1303               	bcf	3,6	;RP1=0, select bank1
   970  015F  130F               	bcf	15,6	;volatile
   971                           
   972                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
   973  0160  168F               	bsf	15,5	;volatile
   974                           
   975                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
   976  0161  160F               	bsf	15,4	;volatile
   977                           
   978                           ;Oscilador.c: 25:             break;
   979  0162  29A3               	goto	l7
   980  0163                     l11:	
   981                           ;Oscilador.c: 26:         case 4:
   982                           
   983                           
   984                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
   985  0163  1683               	bsf	3,5	;RP0=1, select bank1
   986  0164  1303               	bcf	3,6	;RP1=0, select bank1
   987  0165  170F               	bsf	15,6	;volatile
   988                           
   989                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
   990  0166  128F               	bcf	15,5	;volatile
   991                           
   992                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
   993  0167  120F               	bcf	15,4	;volatile
   994                           
   995                           ;Oscilador.c: 30:             break;
   996  0168  29A3               	goto	l7
   997  0169                     l12:	
   998                           ;Oscilador.c: 31:         case 5:
   999                           
  1000                           
  1001                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1002  0169  1683               	bsf	3,5	;RP0=1, select bank1
  1003  016A  1303               	bcf	3,6	;RP1=0, select bank1
  1004  016B  170F               	bsf	15,6	;volatile
  1005                           
  1006                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1007  016C  128F               	bcf	15,5	;volatile
  1008                           
  1009                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1010  016D  160F               	bsf	15,4	;volatile
  1011                           
  1012                           ;Oscilador.c: 35:             break;
  1013  016E  29A3               	goto	l7
  1014  016F                     l13:	
  1015                           ;Oscilador.c: 36:         case 6:
  1016                           
  1017                           
  1018                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1019  016F  1683               	bsf	3,5	;RP0=1, select bank1
  1020  0170  1303               	bcf	3,6	;RP1=0, select bank1
  1021  0171  170F               	bsf	15,6	;volatile
  1022                           
  1023                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1024  0172  168F               	bsf	15,5	;volatile
  1025                           
  1026                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1027  0173  120F               	bcf	15,4	;volatile
  1028                           
  1029                           ;Oscilador.c: 40:             break;
  1030  0174  29A3               	goto	l7
  1031  0175                     l14:	
  1032                           ;Oscilador.c: 41:         case 7:
  1033                           
  1034                           
  1035                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1036  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1037  0176  1303               	bcf	3,6	;RP1=0, select bank1
  1038  0177  170F               	bsf	15,6	;volatile
  1039                           
  1040                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1041  0178  168F               	bsf	15,5	;volatile
  1042                           
  1043                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1044  0179  160F               	bsf	15,4	;volatile
  1045                           
  1046                           ;Oscilador.c: 45:             break;
  1047  017A  29A3               	goto	l7
  1048  017B                     l15:	
  1049                           ;Oscilador.c: 46:         default:
  1050                           
  1051                           
  1052                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1053  017B  1683               	bsf	3,5	;RP0=1, select bank1
  1054  017C  1303               	bcf	3,6	;RP1=0, select bank1
  1055  017D  170F               	bsf	15,6	;volatile
  1056                           
  1057                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1058  017E  168F               	bsf	15,5	;volatile
  1059                           
  1060                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1061  017F  120F               	bcf	15,4	;volatile
  1062                           
  1063                           ;Oscilador.c: 50:             break;
  1064  0180  29A3               	goto	l7
  1065  0181                     l1015:
  1066  0181  082B               	movf	initOsc@IRCF,w
  1067  0182  00A9               	movwf	??_initOsc
  1068  0183  01AA               	clrf	??_initOsc+1
  1069                           
  1070                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1071                           ; Switch size 1, requested type "simple"
  1072                           ; Number of cases is 1, Range of values is 0 to 0
  1073                           ; switch strategies available:
  1074                           ; Name         Instructions Cycles
  1075                           ; simple_byte            4     3 (average)
  1076                           ; direct_byte           11     8 (fixed)
  1077                           ; jumptable            260     6 (fixed)
  1078                           ;	Chosen strategy is simple_byte
  1079  0184  082A               	movf	??_initOsc+1,w
  1080  0185  3A00               	xorlw	0	; case 0
  1081  0186  1903               	skipnz
  1082  0187  2989               	goto	l1255
  1083  0188  297B               	goto	l15
  1084  0189                     l1255:
  1085                           
  1086                           ; Switch size 1, requested type "simple"
  1087                           ; Number of cases is 8, Range of values is 0 to 7
  1088                           ; switch strategies available:
  1089                           ; Name         Instructions Cycles
  1090                           ; simple_byte           25    13 (average)
  1091                           ; direct_byte           32     8 (fixed)
  1092                           ; jumptable            260     6 (fixed)
  1093                           ;	Chosen strategy is simple_byte
  1094  0189  0829               	movf	??_initOsc,w
  1095  018A  3A00               	xorlw	0	; case 0
  1096  018B  1903               	skipnz
  1097  018C  294B               	goto	l6
  1098  018D  3A01               	xorlw	1	; case 1
  1099  018E  1903               	skipnz
  1100  018F  2951               	goto	l8
  1101  0190  3A03               	xorlw	3	; case 2
  1102  0191  1903               	skipnz
  1103  0192  2957               	goto	l9
  1104  0193  3A01               	xorlw	1	; case 3
  1105  0194  1903               	skipnz
  1106  0195  295D               	goto	l10
  1107  0196  3A07               	xorlw	7	; case 4
  1108  0197  1903               	skipnz
  1109  0198  2963               	goto	l11
  1110  0199  3A01               	xorlw	1	; case 5
  1111  019A  1903               	skipnz
  1112  019B  2969               	goto	l12
  1113  019C  3A03               	xorlw	3	; case 6
  1114  019D  1903               	skipnz
  1115  019E  296F               	goto	l13
  1116  019F  3A01               	xorlw	1	; case 7
  1117  01A0  1903               	skipnz
  1118  01A1  2975               	goto	l14
  1119  01A2  297B               	goto	l15
  1120  01A3                     l7:
  1121                           
  1122                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1123  01A3  140F               	bsf	15,0	;volatile
  1124  01A4                     l16:
  1125  01A4  0008               	return
  1126  01A5                     __end_of_initOsc:
  1127                           
  1128                           	psect	text3
  1129  0216                     __ptext3:	
  1130 ;; *************** function _InitTimer0 *****************
  1131 ;; Defined at:
  1132 ;;		line 192 in file "Prueba.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1146 ;;      Params:         0       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0
  1149 ;;      Totals:         0       0       0       0       0
  1150 ;;Total ram usage:        0 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; Hardware stack levels required when called:    2
  1153 ;; This function calls:
  1154 ;;		Nothing
  1155 ;; This function is called by:
  1156 ;;		_setup
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           
  1161                           ;psect for function _InitTimer0
  1162  0216                     _InitTimer0:
  1163  0216                     l1023:	
  1164                           ;incstack = 0
  1165                           ; Regs used in _InitTimer0: [wreg]
  1166                           
  1167                           
  1168                           ;Prueba.c: 193:   OPTION_REG = 0x86;
  1169  0216  3086               	movlw	134
  1170  0217  1683               	bsf	3,5	;RP0=1, select bank1
  1171  0218  1303               	bcf	3,6	;RP1=0, select bank1
  1172  0219  0081               	movwf	1	;volatile
  1173                           
  1174                           ;Prueba.c: 194:   TMR0 = 100;
  1175  021A  3064               	movlw	100
  1176  021B  1283               	bcf	3,5	;RP0=0, select bank0
  1177  021C  1303               	bcf	3,6	;RP1=0, select bank0
  1178  021D  0081               	movwf	1	;volatile
  1179                           
  1180                           ;Prueba.c: 195:   INTCON = 0xA0;
  1181  021E  30A0               	movlw	160
  1182  021F  008B               	movwf	11	;volatile
  1183  0220                     l157:
  1184  0220  0008               	return
  1185  0221                     __end_of_InitTimer0:
  1186                           
  1187                           	psect	text4
  1188  023D                     __ptext4:	
  1189 ;; *************** function _ContadorLEDS *****************
  1190 ;; Defined at:
  1191 ;;		line 187 in file "Prueba.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;		None
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;		None
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1205 ;;      Params:         0       0       0       0       0
  1206 ;;      Locals:         0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0
  1208 ;;      Totals:         0       0       0       0       0
  1209 ;;Total ram usage:        0 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    2
  1212 ;; This function calls:
  1213 ;;		Nothing
  1214 ;; This function is called by:
  1215 ;;		_main
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           
  1220                           ;psect for function _ContadorLEDS
  1221  023D                     _ContadorLEDS:
  1222  023D                     l1143:	
  1223                           ;incstack = 0
  1224                           ; Regs used in _ContadorLEDS: [wreg]
  1225                           
  1226                           
  1227                           ;Prueba.c: 188:     PORTC = contador;
  1228  023D  1283               	bcf	3,5	;RP0=0, select bank0
  1229  023E  1303               	bcf	3,6	;RP1=0, select bank0
  1230  023F  0828               	movf	_contador,w
  1231  0240  0087               	movwf	7	;volatile
  1232  0241                     l154:
  1233  0241  0008               	return
  1234  0242                     __end_of_ContadorLEDS:
  1235                           
  1236                           	psect	text5
  1237  0023                     __ptext5:	
  1238 ;; *************** function _ISR *****************
  1239 ;; Defined at:
  1240 ;;		line 58 in file "Prueba.c"
  1241 ;; Parameters:    Size  Location     Type
  1242 ;;		None
  1243 ;; Auto vars:     Size  Location     Type
  1244 ;;		None
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1254 ;;      Params:         0       0       0       0       0
  1255 ;;      Locals:         0       0       0       0       0
  1256 ;;      Temps:          6       0       0       0       0
  1257 ;;      Totals:         6       0       0       0       0
  1258 ;;Total ram usage:        6 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:    1
  1261 ;; This function calls:
  1262 ;;		_ADC
  1263 ;;		_NIBBLE1_ADC
  1264 ;;		_NIBBLE2_ADC
  1265 ;;		_SWAP_ADC
  1266 ;;		_display
  1267 ;; This function is called by:
  1268 ;;		Interrupt level 1
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           
  1273                           ;psect for function _ISR
  1274  0023                     _ISR:
  1275  0023                     i1l1145:
  1276                           
  1277                           ;Prueba.c: 60:     if (INTCONbits.RBIF == 1){
  1278  0023  1C0B               	btfss	11,0	;volatile
  1279  0024  2826               	goto	u12_21
  1280  0025  2827               	goto	u12_20
  1281  0026                     u12_21:
  1282  0026  2840               	goto	i1l1161
  1283  0027                     u12_20:
  1284  0027                     i1l1147:
  1285                           
  1286                           ;Prueba.c: 61:         if (PORTBbits.RB0 == 1){
  1287  0027  1283               	bcf	3,5	;RP0=0, select bank0
  1288  0028  1303               	bcf	3,6	;RP1=0, select bank0
  1289  0029  1C06               	btfss	6,0	;volatile
  1290  002A  282C               	goto	u13_21
  1291  002B  282D               	goto	u13_20
  1292  002C                     u13_21:
  1293  002C  2835               	goto	i1l1153
  1294  002D                     u13_20:
  1295  002D                     i1l131:	
  1296                           ;Prueba.c: 64:             }
  1297                           
  1298                           
  1299                           ;Prueba.c: 62:             while (PORTBbits.RB0 == 1){
  1300  002D  1806               	btfsc	6,0	;volatile
  1301  002E  2830               	goto	u14_21
  1302  002F  2831               	goto	u14_20
  1303  0030                     u14_21:
  1304  0030  282D               	goto	i1l131
  1305  0031                     u14_20:
  1306  0031                     i1l1151:
  1307                           
  1308                           ;Prueba.c: 65:             contador++;
  1309  0031  3001               	movlw	1
  1310  0032  00F5               	movwf	??_ISR
  1311  0033  0875               	movf	??_ISR,w
  1312  0034  07A8               	addwf	_contador,f
  1313  0035                     i1l1153:
  1314                           
  1315                           ;Prueba.c: 67:         if (PORTBbits.RB1 == 1){
  1316  0035  1C86               	btfss	6,1	;volatile
  1317  0036  2838               	goto	u15_21
  1318  0037  2839               	goto	u15_20
  1319  0038                     u15_21:
  1320  0038  283F               	goto	i1l1159
  1321  0039                     u15_20:
  1322  0039                     i1l135:	
  1323                           ;Prueba.c: 70:             }
  1324                           
  1325                           
  1326                           ;Prueba.c: 68:             while (PORTBbits.RB1 == 1){
  1327  0039  1886               	btfsc	6,1	;volatile
  1328  003A  283C               	goto	u16_21
  1329  003B  283D               	goto	u16_20
  1330  003C                     u16_21:
  1331  003C  2839               	goto	i1l135
  1332  003D                     u16_20:
  1333  003D                     i1l1157:
  1334                           
  1335                           ;Prueba.c: 71:             contador--;
  1336  003D  3001               	movlw	1
  1337  003E  02A8               	subwf	_contador,f
  1338  003F                     i1l1159:
  1339                           
  1340                           ;Prueba.c: 73:         INTCONbits.RBIF = 0;
  1341  003F  100B               	bcf	11,0	;volatile
  1342  0040                     i1l1161:
  1343                           
  1344                           ;Prueba.c: 76:     if (PIR1bits.ADIF == 1){
  1345  0040  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0041  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0042  1F0C               	btfss	12,6	;volatile
  1348  0043  2845               	goto	u17_21
  1349  0044  2846               	goto	u17_20
  1350  0045                     u17_21:
  1351  0045  2888               	goto	i1l1177
  1352  0046                     u17_20:
  1353  0046                     i1l1163:
  1354                           
  1355                           ;Prueba.c: 77:         ADC_VALOR = ADC(ADRESL, ADRESH);
  1356  0046  081E               	movf	30,w	;volatile
  1357  0047  00F5               	movwf	??_ISR
  1358  0048  0875               	movf	??_ISR,w
  1359  0049  00F0               	movwf	ADC@ADRESH_
  1360  004A  1683               	bsf	3,5	;RP0=1, select bank1
  1361  004B  1303               	bcf	3,6	;RP1=0, select bank1
  1362  004C  081E               	movf	30,w	;volatile
  1363  004D  120A  118A  2235  120A  118A  	fcall	_ADC
  1364  0052  00F6               	movwf	??_ISR+1
  1365  0053  01F7               	clrf	??_ISR+2
  1366  0054  0876               	movf	??_ISR+1,w
  1367  0055  1283               	bcf	3,5	;RP0=0, select bank0
  1368  0056  1303               	bcf	3,6	;RP1=0, select bank0
  1369  0057  00A0               	movwf	_ADC_VALOR
  1370  0058  0877               	movf	??_ISR+2,w
  1371  0059  00A1               	movwf	_ADC_VALOR+1
  1372  005A                     i1l1165:
  1373                           
  1374                           ;Prueba.c: 78:         ADC_SWAP = SWAP_ADC(ADC_VALOR);
  1375  005A  0820               	movf	_ADC_VALOR,w
  1376  005B  120A  118A  21E5  120A  118A  	fcall	_SWAP_ADC
  1377  0060  00F5               	movwf	??_ISR
  1378  0061  0875               	movf	??_ISR,w
  1379  0062  1283               	bcf	3,5	;RP0=0, select bank0
  1380  0063  1303               	bcf	3,6	;RP1=0, select bank0
  1381  0064  00A7               	movwf	_ADC_SWAP
  1382  0065                     i1l1167:
  1383                           
  1384                           ;Prueba.c: 79:         ADC_NIBBLE1 = NIBBLE1_ADC(ADC_VALOR);
  1385  0065  0820               	movf	_ADC_VALOR,w
  1386  0066  120A  118A  222B  120A  118A  	fcall	_NIBBLE1_ADC
  1387  006B  00F5               	movwf	??_ISR
  1388  006C  0875               	movf	??_ISR,w
  1389  006D  00FC               	movwf	_ADC_NIBBLE1
  1390  006E                     i1l1169:
  1391                           
  1392                           ;Prueba.c: 80:         ADC_NIBBLE2 = NIBBLE2_ADC(ADC_SWAP);
  1393  006E  1283               	bcf	3,5	;RP0=0, select bank0
  1394  006F  1303               	bcf	3,6	;RP1=0, select bank0
  1395  0070  0827               	movf	_ADC_SWAP,w
  1396  0071  120A  118A  2221  120A  118A  	fcall	_NIBBLE2_ADC
  1397  0076  00F5               	movwf	??_ISR
  1398  0077  0875               	movf	??_ISR,w
  1399  0078  00FB               	movwf	_ADC_NIBBLE2
  1400  0079                     i1l1171:
  1401                           
  1402                           ;Prueba.c: 81:         PIR1bits.ADIF = 0;
  1403  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1404  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1405  007B  130C               	bcf	12,6	;volatile
  1406  007C                     i1l1173:
  1407                           
  1408                           ;Prueba.c: 82:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1409  007C  301A               	movlw	26
  1410  007D  00F6               	movwf	??_ISR+1
  1411  007E  30F8               	movlw	248
  1412  007F  00F5               	movwf	??_ISR
  1413  0080                     u19_27:
  1414  0080  0BF5               	decfsz	??_ISR,f
  1415  0081  2880               	goto	u19_27
  1416  0082  0BF6               	decfsz	??_ISR+1,f
  1417  0083  2880               	goto	u19_27
  1418  0084  0000               	nop
  1419  0085                     i1l1175:
  1420                           
  1421                           ;Prueba.c: 83:         ADCON0bits.GO_nDONE = 1;
  1422  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1423  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1424  0087  149F               	bsf	31,1	;volatile
  1425  0088                     i1l1177:
  1426                           
  1427                           ;Prueba.c: 86:     if (INTCONbits.TMR0IF == 1){
  1428  0088  1D0B               	btfss	11,2	;volatile
  1429  0089  288B               	goto	u18_21
  1430  008A  288C               	goto	u18_20
  1431  008B                     u18_21:
  1432  008B  28B0               	goto	i1l140
  1433  008C                     u18_20:
  1434  008C                     i1l1179:
  1435                           
  1436                           ;Prueba.c: 87:         PORTEbits.RE1 = 1;
  1437  008C  1489               	bsf	9,1	;volatile
  1438                           
  1439                           ;Prueba.c: 88:         PORTEbits.RE2 = 0;
  1440  008D  1109               	bcf	9,2	;volatile
  1441  008E                     i1l1181:
  1442                           
  1443                           ;Prueba.c: 89:         PORTD = display(ADC_NIBBLE2);
  1444  008E  087B               	movf	_ADC_NIBBLE2,w
  1445  008F  120A  118A  20B9  120A  118A  	fcall	_display
  1446  0094  1283               	bcf	3,5	;RP0=0, select bank0
  1447  0095  1303               	bcf	3,6	;RP1=0, select bank0
  1448  0096  0088               	movwf	8	;volatile
  1449  0097                     i1l1183:
  1450                           
  1451                           ;Prueba.c: 90:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1452  0097  3003               	movlw	3
  1453  0098  00F6               	movwf	??_ISR+1
  1454  0099  3097               	movlw	151
  1455  009A  00F5               	movwf	??_ISR
  1456  009B                     u20_27:
  1457  009B  0BF5               	decfsz	??_ISR,f
  1458  009C  289B               	goto	u20_27
  1459  009D  0BF6               	decfsz	??_ISR+1,f
  1460  009E  289B               	goto	u20_27
  1461  009F  28A0               	nop2
  1462  00A0                     i1l1185:
  1463                           
  1464                           ;Prueba.c: 91:         PORTEbits.RE1 = 0;
  1465  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1466  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1467  00A2  1089               	bcf	9,1	;volatile
  1468  00A3                     i1l1187:
  1469                           
  1470                           ;Prueba.c: 92:         PORTEbits.RE2 = 1;
  1471  00A3  1509               	bsf	9,2	;volatile
  1472  00A4                     i1l1189:
  1473                           
  1474                           ;Prueba.c: 93:         PORTD = display(ADC_NIBBLE1);
  1475  00A4  087C               	movf	_ADC_NIBBLE1,w
  1476  00A5  120A  118A  20B9  120A  118A  	fcall	_display
  1477  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1478  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1479  00AC  0088               	movwf	8	;volatile
  1480                           
  1481                           ;Prueba.c: 95:         TMR0 = 100;
  1482  00AD  3064               	movlw	100
  1483  00AE  0081               	movwf	1	;volatile
  1484  00AF                     i1l1191:
  1485                           
  1486                           ;Prueba.c: 96:         INTCONbits.TMR0IF = 0;
  1487  00AF  110B               	bcf	11,2	;volatile
  1488  00B0                     i1l140:
  1489  00B0  087A               	movf	??_ISR+5,w
  1490  00B1  008A               	movwf	10
  1491  00B2  0879               	movf	??_ISR+4,w
  1492  00B3  0084               	movwf	4
  1493  00B4  0E78               	swapf	??_ISR+3,w
  1494  00B5  0083               	movwf	3
  1495  00B6  0EFE               	swapf	btemp,f
  1496  00B7  0E7E               	swapf	btemp,w
  1497  00B8  0009               	retfie
  1498  00B9                     __end_of_ISR:
  1499                           
  1500                           	psect	intentry
  1501  0004                     __pintentry:	
  1502                           ;incstack = 0
  1503                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1504                           
  1505  0004                     interrupt_function:
  1506  007E                     saved_w	set	btemp
  1507  0004  00FE               	movwf	btemp
  1508  0005  0E03               	swapf	3,w
  1509  0006  00F8               	movwf	??_ISR+3
  1510  0007  0804               	movf	4,w
  1511  0008  00F9               	movwf	??_ISR+4
  1512  0009  080A               	movf	10,w
  1513  000A  00FA               	movwf	??_ISR+5
  1514  000B  120A  118A  2823   	ljmp	_ISR
  1515                           
  1516                           	psect	text6
  1517  00B9                     __ptext6:	
  1518 ;; *************** function _display *****************
  1519 ;; Defined at:
  1520 ;;		line 5 in file "Display.c"
  1521 ;; Parameters:    Size  Location     Type
  1522 ;;  ADC_VALOR       1    wreg     unsigned char 
  1523 ;; Auto vars:     Size  Location     Type
  1524 ;;  ADC_VALOR       1    2[COMMON] unsigned char 
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      unsigned char 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1534 ;;      Params:         0       0       0       0       0
  1535 ;;      Locals:         1       0       0       0       0
  1536 ;;      Temps:          2       0       0       0       0
  1537 ;;      Totals:         3       0       0       0       0
  1538 ;;Total ram usage:        3 bytes
  1539 ;; Hardware stack levels used:    1
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_ISR
  1544 ;;		_DisplayADC1
  1545 ;;		_DisplayADC2
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           
  1550                           ;psect for function _display
  1551  00B9                     _display:
  1552                           
  1553                           ;incstack = 0
  1554                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  1555                           ;display@ADC_VALOR stored from wreg
  1556  00B9  00F2               	movwf	display@ADC_VALOR
  1557  00BA                     i1l1025:
  1558                           
  1559                           ;Display.c: 7:     switch(ADC_VALOR){
  1560  00BA  290B               	goto	i1l1063
  1561  00BB                     i1l1027:
  1562                           
  1563                           ;Display.c: 9:             Valor_hex = 0b00111111;
  1564  00BB  303F               	movlw	63
  1565  00BC  00F0               	movwf	??_display
  1566  00BD  0870               	movf	??_display,w
  1567  00BE  00FD               	movwf	_Valor_hex
  1568                           
  1569                           ;Display.c: 10:             break;
  1570  00BF  2945               	goto	i1l1065
  1571  00C0                     i1l1029:
  1572                           
  1573                           ;Display.c: 12:             Valor_hex = 0b000000110;
  1574  00C0  3006               	movlw	6
  1575  00C1  00F0               	movwf	??_display
  1576  00C2  0870               	movf	??_display,w
  1577  00C3  00FD               	movwf	_Valor_hex
  1578                           
  1579                           ;Display.c: 13:             break;
  1580  00C4  2945               	goto	i1l1065
  1581  00C5                     i1l1031:
  1582                           
  1583                           ;Display.c: 15:             Valor_hex = 0b11011011;
  1584  00C5  30DB               	movlw	219
  1585  00C6  00F0               	movwf	??_display
  1586  00C7  0870               	movf	??_display,w
  1587  00C8  00FD               	movwf	_Valor_hex
  1588                           
  1589                           ;Display.c: 16:             break;
  1590  00C9  2945               	goto	i1l1065
  1591  00CA                     i1l1033:
  1592                           
  1593                           ;Display.c: 18:             Valor_hex = 0b01001111;
  1594  00CA  304F               	movlw	79
  1595  00CB  00F0               	movwf	??_display
  1596  00CC  0870               	movf	??_display,w
  1597  00CD  00FD               	movwf	_Valor_hex
  1598                           
  1599                           ;Display.c: 19:             break;
  1600  00CE  2945               	goto	i1l1065
  1601  00CF                     i1l1035:
  1602                           
  1603                           ;Display.c: 21:             Valor_hex = 0b01100110;
  1604  00CF  3066               	movlw	102
  1605  00D0  00F0               	movwf	??_display
  1606  00D1  0870               	movf	??_display,w
  1607  00D2  00FD               	movwf	_Valor_hex
  1608                           
  1609                           ;Display.c: 22:             break;
  1610  00D3  2945               	goto	i1l1065
  1611  00D4                     i1l1037:
  1612                           
  1613                           ;Display.c: 24:             Valor_hex = 0b01101101;
  1614  00D4  306D               	movlw	109
  1615  00D5  00F0               	movwf	??_display
  1616  00D6  0870               	movf	??_display,w
  1617  00D7  00FD               	movwf	_Valor_hex
  1618                           
  1619                           ;Display.c: 25:             break;
  1620  00D8  2945               	goto	i1l1065
  1621  00D9                     i1l1039:
  1622                           
  1623                           ;Display.c: 27:             Valor_hex = 0b01111101;
  1624  00D9  307D               	movlw	125
  1625  00DA  00F0               	movwf	??_display
  1626  00DB  0870               	movf	??_display,w
  1627  00DC  00FD               	movwf	_Valor_hex
  1628                           
  1629                           ;Display.c: 28:             break;
  1630  00DD  2945               	goto	i1l1065
  1631  00DE                     i1l1041:
  1632                           
  1633                           ;Display.c: 30:             Valor_hex = 0b00000111;
  1634  00DE  3007               	movlw	7
  1635  00DF  00F0               	movwf	??_display
  1636  00E0  0870               	movf	??_display,w
  1637  00E1  00FD               	movwf	_Valor_hex
  1638                           
  1639                           ;Display.c: 31:             break;
  1640  00E2  2945               	goto	i1l1065
  1641  00E3                     i1l1043:
  1642                           
  1643                           ;Display.c: 33:             Valor_hex = 0b01111111;
  1644  00E3  307F               	movlw	127
  1645  00E4  00F0               	movwf	??_display
  1646  00E5  0870               	movf	??_display,w
  1647  00E6  00FD               	movwf	_Valor_hex
  1648                           
  1649                           ;Display.c: 34:             break;
  1650  00E7  2945               	goto	i1l1065
  1651  00E8                     i1l1045:
  1652                           
  1653                           ;Display.c: 36:             Valor_hex = 0b01101111;
  1654  00E8  306F               	movlw	111
  1655  00E9  00F0               	movwf	??_display
  1656  00EA  0870               	movf	??_display,w
  1657  00EB  00FD               	movwf	_Valor_hex
  1658                           
  1659                           ;Display.c: 37:             break;
  1660  00EC  2945               	goto	i1l1065
  1661  00ED                     i1l1047:
  1662                           
  1663                           ;Display.c: 39:             Valor_hex = 0b01110111;
  1664  00ED  3077               	movlw	119
  1665  00EE  00F0               	movwf	??_display
  1666  00EF  0870               	movf	??_display,w
  1667  00F0  00FD               	movwf	_Valor_hex
  1668                           
  1669                           ;Display.c: 40:             break;
  1670  00F1  2945               	goto	i1l1065
  1671  00F2                     i1l1049:
  1672                           
  1673                           ;Display.c: 42:             Valor_hex = 0b01111100;
  1674  00F2  307C               	movlw	124
  1675  00F3  00F0               	movwf	??_display
  1676  00F4  0870               	movf	??_display,w
  1677  00F5  00FD               	movwf	_Valor_hex
  1678                           
  1679                           ;Display.c: 43:             break;
  1680  00F6  2945               	goto	i1l1065
  1681  00F7                     i1l1051:
  1682                           
  1683                           ;Display.c: 45:             Valor_hex = 0b00111001;
  1684  00F7  3039               	movlw	57
  1685  00F8  00F0               	movwf	??_display
  1686  00F9  0870               	movf	??_display,w
  1687  00FA  00FD               	movwf	_Valor_hex
  1688                           
  1689                           ;Display.c: 46:             break;
  1690  00FB  2945               	goto	i1l1065
  1691  00FC                     i1l1053:
  1692                           
  1693                           ;Display.c: 48:             Valor_hex = 0b01011110;
  1694  00FC  305E               	movlw	94
  1695  00FD  00F0               	movwf	??_display
  1696  00FE  0870               	movf	??_display,w
  1697  00FF  00FD               	movwf	_Valor_hex
  1698                           
  1699                           ;Display.c: 49:             break;
  1700  0100  2945               	goto	i1l1065
  1701  0101                     i1l1055:
  1702                           
  1703                           ;Display.c: 51:             Valor_hex = 0b01111001;
  1704  0101  3079               	movlw	121
  1705  0102  00F0               	movwf	??_display
  1706  0103  0870               	movf	??_display,w
  1707  0104  00FD               	movwf	_Valor_hex
  1708                           
  1709                           ;Display.c: 52:             break;
  1710  0105  2945               	goto	i1l1065
  1711  0106                     i1l1057:
  1712                           
  1713                           ;Display.c: 54:             Valor_hex = 0b01110001;
  1714  0106  3071               	movlw	113
  1715  0107  00F0               	movwf	??_display
  1716  0108  0870               	movf	??_display,w
  1717  0109  00FD               	movwf	_Valor_hex
  1718                           
  1719                           ;Display.c: 55:             break;
  1720  010A  2945               	goto	i1l1065
  1721  010B                     i1l1063:
  1722  010B  0872               	movf	display@ADC_VALOR,w
  1723  010C  00F0               	movwf	??_display
  1724  010D  01F1               	clrf	??_display+1
  1725                           
  1726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1727                           ; Switch size 1, requested type "simple"
  1728                           ; Number of cases is 1, Range of values is 0 to 0
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; simple_byte            4     3 (average)
  1732                           ; direct_byte           11     8 (fixed)
  1733                           ; jumptable            260     6 (fixed)
  1734                           ;	Chosen strategy is simple_byte
  1735  010E  0871               	movf	??_display+1,w
  1736  010F  3A00               	xorlw	0	; case 0
  1737  0110  1903               	skipnz
  1738  0111  2913               	goto	i1l1257
  1739  0112  28BB               	goto	i1l1027
  1740  0113                     i1l1257:
  1741                           
  1742                           ; Switch size 1, requested type "simple"
  1743                           ; Number of cases is 16, Range of values is 0 to 15
  1744                           ; switch strategies available:
  1745                           ; Name         Instructions Cycles
  1746                           ; simple_byte           49    25 (average)
  1747                           ; direct_byte           56     8 (fixed)
  1748                           ; jumptable            260     6 (fixed)
  1749                           ;	Chosen strategy is simple_byte
  1750  0113  0870               	movf	??_display,w
  1751  0114  3A00               	xorlw	0	; case 0
  1752  0115  1903               	skipnz
  1753  0116  28BB               	goto	i1l1027
  1754  0117  3A01               	xorlw	1	; case 1
  1755  0118  1903               	skipnz
  1756  0119  28C0               	goto	i1l1029
  1757  011A  3A03               	xorlw	3	; case 2
  1758  011B  1903               	skipnz
  1759  011C  28C5               	goto	i1l1031
  1760  011D  3A01               	xorlw	1	; case 3
  1761  011E  1903               	skipnz
  1762  011F  28CA               	goto	i1l1033
  1763  0120  3A07               	xorlw	7	; case 4
  1764  0121  1903               	skipnz
  1765  0122  28CF               	goto	i1l1035
  1766  0123  3A01               	xorlw	1	; case 5
  1767  0124  1903               	skipnz
  1768  0125  28D4               	goto	i1l1037
  1769  0126  3A03               	xorlw	3	; case 6
  1770  0127  1903               	skipnz
  1771  0128  28D9               	goto	i1l1039
  1772  0129  3A01               	xorlw	1	; case 7
  1773  012A  1903               	skipnz
  1774  012B  28DE               	goto	i1l1041
  1775  012C  3A0F               	xorlw	15	; case 8
  1776  012D  1903               	skipnz
  1777  012E  28E3               	goto	i1l1043
  1778  012F  3A01               	xorlw	1	; case 9
  1779  0130  1903               	skipnz
  1780  0131  28E8               	goto	i1l1045
  1781  0132  3A03               	xorlw	3	; case 10
  1782  0133  1903               	skipnz
  1783  0134  28ED               	goto	i1l1047
  1784  0135  3A01               	xorlw	1	; case 11
  1785  0136  1903               	skipnz
  1786  0137  28F2               	goto	i1l1049
  1787  0138  3A07               	xorlw	7	; case 12
  1788  0139  1903               	skipnz
  1789  013A  28F7               	goto	i1l1051
  1790  013B  3A01               	xorlw	1	; case 13
  1791  013C  1903               	skipnz
  1792  013D  28FC               	goto	i1l1053
  1793  013E  3A03               	xorlw	3	; case 14
  1794  013F  1903               	skipnz
  1795  0140  2901               	goto	i1l1055
  1796  0141  3A01               	xorlw	1	; case 15
  1797  0142  1903               	skipnz
  1798  0143  2906               	goto	i1l1057
  1799  0144  28BB               	goto	i1l1027
  1800  0145                     i1l1065:
  1801                           
  1802                           ;Display.c: 60:    return Valor_hex;
  1803  0145  087D               	movf	_Valor_hex,w
  1804  0146                     i1l40:
  1805  0146  0008               	return
  1806  0147                     __end_of_display:
  1807                           
  1808                           	psect	text7
  1809  01E5                     __ptext7:	
  1810 ;; *************** function _SWAP_ADC *****************
  1811 ;; Defined at:
  1812 ;;		line 14 in file "Config_ADC.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  VAL_ADC         1    wreg     unsigned char 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  VAL_ADC         1    4[COMMON] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      unsigned char 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         0       0       0       0       0
  1827 ;;      Locals:         1       0       0       0       0
  1828 ;;      Temps:          4       0       0       0       0
  1829 ;;      Totals:         5       0       0       0       0
  1830 ;;Total ram usage:        5 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_ISR
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           
  1840                           ;psect for function _SWAP_ADC
  1841  01E5                     _SWAP_ADC:
  1842                           
  1843                           ;incstack = 0
  1844                           ; Regs used in _SWAP_ADC: [wreg+status,2+status,0]
  1845                           ;SWAP_ADC@VAL_ADC stored from wreg
  1846  01E5  00F4               	movwf	SWAP_ADC@VAL_ADC
  1847  01E6                     i1l1077:
  1848                           
  1849                           ;Config_ADC.c: 15:     VAL_SWAP = (((VAL_ADC & 0x0F)<<4) | ((VAL_ADC & 0xF0)>>4));
  1850  01E6  0874               	movf	SWAP_ADC@VAL_ADC,w
  1851  01E7  00F0               	movwf	??_SWAP_ADC
  1852  01E8  3004               	movlw	4
  1853  01E9                     u10_25:
  1854  01E9  1003               	clrc
  1855  01EA  0CF0               	rrf	??_SWAP_ADC,f
  1856  01EB  3EFF               	addlw	-1
  1857  01EC  1D03               	skipz
  1858  01ED  29E9               	goto	u10_25
  1859  01EE  300F               	movlw	15
  1860  01EF  0570               	andwf	??_SWAP_ADC,w
  1861  01F0  00F1               	movwf	??_SWAP_ADC+1
  1862  01F1  0874               	movf	SWAP_ADC@VAL_ADC,w
  1863  01F2  390F               	andlw	15
  1864  01F3  00F2               	movwf	??_SWAP_ADC+2
  1865  01F4  3003               	movlw	3
  1866  01F5                     u11_25:
  1867  01F5  1003               	clrc
  1868  01F6  0DF2               	rlf	??_SWAP_ADC+2,f
  1869  01F7  3EFF               	addlw	-1
  1870  01F8  1D03               	skipz
  1871  01F9  29F5               	goto	u11_25
  1872  01FA  1003               	clrc
  1873  01FB  0D72               	rlf	??_SWAP_ADC+2,w
  1874  01FC  0471               	iorwf	??_SWAP_ADC+1,w
  1875  01FD  00F3               	movwf	??_SWAP_ADC+3
  1876  01FE  0873               	movf	??_SWAP_ADC+3,w
  1877  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1879  0201  00A4               	movwf	_VAL_SWAP
  1880  0202                     i1l1079:
  1881                           
  1882                           ;Config_ADC.c: 16:     return VAL_SWAP;
  1883  0202  0824               	movf	_VAL_SWAP,w
  1884  0203                     i1l181:
  1885  0203  0008               	return
  1886  0204                     __end_of_SWAP_ADC:
  1887                           
  1888                           	psect	text8
  1889  0221                     __ptext8:	
  1890 ;; *************** function _NIBBLE2_ADC *****************
  1891 ;; Defined at:
  1892 ;;		line 24 in file "Config_ADC.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  VAL_SWAP        1    wreg     unsigned char 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  VAL_SWAP        1    1[COMMON] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      unsigned char 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1906 ;;      Params:         0       0       0       0       0
  1907 ;;      Locals:         1       0       0       0       0
  1908 ;;      Temps:          1       0       0       0       0
  1909 ;;      Totals:         2       0       0       0       0
  1910 ;;Total ram usage:        2 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; This function calls:
  1913 ;;		Nothing
  1914 ;; This function is called by:
  1915 ;;		_ISR
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _NIBBLE2_ADC
  1921  0221                     _NIBBLE2_ADC:
  1922                           
  1923                           ;incstack = 0
  1924                           ; Regs used in _NIBBLE2_ADC: [wreg+status,2]
  1925                           ;NIBBLE2_ADC@VAL_SWAP stored from wreg
  1926  0221  00F1               	movwf	NIBBLE2_ADC@VAL_SWAP
  1927  0222                     i1l1089:
  1928                           
  1929                           ;Config_ADC.c: 25:     VAL_NIBBLE2 = VAL_SWAP & 15;
  1930  0222  0871               	movf	NIBBLE2_ADC@VAL_SWAP,w
  1931  0223  390F               	andlw	15
  1932  0224  00F0               	movwf	??_NIBBLE2_ADC
  1933  0225  0870               	movf	??_NIBBLE2_ADC,w
  1934  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1935  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1936  0228  00A2               	movwf	_VAL_NIBBLE2
  1937  0229                     i1l1091:
  1938                           
  1939                           ;Config_ADC.c: 26:     return VAL_NIBBLE2;
  1940  0229  0822               	movf	_VAL_NIBBLE2,w
  1941  022A                     i1l187:
  1942  022A  0008               	return
  1943  022B                     __end_of_NIBBLE2_ADC:
  1944                           
  1945                           	psect	text9
  1946  022B                     __ptext9:	
  1947 ;; *************** function _NIBBLE1_ADC *****************
  1948 ;; Defined at:
  1949 ;;		line 19 in file "Config_ADC.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  VAL_ADC         1    wreg     unsigned char 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  VAL_ADC         1    1[COMMON] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      unsigned char 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1963 ;;      Params:         0       0       0       0       0
  1964 ;;      Locals:         1       0       0       0       0
  1965 ;;      Temps:          1       0       0       0       0
  1966 ;;      Totals:         2       0       0       0       0
  1967 ;;Total ram usage:        2 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; This function calls:
  1970 ;;		Nothing
  1971 ;; This function is called by:
  1972 ;;		_ISR
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           
  1977                           ;psect for function _NIBBLE1_ADC
  1978  022B                     _NIBBLE1_ADC:
  1979                           
  1980                           ;incstack = 0
  1981                           ; Regs used in _NIBBLE1_ADC: [wreg+status,2]
  1982                           ;NIBBLE1_ADC@VAL_ADC stored from wreg
  1983  022B  00F1               	movwf	NIBBLE1_ADC@VAL_ADC
  1984  022C                     i1l1083:
  1985                           
  1986                           ;Config_ADC.c: 20:     VAL_NIBBLE1 = VAL_ADC & 15;
  1987  022C  0871               	movf	NIBBLE1_ADC@VAL_ADC,w
  1988  022D  390F               	andlw	15
  1989  022E  00F0               	movwf	??_NIBBLE1_ADC
  1990  022F  0870               	movf	??_NIBBLE1_ADC,w
  1991  0230  1283               	bcf	3,5	;RP0=0, select bank0
  1992  0231  1303               	bcf	3,6	;RP1=0, select bank0
  1993  0232  00A3               	movwf	_VAL_NIBBLE1
  1994  0233                     i1l1085:
  1995                           
  1996                           ;Config_ADC.c: 21:     return VAL_NIBBLE1;
  1997  0233  0823               	movf	_VAL_NIBBLE1,w
  1998  0234                     i1l184:
  1999  0234  0008               	return
  2000  0235                     __end_of_NIBBLE1_ADC:
  2001                           
  2002                           	psect	text10
  2003  0235                     __ptext10:	
  2004 ;; *************** function _ADC *****************
  2005 ;; Defined at:
  2006 ;;		line 9 in file "Config_ADC.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  ADRESL_         1    wreg     unsigned char 
  2009 ;;  ADRESH_         1    0[COMMON] unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  ADRESL_         1    0[COMMON] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      unsigned char 
  2014 ;; Registers used:
  2015 ;;		wreg
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2021 ;;      Params:         1       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0
  2023 ;;      Temps:          1       0       0       0       0
  2024 ;;      Totals:         2       0       0       0       0
  2025 ;;Total ram usage:        2 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; This function calls:
  2028 ;;		Nothing
  2029 ;; This function is called by:
  2030 ;;		_ISR
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           
  2035                           ;psect for function _ADC
  2036  0235                     _ADC:
  2037  0235                     i1l1073:	
  2038                           ;incstack = 0
  2039                           ; Regs used in _ADC: [wreg]
  2040                           
  2041                           
  2042                           ;Config_ADC.c: 10:     VAL = (ADRESL << 8) | ADRESH;
  2043  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0237  081E               	movf	30,w	;volatile
  2046  0238  00F1               	movwf	??_ADC
  2047  0239  0871               	movf	??_ADC,w
  2048  023A  00A5               	movwf	_VAL
  2049                           
  2050                           ;Config_ADC.c: 11:     return VAL;
  2051  023B  0825               	movf	_VAL,w
  2052  023C                     i1l178:
  2053  023C  0008               	return
  2054  023D                     __end_of_ADC:
  2055  007E                     btemp	set	126	;btemp
  2056  007E                     wtemp0	set	126
  2057                           
  2058                           	psect	config
  2059                           
  2060                           ;Config register CONFIG1 @ 0x2007
  2061                           ;	Oscillator Selection bits
  2062                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  2063                           ;	Watchdog Timer Enable bit
  2064                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2065                           ;	Power-up Timer Enable bit
  2066                           ;	PWRTE = OFF, PWRT disabled
  2067                           ;	RE3/MCLR pin function select bit
  2068                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2069                           ;	Code Protection bit
  2070                           ;	CP = OFF, Program memory code protection is disabled
  2071                           ;	Data Code Protection bit
  2072                           ;	CPD = OFF, Data memory code protection is disabled
  2073                           ;	Brown Out Reset Selection bits
  2074                           ;	BOREN = OFF, BOR disabled
  2075                           ;	Internal External Switchover bit
  2076                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2077                           ;	Fail-Safe Clock Monitor Enabled bit
  2078                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2079                           ;	Low Voltage Programming Enable bit
  2080                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2081                           ;	In-Circuit Debugger Mode bit
  2082                           ;	DEBUG = 0x1, unprogrammed default
  2083  2007                     	org	8199
  2084  2007  20D1               	dw	8401
  2085                           
  2086                           ;Config register CONFIG2 @ 0x2008
  2087                           ;	Brown-out Reset Selection bit
  2088                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2089                           ;	Flash Program Memory Self Write Enable bits
  2090                           ;	WRT = OFF, Write protection off
  2091  2008                     	org	8200
  2092  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      3      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_SWAP_ADC

Critical Paths under _main in BANK0

    _setup->_initOsc

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      22
                       _ContadorLEDS
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      22
                         _InitTimer0
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _InitTimer0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ContadorLEDS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0     186
                                              5 COMMON     6     6      0
                                _ADC
                        _NIBBLE1_ADC
                        _NIBBLE2_ADC
                           _SWAP_ADC
                            _display
 ---------------------------------------------------------------------------------
 (4) _display                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SWAP_ADC                                             5     5      0      44
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (4) _NIBBLE2_ADC                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _NIBBLE1_ADC                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC                                                  3     2      1      76
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ContadorLEDS
   _setup
     _InitTimer0
     _initOsc

 _ISR (ROOT)
   _ADC
   _NIBBLE1_ADC
   _NIBBLE2_ADC
   _SWAP_ADC
   _display

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3       C       5       15.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1A      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Feb 04 15:36:43 2021

                      l6 014B                        l7 01A3                        l8 0151  
                      l9 0157                       l10 015D                       l11 0163  
                     l12 0169                       l13 016F                       l14 0175  
                     l15 017B                       l16 01A4           ??_ContadorLEDS 0029  
                    l151 01E4                      l154 0241                      l157 0220  
                    _ADC 0235                      _ISR 0023                      _VAL 0025  
                    fsr0 0004                     ?_ADC 0070                     ?_ISR 0070  
                   l1011 014A                     l1101 01B0                     l1023 0216  
                   l1015 0181                     l1111 01C1                     l1103 01B4  
                   l1121 01D0                     l1113 01C4                     l1105 01B7  
                   l1131 01DB                     l1123 01D5                     l1115 01C7  
                   l1107 01BB                     l1141 01E3                     l1133 01DC  
                   l1125 01D6                     l1117 01CA                     l1109 01BE  
                   l1143 023D                     l1135 01DD                     l1127 01D7  
                   l1119 01CD                     l1137 01DE                     l1129 01DA  
                   l1139 01E1                     l1255 0189                     l1095 01A5  
                   l1097 01AB                     l1193 0204                     l1099 01AF  
                   l1195 0209                     l1197 020C                     l1199 020D  
                   i1l40 0146                     _TMR0 0001                     _main 0204  
                   btemp 007E                     start 000E                    ??_ADC 0071  
                  ??_ISR 0075           _cont_multiplex 0026                    ?_main 0070  
                  _ANSEL 0188                    i1l131 002D                    i1l140 00B0  
                  i1l135 0039                    i1l181 0203                    i1l184 0234  
                  i1l178 023C                    i1l187 022A                    u10_25 01E9  
                  u11_25 01F5                    u12_20 0027                    u12_21 0026  
                  u20_27 009B                    u13_20 002D                    u13_21 002C  
                  u14_20 0031                    u14_21 0030                    u15_20 0039  
                  u15_21 0038                    u16_20 003D                    u16_21 003C  
                  u17_20 0046                    u17_21 0045                    u18_20 008C  
                  u18_21 008B                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _PORTE 0009  
                  u19_27 0080                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
        __end_of_display 0147          __end_of_initOsc 01A5         __end_of_SWAP_ADC 0204  
                  _setup 01A5                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 0011               _InitTimer0 0216  
           __end_of_main 0216                   ??_main 002C       NIBBLE1_ADC@VAL_ADC 0071  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
            initOsc@IRCF 002B                   ?_setup 0070                   _ANSELH 0189  
                 i1l1031 00C5                   i1l1041 00DE                   i1l1033 00CA  
                 i1l1025 00BA                   i1l1051 00F7                   i1l1043 00E3  
                 i1l1035 00CF                   i1l1027 00BB                   i1l1053 00FC  
                 i1l1045 00E8                   i1l1037 00D4                   i1l1029 00C0  
                 i1l1055 0101                   i1l1047 00ED                   i1l1039 00D9  
                 i1l1063 010B                   i1l1151 0031                   i1l1073 0235  
                 i1l1057 0106                   i1l1049 00F2                   i1l1065 0145  
                 i1l1153 0035                   i1l1161 0040                   i1l1145 0023  
                 i1l1083 022C                   i1l1091 0229                   i1l1171 0079  
                 i1l1163 0046                   i1l1147 0027                   i1l1085 0233  
                 i1l1077 01E6                   i1l1181 008E                   i1l1173 007C  
                 i1l1165 005A                   i1l1157 003D                   i1l1079 0202  
                 i1l1191 00AF                   i1l1183 0097                   i1l1175 0085  
                 i1l1167 0065                   i1l1159 003F                   i1l1089 0222  
                 i1l1257 0113                   i1l1185 00A0                   i1l1169 006E  
                 i1l1177 0088                   i1l1187 00A3                   i1l1179 008C  
                 i1l1189 00A4                   _INTCON 000B     __end_of_ContadorLEDS 0242  
   __size_of_NIBBLE1_ADC 000A     __size_of_NIBBLE2_ADC 000A          SWAP_ADC@VAL_ADC 0074  
              ??_display 0070                ??_initOsc 0029                   saved_w 007E  
             ADC@ADRESH_ 0070               ADC@ADRESL_ 0070  __end_of__initialization 001F  
            ?_InitTimer0 0070           __pcstackCOMMON 0070            __end_of_setup 01E5  
              ?_SWAP_ADC 0070           _OPTION_REGbits 0081         display@ADC_VALOR 0072  
                ??_setup 002C               __pbssBANK0 0020               __pmaintext 0204  
             __pintentry 0004               ??_SWAP_ADC 0070    __size_of_ContadorLEDS 0005  
    __size_of_InitTimer0 000B                _ADC_VALOR 0020                  __ptext1 01A5  
                __ptext2 0147                  __ptext3 0216                  __ptext4 023D  
                __ptext5 0023                  __ptext6 00B9                  __ptext7 01E5  
                __ptext8 0221                  __ptext9 022B             _ContadorLEDS 023D  
                _display 00B9             __size_of_ADC 0008             __size_of_ISR 0096  
                _initOsc 0147     end_of_initialization 001F      NIBBLE2_ADC@VAL_SWAP 0071  
              _PORTBbits 0006                _PORTEbits 0009            ??_NIBBLE1_ADC 0070  
          ??_NIBBLE2_ADC 0070              _ADC_NIBBLE1 007C              _ADC_NIBBLE2 007B  
           ??_InitTimer0 0029        __size_of_SWAP_ADC 001F      start_initialization 0011  
            __end_of_ADC 023D              __end_of_ISR 00B9       __end_of_InitTimer0 0221  
              _Valor_hex 007D      __end_of_NIBBLE1_ADC 0235      __end_of_NIBBLE2_ADC 022B  
            __pbssCOMMON 007B                ___latbits 0002            __pcstackBANK0 0029  
               ?_display 0070                 ?_initOsc 0070                 _ADC_SWAP 0027  
         __size_of_setup 0040        interrupt_function 0004                 _IOCBbits 0096  
            _NIBBLE1_ADC 022B                 _PIE1bits 008C              _NIBBLE2_ADC 0221  
               _PIR1bits 000C                 _VAL_SWAP 0024                 _SWAP_ADC 01E5  
             _ADCON0bits 001F         __size_of_display 008E         __size_of_initOsc 005E  
               __ptext10 0235                 _contador 0028            __size_of_main 0012  
             _INTCONbits 000B              _VAL_NIBBLE1 0023              _VAL_NIBBLE2 0022  
               intlevel1 0000               _OSCCONbits 008F            ?_ContadorLEDS 0070  
             _OPTION_REG 0081             ?_NIBBLE1_ADC 0070             ?_NIBBLE2_ADC 0070  
