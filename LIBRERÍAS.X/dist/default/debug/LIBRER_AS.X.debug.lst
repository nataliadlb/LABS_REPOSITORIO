

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun Feb 07 18:18:47 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F887 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  008F                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0095                     	;# 
   115  0096                     	;# 
   116  0097                     	;# 
   117  0098                     	;# 
   118  0099                     	;# 
   119  009A                     	;# 
   120  009B                     	;# 
   121  009C                     	;# 
   122  009D                     	;# 
   123  009E                     	;# 
   124  009F                     	;# 
   125  0105                     	;# 
   126  0107                     	;# 
   127  0108                     	;# 
   128  0109                     	;# 
   129  010C                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  010F                     	;# 
   134  0185                     	;# 
   135  0187                     	;# 
   136  0188                     	;# 
   137  0189                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  0000                     	;# 
   141  0001                     	;# 
   142  0002                     	;# 
   143  0003                     	;# 
   144  0004                     	;# 
   145  0005                     	;# 
   146  0006                     	;# 
   147  0007                     	;# 
   148  0008                     	;# 
   149  0009                     	;# 
   150  000A                     	;# 
   151  000B                     	;# 
   152  000C                     	;# 
   153  000D                     	;# 
   154  000E                     	;# 
   155  000E                     	;# 
   156  000F                     	;# 
   157  0010                     	;# 
   158  0011                     	;# 
   159  0012                     	;# 
   160  0013                     	;# 
   161  0014                     	;# 
   162  0015                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0017                     	;# 
   166  0018                     	;# 
   167  0019                     	;# 
   168  001A                     	;# 
   169  001B                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  001D                     	;# 
   173  001E                     	;# 
   174  001F                     	;# 
   175  0081                     	;# 
   176  0085                     	;# 
   177  0086                     	;# 
   178  0087                     	;# 
   179  0088                     	;# 
   180  0089                     	;# 
   181  008C                     	;# 
   182  008D                     	;# 
   183  008E                     	;# 
   184  008F                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0094                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0098                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  009F                     	;# 
   203  0105                     	;# 
   204  0107                     	;# 
   205  0108                     	;# 
   206  0109                     	;# 
   207  010C                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  010F                     	;# 
   212  0185                     	;# 
   213  0187                     	;# 
   214  0188                     	;# 
   215  0189                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  0000                     	;# 
   219  0001                     	;# 
   220  0002                     	;# 
   221  0003                     	;# 
   222  0004                     	;# 
   223  0005                     	;# 
   224  0006                     	;# 
   225  0007                     	;# 
   226  0008                     	;# 
   227  0009                     	;# 
   228  000A                     	;# 
   229  000B                     	;# 
   230  000C                     	;# 
   231  000D                     	;# 
   232  000E                     	;# 
   233  000E                     	;# 
   234  000F                     	;# 
   235  0010                     	;# 
   236  0011                     	;# 
   237  0012                     	;# 
   238  0013                     	;# 
   239  0014                     	;# 
   240  0015                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0017                     	;# 
   244  0018                     	;# 
   245  0019                     	;# 
   246  001A                     	;# 
   247  001B                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001D                     	;# 
   251  001E                     	;# 
   252  001F                     	;# 
   253  0081                     	;# 
   254  0085                     	;# 
   255  0086                     	;# 
   256  0087                     	;# 
   257  0088                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  008F                     	;# 
   263  0090                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0095                     	;# 
   271  0096                     	;# 
   272  0097                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009A                     	;# 
   276  009B                     	;# 
   277  009C                     	;# 
   278  009D                     	;# 
   279  009E                     	;# 
   280  009F                     	;# 
   281  0105                     	;# 
   282  0107                     	;# 
   283  0108                     	;# 
   284  0109                     	;# 
   285  010C                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  0185                     	;# 
   291  0187                     	;# 
   292  0188                     	;# 
   293  0189                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001B                     	;# 
   327  001C                     	;# 
   328  001D                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  0081                     	;# 
   332  0085                     	;# 
   333  0086                     	;# 
   334  0087                     	;# 
   335  0088                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0094                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  009F                     	;# 
   359  0105                     	;# 
   360  0107                     	;# 
   361  0108                     	;# 
   362  0109                     	;# 
   363  010C                     	;# 
   364  010C                     	;# 
   365  010D                     	;# 
   366  010E                     	;# 
   367  010F                     	;# 
   368  0185                     	;# 
   369  0187                     	;# 
   370  0188                     	;# 
   371  0189                     	;# 
   372  018C                     	;# 
   373  018D                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  000E                     	;# 
   390  000F                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0013                     	;# 
   395  0014                     	;# 
   396  0015                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  001D                     	;# 
   407  001E                     	;# 
   408  001F                     	;# 
   409  0081                     	;# 
   410  0085                     	;# 
   411  0086                     	;# 
   412  0087                     	;# 
   413  0088                     	;# 
   414  0089                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  008F                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0093                     	;# 
   425  0094                     	;# 
   426  0095                     	;# 
   427  0096                     	;# 
   428  0097                     	;# 
   429  0098                     	;# 
   430  0099                     	;# 
   431  009A                     	;# 
   432  009B                     	;# 
   433  009C                     	;# 
   434  009D                     	;# 
   435  009E                     	;# 
   436  009F                     	;# 
   437  0105                     	;# 
   438  0107                     	;# 
   439  0108                     	;# 
   440  0109                     	;# 
   441  010C                     	;# 
   442  010C                     	;# 
   443  010D                     	;# 
   444  010E                     	;# 
   445  010F                     	;# 
   446  0185                     	;# 
   447  0187                     	;# 
   448  0188                     	;# 
   449  0189                     	;# 
   450  018C                     	;# 
   451  018D                     	;# 
   452  001F                     _ADCON0	set	31
   453  000B                     _INTCON	set	11
   454  0006                     _PORTB	set	6
   455  0005                     _PORTA	set	5
   456  0008                     _PORTD	set	8
   457  0009                     _PORTEbits	set	9
   458  0009                     _PORTE	set	9
   459  0001                     _TMR0	set	1
   460  001F                     _ADCON0bits	set	31
   461  000C                     _PIR1bits	set	12
   462  0007                     _PORTC	set	7
   463  0006                     _PORTBbits	set	6
   464  000B                     _INTCONbits	set	11
   465  001E                     _ADRESH	set	30
   466  009F                     _ADCON1	set	159
   467  008C                     _PIE1bits	set	140
   468  0096                     _IOCB	set	150
   469  0081                     _OPTION_REG	set	129
   470  0089                     _TRISE	set	137
   471  0088                     _TRISD	set	136
   472  0087                     _TRISC	set	135
   473  0086                     _TRISB	set	134
   474  0085                     _TRISA	set	133
   475  009E                     _ADRESL	set	158
   476  008F                     _OSCCONbits	set	143
   477  0189                     _ANSELH	set	393
   478  0188                     _ANSEL	set	392
   479                           
   480                           	psect	cinit
   481  0011                     start_initialization:	
   482                           ; #config settings
   483                           
   484  0011                     __initialization:
   485                           
   486                           ; Clear objects allocated to COMMON
   487  0011  01F8               	clrf	__pbssCOMMON& (0+127)
   488  0012  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   489  0013  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   490  0014  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   491  0015  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   492                           
   493                           ; Clear objects allocated to BANK0
   494  0016  1383               	bcf	3,7	;select IRP bank0
   495  0017  3020               	movlw	low __pbssBANK0
   496  0018  0084               	movwf	4
   497  0019  3033               	movlw	low (__pbssBANK0+19)
   498  001A  120A  118A  22BD  120A  118A  	fcall	clear_ram0
   499  001F                     end_of_initialization:	
   500                           ;End of C runtime variable initialization code
   501                           
   502  001F                     __end_of__initialization:
   503  001F  0183               	clrf	3
   504  0020  120A  118A  2A21   	ljmp	_main	;jump to C main() function
   505                           
   506                           	psect	bssCOMMON
   507  0078                     __pbssCOMMON:
   508  0078                     _toggle:
   509  0078                     	ds	1
   510  0079                     _debouncing2:
   511  0079                     	ds	1
   512  007A                     _debouncing1:
   513  007A                     	ds	1
   514  007B                     _contador:
   515  007B                     	ds	1
   516  007C                     _Valor_hex:
   517  007C                     	ds	1
   518                           
   519                           	psect	bssBANK0
   520  0020                     __pbssBANK0:
   521  0020                     _ADC_SWAP:
   522  0020                     	ds	2
   523  0022                     _ADC_VALOR:
   524  0022                     	ds	2
   525  0024                     _ADC_NIBBLE2:
   526  0024                     	ds	2
   527  0026                     _ADC_NIBBLE1:
   528  0026                     	ds	2
   529  0028                     _val_1:
   530  0028                     	ds	2
   531  002A                     _VAL_NIBBLE2:
   532  002A                     	ds	2
   533  002C                     _VAL_NIBBLE1:
   534  002C                     	ds	2
   535  002E                     _VAL_SWAP:
   536  002E                     	ds	2
   537  0030                     _VAL:
   538  0030                     	ds	2
   539  0032                     _cont_timer:
   540  0032                     	ds	1
   541                           
   542                           	psect	clrtext
   543  02BD                     clear_ram0:	
   544                           ;	Called with FSR containing the base address, and
   545                           ;	W with the last address+1
   546                           
   547  02BD  0064               	clrwdt	;clear the watchdog before getting into this loop
   548  02BE                     clrloop0:
   549  02BE  0180               	clrf	0	;clear RAM location pointed to by FSR
   550  02BF  0A84               	incf	4,f	;increment pointer
   551  02C0  0604               	xorwf	4,w	;XOR with final address
   552  02C1  1903               	btfsc	3,2	;have we reached the end yet?
   553  02C2  3400               	retlw	0	;all done for this memory range, return
   554  02C3  0604               	xorwf	4,w	;XOR again to restore value
   555  02C4  2ABE               	goto	clrloop0	;do the next byte
   556                           
   557                           	psect	cstackCOMMON
   558  0070                     __pcstackCOMMON:
   559  0070                     ?_DisplayADC:
   560  0070                     ?_setup:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_Config_INTERRUPT:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_TOGGLE_1:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_CONVERSION_ADC:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_Revision:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?_initOsc:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?_display:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ??_display:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?_ISR:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_main:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_ADC:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ADC@ADRESL_:	
   594                           ; 2 bytes @ 0x0
   595                           
   596  0070                     ADC@ADRESH_:	
   597                           ; 1 bytes @ 0x0
   598                           
   599                           
   600                           ; 1 bytes @ 0x0
   601  0070                     	ds	2
   602  0072                     display@ADC_VALOR:
   603                           
   604                           ; 1 bytes @ 0x2
   605  0072                     	ds	1
   606  0073                     ??_DisplayADC:
   607  0073                     ??_ADC:	
   608                           ; 1 bytes @ 0x3
   609                           
   610  0073                     ??_ISR:	
   611                           ; 1 bytes @ 0x3
   612                           
   613                           
   614                           ; 1 bytes @ 0x3
   615  0073                     	ds	5
   616                           
   617                           	psect	cstackBANK0
   618  0033                     __pcstackBANK0:
   619  0033                     ??_Config_INTERRUPT:
   620  0033                     ??_TOGGLE_1:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0033                     ??_Revision:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0033                     ??_initOsc:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0033                     ?_SWAP_ADC:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0033                     ?_NIBBLE1_ADC:	
   633                           ; 2 bytes @ 0x0
   634                           
   635  0033                     ?_NIBBLE2_ADC:	
   636                           ; 2 bytes @ 0x0
   637                           
   638                           
   639                           ; 2 bytes @ 0x0
   640  0033                     	ds	2
   641  0035                     ??_SWAP_ADC:
   642  0035                     ??_NIBBLE1_ADC:	
   643                           ; 1 bytes @ 0x2
   644                           
   645  0035                     ??_NIBBLE2_ADC:	
   646                           ; 1 bytes @ 0x2
   647                           
   648  0035                     initOsc@IRCF:	
   649                           ; 1 bytes @ 0x2
   650                           
   651                           
   652                           ; 1 bytes @ 0x2
   653  0035                     	ds	1
   654  0036                     ??_setup:
   655                           
   656                           ; 1 bytes @ 0x3
   657  0036                     	ds	1
   658  0037                     NIBBLE1_ADC@VAL_ADC:
   659  0037                     NIBBLE2_ADC@VAL_SWAP:	
   660                           ; 1 bytes @ 0x4
   661                           
   662                           
   663                           ; 1 bytes @ 0x4
   664  0037                     	ds	3
   665  003A                     SWAP_ADC@VAL_ADC:
   666                           
   667                           ; 1 bytes @ 0x7
   668  003A                     	ds	1
   669  003B                     ??_CONVERSION_ADC:
   670  003B                     ??_main:	
   671                           ; 1 bytes @ 0x8
   672                           
   673                           
   674                           	psect	maintext
   675  0221                     __pmaintext:	
   676                           ; 1 bytes @ 0x8
   677 ;;
   678 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   679 ;;
   680 ;; *************** function _main *****************
   681 ;; Defined at:
   682 ;;		line 97 in file "Prueba2_lab2.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : B00/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   696 ;;      Params:         0       0       0       0       0
   697 ;;      Locals:         0       0       0       0       0
   698 ;;      Temps:          0       0       0       0       0
   699 ;;      Totals:         0       0       0       0       0
   700 ;;Total ram usage:        0 bytes
   701 ;; Hardware stack levels required when called:    5
   702 ;; This function calls:
   703 ;;		_CONVERSION_ADC
   704 ;;		_Config_INTERRUPT
   705 ;;		_Revision
   706 ;;		_TOGGLE_1
   707 ;;		_setup
   708 ;; This function is called by:
   709 ;;		Startup code after reset
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           
   714                           ;psect for function _main
   715  0221                     _main:
   716  0221                     l1261:	
   717                           ;incstack = 0
   718                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   719                           
   720                           
   721                           ;Prueba2_lab2.c: 98:     setup();
   722  0221  120A  118A  2185  120A  118A  	fcall	_setup
   723  0226                     l1263:
   724                           
   725                           ;Prueba2_lab2.c: 99:     Config_INTERRUPT();
   726  0226  120A  118A  2269  120A  118A  	fcall	_Config_INTERRUPT
   727  022B                     l1265:
   728                           
   729                           ;Prueba2_lab2.c: 103:         if (cont_timer >= 1) {
   730  022B  1283               	bcf	3,5	;RP0=0, select bank0
   731  022C  1303               	bcf	3,6	;RP1=0, select bank0
   732  022D  0832               	movf	_cont_timer,w
   733  022E  1903               	btfsc	3,2
   734  022F  2A31               	goto	u361
   735  0230  2A32               	goto	u360
   736  0231                     u361:
   737  0231  2A38               	goto	l1271
   738  0232                     u360:
   739  0232                     l1267:
   740                           
   741                           ;Prueba2_lab2.c: 104:             cont_timer = 0;
   742  0232  01B2               	clrf	_cont_timer
   743  0233                     l1269:
   744                           
   745                           ;Prueba2_lab2.c: 105:             TOGGLE_1();
   746  0233  120A  118A  22A1  120A  118A  	fcall	_TOGGLE_1
   747  0238                     l1271:
   748                           
   749                           ;Prueba2_lab2.c: 107:         CONVERSION_ADC();
   750  0238  120A  118A  21AD  120A  118A  	fcall	_CONVERSION_ADC
   751  023D                     l1273:
   752                           
   753                           ;Prueba2_lab2.c: 108:         Revision();
   754  023D  120A  118A  21FB  120A  118A  	fcall	_Revision
   755  0242  2A2B               	goto	l1265
   756  0243  120A  118A  280E   	ljmp	start
   757  0246                     __end_of_main:
   758                           
   759                           	psect	text1
   760  0185                     __ptext1:	
   761 ;; *************** function _setup *****************
   762 ;; Defined at:
   763 ;;		line 157 in file "Prueba2_lab2.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;		None
   766 ;; Auto vars:     Size  Location     Type
   767 ;;		None
   768 ;; Return value:  Size  Location     Type
   769 ;;                  1    wreg      void 
   770 ;; Registers used:
   771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : 0/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   777 ;;      Params:         0       0       0       0       0
   778 ;;      Locals:         0       0       0       0       0
   779 ;;      Temps:          0       0       0       0       0
   780 ;;      Totals:         0       0       0       0       0
   781 ;;Total ram usage:        0 bytes
   782 ;; Hardware stack levels used:    1
   783 ;; Hardware stack levels required when called:    4
   784 ;; This function calls:
   785 ;;		_initOsc
   786 ;; This function is called by:
   787 ;;		_main
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           
   792                           ;psect for function _setup
   793  0185                     _setup:
   794  0185                     l1155:	
   795                           ;incstack = 0
   796                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   797                           
   798                           
   799                           ;Prueba2_lab2.c: 158:     initOsc(0b00000110);
   800  0185  3006               	movlw	6
   801  0186  120A  118A  2127  120A  118A  	fcall	_initOsc
   802  018B                     l1157:
   803                           
   804                           ;Prueba2_lab2.c: 159:     ANSEL = 0b00000001;
   805  018B  3001               	movlw	1
   806  018C  1683               	bsf	3,5	;RP0=1, select bank3
   807  018D  1703               	bsf	3,6	;RP1=1, select bank3
   808  018E  0088               	movwf	8	;volatile
   809  018F                     l1159:
   810                           
   811                           ;Prueba2_lab2.c: 160:     ANSELH = 0;
   812  018F  0189               	clrf	9	;volatile
   813  0190                     l1161:
   814                           
   815                           ;Prueba2_lab2.c: 161:     TRISA = 0b00000001;
   816  0190  3001               	movlw	1
   817  0191  1683               	bsf	3,5	;RP0=1, select bank1
   818  0192  1303               	bcf	3,6	;RP1=0, select bank1
   819  0193  0085               	movwf	5	;volatile
   820  0194                     l1163:
   821                           
   822                           ;Prueba2_lab2.c: 162:     PORTA = 0;
   823  0194  1283               	bcf	3,5	;RP0=0, select bank0
   824  0195  1303               	bcf	3,6	;RP1=0, select bank0
   825  0196  0185               	clrf	5	;volatile
   826  0197                     l1165:
   827                           
   828                           ;Prueba2_lab2.c: 163:     TRISB = 0b00000011;
   829  0197  3003               	movlw	3
   830  0198  1683               	bsf	3,5	;RP0=1, select bank1
   831  0199  1303               	bcf	3,6	;RP1=0, select bank1
   832  019A  0086               	movwf	6	;volatile
   833  019B                     l1167:
   834                           
   835                           ;Prueba2_lab2.c: 164:     PORTB = 0;
   836  019B  1283               	bcf	3,5	;RP0=0, select bank0
   837  019C  1303               	bcf	3,6	;RP1=0, select bank0
   838  019D  0186               	clrf	6	;volatile
   839  019E                     l1169:
   840                           
   841                           ;Prueba2_lab2.c: 165:     PORTC = 0;
   842  019E  0187               	clrf	7	;volatile
   843  019F                     l1171:
   844                           
   845                           ;Prueba2_lab2.c: 166:     TRISC = 0;
   846  019F  1683               	bsf	3,5	;RP0=1, select bank1
   847  01A0  1303               	bcf	3,6	;RP1=0, select bank1
   848  01A1  0187               	clrf	7	;volatile
   849  01A2                     l1173:
   850                           
   851                           ;Prueba2_lab2.c: 167:     TRISD = 0;
   852  01A2  0188               	clrf	8	;volatile
   853  01A3                     l1175:
   854                           
   855                           ;Prueba2_lab2.c: 168:     PORTD = 0;
   856  01A3  1283               	bcf	3,5	;RP0=0, select bank0
   857  01A4  1303               	bcf	3,6	;RP1=0, select bank0
   858  01A5  0188               	clrf	8	;volatile
   859  01A6                     l1177:
   860                           
   861                           ;Prueba2_lab2.c: 169:     TRISE = 0;
   862  01A6  1683               	bsf	3,5	;RP0=1, select bank1
   863  01A7  1303               	bcf	3,6	;RP1=0, select bank1
   864  01A8  0189               	clrf	9	;volatile
   865  01A9                     l1179:
   866                           
   867                           ;Prueba2_lab2.c: 170:     PORTE = 0;
   868  01A9  1283               	bcf	3,5	;RP0=0, select bank0
   869  01AA  1303               	bcf	3,6	;RP1=0, select bank0
   870  01AB  0189               	clrf	9	;volatile
   871  01AC                     l210:
   872  01AC  0008               	return
   873  01AD                     __end_of_setup:
   874                           
   875                           	psect	text2
   876  0127                     __ptext2:	
   877 ;; *************** function _initOsc *****************
   878 ;; Defined at:
   879 ;;		line 3 in file "Oscilador.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  IRCF            1    wreg     unsigned char 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  IRCF            1    2[BANK0 ] unsigned char 
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      void 
   886 ;; Registers used:
   887 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   893 ;;      Params:         0       0       0       0       0
   894 ;;      Locals:         0       1       0       0       0
   895 ;;      Temps:          0       2       0       0       0
   896 ;;      Totals:         0       3       0       0       0
   897 ;;Total ram usage:        3 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    3
   900 ;; This function calls:
   901 ;;		Nothing
   902 ;; This function is called by:
   903 ;;		_setup
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           
   908                           ;psect for function _initOsc
   909  0127                     _initOsc:
   910                           
   911                           ;incstack = 0
   912                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
   913                           ;initOsc@IRCF stored from wreg
   914  0127  1283               	bcf	3,5	;RP0=0, select bank0
   915  0128  1303               	bcf	3,6	;RP1=0, select bank0
   916  0129  00B5               	movwf	initOsc@IRCF
   917  012A                     l1059:
   918                           
   919                           ;Oscilador.c: 5:     switch(IRCF){
   920  012A  2961               	goto	l1063
   921  012B                     l6:	
   922                           ;Oscilador.c: 6:         case 0:
   923                           
   924                           
   925                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
   926  012B  1683               	bsf	3,5	;RP0=1, select bank1
   927  012C  1303               	bcf	3,6	;RP1=0, select bank1
   928  012D  130F               	bcf	15,6	;volatile
   929                           
   930                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
   931  012E  128F               	bcf	15,5	;volatile
   932                           
   933                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
   934  012F  120F               	bcf	15,4	;volatile
   935                           
   936                           ;Oscilador.c: 10:             break;
   937  0130  2983               	goto	l7
   938  0131                     l8:	
   939                           ;Oscilador.c: 11:          case 1:
   940                           
   941                           
   942                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
   943  0131  1683               	bsf	3,5	;RP0=1, select bank1
   944  0132  1303               	bcf	3,6	;RP1=0, select bank1
   945  0133  130F               	bcf	15,6	;volatile
   946                           
   947                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
   948  0134  128F               	bcf	15,5	;volatile
   949                           
   950                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
   951  0135  160F               	bsf	15,4	;volatile
   952                           
   953                           ;Oscilador.c: 15:             break;
   954  0136  2983               	goto	l7
   955  0137                     l9:	
   956                           ;Oscilador.c: 16:         case 2:
   957                           
   958                           
   959                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
   960  0137  1683               	bsf	3,5	;RP0=1, select bank1
   961  0138  1303               	bcf	3,6	;RP1=0, select bank1
   962  0139  130F               	bcf	15,6	;volatile
   963                           
   964                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
   965  013A  168F               	bsf	15,5	;volatile
   966                           
   967                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
   968  013B  120F               	bcf	15,4	;volatile
   969                           
   970                           ;Oscilador.c: 20:             break;
   971  013C  2983               	goto	l7
   972  013D                     l10:	
   973                           ;Oscilador.c: 21:         case 3:
   974                           
   975                           
   976                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
   977  013D  1683               	bsf	3,5	;RP0=1, select bank1
   978  013E  1303               	bcf	3,6	;RP1=0, select bank1
   979  013F  130F               	bcf	15,6	;volatile
   980                           
   981                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
   982  0140  168F               	bsf	15,5	;volatile
   983                           
   984                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
   985  0141  160F               	bsf	15,4	;volatile
   986                           
   987                           ;Oscilador.c: 25:             break;
   988  0142  2983               	goto	l7
   989  0143                     l11:	
   990                           ;Oscilador.c: 26:         case 4:
   991                           
   992                           
   993                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
   994  0143  1683               	bsf	3,5	;RP0=1, select bank1
   995  0144  1303               	bcf	3,6	;RP1=0, select bank1
   996  0145  170F               	bsf	15,6	;volatile
   997                           
   998                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
   999  0146  128F               	bcf	15,5	;volatile
  1000                           
  1001                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1002  0147  120F               	bcf	15,4	;volatile
  1003                           
  1004                           ;Oscilador.c: 30:             break;
  1005  0148  2983               	goto	l7
  1006  0149                     l12:	
  1007                           ;Oscilador.c: 31:         case 5:
  1008                           
  1009                           
  1010                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1011  0149  1683               	bsf	3,5	;RP0=1, select bank1
  1012  014A  1303               	bcf	3,6	;RP1=0, select bank1
  1013  014B  170F               	bsf	15,6	;volatile
  1014                           
  1015                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1016  014C  128F               	bcf	15,5	;volatile
  1017                           
  1018                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1019  014D  160F               	bsf	15,4	;volatile
  1020                           
  1021                           ;Oscilador.c: 35:             break;
  1022  014E  2983               	goto	l7
  1023  014F                     l13:	
  1024                           ;Oscilador.c: 36:         case 6:
  1025                           
  1026                           
  1027                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1028  014F  1683               	bsf	3,5	;RP0=1, select bank1
  1029  0150  1303               	bcf	3,6	;RP1=0, select bank1
  1030  0151  170F               	bsf	15,6	;volatile
  1031                           
  1032                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1033  0152  168F               	bsf	15,5	;volatile
  1034                           
  1035                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1036  0153  120F               	bcf	15,4	;volatile
  1037                           
  1038                           ;Oscilador.c: 40:             break;
  1039  0154  2983               	goto	l7
  1040  0155                     l14:	
  1041                           ;Oscilador.c: 41:         case 7:
  1042                           
  1043                           
  1044                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1045  0155  1683               	bsf	3,5	;RP0=1, select bank1
  1046  0156  1303               	bcf	3,6	;RP1=0, select bank1
  1047  0157  170F               	bsf	15,6	;volatile
  1048                           
  1049                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1050  0158  168F               	bsf	15,5	;volatile
  1051                           
  1052                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1053  0159  160F               	bsf	15,4	;volatile
  1054                           
  1055                           ;Oscilador.c: 45:             break;
  1056  015A  2983               	goto	l7
  1057  015B                     l15:	
  1058                           ;Oscilador.c: 46:         default:
  1059                           
  1060                           
  1061                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1062  015B  1683               	bsf	3,5	;RP0=1, select bank1
  1063  015C  1303               	bcf	3,6	;RP1=0, select bank1
  1064  015D  170F               	bsf	15,6	;volatile
  1065                           
  1066                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1067  015E  168F               	bsf	15,5	;volatile
  1068                           
  1069                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1070  015F  120F               	bcf	15,4	;volatile
  1071                           
  1072                           ;Oscilador.c: 50:             break;
  1073  0160  2983               	goto	l7
  1074  0161                     l1063:
  1075  0161  0835               	movf	initOsc@IRCF,w
  1076  0162  00B3               	movwf	??_initOsc
  1077  0163  01B4               	clrf	??_initOsc+1
  1078                           
  1079                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1080                           ; Switch size 1, requested type "simple"
  1081                           ; Number of cases is 1, Range of values is 0 to 0
  1082                           ; switch strategies available:
  1083                           ; Name         Instructions Cycles
  1084                           ; simple_byte            4     3 (average)
  1085                           ; direct_byte           11     8 (fixed)
  1086                           ; jumptable            260     6 (fixed)
  1087                           ;	Chosen strategy is simple_byte
  1088  0164  0834               	movf	??_initOsc+1,w
  1089  0165  3A00               	xorlw	0	; case 0
  1090  0166  1903               	skipnz
  1091  0167  2969               	goto	l1325
  1092  0168  295B               	goto	l15
  1093  0169                     l1325:
  1094                           
  1095                           ; Switch size 1, requested type "simple"
  1096                           ; Number of cases is 8, Range of values is 0 to 7
  1097                           ; switch strategies available:
  1098                           ; Name         Instructions Cycles
  1099                           ; simple_byte           25    13 (average)
  1100                           ; direct_byte           32     8 (fixed)
  1101                           ; jumptable            260     6 (fixed)
  1102                           ;	Chosen strategy is simple_byte
  1103  0169  0833               	movf	??_initOsc,w
  1104  016A  3A00               	xorlw	0	; case 0
  1105  016B  1903               	skipnz
  1106  016C  292B               	goto	l6
  1107  016D  3A01               	xorlw	1	; case 1
  1108  016E  1903               	skipnz
  1109  016F  2931               	goto	l8
  1110  0170  3A03               	xorlw	3	; case 2
  1111  0171  1903               	skipnz
  1112  0172  2937               	goto	l9
  1113  0173  3A01               	xorlw	1	; case 3
  1114  0174  1903               	skipnz
  1115  0175  293D               	goto	l10
  1116  0176  3A07               	xorlw	7	; case 4
  1117  0177  1903               	skipnz
  1118  0178  2943               	goto	l11
  1119  0179  3A01               	xorlw	1	; case 5
  1120  017A  1903               	skipnz
  1121  017B  2949               	goto	l12
  1122  017C  3A03               	xorlw	3	; case 6
  1123  017D  1903               	skipnz
  1124  017E  294F               	goto	l13
  1125  017F  3A01               	xorlw	1	; case 7
  1126  0180  1903               	skipnz
  1127  0181  2955               	goto	l14
  1128  0182  295B               	goto	l15
  1129  0183                     l7:
  1130                           
  1131                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1132  0183  140F               	bsf	15,0	;volatile
  1133  0184                     l16:
  1134  0184  0008               	return
  1135  0185                     __end_of_initOsc:
  1136                           
  1137                           	psect	text3
  1138  02A1                     __ptext3:	
  1139 ;; *************** function _TOGGLE_1 *****************
  1140 ;; Defined at:
  1141 ;;		line 114 in file "Prueba2_lab2.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2, status,0
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1155 ;;      Params:         0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0
  1158 ;;      Totals:         0       0       0       0       0
  1159 ;;Total ram usage:        0 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    3
  1162 ;; This function calls:
  1163 ;;		Nothing
  1164 ;; This function is called by:
  1165 ;;		_main
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           
  1170                           ;psect for function _TOGGLE_1
  1171  02A1                     _TOGGLE_1:
  1172  02A1                     l1191:	
  1173                           ;incstack = 0
  1174                           ; Regs used in _TOGGLE_1: [wreg+status,2+status,0]
  1175                           
  1176                           
  1177                           ;Prueba2_lab2.c: 115:     if (toggle == 1) {
  1178  02A1  0378               	decf	_toggle,w
  1179  02A2  1D03               	btfss	3,2
  1180  02A3  2AA5               	goto	u221
  1181  02A4  2AA6               	goto	u220
  1182  02A5                     u221:
  1183  02A5  2AA8               	goto	l1195
  1184  02A6                     u220:
  1185  02A6                     l1193:
  1186                           
  1187                           ;Prueba2_lab2.c: 116:         toggle = 0;
  1188  02A6  01F8               	clrf	_toggle
  1189                           
  1190                           ;Prueba2_lab2.c: 117:     } else if (toggle == 0) {
  1191  02A7  2AAF               	goto	l192
  1192  02A8                     l1195:
  1193  02A8  0878               	movf	_toggle,w
  1194  02A9  1D03               	btfss	3,2
  1195  02AA  2AAC               	goto	u231
  1196  02AB  2AAD               	goto	u230
  1197  02AC                     u231:
  1198  02AC  2AAF               	goto	l192
  1199  02AD                     u230:
  1200  02AD                     l1197:
  1201                           
  1202                           ;Prueba2_lab2.c: 118:         toggle = 1;
  1203  02AD  01F8               	clrf	_toggle
  1204  02AE  0AF8               	incf	_toggle,f
  1205  02AF                     l192:
  1206  02AF  0008               	return
  1207  02B0                     __end_of_TOGGLE_1:
  1208                           
  1209                           	psect	text4
  1210  01FB                     __ptext4:	
  1211 ;; *************** function _Revision *****************
  1212 ;; Defined at:
  1213 ;;		line 147 in file "Prueba2_lab2.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0
  1229 ;;      Temps:          0       1       0       0       0
  1230 ;;      Totals:         0       1       0       0       0
  1231 ;;Total ram usage:        1 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    3
  1234 ;; This function calls:
  1235 ;;		Nothing
  1236 ;; This function is called by:
  1237 ;;		_main
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           
  1242                           ;psect for function _Revision
  1243  01FB                     _Revision:
  1244  01FB                     l1205:	
  1245                           ;incstack = 0
  1246                           ; Regs used in _Revision: [wreg]
  1247                           
  1248                           
  1249                           ;Prueba2_lab2.c: 148:     if (ADC_VALOR >= contador) {
  1250  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1251  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  1252  01FD  0823               	movf	_ADC_VALOR+1,w
  1253  01FE  3A80               	xorlw	128
  1254  01FF  00B3               	movwf	??_Revision
  1255  0200  3080               	movlw	128
  1256  0201  0233               	subwf	??_Revision,w
  1257  0202  1D03               	skipz
  1258  0203  2A06               	goto	u245
  1259  0204  087B               	movf	_contador,w
  1260  0205  0222               	subwf	_ADC_VALOR,w
  1261  0206                     u245:
  1262  0206  1C03               	skipc
  1263  0207  2A09               	goto	u241
  1264  0208  2A0A               	goto	u240
  1265  0209                     u241:
  1266  0209  2A0E               	goto	l1209
  1267  020A                     u240:
  1268  020A                     l1207:
  1269                           
  1270                           ;Prueba2_lab2.c: 149:             PORTEbits.RE0 = 1;
  1271  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1272  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1273  020C  1409               	bsf	9,0	;volatile
  1274                           
  1275                           ;Prueba2_lab2.c: 151:         }
  1276  020D  2A20               	goto	l207
  1277  020E                     l1209:
  1278  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1279  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1280  0210  0823               	movf	_ADC_VALOR+1,w
  1281  0211  3A80               	xorlw	128
  1282  0212  00B3               	movwf	??_Revision
  1283  0213  3080               	movlw	128
  1284  0214  0233               	subwf	??_Revision,w
  1285  0215  1D03               	skipz
  1286  0216  2A19               	goto	u255
  1287  0217  087B               	movf	_contador,w
  1288  0218  0222               	subwf	_ADC_VALOR,w
  1289  0219                     u255:
  1290  0219  1803               	skipnc
  1291  021A  2A1C               	goto	u251
  1292  021B  2A1D               	goto	u250
  1293  021C                     u251:
  1294  021C  2A20               	goto	l207
  1295  021D                     u250:
  1296  021D                     l1211:
  1297                           
  1298                           ;Prueba2_lab2.c: 153:             PORTEbits.RE0 = 0;
  1299  021D  1283               	bcf	3,5	;RP0=0, select bank0
  1300  021E  1303               	bcf	3,6	;RP1=0, select bank0
  1301  021F  1009               	bcf	9,0	;volatile
  1302  0220                     l207:
  1303  0220  0008               	return
  1304  0221                     __end_of_Revision:
  1305                           
  1306                           	psect	text5
  1307  0269                     __ptext5:	
  1308 ;; *************** function _Config_INTERRUPT *****************
  1309 ;; Defined at:
  1310 ;;		line 173 in file "Prueba2_lab2.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;		None
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;		None
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1324 ;;      Params:         0       0       0       0       0
  1325 ;;      Locals:         0       0       0       0       0
  1326 ;;      Temps:          0       0       0       0       0
  1327 ;;      Totals:         0       0       0       0       0
  1328 ;;Total ram usage:        0 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    3
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           
  1339                           ;psect for function _Config_INTERRUPT
  1340  0269                     _Config_INTERRUPT:
  1341  0269                     l1181:	
  1342                           ;incstack = 0
  1343                           ; Regs used in _Config_INTERRUPT: [wreg+status,2]
  1344                           
  1345                           
  1346                           ;Prueba2_lab2.c: 174:     TMR0 = 6;
  1347  0269  3006               	movlw	6
  1348  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1349  026B  1303               	bcf	3,6	;RP1=0, select bank0
  1350  026C  0081               	movwf	1	;volatile
  1351                           
  1352                           ;Prueba2_lab2.c: 175:     OPTION_REG = 0b10001000;
  1353  026D  3088               	movlw	136
  1354  026E  1683               	bsf	3,5	;RP0=1, select bank1
  1355  026F  1303               	bcf	3,6	;RP1=0, select bank1
  1356  0270  0081               	movwf	1	;volatile
  1357                           
  1358                           ;Prueba2_lab2.c: 176:     INTCON = 0b10101001;
  1359  0271  30A9               	movlw	169
  1360  0272  008B               	movwf	11	;volatile
  1361                           
  1362                           ;Prueba2_lab2.c: 177:     IOCB = 0b00000011;
  1363  0273  3003               	movlw	3
  1364  0274  0096               	movwf	22	;volatile
  1365  0275                     l1183:
  1366                           
  1367                           ;Prueba2_lab2.c: 178:     PIE1bits.ADIE = 1;
  1368  0275  170C               	bsf	12,6	;volatile
  1369  0276                     l1185:
  1370                           
  1371                           ;Prueba2_lab2.c: 179:     PIR1bits.ADIF = 1;
  1372  0276  1283               	bcf	3,5	;RP0=0, select bank0
  1373  0277  1303               	bcf	3,6	;RP1=0, select bank0
  1374  0278  170C               	bsf	12,6	;volatile
  1375  0279                     l1187:
  1376                           
  1377                           ;Prueba2_lab2.c: 180:     ADCON1 = 0b00000000;
  1378  0279  1683               	bsf	3,5	;RP0=1, select bank1
  1379  027A  1303               	bcf	3,6	;RP1=0, select bank1
  1380  027B  019F               	clrf	31	;volatile
  1381  027C                     l1189:
  1382                           
  1383                           ;Prueba2_lab2.c: 181:     ADCON0 = 0b01000001;
  1384  027C  3041               	movlw	65
  1385  027D  1283               	bcf	3,5	;RP0=0, select bank0
  1386  027E  1303               	bcf	3,6	;RP1=0, select bank0
  1387  027F  009F               	movwf	31	;volatile
  1388  0280                     l213:
  1389  0280  0008               	return
  1390  0281                     __end_of_Config_INTERRUPT:
  1391                           
  1392                           	psect	text6
  1393  01AD                     __ptext6:	
  1394 ;; *************** function _CONVERSION_ADC *****************
  1395 ;; Defined at:
  1396 ;;		line 140 in file "Prueba2_lab2.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;		None
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;		None
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0, pclath, cstack
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1410 ;;      Params:         0       0       0       0       0
  1411 ;;      Locals:         0       0       0       0       0
  1412 ;;      Temps:          0       0       0       0       0
  1413 ;;      Totals:         0       0       0       0       0
  1414 ;;Total ram usage:        0 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; Hardware stack levels required when called:    4
  1417 ;; This function calls:
  1418 ;;		_NIBBLE1_ADC
  1419 ;;		_NIBBLE2_ADC
  1420 ;;		_SWAP_ADC
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           
  1427                           ;psect for function _CONVERSION_ADC
  1428  01AD                     _CONVERSION_ADC:
  1429  01AD                     l1199:	
  1430                           ;incstack = 0
  1431                           ; Regs used in _CONVERSION_ADC: [wreg+status,2+status,0+pclath+cstack]
  1432                           
  1433                           
  1434                           ;Prueba2_lab2.c: 141:     ADC_SWAP = SWAP_ADC(ADC_VALOR);
  1435  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1436  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1437  01AF  0822               	movf	_ADC_VALOR,w
  1438  01B0  120A  118A  21D4  120A  118A  	fcall	_SWAP_ADC
  1439  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1440  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1441  01B7  0834               	movf	?_SWAP_ADC+1,w
  1442  01B8  00A1               	movwf	_ADC_SWAP+1
  1443  01B9  0833               	movf	?_SWAP_ADC,w
  1444  01BA  00A0               	movwf	_ADC_SWAP
  1445  01BB                     l1201:
  1446                           
  1447                           ;Prueba2_lab2.c: 142:     ADC_NIBBLE1 = NIBBLE1_ADC(ADC_VALOR);
  1448  01BB  0822               	movf	_ADC_VALOR,w
  1449  01BC  120A  118A  2291  120A  118A  	fcall	_NIBBLE1_ADC
  1450  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  1451  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  1452  01C3  0834               	movf	?_NIBBLE1_ADC+1,w
  1453  01C4  00A7               	movwf	_ADC_NIBBLE1+1
  1454  01C5  0833               	movf	?_NIBBLE1_ADC,w
  1455  01C6  00A6               	movwf	_ADC_NIBBLE1
  1456  01C7                     l1203:
  1457                           
  1458                           ;Prueba2_lab2.c: 143:     ADC_NIBBLE2 = NIBBLE2_ADC(ADC_SWAP);
  1459  01C7  0820               	movf	_ADC_SWAP,w
  1460  01C8  120A  118A  2281  120A  118A  	fcall	_NIBBLE2_ADC
  1461  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  1462  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  1463  01CF  0834               	movf	?_NIBBLE2_ADC+1,w
  1464  01D0  00A5               	movwf	_ADC_NIBBLE2+1
  1465  01D1  0833               	movf	?_NIBBLE2_ADC,w
  1466  01D2  00A4               	movwf	_ADC_NIBBLE2
  1467  01D3                     l201:
  1468  01D3  0008               	return
  1469  01D4                     __end_of_CONVERSION_ADC:
  1470                           
  1471                           	psect	text7
  1472  01D4                     __ptext7:	
  1473 ;; *************** function _SWAP_ADC *****************
  1474 ;; Defined at:
  1475 ;;		line 14 in file "Config_ADC.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  VAL_ADC         1    wreg     unsigned char 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  VAL_ADC         1    7[BANK0 ] unsigned char 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  2    0[BANK0 ] int 
  1482 ;; Registers used:
  1483 ;;		wreg, status,2, status,0
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1489 ;;      Params:         0       2       0       0       0
  1490 ;;      Locals:         0       1       0       0       0
  1491 ;;      Temps:          0       5       0       0       0
  1492 ;;      Totals:         0       8       0       0       0
  1493 ;;Total ram usage:        8 bytes
  1494 ;; Hardware stack levels used:    1
  1495 ;; Hardware stack levels required when called:    3
  1496 ;; This function calls:
  1497 ;;		Nothing
  1498 ;; This function is called by:
  1499 ;;		_CONVERSION_ADC
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           
  1504                           ;psect for function _SWAP_ADC
  1505  01D4                     _SWAP_ADC:
  1506                           
  1507                           ;incstack = 0
  1508                           ; Regs used in _SWAP_ADC: [wreg+status,2+status,0]
  1509                           ;SWAP_ADC@VAL_ADC stored from wreg
  1510  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1511  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1512  01D6  00BA               	movwf	SWAP_ADC@VAL_ADC
  1513  01D7                     l1119:
  1514                           
  1515                           ;Config_ADC.c: 15:     VAL_SWAP = (((VAL_ADC & 0x0F)<<4) | ((VAL_ADC & 0xF0)>>4));
  1516  01D7  083A               	movf	SWAP_ADC@VAL_ADC,w
  1517  01D8  00B5               	movwf	??_SWAP_ADC
  1518  01D9  3004               	movlw	4
  1519  01DA                     u195:
  1520  01DA  1003               	clrc
  1521  01DB  0CB5               	rrf	??_SWAP_ADC,f
  1522  01DC  3EFF               	addlw	-1
  1523  01DD  1D03               	skipz
  1524  01DE  29DA               	goto	u195
  1525  01DF  0835               	movf	??_SWAP_ADC,w
  1526  01E0  390F               	andlw	15
  1527  01E1  00B6               	movwf	??_SWAP_ADC+1
  1528  01E2  01B7               	clrf	??_SWAP_ADC+2
  1529  01E3  083A               	movf	SWAP_ADC@VAL_ADC,w
  1530  01E4  390F               	andlw	15
  1531  01E5  00B8               	movwf	??_SWAP_ADC+3
  1532  01E6  01B9               	clrf	??_SWAP_ADC+4
  1533  01E7  0EB8               	swapf	??_SWAP_ADC+3,f
  1534  01E8  0EB9               	swapf	??_SWAP_ADC+4,f
  1535  01E9  30F0               	movlw	240
  1536  01EA  05B9               	andwf	??_SWAP_ADC+4,f
  1537  01EB  0838               	movf	??_SWAP_ADC+3,w
  1538  01EC  390F               	andlw	15
  1539  01ED  04B9               	iorwf	??_SWAP_ADC+4,f
  1540  01EE  30F0               	movlw	240
  1541  01EF  05B8               	andwf	??_SWAP_ADC+3,f
  1542  01F0  0836               	movf	??_SWAP_ADC+1,w
  1543  01F1  0438               	iorwf	??_SWAP_ADC+3,w
  1544  01F2  00AE               	movwf	_VAL_SWAP
  1545  01F3  0837               	movf	??_SWAP_ADC+2,w
  1546  01F4  0439               	iorwf	??_SWAP_ADC+4,w
  1547  01F5  00AF               	movwf	_VAL_SWAP+1
  1548  01F6                     l1121:
  1549                           
  1550                           ;Config_ADC.c: 16:     return VAL_SWAP;
  1551  01F6  082F               	movf	_VAL_SWAP+1,w
  1552  01F7  00B4               	movwf	?_SWAP_ADC+1
  1553  01F8  082E               	movf	_VAL_SWAP,w
  1554  01F9  00B3               	movwf	?_SWAP_ADC
  1555  01FA                     l58:
  1556  01FA  0008               	return
  1557  01FB                     __end_of_SWAP_ADC:
  1558                           
  1559                           	psect	text8
  1560  0281                     __ptext8:	
  1561 ;; *************** function _NIBBLE2_ADC *****************
  1562 ;; Defined at:
  1563 ;;		line 24 in file "Config_ADC.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;  VAL_SWAP        1    wreg     unsigned char 
  1566 ;; Auto vars:     Size  Location     Type
  1567 ;;  VAL_SWAP        1    4[BANK0 ] unsigned char 
  1568 ;; Return value:  Size  Location     Type
  1569 ;;                  2    0[BANK0 ] int 
  1570 ;; Registers used:
  1571 ;;		wreg, status,2
  1572 ;; Tracked objects:
  1573 ;;		On entry : 0/0
  1574 ;;		On exit  : 0/0
  1575 ;;		Unchanged: 0/0
  1576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1577 ;;      Params:         0       2       0       0       0
  1578 ;;      Locals:         0       1       0       0       0
  1579 ;;      Temps:          0       2       0       0       0
  1580 ;;      Totals:         0       5       0       0       0
  1581 ;;Total ram usage:        5 bytes
  1582 ;; Hardware stack levels used:    1
  1583 ;; Hardware stack levels required when called:    3
  1584 ;; This function calls:
  1585 ;;		Nothing
  1586 ;; This function is called by:
  1587 ;;		_CONVERSION_ADC
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           
  1592                           ;psect for function _NIBBLE2_ADC
  1593  0281                     _NIBBLE2_ADC:
  1594                           
  1595                           ;incstack = 0
  1596                           ; Regs used in _NIBBLE2_ADC: [wreg+status,2]
  1597                           ;NIBBLE2_ADC@VAL_SWAP stored from wreg
  1598  0281  1283               	bcf	3,5	;RP0=0, select bank0
  1599  0282  1303               	bcf	3,6	;RP1=0, select bank0
  1600  0283  00B7               	movwf	NIBBLE2_ADC@VAL_SWAP
  1601  0284                     l1131:
  1602                           
  1603                           ;Config_ADC.c: 25:     VAL_NIBBLE2 = (VAL_SWAP & 15);
  1604  0284  0837               	movf	NIBBLE2_ADC@VAL_SWAP,w
  1605  0285  390F               	andlw	15
  1606  0286  00B5               	movwf	??_NIBBLE2_ADC
  1607  0287  01B6               	clrf	??_NIBBLE2_ADC+1
  1608  0288  0835               	movf	??_NIBBLE2_ADC,w
  1609  0289  00AA               	movwf	_VAL_NIBBLE2
  1610  028A  0836               	movf	??_NIBBLE2_ADC+1,w
  1611  028B  00AB               	movwf	_VAL_NIBBLE2+1
  1612  028C                     l1133:
  1613                           
  1614                           ;Config_ADC.c: 26:     return VAL_NIBBLE2;
  1615  028C  082B               	movf	_VAL_NIBBLE2+1,w
  1616  028D  00B4               	movwf	?_NIBBLE2_ADC+1
  1617  028E  082A               	movf	_VAL_NIBBLE2,w
  1618  028F  00B3               	movwf	?_NIBBLE2_ADC
  1619  0290                     l64:
  1620  0290  0008               	return
  1621  0291                     __end_of_NIBBLE2_ADC:
  1622                           
  1623                           	psect	text9
  1624  0291                     __ptext9:	
  1625 ;; *************** function _NIBBLE1_ADC *****************
  1626 ;; Defined at:
  1627 ;;		line 19 in file "Config_ADC.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  VAL_ADC         1    wreg     unsigned char 
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;  VAL_ADC         1    4[BANK0 ] unsigned char 
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  2    0[BANK0 ] int 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1641 ;;      Params:         0       2       0       0       0
  1642 ;;      Locals:         0       1       0       0       0
  1643 ;;      Temps:          0       2       0       0       0
  1644 ;;      Totals:         0       5       0       0       0
  1645 ;;Total ram usage:        5 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    3
  1648 ;; This function calls:
  1649 ;;		Nothing
  1650 ;; This function is called by:
  1651 ;;		_CONVERSION_ADC
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _NIBBLE1_ADC
  1657  0291                     _NIBBLE1_ADC:
  1658                           
  1659                           ;incstack = 0
  1660                           ; Regs used in _NIBBLE1_ADC: [wreg+status,2]
  1661                           ;NIBBLE1_ADC@VAL_ADC stored from wreg
  1662  0291  1283               	bcf	3,5	;RP0=0, select bank0
  1663  0292  1303               	bcf	3,6	;RP1=0, select bank0
  1664  0293  00B7               	movwf	NIBBLE1_ADC@VAL_ADC
  1665  0294                     l1125:
  1666                           
  1667                           ;Config_ADC.c: 20:     VAL_NIBBLE1 = (VAL_ADC & 15);
  1668  0294  0837               	movf	NIBBLE1_ADC@VAL_ADC,w
  1669  0295  390F               	andlw	15
  1670  0296  00B5               	movwf	??_NIBBLE1_ADC
  1671  0297  01B6               	clrf	??_NIBBLE1_ADC+1
  1672  0298  0835               	movf	??_NIBBLE1_ADC,w
  1673  0299  00AC               	movwf	_VAL_NIBBLE1
  1674  029A  0836               	movf	??_NIBBLE1_ADC+1,w
  1675  029B  00AD               	movwf	_VAL_NIBBLE1+1
  1676  029C                     l1127:
  1677                           
  1678                           ;Config_ADC.c: 21:     return VAL_NIBBLE1;
  1679  029C  082D               	movf	_VAL_NIBBLE1+1,w
  1680  029D  00B4               	movwf	?_NIBBLE1_ADC+1
  1681  029E  082C               	movf	_VAL_NIBBLE1,w
  1682  029F  00B3               	movwf	?_NIBBLE1_ADC
  1683  02A0                     l61:
  1684  02A0  0008               	return
  1685  02A1                     __end_of_NIBBLE1_ADC:
  1686                           
  1687                           	psect	text10
  1688  00B1                     __ptext10:	
  1689 ;; *************** function _ISR *****************
  1690 ;; Defined at:
  1691 ;;		line 52 in file "Prueba2_lab2.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;		None
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;		None
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1705 ;;      Params:         0       0       0       0       0
  1706 ;;      Locals:         0       0       0       0       0
  1707 ;;      Temps:          5       0       0       0       0
  1708 ;;      Totals:         5       0       0       0       0
  1709 ;;Total ram usage:        5 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    2
  1712 ;; This function calls:
  1713 ;;		_ADC
  1714 ;;		_DisplayADC
  1715 ;; This function is called by:
  1716 ;;		Interrupt level 1
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           
  1721                           ;psect for function _ISR
  1722  00B1                     _ISR:
  1723  00B1                     i1l1213:
  1724                           
  1725                           ;Prueba2_lab2.c: 54:     if (INTCONbits.RBIF == 1){
  1726  00B1  1C0B               	btfss	11,0	;volatile
  1727  00B2  28B4               	goto	u26_21
  1728  00B3  28B5               	goto	u26_20
  1729  00B4                     u26_21:
  1730  00B4  28E2               	goto	i1l1241
  1731  00B5                     u26_20:
  1732  00B5                     i1l1215:
  1733                           
  1734                           ;Prueba2_lab2.c: 56:             if (PORTBbits.RB0 == 1){
  1735  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1736  00B6  1303               	bcf	3,6	;RP1=0, select bank0
  1737  00B7  1C06               	btfss	6,0	;volatile
  1738  00B8  28BA               	goto	u27_21
  1739  00B9  28BB               	goto	u27_20
  1740  00BA                     u27_21:
  1741  00BA  28BD               	goto	i1l168
  1742  00BB                     u27_20:
  1743  00BB                     i1l1217:
  1744                           
  1745                           ;Prueba2_lab2.c: 57:                 debouncing1 = 1;
  1746  00BB  01FA               	clrf	_debouncing1
  1747  00BC  0AFA               	incf	_debouncing1,f
  1748  00BD                     i1l168:	
  1749                           ;Prueba2_lab2.c: 59:             }
  1750                           
  1751                           
  1752                           ;Prueba2_lab2.c: 60:             if (PORTBbits.RB1 == 1){
  1753  00BD  1C86               	btfss	6,1	;volatile
  1754  00BE  28C0               	goto	u28_21
  1755  00BF  28C1               	goto	u28_20
  1756  00C0                     u28_21:
  1757  00C0  28C3               	goto	i1l169
  1758  00C1                     u28_20:
  1759  00C1                     i1l1219:
  1760                           
  1761                           ;Prueba2_lab2.c: 61:                 debouncing2 = 1;
  1762  00C1  01F9               	clrf	_debouncing2
  1763  00C2  0AF9               	incf	_debouncing2,f
  1764  00C3                     i1l169:	
  1765                           ;Prueba2_lab2.c: 63:             }
  1766                           
  1767                           
  1768                           ;Prueba2_lab2.c: 64:             if(PORTBbits.RB0 == 0 && debouncing1 == 1){
  1769  00C3  1806               	btfsc	6,0	;volatile
  1770  00C4  28C6               	goto	u29_21
  1771  00C5  28C7               	goto	u29_20
  1772  00C6                     u29_21:
  1773  00C6  28D3               	goto	i1l1229
  1774  00C7                     u29_20:
  1775  00C7                     i1l1221:
  1776  00C7  037A               	decf	_debouncing1,w
  1777  00C8  1D03               	btfss	3,2
  1778  00C9  28CB               	goto	u30_21
  1779  00CA  28CC               	goto	u30_20
  1780  00CB                     u30_21:
  1781  00CB  28D3               	goto	i1l1229
  1782  00CC                     u30_20:
  1783  00CC                     i1l1223:
  1784                           
  1785                           ;Prueba2_lab2.c: 65:                 contador++;
  1786  00CC  3001               	movlw	1
  1787  00CD  00F3               	movwf	??_ISR
  1788  00CE  0873               	movf	??_ISR,w
  1789  00CF  07FB               	addwf	_contador,f
  1790  00D0                     i1l1225:
  1791                           
  1792                           ;Prueba2_lab2.c: 66:                 PORTC = contador;
  1793  00D0  087B               	movf	_contador,w
  1794  00D1  0087               	movwf	7	;volatile
  1795  00D2                     i1l1227:
  1796                           
  1797                           ;Prueba2_lab2.c: 67:                 debouncing1 = 0;
  1798  00D2  01FA               	clrf	_debouncing1
  1799  00D3                     i1l1229:
  1800                           
  1801                           ;Prueba2_lab2.c: 69:             if(PORTBbits.RB1 == 0 && debouncing2 == 1){
  1802  00D3  1886               	btfsc	6,1	;volatile
  1803  00D4  28D6               	goto	u31_21
  1804  00D5  28D7               	goto	u31_20
  1805  00D6                     u31_21:
  1806  00D6  28E1               	goto	i1l1239
  1807  00D7                     u31_20:
  1808  00D7                     i1l1231:
  1809  00D7  0379               	decf	_debouncing2,w
  1810  00D8  1D03               	btfss	3,2
  1811  00D9  28DB               	goto	u32_21
  1812  00DA  28DC               	goto	u32_20
  1813  00DB                     u32_21:
  1814  00DB  28E1               	goto	i1l1239
  1815  00DC                     u32_20:
  1816  00DC                     i1l1233:
  1817                           
  1818                           ;Prueba2_lab2.c: 70:                 contador--;
  1819  00DC  3001               	movlw	1
  1820  00DD  02FB               	subwf	_contador,f
  1821  00DE                     i1l1235:
  1822                           
  1823                           ;Prueba2_lab2.c: 71:                 PORTC = contador;
  1824  00DE  087B               	movf	_contador,w
  1825  00DF  0087               	movwf	7	;volatile
  1826  00E0                     i1l1237:
  1827                           
  1828                           ;Prueba2_lab2.c: 72:                 debouncing2 = 0;
  1829  00E0  01F9               	clrf	_debouncing2
  1830  00E1                     i1l1239:
  1831                           
  1832                           ;Prueba2_lab2.c: 74:             INTCONbits.RBIF = 0;
  1833  00E1  100B               	bcf	11,0	;volatile
  1834  00E2                     i1l1241:
  1835                           
  1836                           ;Prueba2_lab2.c: 77:     if (PIR1bits.ADIF) {
  1837  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1838  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1839  00E4  1F0C               	btfss	12,6	;volatile
  1840  00E5  28E7               	goto	u33_21
  1841  00E6  28E8               	goto	u33_20
  1842  00E7                     u33_21:
  1843  00E7  2913               	goto	i1l172
  1844  00E8                     u33_20:
  1845  00E8                     i1l1243:
  1846                           
  1847                           ;Prueba2_lab2.c: 78:         PIR1bits.ADIF = 0;
  1848  00E8  130C               	bcf	12,6	;volatile
  1849  00E9                     i1l1245:
  1850                           
  1851                           ;Prueba2_lab2.c: 79:         _delay((unsigned long)((2)*(4000000/4000.0)));
  1852  00E9  3003               	movlw	3
  1853  00EA  00F4               	movwf	??_ISR+1
  1854  00EB  3097               	movlw	151
  1855  00EC  00F3               	movwf	??_ISR
  1856  00ED                     u37_27:
  1857  00ED  0BF3               	decfsz	??_ISR,f
  1858  00EE  28ED               	goto	u37_27
  1859  00EF  0BF4               	decfsz	??_ISR+1,f
  1860  00F0  28ED               	goto	u37_27
  1861  00F1  28F2               	nop2
  1862  00F2                     i1l1247:
  1863                           
  1864                           ;Prueba2_lab2.c: 80:         ADCON0bits.GO = 1;
  1865  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1866  00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1867  00F4  149F               	bsf	31,1	;volatile
  1868                           
  1869                           ;Prueba2_lab2.c: 81:         while (ADCON0bits.GO != 0) {
  1870  00F5  290D               	goto	i1l1253
  1871  00F6                     i1l1249:
  1872                           
  1873                           ;Prueba2_lab2.c: 82:             ADC_VALOR = ADC(ADRESL, ADRESH);
  1874  00F6  081E               	movf	30,w	;volatile
  1875  00F7  00F3               	movwf	??_ISR
  1876  00F8  0873               	movf	??_ISR,w
  1877  00F9  00F0               	movwf	ADC@ADRESH_
  1878  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  1879  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  1880  00FC  081E               	movf	30,w	;volatile
  1881  00FD  120A  118A  22B0  120A  118A  	fcall	_ADC
  1882  0102  0871               	movf	?_ADC+1,w
  1883  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0105  00A3               	movwf	_ADC_VALOR+1
  1886  0106  0870               	movf	?_ADC,w
  1887  0107  00A2               	movwf	_ADC_VALOR
  1888  0108                     i1l1251:
  1889                           
  1890                           ;Prueba2_lab2.c: 84:             DisplayADC();
  1891  0108  120A  118A  2246  120A  118A  	fcall	_DisplayADC
  1892  010D                     i1l1253:
  1893                           
  1894                           ;Prueba2_lab2.c: 81:         while (ADCON0bits.GO != 0) {
  1895  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1896  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1897  010F  189F               	btfsc	31,1	;volatile
  1898  0110  2912               	goto	u34_21
  1899  0111  2913               	goto	u34_20
  1900  0112                     u34_21:
  1901  0112  28F6               	goto	i1l1249
  1902  0113                     u34_20:
  1903  0113                     i1l172:	
  1904                           ;Prueba2_lab2.c: 86:     }
  1905                           
  1906                           
  1907                           ;Prueba2_lab2.c: 88:     if (INTCONbits.TMR0IF == 1) {
  1908  0113  1D0B               	btfss	11,2	;volatile
  1909  0114  2916               	goto	u35_21
  1910  0115  2917               	goto	u35_20
  1911  0116                     u35_21:
  1912  0116  291E               	goto	i1l177
  1913  0117                     u35_20:
  1914  0117                     i1l1255:
  1915                           
  1916                           ;Prueba2_lab2.c: 89:         INTCONbits.TMR0IF = 0;
  1917  0117  110B               	bcf	11,2	;volatile
  1918  0118                     i1l1257:
  1919                           
  1920                           ;Prueba2_lab2.c: 90:         TMR0 = 6;
  1921  0118  3006               	movlw	6
  1922  0119  0081               	movwf	1	;volatile
  1923  011A                     i1l1259:
  1924                           
  1925                           ;Prueba2_lab2.c: 92:         cont_timer++;
  1926  011A  3001               	movlw	1
  1927  011B  00F3               	movwf	??_ISR
  1928  011C  0873               	movf	??_ISR,w
  1929  011D  07B2               	addwf	_cont_timer,f
  1930  011E                     i1l177:
  1931  011E  0877               	movf	??_ISR+4,w
  1932  011F  008A               	movwf	10
  1933  0120  0876               	movf	??_ISR+3,w
  1934  0121  0084               	movwf	4
  1935  0122  0E75               	swapf	??_ISR+2,w
  1936  0123  0083               	movwf	3
  1937  0124  0EFE               	swapf	btemp,f
  1938  0125  0E7E               	swapf	btemp,w
  1939  0126  0009               	retfie
  1940  0127                     __end_of_ISR:
  1941                           
  1942                           	psect	intentry
  1943  0004                     __pintentry:	
  1944                           ;incstack = 0
  1945                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1946                           
  1947  0004                     interrupt_function:
  1948  007E                     saved_w	set	btemp
  1949  0004  00FE               	movwf	btemp
  1950  0005  0E03               	swapf	3,w
  1951  0006  00F5               	movwf	??_ISR+2
  1952  0007  0804               	movf	4,w
  1953  0008  00F6               	movwf	??_ISR+3
  1954  0009  080A               	movf	10,w
  1955  000A  00F7               	movwf	??_ISR+4
  1956  000B  120A  118A  28B1   	ljmp	_ISR
  1957                           
  1958                           	psect	text11
  1959  0246                     __ptext11:	
  1960 ;; *************** function _DisplayADC *****************
  1961 ;; Defined at:
  1962 ;;		line 123 in file "Prueba2_lab2.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1976 ;;      Params:         0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    1
  1983 ;; This function calls:
  1984 ;;		_display
  1985 ;; This function is called by:
  1986 ;;		_ISR
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           
  1991                           ;psect for function _DisplayADC
  1992  0246                     _DisplayADC:
  1993  0246                     i1l1141:	
  1994                           ;incstack = 0
  1995                           ; Regs used in _DisplayADC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1996                           
  1997                           
  1998                           ;Prueba2_lab2.c: 124:     PORTE = 0;
  1999  0246  1283               	bcf	3,5	;RP0=0, select bank0
  2000  0247  1303               	bcf	3,6	;RP1=0, select bank0
  2001  0248  0189               	clrf	9	;volatile
  2002  0249                     i1l1143:
  2003                           
  2004                           ;Prueba2_lab2.c: 125:     if (toggle == 0) {
  2005  0249  0878               	movf	_toggle,w
  2006  024A  1D03               	btfss	3,2
  2007  024B  2A4D               	goto	u20_21
  2008  024C  2A4E               	goto	u20_20
  2009  024D                     u20_21:
  2010  024D  2A59               	goto	i1l1149
  2011  024E                     u20_20:
  2012  024E                     i1l1145:
  2013                           
  2014                           ;Prueba2_lab2.c: 126:         PORTEbits.RE1 = 1;
  2015  024E  1489               	bsf	9,1	;volatile
  2016  024F                     i1l1147:
  2017                           
  2018                           ;Prueba2_lab2.c: 127:         PORTD = display(ADC_NIBBLE2);
  2019  024F  0824               	movf	_ADC_NIBBLE2,w
  2020  0250  120A  118A  2023  120A  118A  	fcall	_display
  2021  0255  1283               	bcf	3,5	;RP0=0, select bank0
  2022  0256  1303               	bcf	3,6	;RP1=0, select bank0
  2023  0257  0088               	movwf	8	;volatile
  2024                           
  2025                           ;Prueba2_lab2.c: 131:     } else if (toggle == 1) {
  2026  0258  2A68               	goto	i1l198
  2027  0259                     i1l1149:
  2028  0259  0378               	decf	_toggle,w
  2029  025A  1D03               	btfss	3,2
  2030  025B  2A5D               	goto	u21_21
  2031  025C  2A5E               	goto	u21_20
  2032  025D                     u21_21:
  2033  025D  2A68               	goto	i1l198
  2034  025E                     u21_20:
  2035  025E                     i1l1151:
  2036                           
  2037                           ;Prueba2_lab2.c: 132:         PORTEbits.RE2 = 1;
  2038  025E  1509               	bsf	9,2	;volatile
  2039  025F                     i1l1153:
  2040                           
  2041                           ;Prueba2_lab2.c: 133:         PORTD = display(ADC_NIBBLE1);
  2042  025F  0826               	movf	_ADC_NIBBLE1,w
  2043  0260  120A  118A  2023  120A  118A  	fcall	_display
  2044  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2045  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2046  0267  0088               	movwf	8	;volatile
  2047  0268                     i1l198:
  2048  0268  0008               	return
  2049  0269                     __end_of_DisplayADC:
  2050                           
  2051                           	psect	text12
  2052  0023                     __ptext12:	
  2053 ;; *************** function _display *****************
  2054 ;; Defined at:
  2055 ;;		line 5 in file "Display.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  ADC_VALOR       1    wreg     unsigned char 
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;  ADC_VALOR       1    2[COMMON] unsigned char 
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      unsigned char 
  2062 ;; Registers used:
  2063 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2069 ;;      Params:         0       0       0       0       0
  2070 ;;      Locals:         1       0       0       0       0
  2071 ;;      Temps:          2       0       0       0       0
  2072 ;;      Totals:         3       0       0       0       0
  2073 ;;Total ram usage:        3 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_DisplayADC
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           
  2083                           ;psect for function _display
  2084  0023                     _display:
  2085                           
  2086                           ;incstack = 0
  2087                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  2088                           ;display@ADC_VALOR stored from wreg
  2089  0023  00F2               	movwf	display@ADC_VALOR
  2090  0024                     i1l1071:
  2091                           
  2092                           ;Display.c: 7:     switch(ADC_VALOR){
  2093  0024  2875               	goto	i1l1109
  2094  0025                     i1l1073:
  2095                           
  2096                           ;Display.c: 9:             Valor_hex = 0b00111111;
  2097  0025  303F               	movlw	63
  2098  0026  00F0               	movwf	??_display
  2099  0027  0870               	movf	??_display,w
  2100  0028  00FC               	movwf	_Valor_hex
  2101                           
  2102                           ;Display.c: 10:             break;
  2103  0029  28AF               	goto	i1l1111
  2104  002A                     i1l1075:
  2105                           
  2106                           ;Display.c: 12:             Valor_hex = 0b000000110;
  2107  002A  3006               	movlw	6
  2108  002B  00F0               	movwf	??_display
  2109  002C  0870               	movf	??_display,w
  2110  002D  00FC               	movwf	_Valor_hex
  2111                           
  2112                           ;Display.c: 13:             break;
  2113  002E  28AF               	goto	i1l1111
  2114  002F                     i1l1077:
  2115                           
  2116                           ;Display.c: 15:             Valor_hex = 0b11011011;
  2117  002F  30DB               	movlw	219
  2118  0030  00F0               	movwf	??_display
  2119  0031  0870               	movf	??_display,w
  2120  0032  00FC               	movwf	_Valor_hex
  2121                           
  2122                           ;Display.c: 16:             break;
  2123  0033  28AF               	goto	i1l1111
  2124  0034                     i1l1079:
  2125                           
  2126                           ;Display.c: 18:             Valor_hex = 0b01001111;
  2127  0034  304F               	movlw	79
  2128  0035  00F0               	movwf	??_display
  2129  0036  0870               	movf	??_display,w
  2130  0037  00FC               	movwf	_Valor_hex
  2131                           
  2132                           ;Display.c: 19:             break;
  2133  0038  28AF               	goto	i1l1111
  2134  0039                     i1l1081:
  2135                           
  2136                           ;Display.c: 21:             Valor_hex = 0b01100110;
  2137  0039  3066               	movlw	102
  2138  003A  00F0               	movwf	??_display
  2139  003B  0870               	movf	??_display,w
  2140  003C  00FC               	movwf	_Valor_hex
  2141                           
  2142                           ;Display.c: 22:             break;
  2143  003D  28AF               	goto	i1l1111
  2144  003E                     i1l1083:
  2145                           
  2146                           ;Display.c: 24:             Valor_hex = 0b01101101;
  2147  003E  306D               	movlw	109
  2148  003F  00F0               	movwf	??_display
  2149  0040  0870               	movf	??_display,w
  2150  0041  00FC               	movwf	_Valor_hex
  2151                           
  2152                           ;Display.c: 25:             break;
  2153  0042  28AF               	goto	i1l1111
  2154  0043                     i1l1085:
  2155                           
  2156                           ;Display.c: 27:             Valor_hex = 0b01111101;
  2157  0043  307D               	movlw	125
  2158  0044  00F0               	movwf	??_display
  2159  0045  0870               	movf	??_display,w
  2160  0046  00FC               	movwf	_Valor_hex
  2161                           
  2162                           ;Display.c: 28:             break;
  2163  0047  28AF               	goto	i1l1111
  2164  0048                     i1l1087:
  2165                           
  2166                           ;Display.c: 30:             Valor_hex = 0b00000111;
  2167  0048  3007               	movlw	7
  2168  0049  00F0               	movwf	??_display
  2169  004A  0870               	movf	??_display,w
  2170  004B  00FC               	movwf	_Valor_hex
  2171                           
  2172                           ;Display.c: 31:             break;
  2173  004C  28AF               	goto	i1l1111
  2174  004D                     i1l1089:
  2175                           
  2176                           ;Display.c: 33:             Valor_hex = 0b01111111;
  2177  004D  307F               	movlw	127
  2178  004E  00F0               	movwf	??_display
  2179  004F  0870               	movf	??_display,w
  2180  0050  00FC               	movwf	_Valor_hex
  2181                           
  2182                           ;Display.c: 34:             break;
  2183  0051  28AF               	goto	i1l1111
  2184  0052                     i1l1091:
  2185                           
  2186                           ;Display.c: 36:             Valor_hex = 0b01101111;
  2187  0052  306F               	movlw	111
  2188  0053  00F0               	movwf	??_display
  2189  0054  0870               	movf	??_display,w
  2190  0055  00FC               	movwf	_Valor_hex
  2191                           
  2192                           ;Display.c: 37:             break;
  2193  0056  28AF               	goto	i1l1111
  2194  0057                     i1l1093:
  2195                           
  2196                           ;Display.c: 39:             Valor_hex = 0b01110111;
  2197  0057  3077               	movlw	119
  2198  0058  00F0               	movwf	??_display
  2199  0059  0870               	movf	??_display,w
  2200  005A  00FC               	movwf	_Valor_hex
  2201                           
  2202                           ;Display.c: 40:             break;
  2203  005B  28AF               	goto	i1l1111
  2204  005C                     i1l1095:
  2205                           
  2206                           ;Display.c: 42:             Valor_hex = 0b01111100;
  2207  005C  307C               	movlw	124
  2208  005D  00F0               	movwf	??_display
  2209  005E  0870               	movf	??_display,w
  2210  005F  00FC               	movwf	_Valor_hex
  2211                           
  2212                           ;Display.c: 43:             break;
  2213  0060  28AF               	goto	i1l1111
  2214  0061                     i1l1097:
  2215                           
  2216                           ;Display.c: 45:             Valor_hex = 0b00111001;
  2217  0061  3039               	movlw	57
  2218  0062  00F0               	movwf	??_display
  2219  0063  0870               	movf	??_display,w
  2220  0064  00FC               	movwf	_Valor_hex
  2221                           
  2222                           ;Display.c: 46:             break;
  2223  0065  28AF               	goto	i1l1111
  2224  0066                     i1l1099:
  2225                           
  2226                           ;Display.c: 48:             Valor_hex = 0b01011110;
  2227  0066  305E               	movlw	94
  2228  0067  00F0               	movwf	??_display
  2229  0068  0870               	movf	??_display,w
  2230  0069  00FC               	movwf	_Valor_hex
  2231                           
  2232                           ;Display.c: 49:             break;
  2233  006A  28AF               	goto	i1l1111
  2234  006B                     i1l1101:
  2235                           
  2236                           ;Display.c: 51:             Valor_hex = 0b01111001;
  2237  006B  3079               	movlw	121
  2238  006C  00F0               	movwf	??_display
  2239  006D  0870               	movf	??_display,w
  2240  006E  00FC               	movwf	_Valor_hex
  2241                           
  2242                           ;Display.c: 52:             break;
  2243  006F  28AF               	goto	i1l1111
  2244  0070                     i1l1103:
  2245                           
  2246                           ;Display.c: 54:             Valor_hex = 0b01110001;
  2247  0070  3071               	movlw	113
  2248  0071  00F0               	movwf	??_display
  2249  0072  0870               	movf	??_display,w
  2250  0073  00FC               	movwf	_Valor_hex
  2251                           
  2252                           ;Display.c: 55:             break;
  2253  0074  28AF               	goto	i1l1111
  2254  0075                     i1l1109:
  2255  0075  0872               	movf	display@ADC_VALOR,w
  2256  0076  00F0               	movwf	??_display
  2257  0077  01F1               	clrf	??_display+1
  2258                           
  2259                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2260                           ; Switch size 1, requested type "simple"
  2261                           ; Number of cases is 1, Range of values is 0 to 0
  2262                           ; switch strategies available:
  2263                           ; Name         Instructions Cycles
  2264                           ; simple_byte            4     3 (average)
  2265                           ; direct_byte           11     8 (fixed)
  2266                           ; jumptable            260     6 (fixed)
  2267                           ;	Chosen strategy is simple_byte
  2268  0078  0871               	movf	??_display+1,w
  2269  0079  3A00               	xorlw	0	; case 0
  2270  007A  1903               	skipnz
  2271  007B  287D               	goto	i1l1327
  2272  007C  2825               	goto	i1l1073
  2273  007D                     i1l1327:
  2274                           
  2275                           ; Switch size 1, requested type "simple"
  2276                           ; Number of cases is 16, Range of values is 0 to 15
  2277                           ; switch strategies available:
  2278                           ; Name         Instructions Cycles
  2279                           ; simple_byte           49    25 (average)
  2280                           ; direct_byte           56     8 (fixed)
  2281                           ; jumptable            260     6 (fixed)
  2282                           ;	Chosen strategy is simple_byte
  2283  007D  0870               	movf	??_display,w
  2284  007E  3A00               	xorlw	0	; case 0
  2285  007F  1903               	skipnz
  2286  0080  2825               	goto	i1l1073
  2287  0081  3A01               	xorlw	1	; case 1
  2288  0082  1903               	skipnz
  2289  0083  282A               	goto	i1l1075
  2290  0084  3A03               	xorlw	3	; case 2
  2291  0085  1903               	skipnz
  2292  0086  282F               	goto	i1l1077
  2293  0087  3A01               	xorlw	1	; case 3
  2294  0088  1903               	skipnz
  2295  0089  2834               	goto	i1l1079
  2296  008A  3A07               	xorlw	7	; case 4
  2297  008B  1903               	skipnz
  2298  008C  2839               	goto	i1l1081
  2299  008D  3A01               	xorlw	1	; case 5
  2300  008E  1903               	skipnz
  2301  008F  283E               	goto	i1l1083
  2302  0090  3A03               	xorlw	3	; case 6
  2303  0091  1903               	skipnz
  2304  0092  2843               	goto	i1l1085
  2305  0093  3A01               	xorlw	1	; case 7
  2306  0094  1903               	skipnz
  2307  0095  2848               	goto	i1l1087
  2308  0096  3A0F               	xorlw	15	; case 8
  2309  0097  1903               	skipnz
  2310  0098  284D               	goto	i1l1089
  2311  0099  3A01               	xorlw	1	; case 9
  2312  009A  1903               	skipnz
  2313  009B  2852               	goto	i1l1091
  2314  009C  3A03               	xorlw	3	; case 10
  2315  009D  1903               	skipnz
  2316  009E  2857               	goto	i1l1093
  2317  009F  3A01               	xorlw	1	; case 11
  2318  00A0  1903               	skipnz
  2319  00A1  285C               	goto	i1l1095
  2320  00A2  3A07               	xorlw	7	; case 12
  2321  00A3  1903               	skipnz
  2322  00A4  2861               	goto	i1l1097
  2323  00A5  3A01               	xorlw	1	; case 13
  2324  00A6  1903               	skipnz
  2325  00A7  2866               	goto	i1l1099
  2326  00A8  3A03               	xorlw	3	; case 14
  2327  00A9  1903               	skipnz
  2328  00AA  286B               	goto	i1l1101
  2329  00AB  3A01               	xorlw	1	; case 15
  2330  00AC  1903               	skipnz
  2331  00AD  2870               	goto	i1l1103
  2332  00AE  2825               	goto	i1l1073
  2333  00AF                     i1l1111:
  2334                           
  2335                           ;Display.c: 60:    return Valor_hex;
  2336  00AF  087C               	movf	_Valor_hex,w
  2337  00B0                     i1l40:
  2338  00B0  0008               	return
  2339  00B1                     __end_of_display:
  2340                           
  2341                           	psect	text13
  2342  02B0                     __ptext13:	
  2343 ;; *************** function _ADC *****************
  2344 ;; Defined at:
  2345 ;;		line 9 in file "Config_ADC.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  ADRESL_         1    wreg     unsigned char 
  2348 ;;  ADRESH_         1    0[COMMON] unsigned char 
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  ADRESL_         1    0[COMMON] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  2    0[COMMON] int 
  2353 ;; Registers used:
  2354 ;;		wreg
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2360 ;;      Params:         3       0       0       0       0
  2361 ;;      Locals:         0       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0
  2363 ;;      Totals:         3       0       0       0       0
  2364 ;;Total ram usage:        3 bytes
  2365 ;; Hardware stack levels used:    1
  2366 ;; This function calls:
  2367 ;;		Nothing
  2368 ;; This function is called by:
  2369 ;;		_ISR
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           
  2374                           ;psect for function _ADC
  2375  02B0                     _ADC:
  2376  02B0                     i1l1137:	
  2377                           ;incstack = 0
  2378                           ; Regs used in _ADC: [wreg]
  2379                           
  2380                           
  2381                           ;Config_ADC.c: 10:     VAL = (ADRESL << 8) | ADRESH;
  2382  02B0  1683               	bsf	3,5	;RP0=1, select bank1
  2383  02B1  1303               	bcf	3,6	;RP1=0, select bank1
  2384  02B2  081E               	movf	30,w	;volatile
  2385  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2386  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2387  02B5  00B1               	movwf	_VAL+1
  2388  02B6  081E               	movf	30,w	;volatile
  2389  02B7  00B0               	movwf	_VAL
  2390                           
  2391                           ;Config_ADC.c: 11:     return VAL;
  2392  02B8  0831               	movf	_VAL+1,w
  2393  02B9  00F1               	movwf	?_ADC+1
  2394  02BA  0830               	movf	_VAL,w
  2395  02BB  00F0               	movwf	?_ADC
  2396  02BC                     i1l55:
  2397  02BC  0008               	return
  2398  02BD                     __end_of_ADC:
  2399  007E                     btemp	set	126	;btemp
  2400  007E                     wtemp0	set	126
  2401                           
  2402                           	psect	config
  2403                           
  2404                           ;Config register CONFIG1 @ 0x2007
  2405                           ;	Oscillator Selection bits
  2406                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2407                           ;	Watchdog Timer Enable bit
  2408                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2409                           ;	Power-up Timer Enable bit
  2410                           ;	PWRTE = OFF, PWRT disabled
  2411                           ;	RE3/MCLR pin function select bit
  2412                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2413                           ;	Code Protection bit
  2414                           ;	CP = OFF, Program memory code protection is disabled
  2415                           ;	Data Code Protection bit
  2416                           ;	CPD = OFF, Data memory code protection is disabled
  2417                           ;	Brown Out Reset Selection bits
  2418                           ;	BOREN = OFF, BOR disabled
  2419                           ;	Internal External Switchover bit
  2420                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2421                           ;	Fail-Safe Clock Monitor Enabled bit
  2422                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2423                           ;	Low Voltage Programming Enable bit
  2424                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2425                           ;	In-Circuit Debugger Mode bit
  2426                           ;	DEBUG = 0x1, unprogrammed default
  2427  2007                     	org	8199
  2428  2007  20D4               	dw	8404
  2429                           
  2430                           ;Config register CONFIG2 @ 0x2008
  2431                           ;	Brown-out Reset Selection bit
  2432                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2433                           ;	Flash Program Memory Self Write Enable bits
  2434                           ;	WRT = OFF, Write protection off
  2435  2008                     	org	8200
  2436  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         24
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80      8      27
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_ADC
    _DisplayADC->_display

Critical Paths under _main in BANK0

    _setup->_initOsc
    _CONVERSION_ADC->_SWAP_ADC

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     110
                     _CONVERSION_ADC
                   _Config_INTERRUPT
                           _Revision
                           _TOGGLE_1
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      22
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _TOGGLE_1                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Revision                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Config_INTERRUPT                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CONVERSION_ADC                                       0     0      0      88
                        _NIBBLE1_ADC
                        _NIBBLE2_ADC
                           _SWAP_ADC
 ---------------------------------------------------------------------------------
 (2) _SWAP_ADC                                             8     6      2      44
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _NIBBLE2_ADC                                          5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _NIBBLE1_ADC                                          5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0      98
                                              3 COMMON     5     5      0
                                _ADC
                         _DisplayADC
 ---------------------------------------------------------------------------------
 (4) _DisplayADC                                           0     0      0      22
                            _display
 ---------------------------------------------------------------------------------
 (5) _display                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _ADC                                                  4     1      3      76
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CONVERSION_ADC
     _NIBBLE1_ADC
     _NIBBLE2_ADC
     _SWAP_ADC
   _Config_INTERRUPT
   _Revision
   _TOGGLE_1
   _setup
     _initOsc

 _ISR (ROOT)
   _ADC
   _DisplayADC
     _display

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      28       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      8      1B       5       33.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      28      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun Feb 07 18:18:47 2021

                        l6 012B                          l7 0183                          l8 0131  
                        l9 0137                         l10 013D                         l11 0143  
                       l12 0149                         l13 014F                         l14 0155  
                       l15 015B                         l16 0184                         l61 02A0  
                       l64 0290                         l58 01FA                         fsr 0004  
                      l201 01D3                        l210 01AC                        l213 0280  
                      l207 0220                        _ADC 02B0                        l192 02AF  
                      u220 02A6                        u221 02A5                        u230 02AD  
                      u231 02AC                        u240 020A                        u241 0209  
                      u250 021D                        u251 021C                        u245 0206  
                      u255 0219                        u360 0232                        u361 0231  
                      u195 01DA                        _ISR 00B1                        _VAL 0030  
                      fsr0 0004                        indf 0000                       ?_ADC 0070  
                     ?_ISR 0070                       l1121 01F6                       l1201 01BB  
                     l1131 0284                       l1203 01C7                       l1211 021D  
                     l1125 0294                       l1133 028C                       l1205 01FB  
                     l1127 029C                       l1119 01D7                       l1207 020A  
                     l1063 0161                       l1209 020E                       l1161 0190  
                     l1059 012A                       l1171 019F                       l1163 0194  
                     l1155 0185                       l1181 0269                       l1325 0169  
                     l1173 01A2                       l1165 0197                       l1157 018B  
                     l1261 0221                       l1183 0275                       l1191 02A1  
                     l1175 01A3                       l1167 019B                       l1159 018F  
                     l1271 0238                       l1263 0226                       l1185 0276  
                     l1193 02A6                       l1177 01A6                       l1169 019E  
                     l1273 023D                       l1265 022B                       l1187 0279  
                     l1195 02A8                       l1179 01A9                       l1267 0232  
                     l1189 027C                       l1197 02AD                       l1269 0233  
                     l1199 01AD                       _IOCB 0096                       i1l40 00B0  
                     i1l55 02BC                       _TMR0 0001                       _main 0221  
                     btemp 007E   __end_of_Config_INTERRUPT 0281                       start 000E  
                    ??_ADC 0073                      ??_ISR 0073                      ?_main 0070  
                    _ANSEL 0188                      i1l172 0113                      i1l168 00BD  
                    i1l177 011E                      i1l169 00C3                      i1l198 0268  
                    u20_20 024E                      u20_21 024D                      u21_20 025E  
                    u21_21 025D                      u30_20 00CC                      u30_21 00CB  
                    u31_20 00D7                      u31_21 00D6                      u32_20 00DC  
                    u32_21 00DB                      u33_20 00E8                      u33_21 00E7  
                    u34_20 0113                      u26_20 00B5                      u34_21 0112  
                    u26_21 00B4                      u35_20 0117                      u27_20 00BB  
                    u35_21 0116                      u27_21 00BA                      _PORTA 0005  
                    _PORTB 0006                      _PORTC 0007                      _PORTD 0008  
                    _PORTE 0009                      u28_20 00C1                      u28_21 00C0  
                    u29_20 00C7                      u29_21 00C6                      u37_27 00ED  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                 _DisplayADC 0246  
         __end_of_TOGGLE_1 02B0            __end_of_display 00B1            __end_of_initOsc 0185  
                    _val_1 0028           __end_of_SWAP_ADC 01FB                      _setup 0185  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __initialization 0011               __end_of_main 0246                     ??_main 003B  
       NIBBLE1_ADC@VAL_ADC 0037           __end_of_Revision 0221                     _ADCON0 001F  
                   _ADCON1 009F                     _ADRESH 001E                     _ADRESL 009E  
              initOsc@IRCF 0035                     ?_setup 0070                     _ANSELH 0189  
                   i1l1101 006B                     i1l1103 0070                     i1l1111 00AF  
                   i1l1109 0075                     i1l1141 0246                     i1l1221 00C7  
                   i1l1213 00B1                     i1l1071 0024                     i1l1151 025E  
                   i1l1143 0249                     i1l1231 00D7                     i1l1223 00CC  
                   i1l1215 00B5                     i1l1137 02B0                     i1l1081 0039  
                   i1l1073 0025                     i1l1153 025F                     i1l1145 024E  
                   i1l1233 00DC                     i1l1225 00D0                     i1l1217 00BB  
                   i1l1241 00E2                     i1l1091 0052                     i1l1083 003E  
                   i1l1075 002A                     i1l1147 024F                     i1l1251 0108  
                   i1l1243 00E8                     i1l1235 00DE                     i1l1227 00D2  
                   i1l1219 00C1                     i1l1093 0057                     i1l1085 0043  
                   i1l1077 002F                     i1l1149 0259                     i1l1253 010D  
                   i1l1245 00E9                     i1l1237 00E0                     i1l1229 00D3  
                   i1l1327 007D                     i1l1095 005C                     i1l1087 0048  
                   i1l1079 0034                     i1l1255 0117                     i1l1247 00F2  
                   i1l1239 00E1                     i1l1097 0061                     i1l1089 004D  
                   i1l1257 0118                     i1l1249 00F6                     i1l1099 0066  
                   i1l1259 011A                     _INTCON 000B       __size_of_NIBBLE1_ADC 0010  
     __size_of_NIBBLE2_ADC 0010                     _toggle 0078            SWAP_ADC@VAL_ADC 003A  
                ??_display 0070                  ??_initOsc 0033                ?_DisplayADC 0070  
                   saved_w 007E                 ADC@ADRESH_ 0070                 ADC@ADRESL_ 0070  
  __end_of__initialization 001F             __pcstackCOMMON 0070                  ?_TOGGLE_1 0070  
            __end_of_setup 01AD                  ?_SWAP_ADC 0033           display@ADC_VALOR 0072  
                  ??_setup 0036                 __pbssBANK0 0020    __size_of_CONVERSION_ADC 0027  
        ?_Config_INTERRUPT 0070                 __pmaintext 0221                  ?_Revision 0070  
      __size_of_DisplayADC 0023         ??_Config_INTERRUPT 0033                 ??_TOGGLE_1 0033  
               __pintentry 0004                 ??_SWAP_ADC 0035                 _cont_timer 0032  
                _ADC_VALOR 0022                 ??_Revision 0033                    __ptext1 0185  
                  __ptext2 0127                    __ptext3 02A1                    __ptext4 01FB  
                  __ptext5 0269                    __ptext6 01AD                    __ptext7 01D4  
                  __ptext8 0281                    __ptext9 0291                    _display 0023  
             __size_of_ADC 000D               __size_of_ISR 0076                    _initOsc 0127  
                  clrloop0 02BE       end_of_initialization 001F        NIBBLE2_ADC@VAL_SWAP 0037  
                _PORTBbits 0006                  _PORTEbits 0009               ??_DisplayADC 0073  
           _CONVERSION_ADC 01AD              ??_NIBBLE1_ADC 0035              ??_NIBBLE2_ADC 0035  
              _ADC_NIBBLE1 0026                _ADC_NIBBLE2 0024         __end_of_DisplayADC 0269  
        __size_of_TOGGLE_1 000F          __size_of_SWAP_ADC 0027        start_initialization 0011  
              __end_of_ADC 02BD                __end_of_ISR 0127     __end_of_CONVERSION_ADC 01D4  
                _Valor_hex 007C        __end_of_NIBBLE1_ADC 02A1        __end_of_NIBBLE2_ADC 0291  
        __size_of_Revision 0026  __size_of_Config_INTERRUPT 0018                __pbssCOMMON 0078  
                ___latbits 0002              __pcstackBANK0 0033            ?_CONVERSION_ADC 0070  
              _debouncing1 007A                _debouncing2 0079                   ?_display 0070  
                 ?_initOsc 0070                   _ADC_SWAP 0020             __size_of_setup 0028  
        interrupt_function 0004                  clear_ram0 02BD                _NIBBLE1_ADC 0291  
                 _PIE1bits 008C                _NIBBLE2_ADC 0281                   _PIR1bits 000C  
                 _TOGGLE_1 02A1                   _VAL_SWAP 002E                   _SWAP_ADC 01D4  
               _ADCON0bits 001F                   _Revision 01FB           _Config_INTERRUPT 0269  
         __size_of_display 008E           __size_of_initOsc 005E                   __ptext10 00B1  
                 __ptext11 0246                   __ptext12 0023                   __ptext13 02B0  
                 _contador 007B              __size_of_main 0025                 _INTCONbits 000B  
         ??_CONVERSION_ADC 003B                _VAL_NIBBLE1 002C                _VAL_NIBBLE2 002A  
                 intlevel1 0000                 _OSCCONbits 008F                 _OPTION_REG 0081  
             ?_NIBBLE1_ADC 0033               ?_NIBBLE2_ADC 0033  
