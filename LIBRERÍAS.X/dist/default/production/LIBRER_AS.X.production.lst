

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Feb 03 08:09:10 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F887 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  0105                     	;# 
   121  0107                     	;# 
   122  0108                     	;# 
   123  0109                     	;# 
   124  010C                     	;# 
   125  010C                     	;# 
   126  010D                     	;# 
   127  010E                     	;# 
   128  010F                     	;# 
   129  0185                     	;# 
   130  0187                     	;# 
   131  0188                     	;# 
   132  0189                     	;# 
   133  018C                     	;# 
   134  018D                     	;# 
   135  0000                     	;# 
   136  0001                     	;# 
   137  0002                     	;# 
   138  0003                     	;# 
   139  0004                     	;# 
   140  0005                     	;# 
   141  0006                     	;# 
   142  0007                     	;# 
   143  0008                     	;# 
   144  0009                     	;# 
   145  000A                     	;# 
   146  000B                     	;# 
   147  000C                     	;# 
   148  000D                     	;# 
   149  000E                     	;# 
   150  000E                     	;# 
   151  000F                     	;# 
   152  0010                     	;# 
   153  0011                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0015                     	;# 
   158  0015                     	;# 
   159  0016                     	;# 
   160  0017                     	;# 
   161  0018                     	;# 
   162  0019                     	;# 
   163  001A                     	;# 
   164  001B                     	;# 
   165  001B                     	;# 
   166  001C                     	;# 
   167  001D                     	;# 
   168  001E                     	;# 
   169  001F                     	;# 
   170  0081                     	;# 
   171  0085                     	;# 
   172  0086                     	;# 
   173  0087                     	;# 
   174  0088                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0008                     	;# 
   222  0009                     	;# 
   223  000A                     	;# 
   224  000B                     	;# 
   225  000C                     	;# 
   226  000D                     	;# 
   227  000E                     	;# 
   228  000E                     	;# 
   229  000F                     	;# 
   230  0010                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0015                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001B                     	;# 
   244  001C                     	;# 
   245  001D                     	;# 
   246  001E                     	;# 
   247  001F                     	;# 
   248  0081                     	;# 
   249  0085                     	;# 
   250  0086                     	;# 
   251  0087                     	;# 
   252  0088                     	;# 
   253  0089                     	;# 
   254  008C                     	;# 
   255  008D                     	;# 
   256  008E                     	;# 
   257  008F                     	;# 
   258  0090                     	;# 
   259  0091                     	;# 
   260  0092                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0094                     	;# 
   265  0095                     	;# 
   266  0096                     	;# 
   267  0097                     	;# 
   268  0098                     	;# 
   269  0099                     	;# 
   270  009A                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  009F                     	;# 
   276  0105                     	;# 
   277  0107                     	;# 
   278  0108                     	;# 
   279  0109                     	;# 
   280  010C                     	;# 
   281  010C                     	;# 
   282  010D                     	;# 
   283  010E                     	;# 
   284  010F                     	;# 
   285  0185                     	;# 
   286  0187                     	;# 
   287  0188                     	;# 
   288  0189                     	;# 
   289  018C                     	;# 
   290  018D                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0008                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000D                     	;# 
   305  000E                     	;# 
   306  000E                     	;# 
   307  000F                     	;# 
   308  0010                     	;# 
   309  0011                     	;# 
   310  0012                     	;# 
   311  0013                     	;# 
   312  0014                     	;# 
   313  0015                     	;# 
   314  0015                     	;# 
   315  0016                     	;# 
   316  0017                     	;# 
   317  0018                     	;# 
   318  0019                     	;# 
   319  001A                     	;# 
   320  001B                     	;# 
   321  001B                     	;# 
   322  001C                     	;# 
   323  001D                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  0081                     	;# 
   327  0085                     	;# 
   328  0086                     	;# 
   329  0087                     	;# 
   330  0088                     	;# 
   331  0089                     	;# 
   332  008C                     	;# 
   333  008D                     	;# 
   334  008E                     	;# 
   335  008F                     	;# 
   336  0090                     	;# 
   337  0091                     	;# 
   338  0092                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0093                     	;# 
   342  0094                     	;# 
   343  0095                     	;# 
   344  0096                     	;# 
   345  0097                     	;# 
   346  0098                     	;# 
   347  0099                     	;# 
   348  009A                     	;# 
   349  009B                     	;# 
   350  009C                     	;# 
   351  009D                     	;# 
   352  009E                     	;# 
   353  009F                     	;# 
   354  0105                     	;# 
   355  0107                     	;# 
   356  0108                     	;# 
   357  0109                     	;# 
   358  010C                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010E                     	;# 
   362  010F                     	;# 
   363  0185                     	;# 
   364  0187                     	;# 
   365  0188                     	;# 
   366  0189                     	;# 
   367  018C                     	;# 
   368  018D                     	;# 
   369  0000                     	;# 
   370  0001                     	;# 
   371  0002                     	;# 
   372  0003                     	;# 
   373  0004                     	;# 
   374  0005                     	;# 
   375  0006                     	;# 
   376  0007                     	;# 
   377  0008                     	;# 
   378  0009                     	;# 
   379  000A                     	;# 
   380  000B                     	;# 
   381  000C                     	;# 
   382  000D                     	;# 
   383  000E                     	;# 
   384  000E                     	;# 
   385  000F                     	;# 
   386  0010                     	;# 
   387  0011                     	;# 
   388  0012                     	;# 
   389  0013                     	;# 
   390  0014                     	;# 
   391  0015                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001B                     	;# 
   400  001C                     	;# 
   401  001D                     	;# 
   402  001E                     	;# 
   403  001F                     	;# 
   404  0081                     	;# 
   405  0085                     	;# 
   406  0086                     	;# 
   407  0087                     	;# 
   408  0088                     	;# 
   409  0089                     	;# 
   410  008C                     	;# 
   411  008D                     	;# 
   412  008E                     	;# 
   413  008F                     	;# 
   414  0090                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0093                     	;# 
   418  0093                     	;# 
   419  0093                     	;# 
   420  0094                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0098                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  009F                     	;# 
   432  0105                     	;# 
   433  0107                     	;# 
   434  0108                     	;# 
   435  0109                     	;# 
   436  010C                     	;# 
   437  010C                     	;# 
   438  010D                     	;# 
   439  010E                     	;# 
   440  010F                     	;# 
   441  0185                     	;# 
   442  0187                     	;# 
   443  0188                     	;# 
   444  0189                     	;# 
   445  018C                     	;# 
   446  018D                     	;# 
   447  001F                     _ADCON0	set	31
   448  0009                     _PORTE	set	9
   449  0007                     _PORTC	set	7
   450  0006                     _PORTB	set	6
   451  0005                     _PORTA	set	5
   452  0008                     _PORTD	set	8
   453  0009                     _PORTEbits	set	9
   454  001F                     _ADCON0bits	set	31
   455  001E                     _ADRESH	set	30
   456  000C                     _PIR1bits	set	12
   457  0006                     _PORTBbits	set	6
   458  000B                     _INTCONbits	set	11
   459  008C                     _PIE1bits	set	140
   460  0096                     _IOCBbits	set	150
   461  0089                     _TRISE	set	137
   462  0088                     _TRISD	set	136
   463  0087                     _TRISC	set	135
   464  0086                     _TRISB	set	134
   465  0085                     _TRISA	set	133
   466  009E                     _ADRESL	set	158
   467  008F                     _OSCCONbits	set	143
   468  0189                     _ANSELH	set	393
   469  0188                     _ANSEL	set	392
   470                           
   471                           	psect	cinit
   472  000F                     start_initialization:	
   473                           ; #config settings
   474                           
   475  000F                     __initialization:
   476                           
   477                           ; Clear objects allocated to COMMON
   478  000F  01FA               	clrf	__pbssCOMMON& (0+127)
   479  0010  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   480  0011  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   481  0012  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
   482                           
   483                           ; Clear objects allocated to BANK0
   484  0013  1283               	bcf	3,5	;RP0=0, select bank0
   485  0014  1303               	bcf	3,6	;RP1=0, select bank0
   486  0015  01A0               	clrf	__pbssBANK0& (0+127)
   487  0016  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   488  0017  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   489  0018  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   490  0019  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   491  001A  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   492  001B  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   493  001C                     end_of_initialization:	
   494                           ;End of C runtime variable initialization code
   495                           
   496  001C                     __end_of__initialization:
   497  001C  0183               	clrf	3
   498  001D  120A  118A  29B3   	ljmp	_main	;jump to C main() function
   499                           
   500                           	psect	bssCOMMON
   501  007A                     __pbssCOMMON:
   502  007A                     _ADC_VALOR:
   503  007A                     	ds	2
   504  007C                     _contador:
   505  007C                     	ds	1
   506  007D                     _Valor_hex:
   507  007D                     	ds	1
   508                           
   509                           	psect	bssBANK0
   510  0020                     __pbssBANK0:
   511  0020                     _VAL_NIBBLE2:
   512  0020                     	ds	1
   513  0021                     _VAL_NIBBLE1:
   514  0021                     	ds	1
   515  0022                     _VAL_SWAP:
   516  0022                     	ds	1
   517  0023                     _VAL:
   518  0023                     	ds	1
   519  0024                     _ADC_NIBBLE2:
   520  0024                     	ds	1
   521  0025                     _ADC_NIBBLE1:
   522  0025                     	ds	1
   523  0026                     _ADC_SWAP:
   524  0026                     	ds	1
   525                           
   526                           	psect	cstackCOMMON
   527  0070                     __pcstackCOMMON:
   528  0070                     ?_ADC:
   529  0070                     ?_SWAP_ADC:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ??_SWAP_ADC:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_NIBBLE1_ADC:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ??_NIBBLE1_ADC:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ?_NIBBLE2_ADC:	
   542                           ; 1 bytes @ 0x0
   543                           
   544  0070                     ??_NIBBLE2_ADC:	
   545                           ; 1 bytes @ 0x0
   546                           
   547  0070                     ?_setup:	
   548                           ; 1 bytes @ 0x0
   549                           
   550  0070                     ?_ContadorLEDS:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_initOsc:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_display:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_ISR:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_main:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ADC@ADRESL_:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ADC@ADRESH_:	
   569                           ; 1 bytes @ 0x0
   570                           
   571                           
   572                           ; 1 bytes @ 0x0
   573  0070                     	ds	1
   574  0071                     ??_ADC:
   575  0071                     NIBBLE1_ADC@VAL_ADC:	
   576                           ; 1 bytes @ 0x1
   577                           
   578  0071                     NIBBLE2_ADC@VAL_SWAP:	
   579                           ; 1 bytes @ 0x1
   580                           
   581                           
   582                           ; 1 bytes @ 0x1
   583  0071                     	ds	3
   584  0074                     SWAP_ADC@VAL_ADC:
   585                           
   586                           ; 1 bytes @ 0x4
   587  0074                     	ds	1
   588  0075                     ??_ISR:
   589                           
   590                           ; 1 bytes @ 0x5
   591  0075                     	ds	5
   592                           
   593                           	psect	cstackBANK0
   594  0027                     __pcstackBANK0:
   595  0027                     ??_ContadorLEDS:
   596  0027                     ??_initOsc:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0027                     ??_display:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604  0027                     	ds	2
   605  0029                     initOsc@IRCF:
   606  0029                     display@ADC_VALOR:	
   607                           ; 1 bytes @ 0x2
   608                           
   609                           
   610                           ; 1 bytes @ 0x2
   611  0029                     	ds	1
   612  002A                     ??_setup:
   613  002A                     ??_main:	
   614                           ; 1 bytes @ 0x3
   615                           
   616                           
   617                           ; 1 bytes @ 0x3
   618  002A                     	ds	1
   619                           
   620                           	psect	maintext
   621  01B3                     __pmaintext:	
   622 ;;
   623 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   624 ;;
   625 ;; *************** function _main *****************
   626 ;; Defined at:
   627 ;;		line 97 in file "Prueba.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : B00/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   641 ;;      Params:         0       0       0       0       0
   642 ;;      Locals:         0       0       0       0       0
   643 ;;      Temps:          0       1       0       0       0
   644 ;;      Totals:         0       1       0       0       0
   645 ;;Total ram usage:        1 bytes
   646 ;; Hardware stack levels required when called:    4
   647 ;; This function calls:
   648 ;;		_ContadorLEDS
   649 ;;		_display
   650 ;;		_setup
   651 ;; This function is called by:
   652 ;;		Startup code after reset
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           
   657                           ;psect for function _main
   658  01B3                     _main:
   659  01B3                     l1144:	
   660                           ;incstack = 0
   661                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   662                           
   663                           
   664                           ;Prueba.c: 98:     contador = 0;
   665  01B3  01FC               	clrf	_contador
   666  01B4                     l1146:
   667                           
   668                           ;Prueba.c: 99:     setup();
   669  01B4  120A  118A  2178  120A  118A  	fcall	_setup
   670  01B9                     l1148:
   671                           
   672                           ;Prueba.c: 104:         ContadorLEDS();
   673  01B9  120A  118A  221D  120A  118A  	fcall	_ContadorLEDS
   674  01BE                     l1150:
   675                           
   676                           ;Prueba.c: 105:         PORTEbits.RE2 = 1;
   677  01BE  1283               	bcf	3,5	;RP0=0, select bank0
   678  01BF  1303               	bcf	3,6	;RP1=0, select bank0
   679  01C0  1509               	bsf	9,2	;volatile
   680  01C1                     l1152:
   681                           
   682                           ;Prueba.c: 106:         PORTD = display(ADC_NIBBLE1);
   683  01C1  0825               	movf	_ADC_NIBBLE1,w
   684  01C2  120A  118A  2020  120A  118A  	fcall	_display
   685  01C7  1283               	bcf	3,5	;RP0=0, select bank0
   686  01C8  1303               	bcf	3,6	;RP1=0, select bank0
   687  01C9  0088               	movwf	8	;volatile
   688  01CA                     l1154:
   689                           
   690                           ;Prueba.c: 108:         if (ADC_VALOR >= contador){
   691  01CA  087B               	movf	_ADC_VALOR+1,w
   692  01CB  3A80               	xorlw	128
   693  01CC  00AA               	movwf	??_main
   694  01CD  3080               	movlw	128
   695  01CE  022A               	subwf	??_main,w
   696  01CF  1D03               	skipz
   697  01D0  29D3               	goto	u185
   698  01D1  087C               	movf	_contador,w
   699  01D2  027A               	subwf	_ADC_VALOR,w
   700  01D3                     u185:
   701  01D3  1C03               	skipc
   702  01D4  29D6               	goto	u181
   703  01D5  29D7               	goto	u180
   704  01D6                     u181:
   705  01D6  29DB               	goto	l133
   706  01D7                     u180:
   707  01D7                     l1156:
   708                           
   709                           ;Prueba.c: 109:             PORTEbits.RE0 = 1;
   710  01D7  1283               	bcf	3,5	;RP0=0, select bank0
   711  01D8  1303               	bcf	3,6	;RP1=0, select bank0
   712  01D9  1409               	bsf	9,0	;volatile
   713                           
   714                           ;Prueba.c: 110:         }
   715  01DA  29B9               	goto	l1148
   716  01DB                     l133:	
   717                           ;Prueba.c: 111:         else {
   718                           
   719                           
   720                           ;Prueba.c: 112:             PORTEbits.RE0 = 0;
   721  01DB  1283               	bcf	3,5	;RP0=0, select bank0
   722  01DC  1303               	bcf	3,6	;RP1=0, select bank0
   723  01DD  1009               	bcf	9,0	;volatile
   724  01DE  29B9               	goto	l1148
   725  01DF  120A  118A  280C   	ljmp	start
   726  01E2                     __end_of_main:
   727                           
   728                           	psect	text1
   729  0178                     __ptext1:	
   730 ;; *************** function _setup *****************
   731 ;; Defined at:
   732 ;;		line 122 in file "Prueba.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      void 
   739 ;; Registers used:
   740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   746 ;;      Params:         0       0       0       0       0
   747 ;;      Locals:         0       0       0       0       0
   748 ;;      Temps:          0       0       0       0       0
   749 ;;      Totals:         0       0       0       0       0
   750 ;;Total ram usage:        0 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    3
   753 ;; This function calls:
   754 ;;		_initOsc
   755 ;; This function is called by:
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           
   761                           ;psect for function _setup
   762  0178                     _setup:
   763  0178                     l1064:	
   764                           ;incstack = 0
   765                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   766                           
   767                           
   768                           ;Prueba.c: 123:     initOsc(0b00000110);
   769  0178  3006               	movlw	6
   770  0179  120A  118A  211A  120A  118A  	fcall	_initOsc
   771  017E                     l1066:
   772                           
   773                           ;Prueba.c: 124:     ANSEL = 0b00000001;
   774  017E  3001               	movlw	1
   775  017F  1683               	bsf	3,5	;RP0=1, select bank3
   776  0180  1703               	bsf	3,6	;RP1=1, select bank3
   777  0181  0088               	movwf	8	;volatile
   778  0182                     l1068:
   779                           
   780                           ;Prueba.c: 125:     ANSELH = 0;
   781  0182  0189               	clrf	9	;volatile
   782  0183                     l1070:
   783                           
   784                           ;Prueba.c: 126:     TRISA = 0b00000001;
   785  0183  3001               	movlw	1
   786  0184  1683               	bsf	3,5	;RP0=1, select bank1
   787  0185  1303               	bcf	3,6	;RP1=0, select bank1
   788  0186  0085               	movwf	5	;volatile
   789  0187                     l1072:
   790                           
   791                           ;Prueba.c: 127:     PORTA = 0;
   792  0187  1283               	bcf	3,5	;RP0=0, select bank0
   793  0188  1303               	bcf	3,6	;RP1=0, select bank0
   794  0189  0185               	clrf	5	;volatile
   795  018A                     l1074:
   796                           
   797                           ;Prueba.c: 128:     TRISB = 0b00000011;
   798  018A  3003               	movlw	3
   799  018B  1683               	bsf	3,5	;RP0=1, select bank1
   800  018C  1303               	bcf	3,6	;RP1=0, select bank1
   801  018D  0086               	movwf	6	;volatile
   802  018E                     l1076:
   803                           
   804                           ;Prueba.c: 129:     PORTB = 0;
   805  018E  1283               	bcf	3,5	;RP0=0, select bank0
   806  018F  1303               	bcf	3,6	;RP1=0, select bank0
   807  0190  0186               	clrf	6	;volatile
   808  0191                     l1078:
   809                           
   810                           ;Prueba.c: 130:     TRISC = 0;
   811  0191  1683               	bsf	3,5	;RP0=1, select bank1
   812  0192  1303               	bcf	3,6	;RP1=0, select bank1
   813  0193  0187               	clrf	7	;volatile
   814  0194                     l1080:
   815                           
   816                           ;Prueba.c: 131:     PORTC = 0;
   817  0194  1283               	bcf	3,5	;RP0=0, select bank0
   818  0195  1303               	bcf	3,6	;RP1=0, select bank0
   819  0196  0187               	clrf	7	;volatile
   820  0197                     l1082:
   821                           
   822                           ;Prueba.c: 132:     TRISD = 0;
   823  0197  1683               	bsf	3,5	;RP0=1, select bank1
   824  0198  1303               	bcf	3,6	;RP1=0, select bank1
   825  0199  0188               	clrf	8	;volatile
   826  019A                     l1084:
   827                           
   828                           ;Prueba.c: 133:     PORTD = 0;
   829  019A  1283               	bcf	3,5	;RP0=0, select bank0
   830  019B  1303               	bcf	3,6	;RP1=0, select bank0
   831  019C  0188               	clrf	8	;volatile
   832  019D                     l1086:
   833                           
   834                           ;Prueba.c: 134:     TRISE = 0;
   835  019D  1683               	bsf	3,5	;RP0=1, select bank1
   836  019E  1303               	bcf	3,6	;RP1=0, select bank1
   837  019F  0189               	clrf	9	;volatile
   838  01A0                     l1088:
   839                           
   840                           ;Prueba.c: 135:     PORTE = 0;
   841  01A0  1283               	bcf	3,5	;RP0=0, select bank0
   842  01A1  1303               	bcf	3,6	;RP1=0, select bank0
   843  01A2  0189               	clrf	9	;volatile
   844  01A3                     l1090:
   845                           
   846                           ;Prueba.c: 136:     INTCONbits.GIE = 1;
   847  01A3  178B               	bsf	11,7	;volatile
   848  01A4                     l1092:
   849                           
   850                           ;Prueba.c: 137:     INTCONbits.RBIE = 1;
   851  01A4  158B               	bsf	11,3	;volatile
   852  01A5                     l1094:
   853                           
   854                           ;Prueba.c: 138:     INTCONbits.RBIF = 0;
   855  01A5  100B               	bcf	11,0	;volatile
   856  01A6                     l1096:
   857                           
   858                           ;Prueba.c: 139:     IOCBbits.IOCB0 = 1;
   859  01A6  1683               	bsf	3,5	;RP0=1, select bank1
   860  01A7  1303               	bcf	3,6	;RP1=0, select bank1
   861  01A8  1416               	bsf	22,0	;volatile
   862  01A9                     l1098:
   863                           
   864                           ;Prueba.c: 140:     IOCBbits.IOCB1 = 1;
   865  01A9  1496               	bsf	22,1	;volatile
   866  01AA                     l1100:
   867                           
   868                           ;Prueba.c: 141:     INTCONbits.PEIE = 1;
   869  01AA  170B               	bsf	11,6	;volatile
   870  01AB                     l1102:
   871                           
   872                           ;Prueba.c: 142:     PIE1bits.ADIE = 1;
   873  01AB  170C               	bsf	12,6	;volatile
   874  01AC                     l1104:
   875                           
   876                           ;Prueba.c: 143:     PIR1bits.ADIF = 0;
   877  01AC  1283               	bcf	3,5	;RP0=0, select bank0
   878  01AD  1303               	bcf	3,6	;RP1=0, select bank0
   879  01AE  130C               	bcf	12,6	;volatile
   880  01AF                     l1106:
   881                           
   882                           ;Prueba.c: 144:     ADCON0 = 0b11000001;
   883  01AF  30C1               	movlw	193
   884  01B0  009F               	movwf	31	;volatile
   885  01B1                     l1108:
   886                           
   887                           ;Prueba.c: 145:     ADCON0bits.GO_nDONE = 1;
   888  01B1  149F               	bsf	31,1	;volatile
   889  01B2                     l140:
   890  01B2  0008               	return
   891  01B3                     __end_of_setup:
   892                           
   893                           	psect	text2
   894  011A                     __ptext2:	
   895 ;; *************** function _initOsc *****************
   896 ;; Defined at:
   897 ;;		line 3 in file "Oscilador.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  IRCF            1    wreg     unsigned char 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  IRCF            1    2[BANK0 ] unsigned char 
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   911 ;;      Params:         0       0       0       0       0
   912 ;;      Locals:         0       1       0       0       0
   913 ;;      Temps:          0       2       0       0       0
   914 ;;      Totals:         0       3       0       0       0
   915 ;;Total ram usage:        3 bytes
   916 ;; Hardware stack levels used:    1
   917 ;; Hardware stack levels required when called:    2
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_setup
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           
   926                           ;psect for function _initOsc
   927  011A                     _initOsc:
   928                           
   929                           ;incstack = 0
   930                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
   931                           ;initOsc@IRCF stored from wreg
   932  011A  1283               	bcf	3,5	;RP0=0, select bank0
   933  011B  1303               	bcf	3,6	;RP1=0, select bank0
   934  011C  00A9               	movwf	initOsc@IRCF
   935  011D                     l980:
   936                           
   937                           ;Oscilador.c: 5:     switch(IRCF){
   938  011D  2954               	goto	l984
   939  011E                     l6:	
   940                           ;Oscilador.c: 6:         case 0:
   941                           
   942                           
   943                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
   944  011E  1683               	bsf	3,5	;RP0=1, select bank1
   945  011F  1303               	bcf	3,6	;RP1=0, select bank1
   946  0120  130F               	bcf	15,6	;volatile
   947                           
   948                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
   949  0121  128F               	bcf	15,5	;volatile
   950                           
   951                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
   952  0122  120F               	bcf	15,4	;volatile
   953                           
   954                           ;Oscilador.c: 10:             break;
   955  0123  2976               	goto	l7
   956  0124                     l8:	
   957                           ;Oscilador.c: 11:          case 1:
   958                           
   959                           
   960                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
   961  0124  1683               	bsf	3,5	;RP0=1, select bank1
   962  0125  1303               	bcf	3,6	;RP1=0, select bank1
   963  0126  130F               	bcf	15,6	;volatile
   964                           
   965                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
   966  0127  128F               	bcf	15,5	;volatile
   967                           
   968                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
   969  0128  160F               	bsf	15,4	;volatile
   970                           
   971                           ;Oscilador.c: 15:             break;
   972  0129  2976               	goto	l7
   973  012A                     l9:	
   974                           ;Oscilador.c: 16:         case 2:
   975                           
   976                           
   977                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
   978  012A  1683               	bsf	3,5	;RP0=1, select bank1
   979  012B  1303               	bcf	3,6	;RP1=0, select bank1
   980  012C  130F               	bcf	15,6	;volatile
   981                           
   982                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
   983  012D  168F               	bsf	15,5	;volatile
   984                           
   985                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
   986  012E  120F               	bcf	15,4	;volatile
   987                           
   988                           ;Oscilador.c: 20:             break;
   989  012F  2976               	goto	l7
   990  0130                     l10:	
   991                           ;Oscilador.c: 21:         case 3:
   992                           
   993                           
   994                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
   995  0130  1683               	bsf	3,5	;RP0=1, select bank1
   996  0131  1303               	bcf	3,6	;RP1=0, select bank1
   997  0132  130F               	bcf	15,6	;volatile
   998                           
   999                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
  1000  0133  168F               	bsf	15,5	;volatile
  1001                           
  1002                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
  1003  0134  160F               	bsf	15,4	;volatile
  1004                           
  1005                           ;Oscilador.c: 25:             break;
  1006  0135  2976               	goto	l7
  1007  0136                     l11:	
  1008                           ;Oscilador.c: 26:         case 4:
  1009                           
  1010                           
  1011                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1012  0136  1683               	bsf	3,5	;RP0=1, select bank1
  1013  0137  1303               	bcf	3,6	;RP1=0, select bank1
  1014  0138  170F               	bsf	15,6	;volatile
  1015                           
  1016                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1017  0139  128F               	bcf	15,5	;volatile
  1018                           
  1019                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1020  013A  120F               	bcf	15,4	;volatile
  1021                           
  1022                           ;Oscilador.c: 30:             break;
  1023  013B  2976               	goto	l7
  1024  013C                     l12:	
  1025                           ;Oscilador.c: 31:         case 5:
  1026                           
  1027                           
  1028                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1029  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1030  013D  1303               	bcf	3,6	;RP1=0, select bank1
  1031  013E  170F               	bsf	15,6	;volatile
  1032                           
  1033                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1034  013F  128F               	bcf	15,5	;volatile
  1035                           
  1036                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1037  0140  160F               	bsf	15,4	;volatile
  1038                           
  1039                           ;Oscilador.c: 35:             break;
  1040  0141  2976               	goto	l7
  1041  0142                     l13:	
  1042                           ;Oscilador.c: 36:         case 6:
  1043                           
  1044                           
  1045                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1046  0142  1683               	bsf	3,5	;RP0=1, select bank1
  1047  0143  1303               	bcf	3,6	;RP1=0, select bank1
  1048  0144  170F               	bsf	15,6	;volatile
  1049                           
  1050                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1051  0145  168F               	bsf	15,5	;volatile
  1052                           
  1053                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1054  0146  120F               	bcf	15,4	;volatile
  1055                           
  1056                           ;Oscilador.c: 40:             break;
  1057  0147  2976               	goto	l7
  1058  0148                     l14:	
  1059                           ;Oscilador.c: 41:         case 7:
  1060                           
  1061                           
  1062                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1063  0148  1683               	bsf	3,5	;RP0=1, select bank1
  1064  0149  1303               	bcf	3,6	;RP1=0, select bank1
  1065  014A  170F               	bsf	15,6	;volatile
  1066                           
  1067                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1068  014B  168F               	bsf	15,5	;volatile
  1069                           
  1070                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1071  014C  160F               	bsf	15,4	;volatile
  1072                           
  1073                           ;Oscilador.c: 45:             break;
  1074  014D  2976               	goto	l7
  1075  014E                     l15:	
  1076                           ;Oscilador.c: 46:         default:
  1077                           
  1078                           
  1079                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1080  014E  1683               	bsf	3,5	;RP0=1, select bank1
  1081  014F  1303               	bcf	3,6	;RP1=0, select bank1
  1082  0150  170F               	bsf	15,6	;volatile
  1083                           
  1084                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1085  0151  168F               	bsf	15,5	;volatile
  1086                           
  1087                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1088  0152  120F               	bcf	15,4	;volatile
  1089                           
  1090                           ;Oscilador.c: 50:             break;
  1091  0153  2976               	goto	l7
  1092  0154                     l984:
  1093  0154  0829               	movf	initOsc@IRCF,w
  1094  0155  00A7               	movwf	??_initOsc
  1095  0156  01A8               	clrf	??_initOsc+1
  1096                           
  1097                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1098                           ; Switch size 1, requested type "simple"
  1099                           ; Number of cases is 1, Range of values is 0 to 0
  1100                           ; switch strategies available:
  1101                           ; Name         Instructions Cycles
  1102                           ; simple_byte            4     3 (average)
  1103                           ; direct_byte           11     8 (fixed)
  1104                           ; jumptable            260     6 (fixed)
  1105                           ;	Chosen strategy is simple_byte
  1106  0157  0828               	movf	??_initOsc+1,w
  1107  0158  3A00               	xorlw	0	; case 0
  1108  0159  1903               	skipnz
  1109  015A  295C               	goto	l1222
  1110  015B  294E               	goto	l15
  1111  015C                     l1222:
  1112                           
  1113                           ; Switch size 1, requested type "simple"
  1114                           ; Number of cases is 8, Range of values is 0 to 7
  1115                           ; switch strategies available:
  1116                           ; Name         Instructions Cycles
  1117                           ; simple_byte           25    13 (average)
  1118                           ; direct_byte           32     8 (fixed)
  1119                           ; jumptable            260     6 (fixed)
  1120                           ;	Chosen strategy is simple_byte
  1121  015C  0827               	movf	??_initOsc,w
  1122  015D  3A00               	xorlw	0	; case 0
  1123  015E  1903               	skipnz
  1124  015F  291E               	goto	l6
  1125  0160  3A01               	xorlw	1	; case 1
  1126  0161  1903               	skipnz
  1127  0162  2924               	goto	l8
  1128  0163  3A03               	xorlw	3	; case 2
  1129  0164  1903               	skipnz
  1130  0165  292A               	goto	l9
  1131  0166  3A01               	xorlw	1	; case 3
  1132  0167  1903               	skipnz
  1133  0168  2930               	goto	l10
  1134  0169  3A07               	xorlw	7	; case 4
  1135  016A  1903               	skipnz
  1136  016B  2936               	goto	l11
  1137  016C  3A01               	xorlw	1	; case 5
  1138  016D  1903               	skipnz
  1139  016E  293C               	goto	l12
  1140  016F  3A03               	xorlw	3	; case 6
  1141  0170  1903               	skipnz
  1142  0171  2942               	goto	l13
  1143  0172  3A01               	xorlw	1	; case 7
  1144  0173  1903               	skipnz
  1145  0174  2948               	goto	l14
  1146  0175  294E               	goto	l15
  1147  0176                     l7:
  1148                           
  1149                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1150  0176  140F               	bsf	15,0	;volatile
  1151  0177                     l16:
  1152  0177  0008               	return
  1153  0178                     __end_of_initOsc:
  1154                           
  1155                           	psect	text3
  1156  0020                     __ptext3:	
  1157 ;; *************** function _display *****************
  1158 ;; Defined at:
  1159 ;;		line 5 in file "Display.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  ADC_VALOR       1    wreg     unsigned char 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  ADC_VALOR       1    2[BANK0 ] unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      unsigned char 
  1166 ;; Registers used:
  1167 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1173 ;;      Params:         0       0       0       0       0
  1174 ;;      Locals:         0       1       0       0       0
  1175 ;;      Temps:          0       2       0       0       0
  1176 ;;      Totals:         0       3       0       0       0
  1177 ;;Total ram usage:        3 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    2
  1180 ;; This function calls:
  1181 ;;		Nothing
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;;		_DisplayADC
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           
  1189                           ;psect for function _display
  1190  0020                     _display:
  1191                           
  1192                           ;incstack = 0
  1193                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  1194                           ;display@ADC_VALOR stored from wreg
  1195  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1196  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1197  0022  00A9               	movwf	display@ADC_VALOR
  1198  0023                     l992:
  1199                           
  1200                           ;Display.c: 7:     switch(ADC_VALOR){
  1201  0023  2874               	goto	l1030
  1202  0024                     l994:
  1203                           
  1204                           ;Display.c: 9:             Valor_hex = 0b00111111;
  1205  0024  303F               	movlw	63
  1206  0025  00A7               	movwf	??_display
  1207  0026  0827               	movf	??_display,w
  1208  0027  00FD               	movwf	_Valor_hex
  1209                           
  1210                           ;Display.c: 10:             break;
  1211  0028  28AE               	goto	l1032
  1212  0029                     l996:
  1213                           
  1214                           ;Display.c: 12:             Valor_hex = 0b000000110;
  1215  0029  3006               	movlw	6
  1216  002A  00A7               	movwf	??_display
  1217  002B  0827               	movf	??_display,w
  1218  002C  00FD               	movwf	_Valor_hex
  1219                           
  1220                           ;Display.c: 13:             break;
  1221  002D  28AE               	goto	l1032
  1222  002E                     l998:
  1223                           
  1224                           ;Display.c: 15:             Valor_hex = 0b11011011;
  1225  002E  30DB               	movlw	219
  1226  002F  00A7               	movwf	??_display
  1227  0030  0827               	movf	??_display,w
  1228  0031  00FD               	movwf	_Valor_hex
  1229                           
  1230                           ;Display.c: 16:             break;
  1231  0032  28AE               	goto	l1032
  1232  0033                     l1000:
  1233                           
  1234                           ;Display.c: 18:             Valor_hex = 0b01001111;
  1235  0033  304F               	movlw	79
  1236  0034  00A7               	movwf	??_display
  1237  0035  0827               	movf	??_display,w
  1238  0036  00FD               	movwf	_Valor_hex
  1239                           
  1240                           ;Display.c: 19:             break;
  1241  0037  28AE               	goto	l1032
  1242  0038                     l1002:
  1243                           
  1244                           ;Display.c: 21:             Valor_hex = 0b01100110;
  1245  0038  3066               	movlw	102
  1246  0039  00A7               	movwf	??_display
  1247  003A  0827               	movf	??_display,w
  1248  003B  00FD               	movwf	_Valor_hex
  1249                           
  1250                           ;Display.c: 22:             break;
  1251  003C  28AE               	goto	l1032
  1252  003D                     l1004:
  1253                           
  1254                           ;Display.c: 24:             Valor_hex = 0b01101101;
  1255  003D  306D               	movlw	109
  1256  003E  00A7               	movwf	??_display
  1257  003F  0827               	movf	??_display,w
  1258  0040  00FD               	movwf	_Valor_hex
  1259                           
  1260                           ;Display.c: 25:             break;
  1261  0041  28AE               	goto	l1032
  1262  0042                     l1006:
  1263                           
  1264                           ;Display.c: 27:             Valor_hex = 0b01111101;
  1265  0042  307D               	movlw	125
  1266  0043  00A7               	movwf	??_display
  1267  0044  0827               	movf	??_display,w
  1268  0045  00FD               	movwf	_Valor_hex
  1269                           
  1270                           ;Display.c: 28:             break;
  1271  0046  28AE               	goto	l1032
  1272  0047                     l1008:
  1273                           
  1274                           ;Display.c: 30:             Valor_hex = 0b00000111;
  1275  0047  3007               	movlw	7
  1276  0048  00A7               	movwf	??_display
  1277  0049  0827               	movf	??_display,w
  1278  004A  00FD               	movwf	_Valor_hex
  1279                           
  1280                           ;Display.c: 31:             break;
  1281  004B  28AE               	goto	l1032
  1282  004C                     l1010:
  1283                           
  1284                           ;Display.c: 33:             Valor_hex = 0b01111111;
  1285  004C  307F               	movlw	127
  1286  004D  00A7               	movwf	??_display
  1287  004E  0827               	movf	??_display,w
  1288  004F  00FD               	movwf	_Valor_hex
  1289                           
  1290                           ;Display.c: 34:             break;
  1291  0050  28AE               	goto	l1032
  1292  0051                     l1012:
  1293                           
  1294                           ;Display.c: 36:             Valor_hex = 0b01101111;
  1295  0051  306F               	movlw	111
  1296  0052  00A7               	movwf	??_display
  1297  0053  0827               	movf	??_display,w
  1298  0054  00FD               	movwf	_Valor_hex
  1299                           
  1300                           ;Display.c: 37:             break;
  1301  0055  28AE               	goto	l1032
  1302  0056                     l1014:
  1303                           
  1304                           ;Display.c: 39:             Valor_hex = 0b01110111;
  1305  0056  3077               	movlw	119
  1306  0057  00A7               	movwf	??_display
  1307  0058  0827               	movf	??_display,w
  1308  0059  00FD               	movwf	_Valor_hex
  1309                           
  1310                           ;Display.c: 40:             break;
  1311  005A  28AE               	goto	l1032
  1312  005B                     l1016:
  1313                           
  1314                           ;Display.c: 42:             Valor_hex = 0b01111100;
  1315  005B  307C               	movlw	124
  1316  005C  00A7               	movwf	??_display
  1317  005D  0827               	movf	??_display,w
  1318  005E  00FD               	movwf	_Valor_hex
  1319                           
  1320                           ;Display.c: 43:             break;
  1321  005F  28AE               	goto	l1032
  1322  0060                     l1018:
  1323                           
  1324                           ;Display.c: 45:             Valor_hex = 0b00111001;
  1325  0060  3039               	movlw	57
  1326  0061  00A7               	movwf	??_display
  1327  0062  0827               	movf	??_display,w
  1328  0063  00FD               	movwf	_Valor_hex
  1329                           
  1330                           ;Display.c: 46:             break;
  1331  0064  28AE               	goto	l1032
  1332  0065                     l1020:
  1333                           
  1334                           ;Display.c: 48:             Valor_hex = 0b01011110;
  1335  0065  305E               	movlw	94
  1336  0066  00A7               	movwf	??_display
  1337  0067  0827               	movf	??_display,w
  1338  0068  00FD               	movwf	_Valor_hex
  1339                           
  1340                           ;Display.c: 49:             break;
  1341  0069  28AE               	goto	l1032
  1342  006A                     l1022:
  1343                           
  1344                           ;Display.c: 51:             Valor_hex = 0b01111001;
  1345  006A  3079               	movlw	121
  1346  006B  00A7               	movwf	??_display
  1347  006C  0827               	movf	??_display,w
  1348  006D  00FD               	movwf	_Valor_hex
  1349                           
  1350                           ;Display.c: 52:             break;
  1351  006E  28AE               	goto	l1032
  1352  006F                     l1024:
  1353                           
  1354                           ;Display.c: 54:             Valor_hex = 0b01110001;
  1355  006F  3071               	movlw	113
  1356  0070  00A7               	movwf	??_display
  1357  0071  0827               	movf	??_display,w
  1358  0072  00FD               	movwf	_Valor_hex
  1359                           
  1360                           ;Display.c: 55:             break;
  1361  0073  28AE               	goto	l1032
  1362  0074                     l1030:
  1363  0074  0829               	movf	display@ADC_VALOR,w
  1364  0075  00A7               	movwf	??_display
  1365  0076  01A8               	clrf	??_display+1
  1366                           
  1367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1368                           ; Switch size 1, requested type "simple"
  1369                           ; Number of cases is 1, Range of values is 0 to 0
  1370                           ; switch strategies available:
  1371                           ; Name         Instructions Cycles
  1372                           ; simple_byte            4     3 (average)
  1373                           ; direct_byte           11     8 (fixed)
  1374                           ; jumptable            260     6 (fixed)
  1375                           ;	Chosen strategy is simple_byte
  1376  0077  0828               	movf	??_display+1,w
  1377  0078  3A00               	xorlw	0	; case 0
  1378  0079  1903               	skipnz
  1379  007A  287C               	goto	l1224
  1380  007B  2824               	goto	l994
  1381  007C                     l1224:
  1382                           
  1383                           ; Switch size 1, requested type "simple"
  1384                           ; Number of cases is 16, Range of values is 0 to 15
  1385                           ; switch strategies available:
  1386                           ; Name         Instructions Cycles
  1387                           ; simple_byte           49    25 (average)
  1388                           ; direct_byte           56     8 (fixed)
  1389                           ; jumptable            260     6 (fixed)
  1390                           ;	Chosen strategy is simple_byte
  1391  007C  0827               	movf	??_display,w
  1392  007D  3A00               	xorlw	0	; case 0
  1393  007E  1903               	skipnz
  1394  007F  2824               	goto	l994
  1395  0080  3A01               	xorlw	1	; case 1
  1396  0081  1903               	skipnz
  1397  0082  2829               	goto	l996
  1398  0083  3A03               	xorlw	3	; case 2
  1399  0084  1903               	skipnz
  1400  0085  282E               	goto	l998
  1401  0086  3A01               	xorlw	1	; case 3
  1402  0087  1903               	skipnz
  1403  0088  2833               	goto	l1000
  1404  0089  3A07               	xorlw	7	; case 4
  1405  008A  1903               	skipnz
  1406  008B  2838               	goto	l1002
  1407  008C  3A01               	xorlw	1	; case 5
  1408  008D  1903               	skipnz
  1409  008E  283D               	goto	l1004
  1410  008F  3A03               	xorlw	3	; case 6
  1411  0090  1903               	skipnz
  1412  0091  2842               	goto	l1006
  1413  0092  3A01               	xorlw	1	; case 7
  1414  0093  1903               	skipnz
  1415  0094  2847               	goto	l1008
  1416  0095  3A0F               	xorlw	15	; case 8
  1417  0096  1903               	skipnz
  1418  0097  284C               	goto	l1010
  1419  0098  3A01               	xorlw	1	; case 9
  1420  0099  1903               	skipnz
  1421  009A  2851               	goto	l1012
  1422  009B  3A03               	xorlw	3	; case 10
  1423  009C  1903               	skipnz
  1424  009D  2856               	goto	l1014
  1425  009E  3A01               	xorlw	1	; case 11
  1426  009F  1903               	skipnz
  1427  00A0  285B               	goto	l1016
  1428  00A1  3A07               	xorlw	7	; case 12
  1429  00A2  1903               	skipnz
  1430  00A3  2860               	goto	l1018
  1431  00A4  3A01               	xorlw	1	; case 13
  1432  00A5  1903               	skipnz
  1433  00A6  2865               	goto	l1020
  1434  00A7  3A03               	xorlw	3	; case 14
  1435  00A8  1903               	skipnz
  1436  00A9  286A               	goto	l1022
  1437  00AA  3A01               	xorlw	1	; case 15
  1438  00AB  1903               	skipnz
  1439  00AC  286F               	goto	l1024
  1440  00AD  2824               	goto	l994
  1441  00AE                     l1032:
  1442                           
  1443                           ;Display.c: 60:    return Valor_hex;
  1444  00AE  087D               	movf	_Valor_hex,w
  1445  00AF                     l40:
  1446  00AF  0008               	return
  1447  00B0                     __end_of_display:
  1448                           
  1449                           	psect	text4
  1450  021D                     __ptext4:	
  1451 ;; *************** function _ContadorLEDS *****************
  1452 ;; Defined at:
  1453 ;;		line 151 in file "Prueba.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		wreg
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1467 ;;      Params:         0       0       0       0       0
  1468 ;;      Locals:         0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0
  1470 ;;      Totals:         0       0       0       0       0
  1471 ;;Total ram usage:        0 bytes
  1472 ;; Hardware stack levels used:    1
  1473 ;; Hardware stack levels required when called:    2
  1474 ;; This function calls:
  1475 ;;		Nothing
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           
  1482                           ;psect for function _ContadorLEDS
  1483  021D                     _ContadorLEDS:
  1484  021D                     l1110:	
  1485                           ;incstack = 0
  1486                           ; Regs used in _ContadorLEDS: [wreg]
  1487                           
  1488                           
  1489                           ;Prueba.c: 152:     PORTC = contador;
  1490  021D  087C               	movf	_contador,w
  1491  021E  1283               	bcf	3,5	;RP0=0, select bank0
  1492  021F  1303               	bcf	3,6	;RP1=0, select bank0
  1493  0220  0087               	movwf	7	;volatile
  1494  0221                     l143:
  1495  0221  0008               	return
  1496  0222                     __end_of_ContadorLEDS:
  1497                           
  1498                           	psect	text5
  1499  00B0                     __ptext5:	
  1500 ;; *************** function _ISR *****************
  1501 ;; Defined at:
  1502 ;;		line 57 in file "Prueba.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;		None
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;		None
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg, status,2, status,0, pclath, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1516 ;;      Params:         0       0       0       0       0
  1517 ;;      Locals:         0       0       0       0       0
  1518 ;;      Temps:          5       0       0       0       0
  1519 ;;      Totals:         5       0       0       0       0
  1520 ;;Total ram usage:        5 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    1
  1523 ;; This function calls:
  1524 ;;		_ADC
  1525 ;;		_NIBBLE1_ADC
  1526 ;;		_NIBBLE2_ADC
  1527 ;;		_SWAP_ADC
  1528 ;; This function is called by:
  1529 ;;		Interrupt level 1
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           
  1534                           ;psect for function _ISR
  1535  00B0                     _ISR:
  1536  00B0                     i1l1112:
  1537                           
  1538                           ;Prueba.c: 59:     if (INTCONbits.RBIF == 1){
  1539  00B0  1C0B               	btfss	11,0	;volatile
  1540  00B1  28B3               	goto	u12_21
  1541  00B2  28B4               	goto	u12_20
  1542  00B3                     u12_21:
  1543  00B3  28CD               	goto	i1l1128
  1544  00B4                     u12_20:
  1545  00B4                     i1l1114:
  1546                           
  1547                           ;Prueba.c: 60:         if (PORTBbits.RB0 == 1){
  1548  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1549  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1550  00B6  1C06               	btfss	6,0	;volatile
  1551  00B7  28B9               	goto	u13_21
  1552  00B8  28BA               	goto	u13_20
  1553  00B9                     u13_21:
  1554  00B9  28C2               	goto	i1l1120
  1555  00BA                     u13_20:
  1556  00BA                     i1l119:	
  1557                           ;Prueba.c: 63:             }
  1558                           
  1559                           
  1560                           ;Prueba.c: 61:             while (PORTBbits.RB0 == 1){
  1561  00BA  1806               	btfsc	6,0	;volatile
  1562  00BB  28BD               	goto	u14_21
  1563  00BC  28BE               	goto	u14_20
  1564  00BD                     u14_21:
  1565  00BD  28BA               	goto	i1l119
  1566  00BE                     u14_20:
  1567  00BE                     i1l1118:
  1568                           
  1569                           ;Prueba.c: 64:             contador++;
  1570  00BE  3001               	movlw	1
  1571  00BF  00F5               	movwf	??_ISR
  1572  00C0  0875               	movf	??_ISR,w
  1573  00C1  07FC               	addwf	_contador,f
  1574  00C2                     i1l1120:
  1575                           
  1576                           ;Prueba.c: 66:         if (PORTBbits.RB1 == 1){
  1577  00C2  1C86               	btfss	6,1	;volatile
  1578  00C3  28C5               	goto	u15_21
  1579  00C4  28C6               	goto	u15_20
  1580  00C5                     u15_21:
  1581  00C5  28CC               	goto	i1l1126
  1582  00C6                     u15_20:
  1583  00C6                     i1l123:	
  1584                           ;Prueba.c: 69:             }
  1585                           
  1586                           
  1587                           ;Prueba.c: 67:             while (PORTBbits.RB1 == 1){
  1588  00C6  1886               	btfsc	6,1	;volatile
  1589  00C7  28C9               	goto	u16_21
  1590  00C8  28CA               	goto	u16_20
  1591  00C9                     u16_21:
  1592  00C9  28C6               	goto	i1l123
  1593  00CA                     u16_20:
  1594  00CA                     i1l1124:
  1595                           
  1596                           ;Prueba.c: 70:             contador--;
  1597  00CA  3001               	movlw	1
  1598  00CB  02FC               	subwf	_contador,f
  1599  00CC                     i1l1126:
  1600                           
  1601                           ;Prueba.c: 72:         INTCONbits.RBIF = 0;
  1602  00CC  100B               	bcf	11,0	;volatile
  1603  00CD                     i1l1128:
  1604                           
  1605                           ;Prueba.c: 75:     if (PIR1bits.ADIF == 1){
  1606  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1607  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1608  00CF  1F0C               	btfss	12,6	;volatile
  1609  00D0  28D2               	goto	u17_21
  1610  00D1  28D3               	goto	u17_20
  1611  00D2                     u17_21:
  1612  00D2  2913               	goto	i1l127
  1613  00D3                     u17_20:
  1614  00D3                     i1l1130:
  1615                           
  1616                           ;Prueba.c: 76:         ADC_VALOR = ADC(ADRESL, ADRESH);
  1617  00D3  081E               	movf	30,w	;volatile
  1618  00D4  00F5               	movwf	??_ISR
  1619  00D5  0875               	movf	??_ISR,w
  1620  00D6  00F0               	movwf	ADC@ADRESH_
  1621  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  1622  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  1623  00D9  081E               	movf	30,w	;volatile
  1624  00DA  120A  118A  2215  120A  118A  	fcall	_ADC
  1625  00DF  00F6               	movwf	??_ISR+1
  1626  00E0  01F7               	clrf	??_ISR+2
  1627  00E1  0876               	movf	??_ISR+1,w
  1628  00E2  00FA               	movwf	_ADC_VALOR
  1629  00E3  0877               	movf	??_ISR+2,w
  1630  00E4  00FB               	movwf	_ADC_VALOR+1
  1631  00E5                     i1l1132:
  1632                           
  1633                           ;Prueba.c: 77:         ADC_SWAP = SWAP_ADC(ADC_VALOR);
  1634  00E5  087A               	movf	_ADC_VALOR,w
  1635  00E6  120A  118A  21E2  120A  118A  	fcall	_SWAP_ADC
  1636  00EB  00F5               	movwf	??_ISR
  1637  00EC  0875               	movf	??_ISR,w
  1638  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1639  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1640  00EF  00A6               	movwf	_ADC_SWAP
  1641  00F0                     i1l1134:
  1642                           
  1643                           ;Prueba.c: 78:         ADC_NIBBLE1 = NIBBLE1_ADC(ADC_VALOR);
  1644  00F0  087A               	movf	_ADC_VALOR,w
  1645  00F1  120A  118A  220B  120A  118A  	fcall	_NIBBLE1_ADC
  1646  00F6  00F5               	movwf	??_ISR
  1647  00F7  0875               	movf	??_ISR,w
  1648  00F8  1283               	bcf	3,5	;RP0=0, select bank0
  1649  00F9  1303               	bcf	3,6	;RP1=0, select bank0
  1650  00FA  00A5               	movwf	_ADC_NIBBLE1
  1651  00FB                     i1l1136:
  1652                           
  1653                           ;Prueba.c: 79:         ADC_NIBBLE2 = NIBBLE2_ADC(ADC_SWAP);
  1654  00FB  0826               	movf	_ADC_SWAP,w
  1655  00FC  120A  118A  2201  120A  118A  	fcall	_NIBBLE2_ADC
  1656  0101  00F5               	movwf	??_ISR
  1657  0102  0875               	movf	??_ISR,w
  1658  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0105  00A4               	movwf	_ADC_NIBBLE2
  1661  0106                     i1l1138:
  1662                           
  1663                           ;Prueba.c: 80:         PIR1bits.ADIF = 0;
  1664  0106  130C               	bcf	12,6	;volatile
  1665  0107                     i1l1140:
  1666                           
  1667                           ;Prueba.c: 81:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1668  0107  301A               	movlw	26
  1669  0108  00F6               	movwf	??_ISR+1
  1670  0109  30F8               	movlw	248
  1671  010A  00F5               	movwf	??_ISR
  1672  010B                     u19_27:
  1673  010B  0BF5               	decfsz	??_ISR,f
  1674  010C  290B               	goto	u19_27
  1675  010D  0BF6               	decfsz	??_ISR+1,f
  1676  010E  290B               	goto	u19_27
  1677  010F  0000               	nop
  1678  0110                     i1l1142:
  1679                           
  1680                           ;Prueba.c: 82:         ADCON0bits.GO_nDONE = 1;
  1681  0110  1283               	bcf	3,5	;RP0=0, select bank0
  1682  0111  1303               	bcf	3,6	;RP1=0, select bank0
  1683  0112  149F               	bsf	31,1	;volatile
  1684  0113                     i1l127:
  1685  0113  0879               	movf	??_ISR+4,w
  1686  0114  008A               	movwf	10
  1687  0115  0E78               	swapf	??_ISR+3,w
  1688  0116  0083               	movwf	3
  1689  0117  0EFE               	swapf	btemp,f
  1690  0118  0E7E               	swapf	btemp,w
  1691  0119  0009               	retfie
  1692  011A                     __end_of_ISR:
  1693                           
  1694                           	psect	intentry
  1695  0004                     __pintentry:	
  1696                           ;incstack = 0
  1697                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1698                           
  1699  0004                     interrupt_function:
  1700  007E                     saved_w	set	btemp
  1701  0004  00FE               	movwf	btemp
  1702  0005  0E03               	swapf	3,w
  1703  0006  00F8               	movwf	??_ISR+3
  1704  0007  080A               	movf	10,w
  1705  0008  00F9               	movwf	??_ISR+4
  1706  0009  120A  118A  28B0   	ljmp	_ISR
  1707                           
  1708                           	psect	text6
  1709  01E2                     __ptext6:	
  1710 ;; *************** function _SWAP_ADC *****************
  1711 ;; Defined at:
  1712 ;;		line 14 in file "Config_ADC.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  VAL_ADC         1    wreg     unsigned char 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  VAL_ADC         1    4[COMMON] unsigned char 
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      unsigned char 
  1719 ;; Registers used:
  1720 ;;		wreg, status,2, status,0
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1726 ;;      Params:         0       0       0       0       0
  1727 ;;      Locals:         1       0       0       0       0
  1728 ;;      Temps:          4       0       0       0       0
  1729 ;;      Totals:         5       0       0       0       0
  1730 ;;Total ram usage:        5 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_ISR
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           
  1740                           ;psect for function _SWAP_ADC
  1741  01E2                     _SWAP_ADC:
  1742                           
  1743                           ;incstack = 0
  1744                           ; Regs used in _SWAP_ADC: [wreg+status,2+status,0]
  1745                           ;SWAP_ADC@VAL_ADC stored from wreg
  1746  01E2  00F4               	movwf	SWAP_ADC@VAL_ADC
  1747  01E3                     i1l1046:
  1748                           
  1749                           ;Config_ADC.c: 15:     VAL_SWAP = (((VAL_ADC & 0x0F)<<4) | ((VAL_ADC & 0xF0)>>4));
  1750  01E3  0874               	movf	SWAP_ADC@VAL_ADC,w
  1751  01E4  00F0               	movwf	??_SWAP_ADC
  1752  01E5  3004               	movlw	4
  1753  01E6                     u10_25:
  1754  01E6  1003               	clrc
  1755  01E7  0CF0               	rrf	??_SWAP_ADC,f
  1756  01E8  3EFF               	addlw	-1
  1757  01E9  1D03               	skipz
  1758  01EA  29E6               	goto	u10_25
  1759  01EB  300F               	movlw	15
  1760  01EC  0570               	andwf	??_SWAP_ADC,w
  1761  01ED  00F1               	movwf	??_SWAP_ADC+1
  1762  01EE  0874               	movf	SWAP_ADC@VAL_ADC,w
  1763  01EF  390F               	andlw	15
  1764  01F0  00F2               	movwf	??_SWAP_ADC+2
  1765  01F1  3003               	movlw	3
  1766  01F2                     u11_25:
  1767  01F2  1003               	clrc
  1768  01F3  0DF2               	rlf	??_SWAP_ADC+2,f
  1769  01F4  3EFF               	addlw	-1
  1770  01F5  1D03               	skipz
  1771  01F6  29F2               	goto	u11_25
  1772  01F7  1003               	clrc
  1773  01F8  0D72               	rlf	??_SWAP_ADC+2,w
  1774  01F9  0471               	iorwf	??_SWAP_ADC+1,w
  1775  01FA  00F3               	movwf	??_SWAP_ADC+3
  1776  01FB  0873               	movf	??_SWAP_ADC+3,w
  1777  01FC  1283               	bcf	3,5	;RP0=0, select bank0
  1778  01FD  1303               	bcf	3,6	;RP1=0, select bank0
  1779  01FE  00A2               	movwf	_VAL_SWAP
  1780  01FF                     i1l1048:
  1781                           
  1782                           ;Config_ADC.c: 16:     return VAL_SWAP;
  1783  01FF  0822               	movf	_VAL_SWAP,w
  1784  0200                     i1l164:
  1785  0200  0008               	return
  1786  0201                     __end_of_SWAP_ADC:
  1787                           
  1788                           	psect	text7
  1789  0201                     __ptext7:	
  1790 ;; *************** function _NIBBLE2_ADC *****************
  1791 ;; Defined at:
  1792 ;;		line 24 in file "Config_ADC.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  VAL_SWAP        1    wreg     unsigned char 
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  VAL_SWAP        1    1[COMMON] unsigned char 
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      unsigned char 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1806 ;;      Params:         0       0       0       0       0
  1807 ;;      Locals:         1       0       0       0       0
  1808 ;;      Temps:          1       0       0       0       0
  1809 ;;      Totals:         2       0       0       0       0
  1810 ;;Total ram usage:        2 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_ISR
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           
  1820                           ;psect for function _NIBBLE2_ADC
  1821  0201                     _NIBBLE2_ADC:
  1822                           
  1823                           ;incstack = 0
  1824                           ; Regs used in _NIBBLE2_ADC: [wreg+status,2]
  1825                           ;NIBBLE2_ADC@VAL_SWAP stored from wreg
  1826  0201  00F1               	movwf	NIBBLE2_ADC@VAL_SWAP
  1827  0202                     i1l1058:
  1828                           
  1829                           ;Config_ADC.c: 25:     VAL_NIBBLE2 = VAL_SWAP & 15;
  1830  0202  0871               	movf	NIBBLE2_ADC@VAL_SWAP,w
  1831  0203  390F               	andlw	15
  1832  0204  00F0               	movwf	??_NIBBLE2_ADC
  1833  0205  0870               	movf	??_NIBBLE2_ADC,w
  1834  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0208  00A0               	movwf	_VAL_NIBBLE2
  1837  0209                     i1l1060:
  1838                           
  1839                           ;Config_ADC.c: 26:     return VAL_NIBBLE2;
  1840  0209  0820               	movf	_VAL_NIBBLE2,w
  1841  020A                     i1l170:
  1842  020A  0008               	return
  1843  020B                     __end_of_NIBBLE2_ADC:
  1844                           
  1845                           	psect	text8
  1846  020B                     __ptext8:	
  1847 ;; *************** function _NIBBLE1_ADC *****************
  1848 ;; Defined at:
  1849 ;;		line 19 in file "Config_ADC.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  VAL_ADC         1    wreg     unsigned char 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  VAL_ADC         1    1[COMMON] unsigned char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      unsigned char 
  1856 ;; Registers used:
  1857 ;;		wreg, status,2
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1863 ;;      Params:         0       0       0       0       0
  1864 ;;      Locals:         1       0       0       0       0
  1865 ;;      Temps:          1       0       0       0       0
  1866 ;;      Totals:         2       0       0       0       0
  1867 ;;Total ram usage:        2 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; This function calls:
  1870 ;;		Nothing
  1871 ;; This function is called by:
  1872 ;;		_ISR
  1873 ;; This function uses a non-reentrant model
  1874 ;;
  1875                           
  1876                           
  1877                           ;psect for function _NIBBLE1_ADC
  1878  020B                     _NIBBLE1_ADC:
  1879                           
  1880                           ;incstack = 0
  1881                           ; Regs used in _NIBBLE1_ADC: [wreg+status,2]
  1882                           ;NIBBLE1_ADC@VAL_ADC stored from wreg
  1883  020B  00F1               	movwf	NIBBLE1_ADC@VAL_ADC
  1884  020C                     i1l1052:
  1885                           
  1886                           ;Config_ADC.c: 20:     VAL_NIBBLE1 = VAL_ADC & 15;
  1887  020C  0871               	movf	NIBBLE1_ADC@VAL_ADC,w
  1888  020D  390F               	andlw	15
  1889  020E  00F0               	movwf	??_NIBBLE1_ADC
  1890  020F  0870               	movf	??_NIBBLE1_ADC,w
  1891  0210  1283               	bcf	3,5	;RP0=0, select bank0
  1892  0211  1303               	bcf	3,6	;RP1=0, select bank0
  1893  0212  00A1               	movwf	_VAL_NIBBLE1
  1894  0213                     i1l1054:
  1895                           
  1896                           ;Config_ADC.c: 21:     return VAL_NIBBLE1;
  1897  0213  0821               	movf	_VAL_NIBBLE1,w
  1898  0214                     i1l167:
  1899  0214  0008               	return
  1900  0215                     __end_of_NIBBLE1_ADC:
  1901                           
  1902                           	psect	text9
  1903  0215                     __ptext9:	
  1904 ;; *************** function _ADC *****************
  1905 ;; Defined at:
  1906 ;;		line 9 in file "Config_ADC.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  ADRESL_         1    wreg     unsigned char 
  1909 ;;  ADRESH_         1    0[COMMON] unsigned char 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  ADRESL_         1    0[COMMON] unsigned char 
  1912 ;; Return value:  Size  Location     Type
  1913 ;;                  1    wreg      unsigned char 
  1914 ;; Registers used:
  1915 ;;		wreg
  1916 ;; Tracked objects:
  1917 ;;		On entry : 0/0
  1918 ;;		On exit  : 0/0
  1919 ;;		Unchanged: 0/0
  1920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1921 ;;      Params:         1       0       0       0       0
  1922 ;;      Locals:         0       0       0       0       0
  1923 ;;      Temps:          1       0       0       0       0
  1924 ;;      Totals:         2       0       0       0       0
  1925 ;;Total ram usage:        2 bytes
  1926 ;; Hardware stack levels used:    1
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_ISR
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           
  1935                           ;psect for function _ADC
  1936  0215                     _ADC:
  1937  0215                     i1l1042:	
  1938                           ;incstack = 0
  1939                           ; Regs used in _ADC: [wreg]
  1940                           
  1941                           
  1942                           ;Config_ADC.c: 10:     VAL = (ADRESL << 8) | ADRESH;
  1943  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1945  0217  081E               	movf	30,w	;volatile
  1946  0218  00F1               	movwf	??_ADC
  1947  0219  0871               	movf	??_ADC,w
  1948  021A  00A3               	movwf	_VAL
  1949                           
  1950                           ;Config_ADC.c: 11:     return VAL;
  1951  021B  0823               	movf	_VAL,w
  1952  021C                     i1l161:
  1953  021C  0008               	return
  1954  021D                     __end_of_ADC:
  1955  007E                     btemp	set	126	;btemp
  1956  007E                     wtemp0	set	126
  1957                           
  1958                           	psect	config
  1959                           
  1960                           ;Config register CONFIG1 @ 0x2007
  1961                           ;	Oscillator Selection bits
  1962                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  1963                           ;	Watchdog Timer Enable bit
  1964                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1965                           ;	Power-up Timer Enable bit
  1966                           ;	PWRTE = OFF, PWRT disabled
  1967                           ;	RE3/MCLR pin function select bit
  1968                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1969                           ;	Code Protection bit
  1970                           ;	CP = OFF, Program memory code protection is disabled
  1971                           ;	Data Code Protection bit
  1972                           ;	CPD = OFF, Data memory code protection is disabled
  1973                           ;	Brown Out Reset Selection bits
  1974                           ;	BOREN = OFF, BOR disabled
  1975                           ;	Internal External Switchover bit
  1976                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1977                           ;	Fail-Safe Clock Monitor Enabled bit
  1978                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1979                           ;	Low Voltage Programming Enable bit
  1980                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1981                           ;	In-Circuit Debugger Mode bit
  1982                           ;	DEBUG = 0x1, unprogrammed default
  1983  2007                     	org	8199
  1984  2007  20D1               	dw	8401
  1985                           
  1986                           ;Config register CONFIG2 @ 0x2008
  1987                           ;	Brown-out Reset Selection bit
  1988                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1989                           ;	Flash Program Memory Self Write Enable bits
  1990                           ;	WRT = OFF, Write protection off
  1991  2008                     	org	8200
  1992  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80      4      11
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_SWAP_ADC

Critical Paths under _main in BANK0

    _main->_display
    _setup->_initOsc

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      44
                                              3 BANK0      1     1      0
                       _ContadorLEDS
                            _display
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      22
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _display                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ContadorLEDS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0     164
                                              5 COMMON     5     5      0
                                _ADC
                        _NIBBLE1_ADC
                        _NIBBLE2_ADC
                           _SWAP_ADC
 ---------------------------------------------------------------------------------
 (4) _SWAP_ADC                                             5     5      0      44
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (4) _NIBBLE2_ADC                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _NIBBLE1_ADC                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC                                                  3     2      1      76
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ContadorLEDS
   _display
   _setup
     _initOsc

 _ISR (ROOT)
   _ADC
   _NIBBLE1_ADC
   _NIBBLE2_ADC
   _SWAP_ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      19       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       B       5       13.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      19      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Feb 03 08:09:10 2021

                      l6 011E                        l7 0176                        l8 0124  
                      l9 012A                       l10 0130                       l11 0136  
                     l12 013C                       l13 0142                       l14 0148  
                     l15 014E                       l40 00AF                       l16 0177  
         ??_ContadorLEDS 0027                      l140 01B2                      l133 01DB  
                    l143 0221                      _ADC 0215                      l980 011D  
                    l992 0023                      l984 0154                      l994 0024  
                    l996 0029                      l998 002E                      u180 01D7  
                    u181 01D6                      u185 01D3                      _ISR 00B0  
                    _VAL 0023                     ?_ADC 0070                     ?_ISR 0070  
                   l1000 0033                     l1010 004C                     l1002 0038  
                   l1020 0065                     l1012 0051                     l1004 003D  
                   l1100 01AA                     l1110 021D                     l1022 006A  
                   l1014 0056                     l1006 0042                     l1030 0074  
                   l1102 01AB                     l1024 006F                     l1016 005B  
                   l1008 0047                     l1032 00AE                     l1104 01AC  
                   l1018 0060                     l1106 01AF                     l1108 01B1  
                   l1222 015C                     l1070 0183                     l1150 01BE  
                   l1224 007C                     l1080 0194                     l1072 0187  
                   l1064 0178                     l1152 01C1                     l1144 01B3  
                   l1090 01A3                     l1082 0197                     l1074 018A  
                   l1066 017E                     l1154 01CA                     l1146 01B4  
                   l1092 01A4                     l1084 019A                     l1076 018E  
                   l1068 0182                     l1156 01D7                     l1148 01B9  
                   l1094 01A5                     l1086 019D                     l1078 0191  
                   l1096 01A6                     l1088 01A0                     l1098 01A9  
                   _main 01B3                     btemp 007E                     start 000C  
                  ??_ADC 0071                    ??_ISR 0075                    ?_main 0070  
                  _ANSEL 0188                    i1l123 00C6                    i1l127 0113  
                  i1l119 00BA                    i1l161 021C                    i1l170 020A  
                  i1l164 0200                    i1l167 0214                    u10_25 01E6  
                  u11_25 01F2                    u12_20 00B4                    u12_21 00B3  
                  u13_20 00BA                    u13_21 00B9                    u14_20 00BE  
                  u14_21 00BD                    u15_20 00C6                    u15_21 00C5  
                  u16_20 00CA                    u16_21 00C9                    u17_20 00D3  
                  u17_21 00D2                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _PORTE 0009  
                  u19_27 010B                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
        __end_of_display 00B0          __end_of_initOsc 0178         __end_of_SWAP_ADC 0201  
                  _setup 0178                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 01E2  
                 ??_main 002A       NIBBLE1_ADC@VAL_ADC 0071                   _ADCON0 001F  
                 _ADRESH 001E                   _ADRESL 009E              initOsc@IRCF 0029  
                 ?_setup 0070                   _ANSELH 0189                   i1l1120 00C2  
                 i1l1112 00B0                   i1l1042 0215                   i1l1130 00D3  
                 i1l1114 00B4                   i1l1052 020C                   i1l1060 0209  
                 i1l1140 0107                   i1l1132 00E5                   i1l1124 00CA  
                 i1l1054 0213                   i1l1046 01E3                   i1l1142 0110  
                 i1l1134 00F0                   i1l1126 00CC                   i1l1118 00BE  
                 i1l1048 01FF                   i1l1136 00FB                   i1l1128 00CD  
                 i1l1058 0202                   i1l1138 0106     __end_of_ContadorLEDS 0222  
   __size_of_NIBBLE1_ADC 000A     __size_of_NIBBLE2_ADC 000A          SWAP_ADC@VAL_ADC 0074  
              ??_display 0027                ??_initOsc 0027                   saved_w 007E  
             ADC@ADRESH_ 0070               ADC@ADRESL_ 0070  __end_of__initialization 001C  
         __pcstackCOMMON 0070            __end_of_setup 01B3                ?_SWAP_ADC 0070  
       display@ADC_VALOR 0029                  ??_setup 002A               __pbssBANK0 0020  
             __pmaintext 01B3               __pintentry 0004               ??_SWAP_ADC 0070  
  __size_of_ContadorLEDS 0005                _ADC_VALOR 007A                  __ptext1 0178  
                __ptext2 011A                  __ptext3 0020                  __ptext4 021D  
                __ptext5 00B0                  __ptext6 01E2                  __ptext7 0201  
                __ptext8 020B                  __ptext9 0215             _ContadorLEDS 021D  
                _display 0020             __size_of_ADC 0008             __size_of_ISR 006A  
                _initOsc 011A     end_of_initialization 001C      NIBBLE2_ADC@VAL_SWAP 0071  
              _PORTBbits 0006                _PORTEbits 0009            ??_NIBBLE1_ADC 0070  
          ??_NIBBLE2_ADC 0070              _ADC_NIBBLE1 0025              _ADC_NIBBLE2 0024  
      __size_of_SWAP_ADC 001F      start_initialization 000F              __end_of_ADC 021D  
            __end_of_ISR 011A                _Valor_hex 007D      __end_of_NIBBLE1_ADC 0215  
    __end_of_NIBBLE2_ADC 020B              __pbssCOMMON 007A                ___latbits 0002  
          __pcstackBANK0 0027                 ?_display 0070                 ?_initOsc 0070  
               _ADC_SWAP 0026           __size_of_setup 003B        interrupt_function 0004  
               _IOCBbits 0096              _NIBBLE1_ADC 020B                 _PIE1bits 008C  
            _NIBBLE2_ADC 0201                 _PIR1bits 000C                 _VAL_SWAP 0022  
               _SWAP_ADC 01E2               _ADCON0bits 001F         __size_of_display 0090  
       __size_of_initOsc 005E                 _contador 007C            __size_of_main 002F  
             _INTCONbits 000B              _VAL_NIBBLE1 0021              _VAL_NIBBLE2 0020  
               intlevel1 0000               _OSCCONbits 008F            ?_ContadorLEDS 0070  
           ?_NIBBLE1_ADC 0070             ?_NIBBLE2_ADC 0070  
