

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 02 22:29:18 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  008F                     	;# 
   177  0090                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0094                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  0105                     	;# 
   196  0107                     	;# 
   197  0108                     	;# 
   198  0109                     	;# 
   199  010C                     	;# 
   200  010C                     	;# 
   201  010D                     	;# 
   202  010E                     	;# 
   203  010F                     	;# 
   204  0185                     	;# 
   205  0187                     	;# 
   206  0188                     	;# 
   207  0189                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  0000                     	;# 
   211  0001                     	;# 
   212  0002                     	;# 
   213  0003                     	;# 
   214  0004                     	;# 
   215  0005                     	;# 
   216  0006                     	;# 
   217  0007                     	;# 
   218  0008                     	;# 
   219  0009                     	;# 
   220  000A                     	;# 
   221  000B                     	;# 
   222  000C                     	;# 
   223  000D                     	;# 
   224  000E                     	;# 
   225  000E                     	;# 
   226  000F                     	;# 
   227  0010                     	;# 
   228  0011                     	;# 
   229  0012                     	;# 
   230  0013                     	;# 
   231  0014                     	;# 
   232  0015                     	;# 
   233  0015                     	;# 
   234  0016                     	;# 
   235  0017                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  001B                     	;# 
   240  001B                     	;# 
   241  001C                     	;# 
   242  001D                     	;# 
   243  001E                     	;# 
   244  001F                     	;# 
   245  0081                     	;# 
   246  0085                     	;# 
   247  0086                     	;# 
   248  0087                     	;# 
   249  0088                     	;# 
   250  0089                     	;# 
   251  008C                     	;# 
   252  008D                     	;# 
   253  008E                     	;# 
   254  008F                     	;# 
   255  0090                     	;# 
   256  0091                     	;# 
   257  0092                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0094                     	;# 
   262  0095                     	;# 
   263  0096                     	;# 
   264  0097                     	;# 
   265  0098                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009C                     	;# 
   270  009D                     	;# 
   271  009E                     	;# 
   272  009F                     	;# 
   273  0105                     	;# 
   274  0107                     	;# 
   275  0108                     	;# 
   276  0109                     	;# 
   277  010C                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  010F                     	;# 
   282  0185                     	;# 
   283  0187                     	;# 
   284  0188                     	;# 
   285  0189                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0088                     	;# 
   328  0089                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  008F                     	;# 
   333  0090                     	;# 
   334  0091                     	;# 
   335  0092                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0093                     	;# 
   339  0094                     	;# 
   340  0095                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009C                     	;# 
   348  009D                     	;# 
   349  009E                     	;# 
   350  009F                     	;# 
   351  0105                     	;# 
   352  0107                     	;# 
   353  0108                     	;# 
   354  0109                     	;# 
   355  010C                     	;# 
   356  010C                     	;# 
   357  010D                     	;# 
   358  010E                     	;# 
   359  010F                     	;# 
   360  0185                     	;# 
   361  0187                     	;# 
   362  0188                     	;# 
   363  0189                     	;# 
   364  018C                     	;# 
   365  018D                     	;# 
   366  0000                     	;# 
   367  0001                     	;# 
   368  0002                     	;# 
   369  0003                     	;# 
   370  0004                     	;# 
   371  0005                     	;# 
   372  0006                     	;# 
   373  0007                     	;# 
   374  0008                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0088                     	;# 
   406  0089                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  008F                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0093                     	;# 
   415  0093                     	;# 
   416  0093                     	;# 
   417  0094                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0098                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  009F                     	;# 
   429  0105                     	;# 
   430  0107                     	;# 
   431  0108                     	;# 
   432  0109                     	;# 
   433  010C                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  010F                     	;# 
   438  0185                     	;# 
   439  0187                     	;# 
   440  0188                     	;# 
   441  0189                     	;# 
   442  018C                     	;# 
   443  018D                     	;# 
   444  001F                     _ADCON0	set	31
   445  0009                     _PORTE	set	9
   446  0007                     _PORTC	set	7
   447  0006                     _PORTB	set	6
   448  0005                     _PORTA	set	5
   449  0008                     _PORTD	set	8
   450  0009                     _PORTEbits	set	9
   451  001F                     _ADCON0bits	set	31
   452  001E                     _ADRESH	set	30
   453  000C                     _PIR1bits	set	12
   454  0006                     _PORTBbits	set	6
   455  000B                     _INTCONbits	set	11
   456  008C                     _PIE1bits	set	140
   457  0096                     _IOCBbits	set	150
   458  0089                     _TRISE	set	137
   459  0088                     _TRISD	set	136
   460  0087                     _TRISC	set	135
   461  0086                     _TRISB	set	134
   462  0085                     _TRISA	set	133
   463  009E                     _ADRESL	set	158
   464  008F                     _OSCCONbits	set	143
   465  0189                     _ANSELH	set	393
   466  0188                     _ANSEL	set	392
   467                           
   468                           	psect	cinit
   469  000F                     start_initialization:	
   470                           ; #config settings
   471                           
   472  000F                     __initialization:
   473                           
   474                           ; Clear objects allocated to COMMON
   475  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   476  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   477  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   478  0012  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   479  0013  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   480  0014  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
   481                           
   482                           ; Clear objects allocated to BANK0
   483  0015  1283               	bcf	3,5	;RP0=0, select bank0
   484  0016  1303               	bcf	3,6	;RP1=0, select bank0
   485  0017  01A4               	clrf	__pbssBANK0& (0+127)
   486  0018  01A5               	clrf	(__pbssBANK0+1)& (0+127)
   487  0019  01A6               	clrf	(__pbssBANK0+2)& (0+127)
   488  001A                     end_of_initialization:	
   489                           ;End of C runtime variable initialization code
   490                           
   491  001A                     __end_of__initialization:
   492  001A  0183               	clrf	3
   493  001B  120A  118A  29B6   	ljmp	_main	;jump to C main() function
   494                           
   495                           	psect	bssCOMMON
   496  0078                     __pbssCOMMON:
   497  0078                     _VAL:
   498  0078                     	ds	1
   499  0079                     _ADC_NIBBLE2:
   500  0079                     	ds	1
   501  007A                     _ADC_NIBBLE1:
   502  007A                     	ds	1
   503  007B                     _ADC_SWAP:
   504  007B                     	ds	1
   505  007C                     _contador:
   506  007C                     	ds	1
   507  007D                     _Valor_hex:
   508  007D                     	ds	1
   509                           
   510                           	psect	bssBANK0
   511  0024                     __pbssBANK0:
   512  0024                     _ADC_VALOR:
   513  0024                     	ds	2
   514  0026                     __NIBBLE1:
   515  0026                     	ds	1
   516                           
   517                           	psect	cstackCOMMON
   518  0070                     __pcstackCOMMON:
   519  0070                     ?_ADC:
   520  0070                     ?_setup:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_ContadorLEDS:	
   524                           ; 1 bytes @ 0x0
   525                           
   526  0070                     ?_initOsc:	
   527                           ; 1 bytes @ 0x0
   528                           
   529  0070                     ?_display:	
   530                           ; 1 bytes @ 0x0
   531                           
   532  0070                     ?_ISR:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ?_main:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ADC@ADRESL_:	
   539                           ; 1 bytes @ 0x0
   540                           
   541  0070                     ADC@ADRESH_:	
   542                           ; 1 bytes @ 0x0
   543                           
   544                           
   545                           ; 1 bytes @ 0x0
   546  0070                     	ds	1
   547  0071                     ??_ADC:
   548                           
   549                           ; 1 bytes @ 0x1
   550  0071                     	ds	1
   551  0072                     ??_ISR:
   552                           
   553                           ; 1 bytes @ 0x2
   554  0072                     	ds	6
   555                           
   556                           	psect	cstackBANK0
   557  0020                     __pcstackBANK0:
   558  0020                     ??_ContadorLEDS:
   559  0020                     ??_initOsc:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0020                     ??_display:	
   563                           ; 1 bytes @ 0x0
   564                           
   565                           
   566                           ; 1 bytes @ 0x0
   567  0020                     	ds	2
   568  0022                     initOsc@IRCF:
   569  0022                     display@ADC_VALOR:	
   570                           ; 1 bytes @ 0x2
   571                           
   572                           
   573                           ; 1 bytes @ 0x2
   574  0022                     	ds	1
   575  0023                     ??_setup:
   576  0023                     ??_main:	
   577                           ; 1 bytes @ 0x3
   578                           
   579                           
   580                           ; 1 bytes @ 0x3
   581  0023                     	ds	1
   582                           
   583                           	psect	maintext
   584  01B6                     __pmaintext:	
   585 ;;
   586 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   587 ;;
   588 ;; *************** function _main *****************
   589 ;; Defined at:
   590 ;;		line 98 in file "Prueba.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;		None
   593 ;; Auto vars:     Size  Location     Type
   594 ;;		None
   595 ;; Return value:  Size  Location     Type
   596 ;;                  1    wreg      void 
   597 ;; Registers used:
   598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   599 ;; Tracked objects:
   600 ;;		On entry : B00/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   604 ;;      Params:         0       0       0       0       0
   605 ;;      Locals:         0       0       0       0       0
   606 ;;      Temps:          0       1       0       0       0
   607 ;;      Totals:         0       1       0       0       0
   608 ;;Total ram usage:        1 bytes
   609 ;; Hardware stack levels required when called:    4
   610 ;; This function calls:
   611 ;;		_ContadorLEDS
   612 ;;		_display
   613 ;;		_setup
   614 ;; This function is called by:
   615 ;;		Startup code after reset
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           
   620                           ;psect for function _main
   621  01B6                     _main:
   622  01B6                     l1089:	
   623                           ;incstack = 0
   624                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   625                           
   626                           
   627                           ;Prueba.c: 99:     contador = 0;
   628  01B6  01FC               	clrf	_contador
   629  01B7                     l1091:
   630                           
   631                           ;Prueba.c: 100:     setup();
   632  01B7  120A  118A  217B  120A  118A  	fcall	_setup
   633  01BC                     l1093:
   634                           
   635                           ;Prueba.c: 105:         ContadorLEDS();
   636  01BC  120A  118A  21ED  120A  118A  	fcall	_ContadorLEDS
   637  01C1                     l1095:
   638                           
   639                           ;Prueba.c: 106:         PORTEbits.RE2 = 1;
   640  01C1  1283               	bcf	3,5	;RP0=0, select bank0
   641  01C2  1303               	bcf	3,6	;RP1=0, select bank0
   642  01C3  1509               	bsf	9,2	;volatile
   643  01C4                     l1097:
   644                           
   645                           ;Prueba.c: 107:         PORTD = display(ADC_NIBBLE1);
   646  01C4  087A               	movf	_ADC_NIBBLE1,w
   647  01C5  120A  118A  201E  120A  118A  	fcall	_display
   648  01CA  1283               	bcf	3,5	;RP0=0, select bank0
   649  01CB  1303               	bcf	3,6	;RP1=0, select bank0
   650  01CC  0088               	movwf	8	;volatile
   651  01CD                     l1099:
   652                           
   653                           ;Prueba.c: 109:         if (ADC_VALOR >= contador){
   654  01CD  0825               	movf	_ADC_VALOR+1,w
   655  01CE  3A80               	xorlw	128
   656  01CF  00A3               	movwf	??_main
   657  01D0  3080               	movlw	128
   658  01D1  0223               	subwf	??_main,w
   659  01D2  1D03               	skipz
   660  01D3  29D6               	goto	u185
   661  01D4  087C               	movf	_contador,w
   662  01D5  0224               	subwf	_ADC_VALOR,w
   663  01D6                     u185:
   664  01D6  1C03               	skipc
   665  01D7  29D9               	goto	u181
   666  01D8  29DA               	goto	u180
   667  01D9                     u181:
   668  01D9  29DE               	goto	l129
   669  01DA                     u180:
   670  01DA                     l1101:
   671                           
   672                           ;Prueba.c: 110:             PORTEbits.RE0 = 1;
   673  01DA  1283               	bcf	3,5	;RP0=0, select bank0
   674  01DB  1303               	bcf	3,6	;RP1=0, select bank0
   675  01DC  1409               	bsf	9,0	;volatile
   676                           
   677                           ;Prueba.c: 111:         }
   678  01DD  29BC               	goto	l1093
   679  01DE                     l129:	
   680                           ;Prueba.c: 112:         else {
   681                           
   682                           
   683                           ;Prueba.c: 113:             PORTEbits.RE0 = 0;
   684  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   685  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   686  01E0  1009               	bcf	9,0	;volatile
   687  01E1  29BC               	goto	l1093
   688  01E2  120A  118A  280C   	ljmp	start
   689  01E5                     __end_of_main:
   690                           
   691                           	psect	text1
   692  017B                     __ptext1:	
   693 ;; *************** function _setup *****************
   694 ;; Defined at:
   695 ;;		line 123 in file "Prueba.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         0       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0
   712 ;;      Totals:         0       0       0       0       0
   713 ;;Total ram usage:        0 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    3
   716 ;; This function calls:
   717 ;;		_initOsc
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _setup
   725  017B                     _setup:
   726  017B                     l1009:	
   727                           ;incstack = 0
   728                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   729                           
   730                           
   731                           ;Prueba.c: 124:     initOsc(0b00000110);
   732  017B  3006               	movlw	6
   733  017C  120A  118A  211D  120A  118A  	fcall	_initOsc
   734  0181                     l1011:
   735                           
   736                           ;Prueba.c: 125:     ANSEL = 0b00000001;
   737  0181  3001               	movlw	1
   738  0182  1683               	bsf	3,5	;RP0=1, select bank3
   739  0183  1703               	bsf	3,6	;RP1=1, select bank3
   740  0184  0088               	movwf	8	;volatile
   741  0185                     l1013:
   742                           
   743                           ;Prueba.c: 126:     ANSELH = 0;
   744  0185  0189               	clrf	9	;volatile
   745  0186                     l1015:
   746                           
   747                           ;Prueba.c: 127:     TRISA = 0b00000001;
   748  0186  3001               	movlw	1
   749  0187  1683               	bsf	3,5	;RP0=1, select bank1
   750  0188  1303               	bcf	3,6	;RP1=0, select bank1
   751  0189  0085               	movwf	5	;volatile
   752  018A                     l1017:
   753                           
   754                           ;Prueba.c: 128:     PORTA = 0;
   755  018A  1283               	bcf	3,5	;RP0=0, select bank0
   756  018B  1303               	bcf	3,6	;RP1=0, select bank0
   757  018C  0185               	clrf	5	;volatile
   758  018D                     l1019:
   759                           
   760                           ;Prueba.c: 129:     TRISB = 0b00000011;
   761  018D  3003               	movlw	3
   762  018E  1683               	bsf	3,5	;RP0=1, select bank1
   763  018F  1303               	bcf	3,6	;RP1=0, select bank1
   764  0190  0086               	movwf	6	;volatile
   765  0191                     l1021:
   766                           
   767                           ;Prueba.c: 130:     PORTB = 0;
   768  0191  1283               	bcf	3,5	;RP0=0, select bank0
   769  0192  1303               	bcf	3,6	;RP1=0, select bank0
   770  0193  0186               	clrf	6	;volatile
   771  0194                     l1023:
   772                           
   773                           ;Prueba.c: 131:     TRISC = 0;
   774  0194  1683               	bsf	3,5	;RP0=1, select bank1
   775  0195  1303               	bcf	3,6	;RP1=0, select bank1
   776  0196  0187               	clrf	7	;volatile
   777  0197                     l1025:
   778                           
   779                           ;Prueba.c: 132:     PORTC = 0;
   780  0197  1283               	bcf	3,5	;RP0=0, select bank0
   781  0198  1303               	bcf	3,6	;RP1=0, select bank0
   782  0199  0187               	clrf	7	;volatile
   783  019A                     l1027:
   784                           
   785                           ;Prueba.c: 133:     TRISD = 0;
   786  019A  1683               	bsf	3,5	;RP0=1, select bank1
   787  019B  1303               	bcf	3,6	;RP1=0, select bank1
   788  019C  0188               	clrf	8	;volatile
   789  019D                     l1029:
   790                           
   791                           ;Prueba.c: 134:     PORTD = 0;
   792  019D  1283               	bcf	3,5	;RP0=0, select bank0
   793  019E  1303               	bcf	3,6	;RP1=0, select bank0
   794  019F  0188               	clrf	8	;volatile
   795  01A0                     l1031:
   796                           
   797                           ;Prueba.c: 135:     TRISE = 0;
   798  01A0  1683               	bsf	3,5	;RP0=1, select bank1
   799  01A1  1303               	bcf	3,6	;RP1=0, select bank1
   800  01A2  0189               	clrf	9	;volatile
   801  01A3                     l1033:
   802                           
   803                           ;Prueba.c: 136:     PORTE = 0;
   804  01A3  1283               	bcf	3,5	;RP0=0, select bank0
   805  01A4  1303               	bcf	3,6	;RP1=0, select bank0
   806  01A5  0189               	clrf	9	;volatile
   807  01A6                     l1035:
   808                           
   809                           ;Prueba.c: 137:     INTCONbits.GIE = 1;
   810  01A6  178B               	bsf	11,7	;volatile
   811  01A7                     l1037:
   812                           
   813                           ;Prueba.c: 138:     INTCONbits.RBIE = 1;
   814  01A7  158B               	bsf	11,3	;volatile
   815  01A8                     l1039:
   816                           
   817                           ;Prueba.c: 139:     INTCONbits.RBIF = 0;
   818  01A8  100B               	bcf	11,0	;volatile
   819  01A9                     l1041:
   820                           
   821                           ;Prueba.c: 140:     IOCBbits.IOCB0 = 1;
   822  01A9  1683               	bsf	3,5	;RP0=1, select bank1
   823  01AA  1303               	bcf	3,6	;RP1=0, select bank1
   824  01AB  1416               	bsf	22,0	;volatile
   825  01AC                     l1043:
   826                           
   827                           ;Prueba.c: 141:     IOCBbits.IOCB1 = 1;
   828  01AC  1496               	bsf	22,1	;volatile
   829  01AD                     l1045:
   830                           
   831                           ;Prueba.c: 142:     INTCONbits.PEIE = 1;
   832  01AD  170B               	bsf	11,6	;volatile
   833  01AE                     l1047:
   834                           
   835                           ;Prueba.c: 143:     PIE1bits.ADIE = 1;
   836  01AE  170C               	bsf	12,6	;volatile
   837  01AF                     l1049:
   838                           
   839                           ;Prueba.c: 144:     PIR1bits.ADIF = 0;
   840  01AF  1283               	bcf	3,5	;RP0=0, select bank0
   841  01B0  1303               	bcf	3,6	;RP1=0, select bank0
   842  01B1  130C               	bcf	12,6	;volatile
   843  01B2                     l1051:
   844                           
   845                           ;Prueba.c: 145:     ADCON0 = 0b11000001;
   846  01B2  30C1               	movlw	193
   847  01B3  009F               	movwf	31	;volatile
   848  01B4                     l1053:
   849                           
   850                           ;Prueba.c: 146:     ADCON0bits.GO_nDONE = 1;
   851  01B4  149F               	bsf	31,1	;volatile
   852  01B5                     l136:
   853  01B5  0008               	return
   854  01B6                     __end_of_setup:
   855                           
   856                           	psect	text2
   857  011D                     __ptext2:	
   858 ;; *************** function _initOsc *****************
   859 ;; Defined at:
   860 ;;		line 3 in file "Oscilador.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;  IRCF            1    wreg     unsigned char 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  IRCF            1    2[BANK0 ] unsigned char 
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   874 ;;      Params:         0       0       0       0       0
   875 ;;      Locals:         0       1       0       0       0
   876 ;;      Temps:          0       2       0       0       0
   877 ;;      Totals:         0       3       0       0       0
   878 ;;Total ram usage:        3 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    2
   881 ;; This function calls:
   882 ;;		Nothing
   883 ;; This function is called by:
   884 ;;		_setup
   885 ;; This function uses a non-reentrant model
   886 ;;
   887                           
   888                           
   889                           ;psect for function _initOsc
   890  011D                     _initOsc:
   891                           
   892                           ;incstack = 0
   893                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
   894                           ;initOsc@IRCF stored from wreg
   895  011D  1283               	bcf	3,5	;RP0=0, select bank0
   896  011E  1303               	bcf	3,6	;RP1=0, select bank0
   897  011F  00A2               	movwf	initOsc@IRCF
   898  0120                     l943:
   899                           
   900                           ;Oscilador.c: 5:     switch(IRCF){
   901  0120  2957               	goto	l947
   902  0121                     l6:	
   903                           ;Oscilador.c: 6:         case 0:
   904                           
   905                           
   906                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
   907  0121  1683               	bsf	3,5	;RP0=1, select bank1
   908  0122  1303               	bcf	3,6	;RP1=0, select bank1
   909  0123  130F               	bcf	15,6	;volatile
   910                           
   911                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
   912  0124  128F               	bcf	15,5	;volatile
   913                           
   914                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
   915  0125  120F               	bcf	15,4	;volatile
   916                           
   917                           ;Oscilador.c: 10:             break;
   918  0126  2979               	goto	l7
   919  0127                     l8:	
   920                           ;Oscilador.c: 11:          case 1:
   921                           
   922                           
   923                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
   924  0127  1683               	bsf	3,5	;RP0=1, select bank1
   925  0128  1303               	bcf	3,6	;RP1=0, select bank1
   926  0129  130F               	bcf	15,6	;volatile
   927                           
   928                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
   929  012A  128F               	bcf	15,5	;volatile
   930                           
   931                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
   932  012B  160F               	bsf	15,4	;volatile
   933                           
   934                           ;Oscilador.c: 15:             break;
   935  012C  2979               	goto	l7
   936  012D                     l9:	
   937                           ;Oscilador.c: 16:         case 2:
   938                           
   939                           
   940                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
   941  012D  1683               	bsf	3,5	;RP0=1, select bank1
   942  012E  1303               	bcf	3,6	;RP1=0, select bank1
   943  012F  130F               	bcf	15,6	;volatile
   944                           
   945                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
   946  0130  168F               	bsf	15,5	;volatile
   947                           
   948                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
   949  0131  120F               	bcf	15,4	;volatile
   950                           
   951                           ;Oscilador.c: 20:             break;
   952  0132  2979               	goto	l7
   953  0133                     l10:	
   954                           ;Oscilador.c: 21:         case 3:
   955                           
   956                           
   957                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
   958  0133  1683               	bsf	3,5	;RP0=1, select bank1
   959  0134  1303               	bcf	3,6	;RP1=0, select bank1
   960  0135  130F               	bcf	15,6	;volatile
   961                           
   962                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
   963  0136  168F               	bsf	15,5	;volatile
   964                           
   965                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
   966  0137  160F               	bsf	15,4	;volatile
   967                           
   968                           ;Oscilador.c: 25:             break;
   969  0138  2979               	goto	l7
   970  0139                     l11:	
   971                           ;Oscilador.c: 26:         case 4:
   972                           
   973                           
   974                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
   975  0139  1683               	bsf	3,5	;RP0=1, select bank1
   976  013A  1303               	bcf	3,6	;RP1=0, select bank1
   977  013B  170F               	bsf	15,6	;volatile
   978                           
   979                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
   980  013C  128F               	bcf	15,5	;volatile
   981                           
   982                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
   983  013D  120F               	bcf	15,4	;volatile
   984                           
   985                           ;Oscilador.c: 30:             break;
   986  013E  2979               	goto	l7
   987  013F                     l12:	
   988                           ;Oscilador.c: 31:         case 5:
   989                           
   990                           
   991                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
   992  013F  1683               	bsf	3,5	;RP0=1, select bank1
   993  0140  1303               	bcf	3,6	;RP1=0, select bank1
   994  0141  170F               	bsf	15,6	;volatile
   995                           
   996                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
   997  0142  128F               	bcf	15,5	;volatile
   998                           
   999                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1000  0143  160F               	bsf	15,4	;volatile
  1001                           
  1002                           ;Oscilador.c: 35:             break;
  1003  0144  2979               	goto	l7
  1004  0145                     l13:	
  1005                           ;Oscilador.c: 36:         case 6:
  1006                           
  1007                           
  1008                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1009  0145  1683               	bsf	3,5	;RP0=1, select bank1
  1010  0146  1303               	bcf	3,6	;RP1=0, select bank1
  1011  0147  170F               	bsf	15,6	;volatile
  1012                           
  1013                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1014  0148  168F               	bsf	15,5	;volatile
  1015                           
  1016                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1017  0149  120F               	bcf	15,4	;volatile
  1018                           
  1019                           ;Oscilador.c: 40:             break;
  1020  014A  2979               	goto	l7
  1021  014B                     l14:	
  1022                           ;Oscilador.c: 41:         case 7:
  1023                           
  1024                           
  1025                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1026  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1027  014C  1303               	bcf	3,6	;RP1=0, select bank1
  1028  014D  170F               	bsf	15,6	;volatile
  1029                           
  1030                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1031  014E  168F               	bsf	15,5	;volatile
  1032                           
  1033                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1034  014F  160F               	bsf	15,4	;volatile
  1035                           
  1036                           ;Oscilador.c: 45:             break;
  1037  0150  2979               	goto	l7
  1038  0151                     l15:	
  1039                           ;Oscilador.c: 46:         default:
  1040                           
  1041                           
  1042                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1043  0151  1683               	bsf	3,5	;RP0=1, select bank1
  1044  0152  1303               	bcf	3,6	;RP1=0, select bank1
  1045  0153  170F               	bsf	15,6	;volatile
  1046                           
  1047                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1048  0154  168F               	bsf	15,5	;volatile
  1049                           
  1050                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1051  0155  120F               	bcf	15,4	;volatile
  1052                           
  1053                           ;Oscilador.c: 50:             break;
  1054  0156  2979               	goto	l7
  1055  0157                     l947:
  1056  0157  0822               	movf	initOsc@IRCF,w
  1057  0158  00A0               	movwf	??_initOsc
  1058  0159  01A1               	clrf	??_initOsc+1
  1059                           
  1060                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1061                           ; Switch size 1, requested type "simple"
  1062                           ; Number of cases is 1, Range of values is 0 to 0
  1063                           ; switch strategies available:
  1064                           ; Name         Instructions Cycles
  1065                           ; simple_byte            4     3 (average)
  1066                           ; direct_byte           11     8 (fixed)
  1067                           ; jumptable            260     6 (fixed)
  1068                           ;	Chosen strategy is simple_byte
  1069  015A  0821               	movf	??_initOsc+1,w
  1070  015B  3A00               	xorlw	0	; case 0
  1071  015C  1903               	skipnz
  1072  015D  295F               	goto	l1167
  1073  015E  2951               	goto	l15
  1074  015F                     l1167:
  1075                           
  1076                           ; Switch size 1, requested type "simple"
  1077                           ; Number of cases is 8, Range of values is 0 to 7
  1078                           ; switch strategies available:
  1079                           ; Name         Instructions Cycles
  1080                           ; simple_byte           25    13 (average)
  1081                           ; direct_byte           32     8 (fixed)
  1082                           ; jumptable            260     6 (fixed)
  1083                           ;	Chosen strategy is simple_byte
  1084  015F  0820               	movf	??_initOsc,w
  1085  0160  3A00               	xorlw	0	; case 0
  1086  0161  1903               	skipnz
  1087  0162  2921               	goto	l6
  1088  0163  3A01               	xorlw	1	; case 1
  1089  0164  1903               	skipnz
  1090  0165  2927               	goto	l8
  1091  0166  3A03               	xorlw	3	; case 2
  1092  0167  1903               	skipnz
  1093  0168  292D               	goto	l9
  1094  0169  3A01               	xorlw	1	; case 3
  1095  016A  1903               	skipnz
  1096  016B  2933               	goto	l10
  1097  016C  3A07               	xorlw	7	; case 4
  1098  016D  1903               	skipnz
  1099  016E  2939               	goto	l11
  1100  016F  3A01               	xorlw	1	; case 5
  1101  0170  1903               	skipnz
  1102  0171  293F               	goto	l12
  1103  0172  3A03               	xorlw	3	; case 6
  1104  0173  1903               	skipnz
  1105  0174  2945               	goto	l13
  1106  0175  3A01               	xorlw	1	; case 7
  1107  0176  1903               	skipnz
  1108  0177  294B               	goto	l14
  1109  0178  2951               	goto	l15
  1110  0179                     l7:
  1111                           
  1112                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1113  0179  140F               	bsf	15,0	;volatile
  1114  017A                     l16:
  1115  017A  0008               	return
  1116  017B                     __end_of_initOsc:
  1117                           
  1118                           	psect	text3
  1119  001E                     __ptext3:	
  1120 ;; *************** function _display *****************
  1121 ;; Defined at:
  1122 ;;		line 5 in file "Display.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  ADC_VALOR       1    wreg     unsigned char 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  ADC_VALOR       1    2[BANK0 ] unsigned char 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      unsigned char 
  1129 ;; Registers used:
  1130 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1136 ;;      Params:         0       0       0       0       0
  1137 ;;      Locals:         0       1       0       0       0
  1138 ;;      Temps:          0       2       0       0       0
  1139 ;;      Totals:         0       3       0       0       0
  1140 ;;Total ram usage:        3 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    2
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_main
  1147 ;;		_DisplayADC
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           
  1152                           ;psect for function _display
  1153  001E                     _display:
  1154                           
  1155                           ;incstack = 0
  1156                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  1157                           ;display@ADC_VALOR stored from wreg
  1158  001E  1283               	bcf	3,5	;RP0=0, select bank0
  1159  001F  1303               	bcf	3,6	;RP1=0, select bank0
  1160  0020  00A2               	movwf	display@ADC_VALOR
  1161  0021                     l955:
  1162                           
  1163                           ;Display.c: 7:     switch(ADC_VALOR){
  1164  0021  2872               	goto	l993
  1165  0022                     l957:
  1166                           
  1167                           ;Display.c: 9:             Valor_hex = 0b00111111;
  1168  0022  303F               	movlw	63
  1169  0023  00A0               	movwf	??_display
  1170  0024  0820               	movf	??_display,w
  1171  0025  00FD               	movwf	_Valor_hex
  1172                           
  1173                           ;Display.c: 10:             break;
  1174  0026  28AC               	goto	l995
  1175  0027                     l959:
  1176                           
  1177                           ;Display.c: 12:             Valor_hex = 0b000000110;
  1178  0027  3006               	movlw	6
  1179  0028  00A0               	movwf	??_display
  1180  0029  0820               	movf	??_display,w
  1181  002A  00FD               	movwf	_Valor_hex
  1182                           
  1183                           ;Display.c: 13:             break;
  1184  002B  28AC               	goto	l995
  1185  002C                     l961:
  1186                           
  1187                           ;Display.c: 15:             Valor_hex = 0b11011011;
  1188  002C  30DB               	movlw	219
  1189  002D  00A0               	movwf	??_display
  1190  002E  0820               	movf	??_display,w
  1191  002F  00FD               	movwf	_Valor_hex
  1192                           
  1193                           ;Display.c: 16:             break;
  1194  0030  28AC               	goto	l995
  1195  0031                     l963:
  1196                           
  1197                           ;Display.c: 18:             Valor_hex = 0b01001111;
  1198  0031  304F               	movlw	79
  1199  0032  00A0               	movwf	??_display
  1200  0033  0820               	movf	??_display,w
  1201  0034  00FD               	movwf	_Valor_hex
  1202                           
  1203                           ;Display.c: 19:             break;
  1204  0035  28AC               	goto	l995
  1205  0036                     l965:
  1206                           
  1207                           ;Display.c: 21:             Valor_hex = 0b01100110;
  1208  0036  3066               	movlw	102
  1209  0037  00A0               	movwf	??_display
  1210  0038  0820               	movf	??_display,w
  1211  0039  00FD               	movwf	_Valor_hex
  1212                           
  1213                           ;Display.c: 22:             break;
  1214  003A  28AC               	goto	l995
  1215  003B                     l967:
  1216                           
  1217                           ;Display.c: 24:             Valor_hex = 0b01101101;
  1218  003B  306D               	movlw	109
  1219  003C  00A0               	movwf	??_display
  1220  003D  0820               	movf	??_display,w
  1221  003E  00FD               	movwf	_Valor_hex
  1222                           
  1223                           ;Display.c: 25:             break;
  1224  003F  28AC               	goto	l995
  1225  0040                     l969:
  1226                           
  1227                           ;Display.c: 27:             Valor_hex = 0b01111101;
  1228  0040  307D               	movlw	125
  1229  0041  00A0               	movwf	??_display
  1230  0042  0820               	movf	??_display,w
  1231  0043  00FD               	movwf	_Valor_hex
  1232                           
  1233                           ;Display.c: 28:             break;
  1234  0044  28AC               	goto	l995
  1235  0045                     l971:
  1236                           
  1237                           ;Display.c: 30:             Valor_hex = 0b00000111;
  1238  0045  3007               	movlw	7
  1239  0046  00A0               	movwf	??_display
  1240  0047  0820               	movf	??_display,w
  1241  0048  00FD               	movwf	_Valor_hex
  1242                           
  1243                           ;Display.c: 31:             break;
  1244  0049  28AC               	goto	l995
  1245  004A                     l973:
  1246                           
  1247                           ;Display.c: 33:             Valor_hex = 0b01111111;
  1248  004A  307F               	movlw	127
  1249  004B  00A0               	movwf	??_display
  1250  004C  0820               	movf	??_display,w
  1251  004D  00FD               	movwf	_Valor_hex
  1252                           
  1253                           ;Display.c: 34:             break;
  1254  004E  28AC               	goto	l995
  1255  004F                     l975:
  1256                           
  1257                           ;Display.c: 36:             Valor_hex = 0b01101111;
  1258  004F  306F               	movlw	111
  1259  0050  00A0               	movwf	??_display
  1260  0051  0820               	movf	??_display,w
  1261  0052  00FD               	movwf	_Valor_hex
  1262                           
  1263                           ;Display.c: 37:             break;
  1264  0053  28AC               	goto	l995
  1265  0054                     l977:
  1266                           
  1267                           ;Display.c: 39:             Valor_hex = 0b01110111;
  1268  0054  3077               	movlw	119
  1269  0055  00A0               	movwf	??_display
  1270  0056  0820               	movf	??_display,w
  1271  0057  00FD               	movwf	_Valor_hex
  1272                           
  1273                           ;Display.c: 40:             break;
  1274  0058  28AC               	goto	l995
  1275  0059                     l979:
  1276                           
  1277                           ;Display.c: 42:             Valor_hex = 0b01111100;
  1278  0059  307C               	movlw	124
  1279  005A  00A0               	movwf	??_display
  1280  005B  0820               	movf	??_display,w
  1281  005C  00FD               	movwf	_Valor_hex
  1282                           
  1283                           ;Display.c: 43:             break;
  1284  005D  28AC               	goto	l995
  1285  005E                     l981:
  1286                           
  1287                           ;Display.c: 45:             Valor_hex = 0b00111001;
  1288  005E  3039               	movlw	57
  1289  005F  00A0               	movwf	??_display
  1290  0060  0820               	movf	??_display,w
  1291  0061  00FD               	movwf	_Valor_hex
  1292                           
  1293                           ;Display.c: 46:             break;
  1294  0062  28AC               	goto	l995
  1295  0063                     l983:
  1296                           
  1297                           ;Display.c: 48:             Valor_hex = 0b01011110;
  1298  0063  305E               	movlw	94
  1299  0064  00A0               	movwf	??_display
  1300  0065  0820               	movf	??_display,w
  1301  0066  00FD               	movwf	_Valor_hex
  1302                           
  1303                           ;Display.c: 49:             break;
  1304  0067  28AC               	goto	l995
  1305  0068                     l985:
  1306                           
  1307                           ;Display.c: 51:             Valor_hex = 0b01111001;
  1308  0068  3079               	movlw	121
  1309  0069  00A0               	movwf	??_display
  1310  006A  0820               	movf	??_display,w
  1311  006B  00FD               	movwf	_Valor_hex
  1312                           
  1313                           ;Display.c: 52:             break;
  1314  006C  28AC               	goto	l995
  1315  006D                     l987:
  1316                           
  1317                           ;Display.c: 54:             Valor_hex = 0b01110001;
  1318  006D  3071               	movlw	113
  1319  006E  00A0               	movwf	??_display
  1320  006F  0820               	movf	??_display,w
  1321  0070  00FD               	movwf	_Valor_hex
  1322                           
  1323                           ;Display.c: 55:             break;
  1324  0071  28AC               	goto	l995
  1325  0072                     l993:
  1326  0072  0822               	movf	display@ADC_VALOR,w
  1327  0073  00A0               	movwf	??_display
  1328  0074  01A1               	clrf	??_display+1
  1329                           
  1330                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1331                           ; Switch size 1, requested type "simple"
  1332                           ; Number of cases is 1, Range of values is 0 to 0
  1333                           ; switch strategies available:
  1334                           ; Name         Instructions Cycles
  1335                           ; simple_byte            4     3 (average)
  1336                           ; direct_byte           11     8 (fixed)
  1337                           ; jumptable            260     6 (fixed)
  1338                           ;	Chosen strategy is simple_byte
  1339  0075  0821               	movf	??_display+1,w
  1340  0076  3A00               	xorlw	0	; case 0
  1341  0077  1903               	skipnz
  1342  0078  287A               	goto	l1169
  1343  0079  2822               	goto	l957
  1344  007A                     l1169:
  1345                           
  1346                           ; Switch size 1, requested type "simple"
  1347                           ; Number of cases is 16, Range of values is 0 to 15
  1348                           ; switch strategies available:
  1349                           ; Name         Instructions Cycles
  1350                           ; simple_byte           49    25 (average)
  1351                           ; direct_byte           56     8 (fixed)
  1352                           ; jumptable            260     6 (fixed)
  1353                           ;	Chosen strategy is simple_byte
  1354  007A  0820               	movf	??_display,w
  1355  007B  3A00               	xorlw	0	; case 0
  1356  007C  1903               	skipnz
  1357  007D  2822               	goto	l957
  1358  007E  3A01               	xorlw	1	; case 1
  1359  007F  1903               	skipnz
  1360  0080  2827               	goto	l959
  1361  0081  3A03               	xorlw	3	; case 2
  1362  0082  1903               	skipnz
  1363  0083  282C               	goto	l961
  1364  0084  3A01               	xorlw	1	; case 3
  1365  0085  1903               	skipnz
  1366  0086  2831               	goto	l963
  1367  0087  3A07               	xorlw	7	; case 4
  1368  0088  1903               	skipnz
  1369  0089  2836               	goto	l965
  1370  008A  3A01               	xorlw	1	; case 5
  1371  008B  1903               	skipnz
  1372  008C  283B               	goto	l967
  1373  008D  3A03               	xorlw	3	; case 6
  1374  008E  1903               	skipnz
  1375  008F  2840               	goto	l969
  1376  0090  3A01               	xorlw	1	; case 7
  1377  0091  1903               	skipnz
  1378  0092  2845               	goto	l971
  1379  0093  3A0F               	xorlw	15	; case 8
  1380  0094  1903               	skipnz
  1381  0095  284A               	goto	l973
  1382  0096  3A01               	xorlw	1	; case 9
  1383  0097  1903               	skipnz
  1384  0098  284F               	goto	l975
  1385  0099  3A03               	xorlw	3	; case 10
  1386  009A  1903               	skipnz
  1387  009B  2854               	goto	l977
  1388  009C  3A01               	xorlw	1	; case 11
  1389  009D  1903               	skipnz
  1390  009E  2859               	goto	l979
  1391  009F  3A07               	xorlw	7	; case 12
  1392  00A0  1903               	skipnz
  1393  00A1  285E               	goto	l981
  1394  00A2  3A01               	xorlw	1	; case 13
  1395  00A3  1903               	skipnz
  1396  00A4  2863               	goto	l983
  1397  00A5  3A03               	xorlw	3	; case 14
  1398  00A6  1903               	skipnz
  1399  00A7  2868               	goto	l985
  1400  00A8  3A01               	xorlw	1	; case 15
  1401  00A9  1903               	skipnz
  1402  00AA  286D               	goto	l987
  1403  00AB  2822               	goto	l957
  1404  00AC                     l995:
  1405                           
  1406                           ;Display.c: 60:    return Valor_hex;
  1407  00AC  087D               	movf	_Valor_hex,w
  1408  00AD                     l40:
  1409  00AD  0008               	return
  1410  00AE                     __end_of_display:
  1411                           
  1412                           	psect	text4
  1413  01ED                     __ptext4:	
  1414 ;; *************** function _ContadorLEDS *****************
  1415 ;; Defined at:
  1416 ;;		line 152 in file "Prueba.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		wreg
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1430 ;;      Params:         0       0       0       0       0
  1431 ;;      Locals:         0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0
  1433 ;;      Totals:         0       0       0       0       0
  1434 ;;Total ram usage:        0 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    2
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           
  1445                           ;psect for function _ContadorLEDS
  1446  01ED                     _ContadorLEDS:
  1447  01ED                     l1055:	
  1448                           ;incstack = 0
  1449                           ; Regs used in _ContadorLEDS: [wreg]
  1450                           
  1451                           
  1452                           ;Prueba.c: 153:     PORTC = contador;
  1453  01ED  087C               	movf	_contador,w
  1454  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1455  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1456  01F0  0087               	movwf	7	;volatile
  1457  01F1                     l139:
  1458  01F1  0008               	return
  1459  01F2                     __end_of_ContadorLEDS:
  1460                           
  1461                           	psect	text5
  1462  00AE                     __ptext5:	
  1463 ;; *************** function _ISR *****************
  1464 ;; Defined at:
  1465 ;;		line 58 in file "Prueba.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;		None
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;		None
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      void 
  1472 ;; Registers used:
  1473 ;;		wreg, status,2, status,0, pclath, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1479 ;;      Params:         0       0       0       0       0
  1480 ;;      Locals:         0       0       0       0       0
  1481 ;;      Temps:          6       0       0       0       0
  1482 ;;      Totals:         6       0       0       0       0
  1483 ;;Total ram usage:        6 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    1
  1486 ;; This function calls:
  1487 ;;		_ADC
  1488 ;; This function is called by:
  1489 ;;		Interrupt level 1
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           
  1494                           ;psect for function _ISR
  1495  00AE                     _ISR:
  1496  00AE                     i1l1057:
  1497                           
  1498                           ;Prueba.c: 60:     if (INTCONbits.RBIF == 1){
  1499  00AE  1C0B               	btfss	11,0	;volatile
  1500  00AF  28B1               	goto	u10_21
  1501  00B0  28B2               	goto	u10_20
  1502  00B1                     u10_21:
  1503  00B1  28CB               	goto	i1l1073
  1504  00B2                     u10_20:
  1505  00B2                     i1l1059:
  1506                           
  1507                           ;Prueba.c: 61:         if (PORTBbits.RB0 == 1){
  1508  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1509  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1510  00B4  1C06               	btfss	6,0	;volatile
  1511  00B5  28B7               	goto	u11_21
  1512  00B6  28B8               	goto	u11_20
  1513  00B7                     u11_21:
  1514  00B7  28C0               	goto	i1l1065
  1515  00B8                     u11_20:
  1516  00B8                     i1l115:	
  1517                           ;Prueba.c: 64:             }
  1518                           
  1519                           
  1520                           ;Prueba.c: 62:             while (PORTBbits.RB0 == 1){
  1521  00B8  1806               	btfsc	6,0	;volatile
  1522  00B9  28BB               	goto	u12_21
  1523  00BA  28BC               	goto	u12_20
  1524  00BB                     u12_21:
  1525  00BB  28B8               	goto	i1l115
  1526  00BC                     u12_20:
  1527  00BC                     i1l1063:
  1528                           
  1529                           ;Prueba.c: 65:             contador++;
  1530  00BC  3001               	movlw	1
  1531  00BD  00F2               	movwf	??_ISR
  1532  00BE  0872               	movf	??_ISR,w
  1533  00BF  07FC               	addwf	_contador,f
  1534  00C0                     i1l1065:
  1535                           
  1536                           ;Prueba.c: 67:         if (PORTBbits.RB1 == 1){
  1537  00C0  1C86               	btfss	6,1	;volatile
  1538  00C1  28C3               	goto	u13_21
  1539  00C2  28C4               	goto	u13_20
  1540  00C3                     u13_21:
  1541  00C3  28CA               	goto	i1l1071
  1542  00C4                     u13_20:
  1543  00C4                     i1l119:	
  1544                           ;Prueba.c: 70:             }
  1545                           
  1546                           
  1547                           ;Prueba.c: 68:             while (PORTBbits.RB1 == 1){
  1548  00C4  1886               	btfsc	6,1	;volatile
  1549  00C5  28C7               	goto	u14_21
  1550  00C6  28C8               	goto	u14_20
  1551  00C7                     u14_21:
  1552  00C7  28C4               	goto	i1l119
  1553  00C8                     u14_20:
  1554  00C8                     i1l1069:
  1555                           
  1556                           ;Prueba.c: 71:             contador--;
  1557  00C8  3001               	movlw	1
  1558  00C9  02FC               	subwf	_contador,f
  1559  00CA                     i1l1071:
  1560                           
  1561                           ;Prueba.c: 73:         INTCONbits.RBIF = 0;
  1562  00CA  100B               	bcf	11,0	;volatile
  1563  00CB                     i1l1073:
  1564                           
  1565                           ;Prueba.c: 76:     if (PIR1bits.ADIF == 1){
  1566  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1567  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  1568  00CD  1F0C               	btfss	12,6	;volatile
  1569  00CE  28D0               	goto	u15_21
  1570  00CF  28D1               	goto	u15_20
  1571  00D0                     u15_21:
  1572  00D0  2916               	goto	i1l123
  1573  00D1                     u15_20:
  1574  00D1                     i1l1075:
  1575                           
  1576                           ;Prueba.c: 77:         ADC_VALOR = ADC(ADRESL, ADRESH);
  1577  00D1  081E               	movf	30,w	;volatile
  1578  00D2  00F2               	movwf	??_ISR
  1579  00D3  0872               	movf	??_ISR,w
  1580  00D4  00F0               	movwf	ADC@ADRESH_
  1581  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  1582  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  1583  00D7  081E               	movf	30,w	;volatile
  1584  00D8  120A  118A  21E5  120A  118A  	fcall	_ADC
  1585  00DD  00F3               	movwf	??_ISR+1
  1586  00DE  01F4               	clrf	??_ISR+2
  1587  00DF  0873               	movf	??_ISR+1,w
  1588  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1589  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1590  00E2  00A4               	movwf	_ADC_VALOR
  1591  00E3  0874               	movf	??_ISR+2,w
  1592  00E4  00A5               	movwf	_ADC_VALOR+1
  1593  00E5                     i1l1077:
  1594                           
  1595                           ;Prueba.c: 78:         ADC_SWAP = (((ADC_SWAP & 0x0F)<<4) | ((ADC_SWAP & 0xF0)>>4));
  1596  00E5  087B               	movf	_ADC_SWAP,w
  1597  00E6  00F2               	movwf	??_ISR
  1598  00E7  3004               	movlw	4
  1599  00E8                     u16_25:
  1600  00E8  1003               	clrc
  1601  00E9  0CF2               	rrf	??_ISR,f
  1602  00EA  3EFF               	addlw	-1
  1603  00EB  1D03               	skipz
  1604  00EC  28E8               	goto	u16_25
  1605  00ED  300F               	movlw	15
  1606  00EE  0572               	andwf	??_ISR,w
  1607  00EF  00F3               	movwf	??_ISR+1
  1608  00F0  087B               	movf	_ADC_SWAP,w
  1609  00F1  390F               	andlw	15
  1610  00F2  00F4               	movwf	??_ISR+2
  1611  00F3  3003               	movlw	3
  1612  00F4                     u17_25:
  1613  00F4  1003               	clrc
  1614  00F5  0DF4               	rlf	??_ISR+2,f
  1615  00F6  3EFF               	addlw	-1
  1616  00F7  1D03               	skipz
  1617  00F8  28F4               	goto	u17_25
  1618  00F9  1003               	clrc
  1619  00FA  0D74               	rlf	??_ISR+2,w
  1620  00FB  0473               	iorwf	??_ISR+1,w
  1621  00FC  00F5               	movwf	??_ISR+3
  1622  00FD  0875               	movf	??_ISR+3,w
  1623  00FE  00FB               	movwf	_ADC_SWAP
  1624  00FF                     i1l1079:
  1625                           
  1626                           ;Prueba.c: 79:         ADC_NIBBLE1 = ADC_VALOR & 15;
  1627  00FF  0824               	movf	_ADC_VALOR,w
  1628  0100  390F               	andlw	15
  1629  0101  00F2               	movwf	??_ISR
  1630  0102  0872               	movf	??_ISR,w
  1631  0103  00FA               	movwf	_ADC_NIBBLE1
  1632  0104                     i1l1081:
  1633                           
  1634                           ;Prueba.c: 80:         ADC_NIBBLE2 = ADC_SWAP & 15;
  1635  0104  087B               	movf	_ADC_SWAP,w
  1636  0105  390F               	andlw	15
  1637  0106  00F2               	movwf	??_ISR
  1638  0107  0872               	movf	??_ISR,w
  1639  0108  00F9               	movwf	_ADC_NIBBLE2
  1640  0109                     i1l1083:
  1641                           
  1642                           ;Prueba.c: 81:         PIR1bits.ADIF = 0;
  1643  0109  130C               	bcf	12,6	;volatile
  1644  010A                     i1l1085:
  1645                           
  1646                           ;Prueba.c: 82:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1647  010A  301A               	movlw	26
  1648  010B  00F3               	movwf	??_ISR+1
  1649  010C  30F8               	movlw	248
  1650  010D  00F2               	movwf	??_ISR
  1651  010E                     u19_27:
  1652  010E  0BF2               	decfsz	??_ISR,f
  1653  010F  290E               	goto	u19_27
  1654  0110  0BF3               	decfsz	??_ISR+1,f
  1655  0111  290E               	goto	u19_27
  1656  0112  0000               	nop
  1657  0113                     i1l1087:
  1658                           
  1659                           ;Prueba.c: 83:         ADCON0bits.GO_nDONE = 1;
  1660  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1661  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1662  0115  149F               	bsf	31,1	;volatile
  1663  0116                     i1l123:
  1664  0116  0877               	movf	??_ISR+5,w
  1665  0117  008A               	movwf	10
  1666  0118  0E76               	swapf	??_ISR+4,w
  1667  0119  0083               	movwf	3
  1668  011A  0EFE               	swapf	btemp,f
  1669  011B  0E7E               	swapf	btemp,w
  1670  011C  0009               	retfie
  1671  011D                     __end_of_ISR:
  1672                           
  1673                           	psect	intentry
  1674  0004                     __pintentry:	
  1675                           ;incstack = 0
  1676                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1677                           
  1678  0004                     interrupt_function:
  1679  007E                     saved_w	set	btemp
  1680  0004  00FE               	movwf	btemp
  1681  0005  0E03               	swapf	3,w
  1682  0006  00F6               	movwf	??_ISR+4
  1683  0007  080A               	movf	10,w
  1684  0008  00F7               	movwf	??_ISR+5
  1685  0009  120A  118A  28AE   	ljmp	_ISR
  1686                           
  1687                           	psect	text6
  1688  01E5                     __ptext6:	
  1689 ;; *************** function _ADC *****************
  1690 ;; Defined at:
  1691 ;;		line 5 in file "Config_ADC.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;  ADRESL_         1    wreg     unsigned char 
  1694 ;;  ADRESH_         1    0[COMMON] unsigned char 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  ADRESL_         1    0[COMMON] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      unsigned char 
  1699 ;; Registers used:
  1700 ;;		wreg
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1706 ;;      Params:         1       0       0       0       0
  1707 ;;      Locals:         0       0       0       0       0
  1708 ;;      Temps:          1       0       0       0       0
  1709 ;;      Totals:         2       0       0       0       0
  1710 ;;Total ram usage:        2 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_ISR
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           
  1720                           ;psect for function _ADC
  1721  01E5                     _ADC:
  1722  01E5                     i1l1005:	
  1723                           ;incstack = 0
  1724                           ; Regs used in _ADC: [wreg]
  1725                           
  1726                           
  1727                           ;Config_ADC.c: 6:     VAL = (ADRESL << 8) | ADRESH;
  1728  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1729  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1730  01E7  081E               	movf	30,w	;volatile
  1731  01E8  00F1               	movwf	??_ADC
  1732  01E9  0871               	movf	??_ADC,w
  1733  01EA  00F8               	movwf	_VAL
  1734                           
  1735                           ;Config_ADC.c: 7:     return VAL;
  1736  01EB  0878               	movf	_VAL,w
  1737  01EC                     i1l151:
  1738  01EC  0008               	return
  1739  01ED                     __end_of_ADC:
  1740  007E                     btemp	set	126	;btemp
  1741  007E                     wtemp0	set	126
  1742                           
  1743                           	psect	config
  1744                           
  1745                           ;Config register CONFIG1 @ 0x2007
  1746                           ;	Oscillator Selection bits
  1747                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  1748                           ;	Watchdog Timer Enable bit
  1749                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1750                           ;	Power-up Timer Enable bit
  1751                           ;	PWRTE = OFF, PWRT disabled
  1752                           ;	RE3/MCLR pin function select bit
  1753                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1754                           ;	Code Protection bit
  1755                           ;	CP = OFF, Program memory code protection is disabled
  1756                           ;	Data Code Protection bit
  1757                           ;	CPD = OFF, Data memory code protection is disabled
  1758                           ;	Brown Out Reset Selection bits
  1759                           ;	BOREN = OFF, BOR disabled
  1760                           ;	Internal External Switchover bit
  1761                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1762                           ;	Fail-Safe Clock Monitor Enabled bit
  1763                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1764                           ;	Low Voltage Programming Enable bit
  1765                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1766                           ;	In-Circuit Debugger Mode bit
  1767                           ;	DEBUG = 0x1, unprogrammed default
  1768  2007                     	org	8199
  1769  2007  20D1               	dw	8401
  1770                           
  1771                           ;Config register CONFIG2 @ 0x2008
  1772                           ;	Brown-out Reset Selection bit
  1773                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1774                           ;	Flash Program Memory Self Write Enable bits
  1775                           ;	WRT = OFF, Write protection off
  1776  2008                     	org	8200
  1777  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80      4       7
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_ADC

Critical Paths under _main in BANK0

    _main->_display
    _setup->_initOsc

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      44
                                              3 BANK0      1     1      0
                       _ContadorLEDS
                            _display
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      22
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _display                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _ContadorLEDS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0      76
                                              2 COMMON     6     6      0
                                _ADC
 ---------------------------------------------------------------------------------
 (4) _ADC                                                  3     2      1      76
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ContadorLEDS
   _display
   _setup
     _initOsc

 _ISR (ROOT)
   _ADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      15       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       7       5        8.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      15      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 02 22:29:18 2021

                      l6 0121                        l7 0179                        l8 0127  
                      l9 012D                       l10 0133                       l11 0139  
                     l12 013F                       l13 0145                       l14 014B  
                     l15 0151                       l40 00AD                       l16 017A  
         ??_ContadorLEDS 0020                      l136 01B5                      l129 01DE  
                    l139 01F1                      _ADC 01E5                      l943 0120  
                    l961 002C                      l971 0045                      l963 0031  
                    l955 0021                      l947 0157                      l981 005E  
                    l973 004A                      l965 0036                      l957 0022  
                    l983 0063                      l975 004F                      l967 003B  
                    l959 0027                      l985 0068                      l977 0054  
                    l969 0040                      l993 0072                      l987 006D  
                    l979 0059                      l995 00AC                      u180 01DA  
                    u181 01D9                      u185 01D6                      _ISR 00AE  
                    _VAL 0078                     ?_ADC 0070                     ?_ISR 0070  
                   l1011 0181                     l1021 0191                     l1013 0185  
                   l1101 01DA                     l1031 01A0                     l1023 0194  
                   l1015 0186                     l1041 01A9                     l1033 01A3  
                   l1025 0197                     l1017 018A                     l1009 017B  
                   l1051 01B2                     l1043 01AC                     l1035 01A6  
                   l1027 019A                     l1019 018D                     l1053 01B4  
                   l1045 01AD                     l1037 01A7                     l1029 019D  
                   l1055 01ED                     l1047 01AE                     l1039 01A8  
                   l1049 01AF                     l1091 01B7                     l1093 01BC  
                   l1167 015F                     l1095 01C1                     l1169 007A  
                   l1097 01C4                     l1089 01B6                     l1099 01CD  
                   _main 01B6                     btemp 007E                     start 000C  
                  ??_ADC 0071                    ??_ISR 0072                    ?_main 0070  
                  _ANSEL 0188                    i1l123 0116                    i1l115 00B8  
                  i1l151 01EC                    i1l119 00C4                    u10_20 00B2  
                  u10_21 00B1                    u11_20 00B8                    u11_21 00B7  
                  u12_20 00BC                    u12_21 00BB                    u13_20 00C4  
                  u13_21 00C3                    u14_20 00C8                    u14_21 00C7  
                  u15_20 00D1                    u15_21 00D0                    u16_25 00E8  
                  u17_25 00F4                    _PORTA 0005                    _PORTB 0006  
                  _PORTC 0007                    _PORTD 0008                    _PORTE 0009  
                  u19_27 010E                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
        __end_of_display 00AE          __end_of_initOsc 017B                    _setup 017B  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 01E5                   ??_main 0023  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
            initOsc@IRCF 0022                   ?_setup 0070                   _ANSELH 0189  
                 i1l1005 01E5                   i1l1071 00CA                   i1l1063 00BC  
                 i1l1081 0104                   i1l1065 00C0                   i1l1073 00CB  
                 i1l1057 00AE                   i1l1083 0109                   i1l1075 00D1  
                 i1l1059 00B2                   i1l1085 010A                   i1l1077 00E5  
                 i1l1069 00C8                   i1l1087 0113                   i1l1079 00FF  
   __end_of_ContadorLEDS 01F2                ??_display 0020                ??_initOsc 0020  
                 saved_w 007E               ADC@ADRESH_ 0070               ADC@ADRESL_ 0070  
__end_of__initialization 001A           __pcstackCOMMON 0070            __end_of_setup 01B6  
       display@ADC_VALOR 0022                  ??_setup 0023               __pbssBANK0 0024  
             __pmaintext 01B6               __pintentry 0004    __size_of_ContadorLEDS 0005  
              _ADC_VALOR 0024                  __ptext1 017B                  __ptext2 011D  
                __ptext3 001E                  __ptext4 01ED                  __ptext5 00AE  
                __ptext6 01E5             _ContadorLEDS 01ED                  _display 001E  
           __size_of_ADC 0008             __size_of_ISR 006F                  _initOsc 011D  
   end_of_initialization 001A                _PORTBbits 0006                _PORTEbits 0009  
            _ADC_NIBBLE1 007A              _ADC_NIBBLE2 0079      start_initialization 000F  
            __end_of_ADC 01ED              __end_of_ISR 011D                _Valor_hex 007D  
            __pbssCOMMON 0078                ___latbits 0002            __pcstackBANK0 0020  
               ?_display 0070                 ?_initOsc 0070                 _ADC_SWAP 007B  
         __size_of_setup 003B        interrupt_function 0004                 _IOCBbits 0096  
               _PIE1bits 008C                 _PIR1bits 000C               _ADCON0bits 001F  
               __NIBBLE1 0026         __size_of_display 0090         __size_of_initOsc 005E  
               _contador 007C            __size_of_main 002F               _INTCONbits 000B  
               intlevel1 0000               _OSCCONbits 008F            ?_ContadorLEDS 0070  
