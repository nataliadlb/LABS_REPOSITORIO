

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Feb 05 20:38:49 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  008F                     	;# 
   101  0090                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009A                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  0105                     	;# 
   120  0107                     	;# 
   121  0108                     	;# 
   122  0109                     	;# 
   123  010C                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  010F                     	;# 
   128  0185                     	;# 
   129  0187                     	;# 
   130  0188                     	;# 
   131  0189                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  008F                     	;# 
   179  0090                     	;# 
   180  0091                     	;# 
   181  0092                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0094                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  009F                     	;# 
   197  0105                     	;# 
   198  0107                     	;# 
   199  0108                     	;# 
   200  0109                     	;# 
   201  010C                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  010F                     	;# 
   206  0185                     	;# 
   207  0187                     	;# 
   208  0188                     	;# 
   209  0189                     	;# 
   210  018C                     	;# 
   211  018D                     	;# 
   212  0000                     	;# 
   213  0001                     	;# 
   214  0002                     	;# 
   215  0003                     	;# 
   216  0004                     	;# 
   217  0005                     	;# 
   218  0006                     	;# 
   219  0007                     	;# 
   220  0008                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0088                     	;# 
   252  0089                     	;# 
   253  008C                     	;# 
   254  008D                     	;# 
   255  008E                     	;# 
   256  008F                     	;# 
   257  0090                     	;# 
   258  0091                     	;# 
   259  0092                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009C                     	;# 
   272  009D                     	;# 
   273  009E                     	;# 
   274  009F                     	;# 
   275  0105                     	;# 
   276  0107                     	;# 
   277  0108                     	;# 
   278  0109                     	;# 
   279  010C                     	;# 
   280  010C                     	;# 
   281  010D                     	;# 
   282  010E                     	;# 
   283  010F                     	;# 
   284  0185                     	;# 
   285  0187                     	;# 
   286  0188                     	;# 
   287  0189                     	;# 
   288  018C                     	;# 
   289  018D                     	;# 
   290  0000                     	;# 
   291  0001                     	;# 
   292  0002                     	;# 
   293  0003                     	;# 
   294  0004                     	;# 
   295  0005                     	;# 
   296  0006                     	;# 
   297  0007                     	;# 
   298  0008                     	;# 
   299  0009                     	;# 
   300  000A                     	;# 
   301  000B                     	;# 
   302  000C                     	;# 
   303  000D                     	;# 
   304  000E                     	;# 
   305  000E                     	;# 
   306  000F                     	;# 
   307  0010                     	;# 
   308  0011                     	;# 
   309  0012                     	;# 
   310  0013                     	;# 
   311  0014                     	;# 
   312  0015                     	;# 
   313  0015                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001B                     	;# 
   321  001C                     	;# 
   322  001D                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  0081                     	;# 
   326  0085                     	;# 
   327  0086                     	;# 
   328  0087                     	;# 
   329  0088                     	;# 
   330  0089                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  008F                     	;# 
   335  0090                     	;# 
   336  0091                     	;# 
   337  0092                     	;# 
   338  0093                     	;# 
   339  0093                     	;# 
   340  0093                     	;# 
   341  0094                     	;# 
   342  0095                     	;# 
   343  0096                     	;# 
   344  0097                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009A                     	;# 
   348  009B                     	;# 
   349  009C                     	;# 
   350  009D                     	;# 
   351  009E                     	;# 
   352  009F                     	;# 
   353  0105                     	;# 
   354  0107                     	;# 
   355  0108                     	;# 
   356  0109                     	;# 
   357  010C                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  010F                     	;# 
   362  0185                     	;# 
   363  0187                     	;# 
   364  0188                     	;# 
   365  0189                     	;# 
   366  018C                     	;# 
   367  018D                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0008                     	;# 
   377  0009                     	;# 
   378  000A                     	;# 
   379  000B                     	;# 
   380  000C                     	;# 
   381  000D                     	;# 
   382  000E                     	;# 
   383  000E                     	;# 
   384  000F                     	;# 
   385  0010                     	;# 
   386  0011                     	;# 
   387  0012                     	;# 
   388  0013                     	;# 
   389  0014                     	;# 
   390  0015                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0017                     	;# 
   394  0018                     	;# 
   395  0019                     	;# 
   396  001A                     	;# 
   397  001B                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  001D                     	;# 
   401  001E                     	;# 
   402  001F                     	;# 
   403  0081                     	;# 
   404  0085                     	;# 
   405  0086                     	;# 
   406  0087                     	;# 
   407  0088                     	;# 
   408  0089                     	;# 
   409  008C                     	;# 
   410  008D                     	;# 
   411  008E                     	;# 
   412  008F                     	;# 
   413  0090                     	;# 
   414  0091                     	;# 
   415  0092                     	;# 
   416  0093                     	;# 
   417  0093                     	;# 
   418  0093                     	;# 
   419  0094                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0098                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  009F                     	;# 
   431  0105                     	;# 
   432  0107                     	;# 
   433  0108                     	;# 
   434  0109                     	;# 
   435  010C                     	;# 
   436  010C                     	;# 
   437  010D                     	;# 
   438  010E                     	;# 
   439  010F                     	;# 
   440  0185                     	;# 
   441  0187                     	;# 
   442  0188                     	;# 
   443  0189                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  001F                     _ADCON0	set	31
   447  000B                     _INTCON	set	11
   448  0009                     _PORTE	set	9
   449  0006                     _PORTB	set	6
   450  0005                     _PORTA	set	5
   451  0001                     _TMR0	set	1
   452  0008                     _PORTD	set	8
   453  0009                     _PORTEbits	set	9
   454  001E                     _ADRESH	set	30
   455  001F                     _ADCON0bits	set	31
   456  000C                     _PIR1bits	set	12
   457  0007                     _PORTC	set	7
   458  0006                     _PORTBbits	set	6
   459  000B                     _INTCONbits	set	11
   460  008C                     _PIE1bits	set	140
   461  0096                     _IOCBbits	set	150
   462  0081                     _OPTION_REG	set	129
   463  0089                     _TRISE	set	137
   464  0088                     _TRISD	set	136
   465  0087                     _TRISC	set	135
   466  0086                     _TRISB	set	134
   467  0085                     _TRISA	set	133
   468  009E                     _ADRESL	set	158
   469  008F                     _OSCCONbits	set	143
   470  0189                     _ANSELH	set	393
   471  0188                     _ANSEL	set	392
   472                           
   473                           	psect	cinit
   474  0011                     start_initialization:	
   475                           ; #config settings
   476                           
   477  0011                     __initialization:
   478                           
   479                           ; Clear objects allocated to COMMON
   480  0011  01FB               	clrf	__pbssCOMMON& (0+127)
   481  0012  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   482  0013  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   483                           
   484                           ; Clear objects allocated to BANK0
   485  0014  1283               	bcf	3,5	;RP0=0, select bank0
   486  0015  1303               	bcf	3,6	;RP1=0, select bank0
   487  0016  01A0               	clrf	__pbssBANK0& (0+127)
   488  0017  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   489  0018  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   490  0019  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   491  001A  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   492  001B  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   493  001C  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   494  001D  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   495  001E  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   496  001F  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   497  0020  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   498  0021                     end_of_initialization:	
   499                           ;End of C runtime variable initialization code
   500                           
   501  0021                     __end_of__initialization:
   502  0021  0183               	clrf	3
   503  0022  120A  118A  2A1D   	ljmp	_main	;jump to C main() function
   504                           
   505                           	psect	bssCOMMON
   506  007B                     __pbssCOMMON:
   507  007B                     _ADC_NIBBLE2:
   508  007B                     	ds	1
   509  007C                     _ADC_NIBBLE1:
   510  007C                     	ds	1
   511  007D                     _contador:
   512  007D                     	ds	1
   513                           
   514                           	psect	bssBANK0
   515  0020                     __pbssBANK0:
   516  0020                     _ADC_VALOR:
   517  0020                     	ds	2
   518  0022                     _VAL_NIBBLE2:
   519  0022                     	ds	1
   520  0023                     _VAL_NIBBLE1:
   521  0023                     	ds	1
   522  0024                     _VAL_SWAP:
   523  0024                     	ds	1
   524  0025                     _VAL:
   525  0025                     	ds	1
   526  0026                     _debouncing2:
   527  0026                     	ds	1
   528  0027                     _debouncing1:
   529  0027                     	ds	1
   530  0028                     _cont_multiplex:
   531  0028                     	ds	1
   532  0029                     _ADC_SWAP:
   533  0029                     	ds	1
   534  002A                     _Valor_hex:
   535  002A                     	ds	1
   536                           
   537                           	psect	cstackCOMMON
   538  0070                     __pcstackCOMMON:
   539  0070                     ?_ADC:
   540  0070                     ?_SWAP_ADC:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ??_SWAP_ADC:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     ?_NIBBLE1_ADC:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ??_NIBBLE1_ADC:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_NIBBLE2_ADC:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ??_NIBBLE2_ADC:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_setup:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_initOsc:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_display:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ??_display:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_ISR:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_main:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ADC@ADRESL_:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ADC@ADRESH_:	
   580                           ; 1 bytes @ 0x0
   581                           
   582                           
   583                           ; 1 bytes @ 0x0
   584  0070                     	ds	1
   585  0071                     ??_ADC:
   586  0071                     NIBBLE1_ADC@VAL_ADC:	
   587                           ; 1 bytes @ 0x1
   588                           
   589  0071                     NIBBLE2_ADC@VAL_SWAP:	
   590                           ; 1 bytes @ 0x1
   591                           
   592                           
   593                           ; 1 bytes @ 0x1
   594  0071                     	ds	1
   595  0072                     display@ADC_VALOR:
   596                           
   597                           ; 1 bytes @ 0x2
   598  0072                     	ds	2
   599  0074                     SWAP_ADC@VAL_ADC:
   600                           
   601                           ; 1 bytes @ 0x4
   602  0074                     	ds	1
   603  0075                     ??_ISR:
   604                           
   605                           ; 1 bytes @ 0x5
   606  0075                     	ds	6
   607                           
   608                           	psect	cstackBANK0
   609  002B                     __pcstackBANK0:
   610  002B                     ??_initOsc:
   611                           
   612                           ; 1 bytes @ 0x0
   613  002B                     	ds	2
   614  002D                     initOsc@IRCF:
   615                           
   616                           ; 1 bytes @ 0x2
   617  002D                     	ds	1
   618  002E                     ??_setup:
   619  002E                     ??_main:	
   620                           ; 1 bytes @ 0x3
   621                           
   622                           
   623                           ; 1 bytes @ 0x3
   624  002E                     	ds	1
   625                           
   626                           	psect	maintext
   627  021D                     __pmaintext:	
   628 ;;
   629 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   630 ;;
   631 ;; *************** function _main *****************
   632 ;; Defined at:
   633 ;;		line 127 in file "Prueba.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;		None
   636 ;; Auto vars:     Size  Location     Type
   637 ;;		None
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : B00/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   647 ;;      Params:         0       0       0       0       0
   648 ;;      Locals:         0       0       0       0       0
   649 ;;      Temps:          0       1       0       0       0
   650 ;;      Totals:         0       1       0       0       0
   651 ;;Total ram usage:        1 bytes
   652 ;; Hardware stack levels required when called:    4
   653 ;; This function calls:
   654 ;;		_setup
   655 ;; This function is called by:
   656 ;;		Startup code after reset
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           
   661                           ;psect for function _main
   662  021D                     _main:
   663  021D                     l1203:	
   664                           ;incstack = 0
   665                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   666                           
   667                           
   668                           ;Prueba.c: 128:     setup();
   669  021D  120A  118A  21E0  120A  118A  	fcall	_setup
   670  0222                     l1205:
   671                           
   672                           ;Prueba.c: 129:     contador = 0;
   673  0222  01FD               	clrf	_contador
   674  0223                     l1207:
   675                           
   676                           ;Prueba.c: 130:     cont_multiplex = 0;
   677  0223  1283               	bcf	3,5	;RP0=0, select bank0
   678  0224  1303               	bcf	3,6	;RP1=0, select bank0
   679  0225  01A8               	clrf	_cont_multiplex
   680  0226                     l1209:
   681                           
   682                           ;Prueba.c: 143:         if (ADC_VALOR >= contador){
   683  0226  0821               	movf	_ADC_VALOR+1,w
   684  0227  3A80               	xorlw	128
   685  0228  00AE               	movwf	??_main
   686  0229  3080               	movlw	128
   687  022A  022E               	subwf	??_main,w
   688  022B  1D03               	skipz
   689  022C  2A2F               	goto	u265
   690  022D  087D               	movf	_contador,w
   691  022E  0220               	subwf	_ADC_VALOR,w
   692  022F                     u265:
   693  022F  1C03               	skipc
   694  0230  2A32               	goto	u261
   695  0231  2A33               	goto	u260
   696  0232                     u261:
   697  0232  2A37               	goto	l143
   698  0233                     u260:
   699  0233                     l1211:
   700                           
   701                           ;Prueba.c: 144:             PORTEbits.RE0 = 1;
   702  0233  1283               	bcf	3,5	;RP0=0, select bank0
   703  0234  1303               	bcf	3,6	;RP1=0, select bank0
   704  0235  1409               	bsf	9,0	;volatile
   705                           
   706                           ;Prueba.c: 145:         }
   707  0236  2A26               	goto	l1209
   708  0237                     l143:	
   709                           ;Prueba.c: 146:         else {
   710                           
   711                           
   712                           ;Prueba.c: 147:             PORTEbits.RE0 = 0;
   713  0237  1283               	bcf	3,5	;RP0=0, select bank0
   714  0238  1303               	bcf	3,6	;RP1=0, select bank0
   715  0239  1009               	bcf	9,0	;volatile
   716  023A  2A26               	goto	l1209
   717  023B  120A  118A  280E   	ljmp	start
   718  023E                     __end_of_main:
   719                           
   720                           	psect	text1
   721  01E0                     __ptext1:	
   722 ;; *************** function _setup *****************
   723 ;; Defined at:
   724 ;;		line 157 in file "Prueba.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   738 ;;      Params:         0       0       0       0       0
   739 ;;      Locals:         0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0
   741 ;;      Totals:         0       0       0       0       0
   742 ;;Total ram usage:        0 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    3
   745 ;; This function calls:
   746 ;;		_initOsc
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           
   753                           ;psect for function _setup
   754  01E0                     _setup:
   755  01E0                     l1099:	
   756                           ;incstack = 0
   757                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   758                           
   759                           
   760                           ;Prueba.c: 158:     initOsc(0b00000110);
   761  01E0  3006               	movlw	6
   762  01E1  120A  118A  2182  120A  118A  	fcall	_initOsc
   763  01E6                     l1101:
   764                           
   765                           ;Prueba.c: 159:     ANSEL = 0b00000001;
   766  01E6  3001               	movlw	1
   767  01E7  1683               	bsf	3,5	;RP0=1, select bank3
   768  01E8  1703               	bsf	3,6	;RP1=1, select bank3
   769  01E9  0088               	movwf	8	;volatile
   770  01EA                     l1103:
   771                           
   772                           ;Prueba.c: 160:     ANSELH = 0;
   773  01EA  0189               	clrf	9	;volatile
   774  01EB                     l1105:
   775                           
   776                           ;Prueba.c: 161:     TRISA = 0b00000001;
   777  01EB  3001               	movlw	1
   778  01EC  1683               	bsf	3,5	;RP0=1, select bank1
   779  01ED  1303               	bcf	3,6	;RP1=0, select bank1
   780  01EE  0085               	movwf	5	;volatile
   781  01EF                     l1107:
   782                           
   783                           ;Prueba.c: 162:     PORTA = 0;
   784  01EF  1283               	bcf	3,5	;RP0=0, select bank0
   785  01F0  1303               	bcf	3,6	;RP1=0, select bank0
   786  01F1  0185               	clrf	5	;volatile
   787  01F2                     l1109:
   788                           
   789                           ;Prueba.c: 163:     TRISB = 0b00000011;
   790  01F2  3003               	movlw	3
   791  01F3  1683               	bsf	3,5	;RP0=1, select bank1
   792  01F4  1303               	bcf	3,6	;RP1=0, select bank1
   793  01F5  0086               	movwf	6	;volatile
   794  01F6                     l1111:
   795                           
   796                           ;Prueba.c: 164:     PORTB = 0;
   797  01F6  1283               	bcf	3,5	;RP0=0, select bank0
   798  01F7  1303               	bcf	3,6	;RP1=0, select bank0
   799  01F8  0186               	clrf	6	;volatile
   800  01F9                     l1113:
   801                           
   802                           ;Prueba.c: 165:     TRISC = 0;
   803  01F9  1683               	bsf	3,5	;RP0=1, select bank1
   804  01FA  1303               	bcf	3,6	;RP1=0, select bank1
   805  01FB  0187               	clrf	7	;volatile
   806  01FC                     l1115:
   807                           
   808                           ;Prueba.c: 166:     PORTC = 0;
   809  01FC  1283               	bcf	3,5	;RP0=0, select bank0
   810  01FD  1303               	bcf	3,6	;RP1=0, select bank0
   811  01FE  0187               	clrf	7	;volatile
   812  01FF                     l1117:
   813                           
   814                           ;Prueba.c: 167:     TRISD = 0;
   815  01FF  1683               	bsf	3,5	;RP0=1, select bank1
   816  0200  1303               	bcf	3,6	;RP1=0, select bank1
   817  0201  0188               	clrf	8	;volatile
   818  0202                     l1119:
   819                           
   820                           ;Prueba.c: 168:     PORTD = 0;
   821  0202  1283               	bcf	3,5	;RP0=0, select bank0
   822  0203  1303               	bcf	3,6	;RP1=0, select bank0
   823  0204  0188               	clrf	8	;volatile
   824  0205                     l1121:
   825                           
   826                           ;Prueba.c: 169:     TRISE = 0;
   827  0205  1683               	bsf	3,5	;RP0=1, select bank1
   828  0206  1303               	bcf	3,6	;RP1=0, select bank1
   829  0207  0189               	clrf	9	;volatile
   830  0208                     l1123:
   831                           
   832                           ;Prueba.c: 170:     PORTE = 0;
   833  0208  1283               	bcf	3,5	;RP0=0, select bank0
   834  0209  1303               	bcf	3,6	;RP1=0, select bank0
   835  020A  0189               	clrf	9	;volatile
   836  020B                     l1125:
   837                           
   838                           ;Prueba.c: 180:     TMR0 = 4;
   839  020B  3004               	movlw	4
   840  020C  0081               	movwf	1	;volatile
   841  020D                     l1127:
   842                           
   843                           ;Prueba.c: 181:     OPTION_REG = 0b10000001;
   844  020D  3081               	movlw	129
   845  020E  1683               	bsf	3,5	;RP0=1, select bank1
   846  020F  1303               	bcf	3,6	;RP1=0, select bank1
   847  0210  0081               	movwf	1	;volatile
   848  0211                     l1129:
   849                           
   850                           ;Prueba.c: 182:     INTCON = 0b11101001;
   851  0211  30E9               	movlw	233
   852  0212  008B               	movwf	11	;volatile
   853  0213                     l1131:
   854                           
   855                           ;Prueba.c: 189:     IOCBbits.IOCB0 = 1;
   856  0213  1416               	bsf	22,0	;volatile
   857  0214                     l1133:
   858                           
   859                           ;Prueba.c: 190:     IOCBbits.IOCB1 = 1;
   860  0214  1496               	bsf	22,1	;volatile
   861  0215                     l1135:
   862                           
   863                           ;Prueba.c: 195:     PIE1bits.ADIE = 1;
   864  0215  170C               	bsf	12,6	;volatile
   865  0216                     l1137:
   866                           
   867                           ;Prueba.c: 196:     PIR1bits.ADIF = 0;
   868  0216  1283               	bcf	3,5	;RP0=0, select bank0
   869  0217  1303               	bcf	3,6	;RP1=0, select bank0
   870  0218  130C               	bcf	12,6	;volatile
   871  0219                     l1139:
   872                           
   873                           ;Prueba.c: 197:     ADCON0 = 0b01000001;
   874  0219  3041               	movlw	65
   875  021A  009F               	movwf	31	;volatile
   876  021B                     l1141:
   877                           
   878                           ;Prueba.c: 198:     ADCON0bits.GO = 1;
   879  021B  149F               	bsf	31,1	;volatile
   880  021C                     l150:
   881  021C  0008               	return
   882  021D                     __end_of_setup:
   883                           
   884                           	psect	text2
   885  0182                     __ptext2:	
   886 ;; *************** function _initOsc *****************
   887 ;; Defined at:
   888 ;;		line 3 in file "Oscilador.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  IRCF            1    wreg     unsigned char 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  IRCF            1    2[BANK0 ] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   902 ;;      Params:         0       0       0       0       0
   903 ;;      Locals:         0       1       0       0       0
   904 ;;      Temps:          0       2       0       0       0
   905 ;;      Totals:         0       3       0       0       0
   906 ;;Total ram usage:        3 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    2
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_setup
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _initOsc
   918  0182                     _initOsc:
   919                           
   920                           ;incstack = 0
   921                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
   922                           ;initOsc@IRCF stored from wreg
   923  0182  1283               	bcf	3,5	;RP0=0, select bank0
   924  0183  1303               	bcf	3,6	;RP1=0, select bank0
   925  0184  00AD               	movwf	initOsc@IRCF
   926  0185                     l1017:
   927                           
   928                           ;Oscilador.c: 5:     switch(IRCF){
   929  0185  29BC               	goto	l1021
   930  0186                     l6:	
   931                           ;Oscilador.c: 6:         case 0:
   932                           
   933                           
   934                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
   935  0186  1683               	bsf	3,5	;RP0=1, select bank1
   936  0187  1303               	bcf	3,6	;RP1=0, select bank1
   937  0188  130F               	bcf	15,6	;volatile
   938                           
   939                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
   940  0189  128F               	bcf	15,5	;volatile
   941                           
   942                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
   943  018A  120F               	bcf	15,4	;volatile
   944                           
   945                           ;Oscilador.c: 10:             break;
   946  018B  29DE               	goto	l7
   947  018C                     l8:	
   948                           ;Oscilador.c: 11:          case 1:
   949                           
   950                           
   951                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
   952  018C  1683               	bsf	3,5	;RP0=1, select bank1
   953  018D  1303               	bcf	3,6	;RP1=0, select bank1
   954  018E  130F               	bcf	15,6	;volatile
   955                           
   956                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
   957  018F  128F               	bcf	15,5	;volatile
   958                           
   959                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
   960  0190  160F               	bsf	15,4	;volatile
   961                           
   962                           ;Oscilador.c: 15:             break;
   963  0191  29DE               	goto	l7
   964  0192                     l9:	
   965                           ;Oscilador.c: 16:         case 2:
   966                           
   967                           
   968                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
   969  0192  1683               	bsf	3,5	;RP0=1, select bank1
   970  0193  1303               	bcf	3,6	;RP1=0, select bank1
   971  0194  130F               	bcf	15,6	;volatile
   972                           
   973                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
   974  0195  168F               	bsf	15,5	;volatile
   975                           
   976                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
   977  0196  120F               	bcf	15,4	;volatile
   978                           
   979                           ;Oscilador.c: 20:             break;
   980  0197  29DE               	goto	l7
   981  0198                     l10:	
   982                           ;Oscilador.c: 21:         case 3:
   983                           
   984                           
   985                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
   986  0198  1683               	bsf	3,5	;RP0=1, select bank1
   987  0199  1303               	bcf	3,6	;RP1=0, select bank1
   988  019A  130F               	bcf	15,6	;volatile
   989                           
   990                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
   991  019B  168F               	bsf	15,5	;volatile
   992                           
   993                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
   994  019C  160F               	bsf	15,4	;volatile
   995                           
   996                           ;Oscilador.c: 25:             break;
   997  019D  29DE               	goto	l7
   998  019E                     l11:	
   999                           ;Oscilador.c: 26:         case 4:
  1000                           
  1001                           
  1002                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
  1003  019E  1683               	bsf	3,5	;RP0=1, select bank1
  1004  019F  1303               	bcf	3,6	;RP1=0, select bank1
  1005  01A0  170F               	bsf	15,6	;volatile
  1006                           
  1007                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
  1008  01A1  128F               	bcf	15,5	;volatile
  1009                           
  1010                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
  1011  01A2  120F               	bcf	15,4	;volatile
  1012                           
  1013                           ;Oscilador.c: 30:             break;
  1014  01A3  29DE               	goto	l7
  1015  01A4                     l12:	
  1016                           ;Oscilador.c: 31:         case 5:
  1017                           
  1018                           
  1019                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
  1020  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  1021  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  1022  01A6  170F               	bsf	15,6	;volatile
  1023                           
  1024                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
  1025  01A7  128F               	bcf	15,5	;volatile
  1026                           
  1027                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
  1028  01A8  160F               	bsf	15,4	;volatile
  1029                           
  1030                           ;Oscilador.c: 35:             break;
  1031  01A9  29DE               	goto	l7
  1032  01AA                     l13:	
  1033                           ;Oscilador.c: 36:         case 6:
  1034                           
  1035                           
  1036                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
  1037  01AA  1683               	bsf	3,5	;RP0=1, select bank1
  1038  01AB  1303               	bcf	3,6	;RP1=0, select bank1
  1039  01AC  170F               	bsf	15,6	;volatile
  1040                           
  1041                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
  1042  01AD  168F               	bsf	15,5	;volatile
  1043                           
  1044                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
  1045  01AE  120F               	bcf	15,4	;volatile
  1046                           
  1047                           ;Oscilador.c: 40:             break;
  1048  01AF  29DE               	goto	l7
  1049  01B0                     l14:	
  1050                           ;Oscilador.c: 41:         case 7:
  1051                           
  1052                           
  1053                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
  1054  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  1055  01B1  1303               	bcf	3,6	;RP1=0, select bank1
  1056  01B2  170F               	bsf	15,6	;volatile
  1057                           
  1058                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
  1059  01B3  168F               	bsf	15,5	;volatile
  1060                           
  1061                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
  1062  01B4  160F               	bsf	15,4	;volatile
  1063                           
  1064                           ;Oscilador.c: 45:             break;
  1065  01B5  29DE               	goto	l7
  1066  01B6                     l15:	
  1067                           ;Oscilador.c: 46:         default:
  1068                           
  1069                           
  1070                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
  1071  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  1072  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  1073  01B8  170F               	bsf	15,6	;volatile
  1074                           
  1075                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
  1076  01B9  168F               	bsf	15,5	;volatile
  1077                           
  1078                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
  1079  01BA  120F               	bcf	15,4	;volatile
  1080                           
  1081                           ;Oscilador.c: 50:             break;
  1082  01BB  29DE               	goto	l7
  1083  01BC                     l1021:
  1084  01BC  082D               	movf	initOsc@IRCF,w
  1085  01BD  00AB               	movwf	??_initOsc
  1086  01BE  01AC               	clrf	??_initOsc+1
  1087                           
  1088                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1089                           ; Switch size 1, requested type "simple"
  1090                           ; Number of cases is 1, Range of values is 0 to 0
  1091                           ; switch strategies available:
  1092                           ; Name         Instructions Cycles
  1093                           ; simple_byte            4     3 (average)
  1094                           ; direct_byte           11     8 (fixed)
  1095                           ; jumptable            260     6 (fixed)
  1096                           ;	Chosen strategy is simple_byte
  1097  01BF  082C               	movf	??_initOsc+1,w
  1098  01C0  3A00               	xorlw	0	; case 0
  1099  01C1  1903               	skipnz
  1100  01C2  29C4               	goto	l1269
  1101  01C3  29B6               	goto	l15
  1102  01C4                     l1269:
  1103                           
  1104                           ; Switch size 1, requested type "simple"
  1105                           ; Number of cases is 8, Range of values is 0 to 7
  1106                           ; switch strategies available:
  1107                           ; Name         Instructions Cycles
  1108                           ; simple_byte           25    13 (average)
  1109                           ; direct_byte           32     8 (fixed)
  1110                           ; jumptable            260     6 (fixed)
  1111                           ;	Chosen strategy is simple_byte
  1112  01C4  082B               	movf	??_initOsc,w
  1113  01C5  3A00               	xorlw	0	; case 0
  1114  01C6  1903               	skipnz
  1115  01C7  2986               	goto	l6
  1116  01C8  3A01               	xorlw	1	; case 1
  1117  01C9  1903               	skipnz
  1118  01CA  298C               	goto	l8
  1119  01CB  3A03               	xorlw	3	; case 2
  1120  01CC  1903               	skipnz
  1121  01CD  2992               	goto	l9
  1122  01CE  3A01               	xorlw	1	; case 3
  1123  01CF  1903               	skipnz
  1124  01D0  2998               	goto	l10
  1125  01D1  3A07               	xorlw	7	; case 4
  1126  01D2  1903               	skipnz
  1127  01D3  299E               	goto	l11
  1128  01D4  3A01               	xorlw	1	; case 5
  1129  01D5  1903               	skipnz
  1130  01D6  29A4               	goto	l12
  1131  01D7  3A03               	xorlw	3	; case 6
  1132  01D8  1903               	skipnz
  1133  01D9  29AA               	goto	l13
  1134  01DA  3A01               	xorlw	1	; case 7
  1135  01DB  1903               	skipnz
  1136  01DC  29B0               	goto	l14
  1137  01DD  29B6               	goto	l15
  1138  01DE                     l7:
  1139                           
  1140                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
  1141  01DE  140F               	bsf	15,0	;volatile
  1142  01DF                     l16:
  1143  01DF  0008               	return
  1144  01E0                     __end_of_initOsc:
  1145                           
  1146                           	psect	text3
  1147  0025                     __ptext3:	
  1148 ;; *************** function _ISR *****************
  1149 ;; Defined at:
  1150 ;;		line 60 in file "Prueba.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1164 ;;      Params:         0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0
  1166 ;;      Temps:          6       0       0       0       0
  1167 ;;      Totals:         6       0       0       0       0
  1168 ;;Total ram usage:        6 bytes
  1169 ;; Hardware stack levels used:    1
  1170 ;; Hardware stack levels required when called:    1
  1171 ;; This function calls:
  1172 ;;		_ADC
  1173 ;;		_NIBBLE1_ADC
  1174 ;;		_NIBBLE2_ADC
  1175 ;;		_SWAP_ADC
  1176 ;;		_display
  1177 ;; This function is called by:
  1178 ;;		Interrupt level 1
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _ISR
  1184  0025                     _ISR:
  1185  0025                     i1l1143:
  1186                           
  1187                           ;Prueba.c: 62:     if (INTCONbits.RBIF == 1){
  1188  0025  1C0B               	btfss	11,0	;volatile
  1189  0026  2828               	goto	u16_21
  1190  0027  2829               	goto	u16_20
  1191  0028                     u16_21:
  1192  0028  2856               	goto	i1l1171
  1193  0029                     u16_20:
  1194  0029                     i1l1145:
  1195                           
  1196                           ;Prueba.c: 64:             if (PORTBbits.RB0 == 1){
  1197  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1198  002A  1303               	bcf	3,6	;RP1=0, select bank0
  1199  002B  1C06               	btfss	6,0	;volatile
  1200  002C  282E               	goto	u17_21
  1201  002D  282F               	goto	u17_20
  1202  002E                     u17_21:
  1203  002E  2831               	goto	i1l128
  1204  002F                     u17_20:
  1205  002F                     i1l1147:
  1206                           
  1207                           ;Prueba.c: 65:                 debouncing1 = 1;
  1208  002F  01A7               	clrf	_debouncing1
  1209  0030  0AA7               	incf	_debouncing1,f
  1210  0031                     i1l128:	
  1211                           ;Prueba.c: 67:             }
  1212                           
  1213                           
  1214                           ;Prueba.c: 68:             if (PORTBbits.RB1 == 1){
  1215  0031  1C86               	btfss	6,1	;volatile
  1216  0032  2834               	goto	u18_21
  1217  0033  2835               	goto	u18_20
  1218  0034                     u18_21:
  1219  0034  2837               	goto	i1l129
  1220  0035                     u18_20:
  1221  0035                     i1l1149:
  1222                           
  1223                           ;Prueba.c: 69:                 debouncing2 = 1;
  1224  0035  01A6               	clrf	_debouncing2
  1225  0036  0AA6               	incf	_debouncing2,f
  1226  0037                     i1l129:	
  1227                           ;Prueba.c: 71:             }
  1228                           
  1229                           
  1230                           ;Prueba.c: 72:             if(PORTBbits.RB0 == 0 && debouncing1 == 1){
  1231  0037  1806               	btfsc	6,0	;volatile
  1232  0038  283A               	goto	u19_21
  1233  0039  283B               	goto	u19_20
  1234  003A                     u19_21:
  1235  003A  2847               	goto	i1l1159
  1236  003B                     u19_20:
  1237  003B                     i1l1151:
  1238  003B  0327               	decf	_debouncing1,w
  1239  003C  1D03               	btfss	3,2
  1240  003D  283F               	goto	u20_21
  1241  003E  2840               	goto	u20_20
  1242  003F                     u20_21:
  1243  003F  2847               	goto	i1l1159
  1244  0040                     u20_20:
  1245  0040                     i1l1153:
  1246                           
  1247                           ;Prueba.c: 73:                 contador++;
  1248  0040  3001               	movlw	1
  1249  0041  00F5               	movwf	??_ISR
  1250  0042  0875               	movf	??_ISR,w
  1251  0043  07FD               	addwf	_contador,f
  1252  0044                     i1l1155:
  1253                           
  1254                           ;Prueba.c: 74:                 PORTC = contador;
  1255  0044  087D               	movf	_contador,w
  1256  0045  0087               	movwf	7	;volatile
  1257  0046                     i1l1157:
  1258                           
  1259                           ;Prueba.c: 75:                 debouncing1 = 0;
  1260  0046  01A7               	clrf	_debouncing1
  1261  0047                     i1l1159:
  1262                           
  1263                           ;Prueba.c: 77:             if(PORTBbits.RB1 == 0 && debouncing2 == 1){
  1264  0047  1886               	btfsc	6,1	;volatile
  1265  0048  284A               	goto	u21_21
  1266  0049  284B               	goto	u21_20
  1267  004A                     u21_21:
  1268  004A  2855               	goto	i1l1169
  1269  004B                     u21_20:
  1270  004B                     i1l1161:
  1271  004B  0326               	decf	_debouncing2,w
  1272  004C  1D03               	btfss	3,2
  1273  004D  284F               	goto	u22_21
  1274  004E  2850               	goto	u22_20
  1275  004F                     u22_21:
  1276  004F  2855               	goto	i1l1169
  1277  0050                     u22_20:
  1278  0050                     i1l1163:
  1279                           
  1280                           ;Prueba.c: 78:                 contador--;
  1281  0050  3001               	movlw	1
  1282  0051  02FD               	subwf	_contador,f
  1283  0052                     i1l1165:
  1284                           
  1285                           ;Prueba.c: 79:                 PORTC = contador;
  1286  0052  087D               	movf	_contador,w
  1287  0053  0087               	movwf	7	;volatile
  1288  0054                     i1l1167:
  1289                           
  1290                           ;Prueba.c: 80:                 debouncing2 = 0;
  1291  0054  01A6               	clrf	_debouncing2
  1292  0055                     i1l1169:
  1293                           
  1294                           ;Prueba.c: 82:             INTCONbits.RBIF = 0;
  1295  0055  100B               	bcf	11,0	;volatile
  1296  0056                     i1l1171:
  1297                           
  1298                           ;Prueba.c: 85:     if (PIR1bits.ADIF == 1){
  1299  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1300  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1301  0058  1F0C               	btfss	12,6	;volatile
  1302  0059  285B               	goto	u23_21
  1303  005A  285C               	goto	u23_20
  1304  005B                     u23_21:
  1305  005B  28A3               	goto	i1l132
  1306  005C                     u23_20:
  1307  005C                     i1l1173:
  1308                           
  1309                           ;Prueba.c: 86:         PIR1bits.ADIF = 0;
  1310  005C  130C               	bcf	12,6	;volatile
  1311  005D                     i1l1175:
  1312                           
  1313                           ;Prueba.c: 87:         _delay((unsigned long)((2)*(8000000/4000.0)));
  1314  005D  3006               	movlw	6
  1315  005E  00F6               	movwf	??_ISR+1
  1316  005F  3030               	movlw	48
  1317  0060  00F5               	movwf	??_ISR
  1318  0061                     u27_27:
  1319  0061  0BF5               	decfsz	??_ISR,f
  1320  0062  2861               	goto	u27_27
  1321  0063  0BF6               	decfsz	??_ISR+1,f
  1322  0064  2861               	goto	u27_27
  1323  0065  0000               	nop
  1324  0066                     i1l1177:
  1325                           
  1326                           ;Prueba.c: 88:         ADCON0bits.GO = 1;
  1327  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0068  149F               	bsf	31,1	;volatile
  1330                           
  1331                           ;Prueba.c: 89:         while (ADCON0bits.GO != 1){
  1332  0069  289D               	goto	i1l1187
  1333  006A                     i1l1179:
  1334                           
  1335                           ;Prueba.c: 90:             ADC_VALOR = ADC(ADRESL, ADRESH);
  1336  006A  081E               	movf	30,w	;volatile
  1337  006B  00F5               	movwf	??_ISR
  1338  006C  0875               	movf	??_ISR,w
  1339  006D  00F0               	movwf	ADC@ADRESH_
  1340  006E  1683               	bsf	3,5	;RP0=1, select bank1
  1341  006F  1303               	bcf	3,6	;RP1=0, select bank1
  1342  0070  081E               	movf	30,w	;volatile
  1343  0071  120A  118A  2271  120A  118A  	fcall	_ADC
  1344  0076  00F6               	movwf	??_ISR+1
  1345  0077  01F7               	clrf	??_ISR+2
  1346  0078  0876               	movf	??_ISR+1,w
  1347  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1348  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1349  007B  00A0               	movwf	_ADC_VALOR
  1350  007C  0877               	movf	??_ISR+2,w
  1351  007D  00A1               	movwf	_ADC_VALOR+1
  1352  007E                     i1l1181:
  1353                           
  1354                           ;Prueba.c: 91:             ADC_SWAP = SWAP_ADC(ADC_VALOR);
  1355  007E  0820               	movf	_ADC_VALOR,w
  1356  007F  120A  118A  223E  120A  118A  	fcall	_SWAP_ADC
  1357  0084  00F5               	movwf	??_ISR
  1358  0085  0875               	movf	??_ISR,w
  1359  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1360  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1361  0088  00A9               	movwf	_ADC_SWAP
  1362  0089                     i1l1183:
  1363                           
  1364                           ;Prueba.c: 92:             ADC_NIBBLE1 = NIBBLE1_ADC(ADC_VALOR);
  1365  0089  0820               	movf	_ADC_VALOR,w
  1366  008A  120A  118A  2267  120A  118A  	fcall	_NIBBLE1_ADC
  1367  008F  00F5               	movwf	??_ISR
  1368  0090  0875               	movf	??_ISR,w
  1369  0091  00FC               	movwf	_ADC_NIBBLE1
  1370  0092                     i1l1185:
  1371                           
  1372                           ;Prueba.c: 93:             ADC_NIBBLE2 = NIBBLE2_ADC(ADC_SWAP);
  1373  0092  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0093  1303               	bcf	3,6	;RP1=0, select bank0
  1375  0094  0829               	movf	_ADC_SWAP,w
  1376  0095  120A  118A  225D  120A  118A  	fcall	_NIBBLE2_ADC
  1377  009A  00F5               	movwf	??_ISR
  1378  009B  0875               	movf	??_ISR,w
  1379  009C  00FB               	movwf	_ADC_NIBBLE2
  1380  009D                     i1l1187:
  1381                           
  1382                           ;Prueba.c: 89:         while (ADCON0bits.GO != 1){
  1383  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1384  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1385  009F  1C9F               	btfss	31,1	;volatile
  1386  00A0  28A2               	goto	u24_21
  1387  00A1  28A3               	goto	u24_20
  1388  00A2                     u24_21:
  1389  00A2  286A               	goto	i1l1179
  1390  00A3                     u24_20:
  1391  00A3                     i1l132:	
  1392                           ;Prueba.c: 97:     }
  1393                           
  1394                           
  1395                           ;Prueba.c: 99:     if (INTCONbits.TMR0IF == 1){
  1396  00A3  1D0B               	btfss	11,2	;volatile
  1397  00A4  28A6               	goto	u25_21
  1398  00A5  28A7               	goto	u25_20
  1399  00A6                     u25_21:
  1400  00A6  28CB               	goto	i1l137
  1401  00A7                     u25_20:
  1402  00A7                     i1l1189:
  1403                           
  1404                           ;Prueba.c: 100:         PORTEbits.RE1 = 1;
  1405  00A7  1489               	bsf	9,1	;volatile
  1406                           
  1407                           ;Prueba.c: 101:         PORTEbits.RE2 = 0;
  1408  00A8  1109               	bcf	9,2	;volatile
  1409  00A9                     i1l1191:
  1410                           
  1411                           ;Prueba.c: 102:         PORTD = display(ADC_NIBBLE2);
  1412  00A9  087B               	movf	_ADC_NIBBLE2,w
  1413  00AA  120A  118A  20D4  120A  118A  	fcall	_display
  1414  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  1415  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  1416  00B1  0088               	movwf	8	;volatile
  1417  00B2                     i1l1193:
  1418                           
  1419                           ;Prueba.c: 103:         _delay((unsigned long)((1)*(8000000/4000.0)));
  1420  00B2  3003               	movlw	3
  1421  00B3  00F6               	movwf	??_ISR+1
  1422  00B4  3097               	movlw	151
  1423  00B5  00F5               	movwf	??_ISR
  1424  00B6                     u28_27:
  1425  00B6  0BF5               	decfsz	??_ISR,f
  1426  00B7  28B6               	goto	u28_27
  1427  00B8  0BF6               	decfsz	??_ISR+1,f
  1428  00B9  28B6               	goto	u28_27
  1429  00BA  28BB               	nop2
  1430  00BB                     i1l1195:
  1431                           
  1432                           ;Prueba.c: 104:         PORTEbits.RE1 = 0;
  1433  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1434  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1435  00BD  1089               	bcf	9,1	;volatile
  1436  00BE                     i1l1197:
  1437                           
  1438                           ;Prueba.c: 105:         PORTEbits.RE2 = 1;
  1439  00BE  1509               	bsf	9,2	;volatile
  1440  00BF                     i1l1199:
  1441                           
  1442                           ;Prueba.c: 106:         PORTD = display(ADC_NIBBLE1);
  1443  00BF  087C               	movf	_ADC_NIBBLE1,w
  1444  00C0  120A  118A  20D4  120A  118A  	fcall	_display
  1445  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  1446  00C6  1303               	bcf	3,6	;RP1=0, select bank0
  1447  00C7  0088               	movwf	8	;volatile
  1448                           
  1449                           ;Prueba.c: 108:         TMR0 = 4;
  1450  00C8  3004               	movlw	4
  1451  00C9  0081               	movwf	1	;volatile
  1452  00CA                     i1l1201:
  1453                           
  1454                           ;Prueba.c: 109:         INTCONbits.TMR0IF = 0;
  1455  00CA  110B               	bcf	11,2	;volatile
  1456  00CB                     i1l137:
  1457  00CB  087A               	movf	??_ISR+5,w
  1458  00CC  008A               	movwf	10
  1459  00CD  0879               	movf	??_ISR+4,w
  1460  00CE  0084               	movwf	4
  1461  00CF  0E78               	swapf	??_ISR+3,w
  1462  00D0  0083               	movwf	3
  1463  00D1  0EFE               	swapf	btemp,f
  1464  00D2  0E7E               	swapf	btemp,w
  1465  00D3  0009               	retfie
  1466  00D4                     __end_of_ISR:
  1467                           
  1468                           	psect	intentry
  1469  0004                     __pintentry:	
  1470                           ;incstack = 0
  1471                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1472                           
  1473  0004                     interrupt_function:
  1474  007E                     saved_w	set	btemp
  1475  0004  00FE               	movwf	btemp
  1476  0005  0E03               	swapf	3,w
  1477  0006  00F8               	movwf	??_ISR+3
  1478  0007  0804               	movf	4,w
  1479  0008  00F9               	movwf	??_ISR+4
  1480  0009  080A               	movf	10,w
  1481  000A  00FA               	movwf	??_ISR+5
  1482  000B  120A  118A  2825   	ljmp	_ISR
  1483                           
  1484                           	psect	text4
  1485  00D4                     __ptext4:	
  1486 ;; *************** function _display *****************
  1487 ;; Defined at:
  1488 ;;		line 5 in file "Display.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  ADC_VALOR       1    wreg     unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  ADC_VALOR       1    2[COMMON] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      unsigned char 
  1495 ;; Registers used:
  1496 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1502 ;;      Params:         0       0       0       0       0
  1503 ;;      Locals:         1       0       0       0       0
  1504 ;;      Temps:          2       0       0       0       0
  1505 ;;      Totals:         3       0       0       0       0
  1506 ;;Total ram usage:        3 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_ISR
  1512 ;;		_DisplayADC1
  1513 ;;		_DisplayADC2
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           
  1518                           ;psect for function _display
  1519  00D4                     _display:
  1520                           
  1521                           ;incstack = 0
  1522                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  1523                           ;display@ADC_VALOR stored from wreg
  1524  00D4  00F2               	movwf	display@ADC_VALOR
  1525  00D5                     i1l1029:
  1526                           
  1527                           ;Display.c: 7:     switch(ADC_VALOR){
  1528  00D5  2946               	goto	i1l1067
  1529  00D6                     i1l1031:
  1530                           
  1531                           ;Display.c: 9:             Valor_hex = 0b00111111;
  1532  00D6  303F               	movlw	63
  1533  00D7  00F0               	movwf	??_display
  1534  00D8  0870               	movf	??_display,w
  1535  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1536  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1537  00DB  00AA               	movwf	_Valor_hex
  1538                           
  1539                           ;Display.c: 10:             break;
  1540  00DC  2980               	goto	i1l1069
  1541  00DD                     i1l1033:
  1542                           
  1543                           ;Display.c: 12:             Valor_hex = 0b000000110;
  1544  00DD  3006               	movlw	6
  1545  00DE  00F0               	movwf	??_display
  1546  00DF  0870               	movf	??_display,w
  1547  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1548  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1549  00E2  00AA               	movwf	_Valor_hex
  1550                           
  1551                           ;Display.c: 13:             break;
  1552  00E3  2980               	goto	i1l1069
  1553  00E4                     i1l1035:
  1554                           
  1555                           ;Display.c: 15:             Valor_hex = 0b11011011;
  1556  00E4  30DB               	movlw	219
  1557  00E5  00F0               	movwf	??_display
  1558  00E6  0870               	movf	??_display,w
  1559  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1560  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1561  00E9  00AA               	movwf	_Valor_hex
  1562                           
  1563                           ;Display.c: 16:             break;
  1564  00EA  2980               	goto	i1l1069
  1565  00EB                     i1l1037:
  1566                           
  1567                           ;Display.c: 18:             Valor_hex = 0b01001111;
  1568  00EB  304F               	movlw	79
  1569  00EC  00F0               	movwf	??_display
  1570  00ED  0870               	movf	??_display,w
  1571  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  1572  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  1573  00F0  00AA               	movwf	_Valor_hex
  1574                           
  1575                           ;Display.c: 19:             break;
  1576  00F1  2980               	goto	i1l1069
  1577  00F2                     i1l1039:
  1578                           
  1579                           ;Display.c: 21:             Valor_hex = 0b01100110;
  1580  00F2  3066               	movlw	102
  1581  00F3  00F0               	movwf	??_display
  1582  00F4  0870               	movf	??_display,w
  1583  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1584  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  1585  00F7  00AA               	movwf	_Valor_hex
  1586                           
  1587                           ;Display.c: 22:             break;
  1588  00F8  2980               	goto	i1l1069
  1589  00F9                     i1l1041:
  1590                           
  1591                           ;Display.c: 24:             Valor_hex = 0b01101101;
  1592  00F9  306D               	movlw	109
  1593  00FA  00F0               	movwf	??_display
  1594  00FB  0870               	movf	??_display,w
  1595  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  1596  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  1597  00FE  00AA               	movwf	_Valor_hex
  1598                           
  1599                           ;Display.c: 25:             break;
  1600  00FF  2980               	goto	i1l1069
  1601  0100                     i1l1043:
  1602                           
  1603                           ;Display.c: 27:             Valor_hex = 0b01111101;
  1604  0100  307D               	movlw	125
  1605  0101  00F0               	movwf	??_display
  1606  0102  0870               	movf	??_display,w
  1607  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1608  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1609  0105  00AA               	movwf	_Valor_hex
  1610                           
  1611                           ;Display.c: 28:             break;
  1612  0106  2980               	goto	i1l1069
  1613  0107                     i1l1045:
  1614                           
  1615                           ;Display.c: 30:             Valor_hex = 0b00000111;
  1616  0107  3007               	movlw	7
  1617  0108  00F0               	movwf	??_display
  1618  0109  0870               	movf	??_display,w
  1619  010A  1283               	bcf	3,5	;RP0=0, select bank0
  1620  010B  1303               	bcf	3,6	;RP1=0, select bank0
  1621  010C  00AA               	movwf	_Valor_hex
  1622                           
  1623                           ;Display.c: 31:             break;
  1624  010D  2980               	goto	i1l1069
  1625  010E                     i1l1047:
  1626                           
  1627                           ;Display.c: 33:             Valor_hex = 0b01111111;
  1628  010E  307F               	movlw	127
  1629  010F  00F0               	movwf	??_display
  1630  0110  0870               	movf	??_display,w
  1631  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0112  1303               	bcf	3,6	;RP1=0, select bank0
  1633  0113  00AA               	movwf	_Valor_hex
  1634                           
  1635                           ;Display.c: 34:             break;
  1636  0114  2980               	goto	i1l1069
  1637  0115                     i1l1049:
  1638                           
  1639                           ;Display.c: 36:             Valor_hex = 0b01101111;
  1640  0115  306F               	movlw	111
  1641  0116  00F0               	movwf	??_display
  1642  0117  0870               	movf	??_display,w
  1643  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1644  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1645  011A  00AA               	movwf	_Valor_hex
  1646                           
  1647                           ;Display.c: 37:             break;
  1648  011B  2980               	goto	i1l1069
  1649  011C                     i1l1051:
  1650                           
  1651                           ;Display.c: 39:             Valor_hex = 0b01110111;
  1652  011C  3077               	movlw	119
  1653  011D  00F0               	movwf	??_display
  1654  011E  0870               	movf	??_display,w
  1655  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1656  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1657  0121  00AA               	movwf	_Valor_hex
  1658                           
  1659                           ;Display.c: 40:             break;
  1660  0122  2980               	goto	i1l1069
  1661  0123                     i1l1053:
  1662                           
  1663                           ;Display.c: 42:             Valor_hex = 0b01111100;
  1664  0123  307C               	movlw	124
  1665  0124  00F0               	movwf	??_display
  1666  0125  0870               	movf	??_display,w
  1667  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1668  0127  1303               	bcf	3,6	;RP1=0, select bank0
  1669  0128  00AA               	movwf	_Valor_hex
  1670                           
  1671                           ;Display.c: 43:             break;
  1672  0129  2980               	goto	i1l1069
  1673  012A                     i1l1055:
  1674                           
  1675                           ;Display.c: 45:             Valor_hex = 0b00111001;
  1676  012A  3039               	movlw	57
  1677  012B  00F0               	movwf	??_display
  1678  012C  0870               	movf	??_display,w
  1679  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1680  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1681  012F  00AA               	movwf	_Valor_hex
  1682                           
  1683                           ;Display.c: 46:             break;
  1684  0130  2980               	goto	i1l1069
  1685  0131                     i1l1057:
  1686                           
  1687                           ;Display.c: 48:             Valor_hex = 0b01011110;
  1688  0131  305E               	movlw	94
  1689  0132  00F0               	movwf	??_display
  1690  0133  0870               	movf	??_display,w
  1691  0134  1283               	bcf	3,5	;RP0=0, select bank0
  1692  0135  1303               	bcf	3,6	;RP1=0, select bank0
  1693  0136  00AA               	movwf	_Valor_hex
  1694                           
  1695                           ;Display.c: 49:             break;
  1696  0137  2980               	goto	i1l1069
  1697  0138                     i1l1059:
  1698                           
  1699                           ;Display.c: 51:             Valor_hex = 0b01111001;
  1700  0138  3079               	movlw	121
  1701  0139  00F0               	movwf	??_display
  1702  013A  0870               	movf	??_display,w
  1703  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1704  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1705  013D  00AA               	movwf	_Valor_hex
  1706                           
  1707                           ;Display.c: 52:             break;
  1708  013E  2980               	goto	i1l1069
  1709  013F                     i1l1061:
  1710                           
  1711                           ;Display.c: 54:             Valor_hex = 0b01110001;
  1712  013F  3071               	movlw	113
  1713  0140  00F0               	movwf	??_display
  1714  0141  0870               	movf	??_display,w
  1715  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1716  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1717  0144  00AA               	movwf	_Valor_hex
  1718                           
  1719                           ;Display.c: 55:             break;
  1720  0145  2980               	goto	i1l1069
  1721  0146                     i1l1067:
  1722  0146  0872               	movf	display@ADC_VALOR,w
  1723  0147  00F0               	movwf	??_display
  1724  0148  01F1               	clrf	??_display+1
  1725                           
  1726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1727                           ; Switch size 1, requested type "simple"
  1728                           ; Number of cases is 1, Range of values is 0 to 0
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; simple_byte            4     3 (average)
  1732                           ; direct_byte           11     8 (fixed)
  1733                           ; jumptable            260     6 (fixed)
  1734                           ;	Chosen strategy is simple_byte
  1735  0149  0871               	movf	??_display+1,w
  1736  014A  3A00               	xorlw	0	; case 0
  1737  014B  1903               	skipnz
  1738  014C  294E               	goto	i1l1271
  1739  014D  28D6               	goto	i1l1031
  1740  014E                     i1l1271:
  1741                           
  1742                           ; Switch size 1, requested type "simple"
  1743                           ; Number of cases is 16, Range of values is 0 to 15
  1744                           ; switch strategies available:
  1745                           ; Name         Instructions Cycles
  1746                           ; simple_byte           49    25 (average)
  1747                           ; direct_byte           56     8 (fixed)
  1748                           ; jumptable            260     6 (fixed)
  1749                           ;	Chosen strategy is simple_byte
  1750  014E  0870               	movf	??_display,w
  1751  014F  3A00               	xorlw	0	; case 0
  1752  0150  1903               	skipnz
  1753  0151  28D6               	goto	i1l1031
  1754  0152  3A01               	xorlw	1	; case 1
  1755  0153  1903               	skipnz
  1756  0154  28DD               	goto	i1l1033
  1757  0155  3A03               	xorlw	3	; case 2
  1758  0156  1903               	skipnz
  1759  0157  28E4               	goto	i1l1035
  1760  0158  3A01               	xorlw	1	; case 3
  1761  0159  1903               	skipnz
  1762  015A  28EB               	goto	i1l1037
  1763  015B  3A07               	xorlw	7	; case 4
  1764  015C  1903               	skipnz
  1765  015D  28F2               	goto	i1l1039
  1766  015E  3A01               	xorlw	1	; case 5
  1767  015F  1903               	skipnz
  1768  0160  28F9               	goto	i1l1041
  1769  0161  3A03               	xorlw	3	; case 6
  1770  0162  1903               	skipnz
  1771  0163  2900               	goto	i1l1043
  1772  0164  3A01               	xorlw	1	; case 7
  1773  0165  1903               	skipnz
  1774  0166  2907               	goto	i1l1045
  1775  0167  3A0F               	xorlw	15	; case 8
  1776  0168  1903               	skipnz
  1777  0169  290E               	goto	i1l1047
  1778  016A  3A01               	xorlw	1	; case 9
  1779  016B  1903               	skipnz
  1780  016C  2915               	goto	i1l1049
  1781  016D  3A03               	xorlw	3	; case 10
  1782  016E  1903               	skipnz
  1783  016F  291C               	goto	i1l1051
  1784  0170  3A01               	xorlw	1	; case 11
  1785  0171  1903               	skipnz
  1786  0172  2923               	goto	i1l1053
  1787  0173  3A07               	xorlw	7	; case 12
  1788  0174  1903               	skipnz
  1789  0175  292A               	goto	i1l1055
  1790  0176  3A01               	xorlw	1	; case 13
  1791  0177  1903               	skipnz
  1792  0178  2931               	goto	i1l1057
  1793  0179  3A03               	xorlw	3	; case 14
  1794  017A  1903               	skipnz
  1795  017B  2938               	goto	i1l1059
  1796  017C  3A01               	xorlw	1	; case 15
  1797  017D  1903               	skipnz
  1798  017E  293F               	goto	i1l1061
  1799  017F  28D6               	goto	i1l1031
  1800  0180                     i1l1069:
  1801                           
  1802                           ;Display.c: 60:    return Valor_hex;
  1803  0180  082A               	movf	_Valor_hex,w
  1804  0181                     i1l40:
  1805  0181  0008               	return
  1806  0182                     __end_of_display:
  1807                           
  1808                           	psect	text5
  1809  023E                     __ptext5:	
  1810 ;; *************** function _SWAP_ADC *****************
  1811 ;; Defined at:
  1812 ;;		line 14 in file "Config_ADC.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  VAL_ADC         1    wreg     unsigned char 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  VAL_ADC         1    4[COMMON] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      unsigned char 
  1819 ;; Registers used:
  1820 ;;		wreg, status,2, status,0
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         0       0       0       0       0
  1827 ;;      Locals:         1       0       0       0       0
  1828 ;;      Temps:          4       0       0       0       0
  1829 ;;      Totals:         5       0       0       0       0
  1830 ;;Total ram usage:        5 bytes
  1831 ;; Hardware stack levels used:    1
  1832 ;; This function calls:
  1833 ;;		Nothing
  1834 ;; This function is called by:
  1835 ;;		_ISR
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           
  1840                           ;psect for function _SWAP_ADC
  1841  023E                     _SWAP_ADC:
  1842                           
  1843                           ;incstack = 0
  1844                           ; Regs used in _SWAP_ADC: [wreg+status,2+status,0]
  1845                           ;SWAP_ADC@VAL_ADC stored from wreg
  1846  023E  00F4               	movwf	SWAP_ADC@VAL_ADC
  1847  023F                     i1l1081:
  1848                           
  1849                           ;Config_ADC.c: 15:     VAL_SWAP = (((VAL_ADC & 0x0F)<<4) | ((VAL_ADC & 0xF0)>>4));
  1850  023F  0874               	movf	SWAP_ADC@VAL_ADC,w
  1851  0240  00F0               	movwf	??_SWAP_ADC
  1852  0241  3004               	movlw	4
  1853  0242                     u14_25:
  1854  0242  1003               	clrc
  1855  0243  0CF0               	rrf	??_SWAP_ADC,f
  1856  0244  3EFF               	addlw	-1
  1857  0245  1D03               	skipz
  1858  0246  2A42               	goto	u14_25
  1859  0247  300F               	movlw	15
  1860  0248  0570               	andwf	??_SWAP_ADC,w
  1861  0249  00F1               	movwf	??_SWAP_ADC+1
  1862  024A  0874               	movf	SWAP_ADC@VAL_ADC,w
  1863  024B  390F               	andlw	15
  1864  024C  00F2               	movwf	??_SWAP_ADC+2
  1865  024D  3003               	movlw	3
  1866  024E                     u15_25:
  1867  024E  1003               	clrc
  1868  024F  0DF2               	rlf	??_SWAP_ADC+2,f
  1869  0250  3EFF               	addlw	-1
  1870  0251  1D03               	skipz
  1871  0252  2A4E               	goto	u15_25
  1872  0253  1003               	clrc
  1873  0254  0D72               	rlf	??_SWAP_ADC+2,w
  1874  0255  0471               	iorwf	??_SWAP_ADC+1,w
  1875  0256  00F3               	movwf	??_SWAP_ADC+3
  1876  0257  0873               	movf	??_SWAP_ADC+3,w
  1877  0258  1283               	bcf	3,5	;RP0=0, select bank0
  1878  0259  1303               	bcf	3,6	;RP1=0, select bank0
  1879  025A  00A4               	movwf	_VAL_SWAP
  1880  025B                     i1l1083:
  1881                           
  1882                           ;Config_ADC.c: 16:     return VAL_SWAP;
  1883  025B  0824               	movf	_VAL_SWAP,w
  1884  025C                     i1l177:
  1885  025C  0008               	return
  1886  025D                     __end_of_SWAP_ADC:
  1887                           
  1888                           	psect	text6
  1889  025D                     __ptext6:	
  1890 ;; *************** function _NIBBLE2_ADC *****************
  1891 ;; Defined at:
  1892 ;;		line 24 in file "Config_ADC.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  VAL_SWAP        1    wreg     unsigned char 
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  VAL_SWAP        1    1[COMMON] unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  1    wreg      unsigned char 
  1899 ;; Registers used:
  1900 ;;		wreg, status,2
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1906 ;;      Params:         0       0       0       0       0
  1907 ;;      Locals:         1       0       0       0       0
  1908 ;;      Temps:          1       0       0       0       0
  1909 ;;      Totals:         2       0       0       0       0
  1910 ;;Total ram usage:        2 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; This function calls:
  1913 ;;		Nothing
  1914 ;; This function is called by:
  1915 ;;		_ISR
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           
  1920                           ;psect for function _NIBBLE2_ADC
  1921  025D                     _NIBBLE2_ADC:
  1922                           
  1923                           ;incstack = 0
  1924                           ; Regs used in _NIBBLE2_ADC: [wreg+status,2]
  1925                           ;NIBBLE2_ADC@VAL_SWAP stored from wreg
  1926  025D  00F1               	movwf	NIBBLE2_ADC@VAL_SWAP
  1927  025E                     i1l1093:
  1928                           
  1929                           ;Config_ADC.c: 25:     VAL_NIBBLE2 = VAL_SWAP & 15;
  1930  025E  0871               	movf	NIBBLE2_ADC@VAL_SWAP,w
  1931  025F  390F               	andlw	15
  1932  0260  00F0               	movwf	??_NIBBLE2_ADC
  1933  0261  0870               	movf	??_NIBBLE2_ADC,w
  1934  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1935  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1936  0264  00A2               	movwf	_VAL_NIBBLE2
  1937  0265                     i1l1095:
  1938                           
  1939                           ;Config_ADC.c: 26:     return VAL_NIBBLE2;
  1940  0265  0822               	movf	_VAL_NIBBLE2,w
  1941  0266                     i1l183:
  1942  0266  0008               	return
  1943  0267                     __end_of_NIBBLE2_ADC:
  1944                           
  1945                           	psect	text7
  1946  0267                     __ptext7:	
  1947 ;; *************** function _NIBBLE1_ADC *****************
  1948 ;; Defined at:
  1949 ;;		line 19 in file "Config_ADC.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;  VAL_ADC         1    wreg     unsigned char 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  VAL_ADC         1    1[COMMON] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      unsigned char 
  1956 ;; Registers used:
  1957 ;;		wreg, status,2
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1963 ;;      Params:         0       0       0       0       0
  1964 ;;      Locals:         1       0       0       0       0
  1965 ;;      Temps:          1       0       0       0       0
  1966 ;;      Totals:         2       0       0       0       0
  1967 ;;Total ram usage:        2 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; This function calls:
  1970 ;;		Nothing
  1971 ;; This function is called by:
  1972 ;;		_ISR
  1973 ;; This function uses a non-reentrant model
  1974 ;;
  1975                           
  1976                           
  1977                           ;psect for function _NIBBLE1_ADC
  1978  0267                     _NIBBLE1_ADC:
  1979                           
  1980                           ;incstack = 0
  1981                           ; Regs used in _NIBBLE1_ADC: [wreg+status,2]
  1982                           ;NIBBLE1_ADC@VAL_ADC stored from wreg
  1983  0267  00F1               	movwf	NIBBLE1_ADC@VAL_ADC
  1984  0268                     i1l1087:
  1985                           
  1986                           ;Config_ADC.c: 20:     VAL_NIBBLE1 = VAL_ADC & 15;
  1987  0268  0871               	movf	NIBBLE1_ADC@VAL_ADC,w
  1988  0269  390F               	andlw	15
  1989  026A  00F0               	movwf	??_NIBBLE1_ADC
  1990  026B  0870               	movf	??_NIBBLE1_ADC,w
  1991  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1992  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1993  026E  00A3               	movwf	_VAL_NIBBLE1
  1994  026F                     i1l1089:
  1995                           
  1996                           ;Config_ADC.c: 21:     return VAL_NIBBLE1;
  1997  026F  0823               	movf	_VAL_NIBBLE1,w
  1998  0270                     i1l180:
  1999  0270  0008               	return
  2000  0271                     __end_of_NIBBLE1_ADC:
  2001                           
  2002                           	psect	text8
  2003  0271                     __ptext8:	
  2004 ;; *************** function _ADC *****************
  2005 ;; Defined at:
  2006 ;;		line 9 in file "Config_ADC.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  ADRESL_         1    wreg     unsigned char 
  2009 ;;  ADRESH_         1    0[COMMON] unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  ADRESL_         1    0[COMMON] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      unsigned char 
  2014 ;; Registers used:
  2015 ;;		wreg
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2021 ;;      Params:         1       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0
  2023 ;;      Temps:          1       0       0       0       0
  2024 ;;      Totals:         2       0       0       0       0
  2025 ;;Total ram usage:        2 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; This function calls:
  2028 ;;		Nothing
  2029 ;; This function is called by:
  2030 ;;		_ISR
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           
  2035                           ;psect for function _ADC
  2036  0271                     _ADC:
  2037  0271                     i1l1077:	
  2038                           ;incstack = 0
  2039                           ; Regs used in _ADC: [wreg]
  2040                           
  2041                           
  2042                           ;Config_ADC.c: 10:     VAL = (ADRESL << 8) | ADRESH;
  2043  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0273  081E               	movf	30,w	;volatile
  2046  0274  00F1               	movwf	??_ADC
  2047  0275  0871               	movf	??_ADC,w
  2048  0276  00A5               	movwf	_VAL
  2049                           
  2050                           ;Config_ADC.c: 11:     return VAL;
  2051  0277  0825               	movf	_VAL,w
  2052  0278                     i1l174:
  2053  0278  0008               	return
  2054  0279                     __end_of_ADC:
  2055  007E                     btemp	set	126	;btemp
  2056  007E                     wtemp0	set	126
  2057                           
  2058                           	psect	config
  2059                           
  2060                           ;Config register CONFIG1 @ 0x2007
  2061                           ;	Oscillator Selection bits
  2062                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  2063                           ;	Watchdog Timer Enable bit
  2064                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2065                           ;	Power-up Timer Enable bit
  2066                           ;	PWRTE = OFF, PWRT disabled
  2067                           ;	RE3/MCLR pin function select bit
  2068                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2069                           ;	Code Protection bit
  2070                           ;	CP = OFF, Program memory code protection is disabled
  2071                           ;	Data Code Protection bit
  2072                           ;	CPD = OFF, Data memory code protection is disabled
  2073                           ;	Brown Out Reset Selection bits
  2074                           ;	BOREN = OFF, BOR disabled
  2075                           ;	Internal External Switchover bit
  2076                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2077                           ;	Fail-Safe Clock Monitor Enabled bit
  2078                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2079                           ;	Low Voltage Programming Enable bit
  2080                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2081                           ;	In-Circuit Debugger Mode bit
  2082                           ;	DEBUG = 0x1, unprogrammed default
  2083  2007                     	org	8199
  2084  2007  20D1               	dw	8401
  2085                           
  2086                           ;Config register CONFIG2 @ 0x2008
  2087                           ;	Brown-out Reset Selection bit
  2088                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2089                           ;	Flash Program Memory Self Write Enable bits
  2090                           ;	WRT = OFF, Write protection off
  2091  2008                     	org	8200
  2092  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      4      15
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_SWAP_ADC

Critical Paths under _main in BANK0

    _setup->_initOsc

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      22
                                              3 BANK0      1     1      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      22
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0     186
                                              5 COMMON     6     6      0
                                _ADC
                        _NIBBLE1_ADC
                        _NIBBLE2_ADC
                           _SWAP_ADC
                            _display
 ---------------------------------------------------------------------------------
 (4) _display                                              3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (4) _SWAP_ADC                                             5     5      0      44
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (4) _NIBBLE2_ADC                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _NIBBLE1_ADC                                          2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC                                                  3     2      1      76
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _initOsc

 _ISR (ROOT)
   _ADC
   _NIBBLE1_ADC
   _NIBBLE2_ADC
   _SWAP_ADC
   _display

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       F       5       18.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1D      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Feb 05 20:38:49 2021

                      l6 0186                        l7 01DE                        l8 018C  
                      l9 0192                       l10 0198                       l11 019E  
                     l12 01A4                       l13 01AA                       l14 01B0  
                     l15 01B6                       l16 01DF                      l150 021C  
                    l143 0237                      _ADC 0271                      u260 0233  
                    u261 0232                      u265 022F                      _ISR 0025  
                    _VAL 0025                      fsr0 0004                     ?_ADC 0070  
                   ?_ISR 0070                     l1021 01BC                     l1101 01E6  
                   l1111 01F6                     l1103 01EA                     l1017 0185  
                   l1121 0205                     l1113 01F9                     l1105 01EB  
                   l1131 0213                     l1123 0208                     l1115 01FC  
                   l1107 01EF                     l1211 0233                     l1203 021D  
                   l1141 021B                     l1133 0214                     l1125 020B  
                   l1117 01FF                     l1109 01F2                     l1205 0222  
                   l1135 0215                     l1127 020D                     l1119 0202  
                   l1207 0223                     l1137 0216                     l1129 0211  
                   l1209 0226                     l1139 0219                     l1099 01E0  
                   l1269 01C4                     i1l40 0181                     _TMR0 0001  
                   _main 021D                     btemp 007E                     start 000E  
                  ??_ADC 0071                    ??_ISR 0075           _cont_multiplex 0028  
                  ?_main 0070                    _ANSEL 0188                    i1l132 00A3  
                  i1l128 0031                    i1l137 00CB                    i1l129 0037  
                  i1l180 0270                    i1l174 0278                    i1l183 0266  
                  i1l177 025C                    u20_20 0040                    u20_21 003F  
                  u21_20 004B                    u21_21 004A                    u22_20 0050  
                  u22_21 004F                    u14_25 0242                    u23_20 005C  
                  u23_21 005B                    u15_25 024E                    u24_20 00A3  
                  u16_20 0029                    u24_21 00A2                    u16_21 0028  
                  u25_20 00A7                    u17_20 002F                    u25_21 00A6  
                  u17_21 002E                    u18_20 0035                    u18_21 0034  
                  u19_20 003B                    u19_21 003A                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _PORTE 0009                    u27_27 0061                    u28_27 00B6  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TRISE 0089          __end_of_display 0182  
        __end_of_initOsc 01E0         __end_of_SWAP_ADC 025D                    _setup 01E0  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0011             __end_of_main 023E                   ??_main 002E  
     NIBBLE1_ADC@VAL_ADC 0071                   _ADCON0 001F                   _ADRESH 001E  
                 _ADRESL 009E              initOsc@IRCF 002D                   ?_setup 0070  
                 _ANSELH 0189                   i1l1031 00D6                   i1l1041 00F9  
                 i1l1033 00DD                   i1l1201 00CA                   i1l1051 011C  
                 i1l1043 0100                   i1l1035 00E4                   i1l1061 013F  
                 i1l1053 0123                   i1l1045 0107                   i1l1037 00EB  
                 i1l1029 00D5                   i1l1055 012A                   i1l1047 010E  
                 i1l1039 00F2                   i1l1151 003B                   i1l1143 0025  
                 i1l1081 023F                   i1l1057 0131                   i1l1049 0115  
                 i1l1161 004B                   i1l1153 0040                   i1l1145 0029  
                 i1l1083 025B                   i1l1059 0138                   i1l1067 0146  
                 i1l1163 0050                   i1l1155 0044                   i1l1147 002F  
                 i1l1171 0056                   i1l1077 0271                   i1l1093 025E  
                 i1l1069 0180                   i1l1181 007E                   i1l1173 005C  
                 i1l1165 0052                   i1l1157 0046                   i1l1149 0035  
                 i1l1087 0268                   i1l1095 0265                   i1l1271 014E  
                 i1l1191 00A9                   i1l1183 0089                   i1l1175 005D  
                 i1l1167 0054                   i1l1159 0047                   i1l1089 026F  
                 i1l1193 00B2                   i1l1185 0092                   i1l1177 0066  
                 i1l1169 0055                   i1l1195 00BB                   i1l1179 006A  
                 i1l1187 009D                   i1l1197 00BE                   i1l1189 00A7  
                 i1l1199 00BF                   _INTCON 000B     __size_of_NIBBLE1_ADC 000A  
   __size_of_NIBBLE2_ADC 000A          SWAP_ADC@VAL_ADC 0074                ??_display 0070  
              ??_initOsc 002B                   saved_w 007E               ADC@ADRESH_ 0070  
             ADC@ADRESL_ 0070  __end_of__initialization 0021           __pcstackCOMMON 0070  
          __end_of_setup 021D                ?_SWAP_ADC 0070         display@ADC_VALOR 0072  
                ??_setup 002E               __pbssBANK0 0020               __pmaintext 021D  
             __pintentry 0004               ??_SWAP_ADC 0070                _ADC_VALOR 0020  
                __ptext1 01E0                  __ptext2 0182                  __ptext3 0025  
                __ptext4 00D4                  __ptext5 023E                  __ptext6 025D  
                __ptext7 0267                  __ptext8 0271                  _display 00D4  
           __size_of_ADC 0008             __size_of_ISR 00AF                  _initOsc 0182  
   end_of_initialization 0021      NIBBLE2_ADC@VAL_SWAP 0071                _PORTBbits 0006  
              _PORTEbits 0009            ??_NIBBLE1_ADC 0070            ??_NIBBLE2_ADC 0070  
            _ADC_NIBBLE1 007C              _ADC_NIBBLE2 007B        __size_of_SWAP_ADC 001F  
    start_initialization 0011              __end_of_ADC 0279              __end_of_ISR 00D4  
              _Valor_hex 002A      __end_of_NIBBLE1_ADC 0271      __end_of_NIBBLE2_ADC 0267  
            __pbssCOMMON 007B                ___latbits 0002            __pcstackBANK0 002B  
            _debouncing1 0027              _debouncing2 0026                 ?_display 0070  
               ?_initOsc 0070                 _ADC_SWAP 0029           __size_of_setup 003D  
      interrupt_function 0004                 _IOCBbits 0096              _NIBBLE1_ADC 0267  
               _PIE1bits 008C              _NIBBLE2_ADC 025D                 _PIR1bits 000C  
               _VAL_SWAP 0024                 _SWAP_ADC 023E               _ADCON0bits 001F  
       __size_of_display 00AE         __size_of_initOsc 005E                 _contador 007D  
          __size_of_main 0021               _INTCONbits 000B              _VAL_NIBBLE1 0023  
            _VAL_NIBBLE2 0022                 intlevel1 0000               _OSCCONbits 008F  
             _OPTION_REG 0081             ?_NIBBLE1_ADC 0070             ?_NIBBLE2_ADC 0070  
