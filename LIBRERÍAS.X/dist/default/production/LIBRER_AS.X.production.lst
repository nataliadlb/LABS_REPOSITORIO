

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Feb 01 13:21:21 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  008F                     	;# 
   252  0090                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0094                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  0105                     	;# 
   271  0107                     	;# 
   272  0108                     	;# 
   273  0109                     	;# 
   274  010C                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  0185                     	;# 
   280  0187                     	;# 
   281  0188                     	;# 
   282  0189                     	;# 
   283  018C                     	;# 
   284  018D                     	;# 
   285  0000                     	;# 
   286  0001                     	;# 
   287  0002                     	;# 
   288  0003                     	;# 
   289  0004                     	;# 
   290  0005                     	;# 
   291  0006                     	;# 
   292  0007                     	;# 
   293  0008                     	;# 
   294  0009                     	;# 
   295  000A                     	;# 
   296  000B                     	;# 
   297  000C                     	;# 
   298  000D                     	;# 
   299  000E                     	;# 
   300  000E                     	;# 
   301  000F                     	;# 
   302  0010                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0015                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001B                     	;# 
   316  001C                     	;# 
   317  001D                     	;# 
   318  001E                     	;# 
   319  001F                     	;# 
   320  0081                     	;# 
   321  0085                     	;# 
   322  0086                     	;# 
   323  0087                     	;# 
   324  0088                     	;# 
   325  0089                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  008F                     	;# 
   330  0090                     	;# 
   331  0091                     	;# 
   332  0092                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0094                     	;# 
   337  0095                     	;# 
   338  0096                     	;# 
   339  0097                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009A                     	;# 
   343  009B                     	;# 
   344  009C                     	;# 
   345  009D                     	;# 
   346  009E                     	;# 
   347  009F                     	;# 
   348  0105                     	;# 
   349  0107                     	;# 
   350  0108                     	;# 
   351  0109                     	;# 
   352  010C                     	;# 
   353  010C                     	;# 
   354  010D                     	;# 
   355  010E                     	;# 
   356  010F                     	;# 
   357  0185                     	;# 
   358  0187                     	;# 
   359  0188                     	;# 
   360  0189                     	;# 
   361  018C                     	;# 
   362  018D                     	;# 
   363  001F                     _ADCON0	set	31
   364  0009                     _PORTE	set	9
   365  0007                     _PORTC	set	7
   366  0006                     _PORTB	set	6
   367  0005                     _PORTA	set	5
   368  0008                     _PORTD	set	8
   369  0009                     _PORTEbits	set	9
   370  001F                     _ADCON0bits	set	31
   371  001E                     _ADRESH	set	30
   372  000C                     _PIR1bits	set	12
   373  0006                     _PORTBbits	set	6
   374  000B                     _INTCONbits	set	11
   375  008C                     _PIE1bits	set	140
   376  0096                     _IOCBbits	set	150
   377  0089                     _TRISE	set	137
   378  0088                     _TRISD	set	136
   379  0087                     _TRISC	set	135
   380  0086                     _TRISB	set	134
   381  0085                     _TRISA	set	133
   382  009E                     _ADRESL	set	158
   383  008F                     _OSCCONbits	set	143
   384  0189                     _ANSELH	set	393
   385  0188                     _ANSEL	set	392
   386                           
   387                           	psect	cinit
   388  000F                     start_initialization:	
   389                           ; #config settings
   390                           
   391  000F                     __initialization:
   392                           
   393                           ; Clear objects allocated to COMMON
   394  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   395  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   396  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   397  0012  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   398  0013                     end_of_initialization:	
   399                           ;End of C runtime variable initialization code
   400                           
   401  0013                     __end_of__initialization:
   402  0013  0183               	clrf	3
   403  0014  120A  118A  2980   	ljmp	_main	;jump to C main() function
   404                           
   405                           	psect	bssCOMMON
   406  0078                     __pbssCOMMON:
   407  0078                     _ADC_VALOR:
   408  0078                     	ds	2
   409  007A                     _contador:
   410  007A                     	ds	1
   411  007B                     _Valor_hex:
   412  007B                     	ds	1
   413                           
   414                           	psect	cstackCOMMON
   415  0070                     __pcstackCOMMON:
   416  0070                     ?_setup:
   417  0070                     ?_ContadorLEDS:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ?_initOsc:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_display:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_ISR:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ??_ISR:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_main:	
   433                           ; 1 bytes @ 0x0
   434                           
   435                           
   436                           ; 1 bytes @ 0x0
   437  0070                     	ds	4
   438  0074                     ??_ContadorLEDS:
   439  0074                     ??_initOsc:	
   440                           ; 1 bytes @ 0x4
   441                           
   442  0074                     ??_display:	
   443                           ; 1 bytes @ 0x4
   444                           
   445                           
   446                           ; 1 bytes @ 0x4
   447  0074                     	ds	2
   448  0076                     initOsc@IRCF:
   449  0076                     display@ADC_VALOR:	
   450                           ; 1 bytes @ 0x6
   451                           
   452                           
   453                           ; 1 bytes @ 0x6
   454  0076                     	ds	1
   455  0077                     ??_setup:
   456  0077                     ??_main:	
   457                           ; 1 bytes @ 0x7
   458                           
   459                           
   460                           ; 1 bytes @ 0x7
   461  0077                     	ds	1
   462                           
   463                           	psect	maintext
   464  0180                     __pmaintext:	
   465 ;;
   466 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   467 ;;
   468 ;; *************** function _main *****************
   469 ;; Defined at:
   470 ;;		line 90 in file "Prueba.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : B00/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   484 ;;      Params:         0       0       0       0       0
   485 ;;      Locals:         0       0       0       0       0
   486 ;;      Temps:          1       0       0       0       0
   487 ;;      Totals:         1       0       0       0       0
   488 ;;Total ram usage:        1 bytes
   489 ;; Hardware stack levels required when called:    3
   490 ;; This function calls:
   491 ;;		_ContadorLEDS
   492 ;;		_display
   493 ;;		_setup
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _main
   501  0180                     _main:
   502  0180                     l854:	
   503                           ;incstack = 0
   504                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   505                           
   506                           
   507                           ;Prueba.c: 91:     contador = 0;
   508  0180  01FA               	clrf	_contador
   509  0181                     l856:
   510                           
   511                           ;Prueba.c: 92:     setup();
   512  0181  120A  118A  2145  120A  118A  	fcall	_setup
   513  0186                     l858:
   514                           
   515                           ;Prueba.c: 97:         ContadorLEDS();
   516  0186  120A  118A  21AF  120A  118A  	fcall	_ContadorLEDS
   517  018B                     l860:
   518                           
   519                           ;Prueba.c: 98:         PORTEbits.RE1 = 1;
   520  018B  1283               	bcf	3,5	;RP0=0, select bank0
   521  018C  1303               	bcf	3,6	;RP1=0, select bank0
   522  018D  1489               	bsf	9,1	;volatile
   523  018E                     l862:
   524                           
   525                           ;Prueba.c: 99:         PORTD = display(0b00000000);
   526  018E  3000               	movlw	0
   527  018F  120A  118A  2017  120A  118A  	fcall	_display
   528  0194  1283               	bcf	3,5	;RP0=0, select bank0
   529  0195  1303               	bcf	3,6	;RP1=0, select bank0
   530  0196  0088               	movwf	8	;volatile
   531  0197                     l864:
   532                           
   533                           ;Prueba.c: 101:         if (ADC_VALOR >= contador){
   534  0197  0879               	movf	_ADC_VALOR+1,w
   535  0198  3A80               	xorlw	128
   536  0199  00F7               	movwf	??_main
   537  019A  3080               	movlw	128
   538  019B  0277               	subwf	??_main,w
   539  019C  1D03               	skipz
   540  019D  29A0               	goto	u75
   541  019E  087A               	movf	_contador,w
   542  019F  0278               	subwf	_ADC_VALOR,w
   543  01A0                     u75:
   544  01A0  1C03               	skipc
   545  01A1  29A3               	goto	u71
   546  01A2  29A4               	goto	u70
   547  01A3                     u71:
   548  01A3  29A8               	goto	l119
   549  01A4                     u70:
   550  01A4                     l866:
   551                           
   552                           ;Prueba.c: 102:             PORTEbits.RE0 = 1;
   553  01A4  1283               	bcf	3,5	;RP0=0, select bank0
   554  01A5  1303               	bcf	3,6	;RP1=0, select bank0
   555  01A6  1409               	bsf	9,0	;volatile
   556                           
   557                           ;Prueba.c: 103:         }
   558  01A7  2986               	goto	l858
   559  01A8                     l119:	
   560                           ;Prueba.c: 104:         else {
   561                           
   562                           
   563                           ;Prueba.c: 105:             PORTEbits.RE0 = 0;
   564  01A8  1283               	bcf	3,5	;RP0=0, select bank0
   565  01A9  1303               	bcf	3,6	;RP1=0, select bank0
   566  01AA  1009               	bcf	9,0	;volatile
   567  01AB  2986               	goto	l858
   568  01AC  120A  118A  280C   	ljmp	start
   569  01AF                     __end_of_main:
   570                           
   571                           	psect	text1
   572  0145                     __ptext1:	
   573 ;; *************** function _setup *****************
   574 ;; Defined at:
   575 ;;		line 115 in file "Prueba.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;		None
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   589 ;;      Params:         0       0       0       0       0
   590 ;;      Locals:         0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0
   592 ;;      Totals:         0       0       0       0       0
   593 ;;Total ram usage:        0 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    2
   596 ;; This function calls:
   597 ;;		_initOsc
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           
   604                           ;psect for function _setup
   605  0145                     _setup:
   606  0145                     l782:	
   607                           ;incstack = 0
   608                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   609                           
   610                           
   611                           ;Prueba.c: 116:     initOsc(0b00000110);
   612  0145  3006               	movlw	6
   613  0146  120A  118A  20AA  120A  118A  	fcall	_initOsc
   614  014B                     l784:
   615                           
   616                           ;Prueba.c: 117:     ANSEL = 0b00000001;
   617  014B  3001               	movlw	1
   618  014C  1683               	bsf	3,5	;RP0=1, select bank3
   619  014D  1703               	bsf	3,6	;RP1=1, select bank3
   620  014E  0088               	movwf	8	;volatile
   621  014F                     l786:
   622                           
   623                           ;Prueba.c: 118:     ANSELH = 0;
   624  014F  0189               	clrf	9	;volatile
   625  0150                     l788:
   626                           
   627                           ;Prueba.c: 119:     TRISA = 0b00000001;
   628  0150  3001               	movlw	1
   629  0151  1683               	bsf	3,5	;RP0=1, select bank1
   630  0152  1303               	bcf	3,6	;RP1=0, select bank1
   631  0153  0085               	movwf	5	;volatile
   632  0154                     l790:
   633                           
   634                           ;Prueba.c: 120:     PORTA = 0;
   635  0154  1283               	bcf	3,5	;RP0=0, select bank0
   636  0155  1303               	bcf	3,6	;RP1=0, select bank0
   637  0156  0185               	clrf	5	;volatile
   638  0157                     l792:
   639                           
   640                           ;Prueba.c: 121:     TRISB = 0b00000011;
   641  0157  3003               	movlw	3
   642  0158  1683               	bsf	3,5	;RP0=1, select bank1
   643  0159  1303               	bcf	3,6	;RP1=0, select bank1
   644  015A  0086               	movwf	6	;volatile
   645  015B                     l794:
   646                           
   647                           ;Prueba.c: 122:     PORTB = 0;
   648  015B  1283               	bcf	3,5	;RP0=0, select bank0
   649  015C  1303               	bcf	3,6	;RP1=0, select bank0
   650  015D  0186               	clrf	6	;volatile
   651  015E                     l796:
   652                           
   653                           ;Prueba.c: 123:     TRISC = 0;
   654  015E  1683               	bsf	3,5	;RP0=1, select bank1
   655  015F  1303               	bcf	3,6	;RP1=0, select bank1
   656  0160  0187               	clrf	7	;volatile
   657  0161                     l798:
   658                           
   659                           ;Prueba.c: 124:     PORTC = 0;
   660  0161  1283               	bcf	3,5	;RP0=0, select bank0
   661  0162  1303               	bcf	3,6	;RP1=0, select bank0
   662  0163  0187               	clrf	7	;volatile
   663  0164                     l800:
   664                           
   665                           ;Prueba.c: 125:     TRISD = 0;
   666  0164  1683               	bsf	3,5	;RP0=1, select bank1
   667  0165  1303               	bcf	3,6	;RP1=0, select bank1
   668  0166  0188               	clrf	8	;volatile
   669  0167                     l802:
   670                           
   671                           ;Prueba.c: 126:     PORTD = 0;
   672  0167  1283               	bcf	3,5	;RP0=0, select bank0
   673  0168  1303               	bcf	3,6	;RP1=0, select bank0
   674  0169  0188               	clrf	8	;volatile
   675  016A                     l804:
   676                           
   677                           ;Prueba.c: 127:     TRISE = 0;
   678  016A  1683               	bsf	3,5	;RP0=1, select bank1
   679  016B  1303               	bcf	3,6	;RP1=0, select bank1
   680  016C  0189               	clrf	9	;volatile
   681  016D                     l806:
   682                           
   683                           ;Prueba.c: 128:     PORTE = 0;
   684  016D  1283               	bcf	3,5	;RP0=0, select bank0
   685  016E  1303               	bcf	3,6	;RP1=0, select bank0
   686  016F  0189               	clrf	9	;volatile
   687  0170                     l808:
   688                           
   689                           ;Prueba.c: 129:     INTCONbits.GIE = 1;
   690  0170  178B               	bsf	11,7	;volatile
   691  0171                     l810:
   692                           
   693                           ;Prueba.c: 130:     INTCONbits.RBIE = 1;
   694  0171  158B               	bsf	11,3	;volatile
   695  0172                     l812:
   696                           
   697                           ;Prueba.c: 131:     INTCONbits.RBIF = 0;
   698  0172  100B               	bcf	11,0	;volatile
   699  0173                     l814:
   700                           
   701                           ;Prueba.c: 132:     IOCBbits.IOCB0 = 1;
   702  0173  1683               	bsf	3,5	;RP0=1, select bank1
   703  0174  1303               	bcf	3,6	;RP1=0, select bank1
   704  0175  1416               	bsf	22,0	;volatile
   705  0176                     l816:
   706                           
   707                           ;Prueba.c: 133:     IOCBbits.IOCB1 = 1;
   708  0176  1496               	bsf	22,1	;volatile
   709  0177                     l818:
   710                           
   711                           ;Prueba.c: 134:     INTCONbits.PEIE = 1;
   712  0177  170B               	bsf	11,6	;volatile
   713  0178                     l820:
   714                           
   715                           ;Prueba.c: 135:     PIE1bits.ADIE = 1;
   716  0178  170C               	bsf	12,6	;volatile
   717  0179                     l822:
   718                           
   719                           ;Prueba.c: 136:     PIR1bits.ADIF = 0;
   720  0179  1283               	bcf	3,5	;RP0=0, select bank0
   721  017A  1303               	bcf	3,6	;RP1=0, select bank0
   722  017B  130C               	bcf	12,6	;volatile
   723  017C                     l824:
   724                           
   725                           ;Prueba.c: 137:     ADCON0 = 0b11000001;
   726  017C  30C1               	movlw	193
   727  017D  009F               	movwf	31	;volatile
   728  017E                     l826:
   729                           
   730                           ;Prueba.c: 138:     ADCON0bits.GO_nDONE = 1;
   731  017E  149F               	bsf	31,1	;volatile
   732  017F                     l126:
   733  017F  0008               	return
   734  0180                     __end_of_setup:
   735                           
   736                           	psect	text2
   737  00AA                     __ptext2:	
   738 ;; *************** function _initOsc *****************
   739 ;; Defined at:
   740 ;;		line 3 in file "Oscilador.c"
   741 ;; Parameters:    Size  Location     Type
   742 ;;  IRCF            1    wreg     unsigned char 
   743 ;; Auto vars:     Size  Location     Type
   744 ;;  IRCF            1    6[COMMON] unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  1    wreg      void 
   747 ;; Registers used:
   748 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   754 ;;      Params:         0       0       0       0       0
   755 ;;      Locals:         1       0       0       0       0
   756 ;;      Temps:          2       0       0       0       0
   757 ;;      Totals:         3       0       0       0       0
   758 ;;Total ram usage:        3 bytes
   759 ;; Hardware stack levels used:    1
   760 ;; Hardware stack levels required when called:    1
   761 ;; This function calls:
   762 ;;		Nothing
   763 ;; This function is called by:
   764 ;;		_setup
   765 ;; This function uses a non-reentrant model
   766 ;;
   767                           
   768                           
   769                           ;psect for function _initOsc
   770  00AA                     _initOsc:
   771                           
   772                           ;incstack = 0
   773                           ; Regs used in _initOsc: [wreg-fsr0h+status,2+status,0]
   774                           ;initOsc@IRCF stored from wreg
   775  00AA  00F6               	movwf	initOsc@IRCF
   776  00AB                     l724:
   777                           
   778                           ;Oscilador.c: 5:     switch(IRCF){
   779  00AB  28E2               	goto	l728
   780  00AC                     l6:	
   781                           ;Oscilador.c: 6:         case 0:
   782                           
   783                           
   784                           ;Oscilador.c: 7:             OSCCONbits.IRCF2 = 0;
   785  00AC  1683               	bsf	3,5	;RP0=1, select bank1
   786  00AD  1303               	bcf	3,6	;RP1=0, select bank1
   787  00AE  130F               	bcf	15,6	;volatile
   788                           
   789                           ;Oscilador.c: 8:             OSCCONbits.IRCF1 = 0;
   790  00AF  128F               	bcf	15,5	;volatile
   791                           
   792                           ;Oscilador.c: 9:             OSCCONbits.IRCF0 = 0;
   793  00B0  120F               	bcf	15,4	;volatile
   794                           
   795                           ;Oscilador.c: 10:             break;
   796  00B1  2904               	goto	l7
   797  00B2                     l8:	
   798                           ;Oscilador.c: 11:          case 1:
   799                           
   800                           
   801                           ;Oscilador.c: 12:             OSCCONbits.IRCF2 = 0;
   802  00B2  1683               	bsf	3,5	;RP0=1, select bank1
   803  00B3  1303               	bcf	3,6	;RP1=0, select bank1
   804  00B4  130F               	bcf	15,6	;volatile
   805                           
   806                           ;Oscilador.c: 13:             OSCCONbits.IRCF1 = 0;
   807  00B5  128F               	bcf	15,5	;volatile
   808                           
   809                           ;Oscilador.c: 14:             OSCCONbits.IRCF0 = 1;
   810  00B6  160F               	bsf	15,4	;volatile
   811                           
   812                           ;Oscilador.c: 15:             break;
   813  00B7  2904               	goto	l7
   814  00B8                     l9:	
   815                           ;Oscilador.c: 16:         case 2:
   816                           
   817                           
   818                           ;Oscilador.c: 17:             OSCCONbits.IRCF2 = 0;
   819  00B8  1683               	bsf	3,5	;RP0=1, select bank1
   820  00B9  1303               	bcf	3,6	;RP1=0, select bank1
   821  00BA  130F               	bcf	15,6	;volatile
   822                           
   823                           ;Oscilador.c: 18:             OSCCONbits.IRCF1 = 1;
   824  00BB  168F               	bsf	15,5	;volatile
   825                           
   826                           ;Oscilador.c: 19:             OSCCONbits.IRCF0 = 0;
   827  00BC  120F               	bcf	15,4	;volatile
   828                           
   829                           ;Oscilador.c: 20:             break;
   830  00BD  2904               	goto	l7
   831  00BE                     l10:	
   832                           ;Oscilador.c: 21:         case 3:
   833                           
   834                           
   835                           ;Oscilador.c: 22:             OSCCONbits.IRCF2 = 0;
   836  00BE  1683               	bsf	3,5	;RP0=1, select bank1
   837  00BF  1303               	bcf	3,6	;RP1=0, select bank1
   838  00C0  130F               	bcf	15,6	;volatile
   839                           
   840                           ;Oscilador.c: 23:             OSCCONbits.IRCF1 = 1;
   841  00C1  168F               	bsf	15,5	;volatile
   842                           
   843                           ;Oscilador.c: 24:             OSCCONbits.IRCF0 = 1;
   844  00C2  160F               	bsf	15,4	;volatile
   845                           
   846                           ;Oscilador.c: 25:             break;
   847  00C3  2904               	goto	l7
   848  00C4                     l11:	
   849                           ;Oscilador.c: 26:         case 4:
   850                           
   851                           
   852                           ;Oscilador.c: 27:             OSCCONbits.IRCF2 = 1;
   853  00C4  1683               	bsf	3,5	;RP0=1, select bank1
   854  00C5  1303               	bcf	3,6	;RP1=0, select bank1
   855  00C6  170F               	bsf	15,6	;volatile
   856                           
   857                           ;Oscilador.c: 28:             OSCCONbits.IRCF1 = 0;
   858  00C7  128F               	bcf	15,5	;volatile
   859                           
   860                           ;Oscilador.c: 29:             OSCCONbits.IRCF0 = 0;
   861  00C8  120F               	bcf	15,4	;volatile
   862                           
   863                           ;Oscilador.c: 30:             break;
   864  00C9  2904               	goto	l7
   865  00CA                     l12:	
   866                           ;Oscilador.c: 31:         case 5:
   867                           
   868                           
   869                           ;Oscilador.c: 32:             OSCCONbits.IRCF2 = 1;
   870  00CA  1683               	bsf	3,5	;RP0=1, select bank1
   871  00CB  1303               	bcf	3,6	;RP1=0, select bank1
   872  00CC  170F               	bsf	15,6	;volatile
   873                           
   874                           ;Oscilador.c: 33:             OSCCONbits.IRCF1 = 0;
   875  00CD  128F               	bcf	15,5	;volatile
   876                           
   877                           ;Oscilador.c: 34:             OSCCONbits.IRCF0 = 1;
   878  00CE  160F               	bsf	15,4	;volatile
   879                           
   880                           ;Oscilador.c: 35:             break;
   881  00CF  2904               	goto	l7
   882  00D0                     l13:	
   883                           ;Oscilador.c: 36:         case 6:
   884                           
   885                           
   886                           ;Oscilador.c: 37:             OSCCONbits.IRCF2 = 1;
   887  00D0  1683               	bsf	3,5	;RP0=1, select bank1
   888  00D1  1303               	bcf	3,6	;RP1=0, select bank1
   889  00D2  170F               	bsf	15,6	;volatile
   890                           
   891                           ;Oscilador.c: 38:             OSCCONbits.IRCF1 = 1;
   892  00D3  168F               	bsf	15,5	;volatile
   893                           
   894                           ;Oscilador.c: 39:             OSCCONbits.IRCF0 = 0;
   895  00D4  120F               	bcf	15,4	;volatile
   896                           
   897                           ;Oscilador.c: 40:             break;
   898  00D5  2904               	goto	l7
   899  00D6                     l14:	
   900                           ;Oscilador.c: 41:         case 7:
   901                           
   902                           
   903                           ;Oscilador.c: 42:             OSCCONbits.IRCF2 = 1;
   904  00D6  1683               	bsf	3,5	;RP0=1, select bank1
   905  00D7  1303               	bcf	3,6	;RP1=0, select bank1
   906  00D8  170F               	bsf	15,6	;volatile
   907                           
   908                           ;Oscilador.c: 43:             OSCCONbits.IRCF1 = 1;
   909  00D9  168F               	bsf	15,5	;volatile
   910                           
   911                           ;Oscilador.c: 44:             OSCCONbits.IRCF0 = 1;
   912  00DA  160F               	bsf	15,4	;volatile
   913                           
   914                           ;Oscilador.c: 45:             break;
   915  00DB  2904               	goto	l7
   916  00DC                     l15:	
   917                           ;Oscilador.c: 46:         default:
   918                           
   919                           
   920                           ;Oscilador.c: 47:             OSCCONbits.IRCF2 = 1;
   921  00DC  1683               	bsf	3,5	;RP0=1, select bank1
   922  00DD  1303               	bcf	3,6	;RP1=0, select bank1
   923  00DE  170F               	bsf	15,6	;volatile
   924                           
   925                           ;Oscilador.c: 48:             OSCCONbits.IRCF1 = 1;
   926  00DF  168F               	bsf	15,5	;volatile
   927                           
   928                           ;Oscilador.c: 49:             OSCCONbits.IRCF0 = 0;
   929  00E0  120F               	bcf	15,4	;volatile
   930                           
   931                           ;Oscilador.c: 50:             break;
   932  00E1  2904               	goto	l7
   933  00E2                     l728:
   934  00E2  0876               	movf	initOsc@IRCF,w
   935  00E3  00F4               	movwf	??_initOsc
   936  00E4  01F5               	clrf	??_initOsc+1
   937                           
   938                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   939                           ; Switch size 1, requested type "simple"
   940                           ; Number of cases is 1, Range of values is 0 to 0
   941                           ; switch strategies available:
   942                           ; Name         Instructions Cycles
   943                           ; simple_byte            4     3 (average)
   944                           ; direct_byte           11     8 (fixed)
   945                           ; jumptable            260     6 (fixed)
   946                           ;	Chosen strategy is simple_byte
   947  00E5  0875               	movf	??_initOsc+1,w
   948  00E6  3A00               	xorlw	0	; case 0
   949  00E7  1903               	skipnz
   950  00E8  28EA               	goto	l912
   951  00E9  28DC               	goto	l15
   952  00EA                     l912:
   953                           
   954                           ; Switch size 1, requested type "simple"
   955                           ; Number of cases is 8, Range of values is 0 to 7
   956                           ; switch strategies available:
   957                           ; Name         Instructions Cycles
   958                           ; simple_byte           25    13 (average)
   959                           ; direct_byte           32     8 (fixed)
   960                           ; jumptable            260     6 (fixed)
   961                           ;	Chosen strategy is simple_byte
   962  00EA  0874               	movf	??_initOsc,w
   963  00EB  3A00               	xorlw	0	; case 0
   964  00EC  1903               	skipnz
   965  00ED  28AC               	goto	l6
   966  00EE  3A01               	xorlw	1	; case 1
   967  00EF  1903               	skipnz
   968  00F0  28B2               	goto	l8
   969  00F1  3A03               	xorlw	3	; case 2
   970  00F2  1903               	skipnz
   971  00F3  28B8               	goto	l9
   972  00F4  3A01               	xorlw	1	; case 3
   973  00F5  1903               	skipnz
   974  00F6  28BE               	goto	l10
   975  00F7  3A07               	xorlw	7	; case 4
   976  00F8  1903               	skipnz
   977  00F9  28C4               	goto	l11
   978  00FA  3A01               	xorlw	1	; case 5
   979  00FB  1903               	skipnz
   980  00FC  28CA               	goto	l12
   981  00FD  3A03               	xorlw	3	; case 6
   982  00FE  1903               	skipnz
   983  00FF  28D0               	goto	l13
   984  0100  3A01               	xorlw	1	; case 7
   985  0101  1903               	skipnz
   986  0102  28D6               	goto	l14
   987  0103  28DC               	goto	l15
   988  0104                     l7:
   989                           
   990                           ;Oscilador.c: 52:     OSCCONbits.SCS = 1;
   991  0104  140F               	bsf	15,0	;volatile
   992  0105                     l16:
   993  0105  0008               	return
   994  0106                     __end_of_initOsc:
   995                           
   996                           	psect	text3
   997  0017                     __ptext3:	
   998 ;; *************** function _display *****************
   999 ;; Defined at:
  1000 ;;		line 5 in file "Display.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  ADC_VALOR       1    wreg     unsigned char 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  ADC_VALOR       1    6[COMMON] unsigned char 
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  1    wreg      unsigned char 
  1007 ;; Registers used:
  1008 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1014 ;;      Params:         0       0       0       0       0
  1015 ;;      Locals:         1       0       0       0       0
  1016 ;;      Temps:          2       0       0       0       0
  1017 ;;      Totals:         3       0       0       0       0
  1018 ;;Total ram usage:        3 bytes
  1019 ;; Hardware stack levels used:    1
  1020 ;; Hardware stack levels required when called:    1
  1021 ;; This function calls:
  1022 ;;		Nothing
  1023 ;; This function is called by:
  1024 ;;		_main
  1025 ;;		_DisplayADC
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           
  1030                           ;psect for function _display
  1031  0017                     _display:
  1032                           
  1033                           ;incstack = 0
  1034                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0]
  1035                           ;display@ADC_VALOR stored from wreg
  1036  0017  00F6               	movwf	display@ADC_VALOR
  1037  0018                     l734:
  1038                           
  1039                           ;Display.c: 7:     switch(ADC_VALOR){
  1040  0018  286E               	goto	l772
  1041  0019                     l736:
  1042                           
  1043                           ;Display.c: 9:             Valor_hex = 0b00111111;
  1044  0019  303F               	movlw	63
  1045  001A  00F4               	movwf	??_display
  1046  001B  0874               	movf	??_display,w
  1047  001C  00FB               	movwf	_Valor_hex
  1048                           
  1049                           ;Display.c: 10:             break;
  1050  001D  28A8               	goto	l774
  1051  001E                     l738:
  1052                           
  1053                           ;Display.c: 12:             Valor_hex = 0b000000110;
  1054  001E  3006               	movlw	6
  1055  001F  00F4               	movwf	??_display
  1056  0020  0874               	movf	??_display,w
  1057  0021  00FB               	movwf	_Valor_hex
  1058                           
  1059                           ;Display.c: 13:             break;
  1060  0022  28A8               	goto	l774
  1061  0023                     l740:
  1062                           
  1063                           ;Display.c: 15:             Valor_hex = 0b11011010;
  1064  0023  30DA               	movlw	218
  1065  0024  00F4               	movwf	??_display
  1066  0025  0874               	movf	??_display,w
  1067  0026  00FB               	movwf	_Valor_hex
  1068                           
  1069                           ;Display.c: 16:             break;
  1070  0027  28A8               	goto	l774
  1071  0028                     l742:
  1072                           
  1073                           ;Display.c: 18:             Valor_hex = 0b11110010;
  1074  0028  30F2               	movlw	242
  1075  0029  00F4               	movwf	??_display
  1076  002A  0874               	movf	??_display,w
  1077  002B  00FB               	movwf	_Valor_hex
  1078                           
  1079                           ;Display.c: 19:             break;
  1080  002C  28A8               	goto	l774
  1081  002D                     l744:
  1082                           
  1083                           ;Display.c: 21:             Valor_hex = 0b01100110;
  1084  002D  3066               	movlw	102
  1085  002E  00F4               	movwf	??_display
  1086  002F  0874               	movf	??_display,w
  1087  0030  00FB               	movwf	_Valor_hex
  1088                           
  1089                           ;Display.c: 22:             break;
  1090  0031  28A8               	goto	l774
  1091  0032                     l746:
  1092                           
  1093                           ;Display.c: 24:             Valor_hex = 0b10110110;
  1094  0032  30B6               	movlw	182
  1095  0033  00F4               	movwf	??_display
  1096  0034  0874               	movf	??_display,w
  1097  0035  00FB               	movwf	_Valor_hex
  1098                           
  1099                           ;Display.c: 25:             break;
  1100  0036  28A8               	goto	l774
  1101  0037                     l748:
  1102                           
  1103                           ;Display.c: 27:             Valor_hex = 0b10111110;
  1104  0037  30BE               	movlw	190
  1105  0038  00F4               	movwf	??_display
  1106  0039  0874               	movf	??_display,w
  1107  003A  00FB               	movwf	_Valor_hex
  1108                           
  1109                           ;Display.c: 28:             break;
  1110  003B  28A8               	goto	l774
  1111  003C                     l750:
  1112                           
  1113                           ;Display.c: 30:             Valor_hex = 0b11100000;
  1114  003C  30E0               	movlw	224
  1115  003D  00F4               	movwf	??_display
  1116  003E  0874               	movf	??_display,w
  1117  003F  00FB               	movwf	_Valor_hex
  1118                           
  1119                           ;Display.c: 31:             break;
  1120  0040  28A8               	goto	l774
  1121  0041                     l752:
  1122                           
  1123                           ;Display.c: 33:             Valor_hex = 0b11111110;
  1124  0041  30FE               	movlw	254
  1125  0042  00F4               	movwf	??_display
  1126  0043  0874               	movf	??_display,w
  1127  0044  00FB               	movwf	_Valor_hex
  1128                           
  1129                           ;Display.c: 34:             break;
  1130  0045  28A8               	goto	l774
  1131  0046                     l754:
  1132                           
  1133                           ;Display.c: 36:             Valor_hex = 0b11110110;
  1134  0046  30F6               	movlw	246
  1135  0047  00F4               	movwf	??_display
  1136  0048  0874               	movf	??_display,w
  1137  0049  00FB               	movwf	_Valor_hex
  1138                           
  1139                           ;Display.c: 37:             break;
  1140  004A  28A8               	goto	l774
  1141  004B                     l756:
  1142                           
  1143                           ;Display.c: 39:             Valor_hex = 0b11101110;
  1144  004B  30EE               	movlw	238
  1145  004C  00F4               	movwf	??_display
  1146  004D  0874               	movf	??_display,w
  1147  004E  00FB               	movwf	_Valor_hex
  1148                           
  1149                           ;Display.c: 40:             break;
  1150  004F  28A8               	goto	l774
  1151  0050                     l758:
  1152                           
  1153                           ;Display.c: 42:             Valor_hex = 0b00111110;
  1154  0050  303E               	movlw	62
  1155  0051  00F4               	movwf	??_display
  1156  0052  0874               	movf	??_display,w
  1157  0053  00FB               	movwf	_Valor_hex
  1158                           
  1159                           ;Display.c: 43:             break;
  1160  0054  28A8               	goto	l774
  1161  0055                     l760:
  1162                           
  1163                           ;Display.c: 45:             Valor_hex = 0b10011100;
  1164  0055  309C               	movlw	156
  1165  0056  00F4               	movwf	??_display
  1166  0057  0874               	movf	??_display,w
  1167  0058  00FB               	movwf	_Valor_hex
  1168                           
  1169                           ;Display.c: 46:             break;
  1170  0059  28A8               	goto	l774
  1171  005A                     l762:
  1172                           
  1173                           ;Display.c: 48:             Valor_hex = 0b01111010 ;
  1174  005A  307A               	movlw	122
  1175  005B  00F4               	movwf	??_display
  1176  005C  0874               	movf	??_display,w
  1177  005D  00FB               	movwf	_Valor_hex
  1178                           
  1179                           ;Display.c: 49:             break;
  1180  005E  28A8               	goto	l774
  1181  005F                     l764:
  1182                           
  1183                           ;Display.c: 51:             Valor_hex = 0b10011110;
  1184  005F  309E               	movlw	158
  1185  0060  00F4               	movwf	??_display
  1186  0061  0874               	movf	??_display,w
  1187  0062  00FB               	movwf	_Valor_hex
  1188                           
  1189                           ;Display.c: 52:             break;
  1190  0063  28A8               	goto	l774
  1191  0064                     l766:
  1192                           
  1193                           ;Display.c: 54:             Valor_hex = 0b10001110;
  1194  0064  308E               	movlw	142
  1195  0065  00F4               	movwf	??_display
  1196  0066  0874               	movf	??_display,w
  1197  0067  00FB               	movwf	_Valor_hex
  1198                           
  1199                           ;Display.c: 55:             break;
  1200  0068  28A8               	goto	l774
  1201  0069                     l768:
  1202                           
  1203                           ;Display.c: 57:             Valor_hex = 0b11111100;
  1204  0069  30FC               	movlw	252
  1205  006A  00F4               	movwf	??_display
  1206  006B  0874               	movf	??_display,w
  1207  006C  00FB               	movwf	_Valor_hex
  1208                           
  1209                           ;Display.c: 58:             break;
  1210  006D  28A8               	goto	l774
  1211  006E                     l772:
  1212  006E  0876               	movf	display@ADC_VALOR,w
  1213  006F  00F4               	movwf	??_display
  1214  0070  01F5               	clrf	??_display+1
  1215                           
  1216                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1217                           ; Switch size 1, requested type "simple"
  1218                           ; Number of cases is 1, Range of values is 0 to 0
  1219                           ; switch strategies available:
  1220                           ; Name         Instructions Cycles
  1221                           ; simple_byte            4     3 (average)
  1222                           ; direct_byte           11     8 (fixed)
  1223                           ; jumptable            260     6 (fixed)
  1224                           ;	Chosen strategy is simple_byte
  1225  0071  0875               	movf	??_display+1,w
  1226  0072  3A00               	xorlw	0	; case 0
  1227  0073  1903               	skipnz
  1228  0074  2876               	goto	l914
  1229  0075  2869               	goto	l768
  1230  0076                     l914:
  1231                           
  1232                           ; Switch size 1, requested type "simple"
  1233                           ; Number of cases is 16, Range of values is 0 to 15
  1234                           ; switch strategies available:
  1235                           ; Name         Instructions Cycles
  1236                           ; simple_byte           49    25 (average)
  1237                           ; direct_byte           56     8 (fixed)
  1238                           ; jumptable            260     6 (fixed)
  1239                           ;	Chosen strategy is simple_byte
  1240  0076  0874               	movf	??_display,w
  1241  0077  3A00               	xorlw	0	; case 0
  1242  0078  1903               	skipnz
  1243  0079  2819               	goto	l736
  1244  007A  3A01               	xorlw	1	; case 1
  1245  007B  1903               	skipnz
  1246  007C  281E               	goto	l738
  1247  007D  3A03               	xorlw	3	; case 2
  1248  007E  1903               	skipnz
  1249  007F  2823               	goto	l740
  1250  0080  3A01               	xorlw	1	; case 3
  1251  0081  1903               	skipnz
  1252  0082  2828               	goto	l742
  1253  0083  3A07               	xorlw	7	; case 4
  1254  0084  1903               	skipnz
  1255  0085  282D               	goto	l744
  1256  0086  3A01               	xorlw	1	; case 5
  1257  0087  1903               	skipnz
  1258  0088  2832               	goto	l746
  1259  0089  3A03               	xorlw	3	; case 6
  1260  008A  1903               	skipnz
  1261  008B  2837               	goto	l748
  1262  008C  3A01               	xorlw	1	; case 7
  1263  008D  1903               	skipnz
  1264  008E  283C               	goto	l750
  1265  008F  3A0F               	xorlw	15	; case 8
  1266  0090  1903               	skipnz
  1267  0091  2841               	goto	l752
  1268  0092  3A01               	xorlw	1	; case 9
  1269  0093  1903               	skipnz
  1270  0094  2846               	goto	l754
  1271  0095  3A03               	xorlw	3	; case 10
  1272  0096  1903               	skipnz
  1273  0097  284B               	goto	l756
  1274  0098  3A01               	xorlw	1	; case 11
  1275  0099  1903               	skipnz
  1276  009A  2850               	goto	l758
  1277  009B  3A07               	xorlw	7	; case 12
  1278  009C  1903               	skipnz
  1279  009D  2855               	goto	l760
  1280  009E  3A01               	xorlw	1	; case 13
  1281  009F  1903               	skipnz
  1282  00A0  285A               	goto	l762
  1283  00A1  3A03               	xorlw	3	; case 14
  1284  00A2  1903               	skipnz
  1285  00A3  285F               	goto	l764
  1286  00A4  3A01               	xorlw	1	; case 15
  1287  00A5  1903               	skipnz
  1288  00A6  2864               	goto	l766
  1289  00A7  2869               	goto	l768
  1290  00A8                     l774:
  1291                           
  1292                           ;Display.c: 60:    return Valor_hex;
  1293  00A8  087B               	movf	_Valor_hex,w
  1294  00A9                     l40:
  1295  00A9  0008               	return
  1296  00AA                     __end_of_display:
  1297                           
  1298                           	psect	text4
  1299  01AF                     __ptext4:	
  1300 ;; *************** function _ContadorLEDS *****************
  1301 ;; Defined at:
  1302 ;;		line 144 in file "Prueba.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1316 ;;      Params:         0       0       0       0       0
  1317 ;;      Locals:         0       0       0       0       0
  1318 ;;      Temps:          0       0       0       0       0
  1319 ;;      Totals:         0       0       0       0       0
  1320 ;;Total ram usage:        0 bytes
  1321 ;; Hardware stack levels used:    1
  1322 ;; Hardware stack levels required when called:    1
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_main
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           
  1331                           ;psect for function _ContadorLEDS
  1332  01AF                     _ContadorLEDS:
  1333  01AF                     l828:	
  1334                           ;incstack = 0
  1335                           ; Regs used in _ContadorLEDS: [wreg]
  1336                           
  1337                           
  1338                           ;Prueba.c: 145:     PORTC = contador;
  1339  01AF  087A               	movf	_contador,w
  1340  01B0  1283               	bcf	3,5	;RP0=0, select bank0
  1341  01B1  1303               	bcf	3,6	;RP1=0, select bank0
  1342  01B2  0087               	movwf	7	;volatile
  1343  01B3                     l129:
  1344  01B3  0008               	return
  1345  01B4                     __end_of_ContadorLEDS:
  1346                           
  1347                           	psect	text5
  1348  0106                     __ptext5:	
  1349 ;; *************** function _ISR *****************
  1350 ;; Defined at:
  1351 ;;		line 53 in file "Prueba.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;		None
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;		None
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, status,2, status,0
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1365 ;;      Params:         0       0       0       0       0
  1366 ;;      Locals:         0       0       0       0       0
  1367 ;;      Temps:          4       0       0       0       0
  1368 ;;      Totals:         4       0       0       0       0
  1369 ;;Total ram usage:        4 bytes
  1370 ;; Hardware stack levels used:    1
  1371 ;; This function calls:
  1372 ;;		Nothing
  1373 ;; This function is called by:
  1374 ;;		Interrupt level 1
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           
  1379                           ;psect for function _ISR
  1380  0106                     _ISR:
  1381  0106                     i1l830:
  1382                           
  1383                           ;Prueba.c: 55:     if (INTCONbits.RBIF == 1){
  1384  0106  1C0B               	btfss	11,0	;volatile
  1385  0107  2909               	goto	u1_21
  1386  0108  290A               	goto	u1_20
  1387  0109                     u1_21:
  1388  0109  2923               	goto	i1l846
  1389  010A                     u1_20:
  1390  010A                     i1l832:
  1391                           
  1392                           ;Prueba.c: 56:         if (PORTBbits.RB0 == 1){
  1393  010A  1283               	bcf	3,5	;RP0=0, select bank0
  1394  010B  1303               	bcf	3,6	;RP1=0, select bank0
  1395  010C  1C06               	btfss	6,0	;volatile
  1396  010D  290F               	goto	u2_21
  1397  010E  2910               	goto	u2_20
  1398  010F                     u2_21:
  1399  010F  2918               	goto	i1l838
  1400  0110                     u2_20:
  1401  0110                     i1l105:	
  1402                           ;Prueba.c: 59:             }
  1403                           
  1404                           
  1405                           ;Prueba.c: 57:             while (PORTBbits.RB0 == 1){
  1406  0110  1806               	btfsc	6,0	;volatile
  1407  0111  2913               	goto	u3_21
  1408  0112  2914               	goto	u3_20
  1409  0113                     u3_21:
  1410  0113  2910               	goto	i1l105
  1411  0114                     u3_20:
  1412  0114                     i1l836:
  1413                           
  1414                           ;Prueba.c: 60:             contador++;
  1415  0114  3001               	movlw	1
  1416  0115  00F0               	movwf	??_ISR
  1417  0116  0870               	movf	??_ISR,w
  1418  0117  07FA               	addwf	_contador,f
  1419  0118                     i1l838:
  1420                           
  1421                           ;Prueba.c: 62:         if (PORTBbits.RB1 == 1){
  1422  0118  1C86               	btfss	6,1	;volatile
  1423  0119  291B               	goto	u4_21
  1424  011A  291C               	goto	u4_20
  1425  011B                     u4_21:
  1426  011B  2922               	goto	i1l844
  1427  011C                     u4_20:
  1428  011C                     i1l109:	
  1429                           ;Prueba.c: 65:             }
  1430                           
  1431                           
  1432                           ;Prueba.c: 63:             while (PORTBbits.RB1 == 1){
  1433  011C  1886               	btfsc	6,1	;volatile
  1434  011D  291F               	goto	u5_21
  1435  011E  2920               	goto	u5_20
  1436  011F                     u5_21:
  1437  011F  291C               	goto	i1l109
  1438  0120                     u5_20:
  1439  0120                     i1l842:
  1440                           
  1441                           ;Prueba.c: 66:             contador--;
  1442  0120  3001               	movlw	1
  1443  0121  02FA               	subwf	_contador,f
  1444  0122                     i1l844:
  1445                           
  1446                           ;Prueba.c: 68:         INTCONbits.RBIF = 0;
  1447  0122  100B               	bcf	11,0	;volatile
  1448  0123                     i1l846:
  1449                           
  1450                           ;Prueba.c: 71:     if (PIR1bits.ADIF == 1){
  1451  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1452  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1453  0125  1F0C               	btfss	12,6	;volatile
  1454  0126  2928               	goto	u6_21
  1455  0127  2929               	goto	u6_20
  1456  0128                     u6_21:
  1457  0128  293E               	goto	i1l113
  1458  0129                     u6_20:
  1459  0129                     i1l848:
  1460                           
  1461                           ;Prueba.c: 72:         ADC_VALOR = (ADRESL << 8) | ADRESH;
  1462  0129  1683               	bsf	3,5	;RP0=1, select bank1
  1463  012A  1303               	bcf	3,6	;RP1=0, select bank1
  1464  012B  081E               	movf	30,w	;volatile
  1465  012C  00F9               	movwf	_ADC_VALOR+1
  1466  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1467  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1468  012F  081E               	movf	30,w	;volatile
  1469  0130  00F8               	movwf	_ADC_VALOR
  1470  0131                     i1l850:
  1471                           
  1472                           ;Prueba.c: 73:         PIR1bits.ADIF = 0;
  1473  0131  130C               	bcf	12,6	;volatile
  1474                           
  1475                           ;Prueba.c: 74:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1476  0132  301A               	movlw	26
  1477  0133  00F1               	movwf	??_ISR+1
  1478  0134  30F8               	movlw	248
  1479  0135  00F0               	movwf	??_ISR
  1480  0136                     u8_27:
  1481  0136  0BF0               	decfsz	??_ISR,f
  1482  0137  2936               	goto	u8_27
  1483  0138  0BF1               	decfsz	??_ISR+1,f
  1484  0139  2936               	goto	u8_27
  1485  013A  0000               	nop
  1486  013B                     i1l852:
  1487                           
  1488                           ;Prueba.c: 75:         ADCON0bits.GO_nDONE = 1;
  1489  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1490  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1491  013D  149F               	bsf	31,1	;volatile
  1492  013E                     i1l113:
  1493  013E  0873               	movf	??_ISR+3,w
  1494  013F  008A               	movwf	10
  1495  0140  0E72               	swapf	??_ISR+2,w
  1496  0141  0083               	movwf	3
  1497  0142  0EFE               	swapf	btemp,f
  1498  0143  0E7E               	swapf	btemp,w
  1499  0144  0009               	retfie
  1500  0145                     __end_of_ISR:
  1501  007E                     btemp	set	126	;btemp
  1502  007E                     wtemp0	set	126
  1503                           
  1504                           	psect	intentry
  1505  0004                     __pintentry:	
  1506                           ;incstack = 0
  1507                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1508                           
  1509  0004                     interrupt_function:
  1510  007E                     saved_w	set	btemp
  1511  0004  00FE               	movwf	btemp
  1512  0005  0E03               	swapf	3,w
  1513  0006  00F2               	movwf	??_ISR+2
  1514  0007  080A               	movf	10,w
  1515  0008  00F3               	movwf	??_ISR+3
  1516  0009  120A  118A  2906   	ljmp	_ISR
  1517                           
  1518                           	psect	config
  1519                           
  1520                           ;Config register CONFIG1 @ 0x2007
  1521                           ;	Oscillator Selection bits
  1522                           ;	FOSC = XT, XT oscillator: Crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN
  1523                           ;	Watchdog Timer Enable bit
  1524                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1525                           ;	Power-up Timer Enable bit
  1526                           ;	PWRTE = OFF, PWRT disabled
  1527                           ;	RE3/MCLR pin function select bit
  1528                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1529                           ;	Code Protection bit
  1530                           ;	CP = OFF, Program memory code protection is disabled
  1531                           ;	Data Code Protection bit
  1532                           ;	CPD = OFF, Data memory code protection is disabled
  1533                           ;	Brown Out Reset Selection bits
  1534                           ;	BOREN = OFF, BOR disabled
  1535                           ;	Internal External Switchover bit
  1536                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1537                           ;	Fail-Safe Clock Monitor Enabled bit
  1538                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1539                           ;	Low Voltage Programming Enable bit
  1540                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1541                           ;	In-Circuit Debugger Mode bit
  1542                           ;	DEBUG = 0x1, unprogrammed default
  1543  2007                     	org	8199
  1544  2007  20D1               	dw	8401
  1545                           
  1546                           ;Config register CONFIG2 @ 0x2008
  1547                           ;	Brown-out Reset Selection bit
  1548                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1549                           ;	Flash Program Memory Self Write Enable bits
  1550                           ;	WRT = OFF, Write protection off
  1551  2008                     	org	8200
  1552  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_display
    _setup->_initOsc

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      30
                                              7 COMMON     1     1      0
                       _ContadorLEDS
                            _display
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      15
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              3     3      0      15
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _display                                              3     3      0      15
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ContadorLEDS                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ContadorLEDS
   _display
   _setup
     _initOsc

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       C      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Feb 01 13:21:21 2021

                      l6 00AC                        l7 0104                        l8 00B2  
                      l9 00B8                       l10 00BE                       l11 00C4  
                     l12 00CA                       l13 00D0                       l14 00D6  
                     l15 00DC                       l40 00A9                       l16 0105  
                     u70 01A4                       u71 01A3                       u75 01A0  
         ??_ContadorLEDS 0074                      l126 017F                      l119 01A8  
                    l129 01B3                      l800 0164                      l810 0171  
                    l802 0167                      l740 0023                      l724 00AB  
                    l820 0178                      l812 0172                      l804 016A  
                    l750 003C                      l742 0028                      l734 0018  
                    l822 0179                      l814 0173                      l806 016D  
                    l760 0055                      l752 0041                      l744 002D  
                    l736 0019                      l912 00EA                      l728 00E2  
                    l824 017C                      l816 0176                      l808 0170  
                    l914 0076                      l762 005A                      l754 0046  
                    l746 0032                      l738 001E                      l826 017E  
                    l818 0177                      l828 01AF                      l764 005F  
                    l756 004B                      l748 0037                      l772 006E  
                    l860 018B                      l766 0064                      l758 0050  
                    l774 00A8                      l790 0154                      l782 0145  
                    l862 018E                      l854 0180                      l768 0069  
                    l792 0157                      l784 014B                      l864 0197  
                    l856 0181                      l794 015B                      l786 014F  
                    l866 01A4                      l858 0186                      l796 015E  
                    l788 0150                      l798 0161                      _ISR 0106  
                   ?_ISR 0070                     u1_20 010A                     u1_21 0109  
                   u2_20 0110                     u2_21 010F                     u3_20 0114  
                   u3_21 0113                     u4_20 011C                     u4_21 011B  
                   u5_20 0120                     u5_21 011F                     u6_20 0129  
                   u6_21 0128                     u8_27 0136                     _main 0180  
                   btemp 007E                     start 000C                    ??_ISR 0070  
                  ?_main 0070                    _ANSEL 0188                    i1l113 013E  
                  i1l105 0110                    i1l109 011C                    i1l830 0106  
                  i1l832 010A                    i1l850 0131                    i1l842 0120  
                  i1l852 013B                    i1l844 0122                    i1l836 0114  
                  i1l838 0118                    i1l846 0123                    i1l848 0129  
                  _PORTA 0005                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _PORTE 0009                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _TRISE 0089          __end_of_display 00AA          __end_of_initOsc 0106  
                  _setup 0145                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 01AF  
                 ??_main 0077                   _ADCON0 001F                   _ADRESH 001E  
                 _ADRESL 009E              initOsc@IRCF 0076                   ?_setup 0070  
                 _ANSELH 0189     __end_of_ContadorLEDS 01B4                ??_display 0074  
              ??_initOsc 0074                   saved_w 007E  __end_of__initialization 0013  
         __pcstackCOMMON 0070            __end_of_setup 0180         display@ADC_VALOR 0076  
                ??_setup 0077               __pmaintext 0180               __pintentry 0004  
  __size_of_ContadorLEDS 0005                _ADC_VALOR 0078                  __ptext1 0145  
                __ptext2 00AA                  __ptext3 0017                  __ptext4 01AF  
                __ptext5 0106             _ContadorLEDS 01AF                  _display 0017  
           __size_of_ISR 003F                  _initOsc 00AA     end_of_initialization 0013  
              _PORTBbits 0006                _PORTEbits 0009      start_initialization 000F  
            __end_of_ISR 0145                _Valor_hex 007B              __pbssCOMMON 0078  
              ___latbits 0002                 ?_display 0070                 ?_initOsc 0070  
         __size_of_setup 003B        interrupt_function 0004                 _IOCBbits 0096  
               _PIE1bits 008C                 _PIR1bits 000C               _ADCON0bits 001F  
       __size_of_display 0093         __size_of_initOsc 005C                 _contador 007A  
          __size_of_main 002F               _INTCONbits 000B                 intlevel1 0000  
             _OSCCONbits 008F            ?_ContadorLEDS 0070  
